    Revert "Revert "Switch to NetBSD's strxfrm(3).""
    
    This reverts commit 8793e7c7d21a0434d1b5e63364c88b2b125a3d29,
    and fixes the build by building upstream NetBSD source as a
    separate library that's then swallowed whole into libc_common.
    
    Change-Id: I6c9317d8c48b5ccaf85a7b185bc07fb31176ff97
    Revert "Switch to NetBSD's strxfrm(3)."
    
    This reverts commit be1d78b0dc899a732c0e9d7515d3023e8004e368
    
    Change-Id: I11a95db474796f3da004f27652b081d5ba4ec9b4
    Switch to NetBSD's strxfrm(3).
    
    There were two bugs in our implementation. Intel found one, but another
    remainined, and tracking upstream is the way forward for functions where
    we add no value.
    
    Change-Id: Ida9bac0293fb2c4cbc942b1e0515ee0477c6538b
    Fix nice...
    
    ...by switching to the NetBSD implementation.
    
    Change-Id: I562b27b237a24ded95804035cc322c7bff12ff59
    Revert "Revert "Switch to NetBSD's strxfrm(3).""
    
    This reverts commit 8793e7c7d21a0434d1b5e63364c88b2b125a3d29,
    and fixes the build by building upstream NetBSD source as a
    separate library that's then swallowed whole into libc_common.
    
    Change-Id: I6c9317d8c48b5ccaf85a7b185bc07fb31176ff97
    New additions/bug fixes required/found when porting perf.
    
    New functions:
            tfind
            tsearch
            tdelete
            twalk
            tdestroy (GNU extension)
    
    Bug fix: the current implementation for realpath would crash
            if the second argument (resolved_path) is NULL.
    
    New headers:
            ar.h
            search.h
    
    Change-Id: Ib6c1e42fc186a6d597a6e5a9692b16acaa155804
    libc: add ftw / nftw functions
    
    Please see "man 3 ftw" for a description of the
    ftw / nftw functions.
    
    This code is taken directly from netbsd unmodified.
    
    Change-Id: Ia4879ac57212b424adf5281b5e92858e216d0f14
    Make strerror(3) and strsignal(3) thread-safe, and add psignal(3) and psiginfo(3).
    
    Change-Id: I426109db25e907980d6cb3a7a695796e45783b78
    Fix nice...
    
    ...by switching to the NetBSD implementation.
    
    Change-Id: I562b27b237a24ded95804035cc322c7bff12ff59
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: add ftw / nftw functions
    
    Please see "man 3 ftw" for a description of the
    ftw / nftw functions.
    
    This code is taken directly from netbsd unmodified.
    
    Change-Id: Ia4879ac57212b424adf5281b5e92858e216d0f14
    Fix nice...
    
    ...by switching to the NetBSD implementation.
    
    Change-Id: I562b27b237a24ded95804035cc322c7bff12ff59
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Switch to the current NetBSD regex implementation.
    
    Change-Id: If32b28dd85d6a7ab8957ab81d19fa4c0de9499d5
    Import regex from OpenBSD
    
    Change-Id: I7ad7d907ef65e4e345f94777d730813b1270a612
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Switch to the current NetBSD regex implementation.
    
    Change-Id: If32b28dd85d6a7ab8957ab81d19fa4c0de9499d5
    Import regex from OpenBSD
    
    Change-Id: I7ad7d907ef65e4e345f94777d730813b1270a612
    Switch to the current NetBSD regex implementation.
    
    Change-Id: If32b28dd85d6a7ab8957ab81d19fa4c0de9499d5
    Switch to the current NetBSD regex implementation.
    
    Change-Id: If32b28dd85d6a7ab8957ab81d19fa4c0de9499d5
    Switch to the current NetBSD regex implementation.
    
    Change-Id: If32b28dd85d6a7ab8957ab81d19fa4c0de9499d5
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    Import regex from OpenBSD
    
    Change-Id: I7ad7d907ef65e4e345f94777d730813b1270a612
    Switch to the current NetBSD regex implementation.
    
    Change-Id: If32b28dd85d6a7ab8957ab81d19fa4c0de9499d5
    Import regex from OpenBSD
    
    Change-Id: I7ad7d907ef65e4e345f94777d730813b1270a612
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Switch to the current NetBSD regex implementation.
    
    Change-Id: If32b28dd85d6a7ab8957ab81d19fa4c0de9499d5
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    Import regex from OpenBSD
    
    Change-Id: I7ad7d907ef65e4e345f94777d730813b1270a612
    Switch to the current NetBSD regex implementation.
    
    Change-Id: If32b28dd85d6a7ab8957ab81d19fa4c0de9499d5
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    Import regex from OpenBSD
    
    Change-Id: I7ad7d907ef65e4e345f94777d730813b1270a612
    Switch to the current NetBSD regex implementation.
    
    Change-Id: If32b28dd85d6a7ab8957ab81d19fa4c0de9499d5
    Import regex from OpenBSD
    
    Change-Id: I7ad7d907ef65e4e345f94777d730813b1270a612
    Switch to upstream NetBSD tdelete/tfind/tsearch.
    
    tdestroy is a GNU extension, so that stays.
    
    Change-Id: Iedebaff25ea7e92b1ab1dd4440da12b67b99aa40
    New additions/bug fixes required/found when porting perf.
    
    New functions:
            tfind
            tsearch
            tdelete
            twalk
            tdestroy (GNU extension)
    
    Bug fix: the current implementation for realpath would crash
            if the second argument (resolved_path) is NULL.
    
    New headers:
            ar.h
            search.h
    
    Change-Id: Ib6c1e42fc186a6d597a6e5a9692b16acaa155804
    Switch to upstream NetBSD tdelete/tfind/tsearch.
    
    tdestroy is a GNU extension, so that stays.
    
    Change-Id: Iedebaff25ea7e92b1ab1dd4440da12b67b99aa40
    New additions/bug fixes required/found when porting perf.
    
    New functions:
            tfind
            tsearch
            tdelete
            twalk
            tdestroy (GNU extension)
    
    Bug fix: the current implementation for realpath would crash
            if the second argument (resolved_path) is NULL.
    
    New headers:
            ar.h
            search.h
    
    Change-Id: Ib6c1e42fc186a6d597a6e5a9692b16acaa155804
    Switch to upstream NetBSD tdelete/tfind/tsearch.
    
    tdestroy is a GNU extension, so that stays.
    
    Change-Id: Iedebaff25ea7e92b1ab1dd4440da12b67b99aa40
    New additions/bug fixes required/found when porting perf.
    
    New functions:
            tfind
            tsearch
            tdelete
            twalk
            tdestroy (GNU extension)
    
    Bug fix: the current implementation for realpath would crash
            if the second argument (resolved_path) is NULL.
    
    New headers:
            ar.h
            search.h
    
    Change-Id: Ib6c1e42fc186a6d597a6e5a9692b16acaa155804
    Switch to the current NetBSD regex implementation.
    
    Change-Id: If32b28dd85d6a7ab8957ab81d19fa4c0de9499d5
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Revert "Revert "Switch to NetBSD's strxfrm(3).""
    
    This reverts commit 8793e7c7d21a0434d1b5e63364c88b2b125a3d29,
    and fixes the build by building upstream NetBSD source as a
    separate library that's then swallowed whole into libc_common.
    
    Change-Id: I6c9317d8c48b5ccaf85a7b185bc07fb31176ff97
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    improve readability of string: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    DO NOT MERGE Revert "Add the libcutils localtime_tz and mktime_t extensions to bionic."
    
    This reverts commit 3a936a4980046a7eeb8d53a3296058d8f3a1f770.
    
    We don't want this in jb-mr1.
    Add the libcutils localtime_tz and mktime_t extensions to bionic.
    
    Bug: 7012465
    Change-Id: Ib66f061e29199ba134545111dc79f9b50c8f4a21
    libc: Copy private C library declarations to private/
    
    This patch is the first in a series that aims at cleaning up the
    public C library headers (which end up being distributed with the NDK).
    
    <resolv.h> and <time.h> contain declarations that should not be public.
    They are used by other parts of the platform, but NDK applications should
    not use or rely on them.
    
    So copy them to private <bionic_time.h> and <resolv_iface.h> headers
    and use a guard macro to avoid conflicts when both headers are included
    at the same time.
    
    The idea is that we're going to fix the other platform modules to
    include these private headers. After this is done, we will remove the
    duplicate definitions from <resolv.h> and <time.h>
    
    Change-Id: I121c11936951c98ca7165e811126ed8a4a3a394d
    Add non-NDK internal API __pthread_gettid
    
    Tracking bugs 5267571 and 5090073 (for deadlock detection logs).
    
    Change-Id: Icb90f91ec1525607551c2234ef921bf88296484f
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    Handle pthread-related changes (mutex/atfork)
    
    First commit:
    
    Revert "Revert "am be741d47: am 2f460fbe: am 73b5cad9: Merge "bionic: Fix wrong kernel_id in pthread descriptor after fork()"""
    
    This reverts commit 06823da2f0c8b4a4ce4c45113032f03df85c94b8.
    
    Second commit:
    
    bionic: fix atfork hanlder_mutex deadlock
    
    This cherry-picks commit 34e89c232dd5645fe3b5f9b40856d8e3e4cae57a
    
    After applying the kernel_id fix, the system refused to boot up and we
    got following crash log:
    I/DEBUG   (  113): pid: 618, tid: 618  >>> org.simalliance.openmobileapi.service:remote <<<
    I/DEBUG   (  113): signal 16 (SIGSTKFLT), code -6 (?), fault addr --------
    I/DEBUG   (  113):  eax fffffe00  ebx b77de994  ecx 00000080  edx 00724002
    I/DEBUG   (  113):  esi 00000000  edi 00004000
    I/DEBUG   (  113):  xcs 00000073  xds 0000007b  xes 0000007b  xfs 00000000 xss 0000007b
    I/DEBUG   (  113):  eip b7761351  ebp bfdf3de8  esp bfdf3dc4  flags 00000202
    I/DEBUG   (  113):     #00  eip: 00015351  /system/lib/libc.so
    I/DEBUG   (  113):     #01  eip: 0000d13c  /system/lib/libc.so (pthread_mutex_lock)
    I/DEBUG   (  113):     #02  eip: 00077b48  /system/lib/libc.so (__bionic_atfork_run_prepare)
    I/DEBUG   (  113):     #03  eip: 00052cdb  /system/lib/libc.so (fork)
    I/DEBUG   (  113):     #04  eip: 0009ae91  /system/lib/libdvm.so (_Z18dvmOptimizeDexFileillPKcjjb)
    I/DEBUG   (  113):     #05  eip: 000819d6  /system/lib/libdvm.so (_Z14dvmJarFileOpenPKcS0_PP7JarFileb)
    I/DEBUG   (  113):     #06  eip: 000b175e  /system/lib/libdvm.so (_ZL40Dalvik_dalvik_system_DexFile_openDexFilePKjP6JValue)
    I/DEBUG   (  113):     #07  eip: 0011fb94  /system/lib/libdvm.so
    
    Root cause:
    The atfork uses the mutex handler_mutex to protect the atfork_head. The
    parent will call __bionic_atfork_run_prepare() to lock the handler_mutex,
    and need both the parent and child to unlock their own copy of handler_mutex
    after fork. At that time, the owner of hanlder_mutex is set as the parent.
    If we apply the kernel_id fix, then the child's kernel_id will be set as
    child's tid.
    The handler_mutex is a recursive lock, and pthread_mutex_unlock(&hander_mutex)
    will fail because the mutex owner is the parent, while the current tid
    (__get_thread()->kernel_id) is child, not matched with the mutex owner.
    At that time, the handler_mutex is left in lock state.If the child wants to
    fork other process after than, then it will try to lock handler_mutex, and
    then be deadlocked.
    
    Fix:
    Since the child has its own copy of vm space from the the parent, the
    child space's handler_mutex should be reset to the initialized state.
    
    Change-Id: I3907dd9a153418fb78862f2aa6d0302c375d9e27
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Chenyang Du <chenyang.du@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    
    Change-Id: Ic8072f366a877443a60fe215f3c00b3df5a259c8
    Revert "am be741d47: am 2f460fbe: am 73b5cad9: Merge "bionic: Fix wrong kernel_id in pthread descriptor after fork()""
    
    This reverts commit 76d56cf4a94e875a8b621025e2780775247adb6e, reversing
    changes made to c59ba4595be25a1213955233fcf9bcd1afe6438e.
    
    Bug: 6157577
    bionic: Fix wrong kernel_id in pthread descriptor after fork()
    
    After forking, the kernel_id field in the phtread_internal_t returned by pthread_self()
    is incorrect --- it's the tid from the parent, not the new tid of the
    child.
    
    The root cause is that: currently the kernel_id is set by
    _init_thread(), which is called in 2 cases:
    (1) called by __libc_init_common(). That happens when the execv( ) is
    called after fork( ). But when the zygote tries to fork the android
    application, the child application doesn't call execv( ), instread, it
    tries to call the Java main method directly.
    (2) called by pthread_create(). That happens when a new thread is
    created.
    
    For the lead thread which is the thread created by fork(), it should
    call execv() but it doesn't, as described in (1) above. So its kernel_id
    will inherit the parent's kernel_id.
    
    Fixed it in this patch.
    
    Change-Id: I63513e82af40ec5fe51fbb69456b1843e4bc0fc7
    Signed-off-by: Chenyang Du <chenyang.du@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Add non-NDK internal API __pthread_gettid
    
    Tracking bugs 5267571 and 5090073 (for deadlock detection logs).
    
    Change-Id: Icb90f91ec1525607551c2234ef921bf88296484f
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    arm: rewrite crtbegin* as C files.
    
    Rewrite
     crtbegin.S     -> crtbegin.c
     crtbegin_so.S  -> crtbegin_so.c
    
    This change allows us to generate PIC code without relying
    on text relocations.
    
    As a consequence of this rewrite, also rewrite
      __dso_handle.S    -> __dso_handle.c
      __dso_handle_so.S -> __dso_handle_so.c
      atexit.S          -> atexit.c
    
    In crtbegin.c _start, place the __PREINIT_ARRAY__, __INIT_ARRAY__,
    __FINI_ARRAY__, and __CTOR_LIST__ variables onto the stack, instead of
    passing a pointer to the text section of the binary.
    
    This change appears sorta wonky, as I attempted to preserve,
    as much as possible, the structure of the original assembly.
    As a result, you have C files including other C files, and other
    programming uglyness.
    
    Result: This change reduces the number of files with text-relocations
    from 315 to 19 on my Android build.
    
    Before:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      315
    
    After:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      19
    
    Change-Id: Ib9f98107c0eeabcb606e1ddc7ed7fc4eba01c9c4
    Eliminate duplicate copies of constants.
    
    sys/personality.h and linux/personality.h contain mostly
    identical contents. Eliminate dups.
    
    Change-Id: Ie786edcb5dca57af7ee5b5fdad2949369f1bc4e4
    add personality() system call.
    
    Change-Id: Ie899def8ea1d705930ed83adae1343c1353e7c57
    Report errors to the log, not just stderr.
    
    In particular this affects assert(3) and __cxa_pure_virtual, both of
    which have managed to confuse people this week by apparently aborting
    without reason. (Because stderr goes nowhere, normally.)
    
    Bug: 6852995
    Bug: 6840813
    Change-Id: I7f5d17d5ddda439e217b7932096702dc013b9142
    [MIPS] Add atomic routines
    
    Change-Id: I2cb20ce44dd230d222b7fc1ede2e1e3dce6e692b
    bionic: Do not use <sys/atomics.h> for platform code.
    
    We're going to modify the __atomic_xxx implementation to provide
    full memory barriers, to avoid problems for NDK machine code that
    link to these functions.
    
    First step is to remove their usage from our platform code.
    We now use inlined versions of the same functions for a slight
    performance boost.
    
    + remove obsolete atomics_x86.c (was never compiled)
    
    NOTE: This improvement was benchmarked on various devices.
          Comparing a pthread mutex lock + atomic increment + unlock
          we get:
    
      - ARMv7 emulator, running on a 2.4 GHz Xeon:
           before: 396 ns    after: 288 ns
    
      - x86 emulator in KVM mode on same machine:
           before: 27 ns     after: 27 ns
    
      - Google Nexus S, in ARMv7 mode (single-core):
           before: 82 ns     after: 76 ns
    
      - Motorola Xoom, in ARMv7 mode (multi-core):
           before: 121 ns    after: 120 ns
    
    The code has also been rebuilt in ARMv5TE mode for correctness.
    
    Change-Id: Ic1dc72b173d59b2e7af901dd70d6a72fb2f64b17
    libc: remove cutils dependencies
    
    We simply copy the stuff we need from cutils headers.
    
    A future patch will change cutils to include the private <bionic_atomic_inline.h>
    
    Change-Id: Ib6fd9a03bc9e337ce867bd606dc94c2b4438480a
    bionic: Do not use <sys/atomics.h> for platform code.
    
    We're going to modify the __atomic_xxx implementation to provide
    full memory barriers, to avoid problems for NDK machine code that
    link to these functions.
    
    First step is to remove their usage from our platform code.
    We now use inlined versions of the same functions for a slight
    performance boost.
    
    + remove obsolete atomics_x86.c (was never compiled)
    
    NOTE: This improvement was benchmarked on various devices.
          Comparing a pthread mutex lock + atomic increment + unlock
          we get:
    
      - ARMv7 emulator, running on a 2.4 GHz Xeon:
           before: 396 ns    after: 288 ns
    
      - x86 emulator in KVM mode on same machine:
           before: 27 ns     after: 27 ns
    
      - Google Nexus S, in ARMv7 mode (single-core):
           before: 82 ns     after: 76 ns
    
      - Motorola Xoom, in ARMv7 mode (multi-core):
           before: 121 ns    after: 120 ns
    
    The code has also been rebuilt in ARMv5TE mode for correctness.
    
    Change-Id: Ic1dc72b173d59b2e7af901dd70d6a72fb2f64b17
    [MIPS] Add atomic routines
    
    Change-Id: I2cb20ce44dd230d222b7fc1ede2e1e3dce6e692b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    Use private futexes for semaphores, unless they are initialized with pshared != 0.
    
    Change-Id: I534e36a7171cd37037ae03b910ba71ea6968286d
    Note: previously, sem_init() would return an error if pshared != 0.
    Fix <sys/epoll.h> and <sys/system_properties.h> to include proper C++ inclusion guards
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Avoid multiple dns lookups for the same query
    
    If two or more rapid dns requests for the same server are done
    from different threads it turns into separate dns reques, if
    the response of the request isn't found in the cache.
    
    This patch avoid multiple request for the same server by
    letting subsequents request wait until the first request
    has finished.
    
    Change-Id: Ic72ea0e7d3964a4164eddf866feb4357ec4dfe54
    Add per-interface dns caches.
    
    import of changes 22100 and 23138 from opensource.
    
    Change-Id: I3ce86394323d269272aeb2bebeed4374f171a8cf
    Add support for a dns cache per interface
    
    Initial commit for dns cache per interface.
    Added a type that holds a reference to a
    cache and name of associated interface,
    address of interface, name server(s)
    associated with an interface etc.
    
    New functions to set default interface,
    address of name servers etc.
    
    Change-Id: Ie991bc5592fd998409853d8bf77d7fe69035dac5
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@132276
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    bionic: Do not use <sys/atomics.h> for platform code.
    
    We're going to modify the __atomic_xxx implementation to provide
    full memory barriers, to avoid problems for NDK machine code that
    link to these functions.
    
    First step is to remove their usage from our platform code.
    We now use inlined versions of the same functions for a slight
    performance boost.
    
    + remove obsolete atomics_x86.c (was never compiled)
    
    NOTE: This improvement was benchmarked on various devices.
          Comparing a pthread mutex lock + atomic increment + unlock
          we get:
    
      - ARMv7 emulator, running on a 2.4 GHz Xeon:
           before: 396 ns    after: 288 ns
    
      - x86 emulator in KVM mode on same machine:
           before: 27 ns     after: 27 ns
    
      - Google Nexus S, in ARMv7 mode (single-core):
           before: 82 ns     after: 76 ns
    
      - Motorola Xoom, in ARMv7 mode (multi-core):
           before: 121 ns    after: 120 ns
    
    The code has also been rebuilt in ARMv5TE mode for correctness.
    
    Change-Id: Ic1dc72b173d59b2e7af901dd70d6a72fb2f64b17
    Fix implementation of generic atomic operations
    
    Change-Id: Ie1ea5aacc561e2d6d40125d2952ed0e9116b7b0d
    bionic: Do not use <sys/atomics.h> for platform code.
    
    We're going to modify the __atomic_xxx implementation to provide
    full memory barriers, to avoid problems for NDK machine code that
    link to these functions.
    
    First step is to remove their usage from our platform code.
    We now use inlined versions of the same functions for a slight
    performance boost.
    
    + remove obsolete atomics_x86.c (was never compiled)
    
    NOTE: This improvement was benchmarked on various devices.
          Comparing a pthread mutex lock + atomic increment + unlock
          we get:
    
      - ARMv7 emulator, running on a 2.4 GHz Xeon:
           before: 396 ns    after: 288 ns
    
      - x86 emulator in KVM mode on same machine:
           before: 27 ns     after: 27 ns
    
      - Google Nexus S, in ARMv7 mode (single-core):
           before: 82 ns     after: 76 ns
    
      - Motorola Xoom, in ARMv7 mode (multi-core):
           before: 121 ns    after: 120 ns
    
    The code has also been rebuilt in ARMv5TE mode for correctness.
    
    Change-Id: Ic1dc72b173d59b2e7af901dd70d6a72fb2f64b17
    Fix spurious DNS lookups in the C library.
    
    The problem was that the 'defdname' field of res_state structure
    was not properly initialized in __res_vinit(). This field is used
    to store the default domain name, which is normally build from
    calling gethostname() (see line 549 of res_init.c).
    
    Unfortunately, in the typical Android case, gethostname() returns
    an error (the hostname is configured) and a random stack string is
    used later to build the DNS search list (see lines 556+ in res_init.c)
    
    For the sake of illustration, let's say the search list is set to
    a random value like 'xWLK'.
    
    The end result is that when trying to result an unknown domain name
    (e.g. 'www.ptn'), the query fails then the resolver tries to make a
    new query with the DNS search list path(s) appended (e.g. 'www.ptn.xWLK').
    
    The patch simply initializes 'defdname' to an empty string to avoid
    this when the net.dns.search system property is not set.
    
    Also contains whitespace/formatting fixes
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: Copy private C library declarations to private/
    
    This patch is the first in a series that aims at cleaning up the
    public C library headers (which end up being distributed with the NDK).
    
    <resolv.h> and <time.h> contain declarations that should not be public.
    They are used by other parts of the platform, but NDK applications should
    not use or rely on them.
    
    So copy them to private <bionic_time.h> and <resolv_iface.h> headers
    and use a guard macro to avoid conflicts when both headers are included
    at the same time.
    
    The idea is that we're going to fix the other platform modules to
    include these private headers. After this is done, we will remove the
    duplicate definitions from <resolv.h> and <time.h>
    
    Change-Id: I121c11936951c98ca7165e811126ed8a4a3a394d
    Add per-interface dns caches.
    
    import of changes 22100 and 23138 from opensource.
    
    Change-Id: I3ce86394323d269272aeb2bebeed4374f171a8cf
    Add support for a dns cache per interface
    
    Initial commit for dns cache per interface.
    Added a type that holds a reference to a
    cache and name of associated interface,
    address of interface, name server(s)
    associated with an interface etc.
    
    New functions to set default interface,
    address of name servers etc.
    
    Change-Id: Ie991bc5592fd998409853d8bf77d7fe69035dac5
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    Clean up the linker a bit, remove prelinking support.
    
    Also make the errors more readable, since none of us seemed to know
    what they actually meant. The new style is still as verbose as the
    old, but that's probably necessary in the absence of chained exceptions
    in C. Here's what you'd see if you try to boot after removing
    libsurfaceflinger.so:
    
      32267 32267 E AndroidRuntime: java.lang.UnsatisfiedLinkError: Cannot load library: (linker.c:1629, pid 32259) soinfo_link_image: could not load library "libsystem_server.so" needed by "libandroid_servers.so"; caused by (linker.c:1629, pid 32259) soinfo_link_image: could not load library "libsurfaceflinger.so" needed by "libsystem_server.so"; caused by (linker.c:709, pid 32259) load_library: library "libsurfaceflinger.so" not found
    
    This patch also fixes almost all of the compiler warnings.
    
    Change-Id: I64bb59aed6d4e039c15ea45be2367f319ef879f8
    Added actual event logging calls to the FORTIFY_SOURCE methods.
    
    Change-Id: I3bf4fa8678c33187cb8ce4b75e666ddcd24403ab
    Adding event logging to libc.
    
    I've basically just copied the relevant bits out of liblog and
    EventLog.cpp. While this will let us do the uid logging we want
    to address the concerns in 245c07027f78565858dd489eb0d94c3d48743e9d
    it doesn't give us much else.
    
    Change-Id: Icac6ff20bc0a3ade5927f6f76fedffe1ae6f8522
    Revert "Revert "libc: Add logcat error message for memory corruption""
    
    This reverts commit 368ee1e4d65c555fdb0fa4b3a91d75a397936908.
    Revert "libc: Add logcat error message for memory corruption"
    
    This fixes the build.
    
    This reverts commit 7708a89c60e7b024d31c48c8034932c5e9f0aceb.
    libc: Add logcat error message for memory corruption
    
    Our dlmalloc implementation currently calls abort() when it detects
    that the heap is corrupted, or that an invalid pointer is passed to
    one of its functions.
    
    The only way to detect this is because abort() will force-fully
    crash the current program with a magic fault address of '0xdeadbaad'.
    
    However, this is not really well documented, and a frequent topic
    on the android-ndk forum (among others).
    
    This change makes our dlmalloc code dump a simple message to the
    log just before the abort() call (and hence before the stack trace)
    to better help identify the problem.
    
    Change-Id: Iebf7eb7fe26463ecadfaca8f247d237edb441e3c
    Prevent a crash in the memory leak checker (which happened in chk_free())
    
    Simplify the code a little, removing un-necessary mutex locks/unlocks.
    Provide slightly better diagnostic message in case of corruption.
    Use snprintf/strlcat instead of sprintf/strcat
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@132276
    Initial Contribution
    Rename __dso_handle_so.c to __dso_handle_so.h
    
    Also chang libc/arch-arm/bionic/crtbegin_so.c to include it
    as a header.
    
    Change-Id: Ib91b0b8caf5c8b936425aa8a4fc1a229b2b27929
    ARM: make CRT_LEGACY_WORKAROUND work as intended
    
    To properly support legacy ARM shared libraries, libc.so needs
    to export the symbols __dso_handle and atexit, even though
    these are now supplied by the crt startup code.
    
    This patch reshuffles the existing CRT_LEGACY_WORKAROUND
    conditionally compiled code slightly so it works as the
    original author likely intended.
    
    Change-Id: Id6c0e94dc65b7928324a5f0bad7eba6eb2f464b9
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@gmail.com>
    arm: rewrite crtbegin* as C files.
    
    Rewrite
     crtbegin.S     -> crtbegin.c
     crtbegin_so.S  -> crtbegin_so.c
    
    This change allows us to generate PIC code without relying
    on text relocations.
    
    As a consequence of this rewrite, also rewrite
      __dso_handle.S    -> __dso_handle.c
      __dso_handle_so.S -> __dso_handle_so.c
      atexit.S          -> atexit.c
    
    In crtbegin.c _start, place the __PREINIT_ARRAY__, __INIT_ARRAY__,
    __FINI_ARRAY__, and __CTOR_LIST__ variables onto the stack, instead of
    passing a pointer to the text section of the binary.
    
    This change appears sorta wonky, as I attempted to preserve,
    as much as possible, the structure of the original assembly.
    As a result, you have C files including other C files, and other
    programming uglyness.
    
    Result: This change reduces the number of files with text-relocations
    from 315 to 19 on my Android build.
    
    Before:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      315
    
    After:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      19
    
    Change-Id: Ib9f98107c0eeabcb606e1ddc7ed7fc4eba01c9c4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    [MIPS] Support for TLS register
    
    Change-Id: I6b5194e5e379b573e3b1203d8015e20fb3edd647
    Signed-off-by: Chris Dearman <chris@mips.com>
    Initialize TLS before any application code is run.
    
    Since e19d702b8e33, dlsym and friends use recursive mutexes that
    require the current thread id, which is not available before the libc
    constructor. This prevents us from using dlsym() in .preinit_array.
    
    This change moves TLS initialization from libc constructor to the earliest
    possible point - immediately after linker itself is relocated. As a result,
    pthread_internal_t for the initial thread is available from the start.
    
    As a bonus, values stored in TLS in .preinit_array are not lost when libc is
    initialized.
    
    Change-Id: Iee5a710ee000173bff63e924adeb4a4c600c1e2d
    Fix __get_tls() in static C library to use kernel helpers.
    
    This is needed to fix gdbserver's handling of threaded programs,
    among other things.
    
    Change-Id: I823387c602cef9891532da946a01db14be780ab0
    eclair snapshot
    Fix TLS access for ARMv6 and beyond.
    
    For performance reasons, we don't call the kernel helper. Instead, we directly
    access the TLS register on ARMv6 and higher. For ARMv5TE, keep using the hard-coded
    address populated by the kernel on each task switch.
    
    NOTE: Since we don't call the kernel helper, this must precisely match your
          kernel configuration. This is controlled by setting the ARCH_ARM_HAVE_TLS_REGISTER
          variable to 'true' in your board configuration file.
    Linux kernel helpers support is provided to android for its TLS implementation. This fix addresses this by modifying
    the TLS access functions to use the kernel helper.
    This Fix is verified on ST Ericsson's U8500 platform and Submitted on behalf of a third-party:
    Surinder-pal SINGH from STMicroelectronics.
    Pass the elfdata pointer in a slot of the temporary TLS area.
    
    This is needed to properly initialize the C runtime when libc.so
    is loaded by the dynamic linker.
    
    Move the temporary TLS setup before the first system call, just
    in case something really horrible happens, we won't crash when
    trying to write an error code in 'errno'
    
    Remove the broken TLS_SLOT_THREAD_ID setup. First, this slot
    should normally receive the address of a pthread_internal_t,
    not a kernel thread identifier. Second, it is never used by
    the linker anyway.
    
    Also remove an obsolete comment.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    Add mlockall and munlockall for Google TV.
    
    Change-Id: I10e961d701e74aab07211ec7975f61167e387853
    Add getsid system call to bionic
    
    Add getsid() system call to bionic for
    all architectures. This is needed for various tools
    (e.g. perf).
    
    Adding the getsid system call was done in 3 steps:
    () add getsid system call (function name and syscall
    number) to libc/SYSCALLS.TXT
    () generate all necessary headers by calling
    libc/tools/gensyscalls.py. This patch is adding
    the generated files since the build system
    does not call gensyscalls.py.
    () add the system call signature to libc/include/unistd.h
    
    Change-Id: Id69a257e13ec02e1a44085a6b217a3f19ab025b1
    Signed-off-by: Irina Tirdea <irina.tirdea@intel.com>
    Add unshare() syscall.
    
    (cherry-pick of 5467f25f82934d611c60f8bc57a05114f3c1bea0.)
    
    Bug: 6925012
    Change-Id: Ic5ea2fbd606311087de05d7a3594df2fa9b2fef9
    Add unshare() syscall.
    
    Bug: 6925012
    Change-Id: I2530a8f6cea49eb32b60f8f9c4d86963773456ca
    Add faccessat to syscall list
    
    Change-Id: I427a18811089cb280769ac8da3ed8adc00a65a10
    Update kernel headers and add syscall "perf_event_open"
    
    Change-Id: I43f12b727881df002a8524f2738586c043833bae
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    add personality() system call.
    
    Change-Id: Ie899def8ea1d705930ed83adae1343c1353e7c57
    sreadahead: adding readahead system call into bionic libc
    
    Add bionic libc to support readahead system call.
    This is needed to enable sreadahead to work.
    
    Change-Id: I3856e1a3833db82e6cf42fd34af7631bd40cc723
    Author: Winson Yung <winson.w.yung@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Add tgkill syscall.
    
    Use tgkill instead of tkill to implement pthread_kill.
    This is safer in the event that the thread has already terminated
    and its id has been reused by a different process.
    
    Change-Id: Ied715e11d7eadeceead79f33db5e2b5722954ac9
    Add support for the utimensat(2) syscall to bionic.
    
    The kernel has supported this syscall for quite some time now,
    but bionic did not.  Now that there is a need for it, let's
    add it to bionic.
    
    Change-Id: Ifcef3e46f1438d79435b600c4e6063857ab16903
    libc: Add ftruncate64 and improve 64-bit parameter syscall handling.
    
    This patch improves the handling of 64-bit parameters in syscalls on ARM.
    The ARM EABI mandates that 64-bit quantities be passed in even/odd register
    pairs, which requires special treatment.
    
    This allows us to simplify our implementations of pread() and pwrite()
    and remove the C stubs for pread64() and pwrite64().
    
    Also add ftruncate64() to <unistd.h>
    
    Change-Id: I407e2fd223ba0093dd2d0b04c6152fadfc9ce3ef
    
    Bug 3107933
    <sched.h>: Add sched_getcpu() and cpu_set_t
    
    This adds the cpu_set_t type definition and related functions
    and macros used to handle CPU thread affinity.
    
      sched_getcpu()
      sched_setaffinity()
      sched_getaffinity()
    
    Change-Id: If382ecafde8926341a88478062b275553645065b
    libc: add <sys/eventfd.h> and corresponding implementations.
    
    Change-Id: Ide040884c456190226e580513099fdb8377e015b
    libc: Add missing waitid() implementation.
    
    Change-Id: I312ee608dbf9249e4886a10d45d13e3cda8a9042
    libc: Add missing fdatasync() implementation
    
    Change-Id: I04bb655d77e414021e1f2a973329167ad76ca1c4
    libc: Add missing pipe2() declaration and implementation.
    
    Change-Id: Iacb914bd6ac5adc60c5671e6fef680ede21f9b0c
    libc: fix fstatfs() implementation.
    
    The syscall expects the size of the buffer as the second argument.
    
    Change-Id: I99ede2fec7fcd385ca03ff022c2cffa4297bea8d
    Add missing sysinfo() implementation (already declared in <sys/sysinfo.h>) - DO NOT MERGE
    
    Change-Id: Iac4eb5911ffe4a7ab72b84df44e907685ac816af
    Add missing sysinfo() implementation (already declared in <sys/sysinfo.h>)
    
    Change-Id: Ie9168238c3a8e77daab4f39939756d4c53d8af37
    bonic: libc: cpuacct support for setuid functions
    
    Any of the setuid functions now updates /acct/uid/ with its own tid
    before changing users. This is so we can properly account for cpu time
    per uid.
    
    Change-Id: I34186cf4d5228cac8439e582a9e26c01ef3011e4
    Signed-off-by: Mike Chan <mike@android.com>
    add sigaltstack syscall
    bionic: syscalls: Add ioprio_set/ioprio_get syscall wrappers
    
    Signed-off-by: San Mehat <san@google.com>
    Implement clone() C library function properly.
    
    Only provide an implementation for ARM at the moment, since
    it requires specific assembly fragments (the standard syscall
    stubs cannot be used because the child returns in a different
    stack).
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Add getsid system call to bionic
    
    Add getsid() system call to bionic for
    all architectures. This is needed for various tools
    (e.g. perf).
    
    Adding the getsid system call was done in 3 steps:
    () add getsid system call (function name and syscall
    number) to libc/SYSCALLS.TXT
    () generate all necessary headers by calling
    libc/tools/gensyscalls.py. This patch is adding
    the generated files since the build system
    does not call gensyscalls.py.
    () add the system call signature to libc/include/unistd.h
    
    Change-Id: Id69a257e13ec02e1a44085a6b217a3f19ab025b1
    Signed-off-by: Irina Tirdea <irina.tirdea@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add mlockall and munlockall for Google TV.
    
    Change-Id: I10e961d701e74aab07211ec7975f61167e387853
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    <sched.h>: Add sched_getcpu() and cpu_set_t
    
    This adds the cpu_set_t type definition and related functions
    and macros used to handle CPU thread affinity.
    
      sched_getcpu()
      sched_setaffinity()
      sched_getaffinity()
    
    Change-Id: If382ecafde8926341a88478062b275553645065b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add mlockall and munlockall for Google TV.
    
    Change-Id: I10e961d701e74aab07211ec7975f61167e387853
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    add sigaltstack syscall
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: Add ftruncate64 and improve 64-bit parameter syscall handling.
    
    This patch improves the handling of 64-bit parameters in syscalls on ARM.
    The ARM EABI mandates that 64-bit quantities be passed in even/odd register
    pairs, which requires special treatment.
    
    This allows us to simplify our implementations of pread() and pwrite()
    and remove the C stubs for pread64() and pwrite64().
    
    Also add ftruncate64() to <unistd.h>
    
    Change-Id: I407e2fd223ba0093dd2d0b04c6152fadfc9ce3ef
    
    Bug 3107933
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    <sched.h>: Add sched_getcpu() and cpu_set_t
    
    This adds the cpu_set_t type definition and related functions
    and macros used to handle CPU thread affinity.
    
      sched_getcpu()
      sched_setaffinity()
      sched_getaffinity()
    
    Change-Id: If382ecafde8926341a88478062b275553645065b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add unshare() syscall.
    
    (cherry-pick of 5467f25f82934d611c60f8bc57a05114f3c1bea0.)
    
    Bug: 6925012
    Change-Id: Ic5ea2fbd606311087de05d7a3594df2fa9b2fef9
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add support for the utimensat(2) syscall to bionic.
    
    The kernel has supported this syscall for quite some time now,
    but bionic did not.  Now that there is a need for it, let's
    add it to bionic.
    
    Change-Id: Ifcef3e46f1438d79435b600c4e6063857ab16903
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Bionic: Fix wrong prototype of system call clock_nanosleep
    
    In bionic/libc/SYSCALLS.TXT, the prototype of system call
    clock_nanosleep is incorrect.
    
    According to man page:
    int clock_nanosleep(clockid_t clock_id, int flags,
                        const struct timespec *request,
                        struct timespec *remain);
    
    Change-Id: Ic44c6db3d632293aa17998035554eacd664c2d57
    Signed-off-by: Jin Wei <wei.a.jin@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: Add missing pipe2() declaration and implementation.
    
    Change-Id: Iacb914bd6ac5adc60c5671e6fef680ede21f9b0c
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: fix fstatfs() implementation.
    
    The syscall expects the size of the buffer as the second argument.
    
    Change-Id: I99ede2fec7fcd385ca03ff022c2cffa4297bea8d
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    bionic: syscalls: Add ioprio_set/ioprio_get syscall wrappers
    
    Signed-off-by: San Mehat <san@google.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: add <sys/eventfd.h> and corresponding implementations.
    
    Change-Id: Ide040884c456190226e580513099fdb8377e015b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Update kernel headers and add syscall "perf_event_open"
    
    Change-Id: I43f12b727881df002a8524f2738586c043833bae
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    bonic: libc: cpuacct support for setuid functions
    
    Any of the setuid functions now updates /acct/uid/ with its own tid
    before changing users. This is so we can properly account for cpu time
    per uid.
    
    Change-Id: I34186cf4d5228cac8439e582a9e26c01ef3011e4
    Signed-off-by: Mike Chan <mike@android.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    bionic: syscalls: Add ioprio_set/ioprio_get syscall wrappers
    
    Signed-off-by: San Mehat <san@google.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    bionic: Fix wrong prototype of system call getresuid/getresgid
    
    In bionic/libc/SYSCALLS.TXT, the prototypes of system call
    getresuid/getresgid are incorrect.
    
    According to man page, they should be:
        int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid);
        int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid);
    
    Change-Id: I676098868bb05a9e1fe45419b234cf397626fdad
    Signed-off-by: Jin Wei <wei.a.jin@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    bonic: libc: cpuacct support for setuid functions
    
    Any of the setuid functions now updates /acct/uid/ with its own tid
    before changing users. This is so we can properly account for cpu time
    per uid.
    
    Change-Id: I34186cf4d5228cac8439e582a9e26c01ef3011e4
    Signed-off-by: Mike Chan <mike@android.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    bionic: Fix wrong prototype of system call getresuid/getresgid
    
    In bionic/libc/SYSCALLS.TXT, the prototypes of system call
    getresuid/getresgid are incorrect.
    
    According to man page, they should be:
        int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid);
        int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid);
    
    Change-Id: I676098868bb05a9e1fe45419b234cf397626fdad
    Signed-off-by: Jin Wei <wei.a.jin@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    <sched.h>: Add sched_getcpu() and cpu_set_t
    
    This adds the cpu_set_t type definition and related functions
    and macros used to handle CPU thread affinity.
    
      sched_getcpu()
      sched_setaffinity()
      sched_getaffinity()
    
    Change-Id: If382ecafde8926341a88478062b275553645065b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Implement clone() C library function properly.
    
    Only provide an implementation for ARM at the moment, since
    it requires specific assembly fragments (the standard syscall
    stubs cannot be used because the child returns in a different
    stack).
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    add personality() system call.
    
    Change-Id: Ie899def8ea1d705930ed83adae1343c1353e7c57
    bonic: libc: cpuacct support for setuid functions
    
    Any of the setuid functions now updates /acct/uid/ with its own tid
    before changing users. This is so we can properly account for cpu time
    per uid.
    
    Change-Id: I34186cf4d5228cac8439e582a9e26c01ef3011e4
    Signed-off-by: Mike Chan <mike@android.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add missing sysinfo() implementation (already declared in <sys/sysinfo.h>) - DO NOT MERGE
    
    Change-Id: Iac4eb5911ffe4a7ab72b84df44e907685ac816af
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    sreadahead: adding readahead system call into bionic libc
    
    Add bionic libc to support readahead system call.
    This is needed to enable sreadahead to work.
    
    Change-Id: I3856e1a3833db82e6cf42fd34af7631bd40cc723
    Author: Winson Yung <winson.w.yung@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: Add missing fdatasync() implementation
    
    Change-Id: I04bb655d77e414021e1f2a973329167ad76ca1c4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add tgkill syscall.
    
    Use tgkill instead of tkill to implement pthread_kill.
    This is safer in the event that the thread has already terminated
    and its id has been reused by a different process.
    
    Change-Id: Ied715e11d7eadeceead79f33db5e2b5722954ac9
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    bonic: libc: cpuacct support for setuid functions
    
    Any of the setuid functions now updates /acct/uid/ with its own tid
    before changing users. This is so we can properly account for cpu time
    per uid.
    
    Change-Id: I34186cf4d5228cac8439e582a9e26c01ef3011e4
    Signed-off-by: Mike Chan <mike@android.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add faccessat to syscall list
    
    Change-Id: I427a18811089cb280769ac8da3ed8adc00a65a10
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: Add ftruncate64 and improve 64-bit parameter syscall handling.
    
    This patch improves the handling of 64-bit parameters in syscalls on ARM.
    The ARM EABI mandates that 64-bit quantities be passed in even/odd register
    pairs, which requires special treatment.
    
    This allows us to simplify our implementations of pread() and pwrite()
    and remove the C stubs for pread64() and pwrite64().
    
    Also add ftruncate64() to <unistd.h>
    
    Change-Id: I407e2fd223ba0093dd2d0b04c6152fadfc9ce3ef
    
    Bug 3107933
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    libc: Add missing waitid() implementation.
    
    Change-Id: I312ee608dbf9249e4886a10d45d13e3cda8a9042
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    libc: Add ftruncate64 and improve 64-bit parameter syscall handling.
    
    This patch improves the handling of 64-bit parameters in syscalls on ARM.
    The ARM EABI mandates that 64-bit quantities be passed in even/odd register
    pairs, which requires special treatment.
    
    This allows us to simplify our implementations of pread() and pwrite()
    and remove the C stubs for pread64() and pwrite64().
    
    Also add ftruncate64() to <unistd.h>
    
    Change-Id: I407e2fd223ba0093dd2d0b04c6152fadfc9ce3ef
    
    Bug 3107933
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    libc: provide atomic operations will full barriers for NDK apps.
    
    __atomic_cmpxchg and other related atomic operations did not
    provide memory barriers, which can be a problem for non-platform
    code that links against them when it runs on multi-core devices.
    
    This patch does two things to fix this:
    
    - It modifies the existing implementation of the functions
      that are exported by the C library to always provide
      full memory barriers. We need to keep them exported by
      the C library to prevent breaking existing application
      machine code.
    
    - It also modifies <sys/atomics.h> to only export
      always-inlined versions of the functions, to ensure that
      any application code compiled against the new header will
      not rely on the platform version of the functions.
    
      This ensure that said machine code will run properly on
      all multi-core devices.
    
    This is based on the GCC built-in sync primitives.
    
    The end result should be only slightly slower than the
    previous implementation.
    
    Note that the platform code does not use these functions
    at all. A previous patch completely removed their usage in
    the pthread and libstdc++ code.
    
    + rename arch-arm/bionic/atomics_arm.S to futex_arm.S
    + rename arch-x86/bionic/atomics_x86.S to futex_x86.S
    + remove arch-x86/include/sys/atomics.h which already
      provided inlined functions to the x86 platform.
    
    Change-Id: I752a594475090cf37fa926bb38209c2175dda539
    Replace __atomic_XXX with GCC __sync_XXX intrinsics.
    
    Orig-Change-Id: I14f275392fcd70cc15e307470e0a099777c7c09e
    Author: H.J. Lu <hjl.tools@gmail.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Replace __atomic_XXX with GCC __sync_XXX intrinsics.
    
    Change-Id: I14f275392fcd70cc15e307470e0a099777c7c09e
    Author: H.J. Lu <hjl.tools@gmail.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Use private futexes for pthread_mutex_t.
    
    This does not change the implementation of conditional variables
    since we're waiting for other system components to properly use
    pthread_condattr_init/setpshared before that.
    
    Also remove an obsolete x86 source file.
    
    Change-Id: Ia3e3fbac35b87a534fb04d4381c3c66b975bc8f7
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    bionic/x86: fix one potential deadlock in __set_tls()
    
    Fix bug:
    Currently the mutex lock _tls_desc_lock is not released
    when __set_thread_area() fails. That will leads to the deadlock
    when __set_tls( ) is called later on.
    
    Change-Id: Iea3267cb0659971cba7766cbc3346f6924274f86
    Signed-off-by: Jin Wei <wei.a.jin@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    bionic: fix __get_tls( ) crash issue
    
    When running the stress test of pthread create/destroy, a crash may
    oocur in __get_tls(). That is caused by the race condition with __set_tls( ):
    
    Author: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    arm: rewrite crtbegin* as C files.
    
    Rewrite
     crtbegin.S     -> crtbegin.c
     crtbegin_so.S  -> crtbegin_so.c
    
    This change allows us to generate PIC code without relying
    on text relocations.
    
    As a consequence of this rewrite, also rewrite
      __dso_handle.S    -> __dso_handle.c
      __dso_handle_so.S -> __dso_handle_so.c
      atexit.S          -> atexit.c
    
    In crtbegin.c _start, place the __PREINIT_ARRAY__, __INIT_ARRAY__,
    __FINI_ARRAY__, and __CTOR_LIST__ variables onto the stack, instead of
    passing a pointer to the text section of the binary.
    
    This change appears sorta wonky, as I attempted to preserve,
    as much as possible, the structure of the original assembly.
    As a result, you have C files including other C files, and other
    programming uglyness.
    
    Result: This change reduces the number of files with text-relocations
    from 315 to 19 on my Android build.
    
    Before:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      315
    
    After:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      19
    
    Change-Id: Ib9f98107c0eeabcb606e1ddc7ed7fc4eba01c9c4
    Enable functional DSO object destruction
    
    Unfortunately, legacy .so files for ARM don't have a correct crtbegin file.
    Consequently, we have to grandfather the old __dso_handle behaviour.
    Add some ifdefs for ARM to allow it to use the old code until we can work
    out a transition.
    
    Change-Id: I6a28f368267d792c94e1d985d8344023bc632f6f
    Author: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Enable functional DSO object destruction
    
    Unfortunately, legacy .so files for ARM don't have a correct crtbegin file.
    Consequently, we have to grandfather the old __dso_handle behaviour.
    Add some ifdefs for ARM to allow it to use the old code until we can work
    out a transition.
    
    Change-Id: I6a28f368267d792c94e1d985d8344023bc632f6f
    Author: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Revert "Update X86 Bionic CRT files for unwind/exceptions"
    
    This reverts commit dc3bc87b43d0d73d89cca59692b80de878e11a5d,
    causes netd to crash.
    Update X86 Bionic CRT files for unwind/exceptions
    
    Several updates to Bionic crt*.o files to implement Linux/x86
    stack unwind/exception handling.
    Mark __dso_handle as hidden.
    Note: Requires complete rebuild due to CRT changes. Google will
    need to regenerate and check-in all the prebuilt x86 CRT object
    files and libraries which link to them.
    
    Change-Id: I191ce1afb0dee7bbc28dcd9694e5919226dbd070
    Signed-off-by: Bruce J Beare <bruce.j.beare@intel.com>
    Signed-off-by: Mark D Horn <mark.d.horn@intel.com>
    Author: Lu, Hongjiu <hongjiu.lu@intel.com>
    Allow dlclose() to properly call static C++ destructors.
    
    With this patch _and_ an upcoming build/ patch, the destruction
    of static C++ objects contained in shared libraries will happen
    properly when dlclose() is called.
    
    Note that this change introduces crtbegin_so.S and crtend_so.S which
    are currently ignored by the build system.
    
    + move definition of __dso_handle to the right place
    (before that, all shared libraries used the __dso_handle
    global variable from the C library).
    
    Note that we keep a 'weak' __dso_handle in aeabi.c to avoid
    breaking the build until the next patch to build/core/combo/
    appears. We will be able to remove that later.
    
    + move bionic/aeabi.c to arch-arm/bionic/ (its proper location)
    
    NOTE: The NDK will need to be modified to enable this feature in
             the shared libraries that are generated through it.
    
    Change-Id: I99cd801375bbaef0581175893d1aa0943211b9bc
    Change-Id: I68cc462aeb2460345a53bdb9941ce4bfc10456fb
    bionic: fix clearenv() compiler warning and related comment typos
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    Add implementation of fdprintf, clearenv, and stubs for ttyname_r, *usershell
    
    Change-Id:      I5fe7e8b6ee5edbb49e707c3b6737a58563781fa3
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    android-x86: add sigsetjmp.S
    
    It adds two functions sigsetjmp and siglongjmp
    that fix compiling errors in bluetooth and mksh.
    
    Copy directly from sigsetjmp.S of OpenBSD.
    
    Change-Id: I4696f82ee6f85d1c93cbdd3c9e40f4917d50f3a6
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    x86: Enable -fstack-protector
    
    Change-Id: Iff9e3a3ba0e2d0faa7c6d98154aa5be0cc8a6c50
    Orig-Change-Id: Ib69514c3afcb4c1f5e5f3f8cd91acfd145a0866c
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Add new C++ headers <cerrno> and <cfloat>
    
    Also add std::malloc/realloc/calloc/free to <cstdlib>
    Rename <cwchar_is_not_supported> to <cwchar>
    AI 145716: am: CL 145714 Added cstring wrapper around string.h.
      In new, include cstddef which declares std::size_t.
      Original author: niko
    
    Automated import of CL 145716
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    arm: rewrite crtbegin* as C files.
    
    Rewrite
     crtbegin.S     -> crtbegin.c
     crtbegin_so.S  -> crtbegin_so.c
    
    This change allows us to generate PIC code without relying
    on text relocations.
    
    As a consequence of this rewrite, also rewrite
      __dso_handle.S    -> __dso_handle.c
      __dso_handle_so.S -> __dso_handle_so.c
      atexit.S          -> atexit.c
    
    In crtbegin.c _start, place the __PREINIT_ARRAY__, __INIT_ARRAY__,
    __FINI_ARRAY__, and __CTOR_LIST__ variables onto the stack, instead of
    passing a pointer to the text section of the binary.
    
    This change appears sorta wonky, as I attempted to preserve,
    as much as possible, the structure of the original assembly.
    As a result, you have C files including other C files, and other
    programming uglyness.
    
    Result: This change reduces the number of files with text-relocations
    from 315 to 19 on my Android build.
    
    Before:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      315
    
    After:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      19
    
    Change-Id: Ib9f98107c0eeabcb606e1ddc7ed7fc4eba01c9c4
    Enable functional DSO object destruction
    
    Unfortunately, legacy .so files for ARM don't have a correct crtbegin file.
    Consequently, we have to grandfather the old __dso_handle behaviour.
    Add some ifdefs for ARM to allow it to use the old code until we can work
    out a transition.
    
    Change-Id: I6a28f368267d792c94e1d985d8344023bc632f6f
    Author: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Enable functional DSO object destruction
    
    Unfortunately, legacy .so files for ARM don't have a correct crtbegin file.
    Consequently, we have to grandfather the old __dso_handle behaviour.
    Add some ifdefs for ARM to allow it to use the old code until we can work
    out a transition.
    
    Change-Id: I6a28f368267d792c94e1d985d8344023bc632f6f
    Author: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Revert "Update X86 Bionic CRT files for unwind/exceptions"
    
    This reverts commit dc3bc87b43d0d73d89cca59692b80de878e11a5d,
    causes netd to crash.
    Update X86 Bionic CRT files for unwind/exceptions
    
    Several updates to Bionic crt*.o files to implement Linux/x86
    stack unwind/exception handling.
    Mark __dso_handle as hidden.
    Note: Requires complete rebuild due to CRT changes. Google will
    need to regenerate and check-in all the prebuilt x86 CRT object
    files and libraries which link to them.
    
    Change-Id: I191ce1afb0dee7bbc28dcd9694e5919226dbd070
    Signed-off-by: Bruce J Beare <bruce.j.beare@intel.com>
    Signed-off-by: Mark D Horn <mark.d.horn@intel.com>
    Author: Lu, Hongjiu <hongjiu.lu@intel.com>
    Allow dlclose() to properly call static C++ destructors.
    
    With this patch _and_ an upcoming build/ patch, the destruction
    of static C++ objects contained in shared libraries will happen
    properly when dlclose() is called.
    
    Note that this change introduces crtbegin_so.S and crtend_so.S which
    are currently ignored by the build system.
    
    + move definition of __dso_handle to the right place
    (before that, all shared libraries used the __dso_handle
    global variable from the C library).
    
    Note that we keep a 'weak' __dso_handle in aeabi.c to avoid
    breaking the build until the next patch to build/core/combo/
    appears. We will be able to remove that later.
    
    + move bionic/aeabi.c to arch-arm/bionic/ (its proper location)
    
    NOTE: The NDK will need to be modified to enable this feature in
             the shared libraries that are generated through it.
    
    Change-Id: I99cd801375bbaef0581175893d1aa0943211b9bc
    Change-Id: I68cc462aeb2460345a53bdb9941ce4bfc10456fb
    bionic: fix clearenv() compiler warning and related comment typos
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    Add implementation of fdprintf, clearenv, and stubs for ttyname_r, *usershell
    
    Change-Id:      I5fe7e8b6ee5edbb49e707c3b6737a58563781fa3
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Update X86 Bionic CRT files for unwind/exceptions
    
    Several updates to Bionic crt*.o files to implement Linux/x86
    stack unwind/exception handling.
    Mark __dso_handle as hidden.
    Note: Requires complete rebuild due to CRT changes. Google will
    need to regenerate and check-in all the prebuilt x86 CRT object
    files and libraries which link to them.
    
    Change-Id: I01c14c19ef7569c9ffed89495cae2a459972c04b
    Orig-Change-Id: I191ce1afb0dee7bbc28dcd9694e5919226dbd070
    Signed-off-by: Bruce J Beare <bruce.j.beare@intel.com>
    Signed-off-by: Mark D Horn <mark.d.horn@intel.com>
    Author: Lu, Hongjiu <hongjiu.lu@intel.com>
    Updated gcc 4.4.3 IA toolchain doesn't require the .ctors list
    
    Orig-Change-Id: Ia840a19a45257128eccdcf25d105f500f2d90741
    Signed-off-by: H.J. Lu <hjl.tools@gmail.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    x86: fix full_x86-eng build
    
    The latest merge conflict resolution worked only for ARM, but not for x86
    Both ARM and x86 builds have been tested with this fix.
    
    Change-Id: I4ec1f1b0ea32fa86e7e2515b221133473d6550a3
    NOTE: Care has been taken to not change the compiler flags for ARM builds.
          In particular, when building crtbegin_so.so, the -fPIC flag is only
          used for x86 (previous reports indicate that it breaks the ARM
          build at runtime for obscure reasons).
    Revert "Update X86 Bionic CRT files for unwind/exceptions"
    
    This reverts commit dc3bc87b43d0d73d89cca59692b80de878e11a5d,
    causes netd to crash.
    Update X86 Bionic CRT files for unwind/exceptions
    
    Several updates to Bionic crt*.o files to implement Linux/x86
    stack unwind/exception handling.
    Mark __dso_handle as hidden.
    Note: Requires complete rebuild due to CRT changes. Google will
    need to regenerate and check-in all the prebuilt x86 CRT object
    files and libraries which link to them.
    
    Change-Id: I191ce1afb0dee7bbc28dcd9694e5919226dbd070
    Signed-off-by: Bruce J Beare <bruce.j.beare@intel.com>
    Signed-off-by: Mark D Horn <mark.d.horn@intel.com>
    Author: Lu, Hongjiu <hongjiu.lu@intel.com>
    Updated gcc 4.4.3 IA toolchain doesn't require the .ctors list
    
    Change-Id: Ia840a19a45257128eccdcf25d105f500f2d90741
    Signed-off-by: H.J. Lu <hjl.tools@gmail.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    bionic: modify syscall to use 6 registers to pass parameter.
    
    Kernel allows to use 6 registers(exclude eax) to pass parameter.
    But in syscall's implementation, it only uses five registers.
    It will lead to error when 6 parameters passed.
    
    Change-Id: I92d663194e6334c3847f0c0c257ca3b9dee0edef
    Author: Jin Wei <wei.a.jin@intel.com>
    Signed-off-by: Xiaokang Qin <xiaokang.qin@intel.com>
    Signed-off-by: Beare, Bruce J <bruce.j.beare@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Author-tracking-BZ: 30838
    x86 libc: Fix the range to check the error
    
    The spec says "A value in the range between -4095 to -1 indicates an error" (not -129).
    This was pointed out in the comment in 22039.
    
    Change-Id: I11b7c45015a9e4ccf09aed5364a889437eab6ab8
    Signed-off-by: Jun Nakajima <jun.nakajima@intel.com>
    x86 libc: fix the wrong return value of syscall
    
    According to Intel ABI spec, there is no need to save %eax, %ecx, %edx
    on the stack. Worse, popping %eax will wipe out the return value.
    
    Change-Id: Ida536c3b98174b8deef88f8f3b9352eaaeb7c0c0
    x86 syscall system call implementation
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    enable clone system call for x86
    
    Add __bionic_clone function for x86, which will be
    used for clone system call.
    
    Change-Id: I889dc9bf4b7ebb4358476e17e6f3233e26491f4d
    Signed-off-by: Jin Wei <wei.a.jin@intel.com>
    Signed-off-by: Xiaokang Qin <xiaokang.qin@intel.com>
    Signed-off-by: Beare, Bruce J <bruce.j.beare@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Author-tracking-BZ: 51414
    libc/x86: ensure the stack 16-byte aligned when tasks created
    
    Currently Renderscript sample code RsBalls crashed on x86 when SSE2
    enabled. The root cause is that the stack was not 16-byte aligned
    from the beginning when the processes/threads were created, so the
    RsBalls crashed when SSE2 instructions tried to access the variables
    on the stack.
    
    - For the thread created by fork():
    Its stack alignment is determined by crtbegin_{dynamic, static}.S
    
    - For the thread created by pthread_create():
    Its stack alignment is determined by clone.S. __thread_entry( ) is
    a standard C function. In order to have its stack be aligned with
    16 byte properly, __thread_entry() needs the stack with following
    layout when it is called:
    layout #1 (correct)
    --------------
    |            |
    -------------- <--ESP (ECX - 20)
    | ret EIP    |
    -------------- <--ECX - 16
    | arg0       |
    -------------- <--ECX - 12
    | arg1       |
    -------------- <--ECX - 8
    | arg2       |
    -------------- <--ECX - 4
    | unused     |
    -------------- <--ECX (16-byte boundary)
    
    But it has following layout for now:
    layout #2: (incorrect)
    --------------
    |            |
    -------------- <--ESP (ECX - 16)
    | unused     |
    -------------- <--ECX - 12
    | arg0       |
    -------------- <--ECX - 8
    | arg1       |
    -------------- <--ECX - 4
    | arg2       |
    -------------- <--ECX (16-byte boundary)
    
    Fixed in this patch.
    
    Change-Id: Ibe01f64db14be14033c505d854c73033556ddaa8
    Signed-off-by: Michael Liao <michael.liao@intel.com>
    Signed-off-by: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    bionic: fix pthread_{create, exit}/signal race condition
    
    (1) in pthread_create:
        If the one signal is received before esp is subtracted by 16 and
        __thread_entry( ) is called, the stack will be cleared by kernel
        when it tries to contruct the signal stack frame. That will cause
        that __thread_entry will get a wrong tls pointer from the stack
        which leads to the segment fault when trying to access tls content.
    
    (2) in pthread_exit
        After pthread_exit called system call unmap(), its stack will be
        freed.  If one signal is received at that time, there is no stack
        available for it.
    
    Fixed by subtracting the child's esp by 16 before the clone system
    call and by blocking signal handling before pthread_exit is started.
    
    Author: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Remove an extra register move.
    
    Orig-Change-Id: I63c217b73203b44b1a2e74950b58f2ec12989cab
    Author: H.J. Lu <hjl.tools@gmail.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Fix missing NL
    
    Orig-Change-Id: Ic210fe9f740b9a8235a66d479ad4eddc869998bb
    Signed-off-by: Bruce Beare <brucex.j.beare@intel.com>
    Remove an extra register move.
    
    Change-Id: I63c217b73203b44b1a2e74950b58f2ec12989cab
    Author: H.J. Lu <hjl.tools@gmail.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Fix missing NL
    
    Change-Id: Ic210fe9f740b9a8235a66d479ad4eddc869998bb
    Signed-off-by: Bruce Beare <brucex.j.beare@intel.com>
    Implement clone() C library function properly.
    
    Only provide an implementation for ARM at the moment, since
    it requires specific assembly fragments (the standard syscall
    stubs cannot be used because the child returns in a different
    stack).
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Update X86 Bionic CRT files for unwind/exceptions
    
    Several updates to Bionic crt*.o files to implement Linux/x86
    stack unwind/exception handling.
    Mark __dso_handle as hidden.
    Note: Requires complete rebuild due to CRT changes. Google will
    need to regenerate and check-in all the prebuilt x86 CRT object
    files and libraries which link to them.
    
    Change-Id: I01c14c19ef7569c9ffed89495cae2a459972c04b
    Orig-Change-Id: I191ce1afb0dee7bbc28dcd9694e5919226dbd070
    Signed-off-by: Bruce J Beare <bruce.j.beare@intel.com>
    Signed-off-by: Mark D Horn <mark.d.horn@intel.com>
    Author: Lu, Hongjiu <hongjiu.lu@intel.com>
    Updated gcc 4.4.3 IA toolchain doesn't require the .ctors list
    
    Orig-Change-Id: Ia840a19a45257128eccdcf25d105f500f2d90741
    Signed-off-by: H.J. Lu <hjl.tools@gmail.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    x86: fix full_x86-eng build
    
    The latest merge conflict resolution worked only for ARM, but not for x86
    Both ARM and x86 builds have been tested with this fix.
    
    Change-Id: I4ec1f1b0ea32fa86e7e2515b221133473d6550a3
    NOTE: Care has been taken to not change the compiler flags for ARM builds.
          In particular, when building crtbegin_so.so, the -fPIC flag is only
          used for x86 (previous reports indicate that it breaks the ARM
          build at runtime for obscure reasons).
    Revert "Update X86 Bionic CRT files for unwind/exceptions"
    
    This reverts commit dc3bc87b43d0d73d89cca59692b80de878e11a5d,
    causes netd to crash.
    Update X86 Bionic CRT files for unwind/exceptions
    
    Several updates to Bionic crt*.o files to implement Linux/x86
    stack unwind/exception handling.
    Mark __dso_handle as hidden.
    Note: Requires complete rebuild due to CRT changes. Google will
    need to regenerate and check-in all the prebuilt x86 CRT object
    files and libraries which link to them.
    
    Change-Id: I191ce1afb0dee7bbc28dcd9694e5919226dbd070
    Signed-off-by: Bruce J Beare <bruce.j.beare@intel.com>
    Signed-off-by: Mark D Horn <mark.d.horn@intel.com>
    Author: Lu, Hongjiu <hongjiu.lu@intel.com>
    Updated gcc 4.4.3 IA toolchain doesn't require the .ctors list
    
    Change-Id: Ia840a19a45257128eccdcf25d105f500f2d90741
    Signed-off-by: H.J. Lu <hjl.tools@gmail.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    crtbegin: eliminate duplicate code
    
    crtbegin_dynamic and crtbegin_static are essentially identical,
    minus a few trivial differences (comments and whitespace).
    
    Eliminate duplicates.
    
    Change-Id: Ic9fae6bc9695004974493b53bfc07cd3bb904480
    libc/x86: ensure the stack 16-byte aligned when tasks created
    
    Currently Renderscript sample code RsBalls crashed on x86 when SSE2
    enabled. The root cause is that the stack was not 16-byte aligned
    from the beginning when the processes/threads were created, so the
    RsBalls crashed when SSE2 instructions tried to access the variables
    on the stack.
    
    - For the thread created by fork():
    Its stack alignment is determined by crtbegin_{dynamic, static}.S
    
    - For the thread created by pthread_create():
    Its stack alignment is determined by clone.S. __thread_entry( ) is
    a standard C function. In order to have its stack be aligned with
    16 byte properly, __thread_entry() needs the stack with following
    layout when it is called:
    layout #1 (correct)
    --------------
    |            |
    -------------- <--ESP (ECX - 20)
    | ret EIP    |
    -------------- <--ECX - 16
    | arg0       |
    -------------- <--ECX - 12
    | arg1       |
    -------------- <--ECX - 8
    | arg2       |
    -------------- <--ECX - 4
    | unused     |
    -------------- <--ECX (16-byte boundary)
    
    But it has following layout for now:
    layout #2: (incorrect)
    --------------
    |            |
    -------------- <--ESP (ECX - 16)
    | unused     |
    -------------- <--ECX - 12
    | arg0       |
    -------------- <--ECX - 8
    | arg1       |
    -------------- <--ECX - 4
    | arg2       |
    -------------- <--ECX (16-byte boundary)
    
    Fixed in this patch.
    
    Change-Id: Ibe01f64db14be14033c505d854c73033556ddaa8
    Signed-off-by: Michael Liao <michael.liao@intel.com>
    Signed-off-by: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Enable functional DSO object destruction
    
    Unfortunately, legacy .so files for ARM don't have a correct crtbegin file.
    Consequently, we have to grandfather the old __dso_handle behaviour.
    Add some ifdefs for ARM to allow it to use the old code until we can work
    out a transition.
    
    Change-Id: I6a28f368267d792c94e1d985d8344023bc632f6f
    Author: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    x86: Enable -fstack-protector
    
    Change-Id: Iff9e3a3ba0e2d0faa7c6d98154aa5be0cc8a6c50
    Orig-Change-Id: Ib69514c3afcb4c1f5e5f3f8cd91acfd145a0866c
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Update X86 Bionic CRT files for unwind/exceptions
    
    Several updates to Bionic crt*.o files to implement Linux/x86
    stack unwind/exception handling.
    Mark __dso_handle as hidden.
    Note: Requires complete rebuild due to CRT changes. Google will
    need to regenerate and check-in all the prebuilt x86 CRT object
    files and libraries which link to them.
    
    Change-Id: I01c14c19ef7569c9ffed89495cae2a459972c04b
    Orig-Change-Id: I191ce1afb0dee7bbc28dcd9694e5919226dbd070
    Signed-off-by: Bruce J Beare <bruce.j.beare@intel.com>
    Signed-off-by: Mark D Horn <mark.d.horn@intel.com>
    Author: Lu, Hongjiu <hongjiu.lu@intel.com>
    Updated gcc 4.4.3 IA toolchain doesn't require the .ctors list
    
    Orig-Change-Id: Ia840a19a45257128eccdcf25d105f500f2d90741
    Signed-off-by: H.J. Lu <hjl.tools@gmail.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Enable functional DSO object destruction
    
    Unfortunately, legacy .so files for ARM don't have a correct crtbegin file.
    Consequently, we have to grandfather the old __dso_handle behaviour.
    Add some ifdefs for ARM to allow it to use the old code until we can work
    out a transition.
    
    Change-Id: I6a28f368267d792c94e1d985d8344023bc632f6f
    Author: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Revert "Update X86 Bionic CRT files for unwind/exceptions"
    
    This reverts commit dc3bc87b43d0d73d89cca59692b80de878e11a5d,
    causes netd to crash.
    Revert "x86: Enable -fstack-protector"
    
    This reverts commit e0b4844a20ffd022a568abb4203b3f7c759c7ff5,
    causes netd to crash.
    x86: Enable -fstack-protector
    
    Change-Id: Ib69514c3afcb4c1f5e5f3f8cd91acfd145a0866c
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Update X86 Bionic CRT files for unwind/exceptions
    
    Several updates to Bionic crt*.o files to implement Linux/x86
    stack unwind/exception handling.
    Mark __dso_handle as hidden.
    Note: Requires complete rebuild due to CRT changes. Google will
    need to regenerate and check-in all the prebuilt x86 CRT object
    files and libraries which link to them.
    
    Change-Id: I191ce1afb0dee7bbc28dcd9694e5919226dbd070
    Signed-off-by: Bruce J Beare <bruce.j.beare@intel.com>
    Signed-off-by: Mark D Horn <mark.d.horn@intel.com>
    Author: Lu, Hongjiu <hongjiu.lu@intel.com>
    Updated gcc 4.4.3 IA toolchain doesn't require the .ctors list
    
    Change-Id: Ia840a19a45257128eccdcf25d105f500f2d90741
    Signed-off-by: H.J. Lu <hjl.tools@gmail.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Allow dlclose() to properly call static C++ destructors.
    
    With this patch _and_ an upcoming build/ patch, the destruction
    of static C++ objects contained in shared libraries will happen
    properly when dlclose() is called.
    
    Note that this change introduces crtbegin_so.S and crtend_so.S which
    are currently ignored by the build system.
    
    + move definition of __dso_handle to the right place
    (before that, all shared libraries used the __dso_handle
    global variable from the C library).
    
    Note that we keep a 'weak' __dso_handle in aeabi.c to avoid
    breaking the build until the next patch to build/core/combo/
    appears. We will be able to remove that later.
    
    + move bionic/aeabi.c to arch-arm/bionic/ (its proper location)
    
    NOTE: The NDK will need to be modified to enable this feature in
             the shared libraries that are generated through it.
    
    Change-Id: I99cd801375bbaef0581175893d1aa0943211b9bc
    Allow static C++ destructors to be properly called on dlclose().
    
    With this patch, _and_ an upcoming build/ patch, the destruction
    of static C++ objects contained in shared libraries will happen
    properly when dlclose() is called.
    
    Note that this change introduces crtbegin_so.S and crtend_so.S which
    are currently ignored by the build system.
    
    + move definition of __dso_handle to the right place
      (before that, all shared libraries used the __dso_handle
       global variable from the C library).
    
      Note that we keep a 'weak' __dso_handle in aeabi.c to avoid
      breaking the build until the next patch to build/core/combo/
      appears. We will be able to remove that later.
    
    + move bionic/aeabi.c to arch-arm/bionic/ (its proper location)
    
    Change-Id: Ie771aa204e3acbdf02fd30ebd4150373a1398f39
    NOTE: The NDK will need to be modified to enable this feature in
          the shared libraries that are generated through it.
    Revert "Fix the C library initialization to avoid calling static C++ constructors twice."
    
    This reverts commit 03eabfe65e1e2c36f4d26c78a730fa19a3bdada3.
    Fix the C library initialization to avoid calling static C++ constructors twice.
    
    The problem was due to the fact that, in the case of dynamic executables,
    the dynamic linker calls the DT_PREINIT_ARRAY, DT_INIT and DT_INIT_ARRAY
    constructors when loading shared libraries and dynamic executables,
    *before* calling the executable's entry point (i.e. arch-$ARCH/bionic/crtbegin_dynamic.c)
    which in turns call __libc_init() in libc.so, as defined by bionic/libc_init_dynamic.c
    
    The latter did call these constructors array again, mistakenly.
    
    The patch also updates the documentation of many related functions.
    
    Also adds a new section to linker/README.TXT explaining restrictions on
    C library usage.
    
    The patch has been tested on a Dream for stability issues with
    proprietary blobs:
    
    - H264 decoding works
    - Camera + Video recording works
    - GPS works
    - Sensors work
    
    The tests in system/extra/tests/bionic/libc/common/test_static_cpp_mutex.cpp has been
    run and shows the static C++ constructor being called only once.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Enable functional DSO object destruction
    
    Unfortunately, legacy .so files for ARM don't have a correct crtbegin file.
    Consequently, we have to grandfather the old __dso_handle behaviour.
    Add some ifdefs for ARM to allow it to use the old code until we can work
    out a transition.
    
    Change-Id: I6a28f368267d792c94e1d985d8344023bc632f6f
    Author: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    x86: Enable -fstack-protector
    
    Change-Id: Iff9e3a3ba0e2d0faa7c6d98154aa5be0cc8a6c50
    Orig-Change-Id: Ib69514c3afcb4c1f5e5f3f8cd91acfd145a0866c
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Update X86 Bionic CRT files for unwind/exceptions
    
    Several updates to Bionic crt*.o files to implement Linux/x86
    stack unwind/exception handling.
    Mark __dso_handle as hidden.
    Note: Requires complete rebuild due to CRT changes. Google will
    need to regenerate and check-in all the prebuilt x86 CRT object
    files and libraries which link to them.
    
    Change-Id: I01c14c19ef7569c9ffed89495cae2a459972c04b
    Orig-Change-Id: I191ce1afb0dee7bbc28dcd9694e5919226dbd070
    Signed-off-by: Bruce J Beare <bruce.j.beare@intel.com>
    Signed-off-by: Mark D Horn <mark.d.horn@intel.com>
    Author: Lu, Hongjiu <hongjiu.lu@intel.com>
    Updated gcc 4.4.3 IA toolchain doesn't require the .ctors list
    
    Orig-Change-Id: Ia840a19a45257128eccdcf25d105f500f2d90741
    Signed-off-by: H.J. Lu <hjl.tools@gmail.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Enable functional DSO object destruction
    
    Unfortunately, legacy .so files for ARM don't have a correct crtbegin file.
    Consequently, we have to grandfather the old __dso_handle behaviour.
    Add some ifdefs for ARM to allow it to use the old code until we can work
    out a transition.
    
    Change-Id: I6a28f368267d792c94e1d985d8344023bc632f6f
    Author: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Revert "Update X86 Bionic CRT files for unwind/exceptions"
    
    This reverts commit dc3bc87b43d0d73d89cca59692b80de878e11a5d,
    causes netd to crash.
    Revert "x86: Enable -fstack-protector"
    
    This reverts commit e0b4844a20ffd022a568abb4203b3f7c759c7ff5,
    causes netd to crash.
    x86: Enable -fstack-protector
    
    Change-Id: Ib69514c3afcb4c1f5e5f3f8cd91acfd145a0866c
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Update X86 Bionic CRT files for unwind/exceptions
    
    Several updates to Bionic crt*.o files to implement Linux/x86
    stack unwind/exception handling.
    Mark __dso_handle as hidden.
    Note: Requires complete rebuild due to CRT changes. Google will
    need to regenerate and check-in all the prebuilt x86 CRT object
    files and libraries which link to them.
    
    Change-Id: I191ce1afb0dee7bbc28dcd9694e5919226dbd070
    Signed-off-by: Bruce J Beare <bruce.j.beare@intel.com>
    Signed-off-by: Mark D Horn <mark.d.horn@intel.com>
    Author: Lu, Hongjiu <hongjiu.lu@intel.com>
    Updated gcc 4.4.3 IA toolchain doesn't require the .ctors list
    
    Change-Id: Ia840a19a45257128eccdcf25d105f500f2d90741
    Signed-off-by: H.J. Lu <hjl.tools@gmail.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Allow dlclose() to properly call static C++ destructors.
    
    With this patch _and_ an upcoming build/ patch, the destruction
    of static C++ objects contained in shared libraries will happen
    properly when dlclose() is called.
    
    Note that this change introduces crtbegin_so.S and crtend_so.S which
    are currently ignored by the build system.
    
    + move definition of __dso_handle to the right place
    (before that, all shared libraries used the __dso_handle
    global variable from the C library).
    
    Note that we keep a 'weak' __dso_handle in aeabi.c to avoid
    breaking the build until the next patch to build/core/combo/
    appears. We will be able to remove that later.
    
    + move bionic/aeabi.c to arch-arm/bionic/ (its proper location)
    
    NOTE: The NDK will need to be modified to enable this feature in
             the shared libraries that are generated through it.
    
    Change-Id: I99cd801375bbaef0581175893d1aa0943211b9bc
    Allow static C++ destructors to be properly called on dlclose().
    
    With this patch, _and_ an upcoming build/ patch, the destruction
    of static C++ objects contained in shared libraries will happen
    properly when dlclose() is called.
    
    Note that this change introduces crtbegin_so.S and crtend_so.S which
    are currently ignored by the build system.
    
    + move definition of __dso_handle to the right place
      (before that, all shared libraries used the __dso_handle
       global variable from the C library).
    
      Note that we keep a 'weak' __dso_handle in aeabi.c to avoid
      breaking the build until the next patch to build/core/combo/
      appears. We will be able to remove that later.
    
    + move bionic/aeabi.c to arch-arm/bionic/ (its proper location)
    
    Change-Id: Ie771aa204e3acbdf02fd30ebd4150373a1398f39
    NOTE: The NDK will need to be modified to enable this feature in
          the shared libraries that are generated through it.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Enable functional DSO object destruction
    
    Unfortunately, legacy .so files for ARM don't have a correct crtbegin file.
    Consequently, we have to grandfather the old __dso_handle behaviour.
    Add some ifdefs for ARM to allow it to use the old code until we can work
    out a transition.
    
    Change-Id: I6a28f368267d792c94e1d985d8344023bc632f6f
    Author: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    x86: Enable -fstack-protector
    
    Change-Id: Iff9e3a3ba0e2d0faa7c6d98154aa5be0cc8a6c50
    Orig-Change-Id: Ib69514c3afcb4c1f5e5f3f8cd91acfd145a0866c
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Add new C++ headers <cerrno> and <cfloat>
    
    Also add std::malloc/realloc/calloc/free to <cstdlib>
    Rename <cwchar_is_not_supported> to <cwchar>
    AI 145716: am: CL 145714 Added cstring wrapper around string.h.
      In new, include cstddef which declares std::size_t.
      Original author: niko
    
    Automated import of CL 145716
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Simplify variable typing for IA builds
    
    Orig-Change-Id: I3f080b34360bfade0dbd5e2d8d0365e049162e4c
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Simplify variable typing for IA builds
    
    Change-Id: I065e5176b3a15bd74ba832f8827b4a4e4837b0f7
    Simplify variable typing for IA builds
    
    Change-Id: I3f080b34360bfade0dbd5e2d8d0365e049162e4c
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: Define new symbol visibility macros
    
    This patch defines a few new macros that can be used to control the
    visibility of symbols exported by the C library:
    
    - ENTRY_PRIVATE() can be used in assembly sources to indicate
      that an assembler function should have "hidden" visibility, i.e.
      will never be exported by the C library's shared library.
    
      This is the equivalent of using __LIBC_HIDDEN__ for a C function,
      but ENTRY_PRIVATE() works like ENTRY(), and must be used with
      END() to tag the end of the function.
    
    - __LIBC_ABI_PUBLIC__ can be used to tag a C functions as being
      part of the C library's public ABI. This is important for a
      few functions that must be exposed by the NDK to maintain
      binary compatibility.
    
      Once a symbol has been tagged with this macro, it shall
      *never* be removed from the library, even if it becomes
      directly unused due to implementation changes
      (e.g. __is_threaded).
    
    - __LIBC_ABI_PRIVATE__ can be used for C functions that should
      always be exported by the C library because they are used by
      other libraries in the platform, but should not be exposed
      by the NDK. It is possible to remove such symbols from the
      implementation if all callers are also modified.
    
    + Add missing END() assembly macro for x86
    
    Change-Id: Ia96236ea0dbec41d57bea634b39d246b30e5e234
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Remove an awkward #include that is no longer upstream.
    
    This was causing trouble in https://android-review.googlesource.com/#/c/37590/.
    
    Change-Id: Ib7cb4fbaef6e9c1470c59f67d24bd24c7ce90bcc
    NDK: x86 header file has incorrect definition for ptrdiff_t
    
    See Bug http://code.google.com/p/android/issues/detail?id=19042
    
    Change-Id: I8e975930e7f8c3c437ecdffbc6f6bc5028937829
    Signed-off-by: Mark D Horn <mark.d.horn@intel.com>
    libc: x86: Fixed size_t definition.
    
    This patch changes the declaration of size_t on x86 targets
    to test for the __ANDROID__ macro, instead of ANDROID
    
    __ANDROID__ should be a builting toolchain macro, while ANDROID
    is usually added manually during the build.
    
    Testing against __ANDROID__ allows us to use the header when
    using the NDK's standalone x86 toolchain.
    
    This is related to http://code.google.com/p/android/issues/detail?id=19011
    The bug was already fixed in the NDK platform headers, this simply updates
    the C library one accordingly.
    
    Change-Id: Ie038c4c8b37b7d24e2e4ae4d7a63371b69c9a51e
    use consistent guards for off_t and size_t defines for IA
    
    Orig-Change-Id: I9347ab4407c48c71c99f42583523ebe31a5e67ae
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    use consistent guards for off_t and size_t defines for IA
    
    Change-Id: Ie92b7597883c99e7f4101f4cf5e0ad267b4ee706
    use consistent guards for off_t and size_t defines for IA
    
    Change-Id: I9347ab4407c48c71c99f42583523ebe31a5e67ae
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Android hack for size_t
    
    Change-Id: I3c967fca60f542459dc17be84da47b3b6a26242b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Update ATOM string routines to latest
    
    Orig-Change-Id: I22a600e7f172681cfd38ff73a64e3fd07b284959
    Signed-off-by: Lu, Hongjiu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Update ATOM string routines to latest
    
    Change-Id: I22a600e7f172681cfd38ff73a64e3fd07b284959
    Signed-off-by: Lu, Hongjiu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Atom optimized string and memory routines
    
    Change-Id: I27b68bb28551c75c9ac84bb9730e2cd8254d8991
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Atom optimized string and memory routines
    
    Change-Id: I27b68bb28551c75c9ac84bb9730e2cd8254d8991
    Cherry-pick "generate PIC code".
    
    Change-Id: I7d5f2e5663df263493f65e364c959e663fc4d13a
    generate PIC code.
    
    Change-Id: I6740c30e2782ae203aa7ddaeaf3b233e90de9c4d
    Update ATOM string routines to latest
    
    Orig-Change-Id: I22a600e7f172681cfd38ff73a64e3fd07b284959
    Signed-off-by: Lu, Hongjiu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Update ATOM string routines to latest
    
    Change-Id: I22a600e7f172681cfd38ff73a64e3fd07b284959
    Signed-off-by: Lu, Hongjiu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Atom optimized string and memory routines
    
    Change-Id: I27b68bb28551c75c9ac84bb9730e2cd8254d8991
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Atom optimized string and memory routines
    
    Change-Id: I27b68bb28551c75c9ac84bb9730e2cd8254d8991
    bionic/x86: Optimization for memcpy
    
    Signed-off-by: Liubov Dmitrieva <liubov.dmitrieva@intel.com>
    Signed-off-by: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Wei A Jin <wei.a.jin@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    
    Conflicts:
    
            libc/arch-x86/string/ssse3-memcpy5.S
    
    Change-Id: I41e70d1d19d5457e65c89b64da452fbdaf3a00a7
    Cherry-pick "generate PIC code".
    
    Change-Id: I7d5f2e5663df263493f65e364c959e663fc4d13a
    generate PIC code.
    
    Change-Id: I6740c30e2782ae203aa7ddaeaf3b233e90de9c4d
    Update ATOM string routines to latest
    
    Orig-Change-Id: I22a600e7f172681cfd38ff73a64e3fd07b284959
    Signed-off-by: Lu, Hongjiu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Update ATOM string routines to latest
    
    Change-Id: I22a600e7f172681cfd38ff73a64e3fd07b284959
    Signed-off-by: Lu, Hongjiu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Atom optimized string and memory routines
    
    Change-Id: I27b68bb28551c75c9ac84bb9730e2cd8254d8991
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Update ATOM string routines to latest
    
    Orig-Change-Id: I22a600e7f172681cfd38ff73a64e3fd07b284959
    Signed-off-by: Lu, Hongjiu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Update ATOM string routines to latest
    
    Change-Id: I22a600e7f172681cfd38ff73a64e3fd07b284959
    Signed-off-by: Lu, Hongjiu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Update ATOM string routines to latest
    
    Orig-Change-Id: I22a600e7f172681cfd38ff73a64e3fd07b284959
    Signed-off-by: Lu, Hongjiu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Update ATOM string routines to latest
    
    Change-Id: I22a600e7f172681cfd38ff73a64e3fd07b284959
    Signed-off-by: Lu, Hongjiu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Atom optimized string and memory routines
    
    Change-Id: I27b68bb28551c75c9ac84bb9730e2cd8254d8991
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Atom optimized string and memory routines
    
    Change-Id: I27b68bb28551c75c9ac84bb9730e2cd8254d8991
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Atom optimized string and memory routines
    
    Change-Id: I27b68bb28551c75c9ac84bb9730e2cd8254d8991
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Atom optimized string and memory routines
    
    Change-Id: I27b68bb28551c75c9ac84bb9730e2cd8254d8991
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Atom optimized string and memory routines
    
    Change-Id: I27b68bb28551c75c9ac84bb9730e2cd8254d8991
    Update ATOM string routines to latest
    
    Orig-Change-Id: I22a600e7f172681cfd38ff73a64e3fd07b284959
    Signed-off-by: Lu, Hongjiu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Update ATOM string routines to latest
    
    Change-Id: I22a600e7f172681cfd38ff73a64e3fd07b284959
    Signed-off-by: Lu, Hongjiu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Atom optimized string and memory routines
    
    Change-Id: I27b68bb28551c75c9ac84bb9730e2cd8254d8991
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Update ATOM string routines to latest
    
    Orig-Change-Id: I22a600e7f172681cfd38ff73a64e3fd07b284959
    Signed-off-by: Lu, Hongjiu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Update ATOM string routines to latest
    
    Change-Id: I22a600e7f172681cfd38ff73a64e3fd07b284959
    Signed-off-by: Lu, Hongjiu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Atom optimized string and memory routines
    
    Change-Id: I27b68bb28551c75c9ac84bb9730e2cd8254d8991
    Use unambiguous mnemonics
    
    Change-Id: I8da0af54cc3cbf69d9e485eb71bc44a6976b1adc
    Author: Kevin P Schoedel <kevin.p.schoedel@intel.com>
    Reviewed-by: Edwin Vane <edwin.vane@intel.com>
    Update ATOM string routines to latest
    
    Orig-Change-Id: I22a600e7f172681cfd38ff73a64e3fd07b284959
    Signed-off-by: Lu, Hongjiu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Update ATOM string routines to latest
    
    Change-Id: I22a600e7f172681cfd38ff73a64e3fd07b284959
    Signed-off-by: Lu, Hongjiu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Atom optimized string and memory routines
    
    Change-Id: I27b68bb28551c75c9ac84bb9730e2cd8254d8991
    Update ATOM string routines to latest
    
    Orig-Change-Id: I22a600e7f172681cfd38ff73a64e3fd07b284959
    Signed-off-by: Lu, Hongjiu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Update ATOM string routines to latest
    
    Change-Id: I22a600e7f172681cfd38ff73a64e3fd07b284959
    Signed-off-by: Lu, Hongjiu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Atom optimized string and memory routines
    
    Change-Id: I27b68bb28551c75c9ac84bb9730e2cd8254d8991
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    improve readability of stdio: fix indentation and remove trailing spaces
    
    Change-Id: Ic51e58a7c75d20bf770dc0ebd7f97a338fbe0036
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    stdio: make internal symbols static/hidden
    
    Although header libc/stdio/local.h declares the macros and private
    variables of stdio, there are several internal symbols exposed
    unexpectedly.
    
    Change-Id: Ie7a07f85b70322fb9cd05b3c8e1bcc416061eb4b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: speed-up flockfile()/funlockfile()
    
    For Honeycomb, we added proper file thread-safety for
    all FILE* operations. However, we did implement that by
    using an out-of-band hash table to map FILE* pointers
    to phtread_mutex_t mutexes, because we couldn't change
    the size of 'struct _sFILE' without breaking the ABI.
    
    It turns out that our BSD-derived code already has
    some support code to extend FILE* objects, so use it
    instead. See libc/stdio/fileext.h
    
    This patch gets rid of the hash table, and put the
    mutex directly into the sFILE extension.
    
    Change-Id: If1c3fe0a0a89da49c568e9a7560b7827737ff4d0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    improve readability of stdio: fix indentation and remove trailing spaces
    
    Change-Id: Ic51e58a7c75d20bf770dc0ebd7f97a338fbe0036
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    FORTIFY_SOURCE: add snprintf, vsnprintf
    
    Add _FORTIFY_SOURCE support for snprintf, vsnprintf
    
    At this time, we opt out of these protections for clang, as clang
    does not implement __builtin_va_arg_pack().
    
    http://clang.llvm.org/docs/UsersManual.html#c_unimpl_gcc
    
    Change-Id: I73ebe5ec8dad1dca8898a76d6afb693a25f75375
    Added actual event logging calls to the FORTIFY_SOURCE methods.
    
    Change-Id: I3bf4fa8678c33187cb8ce4b75e666ddcd24403ab
    libc: implement some FORTIFY_SOURCE functions
    
    Add initial support for -D_FORTIFY_SOURCE to bionic for the
    following functions:
    
    * memcpy
    * memmove
    * strcpy
    * strcat
    * strncpy
    * strncat
    
    This change adds a new version of the above functions which passes
    the size of the destination buffer to __builtin___*_chk.
    
    If the compiler can determine, at compile time, that the destination
    buffer is large enough, or the destination buffer can point to an object
    of unknown size, then the check call is bypassed.
    
    If the compiler can't make a compile time decision, then it calls
    the __*_chk() function, which does a runtime buffer size check
    
    These options are only enabled if the code is compiled with
    -D_FORTIFY_SOURCE=1 or 2, and only when optimizations are enabled.
    
    Please see
    * http://gcc.gnu.org/onlinedocs/gcc/Object-Size-Checking.html
    * http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
    
    for additional details on FORTIFY_SOURCE.
    
    Testing: Compiled the entire Android tree with -D_FORTIFY_SOURCE=1,
    and verified that everything appears to be working properly.
    Also created a test buffer overflow, and verified that it was
    caught by this change.
    
    Change-Id: I4fddb445bafe92b16845b22458d72e6dedd24fbc
    Implement the "abort" stub in assembly for ARM.
    
    So that we can always get the full stack trace regardless of gcc's handling
    of the "noreturn" attribute associated with abort().
    
    (Cherry pick of Id264a5167e7cabbf11515fbc48f5469c527e34d4.)
    
    Bug: 6455193
    
    Conflicts:
    
            libc/Android.mk
    
    Change-Id: I568fc5303fd1d747075ca933355f914122f94dac
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    vfscanf: Add support for L type modifier for long long
    
    scanf()'s man page suggests support for %Ld, (and ioux).
    Implement this so that 3rd party code will work correctly.
    
    Change-Id: Idce9d266071cb688ca71429395a2d9edf6813595
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of stdio: fix indentation and remove trailing spaces
    
    Change-Id: Ic51e58a7c75d20bf770dc0ebd7f97a338fbe0036
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of stdio: fix indentation and remove trailing spaces
    
    Change-Id: Ic51e58a7c75d20bf770dc0ebd7f97a338fbe0036
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Bug 3330205 Put blanks and zeroes in const area
    
    Change-Id: I8f25aebd1ded3617dc60951271767281f73b8684
    stdio: make internal symbols static/hidden
    
    Although header libc/stdio/local.h declares the macros and private
    variables of stdio, there are several internal symbols exposed
    unexpectedly.
    
    Change-Id: Ie7a07f85b70322fb9cd05b3c8e1bcc416061eb4b
    improve readability of stdio: fix indentation and remove trailing spaces
    
    Change-Id: Ic51e58a7c75d20bf770dc0ebd7f97a338fbe0036
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    stdio: simplify asprintf()
    
    ... by removing unneeded NULL check, as free() already does it.
    By the way, we don't need to set a stack variable back to NULL.
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    
    Change-Id: Id1f72e872f73366dddcea4abc75885a3d9a318c6
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of stdio: fix indentation and remove trailing spaces
    
    Change-Id: Ic51e58a7c75d20bf770dc0ebd7f97a338fbe0036
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    improve readability of stdio: fix indentation and remove trailing spaces
    
    Change-Id: Ic51e58a7c75d20bf770dc0ebd7f97a338fbe0036
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of stdio: fix indentation and remove trailing spaces
    
    Change-Id: Ic51e58a7c75d20bf770dc0ebd7f97a338fbe0036
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    FORTIFY_SOURCE: add snprintf, vsnprintf
    
    Add _FORTIFY_SOURCE support for snprintf, vsnprintf
    
    At this time, we opt out of these protections for clang, as clang
    does not implement __builtin_va_arg_pack().
    
    http://clang.llvm.org/docs/UsersManual.html#c_unimpl_gcc
    
    Change-Id: I73ebe5ec8dad1dca8898a76d6afb693a25f75375
    Added actual event logging calls to the FORTIFY_SOURCE methods.
    
    Change-Id: I3bf4fa8678c33187cb8ce4b75e666ddcd24403ab
    libc: implement some FORTIFY_SOURCE functions
    
    Add initial support for -D_FORTIFY_SOURCE to bionic for the
    following functions:
    
    * memcpy
    * memmove
    * strcpy
    * strcat
    * strncpy
    * strncat
    
    This change adds a new version of the above functions which passes
    the size of the destination buffer to __builtin___*_chk.
    
    If the compiler can determine, at compile time, that the destination
    buffer is large enough, or the destination buffer can point to an object
    of unknown size, then the check call is bypassed.
    
    If the compiler can't make a compile time decision, then it calls
    the __*_chk() function, which does a runtime buffer size check
    
    These options are only enabled if the code is compiled with
    -D_FORTIFY_SOURCE=1 or 2, and only when optimizations are enabled.
    
    Please see
    * http://gcc.gnu.org/onlinedocs/gcc/Object-Size-Checking.html
    * http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
    
    for additional details on FORTIFY_SOURCE.
    
    Testing: Compiled the entire Android tree with -D_FORTIFY_SOURCE=1,
    and verified that everything appears to be working properly.
    Also created a test buffer overflow, and verified that it was
    caught by this change.
    
    Change-Id: I4fddb445bafe92b16845b22458d72e6dedd24fbc
    Implement the "abort" stub in assembly for ARM.
    
    So that we can always get the full stack trace regardless of gcc's handling
    of the "noreturn" attribute associated with abort().
    
    (Cherry pick of Id264a5167e7cabbf11515fbc48f5469c527e34d4.)
    
    Bug: 6455193
    
    Conflicts:
    
            libc/Android.mk
    
    Change-Id: I568fc5303fd1d747075ca933355f914122f94dac
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    improve readability of stdio: fix indentation and remove trailing spaces
    
    Change-Id: Ic51e58a7c75d20bf770dc0ebd7f97a338fbe0036
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: speed-up flockfile()/funlockfile()
    
    For Honeycomb, we added proper file thread-safety for
    all FILE* operations. However, we did implement that by
    using an out-of-band hash table to map FILE* pointers
    to phtread_mutex_t mutexes, because we couldn't change
    the size of 'struct _sFILE' without breaking the ABI.
    
    It turns out that our BSD-derived code already has
    some support code to extend FILE* objects, so use it
    instead. See libc/stdio/fileext.h
    
    This patch gets rid of the hash table, and put the
    mutex directly into the sFILE extension.
    
    Change-Id: If1c3fe0a0a89da49c568e9a7560b7827737ff4d0
    stdio: make internal symbols static/hidden
    
    Although header libc/stdio/local.h declares the macros and private
    variables of stdio, there are several internal symbols exposed
    unexpectedly.
    
    Change-Id: Ie7a07f85b70322fb9cd05b3c8e1bcc416061eb4b
    stdio: simplify __fremovelock()
    
    ... by removing extraneous NULL check, as free() already does it.
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    Change-Id: I0445f35c7ad0a049a0e4aee1fbe002ed2f13b94b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of stdio: fix indentation and remove trailing spaces
    
    Change-Id: Ic51e58a7c75d20bf770dc0ebd7f97a338fbe0036
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    vfprintf: fix spelling.
    
    Change-Id: I6dc611143fb1f3e9ccf0a77b40ee48a3c1d72ca9
    Add missing va_end() to prevent stack corruptions
    
    Added va_end() for copied variable arguments lists
    in __vfprintf() and __find_arguments().
    This is by C standard.
    Important for systems which pass arguments in registers.
    
    Change-Id: I7ac42beaa6645bfe856c18132253352dae29ea37
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    Bug 3330205 Remove unnecessary static variable
    
    Change-Id: I7e781d26d6565952712f8fb0274d336462b441fd
    Bug 3330205 Put blanks and zeroes in const area
    
    Change-Id: I8f25aebd1ded3617dc60951271767281f73b8684
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    FORTIFY_SOURCE: add sprintf / vsprintf support
    
    sprintf FORTIFY_SOURCE protections are not available
    on clang.
    
    Also add various __attribute__s to stdio functions.
    
    Change-Id: I936d1f9e55fe53a68885c4524b7b59e68fed218d
    FORTIFY_SOURCE: add snprintf, vsnprintf
    
    Add _FORTIFY_SOURCE support for snprintf, vsnprintf
    
    At this time, we opt out of these protections for clang, as clang
    does not implement __builtin_va_arg_pack().
    
    http://clang.llvm.org/docs/UsersManual.html#c_unimpl_gcc
    
    Change-Id: I73ebe5ec8dad1dca8898a76d6afb693a25f75375
    Added actual event logging calls to the FORTIFY_SOURCE methods.
    
    Change-Id: I3bf4fa8678c33187cb8ce4b75e666ddcd24403ab
    libc: implement some FORTIFY_SOURCE functions
    
    Add initial support for -D_FORTIFY_SOURCE to bionic for the
    following functions:
    
    * memcpy
    * memmove
    * strcpy
    * strcat
    * strncpy
    * strncat
    
    This change adds a new version of the above functions which passes
    the size of the destination buffer to __builtin___*_chk.
    
    If the compiler can determine, at compile time, that the destination
    buffer is large enough, or the destination buffer can point to an object
    of unknown size, then the check call is bypassed.
    
    If the compiler can't make a compile time decision, then it calls
    the __*_chk() function, which does a runtime buffer size check
    
    These options are only enabled if the code is compiled with
    -D_FORTIFY_SOURCE=1 or 2, and only when optimizations are enabled.
    
    Please see
    * http://gcc.gnu.org/onlinedocs/gcc/Object-Size-Checking.html
    * http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
    
    for additional details on FORTIFY_SOURCE.
    
    Testing: Compiled the entire Android tree with -D_FORTIFY_SOURCE=1,
    and verified that everything appears to be working properly.
    Also created a test buffer overflow, and verified that it was
    caught by this change.
    
    Change-Id: I4fddb445bafe92b16845b22458d72e6dedd24fbc
    Implement the "abort" stub in assembly for ARM.
    
    So that we can always get the full stack trace regardless of gcc's handling
    of the "noreturn" attribute associated with abort().
    
    (Cherry pick of Id264a5167e7cabbf11515fbc48f5469c527e34d4.)
    
    Bug: 6455193
    
    Conflicts:
    
            libc/Android.mk
    
    Change-Id: I568fc5303fd1d747075ca933355f914122f94dac
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    FORTIFY_SOURCE: add fgets support.
    
    Change-Id: I8c3410a90c71a3336c4ac8581618fa9330edf5e3
    FORTIFY_SOURCE: add strlcpy / strlcat support
    
    Add strlcpy / strlcat support to FORTIFY_SOURCE. This allows
    us to do consistency checks on to ensure we don't overflow buffers
    when the compiler is able to tell us the size of the buffer we're
    dealing with.
    
    Unlike previous changes, this change DOES NOT use the compiler's
    builtin support. Instead, we do everything the compiler would
    normally do.
    
    Change-Id: I47c099a911382452eafd711f8e9bfe7c2d0a0d22
    Added actual event logging calls to the FORTIFY_SOURCE methods.
    
    Change-Id: I3bf4fa8678c33187cb8ce4b75e666ddcd24403ab
    libc: implement some FORTIFY_SOURCE functions
    
    Add initial support for -D_FORTIFY_SOURCE to bionic for the
    following functions:
    
    * memcpy
    * memmove
    * strcpy
    * strcat
    * strncpy
    * strncat
    
    This change adds a new version of the above functions which passes
    the size of the destination buffer to __builtin___*_chk.
    
    If the compiler can determine, at compile time, that the destination
    buffer is large enough, or the destination buffer can point to an object
    of unknown size, then the check call is bypassed.
    
    If the compiler can't make a compile time decision, then it calls
    the __*_chk() function, which does a runtime buffer size check
    
    These options are only enabled if the code is compiled with
    -D_FORTIFY_SOURCE=1 or 2, and only when optimizations are enabled.
    
    Please see
    * http://gcc.gnu.org/onlinedocs/gcc/Object-Size-Checking.html
    * http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
    
    for additional details on FORTIFY_SOURCE.
    
    Testing: Compiled the entire Android tree with -D_FORTIFY_SOURCE=1,
    and verified that everything appears to be working properly.
    Also created a test buffer overflow, and verified that it was
    caught by this change.
    
    Change-Id: I4fddb445bafe92b16845b22458d72e6dedd24fbc
    Implement the "abort" stub in assembly for ARM.
    
    So that we can always get the full stack trace regardless of gcc's handling
    of the "noreturn" attribute associated with abort().
    
    (Cherry pick of Id264a5167e7cabbf11515fbc48f5469c527e34d4.)
    
    Bug: 6455193
    
    Conflicts:
    
            libc/Android.mk
    
    Change-Id: I568fc5303fd1d747075ca933355f914122f94dac
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    FORTIFY_SOURCE: add sprintf / vsprintf support
    
    sprintf FORTIFY_SOURCE protections are not available
    on clang.
    
    Also add various __attribute__s to stdio functions.
    
    Change-Id: I936d1f9e55fe53a68885c4524b7b59e68fed218d
    FORTIFY_SOURCE: add snprintf, vsnprintf
    
    Add _FORTIFY_SOURCE support for snprintf, vsnprintf
    
    At this time, we opt out of these protections for clang, as clang
    does not implement __builtin_va_arg_pack().
    
    http://clang.llvm.org/docs/UsersManual.html#c_unimpl_gcc
    
    Change-Id: I73ebe5ec8dad1dca8898a76d6afb693a25f75375
    Added actual event logging calls to the FORTIFY_SOURCE methods.
    
    Change-Id: I3bf4fa8678c33187cb8ce4b75e666ddcd24403ab
    libc: implement some FORTIFY_SOURCE functions
    
    Add initial support for -D_FORTIFY_SOURCE to bionic for the
    following functions:
    
    * memcpy
    * memmove
    * strcpy
    * strcat
    * strncpy
    * strncat
    
    This change adds a new version of the above functions which passes
    the size of the destination buffer to __builtin___*_chk.
    
    If the compiler can determine, at compile time, that the destination
    buffer is large enough, or the destination buffer can point to an object
    of unknown size, then the check call is bypassed.
    
    If the compiler can't make a compile time decision, then it calls
    the __*_chk() function, which does a runtime buffer size check
    
    These options are only enabled if the code is compiled with
    -D_FORTIFY_SOURCE=1 or 2, and only when optimizations are enabled.
    
    Please see
    * http://gcc.gnu.org/onlinedocs/gcc/Object-Size-Checking.html
    * http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
    
    for additional details on FORTIFY_SOURCE.
    
    Testing: Compiled the entire Android tree with -D_FORTIFY_SOURCE=1,
    and verified that everything appears to be working properly.
    Also created a test buffer overflow, and verified that it was
    caught by this change.
    
    Change-Id: I4fddb445bafe92b16845b22458d72e6dedd24fbc
    Implement the "abort" stub in assembly for ARM.
    
    So that we can always get the full stack trace regardless of gcc's handling
    of the "noreturn" attribute associated with abort().
    
    (Cherry pick of Id264a5167e7cabbf11515fbc48f5469c527e34d4.)
    
    Bug: 6455193
    
    Conflicts:
    
            libc/Android.mk
    
    Change-Id: I568fc5303fd1d747075ca933355f914122f94dac
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of stdio: fix indentation and remove trailing spaces
    
    Change-Id: Ic51e58a7c75d20bf770dc0ebd7f97a338fbe0036
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    typo in libc/stdio/wcio.h
    
    whcar_io_data -> wchar_io_data
    Signed-off-by: Nathan Forbes <me@nathanforbes.com>
    
    Change-Id: I45c231efffac265eed51b7632d5a1b21c18bfa55
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    stdio: make internal symbols static/hidden
    
    Although header libc/stdio/local.h declares the macros and private
    variables of stdio, there are several internal symbols exposed
    unexpectedly.
    
    Change-Id: Ie7a07f85b70322fb9cd05b3c8e1bcc416061eb4b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of stdio: fix indentation and remove trailing spaces
    
    Change-Id: Ic51e58a7c75d20bf770dc0ebd7f97a338fbe0036
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    stdio: simplify vasprintf()
    
    ... by removing unneeded NULL check, as free() already does it.
    By the way, we don't need to set a stack variable back to NULL.
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    
    Change-Id: Id90eb8f042b5c922c5ff139b11ff8366fb404566
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: speed-up flockfile()/funlockfile()
    
    For Honeycomb, we added proper file thread-safety for
    all FILE* operations. However, we did implement that by
    using an out-of-band hash table to map FILE* pointers
    to phtread_mutex_t mutexes, because we couldn't change
    the size of 'struct _sFILE' without breaking the ABI.
    
    It turns out that our BSD-derived code already has
    some support code to extend FILE* objects, so use it
    instead. See libc/stdio/fileext.h
    
    This patch gets rid of the hash table, and put the
    mutex directly into the sFILE extension.
    
    Change-Id: If1c3fe0a0a89da49c568e9a7560b7827737ff4d0
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    stdio: make internal symbols static/hidden
    
    Although header libc/stdio/local.h declares the macros and private
    variables of stdio, there are several internal symbols exposed
    unexpectedly.
    
    Change-Id: Ie7a07f85b70322fb9cd05b3c8e1bcc416061eb4b
    improve readability of stdio: fix indentation and remove trailing spaces
    
    Change-Id: Ic51e58a7c75d20bf770dc0ebd7f97a338fbe0036
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Bug 3330205 Put blanks and zeroes in const area
    
    Change-Id: I8f25aebd1ded3617dc60951271767281f73b8684
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    improve readability of stdio: fix indentation and remove trailing spaces
    
    Change-Id: Ic51e58a7c75d20bf770dc0ebd7f97a338fbe0036
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    improve readability of stdio: fix indentation and remove trailing spaces
    
    Change-Id: Ic51e58a7c75d20bf770dc0ebd7f97a338fbe0036
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix build warning of initialization but no use.
    
    first_run is only used with LOCK_AT_FORK, however, care needs to be
    taken with the #if to avoid compiler warnings when LOCK_AT_FORK isn't
    being used.
    
    Change-Id: I6bcfac2ab8732c91607f4a1bcd7c0019f29c2eec
    Add missing MALLOC_FAILURE_ACTION calls to dlmalloc.
    
    Without these, sometimes malloc(3) returns NULL without setting errno.
    
    Change-Id: I4708c3f675bf2c878ddcaf012fde7848b255826b
    Avoid malloc lock while calling pthread_atfork.
    
    Expecting the memory in a forked child process to be sane wrt threading
    is a bad idea. An example of a problem is when the parent process has
    the malloc lock and a child process is forked. The malloc lock in the
    child will appear locked by a thread that doesn't exist.
    
    This change aims to make bionic more compatible with glibc by reseting
    the malloc lock in the child forked process, as well as holding it
    during the fork. This is a feature in dlmalloc 2.8.6 called
    LOCK_AT_FORK. In general this feature isn't necessary as a forked
    process will then exec. Some bad applications rely on being able to use
    features like malloc before the exec and having multiple threads running
    in the parent program. This isn't a problem with glibc and this patch
    makes it not a problem for bionic.
    
    Unfortunately for use in bionic, LOCK_AT_FORK has an issue as internally
    it uses pthread_atfork that in bionic uses malloc. This leads to the
    LOCK_AT_FORK initialization deadlocking with pthread_atfork's call to
    malloc due to the malloc lock. This change moves the pthread_atfork logic
    in LOCK_AT_FORK to be called without the malloc lock held.
    
    Change-Id: Id68175a564a6abb936ee4488b44d9479f7311f69
    Upgrade to dlmalloc 2.8.6.
    
    This fixes a bug and enables the use of MORECORE_CONTIGUOUS.
    
    Change-Id: Ia7c5d32bdc46e99b3ecb92ee94d1f702c4385d5d
    Revert "Revert "Upgrade to dlmalloc 2.8.5.""
    
    This reverts commit f72ee269274170cd46af2844a2fe88767fb6e43c.
    Revert "Upgrade to dlmalloc 2.8.5."
    
    This reverts commit 999089181ef60bb67e1a49f2cf6f4ec608a7caf8.
    Revert "Upgrade to dlmalloc 2.8.5."
    
    This reverts commit 999089181ef60bb67e1a49f2cf6f4ec608a7caf8.
    Upgrade to dlmalloc 2.8.5.
    
    Move dlmalloc code to upstream-dlmalloc to make pulling upstream changes
    easier.
    Declare pvalloc and malloc_usable_size routines present in malloc.h but with
    missing implementations. Remove other functions from malloc.h that have
    no implementation nor use in Android.
    
    Change-Id: Ia6472ec6cbebc9ad1ef99f4669de9d33fcc2efb4
    Minor tweak to get memory around corrupted heap chunks dumped.
    
    Change-Id: I8f72c5c7e23960b13fc53e2354cd74aca8aac3c0
    Print the corrupted address passed to free().
    
    For example:
    
    @@@ ABORTING: INVALID HEAP ADDRESS IN dlfree addr=0x5c3bfbd0
    Fatal signal 11 (SIGSEGV) at 0xdeadbaad (code=1), thread 2942
    
    The addr=0x5c3bfbd0 part is new.
    
    Change-Id: I8670144b2b0a3a6182384150d762c97dfee5452f
    Print the corrupted address passed to free().
    
    For example:
    
    @@@ ABORTING: INVALID HEAP ADDRESS IN dlfree addr=0x5c3bfbd0
    Fatal signal 11 (SIGSEGV) at 0xdeadbaad (code=1), thread 2942
    
    The addr=0x5c3bfbd0 part is new.
    
    Change-Id: I8670144b2b0a3a6182384150d762c97dfee5452f
    Add the posix_memalign(3) function to bionic
    
    The posix_memalign(3) function is very similar to the traditional
    memalign(3) function, but with better error reporting and a guarantee
    that the memory it allocates can be freed.  In bionic, memalign(3)
    allocated memory can be freed, so posix_memalign(3) is just a wrapper
    around memalign(3).
    
    Change-Id: I62ee908aa5ba6b887d8446a00d8298d080a6a299
    Initialize mspace->least_addr properly in the mmap path.
    
    BUG: 6206963
    Change-Id: Id2ab580246de50a4511b56a734a7bece98fb945c
    Add the posix_memalign(3) function to bionic
    
    The posix_memalign(3) function is very similar to the traditional
    memalign(3) function, but with better error reporting and a guarantee
    that the memory it allocates can be freed.  In bionic, memalign(3)
    allocated memory can be freed, so posix_memalign(3) is just a wrapper
    around memalign(3).
    
    Change-Id: I62ee908aa5ba6b887d8446a00d8298d080a6a299
    Revert "Revert "libc: Add logcat error message for memory corruption""
    
    This reverts commit 368ee1e4d65c555fdb0fa4b3a91d75a397936908.
    Really fix the build.
    
    libcutils/mspace.c includes libc/bionic/dlmalloc.c, we need to
    take care of the fact that any internal C library function cannot
    be used from it.
    
    Change-Id: I0bc81ae090b7ac2d464f26b97fc6b94a08cdad9c
    Fix broken build
    
    Change-Id: Ia46b50aec51a55434c8828a73e07f4732f8f6c1c
    Revert "libc: Add logcat error message for memory corruption"
    
    This fixes the build.
    
    This reverts commit 7708a89c60e7b024d31c48c8034932c5e9f0aceb.
    libc: Add logcat error message for memory corruption
    
    Our dlmalloc implementation currently calls abort() when it detects
    that the heap is corrupted, or that an invalid pointer is passed to
    one of its functions.
    
    The only way to detect this is because abort() will force-fully
    crash the current program with a magic fault address of '0xdeadbaad'.
    
    However, this is not really well documented, and a frequent topic
    on the android-ndk forum (among others).
    
    This change makes our dlmalloc code dump a simple message to the
    log just before the abort() call (and hence before the stack trace)
    to better help identify the problem.
    
    Change-Id: Iebf7eb7fe26463ecadfaca8f247d237edb441e3c
    Split libc_debug.so into two .so modules loaded on demand from libc.so
    
    This change is intended to eliminate need to replace libc.so with libc_debug.so in order to enablememory allocation debugging.
    This is also the first step towards implementing extended memoryallocation debugging using emulator's capabilities in monitoring memory access.
    eclair snapshot
    Add mspace_merge_objects
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Upgrade to dlmalloc 2.8.6.
    
    This fixes a bug and enables the use of MORECORE_CONTIGUOUS.
    
    Change-Id: Ia7c5d32bdc46e99b3ecb92ee94d1f702c4385d5d
    Revert "Revert "Upgrade to dlmalloc 2.8.5.""
    
    This reverts commit f72ee269274170cd46af2844a2fe88767fb6e43c.
    Revert "Upgrade to dlmalloc 2.8.5."
    
    This reverts commit 999089181ef60bb67e1a49f2cf6f4ec608a7caf8.
    Revert "Upgrade to dlmalloc 2.8.5."
    
    This reverts commit 999089181ef60bb67e1a49f2cf6f4ec608a7caf8.
    Upgrade to dlmalloc 2.8.5.
    
    Move dlmalloc code to upstream-dlmalloc to make pulling upstream changes
    easier.
    Declare pvalloc and malloc_usable_size routines present in malloc.h but with
    missing implementations. Remove other functions from malloc.h that have
    no implementation nor use in Android.
    
    Change-Id: Ia6472ec6cbebc9ad1ef99f4669de9d33fcc2efb4
    Split libc_debug.so into two .so modules loaded on demand from libc.so
    
    This change is intended to eliminate need to replace libc.so with libc_debug.so in order to enablememory allocation debugging.
    This is also the first step towards implementing extended memoryallocation debugging using emulator's capabilities in monitoring memory access.
    eclair snapshot
    Add mspace_merge_objects
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Upgrade to dlmalloc 2.8.6.
    
    This fixes a bug and enables the use of MORECORE_CONTIGUOUS.
    
    Change-Id: Ia7c5d32bdc46e99b3ecb92ee94d1f702c4385d5d
    Revert "Revert "Upgrade to dlmalloc 2.8.5.""
    
    This reverts commit f72ee269274170cd46af2844a2fe88767fb6e43c.
    Revert "Upgrade to dlmalloc 2.8.5."
    
    This reverts commit 999089181ef60bb67e1a49f2cf6f4ec608a7caf8.
    Revert "Upgrade to dlmalloc 2.8.5."
    
    This reverts commit 999089181ef60bb67e1a49f2cf6f4ec608a7caf8.
    Upgrade to dlmalloc 2.8.5.
    
    Move dlmalloc code to upstream-dlmalloc to make pulling upstream changes
    easier.
    Declare pvalloc and malloc_usable_size routines present in malloc.h but with
    missing implementations. Remove other functions from malloc.h that have
    no implementation nor use in Android.
    
    Change-Id: Ia6472ec6cbebc9ad1ef99f4669de9d33fcc2efb4
    DO NOT MERGE: libc: enable IPTOS_MINCOST, fixup gethostbyaddr() proto.
    
    DO NOT MERGE: pulled in from master for iptables v1.4.11 update
    
    Make netinet/ip.h have IPTOS_MINCOST which matches what
      kernel/common/linux/ip.h has to say.
    Fixup gethostbyaddr() 1st arg to match what man has to say.
    
    Change-Id: Iff9647d4a46ea88b1fc32163eb69bb9b27cdf370
    libc: enable IPTOS_MINCOST, fixup gethostbyaddr() proto.
    
    Make netinet/ip.h have IPTOS_MINCOST which matches what
      kernel/common/linux/ip.h has to say.
    Fixup gethostbyaddr() 1st arg to match what man has to say.
    
    Change-Id: Iff9647d4a46ea88b1fc32163eb69bb9b27cdf370
    libc: enable IPTOS_MINCOST, fixup gethostbyaddr() proto.
    
    Make netinet/ip.h have IPTOS_MINCOST which matches what
      kernel/common/linux/ip.h has to say.
    Fixup gethostbyaddr() 1st arg to match what man has to say.
    
    Change-Id: Iff9647d4a46ea88b1fc32163eb69bb9b27cdf370
    Add some missing includes.
    
    Change-Id: Ieec623c06bc32ec78334f628af25b00c2bccd2e7
    gethnamaddr: make helper functions static
    
    In order not to conflict with the symbols defined in file
    libc/netbsd/getaddrinfo.c, this patch makes the internal/helper
    functions static.
    
    Change-Id: I0f85599e0b4ce0a637d005ff1680e1805dec4380
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@132276
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Added missing cache failed notification
    
    Added a missing call to _resolv_cache_query_failed for another fail
    case where it was missing (it doesn't go through the error handling
    under the "fail" label). This missing notification caused requests to
    have to wait for timeout instead of beeing notified on some failed
    requests.
    
    Change-Id: I904d60269c59b926784e3a397d2a860329f55142
    Added event logging for some spoofed DNS queries.
    
    Change-Id: I40909306e8cf922f1dd5a5685db89f732a709794
    Avoid multiple dns lookups for the same query
    
    If two or more rapid dns requests for the same server are done
    from different threads it turns into separate dns reques, if
    the response of the request isn't found in the cache.
    
    This patch avoid multiple request for the same server by
    letting subsequents request wait until the first request
    has finished.
    
    Change-Id: Ic72ea0e7d3964a4164eddf866feb4357ec4dfe54
    res_send: Avoid spurious close()s and (rare) failure
    
    When looping over the current list of sockets we are connected to,
    use getpeername() not getsockname() to find out who the remote
    end is.  This change avoids spurious close() and (rare) failure.
    
    Origin: ISC bug #18625 and fixed in libbind 6.0
    
    Change-Id: I5e85f9ff4b98c237978e4bf4bd85ba0a90d768e6
    Adding a timeout to tcp dns lookup connects.
    
    TCP isn't supported on some dns servers, which makes the old code
    hang forever.
    
    NOT adding a stopship to remove debugging stuff - it was too painful
    (14s timeout on failed tcp dns lookups) so we decided not to bother people.
    
    bug:5766949
    Change-Id: I381c20c3e11b8e994438d4f7c58ef643cd36554e
    resolv: make internal symbols static/hidden
    
    Change-Id: I988b83613e6252c0cc961555e81c10f856a38b37
    eclair snapshot
    Make IPv6 definitions comply with RFC 3493:
     - Add some definitions to netinet/in6.h
     - Include netinet/in6.h from netinet/in.h
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@132276
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Avoid multiple dns lookups for the same query
    
    If two or more rapid dns requests for the same server are done
    from different threads it turns into separate dns reques, if
    the response of the request isn't found in the cache.
    
    This patch avoid multiple request for the same server by
    letting subsequents request wait until the first request
    has finished.
    
    Change-Id: Ic72ea0e7d3964a4164eddf866feb4357ec4dfe54
    Increase the size of the system-wide dns cache
    
    32 enteries perhaps was ok for per-process caching with ipv4 only
    but adding ipv6 records makes it effectively 16 entries and making
    it system wide makes is pretty useless.  Increasing to 640 entries.
    
    bug:5841178
    Change-Id: I879f8bf4d3c4d8c1708bb46d46a67c1f64b1861f
    libc: remove private declarations from <time.h> and <resolv.h>
    
    This patch is used to remove private C library declarations from the
    public headers (that are exported to the NDK). It should *only* be
    submitted after all other patches modifying the users of said
    private functions have been submitted to the tree, to avoid
    breakages.
    
    Change-Id: I0a5e3014f8e3ac9ed8df86a5cdae506337c23252
    Add some logging of dns cache operations
    
    Added info about what entries are getting flushed due to ttl or size limits.
    
    Change-Id: I69fb70ce23b5b820f5f1a5738c0f1aa57b6a1127
    Don't call freeaddrinfo with a NULL ptr.
    
    bug:5067055
    Change-Id: I863dc4760a0aa449ac6298397ed571d8d9287801
    Add per-interface dns caches.
    
    import of changes 22100 and 23138 from opensource.
    
    Change-Id: I3ce86394323d269272aeb2bebeed4374f171a8cf
    Add support for a dns cache per interface
    
    Initial commit for dns cache per interface.
    Added a type that holds a reference to a
    cache and name of associated interface,
    address of interface, name server(s)
    associated with an interface etc.
    
    New functions to set default interface,
    address of name servers etc.
    
    Change-Id: Ie991bc5592fd998409853d8bf77d7fe69035dac5
    Remove expired dns cache entries before removing oldest
    
    A suggestion how to make a smarter delete function when the cache
    is full. First look through the entire cache and remove all entries
    which have expired. If none use the old solution and just remove
    the last entry in the MRU list.
    
    Change-Id: I5f997ab35290a55dc6e1ddf37d725759edf83d36
    Use system property to set dns cache size
    
    Use system property ro.net.dns_cache_size to set
    the size of the cache. If the system property
    is not set the default cache size is defined by
    CONFIG_MAX_ENTRIES.
    
    The number of entries in the hash table will be equal
    to the number of max entries allowed in the cache.
    
    Change-Id: I77d69d7c178937fa483d0b40512483ad29232d28
    Add time-to-live (TTL) support to resolver cache
    
    Use the the TTL of the answer as the time a query
    shall remain in the resolver cache.
    
    Added some debugging support as well, i.e.
    parse answer and print a la dig.
    
    Change-Id: I724d3392245032592f1912f3ca7a81a8987ebbac
    resolv: make internal symbols static/hidden
    
    Change-Id: I988b83613e6252c0cc961555e81c10f856a38b37
    Fix spurious DNS lookups in the C library.
    
    The problem was that the 'defdname' field of res_state structure
    was not properly initialized in __res_vinit(). This field is used
    to store the default domain name, which is normally build from
    calling gethostname() (see line 549 of res_init.c).
    
    Unfortunately, in the typical Android case, gethostname() returns
    an error (the hostname is configured) and a random stack string is
    used later to build the DNS search list (see lines 556+ in res_init.c)
    
    For the sake of illustration, let's say the search list is set to
    a random value like 'xWLK'.
    
    The end result is that when trying to result an unknown domain name
    (e.g. 'www.ptn'), the query fails then the resolver tries to make a
    new query with the DNS search list path(s) appended (e.g. 'www.ptn.xWLK').
    
    The patch simply initializes 'defdname' to an empty string to avoid
    this when the net.dns.search system property is not set.
    
    Also contains whitespace/formatting fixes
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@132276
    Initial Contribution
    Make the DNS resolver accept domain names with an underscore.
    
    More precisely, this accepts domain labels with an underscore in
    the middle (i.e. not at the start or the end of the label). This
    is needed to perform complex CNAME chain resolution in certain
    VPN networks.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add per-interface dns caches.
    
    import of changes 22100 and 23138 from opensource.
    
    Change-Id: I3ce86394323d269272aeb2bebeed4374f171a8cf
    Don't reset caches when dns props change.
    
    This happens too frequently.  We should flush a per-interface cache
    when it's dns server addrs changes.
    
    Change-Id: I8a691c96ce9a775160ef55ddb8f755d649041583
    libc: Fix leak in the DNS thread-specific state.
    
    NOTE: This is a back-port from the internal HC branch.
    
    This patch fixes a leak that occurs when creating a new
    thread-specific DNS resolver state object.
    
    Essentially, each thread that calls gethostbyname() or getaddrinfo()
    at least once will leak a small memory block. Another leak happens
    anytime these functions are called after a change of the network
    settings.
    
    The leak is insignificant and hard to notice on typical programs.
    However, netd tends to create one new thread for each DNS request
    it processes, and quickly grows in size after a > 20 hours.
    
    The same problem is seen in other system processes that tend to
    create one thread per request too.
    
    The leak occured becasue res_ninit() was called twice when creating
    a new thread-specific DNS resolver state in _res_get_thread().
    
    This function could not properly reset an existing thread and was
    leaking a memory block.
    
    The patch does two things:
    
    - First, it fixes res_ninit() to prevent any leakage when resetting
      the state of a given res_state instance.
    
    - Second, it modifies the _res_get_thread() implementation to
      make it more explicit, and avoid calling res_ninit() twice
      in a row on first-time creation.
    
    Fix for Bug 4089945, and Bug 4090857
    
    Change-Id: Icde1d4d1dfb9383efdbf38d0658ba915be77942e
    libc: Fix leak in the DNS thread-specific state.
    
    This patch fixes a leak that occurs when creating a new
    thread-specific DNS resolver state object.
    
    Essentially, each thread that calls gethostbyname() or getaddrinfo()
    at least once will leak a small memory block. Another leak happens
    anytime these functions are called after a change of the network
    settings.
    
    The leak is insignificant and hard to notice on typical programs.
    However, netd tends to create one new thread for each DNS request
    it processes, and quickly grows in size after a > 20 hours.
    
    The same problem is seen in other system processes that tend to
    create one thread per request too.
    
    The leak occured becasue res_ninit() was called twice when creating
    a new thread-specific DNS resolver state in _res_get_thread().
    
    This function could not properly reset an existing thread and was
    leaking a memory block.
    
    The patch does two things:
    
    - First, it fixes res_ninit() to prevent any leakage when resetting
      the state of a given res_state instance.
    
    - Second, it modifies the _res_get_thread() implementation to
      make it more explicit, and avoid calling res_ninit() twice
      in a row on first-time creation.
    
    Fix for Bug 4089945, and Bug 4090857
    
    Change-Id: Ie4831a8dbe82be8f07fce5ddd1d36bf95994f836
    resolv: make internal symbols static/hidden
    
    Change-Id: I988b83613e6252c0cc961555e81c10f856a38b37
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@132276
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Ensure that the port number and TXID are properly randomized.
    
    This fix reads from /dev/urandom to get the required entropy.
    
    Bug: 6535492
    Change-Id: Ibc2fec3f71a67607b608ad9b767b0b6504993c1d
    libc: Fix leak in the DNS thread-specific state.
    
    NOTE: This is a back-port from the internal HC branch.
    
    This patch fixes a leak that occurs when creating a new
    thread-specific DNS resolver state object.
    
    Essentially, each thread that calls gethostbyname() or getaddrinfo()
    at least once will leak a small memory block. Another leak happens
    anytime these functions are called after a change of the network
    settings.
    
    The leak is insignificant and hard to notice on typical programs.
    However, netd tends to create one new thread for each DNS request
    it processes, and quickly grows in size after a > 20 hours.
    
    The same problem is seen in other system processes that tend to
    create one thread per request too.
    
    The leak occured becasue res_ninit() was called twice when creating
    a new thread-specific DNS resolver state in _res_get_thread().
    
    This function could not properly reset an existing thread and was
    leaking a memory block.
    
    The patch does two things:
    
    - First, it fixes res_ninit() to prevent any leakage when resetting
      the state of a given res_state instance.
    
    - Second, it modifies the _res_get_thread() implementation to
      make it more explicit, and avoid calling res_ninit() twice
      in a row on first-time creation.
    
    Fix for Bug 4089945, and Bug 4090857
    
    Change-Id: Icde1d4d1dfb9383efdbf38d0658ba915be77942e
    libc: Fix leak in the DNS thread-specific state.
    
    This patch fixes a leak that occurs when creating a new
    thread-specific DNS resolver state object.
    
    Essentially, each thread that calls gethostbyname() or getaddrinfo()
    at least once will leak a small memory block. Another leak happens
    anytime these functions are called after a change of the network
    settings.
    
    The leak is insignificant and hard to notice on typical programs.
    However, netd tends to create one new thread for each DNS request
    it processes, and quickly grows in size after a > 20 hours.
    
    The same problem is seen in other system processes that tend to
    create one thread per request too.
    
    The leak occured becasue res_ninit() was called twice when creating
    a new thread-specific DNS resolver state in _res_get_thread().
    
    This function could not properly reset an existing thread and was
    leaking a memory block.
    
    The patch does two things:
    
    - First, it fixes res_ninit() to prevent any leakage when resetting
      the state of a given res_state instance.
    
    - Second, it modifies the _res_get_thread() implementation to
      make it more explicit, and avoid calling res_ninit() twice
      in a row on first-time creation.
    
    Fix for Bug 4089945, and Bug 4090857
    
    Change-Id: Ie4831a8dbe82be8f07fce5ddd1d36bf95994f836
    resolv: make internal symbols static/hidden
    
    Change-Id: I988b83613e6252c0cc961555e81c10f856a38b37
    Fix spurious DNS lookups in the C library.
    
    The problem was that the 'defdname' field of res_state structure
    was not properly initialized in __res_vinit(). This field is used
    to store the default domain name, which is normally build from
    calling gethostname() (see line 549 of res_init.c).
    
    Unfortunately, in the typical Android case, gethostname() returns
    an error (the hostname is configured) and a random stack string is
    used later to build the DNS search list (see lines 556+ in res_init.c)
    
    For the sake of illustration, let's say the search list is set to
    a random value like 'xWLK'.
    
    The end result is that when trying to result an unknown domain name
    (e.g. 'www.ptn'), the query fails then the resolver tries to make a
    new query with the DNS search list path(s) appended (e.g. 'www.ptn.xWLK').
    
    The patch simply initializes 'defdname' to an empty string to avoid
    this when the net.dns.search system property is not set.
    
    Also contains whitespace/formatting fixes
    Add the domain search list for VPN connection.
      The current solution is to read the net.dns.search property,
    and expand the list during the resolve initialization. In the
    future, we could implement search list per process.
    
    Update: refine the code accordingly.
    
    Update: remove unnecessary code.
    
    Update: remove the unused variable.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    resolv: make internal symbols static/hidden
    
    Change-Id: I988b83613e6252c0cc961555e81c10f856a38b37
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add some missing includes.
    
    Change-Id: Ieec623c06bc32ec78334f628af25b00c2bccd2e7
    resolv: make internal symbols static/hidden
    
    Change-Id: I988b83613e6252c0cc961555e81c10f856a38b37
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add some missing includes.
    
    Change-Id: Ieec623c06bc32ec78334f628af25b00c2bccd2e7
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Include <endian.h> instead of <sys/endian.h>,
    since the later doesn't define byte order.
    Fix getservent() so that it returns s_port in network byte order.
    Also add a new document detailing known issues in the C library.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Use new binary code format
    
    3-digits + null.  Old was 3-digits + space + null.
    
    Change-Id: If5fdf9ced073f432ace3a76858025ad651c74e3d
    Prevent potential stall on dns proxy operations.
    
    Update wire protocol to return and process error code first.
    This will make sure dns proxy operations do not stall when
    an internal error happens.
    Also fix a compiler warning.
    Also fix a potential buffer overflow.
    And use correct types (uint32_t) rather than int when reading from network.
    
    Change-Id: I9f99c16d6fd5e9137491a4d1b293a7c78e31b9c3
    Revert "Use the new NativeDaemonConnector style."
    
    The other changes relating to this were already reverted.
    
    This reverts commit 1625c7a837d73b6729f97edb32c497d289c0220c
    Revert "Use the new NativeDaemonConnector style."
    
    The other changes relating to this were already reverted.
    
    This reverts commit 1625c7a837d73b6729f97edb32c497d289c0220c
    Use the new NativeDaemonConnector style.
    
    Prepend a 0 to match the new sequence-number style, though this module
    doesn't really need/use it.
    
    bug:5864209
    Change-Id: Iacbcddaced6fe8bb01d186596a916e4fb4805fef
    Request both v4 and v6 dns when on secondary net
    
    We can't easily tell the protocol family of the secondary network,
    so try both and trust that the carrier has configured dns servers
    according to the protocols supported on its network.
    
    bug:5468224
    Change-Id: If4f017573d313a6ad8354574076de6d63d43b444
    Send both A and AAAA queries if all probes fail.
    
    AI_ADDRCONFIG is currently implemented by trying to connect
    to well-known addresses in order to see if IPv4 and/or IPv6
    connectivity is available.
    
    In some cases (e.g., walled gardens with no global
    connectivity) both probes can fail. If this happens,
    query for both IPv4 and IPv6 addresses instead of doing
    nothing and failing the query.
    
    Bug: 5284168
    Change-Id: I4e3a69ea86fb6d839a6bd31236b98da81e5cbf45
    Revert "Use framework hints to determine dns query type."
    
    Change Ife82a8d8 broke IPv6 on wifi. Change I4e3a69ea is
    an alternate approach that does not require any framework
    changes.
    
    Bug: 5284168
    Change-Id: Ib52614be3875a2ae2eaedd1be265f90e506eda41
    Use framework hints to determine dns query type.
    
    Instead of checking for IPv4 or IPv6 connectivity, try using pid-specific
    hints the framework has left for us.
    
    bug:5284168
    Change-Id: Id64d48db3900865a7d58ada8309870c63d6eab12
    Add some missing includes.
    
    Change-Id: Ieec623c06bc32ec78334f628af25b00c2bccd2e7
    DO NOT MERGE Cherry-pick of 0ee092fb2 from master
    
    Convert cname lenght before use
    
    The length of the cname is sent in big-endian
    order. Thus, it has to be converted before used
    in android_getaddrinfo_proxy
    
    Change-Id: I78552d427ef6500d9121fc83423f0744ea0c3087
    Convert cname lenght before use
    
    The length of the cname is sent in big-endian
    order. Thus, it has to be converted before used
    in android_getaddrinfo_proxy
    
    Change-Id: I1a0cc12780c47f7493fcf06f690515829f88c01e
    Convert cname lenght before use
    
    The length of the cname is sent in big-endian
    order. Thus, it has to be converted before used
    in android_getaddrinfo_proxy
    
    Change-Id: I1a0cc12780c47f7493fcf06f690515829f88c01e
    Only look up A records if the system has IPv4.
    
    getaddrinfo only asks DNS for IPv6 addresses if the system
    has IPv6 connectivity, but always asks for IPv4 addresses.
    Don't ask for IPv4 addresses if there is no IPv4
    connectivity.
    
    Change-Id: Iefe9fcb006fabe60b4b11dd4653a7c4a406506f4
    Backport (simple cherry-pick) d33019030c1f0cddca557f9659e3c471bde0e6a9
    to gingerbread.
    
    Implement RFC3484 policy table changes from draft-ietf-6man-rfc3484-revise-01.
    
    The changes in a nutshell:
    
     - Handle v4-mapped as different from v4-compat (this was probably
       an existing bug in our code).
     - Add policy entries for ULA, above most everything else.
     - Put v4-compat, old-style IPv6 site-local and 6bone addresses
       way down in the preference table.
    
    The rest is just shuffling numbers around (no actual changes to
    priority).
    Backport (simple cherry-pick) d1624add2b73ce8ff7826ce27b1d6d6e35bb83a6
    to gingerbread.
    
    Don't treat private IPv4 addresses as being in a non-global scope. The effect of this change is essentially to prefer NATed IPv4 over 6to4.
    Implement RFC3484 policy table changes from draft-ietf-6man-rfc3484-revise-01.
    
    The changes in a nutshell:
    
     - Handle v4-mapped as different from v4-compat (this was probably
       an existing bug in our code).
     - Add policy entries for ULA, above most everything else.
     - Put v4-compat, old-style IPv6 site-local and 6bone addresses
       way down in the preference table.
    
    The rest is just shuffling numbers around (no actual changes to
    priority).
    
    Change-Id: Ieb111e0edd705992bc9d066befaaee95a8c1a5df
    Don't proxy getaddrinfo when net.dns1.[MYPID] is set.
    
    Part of on-going DNS proxy/cache work.
    
    Bug: 1146676
    Change-Id: I5e6028169c81c2223efc34c3b57e348c44f26d26
    DNS proxy: the start.  proxies getaddrinfo calls.
    
    Will also need to do gethostinfo, but that's probably about it.
    
    It was cleaner to do it at this level, rather than speaking in terms
    of DNS packets.
    
    Change-Id: I047cc459979ffb0170a3eb0d432a7e827fb71c26
    Don't treat private IPv4 addresses as being in a non-global scope. The effect of this change is essentially to prefer NATed IPv4 over 6to4.
    
    Change-Id: I53a8613ca9eb61cac0bf18f0b5f98a2d35ab9c50
    Don't proxy getaddrinfo when net.dns1.[MYPID] is set.
    
    Part of on-going DNS proxy/cache work.
    
    Bug: 1146676
    Change-Id: I5e6028169c81c2223efc34c3b57e348c44f26d26
    DNS proxy: the start.  proxies getaddrinfo calls.
    
    Will also need to do gethostinfo, but that's probably about it.
    
    It was cleaner to do it at this level, rather than speaking in terms
    of DNS packets.
    
    Change-Id: I047cc459979ffb0170a3eb0d432a7e827fb71c26
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    Fix comparison of IPv6 prefixes
    
    Typo assigned prefixlen1 twice instead of to the two different variables
    for comparison and difference computation.
    
    Change-Id: I6631b8269ca6aae264c8d7d414127b756838df96
    Implement support for RFC 3484 (address selection/sorting) in bionic.  (The
    Java changes required not to mess up the ordering from bionic will arrive in a
    later commit.) In particular, this will give us more correct behavior when on a
    6to4 network, in that IPv4 will usually be preferred over 6to4.
    
    Most of RFC 3484 is implemented -- what's not is rule 3 (avoid deprecated
    addresses), 4 (prefer home addresses) and 7 (prefer native transport) as they
    require low-level access to the kernel routing table via netlink. (glibc also
    started out this way, and these rules are primarily useful in pretty obscure
    circumstances, so we should be fine for the time being.)
    
    Also, rule 9 (use longest matching prefix) has been modified so it does not try
    to sort IPv4 addresses; given current IPv4 addressing practice these rules are
    pretty much meaningless. Finally, I've added support for Teredo as a separate
    label, with slightly lower preference than 6to4. (Vista puts the preference
    below IPv4 by default. glibc puts the preference together with non-tunneled
    IPv6.)
    
    Note that this patch removes support for the "sortlist" directive in
    resolv.conf; I've never seen it in actual use, it's irrelevant for Android
    (since we don't use resolv.conf anyway), and it's not clear how it would be
    implemented alongside RFC 3484.
    eclair snapshot
    Don't request IPv6 addresses if AI_ADDRCONFIG is specified and the system has no IPv6 connectivity.
    change getaddrinfo() implementation to match GLibc.
    
    the issue is that the BSD implementation doesn't accept a call like:
    
      getaddrinfo(SERVER_NAME, "9999", NULL, &res);
    
    because if will reject a numerical string in the second parameter if no hints are explicitely
    provided. This technically doesn't violate POSIX but might make porting Linux software a bit
    difficult. For more details see:
    
    http://groups.google.com/group/android-ndk/browse_thread/thread/818ab9c53f24c87
    
    also comment debugging printf() calls which shouldn't be there.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Remove the meaningless on Linux if_dl.h header.
    
    This was misleading 'configure' into thinking we actually support AF_LINK,
    but we're Linux, so we don't, and we never implemented the functions we
    declared here either.
    
    Reported to AOSP by Jun-ya Kato.
    
    (cherry-pick of 5056f1fad1187cd67729bb04ba72397d78256f03.)
    
    Change-Id: Ic67f674d2221497c8166994812bb5fc7f0831066
    Remove the meaningless on Linux if_dl.h header.
    
    This was misleading 'configure' into thinking we actually support AF_LINK,
    but we're Linux, so we don't, and we never implemented the functions we
    declared here either.
    
    Reported to AOSP by Jun-ya Kato.
    
    Change-Id: I111f9887f3812469b411b9cf5124d9dd624f19f7
    Use new binary code format
    
    3-digits + null.  Old was 3-digits + space + null.
    
    Change-Id: If5fdf9ced073f432ace3a76858025ad651c74e3d
    Prevent potential stall on dns proxy operations.
    
    Update wire protocol to return and process error code first.
    This will make sure dns proxy operations do not stall when
    an internal error happens.
    Also fix a compiler warning.
    Also fix a potential buffer overflow.
    And use correct types (uint32_t) rather than int when reading from network.
    
    Change-Id: I9f99c16d6fd5e9137491a4d1b293a7c78e31b9c3
    Revert "Use the new NativeDaemonConnector style."
    
    The other changes relating to this were already reverted.
    
    This reverts commit 1625c7a837d73b6729f97edb32c497d289c0220c
    Revert "Use the new NativeDaemonConnector style."
    
    The other changes relating to this were already reverted.
    
    This reverts commit 1625c7a837d73b6729f97edb32c497d289c0220c
    Use the new NativeDaemonConnector style.
    
    Prepend a 0 to match the new sequence-number style, though this module
    doesn't really need/use it.
    
    bug:5864209
    Change-Id: Iacbcddaced6fe8bb01d186596a916e4fb4805fef
    Tracking change to dns proxy protocol
    
    The gethostbyaddr code in system/netd now expects a string address
    from inet_ntop, not raw bytes, in order to properly pass addresses
    containing null and probably spaces and newlines characeters as well.
    
    Bug: 4344448
    Change-Id: I8ec0eab94d5b1d38e9269ba3afb2825e946f8df3
    Tracking change to dns proxy protocol
    
    The gethostbyaddr code in system/netd now expects a string address
    from inet_ntop, not raw bytes, in order to properly pass addresses
    containing null and probably spaces and newlines characeters as well.
    
    Bug: 4344448
    git cherry-pick -e c13fa640eea3285a586fc4bad0abf2fc1b902185
    Tracking change to dns proxy protocol
    
    The gethostbyaddr code in system/netd now expects a string address
    from inet_ntop, not raw bytes, in order to properly pass addresses
    containing null and probably spaces and newlines characeters as well.
    
    Bug: 4344448
    Change-Id: I935abbbe522d96b64a5f975c7937e3aed3f7b335
    Proxy getnameinfo through netd
    
    Proxy the parts of getnameinfo that utilize
    the dns cache through netd.
    
    Change-Id: I1d57c451ea6b179c34828cf57a4182b262674003
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Update libc/NOTICE and record the incantation.
    
    Change-Id: I0673d6263de2c5a21cd549f18c0648d0fa4bb40f
    Sort NOTICE entries.
    
    Also make sure we get the whole of any copyright header, in case
    there's text before the "Copyright" line.
    
    Change-Id: Iabcc5e0931a39c0107b833539fec7c5a3d134592
    Auto-generate a complete NOTICE file.
    
    Remove the hand-collated ones, and switch to a script that pulls the
    copyright headers out of every file and collects the unique ones.
    
    Change-Id: Ied3b98b3f56241df97166c410ff81de4e0157c9d
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    remove obsolete SuperH support
    
    We don't have a toolchain anymore, we don't have working original
    kernel headers, and nobody is maintaining this so there is really
    no point in keeping this here. Details of the patch:
    
    - removed code paths from Android.mk files related to the SuperH
      architecture ("sh")
    
    - removed libc/arch-sh, linker/arch-sh, libc/kernel/arch-sh
    
    - simplified libc/SYSCALLS.TXT
    
    - simplified the scripts in libc/tools/ and libc/kernel/tools
    
    Change-Id: I26b0e1422bdc347489e4573e2fbec0e402f75560
    
    Signed-off-by: David 'Digit' Turner <digit@android.com>
    checksyscalls fix to handle "__ARM_NR_... (__ARM_NR_BASE+0x...)"
    
    Change-Id: I6a13a6af17caec2e833d4982d645a88ccde4cda4
    libc: Update auto-gen scripts
    
    Make the scripts use external/kernel-headers/original by default.
    
    clean_header.py:  Document -k<path>, add -d<path>
    find_headers.py:  Make kernel config files optional
    update_all.py:    Allow setting the path to kernel headers on the command-line
    update_all.py:    Better formatting of output on ttys
    update_all.py:    Automatically perform "git add/rm" on affected files.
    SYSCALLS.TXT:     Fix typo in __socketcall definition.
    checksyscalls.py: Add support for superH architecture in the checks.
    gensyscalls.py:   Automatically perform "git add/rm" on affected files.
    cpp.py:           Fixed a bug that prevented certain type definitions to
                      be kept in the generated clean header (e.g.
                      struct ethtool_drvinfo in <linux/ethtool.h>)
    
    All scripts will use the content of external/kernel-headers/original by default now.
    
    The generated code removes all empty lines and trailing whitespace. This is useful
    to ensure a unified output even if we change the parser again in the future.
    
    The top-level disclaimer has been edited with update instructions to regenerate
    the headers when needed.
    
    Also, a warning is now inserted every 8th line in the final output:
    
    /* WARNING: DO NOT EDIT, AUTO-GENERATED CODE - SEE TOP FOR INSTRUCTIONS */
    
    Changes under kernel/arch-arm and kernel/arch-x86 should correspond to whitespace
    differences and additionnal struct definitions that were missed by the previous
    parser implementation.
    
    Change-Id: Icd1c056bacd766759f3e9b7bb5d63a246f3d656a
    
    WARNING: If you run these script, do not submit the result to gerrit for now.
             It seems there are discrepancies between the content of original headers
             and those currently commited under bionic/libc/kernel/.
    
             (This problem is the main motivation to insert the warning repeatedly).
    
             Current list of issues:
    
               - Missing SuperH headers (i.e. external/kernel-headers/original/asm-sh)
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    remove obsolete SuperH support
    
    We don't have a toolchain anymore, we don't have working original
    kernel headers, and nobody is maintaining this so there is really
    no point in keeping this here. Details of the patch:
    
    - removed code paths from Android.mk files related to the SuperH
      architecture ("sh")
    
    - removed libc/arch-sh, linker/arch-sh, libc/kernel/arch-sh
    
    - simplified libc/SYSCALLS.TXT
    
    - simplified the scripts in libc/tools/ and libc/kernel/tools
    
    Change-Id: I26b0e1422bdc347489e4573e2fbec0e402f75560
    
    Signed-off-by: David 'Digit' Turner <digit@android.com>
    libc: Update auto-gen scripts
    
    Make the scripts use external/kernel-headers/original by default.
    
    clean_header.py:  Document -k<path>, add -d<path>
    find_headers.py:  Make kernel config files optional
    update_all.py:    Allow setting the path to kernel headers on the command-line
    update_all.py:    Better formatting of output on ttys
    update_all.py:    Automatically perform "git add/rm" on affected files.
    SYSCALLS.TXT:     Fix typo in __socketcall definition.
    checksyscalls.py: Add support for superH architecture in the checks.
    gensyscalls.py:   Automatically perform "git add/rm" on affected files.
    cpp.py:           Fixed a bug that prevented certain type definitions to
                      be kept in the generated clean header (e.g.
                      struct ethtool_drvinfo in <linux/ethtool.h>)
    
    All scripts will use the content of external/kernel-headers/original by default now.
    
    The generated code removes all empty lines and trailing whitespace. This is useful
    to ensure a unified output even if we change the parser again in the future.
    
    The top-level disclaimer has been edited with update instructions to regenerate
    the headers when needed.
    
    Also, a warning is now inserted every 8th line in the final output:
    
    /* WARNING: DO NOT EDIT, AUTO-GENERATED CODE - SEE TOP FOR INSTRUCTIONS */
    
    Changes under kernel/arch-arm and kernel/arch-x86 should correspond to whitespace
    differences and additionnal struct definitions that were missed by the previous
    parser implementation.
    
    Change-Id: Icd1c056bacd766759f3e9b7bb5d63a246f3d656a
    
    WARNING: If you run these script, do not submit the result to gerrit for now.
             It seems there are discrepancies between the content of original headers
             and those currently commited under bionic/libc/kernel/.
    
             (This problem is the main motivation to insert the warning repeatedly).
    
             Current list of issues:
    
               - Missing SuperH headers (i.e. external/kernel-headers/original/asm-sh)
    modified SYSCALLS.TXT to support SuperH architecture
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Remove the last references to SuperH.
    
    Change-Id: Icb44c1f94cb178d90b4c2b1e8f6d175586aec4e1
    Actually set the header guard in "linux-syscalls.h".
    
    Spotted while merging a MIPS change.
    
    Change-Id: I36fb5a07d0bba0c117e9fe9733957bd37ca4b4c0
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    remove obsolete SuperH support
    
    We don't have a toolchain anymore, we don't have working original
    kernel headers, and nobody is maintaining this so there is really
    no point in keeping this here. Details of the patch:
    
    - removed code paths from Android.mk files related to the SuperH
      architecture ("sh")
    
    - removed libc/arch-sh, linker/arch-sh, libc/kernel/arch-sh
    
    - simplified libc/SYSCALLS.TXT
    
    - simplified the scripts in libc/tools/ and libc/kernel/tools
    
    Change-Id: I26b0e1422bdc347489e4573e2fbec0e402f75560
    
    Signed-off-by: David 'Digit' Turner <digit@android.com>
    Don't generate sys/linux-unistd.h
    
    linux-unistd.h was here for reference purposes, but shouldn't
    have been accessible to client code. Delete it.
    
    Change-Id: I60c264ff6ca489a48117914bdf6daa486737af8c
    libc: ARM: add size info to gensyscalls
    
    Add size information to gensyscalls output for ARM syscalls with new
    BEGIN(x) and END(x) macros in arch-arm/include/machine/asm.h
    
    Change-Id: I791406f8b17abcb83b70a6d15a65a527de15d3f5
    libc: Update auto-gen scripts
    
    Make the scripts use external/kernel-headers/original by default.
    
    clean_header.py:  Document -k<path>, add -d<path>
    find_headers.py:  Make kernel config files optional
    update_all.py:    Allow setting the path to kernel headers on the command-line
    update_all.py:    Better formatting of output on ttys
    update_all.py:    Automatically perform "git add/rm" on affected files.
    SYSCALLS.TXT:     Fix typo in __socketcall definition.
    checksyscalls.py: Add support for superH architecture in the checks.
    gensyscalls.py:   Automatically perform "git add/rm" on affected files.
    cpp.py:           Fixed a bug that prevented certain type definitions to
                      be kept in the generated clean header (e.g.
                      struct ethtool_drvinfo in <linux/ethtool.h>)
    
    All scripts will use the content of external/kernel-headers/original by default now.
    
    The generated code removes all empty lines and trailing whitespace. This is useful
    to ensure a unified output even if we change the parser again in the future.
    
    The top-level disclaimer has been edited with update instructions to regenerate
    the headers when needed.
    
    Also, a warning is now inserted every 8th line in the final output:
    
    /* WARNING: DO NOT EDIT, AUTO-GENERATED CODE - SEE TOP FOR INSTRUCTIONS */
    
    Changes under kernel/arch-arm and kernel/arch-x86 should correspond to whitespace
    differences and additionnal struct definitions that were missed by the previous
    parser implementation.
    
    Change-Id: Icd1c056bacd766759f3e9b7bb5d63a246f3d656a
    
    WARNING: If you run these script, do not submit the result to gerrit for now.
             It seems there are discrepancies between the content of original headers
             and those currently commited under bionic/libc/kernel/.
    
             (This problem is the main motivation to insert the warning repeatedly).
    
             Current list of issues:
    
               - Missing SuperH headers (i.e. external/kernel-headers/original/asm-sh)
    libc: Add ftruncate64 and improve 64-bit parameter syscall handling.
    
    This patch improves the handling of 64-bit parameters in syscalls on ARM.
    The ARM EABI mandates that 64-bit quantities be passed in even/odd register
    pairs, which requires special treatment.
    
    This allows us to simplify our implementations of pread() and pwrite()
    and remove the C stubs for pread64() and pwrite64().
    
    Also add ftruncate64() to <unistd.h>
    
    Change-Id: I407e2fd223ba0093dd2d0b04c6152fadfc9ce3ef
    
    Bug 3107933
    modified SYSCALLS.TXT to support SuperH architecture
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Move the zoneinfo generation tool into bionic.
    
    This also incorporates a bunch of changes to the previous script; this one
    requires no setup, can be run from anywhere, and leaves no droppings.
    
    Change-Id: I38f299f03e33950d2a64e9336f4ba7cb3c5cf6f0
    update zoneinfo generate tool to specify target tzdata version
    
    - usage: generate 2017b
    Remove the 'Factory' time zone by not processing the 'factory' file.
    
    The factory file (and Factory time zone) was meant as a way to say
    "not configured" that would give a clear error when running date(1).
    For us it would just look like UTC, so it is of no value.
    
    Bug: 2997381
    Change-Id: I1a4b85dce97d1d9370b22ba79e8fe5dafff56541
    Upgrade to tzdata2012d.
    
    This upgrade involved rewriting the script; the data has moved to ftp.iana.org,
    where it's slightly less convenient to access, so it's time to use something
    that can talk FTP...
    
    As for tzdata2012d, it's just updating Morocco for this weekend's changes, now
    they've been decided at the last minute (as usual).
    
    Change-Id: I772df57a6e09b3bf3d9541bfc08930d6f18633b4
    Update to tzdata2012c.
    
    From the release notes:
    
           africa
                   Summer time changes for Morocco (to start late April 2012)
    
           asia
                   Changes for 2012 for Gaza & the West Bank (Hebron) and Syria
    
           northamerica
                   Haiti following US/Canada rules for 2012 (and we're assuming,
                   for now anyway, for the future).
    
    Also include a change made internally to the 'generate' script as part of
    the tzdata2011m update that apparently never made it to AOSP; the original
    checkin comment for which was:
    
        Update to tzdata2011m.
    
        Fixes for Europe/Tiraspol (Moldova) and all four Ukrainian zones.
    
        Also show the MD5 of the downloaded data, for comparison against the MD5
        given in the announcement mails. (There's a plan to move to proper signing,
        but that's not implemented on their end yet.)
    
    (I'm repeating the tzdata change for the convenience of anyone grepping the
    log, since the 2012 tzdata releases also contain the 2011m changes; 2011m
    is the only missing release I noticed.)
    
    Change-Id: I9a2e530b3a8ea88e3375334a12376e3d8526f267
    Update to tzdata2011m.
    
    Fixes for Europe/Tiraspol (Moldova) and all four Ukrainian zones.
    
    Also show the MD5 of the downloaded data, for comparison against the MD5
    given in the announcement mails. (There's a plan to move to proper signing,
    but that's not implemented on their end yet.)
    
    Change-Id: I845e6f125c0f54298abadc643adfeca2eff4827a
    Update to tzdata2011l.
    
    This affects Asia/Hebron and Pacific/Fiji (and historical data for
    America/Sitka).
    
    Change-Id: I111a34038e44416f1900f774bdb78750e815eb5f
    Move the zoneinfo generation tool into bionic.
    
    This also incorporates a bunch of changes to the previous script; this one
    requires no setup, can be run from anywhere, and leaves no droppings.
    
    Change-Id: I38f299f03e33950d2a64e9336f4ba7cb3c5cf6f0
    Move the zoneinfo generation tool into bionic.
    
    This also incorporates a bunch of changes to the previous script; this one
    requires no setup, can be run from anywhere, and leaves no droppings.
    
    Change-Id: I38f299f03e33950d2a64e9336f4ba7cb3c5cf6f0
    libc: remove private declarations from <time.h> and <resolv.h>
    
    This patch is used to remove private C library declarations from the
    public headers (that are exported to the NDK). It should *only* be
    submitted after all other patches modifying the users of said
    private functions have been submitted to the tree, to avoid
    breakages.
    
    Change-Id: I0a5e3014f8e3ac9ed8df86a5cdae506337c23252
    strftime: Use snprintf() instead of sprintf()
    
    Change-Id: I112ac012894eddc96e5f3e77cb87bb300596e3ce
    Signed-off-by: Jim Huang <jserv@0xlab.org>
    eclair snapshot
    Fix strftime to use localized month names.
    
    It was using the default locale (capital L) instead of the
    current locale (lowercase l).
    
    Bug 2030864
    Add standalone_months field to libc strftime().
    
    Replicate my change 722a5c0462f38827f4097065bfc3826b9e0e9fb4 into
    bionic in an attempt to fix the build.
    auto import //branches/master/...@140412
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    eclair snapshot
    auto import //branches/master/...@140412
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    DO NOT MERGE Revert "Add the libcutils localtime_tz and mktime_t extensions to bionic."
    
    This reverts commit 3a936a4980046a7eeb8d53a3296058d8f3a1f770.
    
    We don't want this in jb-mr1.
    Add the libcutils localtime_tz and mktime_t extensions to bionic.
    
    Bug: 7012465
    Change-Id: Ib66f061e29199ba134545111dc79f9b50c8f4a21
    <time.h>: Add timegm(), timelocal() and others.
    
    Add timegm(), timelocal(), time2posix() and posix2time() to the
    C library.
    
    Change-Id: I34d5771ed83dd994870a5ca58a511d01898b1ffb
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    eclair snapshot
    Fix an infinite loop in time2sub.
    
    The problem is that time_t is signed, and the original code relied on the
    fact that (X + c < X) in case of overflow for c >= 0. Unfortunately, this
    condition is only guaranteed by the standard for unsigned arithmetic, and
    the gcc 4.4.0 optimizer did completely remove the corresponding test from
    the code. This resulted in a missing boundary check, and an infinite loop.
    
    The problem is solved by testing explicitely for TIME_T_MIN and TIME_T_MAX
    in the loop that uses this.
    
    Also fix increment_overflow and long_increment_overflow which were buggy
    for exactly the same reasons.
    
    Note: a similar fix is needed for system/core/libcutils
    auto import //branches/master/...@140412
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    eclair snapshot
    auto import //branches/master/...@140412
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Bug 3330205 Thread safe strptime implementation
    
    Change-Id: I03e72b0253a7a2e015455ab81dbf155ed1e574d2
    eclair snapshot
    auto import //branches/master/...@140412
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    eclair snapshot
    auto import //branches/master/...@140412
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    eclair snapshot
    auto import //branches/master/...@140412
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    improve readability of string: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    improve readability of string: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@127101
    Initial Contribution
    improve readability of stdlib: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    
    Change-Id: I7dd90a0816b5376ffc1de4499d56935e0bd574a1
    Revert "Add qsort_r() implementation to the C library."
    
    This reverts commit 754c178ae551aedcbbfd3bfd1c1c3b710d9ad989.
    
    Turns out we don't need it afterall (needed a stable sort anyways).
    So, we'll make that change in the dev branch instead.
    Add qsort_r() implementation to the C library.
    
    NOTE: This replaces qsort.c with the FreeBSD version. While
          the patch changes the source, it should not alter the
          implementation that should use the exact same algorithm.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of stdlib: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    
    Change-Id: I7dd90a0816b5376ffc1de4499d56935e0bd574a1
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of stdlib: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    
    Change-Id: I7dd90a0816b5376ffc1de4499d56935e0bd574a1
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of stdlib: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    
    Change-Id: I7dd90a0816b5376ffc1de4499d56935e0bd574a1
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    stdlib: optimize bsearch()
    
    ... by checking most probable condition first (elements do differ)
    
    Change-Id: I424eab9c32a6d9eb82b686ca04025ec8c9097035
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Bug 3330205 Thread safety for bignum powers of 5
    
    Change-Id: I739a06f9037a9fb643276f61601f0f3e192581b8
    stdlib: strtod: Hide internal symbol __dtoa
    
    Change-Id: Iaaec7ea4d04c859fe98ad3331fd71e7d000c826b
    improve readability of stdlib: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    
    Change-Id: I7dd90a0816b5376ffc1de4499d56935e0bd574a1
    Fix strtod security bug.
    
    To avoid introducing NULL checks everytime a Bigint computation
    is performed, introduce a special value (BIGINT_INVALID) and only
    check for it when absolutely needed (which means when the code
    needs to access the Bigint's internal structure fields).
    
    Change-Id: Ie3954523b0985b6a8cb62340802d8dcf63cbf16f
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of stdlib: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    
    Change-Id: I7dd90a0816b5376ffc1de4499d56935e0bd574a1
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Just link fixes for b 2763938.
    
    Added wcsxfrm.c and wmemcmp.c to the src files in Android.mk and removed wcsxfrm from wchar.c
    
    Change-Id: Iab9b45cf78c27880d2941c360340a7af6b8964fe
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    improve readability of stdlib: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    
    Change-Id: I7dd90a0816b5376ffc1de4499d56935e0bd574a1
    Add stdlib functions mbstowcs() and wcstombs(). DO NOT MERGE.
    
    As with the other wchar functions in Bionic, these are really
    minimally functional stubs.
    Add stdlib functions mbstowcs() and wcstombs().
    
    As with the other wchar functions in Bionic, these are really
    minimally functional stubs.
    
    Change-Id: I805bc5642e7bc22d9d730cfc18f9fb4a5f164416
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    ARM: make CRT_LEGACY_WORKAROUND work as intended
    
    To properly support legacy ARM shared libraries, libc.so needs
    to export the symbols __dso_handle and atexit, even though
    these are now supplied by the crt startup code.
    
    This patch reshuffles the existing CRT_LEGACY_WORKAROUND
    conditionally compiled code slightly so it works as the
    original author likely intended.
    
    Change-Id: Id6c0e94dc65b7928324a5f0bad7eba6eb2f464b9
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@gmail.com>
    fix __cxa_finalize() implementation to be thread safe.
    
    __cxa_finalize() modifies the access permissions of __atexit
    global variable without acquiring  _ATEXIT_LOCK(). Fix it prevent
    any possible races.
    
    Change-Id: I11939d0ebcbf6f360c14163222d40a449d96948e
    Enable functional DSO object destruction
    
    Unfortunately, legacy .so files for ARM don't have a correct crtbegin file.
    Consequently, we have to grandfather the old __dso_handle behaviour.
    Add some ifdefs for ARM to allow it to use the old code until we can work
    out a transition.
    
    Change-Id: I6a28f368267d792c94e1d985d8344023bc632f6f
    Author: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Enable functional DSO object destruction
    
    Unfortunately, legacy .so files for ARM don't have a correct crtbegin file.
    Consequently, we have to grandfather the old __dso_handle behaviour.
    Add some ifdefs for ARM to allow it to use the old code until we can work
    out a transition.
    
    Change-Id: I6a28f368267d792c94e1d985d8344023bc632f6f
    Author: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Fix __eabi_atexit() implementation, as well as a bug in the BSD-originated __cxa_finalize() implementation
    This patch uses "#if ANDROID" instead of "#if 1" in the __cxa_finalize() fix
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@127101
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of stdlib: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    
    Change-Id: I7dd90a0816b5376ffc1de4499d56935e0bd574a1
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@127101
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Report errors to the log, not just stderr.
    
    In particular this affects assert(3) and __cxa_pure_virtual, both of
    which have managed to confuse people this week by apparently aborting
    without reason. (Because stderr goes nowhere, normally.)
    
    Bug: 6852995
    Bug: 6840813
    Change-Id: I7f5d17d5ddda439e217b7932096702dc013b9142
    improve readability of stdlib: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    
    Change-Id: I7dd90a0816b5376ffc1de4499d56935e0bd574a1
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of stdlib: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    
    Change-Id: I7dd90a0816b5376ffc1de4499d56935e0bd574a1
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    FORTIFY_SOURCE: add open() checks
    
    Add a FORTIFY_SOURCE check which requires that you pass a
    "mode" argument when calling open(..., O_CREAT). If a mode isn't
    passed, then the file is created with "undefined" permissions.
    
    Change-Id: I4427be4f9ce170c69da01af5b00fb05b03613a28
    enable support for large files (> 2G)
    
    bionic has an i386 ifdef guard for the O_LARGEFILE flag. The reason for this
    is not traceable in the git history, but it's most likely due to some old
    toolchain or emulator problem.
    
    Bug Id: 10035
    
    Change-Id: I742ee6e50220276c2cb268d66f89b5655ef689fc
    Signed-off-by: Dragos Tatulea <dragos.tatulea@intel.com>
    enable support for large files (> 2G)
    
    bionic has an i386 ifdef guard for the O_LARGEFILE flag. The reason for this
    is not traceable in the git history, but it's most likely due to some old
    toolchain or emulator problem.
    
    Bug Id: 10035
    
    Change-Id: I742ee6e50220276c2cb268d66f89b5655ef689fc
    Signed-off-by: Dragos Tatulea <dragos.tatulea@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    raise: Send signal to current thread
    
    Change-Id: Ie4318b8ddd01cc2f58f5e07c1d71376953943153
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    fnmatch.c: Update to version in OpenBSD HEAD
    
    Upgrade fnmatch.c from OpenBSD version 1.13 to 1.16.
    This is needed primarily to address CVE-2011-0419.
    
    This is a straight copy from upstream's version at
    http://www.openbsd.org/cgi-bin/cvsweb/src/lib/libc/gen/fnmatch.c and
    incorporates the following changes:
    
    Revision 1.16:
    New fnmatch(3) implementation which is not recursive.
    Written and provided under BSD licence by William A. Rowe Jr.
    Originally released in Apache APR-1.4.5.
    Merged class matching code from r1.14 and PATH_MAX check from r1.15.
    ok miod millert
    
    Revision 1.15:
    Put a limit on recursion during matching, and reject input of size greater
    or equal PATH_MAX. Based on similar fix made in NetBSD.
    ok miod@ millert@
    
    Revision 1.14:
    POSIX character class support for fnmatch(3) and glob(3).  OK deraadt@
    
    Version 1.14 introduced charclasses.h, which we copy unmodified
    from upstream version 1.1.
    http://www.openbsd.org/cgi-bin/cvsweb/src/lib/libc/gen/charclass.h
    
    Bug: 3435120
    Change-Id: I45133468f0c3d439fd10eb087a1c647799f9d25b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Use sigemptyset to initialise sigset_t values.
    sigset_t may not be implemented as an integral type.
    
    Change-Id: I3f5ec86d6383685979d8d23ef508b6c609569b38
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    execvp: bcopy() is deprecated. Use memcpy() instead
    
    The function bcopy() is marked as LEGACY in POSIX.1-2001 and removed in
    POSIX.1-2008. memcpy (POSIX.1-2001) is its recommended replacement.
    
    Change-Id: I2cc0cc4673d1368255afd11132ddbfd3f87b530b
    Add some missing includes.
    
    Change-Id: Ieec623c06bc32ec78334f628af25b00c2bccd2e7
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add the BSD sys_signame array.
    
    Signed-off-by: Thorsten Glaser <tg@mirbsd.org>
    added and modified bionic code to support SuperH architecture
    
        modified:   libc/Android.mk
        new files:   libc/arch-sh/bionic/*
        new files:   libc/arch-sh/include/*
    Add new C++ headers <cerrno> and <cfloat>
    
    Also add std::malloc/realloc/calloc/free to <cstdlib>
    Rename <cwchar_is_not_supported> to <cwchar>
    AI 145716: am: CL 145714 Added cstring wrapper around string.h.
      In new, include cstddef which declares std::size_t.
      Original author: niko
    
    Automated import of CL 145716
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: popen: work around data corruption
    
    vfork() would not save the registers that the parent would expect
    to have restored after execl() completed.
    Specially that execl() would call execve() underneath, further messing
    up the stack of the parent.
    To avoid that, we fork() for now. Later we will revisit and cleanup
    vfork()+execve() to actually have vfork() store all the register
    that the parent expects to see, and not those left by execve().
    
    In the original code, looking at the registers just before the call to
    popen(), and after the call showed that r7 would get clobbered.
    This would leave the caller with an invalid pointer, leading to all
    kinds of data corruptions.
    execve() is simpler that execl() in this case.
    
    
    Bug: 5336252
    Change-Id: I3bf718c0bb4c0439f6f2753f153cdea14175be9c
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: make lseek64 proto be glibc compatible (loff_t -> off64_t)
    
    Change-Id: Ib79b99be9ca8d4b1f95ceeba416b6abc04187c3c
    Signed-off-by: Dima Zavin <dima@android.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    bionic: pass MADV_MERGEABLE on private & anonymous mmaps
    
    Change-Id: I8bc167bb33dec6417fe772172697ea6ff97da2f6
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    bonic: libc: cpuacct support for setuid functions
    
    Any of the setuid functions now updates /acct/uid/ with its own tid
    before changing users. This is so we can properly account for cpu time
    per uid.
    
    Change-Id: I34186cf4d5228cac8439e582a9e26c01ef3011e4
    Signed-off-by: Mike Chan <mike@android.com>
    Add implementation of fdprintf, clearenv, and stubs for ttyname_r, *usershell
    
    Change-Id:      I5fe7e8b6ee5edbb49e707c3b6737a58563781fa3
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    FORTIFY_SOURCE: Add openat, fix bug
    
    Add fortify_source support for openat(). This change requires that
    an argument be supplied when using O_CREAT.
    
    Fix unnecessary call to __open_2. If, at compile time, we know that
    "flags" is constant and DOESN'T contain O_CREAT, the call to __open_2
    is useless.
    
    Change-Id: Ifcd29c4fb25e25656961d7552d672e161f0cfdbd
    enable support for large files (> 2G)
    
    bionic has an i386 ifdef guard for the O_LARGEFILE flag. The reason for this
    is not traceable in the git history, but it's most likely due to some old
    toolchain or emulator problem.
    
    Bug Id: 10035
    
    Change-Id: I742ee6e50220276c2cb268d66f89b5655ef689fc
    Signed-off-by: Dragos Tatulea <dragos.tatulea@intel.com>
    enable support for large files (> 2G)
    
    bionic has an i386 ifdef guard for the O_LARGEFILE flag. The reason for this
    is not traceable in the git history, but it's most likely due to some old
    toolchain or emulator problem.
    
    Bug Id: 10035
    
    Change-Id: I742ee6e50220276c2cb268d66f89b5655ef689fc
    Signed-off-by: Dragos Tatulea <dragos.tatulea@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    bonic: libc: cpuacct support for setuid functions
    
    Any of the setuid functions now updates /acct/uid/ with its own tid
    before changing users. This is so we can properly account for cpu time
    per uid.
    
    Change-Id: I34186cf4d5228cac8439e582a9e26c01ef3011e4
    Signed-off-by: Mike Chan <mike@android.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    fnmatch.c: Update to version in OpenBSD HEAD
    
    Upgrade fnmatch.c from OpenBSD version 1.13 to 1.16.
    This is needed primarily to address CVE-2011-0419.
    
    This is a straight copy from upstream's version at
    http://www.openbsd.org/cgi-bin/cvsweb/src/lib/libc/gen/fnmatch.c and
    incorporates the following changes:
    
    Revision 1.16:
    New fnmatch(3) implementation which is not recursive.
    Written and provided under BSD licence by William A. Rowe Jr.
    Originally released in Apache APR-1.4.5.
    Merged class matching code from r1.14 and PATH_MAX check from r1.15.
    ok miod millert
    
    Revision 1.15:
    Put a limit on recursion during matching, and reject input of size greater
    or equal PATH_MAX. Based on similar fix made in NetBSD.
    ok miod@ millert@
    
    Revision 1.14:
    POSIX character class support for fnmatch(3) and glob(3).  OK deraadt@
    
    Version 1.14 introduced charclasses.h, which we copy unmodified
    from upstream version 1.1.
    http://www.openbsd.org/cgi-bin/cvsweb/src/lib/libc/gen/charclass.h
    
    Bug: 3435120
    Change-Id: I45133468f0c3d439fd10eb087a1c647799f9d25b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    time: Improve C99 compliance
    
    Quote from Linux Programmer's Manual:
      "If t is non-NULL, the return value is also stored in the memory
       pointed to by t."
    
    Change-Id: I8cb66b67e5f34c536ce2f0db76a6dc337c42ea3f
    Signed-off-by: Jim Huang <jserv@0xlab.org>
    Bug 3330205, 3362385 clock(3) SMP safety and epoch
    
    Change-Id: Ida1e4400489c8c19818c6af5640ab89942c8f712
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support to sigsuspend and sigwait routines
    
    Change-Id: I870e798ed7eac5a8c74e5784a670f3a4f24331a9
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: update alarm() implementation to return 0 on error.
    
    This matches the GLibc behaviour, and allows alarm(0xFFFFFFFF) to return 0.
    
    Change-Id: I419aa71b27d6bb2015d15ba6b6112bf62eadcbb8
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add the BSD sys_signame array.
    
    Signed-off-by: Thorsten Glaser <tg@mirbsd.org>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support to sigsuspend and sigwait routines
    
    Change-Id: I870e798ed7eac5a8c74e5784a670f3a4f24331a9
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Auto-generate a complete NOTICE file.
    
    Remove the hand-collated ones, and switch to a script that pulls the
    copyright headers out of every file and collects the unique ones.
    
    Change-Id: Ied3b98b3f56241df97166c410ff81de4e0157c9d
    libc: add <sys/eventfd.h> and corresponding implementations.
    
    Change-Id: Ide040884c456190226e580513099fdb8377e015b
    sigsetmask.c was not processing the "mask" argument.
    
    Orig-Change-Id: I79b898ea5b882e8c0564e25466e827a9bedda6e8
    Author: yhe19 <yunan.he@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Use sigemptyset to initialise sigset_t values.
    sigset_t may not be implemented as an integral type.
    
    Change-Id: I3f5ec86d6383685979d8d23ef508b6c609569b38
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    sigsetmask.c was not processing the "mask" argument.
    
    Change-Id: I79b898ea5b882e8c0564e25466e827a9bedda6e8
    Author: yhe19 <yunan.he@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Revert "sigsetmask.c was not processing the "mask" argument."
    
    This reverts commit 9a9c1619b8124f07fc772c0b700e4d411cd78525.
    sigsetmask.c was not processing the "mask" argument.
    
    Change-Id: I79b898ea5b882e8c0564e25466e827a9bedda6e8
    Author: yhe19 <yunan.he@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: Add ftruncate64 and improve 64-bit parameter syscall handling.
    
    This patch improves the handling of 64-bit parameters in syscalls on ARM.
    The ARM EABI mandates that 64-bit quantities be passed in even/odd register
    pairs, which requires special treatment.
    
    This allows us to simplify our implementations of pread() and pwrite()
    and remove the C stubs for pread64() and pwrite64().
    
    Also add ftruncate64() to <unistd.h>
    
    Change-Id: I407e2fd223ba0093dd2d0b04c6152fadfc9ce3ef
    
    Bug 3107933
    Add support for pread64/pwrite64
    
    64-bit pread() and pwrite() is needed for ZipFileRO to be able to read
    ludicrously large ZIP files just in case someone is crazy enough to do
    it.
    
    Also fix a license header that was apparently mangled.
    
    Change-Id: I6819ef8b36e46b63b40749c95717b1ecf9307033
    Fix pread()/pwrite() stubs
    
    On ARM EABI, 64-bit function parameters must be aligned
    to an even/odd register pair.  The weird way these stubs
    were written (using separate lo/hi parameters) prevented
    this alignment from being enforced by the compiler.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Fix sysconf(_SC_NPROCESSORS_CONF) on ARM.
    
    Bug: http://code.google.com/p/enh/issues/detail?id=33
    Change-Id: I679b4cd888d362031042284e8edf01c5273a92aa
    libc: Fix sem_post() implementation to wake up all waiting threads.
    
    This also allows us to optimize the case where we increment an
    uncontended semaphore (no need to call futex_wake() then).
    
    Change-Id: Iad48efe8551dc66dc89d3e3f18c001e5a6c1939f
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    Fix for incorrect reply from sysconf(_SC_NPROCESSORS_ONLN)
    
    When calling sysconf with _SC_NPROCESSORS_ONLN, the value one (1) was
    returned on systems with two or more cores, since '/proc/stat' was
    incorrectly parsed.
    
    The function line_parser_getc (LineParser* p) read 128 characters of
    input for each invocation.
    
    The proper and probably aimed for behavior is to read 128 characters
    at the first call, then for each subsequent call only return the next
    buffered character until a new read is needed and only then read
    another 128 characters.
    
    Due to a flipped comparison between the two variables in_len and
    in_pos that track the number of bytes of data read into the input
    buffer and how much of it has been parsed, a new group of 128
    characters were read at almost every call to line_parser_getc,
    overwriting the still unhandled bytes from the previous call to
    read. This caused the lines to be read to be sampled more than parsed.
    
    Change-Id: I93eec3c8c9b9f19ef798748579d0977111b5c0bb
    
    Signed-off-by: Christian Bejram <christian.bejram@stericsson.com>
    sysconf(): Fix line parser for /proc files.
    
    Change-Id: I2678010ee95933de19c8a8e3b2fe65ceb9b86400
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Report errors to the log, not just stderr.
    
    In particular this affects assert(3) and __cxa_pure_virtual, both of
    which have managed to confuse people this week by apparently aborting
    without reason. (Because stderr goes nowhere, normally.)
    
    Bug: 6852995
    Bug: 6840813
    Change-Id: I7f5d17d5ddda439e217b7932096702dc013b9142
    [MIPS] Use an aligned address to provoke SIGSEGV in abort()
    
    Change-Id: I269c9ccc07058773fb0f9d70673673157ab38f6a
    Implement the "abort" stub in assembly for ARM.
    
    So that we can always get the full stack trace regardless of gcc's handling
    of the "noreturn" attribute associated with abort().
    
    (Cherry pick of Id264a5167e7cabbf11515fbc48f5469c527e34d4.)
    
    Bug: 6455193
    
    Conflicts:
    
            libc/Android.mk
    
    Change-Id: I568fc5303fd1d747075ca933355f914122f94dac
    Implement the "abort" stub in assembly for ARM.
    
    So that we can always get the full stack trace regardless of gcc's handling
    of the "noreturn" attribute associated with abort().
    
    [cherry-picked from master]
    
    BUG:6455193
    Change-Id: I0102355f5bf20e636d3feab9d1424495f38e39e2
    Implement the "abort" stub in assembly for ARM.
    
    So that we can always get the full stack trace regardless of gcc's handling
    of the "noreturn" attribute associated with abort().
    
    BUG:6455193
    Change-Id: Id264a5167e7cabbf11515fbc48f5469c527e34d4
    Hide the symbol of helper function __libc_android_abort
    
    Ideally __libc_android_abort would be static, but it could not be
    because gcc would not allow calling a static function from an asm
    statement.  Instead, using GCC visibility is work around.
    
    Change-Id: Ifff6b9957ca3f0fc03c75c3e42582a48d43cefa2
    eclair snapshot
    Wrap ARM abort() to improve stack trace.
    
    The code generated for Thumb and Thumb2 targets has different handling
    for abort().  Because abort() is "noreturn", it doesn't need to preserve
    the callee-save registers.  The Thumb2 version trashes LR and makes it
    impossible to figure out who called abort().
    
    This inserts a trivial stub function; net effect is stack traces are
    reasonable after an abort().
    
    For bug 2191452.
    
    Eclair branch Dr. No approved by: hiroshi
    Wrap ARM abort() to improve stack trace.
    
    The code generated for Thumb and Thumb2 targets has different handling
    for abort().  Because abort() is "noreturn", it doesn't need to preserve
    the callee-save registers.  The Thumb2 version trashes LR and makes it
    impossible to figure out who called abort().
    
    This inserts a trivial stub function; net effect is stack traces are
    reasonable after an abort().
    
    For bug 2191452.
    fix [2170898] abort() doesn't print a stack tarce
    
    the issue here is that abort() can be called from anywhere, in particular
    from malloc or free. When we try to use the debug_log functions, these
    can end up calling into some code (like malloc/free) that called abort()
    in the first place and end up in an infinite recursion loop.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@132569
    auto import from //branches/cupcake/...@127101
    Initial Contribution
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    bonic: libc: cpuacct support for setuid functions
    
    Any of the setuid functions now updates /acct/uid/ with its own tid
    before changing users. This is so we can properly account for cpu time
    per uid.
    
    Change-Id: I34186cf4d5228cac8439e582a9e26c01ef3011e4
    Signed-off-by: Mike Chan <mike@android.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix spurious DNS lookups in the C library.
    
    The problem was that the 'defdname' field of res_state structure
    was not properly initialized in __res_vinit(). This field is used
    to store the default domain name, which is normally build from
    calling gethostname() (see line 549 of res_init.c).
    
    Unfortunately, in the typical Android case, gethostname() returns
    an error (the hostname is configured) and a random stack string is
    used later to build the DNS search list (see lines 556+ in res_init.c)
    
    For the sake of illustration, let's say the search list is set to
    a random value like 'xWLK'.
    
    The end result is that when trying to result an unknown domain name
    (e.g. 'www.ptn'), the query fails then the resolver tries to make a
    new query with the DNS search list path(s) appended (e.g. 'www.ptn.xWLK').
    
    The patch simply initializes 'defdname' to an empty string to avoid
    this when the net.dns.search system property is not set.
    
    Also contains whitespace/formatting fixes
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: Add missing waitid() implementation.
    
    Change-Id: I312ee608dbf9249e4886a10d45d13e3cda8a9042
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Fix ptsname_r(3) return type to match glibc
    
    The gHardy man pages specify the return type of ptsname_r to be char*, but the
    return value to be 0 on success, negative on error and the gHardy stdlib.h
    defines extern int ptsname_r(...).
    
    Busybox telnetd fails to run successfully without this change.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: fix fstatfs() implementation.
    
    The syscall expects the size of the buffer as the second argument.
    
    Change-Id: I99ede2fec7fcd385ca03ff022c2cffa4297bea8d
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    bonic: libc: cpuacct support for setuid functions
    
    Any of the setuid functions now updates /acct/uid/ with its own tid
    before changing users. This is so we can properly account for cpu time
    per uid.
    
    Change-Id: I34186cf4d5228cac8439e582a9e26c01ef3011e4
    Signed-off-by: Mike Chan <mike@android.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: Add ftruncate64 and improve 64-bit parameter syscall handling.
    
    This patch improves the handling of 64-bit parameters in syscalls on ARM.
    The ARM EABI mandates that 64-bit quantities be passed in even/odd register
    pairs, which requires special treatment.
    
    This allows us to simplify our implementations of pread() and pwrite()
    and remove the C stubs for pread64() and pwrite64().
    
    Also add ftruncate64() to <unistd.h>
    
    Change-Id: I407e2fd223ba0093dd2d0b04c6152fadfc9ce3ef
    
    Bug 3107933
    Fix pwrite to take a const void* instead of void* for the buffer.
    
    Change-Id: I10b315946b8f8f7e34825410dfef37e0220edbee
    Fix pread()/pwrite() stubs
    
    On ARM EABI, 64-bit function parameters must be aligned
    to an even/odd register pair.  The weird way these stubs
    were written (using separate lo/hi parameters) prevented
    this alignment from being enforced by the compiler.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    bonic: libc: cpuacct support for setuid functions
    
    Any of the setuid functions now updates /acct/uid/ with its own tid
    before changing users. This is so we can properly account for cpu time
    per uid.
    
    Change-Id: I34186cf4d5228cac8439e582a9e26c01ef3011e4
    Signed-off-by: Mike Chan <mike@android.com>
    Add implementation of fdprintf, clearenv, and stubs for ttyname_r, *usershell
    
    Change-Id:      I5fe7e8b6ee5edbb49e707c3b6737a58563781fa3
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add killpg function
    
    Change-Id:      I9bc347d264fe38faf2d0f9935d2ebb43a353196e
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    readdir: fix interface to kernel getdents64 function
    
    Issue:
      The kernel will pad the entry->d_reclen in a getdents64 call to a
      long-word boundary.  For very long records, this could exceed the
      size of a struct dirent. The mismatch in the size was causing error
      paranoid checking code in bionic to fail... thus causing an early
      "end" when reading the dirent structures from the kernel buffer.
    
    Test:
     ls
     mkdir abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstu
     ls
    
    Change-Id: I75d1f8e45e1655fdd7bac4a08a481d086f28073a
    Author: Bruce Beare <bruce.j.beare@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Implement scandir() for OProfile.
    Initial Contribution
    Fix usleep(3) return type to be POSIX-compliant.
    
    POSIX usleep(3) returns 0 on successful completion, -1 otherwise:
      http://www.opengroup.org/onlinepubs/007908799/xsh/usleep.html
    
    This was found by an external user porting native code:
      http://groups.google.com/group/android-porting/browse_thread/thread/674848f001db0292
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    pathconf: dead loop in bionic function __2_symlinks
    
    Fix dead loops in file ./bionic/libc/unistd/pathconf.c
    
    Change-Id: I7a1e6bcd9879c96bacfd376b88a1f899793295c8
    Author: Jin Wei <wei.a.jin@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    added syscalls for SuperH which automatically generate by gensyscalls.py
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: Fix the definition of SIGRTMAX
    
    After this change, SIGRTMAX will be set to 64 (instead of 32 currently).
    Note that this doesn't change the fact that our sigset_t is still defined
    as a 32-bit unsigned integer, so most functions that deal with this type
    won't support real-time signals though.
    
    Change-Id: Ie1e2f97d646f1664f05a0ac9cac4a43278c3cfa8
    libc: Add ftruncate64 and improve 64-bit parameter syscall handling.
    
    This patch improves the handling of 64-bit parameters in syscalls on ARM.
    The ARM EABI mandates that 64-bit quantities be passed in even/odd register
    pairs, which requires special treatment.
    
    This allows us to simplify our implementations of pread() and pwrite()
    and remove the C stubs for pread64() and pwrite64().
    
    Also add ftruncate64() to <unistd.h>
    
    Change-Id: I407e2fd223ba0093dd2d0b04c6152fadfc9ce3ef
    
    Bug 3107933
    <sched.h>: Add sched_getcpu() and cpu_set_t
    
    This adds the cpu_set_t type definition and related functions
    and macros used to handle CPU thread affinity.
    
      sched_getcpu()
      sched_setaffinity()
      sched_getaffinity()
    
    Change-Id: If382ecafde8926341a88478062b275553645065b
    <time.h>: Add timegm(), timelocal() and others.
    
    Add timegm(), timelocal(), time2posix() and posix2time() to the
    C library.
    
    Change-Id: I34d5771ed83dd994870a5ca58a511d01898b1ffb
    libc: Add <android/api-level.h>
    
    Add a new header that defines __ANDROID_API__ as a constant integer
    corresponding to the current native API level. This header is included
    by <sys/cdefs.h>
    
    Change-Id: Ib4774e247b395991266245815a24292afc919848
    NOTE: This header is already provided by the NDK's platform headers.
          for levels 3 to 9.
    Fix __get_tls() in static C library to use kernel helpers.
    
    This is needed to fix gdbserver's handling of threaded programs,
    among other things.
    
    Change-Id: I823387c602cef9891532da946a01db14be780ab0
    Implemented pthread_atfork()
    
    Change-Id: Ie6c0bf593315d3507b3c4a6c8903a74a1fa053db
    linker: Support dlopen(NULL, ...) properly.
    
    Change-Id: Icba37823cb350c34848cc466d144c3a0af87c94c
    libc: update alarm() implementation to return 0 on error.
    
    This matches the GLibc behaviour, and allows alarm(0xFFFFFFFF) to return 0.
    
    Change-Id: I419aa71b27d6bb2015d15ba6b6112bf62eadcbb8
    libc: fix fstatfs() implementation.
    
    The syscall expects the size of the buffer as the second argument.
    
    Change-Id: I99ede2fec7fcd385ca03ff022c2cffa4297bea8d
    libc: Fix sem_post() implementation to wake up all waiting threads.
    
    This also allows us to optimize the case where we increment an
    uncontended semaphore (no need to call futex_wake() then).
    
    Change-Id: Iad48efe8551dc66dc89d3e3f18c001e5a6c1939f
    libc: add sanity checks to pthread_mutex_destroy()
    
    Change-Id: Iddb2204fa792fa9aca5f19838926dddbb09b74a2
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    libc: add missing truncate() declaration
    
    Change-Id: Icb3601bbc9365b75b05ff443a39192f9cd3cbfb7
    libc: Add missing <termio.h> header
    
    Change-Id: Id4e020ed330b3eabf09324f9b6d44d3a0f336d87
    sysconf(): Fix line parser for /proc files.
    
    Change-Id: I2678010ee95933de19c8a8e3b2fe65ceb9b86400
    Add sincosl() function to bionic. So that sincos optimization can - DO NOT MERGE
    be enabled.
    
    Change-Id: I672cb319689aa4fb3f1f7cd868dda76842bebae9
    Fix setjmp()/longjmp() to save FP registers on ARMv7. - DO NOT MERGE
    
    Change-Id: I3a0c2c05e295ac05ed51a531dabda668be204ca0
    Add missing sysinfo() implementation (already declared in <sys/sysinfo.h>) - DO NOT MERGE
    
    Change-Id: Iac4eb5911ffe4a7ab72b84df44e907685ac816af
    Use private futexes for semaphores, unless they are initialized with pshared != 0.
    
    Change-Id: I534e36a7171cd37037ae03b910ba71ea6968286d
    Note: previously, sem_init() would return an error if pshared != 0.
    Add sincosl() function to bionic. So that sincos optimization can
    be enabled.
    
    Change-Id: I19671a407dc96a92417c719da938ee0c1669bfb8
    Add missing sysinfo() implementation (already declared in <sys/sysinfo.h>)
    
    Change-Id: Ie9168238c3a8e77daab4f39939756d4c53d8af37
    Add pthread_rwlock_t implementation to the C library (DO NOT MERGE)
    
    Change-Id: I756d8c26afc37cd7b71117ddbaa02a2cb40fdecb
    Add sincos() and sincosf() implementation.
    
    This is a GLibc-compatibility patch required to simplify our
    upcoming toolchain work/porting.
    
    Change-Id: I615a20a449763f86b6e2b0e4f5ab43fb029ceb6d
    Add pthread_rwlock_t implementation to the C library
    
    Change-Id: I14d0a112554756a7294a51fe88c1c408a16b5ff1
    Fix setjmp()/longjmp() to save FP registers on ARMv7.
    
    Change-Id: I8ec684c8f8ca1ae58c8feb330b97d1e2b81caeef
    pthread: Use private futexes by default in condition variables
    
    Now that the system properly uses shared condvars when needed, we
    can enable the use of private futexes for them too.
    
    Change-Id: Icf8351fc0a2309f764cba45c65bc3af047720cdf
    Use private futexes for pthread_mutex_t.
    
    This does not change the implementation of conditional variables
    since we're waiting for other system components to properly use
    pthread_condattr_init/setpshared before that.
    
    Also remove an obsolete x86 source file.
    
    Change-Id: Ia3e3fbac35b87a534fb04d4381c3c66b975bc8f7
    Add pthread_condattr_init/destroy/setpshared/getpshared
    
    Note that this does not change the implementation of conditional variables
    which still use shared futexes, independent on the flags being selected.
    
    This will be fixed in a later patch, once our system is modified to use
    pthread_condattr_setpshared(attr, PTHREAD_PROCESS_SHARED) properly.
    
    Change-Id: I935de50964cd41f97a13dbfd6626d3407b0406c3
    Revert "bionic: pthread: use private futexes by default for mutexes and condvars"
    
    This reverts commit ba9c6f0989ae94778ba2b9f597adc827c9dc81e8.
    bionic: pthread: use private futexes by default for mutexes and condvars
    
    Private futexes are a recent kernel addition: faster futexes that cannot be
    shared between processes. This patch uses them by default, unless the PROCESS_SHARED
    attribute flag is used when creating a mutex and/or conditional variable.
    
    Also introduces pthread_condattr_init/destroy/setpshared/getpshared.
    
    Change-Id: I3a0e2116f467072b046524cb5babc00e41057a53
    Fix spurious DNS lookups in the C library.
    
    The problem was that the 'defdname' field of res_state structure
    was not properly initialized in __res_vinit(). This field is used
    to store the default domain name, which is normally build from
    calling gethostname() (see line 549 of res_init.c).
    
    Unfortunately, in the typical Android case, gethostname() returns
    an error (the hostname is configured) and a random stack string is
    used later to build the DNS search list (see lines 556+ in res_init.c)
    
    For the sake of illustration, let's say the search list is set to
    a random value like 'xWLK'.
    
    The end result is that when trying to result an unknown domain name
    (e.g. 'www.ptn'), the query fails then the resolver tries to make a
    new query with the DNS search list path(s) appended (e.g. 'www.ptn.xWLK').
    
    The patch simply initializes 'defdname' to an empty string to avoid
    this when the net.dns.search system property is not set.
    
    Also contains whitespace/formatting fixes
    Fix timezone management in the C library
    
    Define 'timezone' and 'daylight' global variables that are already
    defined in <time.h>
    
    Properly update the 'tm_gmtoff' field in 'struct tm' values.
    add sigaltstack syscall
    Fix pthread_sigmask() to return correct error values.
    
    Before that, it returned -1 on error and set errno (not Posix)
    After the patch, it returns the error code and leaves errno untouched.
    Implement support for RFC 3484 (address selection/sorting) in bionic.  (The
    Java changes required not to mess up the ordering from bionic will arrive in a
    later commit.) In particular, this will give us more correct behavior when on a
    6to4 network, in that IPv4 will usually be preferred over 6to4.
    
    Most of RFC 3484 is implemented -- what's not is rule 3 (avoid deprecated
    addresses), 4 (prefer home addresses) and 7 (prefer native transport) as they
    require low-level access to the kernel routing table via netlink. (glibc also
    started out this way, and these rules are primarily useful in pretty obscure
    circumstances, so we should be fine for the time being.)
    
    Also, rule 9 (use longest matching prefix) has been modified so it does not try
    to sort IPv4 addresses; given current IPv4 addressing practice these rules are
    pretty much meaningless. Finally, I've added support for Teredo as a separate
    label, with slightly lower preference than 6to4. (Vista puts the preference
    below IPv4 by default. glibc puts the preference together with non-tunneled
    IPv6.)
    
    Note that this patch removes support for the "sortlist" directive in
    resolv.conf; I've never seen it in actual use, it's irrelevant for Android
    (since we don't use resolv.conf anyway), and it's not clear how it would be
    implemented alongside RFC 3484.
    Fix sem_post() behaviour to wake up multiple waiting threads.
    Fix sem_trywait() implementation + update changelog.
    Implement clone() C library function properly.
    
    Only provide an implementation for ARM at the moment, since
    it requires specific assembly fragments (the standard syscall
    stubs cannot be used because the child returns in a different
    stack).
    Add Bionic Changelog in libc/docs/CHANGES.TXT
    Fix getservent() so that it returns s_port in network byte order.
    Also add a new document detailing known issues in the C library.
    eclair snapshot
    auto import //branches/master/...@140412
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@132276
    auto import from //branches/cupcake/...@130745
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@132276
    <sched.h>: Add sched_getcpu() and cpu_set_t
    
    This adds the cpu_set_t type definition and related functions
    and macros used to handle CPU thread affinity.
    
      sched_getcpu()
      sched_setaffinity()
      sched_getaffinity()
    
    Change-Id: If382ecafde8926341a88478062b275553645065b
    libc: fix fstatfs() implementation.
    
    The syscall expects the size of the buffer as the second argument.
    
    Change-Id: I99ede2fec7fcd385ca03ff022c2cffa4297bea8d
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    bonic: libc: cpuacct support for setuid functions
    
    Any of the setuid functions now updates /acct/uid/ with its own tid
    before changing users. This is so we can properly account for cpu time
    per uid.
    
    Change-Id: I34186cf4d5228cac8439e582a9e26c01ef3011e4
    Signed-off-by: Mike Chan <mike@android.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Don't corrupt the thread list in static executables.
    
    Several previous changes conspired to make a mess of the thread list
    in static binaries. This was most obvious when trying to call
    pthread_key_delete(3) on the main thread.
    
    Bug: http://code.google.com/p/android/issues/detail?id=36893
    Change-Id: I2a2f553114d8fb40533c481252b410c10656da2e
    libc: remove ctors/dtors sections
    
    None of the supported ARCHs actually populate these sections,
    so there is no point in keeping them in the binaries.
    
    Change-Id: I21a364f510118ac1114e1b49c53ec8c895c6bc6b
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@gmail.com>
    Initialize TLS before any application code is run.
    
    Since e19d702b8e33, dlsym and friends use recursive mutexes that
    require the current thread id, which is not available before the libc
    constructor. This prevents us from using dlsym() in .preinit_array.
    
    This change moves TLS initialization from libc constructor to the earliest
    possible point - immediately after linker itself is relocated. As a result,
    pthread_internal_t for the initial thread is available from the start.
    
    As a bonus, values stored in TLS in .preinit_array are not lost when libc is
    initialized.
    
    Change-Id: Iee5a710ee000173bff63e924adeb4a4c600c1e2d
    Updated gcc 4.4.3 IA toolchain doesn't require the .ctors list
    
    Orig-Change-Id: Ia840a19a45257128eccdcf25d105f500f2d90741
    Signed-off-by: H.J. Lu <hjl.tools@gmail.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Updated gcc 4.4.3 IA toolchain doesn't require the .ctors list
    
    Change-Id: Ia840a19a45257128eccdcf25d105f500f2d90741
    Signed-off-by: H.J. Lu <hjl.tools@gmail.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    libc: fix executable destruction support.
    
    This change allows an executable to call its destructor functions
    (declared with __attribute__((destructor))) to be properly called
    when it normally exits.
    
    Note that this is different from calling the destructors of a shared
    library when it is unloaded with dlclose() or through program exit,
    which are already supported.
    
    Bug: 3106500
    Change-Id: I1412ef5407f13b613fc6cb6103e0a691dbee4b1a
    Split libc_debug.so into two .so modules loaded on demand from libc.so
    
    This change is intended to eliminate need to replace libc.so with libc_debug.so in order to enablememory allocation debugging.
    This is also the first step towards implementing extended memoryallocation debugging using emulator's capabilities in monitoring memory access.
    Restore malloc debug.
    
    Some libc changes were preventing the initialization call from being made.
    The basic problem appears to be that libc_init_common.c is only built once,
    and it's only built for the non-debug libc.
    Fix the C library runtime initialization order.
    
    This allows libc.so to run the C runtime initializer as soon as the
    dynamic linker loads the shared library, i.e. before any other initializers
    (e.g. static C++ constructors in other shared libraries the executable depends
    on).
    
    This also removes the bug where the initializers from the executable itself
    were run twice: once by the dynamic linker, and another time by __libc_init
    as defined by libc_init_dynamic.c
    Revert "Fix the C library initialization to avoid calling static C++ constructors twice."
    
    This reverts commit 03eabfe65e1e2c36f4d26c78a730fa19a3bdada3.
    Fix the C library initialization to avoid calling static C++ constructors twice.
    
    The problem was due to the fact that, in the case of dynamic executables,
    the dynamic linker calls the DT_PREINIT_ARRAY, DT_INIT and DT_INIT_ARRAY
    constructors when loading shared libraries and dynamic executables,
    *before* calling the executable's entry point (i.e. arch-$ARCH/bionic/crtbegin_dynamic.c)
    which in turns call __libc_init() in libc.so, as defined by bionic/libc_init_dynamic.c
    
    The latter did call these constructors array again, mistakenly.
    
    The patch also updates the documentation of many related functions.
    
    Also adds a new section to linker/README.TXT explaining restrictions on
    C library usage.
    
    The patch has been tested on a Dream for stability issues with
    proprietary blobs:
    
    - H264 decoding works
    - Camera + Video recording works
    - GPS works
    - Sensors work
    
    The tests in system/extra/tests/bionic/libc/common/test_static_cpp_mutex.cpp has been
    run and shows the static C++ constructor being called only once.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Initial Contribution
    <sched.h>: Add sched_getcpu() and cpu_set_t
    
    This adds the cpu_set_t type definition and related functions
    and macros used to handle CPU thread affinity.
    
      sched_getcpu()
      sched_setaffinity()
      sched_getaffinity()
    
    Change-Id: If382ecafde8926341a88478062b275553645065b
    Add support for pread64/pwrite64
    
    64-bit pread() and pwrite() is needed for ZipFileRO to be able to read
    ludicrously large ZIP files just in case someone is crazy enough to do
    it.
    
    Also fix a license header that was apparently mangled.
    
    Change-Id: I6819ef8b36e46b63b40749c95717b1ecf9307033
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    bonic: libc: cpuacct support for setuid functions
    
    Any of the setuid functions now updates /acct/uid/ with its own tid
    before changing users. This is so we can properly account for cpu time
    per uid.
    
    Change-Id: I34186cf4d5228cac8439e582a9e26c01ef3011e4
    Signed-off-by: Mike Chan <mike@android.com>
    Add implementation of fdprintf, clearenv, and stubs for ttyname_r, *usershell
    
    Change-Id:      I5fe7e8b6ee5edbb49e707c3b6737a58563781fa3
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Clean up warnings in the malloc_debug_* files.
    
    Also clean up cpplint.py-detected lint.
    
    Change-Id: Ia18e89c4c6878764f8d7ed34b8247e7a8d8fe88b
    bionic: import heaptracker as chk_malloc
    
    This patch is a rewrite of libc.debug.malloc = 10 (chk_malloc).  It provides
    the same features as the original (poison freed memory, detect heap overruns
    and underruns), except that it provides more debugging information whenever it
    detects a problem.
    
    In addition to the original features, the new chk_malloc() implementation
    detects multiple frees within a given range of the last N allocations, N being
    configurable via the system property libc.debug.malloc.backlog.
    
    Finally, this patch keeps track of all outstanding memory allocations.  On
    program exit, we walk that list and report each outstanding allocation.
    
    (There is support (not enabled) for a scanner thread periodically walks over
    the list of outstanding allocations as well as the backlog of recently-freed
    allocations, checking for heap-usage errors.)
    
    Feature overview:
    
      1) memory leaks
      2) multiple frees
      3) use after free
      4) overrun
    
    Implementation:
    
    -- for each allocation, there is a:
      1) stack trace at the time the allocation is made
      2) if the memory is freed, there is also a stack trace at the point
      3) a front and rear guard (fence)
      4) the stack traces are kept together with the allocation
    
    -- the following lists and maintained
    
      1) all outstanding memory allocations
      3) a backlog of allocations what are freed; when you call free(), instead of
         actually freed, the allocation is moved to this backlog;
      4) when the backlog of allocations gets full, the oldest entry gets evicted
         from it; at that point, the allocation is checked for overruns or
         use-after-free errors, and then actually freed.
      5) when the program exits, the list of outstanding allocations and the
         backlog are inspected for errors, then freed;
    
    To use this, set the following system properties before running the process or
    processes you want to inspect:
    
    libc.malloc.debug.backlog # defaults to 100
    libc.malloc.debug 10
    
    When a problem is detected, you will see the following on logcat for a multiple
    free:
    
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 BYTES MULTIPLY FREED!
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 4009647c  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 FIRST FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096490  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 NOW BEING FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c6ac  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964a0  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    
    The following for a heap overrun and underrun:
    
    E/libc    ( 7233): +++ REAR GUARD MISMATCH [10, 11)
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 HAS A CORRUPTED REAR GUARD
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096438  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096462  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 HAS A CORRUPTED FRONT GUARD
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964ba  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964e4  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    
    The following for a memory leak:
    
    E/libc    ( 7233): +++ THERE ARE 1 LEAKED ALLOCATIONS
    E/libc    ( 7233): +++ DELETING 4096 BYTES OF LEAKED MEMORY AT 0x404b95e8 (1 REMAINING)
    E/libc    ( 7233): +++ ALLOCATION 0x404b95e8 SIZE 4096 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 0001bc94  /system/lib/libc.so
    E/libc    ( 7233):      #04  pc 0001edf6  /system/lib/libc.so
    E/libc    ( 7233):      #05  pc 0001b80a  /system/lib/libc.so
    E/libc    ( 7233):      #06  pc 0001c086  /system/lib/libc.so
    E/libc    ( 7233):      #07  pc 40096402  /system/bin/malloctest
    E/libc    ( 7233):      #08  pc 00016f24  /system/lib/libc.so
    
    Change-Id: Ic440e9d05a01e2ea86b25e8998714e88bc2d16e0
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    eclair snapshot
    Make IPv6 definitions comply with RFC 3493:
     - Add some definitions to netinet/in6.h
     - Include netinet/in6.h from netinet/in.h
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    enable clone system call for x86
    
    Add __bionic_clone function for x86, which will be
    used for clone system call.
    
    Change-Id: I889dc9bf4b7ebb4358476e17e6f3233e26491f4d
    Signed-off-by: Jin Wei <wei.a.jin@intel.com>
    Signed-off-by: Xiaokang Qin <xiaokang.qin@intel.com>
    Signed-off-by: Beare, Bruce J <bruce.j.beare@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Author-tracking-BZ: 51414
    Implement clone() C library function properly.
    
    Only provide an implementation for ARM at the moment, since
    it requires specific assembly fragments (the standard syscall
    stubs cannot be used because the child returns in a different
    stack).
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add fts, err, and sys/queue for grep
    
    Change-Id:      Id47514a1812d828e95efa2fab0e9c15c5b682b58
    Print out shared app gids correctly
    
    For applications that share resources across users such as
    forward-locked applications, print out their group name correctly.
    
    Change-Id: I06ee0b67e4325cfa415ffd7a03e301700399a66d
    Add tests for Android-specific stubs
    
    Also fix problem with multi-user IDs that the home directory was
    returned as "/data" instead of "/" unlike all the other uids.
    
    Change-Id: I914d22052e5a86552989f8969b85aadbc748c65d
    Clean up warnings in the malloc_debug_* files.
    
    Also clean up cpplint.py-detected lint.
    
    Change-Id: Ia18e89c4c6878764f8d7ed34b8247e7a8d8fe88b
    Clean up warnings in stubs.cpp.
    
    Switch to C++ to get extra warnings, and format the code Google style.
    
    Change-Id: Ifc0131bf297a6ee8a8a6b8d049a02518b0b1a4b7
    Prevent deadlock when using fork
    
    When forking of a new process in bionic, it is critical that it
    does not allocate any memory according to the comment in
    java_lang_ProcessManager.c:
    "Note: We cannot malloc() or free() after this point!
    A no-longer-running thread may be holding on to the heap lock, and
    an attempt to malloc() or free() would result in deadlock."
    However, as fork is using standard lib calls when tracing it a bit,
    they might allocate memory, and thus causing the deadlock.
    This is a rewrite so that the function cpuacct_add, that fork calls,
    will use system calls instead of standard lib calls.
    
    Signed-off-by: christian bejram <christian.bejram@stericsson.com>
    
    Change-Id: Iff22ea6b424ce9f9bf0ac8e9c76593f689e0cc86
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    bonic: libc: cpuacct support for setuid functions
    
    Any of the setuid functions now updates /acct/uid/ with its own tid
    before changing users. This is so we can properly account for cpu time
    per uid.
    
    Change-Id: I34186cf4d5228cac8439e582a9e26c01ef3011e4
    Signed-off-by: Mike Chan <mike@android.com>
    Add implementation of fdprintf, clearenv, and stubs for ttyname_r, *usershell
    
    Change-Id:      I5fe7e8b6ee5edbb49e707c3b6737a58563781fa3
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Give the timer_create SIGEV_THREAD helper threads sensible names.
    
    Bug: 6609676
    Change-Id: I286b197c75beee4d9930b0973f2d7dd47c14e91c
    pthread-timers: Hide internal symbol __timer_table_start_stop
    
    Change-Id: If99c5816fe6fa9107aa6bef4697048fabf92283f
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@132589
    auto import from //depot/cupcake/@137055
    auto import from //branches/cupcake/...@132276
    auto import from //branches/cupcake/...@127101
    Code drop from //branches/cupcake/...@124589
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add some missing includes.
    
    Change-Id: Ieec623c06bc32ec78334f628af25b00c2bccd2e7
    Added _memmove_words
    
    Added a memmove() variant for Dalvik's System.arraycopy()
    implementation.  It guarantees 16-bit or 32-bit atomicity depending
    on the alignment of the arguments.
    
    Bug 3398352
    
    (cherry-pick from master)
    
    Change-Id: I5e64de1c76971ba234bf2dd05477ba390e0412a4
    Added _memmove_words
    
    Added a memmove() variant for Dalvik's System.arraycopy()
    implementation.  It guarantees 16-bit or 32-bit atomicity depending
    on the alignment of the arguments.
    
    Bug 3398352
    
    Change-Id: Ie7bd246305ef0ff8290513663327c5b81680368d
    bionic: Do not use <sys/atomics.h> for platform code.
    
    We're going to modify the __atomic_xxx implementation to provide
    full memory barriers, to avoid problems for NDK machine code that
    link to these functions.
    
    First step is to remove their usage from our platform code.
    We now use inlined versions of the same functions for a slight
    performance boost.
    
    + remove obsolete atomics_x86.c (was never compiled)
    
    NOTE: This improvement was benchmarked on various devices.
          Comparing a pthread mutex lock + atomic increment + unlock
          we get:
    
      - ARMv7 emulator, running on a 2.4 GHz Xeon:
           before: 396 ns    after: 288 ns
    
      - x86 emulator in KVM mode on same machine:
           before: 27 ns     after: 27 ns
    
      - Google Nexus S, in ARMv7 mode (single-core):
           before: 82 ns     after: 76 ns
    
      - Motorola Xoom, in ARMv7 mode (multi-core):
           before: 121 ns    after: 120 ns
    
    The code has also been rebuilt in ARMv5TE mode for correctness.
    
    Change-Id: Ic1dc72b173d59b2e7af901dd70d6a72fb2f64b17
    libc: Fix sem_post() implementation to wake up all waiting threads.
    
    This also allows us to optimize the case where we increment an
    uncontended semaphore (no need to call futex_wake() then).
    
    Change-Id: Iad48efe8551dc66dc89d3e3f18c001e5a6c1939f
    libc: remove cutils dependencies
    
    We simply copy the stuff we need from cutils headers.
    
    A future patch will change cutils to include the private <bionic_atomic_inline.h>
    
    Change-Id: Ib6fd9a03bc9e337ce867bd606dc94c2b4438480a
    Use private futexes for semaphores, unless they are initialized with pshared != 0.
    
    Change-Id: I534e36a7171cd37037ae03b910ba71ea6968286d
    Note: previously, sem_init() would return an error if pshared != 0.
    Atomic/SMP update, part 3.  (manual merge)
    
    Update ARM atomic ops to use LDREX/STREX.  Stripped out #if 0 chunk.
    
    Insert explicit memory barriers in pthread and semaphore code.
    
    For bug 2721865.
    
    Change-Id: I595cc8e5a8d1e4906b6641115e46208a7e9e755a
    Atomic/SMP update, part 3.
    
    Update ARM atomic ops to use LDREX/STREX.  Stripped out #if 0 chunk.
    
    Insert explicit memory barriers in pthread and semaphore code.
    
    For bug 2721865.
    
    Change-Id: I0f153b797753a655702d8be41679273d1d5d6ae7
    Fix sem_post() behaviour to wake up multiple waiting threads.
    Fix sem_trywait() implementation + update changelog.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@127101
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Revert "Revert "Upgrade to dlmalloc 2.8.5.""
    
    This reverts commit f72ee269274170cd46af2844a2fe88767fb6e43c.
    Revert "Upgrade to dlmalloc 2.8.5."
    
    This reverts commit 999089181ef60bb67e1a49f2cf6f4ec608a7caf8.
    Revert "Upgrade to dlmalloc 2.8.5."
    
    This reverts commit 999089181ef60bb67e1a49f2cf6f4ec608a7caf8.
    Upgrade to dlmalloc 2.8.5.
    
    Move dlmalloc code to upstream-dlmalloc to make pulling upstream changes
    easier.
    Declare pvalloc and malloc_usable_size routines present in malloc.h but with
    missing implementations. Remove other functions from malloc.h that have
    no implementation nor use in Android.
    
    Change-Id: Ia6472ec6cbebc9ad1ef99f4669de9d33fcc2efb4
    Minor tweak to get memory around corrupted heap chunks dumped.
    
    Change-Id: I8f72c5c7e23960b13fc53e2354cd74aca8aac3c0
    Print the corrupted address passed to free().
    
    For example:
    
    @@@ ABORTING: INVALID HEAP ADDRESS IN dlfree addr=0x5c3bfbd0
    Fatal signal 11 (SIGSEGV) at 0xdeadbaad (code=1), thread 2942
    
    The addr=0x5c3bfbd0 part is new.
    
    Change-Id: I8670144b2b0a3a6182384150d762c97dfee5452f
    Print the corrupted address passed to free().
    
    For example:
    
    @@@ ABORTING: INVALID HEAP ADDRESS IN dlfree addr=0x5c3bfbd0
    Fatal signal 11 (SIGSEGV) at 0xdeadbaad (code=1), thread 2942
    
    The addr=0x5c3bfbd0 part is new.
    
    Change-Id: I8670144b2b0a3a6182384150d762c97dfee5452f
    Add the posix_memalign(3) function to bionic
    
    The posix_memalign(3) function is very similar to the traditional
    memalign(3) function, but with better error reporting and a guarantee
    that the memory it allocates can be freed.  In bionic, memalign(3)
    allocated memory can be freed, so posix_memalign(3) is just a wrapper
    around memalign(3).
    
    Change-Id: I62ee908aa5ba6b887d8446a00d8298d080a6a299
    Initialize mspace->least_addr properly in the mmap path.
    
    BUG: 6206963
    Change-Id: Id2ab580246de50a4511b56a734a7bece98fb945c
    Add the posix_memalign(3) function to bionic
    
    The posix_memalign(3) function is very similar to the traditional
    memalign(3) function, but with better error reporting and a guarantee
    that the memory it allocates can be freed.  In bionic, memalign(3)
    allocated memory can be freed, so posix_memalign(3) is just a wrapper
    around memalign(3).
    
    Change-Id: I62ee908aa5ba6b887d8446a00d8298d080a6a299
    Revert "Revert "libc: Add logcat error message for memory corruption""
    
    This reverts commit 368ee1e4d65c555fdb0fa4b3a91d75a397936908.
    Really fix the build.
    
    libcutils/mspace.c includes libc/bionic/dlmalloc.c, we need to
    take care of the fact that any internal C library function cannot
    be used from it.
    
    Change-Id: I0bc81ae090b7ac2d464f26b97fc6b94a08cdad9c
    Fix broken build
    
    Change-Id: Ia46b50aec51a55434c8828a73e07f4732f8f6c1c
    Revert "libc: Add logcat error message for memory corruption"
    
    This fixes the build.
    
    This reverts commit 7708a89c60e7b024d31c48c8034932c5e9f0aceb.
    libc: Add logcat error message for memory corruption
    
    Our dlmalloc implementation currently calls abort() when it detects
    that the heap is corrupted, or that an invalid pointer is passed to
    one of its functions.
    
    The only way to detect this is because abort() will force-fully
    crash the current program with a magic fault address of '0xdeadbaad'.
    
    However, this is not really well documented, and a frequent topic
    on the android-ndk forum (among others).
    
    This change makes our dlmalloc code dump a simple message to the
    log just before the abort() call (and hence before the stack trace)
    to better help identify the problem.
    
    Change-Id: Iebf7eb7fe26463ecadfaca8f247d237edb441e3c
    Split libc_debug.so into two .so modules loaded on demand from libc.so
    
    This change is intended to eliminate need to replace libc.so with libc_debug.so in order to enablememory allocation debugging.
    This is also the first step towards implementing extended memoryallocation debugging using emulator's capabilities in monitoring memory access.
    eclair snapshot
    Add mspace_merge_objects
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    bionic: equalize the <unknown> program name between ssp.c and libc_init_common.c
    
    ... for the consistency sake.
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    implement pthread mutex deadlock detection
    
    this works by building a directed graph of acquired
    pthread mutexes and making sure there are no loops in
    that graph.
    
    this feature is enabled with:
    
        setprop debug.libc.pthread 1
    
    when a potential deadlock is detected, a large warning is
    output to the log with appropriate back traces.
    
    currently disabled at compile-time. set PTHREAD_DEBUG_ENABLED=1
    to enable.
    
    Change-Id: I916eed2319599e8aaf8f229d3f18a8ddbec3aa8a
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Clean up warnings in the malloc_debug_* files.
    
    Also clean up cpplint.py-detected lint.
    
    Change-Id: Ia18e89c4c6878764f8d7ed34b8247e7a8d8fe88b
    bionic: import heaptracker as chk_malloc
    
    This patch is a rewrite of libc.debug.malloc = 10 (chk_malloc).  It provides
    the same features as the original (poison freed memory, detect heap overruns
    and underruns), except that it provides more debugging information whenever it
    detects a problem.
    
    In addition to the original features, the new chk_malloc() implementation
    detects multiple frees within a given range of the last N allocations, N being
    configurable via the system property libc.debug.malloc.backlog.
    
    Finally, this patch keeps track of all outstanding memory allocations.  On
    program exit, we walk that list and report each outstanding allocation.
    
    (There is support (not enabled) for a scanner thread periodically walks over
    the list of outstanding allocations as well as the backlog of recently-freed
    allocations, checking for heap-usage errors.)
    
    Feature overview:
    
      1) memory leaks
      2) multiple frees
      3) use after free
      4) overrun
    
    Implementation:
    
    -- for each allocation, there is a:
      1) stack trace at the time the allocation is made
      2) if the memory is freed, there is also a stack trace at the point
      3) a front and rear guard (fence)
      4) the stack traces are kept together with the allocation
    
    -- the following lists and maintained
    
      1) all outstanding memory allocations
      3) a backlog of allocations what are freed; when you call free(), instead of
         actually freed, the allocation is moved to this backlog;
      4) when the backlog of allocations gets full, the oldest entry gets evicted
         from it; at that point, the allocation is checked for overruns or
         use-after-free errors, and then actually freed.
      5) when the program exits, the list of outstanding allocations and the
         backlog are inspected for errors, then freed;
    
    To use this, set the following system properties before running the process or
    processes you want to inspect:
    
    libc.malloc.debug.backlog # defaults to 100
    libc.malloc.debug 10
    
    When a problem is detected, you will see the following on logcat for a multiple
    free:
    
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 BYTES MULTIPLY FREED!
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 4009647c  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 FIRST FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096490  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 NOW BEING FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c6ac  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964a0  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    
    The following for a heap overrun and underrun:
    
    E/libc    ( 7233): +++ REAR GUARD MISMATCH [10, 11)
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 HAS A CORRUPTED REAR GUARD
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096438  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096462  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 HAS A CORRUPTED FRONT GUARD
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964ba  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964e4  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    
    The following for a memory leak:
    
    E/libc    ( 7233): +++ THERE ARE 1 LEAKED ALLOCATIONS
    E/libc    ( 7233): +++ DELETING 4096 BYTES OF LEAKED MEMORY AT 0x404b95e8 (1 REMAINING)
    E/libc    ( 7233): +++ ALLOCATION 0x404b95e8 SIZE 4096 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 0001bc94  /system/lib/libc.so
    E/libc    ( 7233):      #04  pc 0001edf6  /system/lib/libc.so
    E/libc    ( 7233):      #05  pc 0001b80a  /system/lib/libc.so
    E/libc    ( 7233):      #06  pc 0001c086  /system/lib/libc.so
    E/libc    ( 7233):      #07  pc 40096402  /system/bin/malloctest
    E/libc    ( 7233):      #08  pc 00016f24  /system/lib/libc.so
    
    Change-Id: Ic440e9d05a01e2ea86b25e8998714e88bc2d16e0
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Eliminate duplicate copies of constants.
    
    sys/personality.h and linux/personality.h contain mostly
    identical contents. Eliminate dups.
    
    Change-Id: Ie786edcb5dca57af7ee5b5fdad2949369f1bc4e4
    add personality() system call.
    
    Change-Id: Ie899def8ea1d705930ed83adae1343c1353e7c57
    Handle pthread-related changes (mutex/atfork)
    
    First commit:
    
    Revert "Revert "am be741d47: am 2f460fbe: am 73b5cad9: Merge "bionic: Fix wrong kernel_id in pthread descriptor after fork()"""
    
    This reverts commit 06823da2f0c8b4a4ce4c45113032f03df85c94b8.
    
    Second commit:
    
    bionic: fix atfork hanlder_mutex deadlock
    
    This cherry-picks commit 34e89c232dd5645fe3b5f9b40856d8e3e4cae57a
    
    After applying the kernel_id fix, the system refused to boot up and we
    got following crash log:
    I/DEBUG   (  113): pid: 618, tid: 618  >>> org.simalliance.openmobileapi.service:remote <<<
    I/DEBUG   (  113): signal 16 (SIGSTKFLT), code -6 (?), fault addr --------
    I/DEBUG   (  113):  eax fffffe00  ebx b77de994  ecx 00000080  edx 00724002
    I/DEBUG   (  113):  esi 00000000  edi 00004000
    I/DEBUG   (  113):  xcs 00000073  xds 0000007b  xes 0000007b  xfs 00000000 xss 0000007b
    I/DEBUG   (  113):  eip b7761351  ebp bfdf3de8  esp bfdf3dc4  flags 00000202
    I/DEBUG   (  113):     #00  eip: 00015351  /system/lib/libc.so
    I/DEBUG   (  113):     #01  eip: 0000d13c  /system/lib/libc.so (pthread_mutex_lock)
    I/DEBUG   (  113):     #02  eip: 00077b48  /system/lib/libc.so (__bionic_atfork_run_prepare)
    I/DEBUG   (  113):     #03  eip: 00052cdb  /system/lib/libc.so (fork)
    I/DEBUG   (  113):     #04  eip: 0009ae91  /system/lib/libdvm.so (_Z18dvmOptimizeDexFileillPKcjjb)
    I/DEBUG   (  113):     #05  eip: 000819d6  /system/lib/libdvm.so (_Z14dvmJarFileOpenPKcS0_PP7JarFileb)
    I/DEBUG   (  113):     #06  eip: 000b175e  /system/lib/libdvm.so (_ZL40Dalvik_dalvik_system_DexFile_openDexFilePKjP6JValue)
    I/DEBUG   (  113):     #07  eip: 0011fb94  /system/lib/libdvm.so
    
    Root cause:
    The atfork uses the mutex handler_mutex to protect the atfork_head. The
    parent will call __bionic_atfork_run_prepare() to lock the handler_mutex,
    and need both the parent and child to unlock their own copy of handler_mutex
    after fork. At that time, the owner of hanlder_mutex is set as the parent.
    If we apply the kernel_id fix, then the child's kernel_id will be set as
    child's tid.
    The handler_mutex is a recursive lock, and pthread_mutex_unlock(&hander_mutex)
    will fail because the mutex owner is the parent, while the current tid
    (__get_thread()->kernel_id) is child, not matched with the mutex owner.
    At that time, the handler_mutex is left in lock state.If the child wants to
    fork other process after than, then it will try to lock handler_mutex, and
    then be deadlocked.
    
    Fix:
    Since the child has its own copy of vm space from the the parent, the
    child space's handler_mutex should be reset to the initialized state.
    
    Change-Id: I3907dd9a153418fb78862f2aa6d0302c375d9e27
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Chenyang Du <chenyang.du@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    
    Change-Id: Ic8072f366a877443a60fe215f3c00b3df5a259c8
    Revert "am be741d47: am 2f460fbe: am 73b5cad9: Merge "bionic: Fix wrong kernel_id in pthread descriptor after fork()""
    
    This reverts commit 76d56cf4a94e875a8b621025e2780775247adb6e, reversing
    changes made to c59ba4595be25a1213955233fcf9bcd1afe6438e.
    
    Bug: 6157577
    bionic: Fix wrong kernel_id in pthread descriptor after fork()
    
    After forking, the kernel_id field in the phtread_internal_t returned by pthread_self()
    is incorrect --- it's the tid from the parent, not the new tid of the
    child.
    
    The root cause is that: currently the kernel_id is set by
    _init_thread(), which is called in 2 cases:
    (1) called by __libc_init_common(). That happens when the execv( ) is
    called after fork( ). But when the zygote tries to fork the android
    application, the child application doesn't call execv( ), instread, it
    tries to call the Java main method directly.
    (2) called by pthread_create(). That happens when a new thread is
    created.
    
    For the lead thread which is the thread created by fork(), it should
    call execv() but it doesn't, as described in (1) above. So its kernel_id
    will inherit the parent's kernel_id.
    
    Fixed it in this patch.
    
    Change-Id: I63513e82af40ec5fe51fbb69456b1843e4bc0fc7
    Signed-off-by: Chenyang Du <chenyang.du@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Implemented pthread_atfork()
    
    Change-Id: Ie6c0bf593315d3507b3c4a6c8903a74a1fa053db
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    bonic: libc: cpuacct support for setuid functions
    
    Any of the setuid functions now updates /acct/uid/ with its own tid
    before changing users. This is so we can properly account for cpu time
    per uid.
    
    Change-Id: I34186cf4d5228cac8439e582a9e26c01ef3011e4
    Signed-off-by: Mike Chan <mike@android.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Don't copy strerror(3) or strsignal(3) strings if we can share.
    
    Change-Id: Ic405269f63b945c6fb347e7c4346cd6f104aff35
    Make strerror(3) and strsignal(3) thread-safe, and add psignal(3) and psiginfo(3).
    
    Change-Id: I426109db25e907980d6cb3a7a695796e45783b78
    ARM: make CRT_LEGACY_WORKAROUND work as intended
    
    To properly support legacy ARM shared libraries, libc.so needs
    to export the symbols __dso_handle and atexit, even though
    these are now supplied by the crt startup code.
    
    This patch reshuffles the existing CRT_LEGACY_WORKAROUND
    conditionally compiled code slightly so it works as the
    original author likely intended.
    
    Change-Id: Id6c0e94dc65b7928324a5f0bad7eba6eb2f464b9
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@gmail.com>
    arm: rewrite crtbegin* as C files.
    
    Rewrite
     crtbegin.S     -> crtbegin.c
     crtbegin_so.S  -> crtbegin_so.c
    
    This change allows us to generate PIC code without relying
    on text relocations.
    
    As a consequence of this rewrite, also rewrite
      __dso_handle.S    -> __dso_handle.c
      __dso_handle_so.S -> __dso_handle_so.c
      atexit.S          -> atexit.c
    
    In crtbegin.c _start, place the __PREINIT_ARRAY__, __INIT_ARRAY__,
    __FINI_ARRAY__, and __CTOR_LIST__ variables onto the stack, instead of
    passing a pointer to the text section of the binary.
    
    This change appears sorta wonky, as I attempted to preserve,
    as much as possible, the structure of the original assembly.
    As a result, you have C files including other C files, and other
    programming uglyness.
    
    Result: This change reduces the number of files with text-relocations
    from 315 to 19 on my Android build.
    
    Before:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      315
    
    After:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      19
    
    Change-Id: Ib9f98107c0eeabcb606e1ddc7ed7fc4eba01c9c4
    Enable functional DSO object destruction
    
    Unfortunately, legacy .so files for ARM don't have a correct crtbegin file.
    Consequently, we have to grandfather the old __dso_handle behaviour.
    Add some ifdefs for ARM to allow it to use the old code until we can work
    out a transition.
    
    Change-Id: I6a28f368267d792c94e1d985d8344023bc632f6f
    Author: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Enable functional DSO object destruction
    
    Unfortunately, legacy .so files for ARM don't have a correct crtbegin file.
    Consequently, we have to grandfather the old __dso_handle behaviour.
    Add some ifdefs for ARM to allow it to use the old code until we can work
    out a transition.
    
    Change-Id: I6a28f368267d792c94e1d985d8344023bc632f6f
    Author: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Revert "Update X86 Bionic CRT files for unwind/exceptions"
    
    This reverts commit dc3bc87b43d0d73d89cca59692b80de878e11a5d,
    causes netd to crash.
    Update X86 Bionic CRT files for unwind/exceptions
    
    Several updates to Bionic crt*.o files to implement Linux/x86
    stack unwind/exception handling.
    Mark __dso_handle as hidden.
    Note: Requires complete rebuild due to CRT changes. Google will
    need to regenerate and check-in all the prebuilt x86 CRT object
    files and libraries which link to them.
    
    Change-Id: I191ce1afb0dee7bbc28dcd9694e5919226dbd070
    Signed-off-by: Bruce J Beare <bruce.j.beare@intel.com>
    Signed-off-by: Mark D Horn <mark.d.horn@intel.com>
    Author: Lu, Hongjiu <hongjiu.lu@intel.com>
    Allow dlclose() to properly call static C++ destructors.
    
    With this patch _and_ an upcoming build/ patch, the destruction
    of static C++ objects contained in shared libraries will happen
    properly when dlclose() is called.
    
    Note that this change introduces crtbegin_so.S and crtend_so.S which
    are currently ignored by the build system.
    
    + move definition of __dso_handle to the right place
    (before that, all shared libraries used the __dso_handle
    global variable from the C library).
    
    Note that we keep a 'weak' __dso_handle in aeabi.c to avoid
    breaking the build until the next patch to build/core/combo/
    appears. We will be able to remove that later.
    
    + move bionic/aeabi.c to arch-arm/bionic/ (its proper location)
    
    NOTE: The NDK will need to be modified to enable this feature in
             the shared libraries that are generated through it.
    
    Change-Id: I99cd801375bbaef0581175893d1aa0943211b9bc
    Change-Id: I68cc462aeb2460345a53bdb9941ce4bfc10456fb
    bionic: fix clearenv() compiler warning and related comment typos
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    Add implementation of fdprintf, clearenv, and stubs for ttyname_r, *usershell
    
    Change-Id:      I5fe7e8b6ee5edbb49e707c3b6737a58563781fa3
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    bionic, libthread_db x86 fixes
    
    Orig-Change-Id: I3be997f5f1f6a894a3c200d4f325cf3bfd428c66
    Author: James Rose <james.rose@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    ptrace.c Fix source file format to unix from dos
    
    Orig-Change-Id: Ia771b457eec7f9575d4631fb1c12a7062ebcc7de
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    bionic, libthread_db x86 fixes
    
    Change-Id: I3be997f5f1f6a894a3c200d4f325cf3bfd428c66
    Author: James Rose <james.rose@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Don't corrupt the thread list in static executables.
    
    Several previous changes conspired to make a mess of the thread list
    in static binaries. This was most obvious when trying to call
    pthread_key_delete(3) on the main thread.
    
    Bug: http://code.google.com/p/android/issues/detail?id=36893
    Change-Id: I2a2f553114d8fb40533c481252b410c10656da2e
    Let pthread_create fail if schedparam can't be set
    
    The creation of a thread succeeds even if the requested scheduling
    parameters can not be set. This is not POSIX compliant, and even
    worse, it leads to a wrong behavior. Let pthread_create() fail in this
    case.
    
    Change-Id: Ice66e2a720975c6bde9fe86c2cf8f649533a169c
    Signed-off-by: Christian Bejram <christian.bejram@stericsson.com>
    Initialize TLS before any application code is run.
    
    Since e19d702b8e33, dlsym and friends use recursive mutexes that
    require the current thread id, which is not available before the libc
    constructor. This prevents us from using dlsym() in .preinit_array.
    
    This change moves TLS initialization from libc constructor to the earliest
    possible point - immediately after linker itself is relocated. As a result,
    pthread_internal_t for the initial thread is available from the start.
    
    As a bonus, values stored in TLS in .preinit_array are not lost when libc is
    initialized.
    
    Change-Id: Iee5a710ee000173bff63e924adeb4a4c600c1e2d
    Implemented pthread_atfork()
    
    Change-Id: Ie6c0bf593315d3507b3c4a6c8903a74a1fa053db
    Revert "Fix the C library initialization to avoid calling static C++ constructors twice."
    
    This reverts commit 03eabfe65e1e2c36f4d26c78a730fa19a3bdada3.
    Fix the C library initialization to avoid calling static C++ constructors twice.
    
    The problem was due to the fact that, in the case of dynamic executables,
    the dynamic linker calls the DT_PREINIT_ARRAY, DT_INIT and DT_INIT_ARRAY
    constructors when loading shared libraries and dynamic executables,
    *before* calling the executable's entry point (i.e. arch-$ARCH/bionic/crtbegin_dynamic.c)
    which in turns call __libc_init() in libc.so, as defined by bionic/libc_init_dynamic.c
    
    The latter did call these constructors array again, mistakenly.
    
    The patch also updates the documentation of many related functions.
    
    Also adds a new section to linker/README.TXT explaining restrictions on
    C library usage.
    
    The patch has been tested on a Dream for stability issues with
    proprietary blobs:
    
    - H264 decoding works
    - Camera + Video recording works
    - GPS works
    - Sensors work
    
    The tests in system/extra/tests/bionic/libc/common/test_static_cpp_mutex.cpp has been
    run and shows the static C++ constructor being called only once.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Use hidden visibility for several internal-use-only functions.
    
    Change-Id: Ibeea6963ff0cc06479d0a3ed7e868eeece8c55a0
    Don't copy strerror(3) or strsignal(3) strings if we can share.
    
    Change-Id: Ic405269f63b945c6fb347e7c4346cd6f104aff35
    Make strerror(3) and strsignal(3) thread-safe, and add psignal(3) and psiginfo(3).
    
    Change-Id: I426109db25e907980d6cb3a7a695796e45783b78
    Clean up warnings in the malloc_debug_* files.
    
    Also clean up cpplint.py-detected lint.
    
    Change-Id: Ia18e89c4c6878764f8d7ed34b8247e7a8d8fe88b
    Enhance getcwd(3) to handle NULL like glibc.
    
    Bug: http://code.google.com/p/android/issues/detail?id=36085
    Change-Id: I960a1b585887eb66176c61d29c5c61c239a4003f
    bionic: fix NULL parameter failure in getcwd()
    
    LTP: getcwd01 failed in LTP
    
    Need to check getcwd parameters, otherwise it will lead to
    posix test case to fail.
    
    Change-Id: Ieb673b6dd4ca6481da81c5339dbf7ec0a463f263
    Signed-off-by: Jin Wei <wei.a.jin@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Make pthread_create more forgiving of invalid sched_policy.
    Bug: 7005326
    
    (cherry-pick of e58303249b9e799a4fe84c5a2dfe71518441a6ec.)
    
    Change-Id: Ie81494e0f6a71caa6fd9fabbcfc47a23077554d6
    Make pthread_create more forgiving of invalid sched_policy.
    Bug: 7005326
    
    Change-Id: I4e33d8e7d70fbfcf8a1bcc0e4c33279b42092a0a
    Don't corrupt the thread list in static executables.
    
    Several previous changes conspired to make a mess of the thread list
    in static binaries. This was most obvious when trying to call
    pthread_key_delete(3) on the main thread.
    
    Bug: http://code.google.com/p/android/issues/detail?id=36893
    Change-Id: I2a2f553114d8fb40533c481252b410c10656da2e
    Fix race condition in pthread_create()
    
    Save thread id to *thread_out before new
    thread is allowed to run else there's a
    risk that the thread has finished and
    been deleted when *thread_out is assigned.
    
    Change-Id: I6b84c61a8df06840877d4ab036f26feace3192d8
    pthread: Invalidate stale stack pointers on pthread_exit()
    
    A call to pthread_key_delete() after pthread_exit() have unmapped the stack of a thread
    but before the ongoing pthread_join() have finished executing will result in an access
    to unmapped memory.
    Avoid this by invalidating the stack_base and tls pointers during pthread_exit().
    
    This is based on the investigation and proprosed solution by
    Srinavasa Nagaraju <srinavasa.x.nagaraju@sonyericsson.com>
    
    Change-Id: I145fb5d57930e91b00f1609d7b2cd16a55d5b3a9
    Let pthread_create fail if schedparam can't be set
    
    The creation of a thread succeeds even if the requested scheduling
    parameters can not be set. This is not POSIX compliant, and even
    worse, it leads to a wrong behavior. Let pthread_create() fail in this
    case.
    
    Change-Id: Ice66e2a720975c6bde9fe86c2cf8f649533a169c
    Signed-off-by: Christian Bejram <christian.bejram@stericsson.com>
    Initialize TLS before any application code is run.
    
    Since e19d702b8e33, dlsym and friends use recursive mutexes that
    require the current thread id, which is not available before the libc
    constructor. This prevents us from using dlsym() in .preinit_array.
    
    This change moves TLS initialization from libc constructor to the earliest
    possible point - immediately after linker itself is relocated. As a result,
    pthread_internal_t for the initial thread is available from the start.
    
    As a bonus, values stored in TLS in .preinit_array are not lost when libc is
    initialized.
    
    Change-Id: Iee5a710ee000173bff63e924adeb4a4c600c1e2d
    Handle pthread-related changes (mutex/atfork)
    
    First commit:
    
    Revert "Revert "am be741d47: am 2f460fbe: am 73b5cad9: Merge "bionic: Fix wrong kernel_id in pthread descriptor after fork()"""
    
    This reverts commit 06823da2f0c8b4a4ce4c45113032f03df85c94b8.
    
    Second commit:
    
    bionic: fix atfork hanlder_mutex deadlock
    
    This cherry-picks commit 34e89c232dd5645fe3b5f9b40856d8e3e4cae57a
    
    After applying the kernel_id fix, the system refused to boot up and we
    got following crash log:
    I/DEBUG   (  113): pid: 618, tid: 618  >>> org.simalliance.openmobileapi.service:remote <<<
    I/DEBUG   (  113): signal 16 (SIGSTKFLT), code -6 (?), fault addr --------
    I/DEBUG   (  113):  eax fffffe00  ebx b77de994  ecx 00000080  edx 00724002
    I/DEBUG   (  113):  esi 00000000  edi 00004000
    I/DEBUG   (  113):  xcs 00000073  xds 0000007b  xes 0000007b  xfs 00000000 xss 0000007b
    I/DEBUG   (  113):  eip b7761351  ebp bfdf3de8  esp bfdf3dc4  flags 00000202
    I/DEBUG   (  113):     #00  eip: 00015351  /system/lib/libc.so
    I/DEBUG   (  113):     #01  eip: 0000d13c  /system/lib/libc.so (pthread_mutex_lock)
    I/DEBUG   (  113):     #02  eip: 00077b48  /system/lib/libc.so (__bionic_atfork_run_prepare)
    I/DEBUG   (  113):     #03  eip: 00052cdb  /system/lib/libc.so (fork)
    I/DEBUG   (  113):     #04  eip: 0009ae91  /system/lib/libdvm.so (_Z18dvmOptimizeDexFileillPKcjjb)
    I/DEBUG   (  113):     #05  eip: 000819d6  /system/lib/libdvm.so (_Z14dvmJarFileOpenPKcS0_PP7JarFileb)
    I/DEBUG   (  113):     #06  eip: 000b175e  /system/lib/libdvm.so (_ZL40Dalvik_dalvik_system_DexFile_openDexFilePKjP6JValue)
    I/DEBUG   (  113):     #07  eip: 0011fb94  /system/lib/libdvm.so
    
    Root cause:
    The atfork uses the mutex handler_mutex to protect the atfork_head. The
    parent will call __bionic_atfork_run_prepare() to lock the handler_mutex,
    and need both the parent and child to unlock their own copy of handler_mutex
    after fork. At that time, the owner of hanlder_mutex is set as the parent.
    If we apply the kernel_id fix, then the child's kernel_id will be set as
    child's tid.
    The handler_mutex is a recursive lock, and pthread_mutex_unlock(&hander_mutex)
    will fail because the mutex owner is the parent, while the current tid
    (__get_thread()->kernel_id) is child, not matched with the mutex owner.
    At that time, the handler_mutex is left in lock state.If the child wants to
    fork other process after than, then it will try to lock handler_mutex, and
    then be deadlocked.
    
    Fix:
    Since the child has its own copy of vm space from the the parent, the
    child space's handler_mutex should be reset to the initialized state.
    
    Change-Id: I3907dd9a153418fb78862f2aa6d0302c375d9e27
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Chenyang Du <chenyang.du@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    
    Change-Id: Ic8072f366a877443a60fe215f3c00b3df5a259c8
    Revert "am be741d47: am 2f460fbe: am 73b5cad9: Merge "bionic: Fix wrong kernel_id in pthread descriptor after fork()""
    
    This reverts commit 76d56cf4a94e875a8b621025e2780775247adb6e, reversing
    changes made to c59ba4595be25a1213955233fcf9bcd1afe6438e.
    
    Bug: 6157577
    bionic: Fix wrong kernel_id in pthread descriptor after fork()
    
    After forking, the kernel_id field in the phtread_internal_t returned by pthread_self()
    is incorrect --- it's the tid from the parent, not the new tid of the
    child.
    
    The root cause is that: currently the kernel_id is set by
    _init_thread(), which is called in 2 cases:
    (1) called by __libc_init_common(). That happens when the execv( ) is
    called after fork( ). But when the zygote tries to fork the android
    application, the child application doesn't call execv( ), instread, it
    tries to call the Java main method directly.
    (2) called by pthread_create(). That happens when a new thread is
    created.
    
    For the lead thread which is the thread created by fork(), it should
    call execv() but it doesn't, as described in (1) above. So its kernel_id
    will inherit the parent's kernel_id.
    
    Fixed it in this patch.
    
    Change-Id: I63513e82af40ec5fe51fbb69456b1843e4bc0fc7
    Signed-off-by: Chenyang Du <chenyang.du@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    libc: remove global lock from recursive mutex implementation.
    
    This optimization improves the performance of recursive locks
    drastically. When running the thread_stress program on a Xoom,
    the total time to perform all operations goes from 1500 ms to
    500 ms on average after this change is pushed to the device.
    
    Change-Id: I5d9407a9191bdefdaccff7e7edefc096ebba9a9d
    libc: Fix recursive mutex lock implementation.
    
    This fixes a bug that was introduced in the latest pthread optimization.
    It happens when a recursive lock is contented by several threads. The main
    issue was that the atomic counter increment in _recursive_increment() could
    be annihilated by a non-conditional write in pthread_mutex_lock() used to
    update the value's lower bits to indicate contention.
    
    This patch re-introduces the use of the global recursive lock in
    _recursive_increment(). This will hit performance, but a future patch
    will be provided to remove it from the source code.
    
    Change-Id: Ie22069d376cebf2e7d613ba00b6871567f333544
    implement pthread mutex deadlock detection
    
    this works by building a directed graph of acquired
    pthread mutexes and making sure there are no loops in
    that graph.
    
    this feature is enabled with:
    
        setprop debug.libc.pthread 1
    
    when a potential deadlock is detected, a large warning is
    output to the log with appropriate back traces.
    
    currently disabled at compile-time. set PTHREAD_DEBUG_ENABLED=1
    to enable.
    
    Change-Id: I916eed2319599e8aaf8f229d3f18a8ddbec3aa8a
    libc: optimize pthread mutex lock/unlock operations (1/2)
    
    This patch provides several small optimizations to the
    implementation of mutex locking and unlocking. Note that
    a following patch will get rid of the global recursion
    lock, and provide a few more aggressive changes, I
    though it'd be simpler to split this change in two parts.
    
    + New behaviour: pthread_mutex_lock et al now detect
      recursive mutex overflows and will return EAGAIN in
      this case, as suggested by POSIX. Before, the counter
      would just wrap to 0.
    
    - Remove un-necessary reloads of the mutex value from memory
      by storing it in a local variable (mvalue)
    
    - Remove un-necessary reload of the mutex value by passing
      the 'shared' local variable to _normal_lock / _normal_unlock
    
    - Remove un-necessary reload of the mutex value by using a
      new macro (MUTEX_VALUE_OWNER()) to compare the thread id
      for recursive/errorcheck mutexes
    
    - Use a common inlined function to increment the counter
      of a recursive mutex. Also do not use the global
      recursion lock in this case to speed it up.
    
    Change-Id: I106934ec3a8718f8f852ef547f3f0e9d9435c816
    libc: optimize pthread_once() implementation.
    
    This patch changes the implementation of pthread_once()
    to avoid the use of a single global recursive mutex. This
    should also slightly speed up the non-common case where
    we have to call the init function, or wait for another
    thread to finish the call.
    
    Change-Id: I8a93f4386c56fb89b5d0eb716689c2ce43bdcad9
    signal: Align the sigset_t size passed to from user space to kernel.
    
    Pass kernel space sigset_t size to __rt_sigprocmask to workaround
    the miss-match of NSIG/sigset_t definition between kernel and bionic.
    
    Note: Patch originally from Google...
    Change-Id: I4840fdc56d0b90d7ce2334250f04a84caffcba2a
    Signed-off-by: Chenyang Du <chenyang.du@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    bionic: fix pthread_{create, exit}/signal race condition
    
    (1) in pthread_create:
        If the one signal is received before esp is subtracted by 16 and
        __thread_entry( ) is called, the stack will be cleared by kernel
        when it tries to contruct the signal stack frame. That will cause
        that __thread_entry will get a wrong tls pointer from the stack
        which leads to the segment fault when trying to access tls content.
    
    (2) in pthread_exit
        After pthread_exit called system call unmap(), its stack will be
        freed.  If one signal is received at that time, there is no stack
        available for it.
    
    Fixed by subtracting the child's esp by 16 before the clone system
    call and by blocking signal handling before pthread_exit is started.
    
    Author: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Add tgkill syscall.
    
    Use tgkill instead of tkill to implement pthread_kill.
    This is safer in the event that the thread has already terminated
    and its id has been reused by a different process.
    
    Change-Id: Ied715e11d7eadeceead79f33db5e2b5722954ac9
    ASLR: enable pthread stack location randomization
    
    Allow the kernel to choose a memory location to put the
    thread stack, rather than hard coding 0x10000000
    
    Change-Id: Ib1f37cf0273d4977e8d274fbdab9431ec1b7cb4f
    bionic: Do not use <sys/atomics.h> for platform code.
    
    We're going to modify the __atomic_xxx implementation to provide
    full memory barriers, to avoid problems for NDK machine code that
    link to these functions.
    
    First step is to remove their usage from our platform code.
    We now use inlined versions of the same functions for a slight
    performance boost.
    
    + remove obsolete atomics_x86.c (was never compiled)
    
    NOTE: This improvement was benchmarked on various devices.
          Comparing a pthread mutex lock + atomic increment + unlock
          we get:
    
      - ARMv7 emulator, running on a 2.4 GHz Xeon:
           before: 396 ns    after: 288 ns
    
      - x86 emulator in KVM mode on same machine:
           before: 27 ns     after: 27 ns
    
      - Google Nexus S, in ARMv7 mode (single-core):
           before: 82 ns     after: 76 ns
    
      - Motorola Xoom, in ARMv7 mode (multi-core):
           before: 121 ns    after: 120 ns
    
    The code has also been rebuilt in ARMv5TE mode for correctness.
    
    Change-Id: Ic1dc72b173d59b2e7af901dd70d6a72fb2f64b17
    libc: fix the pthread_sigmask implementation
    
    The old code didn't work because the kernel expects a 64-bit sigset_t
    while the one provided by our ABI is only 32-bit. This is originally
    due to the fact that the kernel headers themselves define sigset_t
    as a 32-bit type when __KERNEL__ is not defined (apparently to cater
    to libc5 or some similarly old C library).
    
    We can't modify the size of sigset_t without breaking the NDK ABI,
    so instead perform runtime translation during the call.
    
    Change-Id: Ibfdc3cbceaff864af7a05ca193aa050047b4773f
    Add non-NDK internal API __pthread_gettid
    
    Tracking bugs 5267571 and 5090073 (for deadlock detection logs).
    
    Change-Id: Icb90f91ec1525607551c2234ef921bf88296484f
    bionic, libthread_db x86 fixes
    
    Orig-Change-Id: I3be997f5f1f6a894a3c200d4f325cf3bfd428c66
    Author: James Rose <james.rose@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    bionic, libthread_db x86 fixes
    
    Change-Id: I3be997f5f1f6a894a3c200d4f325cf3bfd428c66
    Author: James Rose <james.rose@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    libc: Fix the definition of SIGRTMAX
    
    After this change, SIGRTMAX will be set to 64 (instead of 32 currently).
    Note that this doesn't change the fact that our sigset_t is still defined
    as a 32-bit unsigned integer, so most functions that deal with this type
    won't support real-time signals though.
    
    Change-Id: Ie1e2f97d646f1664f05a0ac9cac4a43278c3cfa8
    Add memory barriers to pthread_once.
    
    The implementation was using a double-checked locking approach that
    could break on SMP.
    
    In addition to the barriers I also switched to a volatile pointer.  I
    don't think this will matter unless gcc can conclude that _normal_lock
    can't affect *once_control, but I figured it was better to be safe.
    (It seems to have no impact whatsoever on the generated code.)
    
    Bug 3022795.
    
    Change-Id: Ib91da25d57ff5bee4288526e39d457153ef6aacd
    Use a recursive lock for pthread_once. DO NOT MERGE.
    
    Backport change I9fc8b790 from Master to Gingerbread
    
    Change-Id: I5cf48fcd4efb7991ed82f87d9365c19655dc9b7f
    Add a memory barrier to cond var signaling.
    
    This adds an explicit memory barrier to condition variable signaling.
    It's a little murky as to whether it's strictly required, but it seems
    like a wise thing to do.
    
    Change-Id: Id0faa542d61e4b8ffa775e4adf68e4d7471f4fb7
    libc: add sanity checks to pthread_mutex_destroy()
    
    Change-Id: Iddb2204fa792fa9aca5f19838926dddbb09b74a2
    Use a recursive lock for pthread_once.
    
    bug: 2292366
    Change-Id: I9fc8b790dcfcb30ca94a0beb340d43fe5cd6c22e
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    libc: remove cutils dependencies
    
    We simply copy the stuff we need from cutils headers.
    
    A future patch will change cutils to include the private <bionic_atomic_inline.h>
    
    Change-Id: Ib6fd9a03bc9e337ce867bd606dc94c2b4438480a
    Use private futexes for semaphores, unless they are initialized with pshared != 0.
    
    Change-Id: I534e36a7171cd37037ae03b910ba71ea6968286d
    Note: previously, sem_init() would return an error if pshared != 0.
    Atomic/SMP update, part 3.  (manual merge)
    
    Update ARM atomic ops to use LDREX/STREX.  Stripped out #if 0 chunk.
    
    Insert explicit memory barriers in pthread and semaphore code.
    
    For bug 2721865.
    
    Change-Id: I595cc8e5a8d1e4906b6641115e46208a7e9e755a
    Atomic/SMP update, part 3.
    
    Update ARM atomic ops to use LDREX/STREX.  Stripped out #if 0 chunk.
    
    Insert explicit memory barriers in pthread and semaphore code.
    
    For bug 2721865.
    
    Change-Id: I0f153b797753a655702d8be41679273d1d5d6ae7
    pthread: introduce pthread_setname_np() as a mean to give names to threads
    
    ... so that each cloned process at the kernel level can be named
    independently. Tools like 'top' can display the CPU/memory statistics
    for each process's thread if "Show Threads" mode is on.
    
    With this function in place, we can convert dalvik/Thread.c setThreadName()
    function over this function. This feature ought to be provided by the
    underlying C library and not coded directly in Dalvik.
    
    Change-Id: Ifa997665dbaa114e0b126f8c667708be9a4137fd
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    Fix typo that broke recursive mutexes implementation.
    
    Change-Id: I832901604b487c6a50304c311b5ba135e153530d
    pthread: Use private futexes by default in condition variables
    
    Now that the system properly uses shared condvars when needed, we
    can enable the use of private futexes for them too.
    
    Change-Id: Icf8351fc0a2309f764cba45c65bc3af047720cdf
    Use private futexes for pthread_mutex_t.
    
    This does not change the implementation of conditional variables
    since we're waiting for other system components to properly use
    pthread_condattr_init/setpshared before that.
    
    Also remove an obsolete x86 source file.
    
    Change-Id: Ia3e3fbac35b87a534fb04d4381c3c66b975bc8f7
    Add pthread_condattr_init/destroy/setpshared/getpshared
    
    Note that this does not change the implementation of conditional variables
    which still use shared futexes, independent on the flags being selected.
    
    This will be fixed in a later patch, once our system is modified to use
    pthread_condattr_setpshared(attr, PTHREAD_PROCESS_SHARED) properly.
    
    Change-Id: I935de50964cd41f97a13dbfd6626d3407b0406c3
    Fix indentation in pthread mutex implementation.
    
    This is preliminary work to simplify later changes to support
    private futexes.
    
    Change-Id: I06750936a93747a5e3f5a10228cbdc29e39c528c
    Revert "bionic: pthread: use private futexes by default for mutexes and condvars"
    
    This reverts commit ba9c6f0989ae94778ba2b9f597adc827c9dc81e8.
    bionic: pthread: use private futexes by default for mutexes and condvars
    
    Private futexes are a recent kernel addition: faster futexes that cannot be
    shared between processes. This patch uses them by default, unless the PROCESS_SHARED
    attribute flag is used when creating a mutex and/or conditional variable.
    
    Also introduces pthread_condattr_init/destroy/setpshared/getpshared.
    
    Change-Id: I3a0e2116f467072b046524cb5babc00e41057a53
    Fix pthread_sigmask() to return correct error values.
    
    Before that, it returned -1 on error and set errno (not Posix)
    After the patch, it returns the error code and leaves errno untouched.
    bionic: on pthread_join(), avoid extra check in case we find the thread
    
    ... by using similar logic as used in pthread_detach().
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    eclair snapshot
    Fix a typo that resulted in a crash in the boot sequence
    Add pthread_mutex_lock_timeout_np
    
    This is used to perform a mutex lock for a given amount of
    milliseconds before giving up. Using the _np prefix since this
    is absolutely not portable.
    
    Also remove a compiler warning in pthread_attr_getstackaddr
    Remove code duplication for pthread_cond_timeout_np : use __pthread_cond_timedwait_relative helper
    allow pthread_mutexattr_setpshared to accept SHARED mutexes, since our current impl actually uses shared mutexes
    added pthread_cond_timedwait_relative_np()
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add pthread_rwlock_t implementation to the C library (DO NOT MERGE)
    
    Change-Id: I756d8c26afc37cd7b71117ddbaa02a2cb40fdecb
    Add pthread_rwlock_t implementation to the C library
    
    Change-Id: I14d0a112554756a7294a51fe88c1c408a16b5ff1
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    Add fts, err, and sys/queue for grep
    
    Change-Id:      Id47514a1812d828e95efa2fab0e9c15c5b682b58
    Remove duplicated _rand48 implementation. Use stdlib version instead
    
    Originally, there are _rand48 (in libc/bionic/_rand48.c) and __rand48
    (in libc/stdlib/_rand48.c) implemented in bionic.  Besides the naming,
    the functionality is identical.  This patch removes the duplicated
    _rand48.  Also, drand48 and erand48 are modified accordingly.
    
    Change-Id: Ie5761a0a97f45df8538222a77edacb7c3e0125d7
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Make strerror(3) and strsignal(3) thread-safe, and add psignal(3) and psiginfo(3).
    
    Change-Id: I426109db25e907980d6cb3a7a695796e45783b78
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    eclair snapshot
    Make IPv6 definitions comply with RFC 3493:
     - Add some definitions to netinet/in6.h
     - Include netinet/in6.h from netinet/in.h
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    __set_errno: Hide internal symbol __set_syscall_errno
    
    Change-Id: I21e7ef6bf0bca288069275add43bd53294c0760d
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Clean up warnings in the malloc_debug_* files.
    
    Also clean up cpplint.py-detected lint.
    
    Change-Id: Ia18e89c4c6878764f8d7ed34b8247e7a8d8fe88b
    bionic: import heaptracker as chk_malloc
    
    This patch is a rewrite of libc.debug.malloc = 10 (chk_malloc).  It provides
    the same features as the original (poison freed memory, detect heap overruns
    and underruns), except that it provides more debugging information whenever it
    detects a problem.
    
    In addition to the original features, the new chk_malloc() implementation
    detects multiple frees within a given range of the last N allocations, N being
    configurable via the system property libc.debug.malloc.backlog.
    
    Finally, this patch keeps track of all outstanding memory allocations.  On
    program exit, we walk that list and report each outstanding allocation.
    
    (There is support (not enabled) for a scanner thread periodically walks over
    the list of outstanding allocations as well as the backlog of recently-freed
    allocations, checking for heap-usage errors.)
    
    Feature overview:
    
      1) memory leaks
      2) multiple frees
      3) use after free
      4) overrun
    
    Implementation:
    
    -- for each allocation, there is a:
      1) stack trace at the time the allocation is made
      2) if the memory is freed, there is also a stack trace at the point
      3) a front and rear guard (fence)
      4) the stack traces are kept together with the allocation
    
    -- the following lists and maintained
    
      1) all outstanding memory allocations
      3) a backlog of allocations what are freed; when you call free(), instead of
         actually freed, the allocation is moved to this backlog;
      4) when the backlog of allocations gets full, the oldest entry gets evicted
         from it; at that point, the allocation is checked for overruns or
         use-after-free errors, and then actually freed.
      5) when the program exits, the list of outstanding allocations and the
         backlog are inspected for errors, then freed;
    
    To use this, set the following system properties before running the process or
    processes you want to inspect:
    
    libc.malloc.debug.backlog # defaults to 100
    libc.malloc.debug 10
    
    When a problem is detected, you will see the following on logcat for a multiple
    free:
    
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 BYTES MULTIPLY FREED!
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 4009647c  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 FIRST FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096490  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 NOW BEING FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c6ac  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964a0  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    
    The following for a heap overrun and underrun:
    
    E/libc    ( 7233): +++ REAR GUARD MISMATCH [10, 11)
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 HAS A CORRUPTED REAR GUARD
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096438  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096462  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 HAS A CORRUPTED FRONT GUARD
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964ba  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964e4  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    
    The following for a memory leak:
    
    E/libc    ( 7233): +++ THERE ARE 1 LEAKED ALLOCATIONS
    E/libc    ( 7233): +++ DELETING 4096 BYTES OF LEAKED MEMORY AT 0x404b95e8 (1 REMAINING)
    E/libc    ( 7233): +++ ALLOCATION 0x404b95e8 SIZE 4096 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 0001bc94  /system/lib/libc.so
    E/libc    ( 7233):      #04  pc 0001edf6  /system/lib/libc.so
    E/libc    ( 7233):      #05  pc 0001b80a  /system/lib/libc.so
    E/libc    ( 7233):      #06  pc 0001c086  /system/lib/libc.so
    E/libc    ( 7233):      #07  pc 40096402  /system/bin/malloctest
    E/libc    ( 7233):      #08  pc 00016f24  /system/lib/libc.so
    
    Change-Id: Ic440e9d05a01e2ea86b25e8998714e88bc2d16e0
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Merge memory checking functionality from sandbox
    
    Change-Id: I304c789a752c9f4af4944ca14b9bf1e7644da15a
    Split libc_debug.so into two .so modules loaded on demand from libc.so
    
    This change is intended to eliminate need to replace libc.so with libc_debug.so in order to enablememory allocation debugging.
    This is also the first step towards implementing extended memoryallocation debugging using emulator's capabilities in monitoring memory access.
    Correction to use of TEMP_FAILURE_RETRY in send_prop_msg
    
    RETRY macro may retry command if result is -1. In this
    case the command was "connect < 0" instead of just
    connect. The comparison will not return -1 and thus
    retry is never done. This is now corrected so that
    interrupts will cause retry instead of fail.
    
    (There was no other negative side effect of the bug.
    The result code from RETRY was used in an if-statement
    and it would be true for all negative connect results.
    This was according to expectations.)
    
    Change-Id: Ie206b39878e9befea4e3be9a4061ee39eb232d80
    Ignore property set timeouts.
    
    Change-Id: Ic3f6119398368ba047736370336d0260905abd40
    Don't futex_wait spin when setting properties. Wait for socket close.
    
    Depends on init change I8dd685ea
    
    Bug: 4185486
    Change-Id: I5a2dbc3b7be1759212d4a3988d9033b9b947a1db
    Don't futex_wait spin when setting properties. Wait for socket close.
    
    Depends on init change I8dd685ea
    
    Bug: 4185486
    Change-Id: I3e80cecfad8e072973003ec6f93146c5cad369ac
    do not merge. Move property setting from libcutils to bionic.
    
    Backport I110b653a58f3
    
    All the other property stuff is already here.  Property setting was
    only in libcutils previously to leverage a utility function / constant
    or two.
    
    Unfortunately in the process of fixing a race condition we would've
    had to do break abstraction boundaries and put some libc-internal
    details into libcutils so instead of that we'll just move this
    into bionic.
    
    Along with Iee1ca9b7, this now passes:
    
    $ adb shell am instrument -w -e class android.os.SystemPropertiesTest \
      com.android.frameworks.coretests.systemproperties/android.test.InstrumentationTestRunner
    
      Bug: 3511230
    
    Change-Id: I1b588db3344169621e1279ecc0b660cf4e1015d7
    do not merge. Move property setting from libcutils to bionic.
    
    Backport I110b653a58f3
    
    All the other property stuff is already here.  Property setting was
    only in libcutils previously to leverage a utility function / constant
    or two.
    
    Unfortunately in the process of fixing a race condition we would've
    had to do break abstraction boundaries and put some libc-internal
    details into libcutils so instead of that we'll just move this
    into bionic.
    
    Along with Iee1ca9b7, this now passes:
    
    $ adb shell am instrument -w -e class android.os.SystemPropertiesTest \
      com.android.frameworks.coretests.systemproperties/android.test.InstrumentationTestRunner
    
      Bug: 3511230
    
    Change-Id: I1b588db3344169621e1279ecc0b660cf4e1015d7
    Move property setting from libcutils to bionic.
    
    All the other property stuff is already here.  Property setting was
    only in libcutils previously to leverage a utility function / constant
    or two.
    
    Unfortunately in the process of fixing a race condition we would've
    had to do break abstraction boundaries and put some libc-internal
    details into libcutils so instead of that we'll just move this
    into bionic.
    
    Along with Iee1ca9b7, this now passes:
    
    $ adb shell am instrument -w -e class android.os.SystemPropertiesTest \
      com.android.frameworks.coretests.systemproperties/android.test.InstrumentationTestRunner
    
    Bug: 3511230
    Change-Id: I110b653a58f312fbe069dca59892a877ae9bc911
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    <sched.h>: Add sched_getcpu() and cpu_set_t
    
    This adds the cpu_set_t type definition and related functions
    and macros used to handle CPU thread affinity.
    
      sched_getcpu()
      sched_setaffinity()
      sched_getaffinity()
    
    Change-Id: If382ecafde8926341a88478062b275553645065b
    Add support for pread64/pwrite64
    
    64-bit pread() and pwrite() is needed for ZipFileRO to be able to read
    ludicrously large ZIP files just in case someone is crazy enough to do
    it.
    
    Also fix a license header that was apparently mangled.
    
    Change-Id: I6819ef8b36e46b63b40749c95717b1ecf9307033
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    bonic: libc: cpuacct support for setuid functions
    
    Any of the setuid functions now updates /acct/uid/ with its own tid
    before changing users. This is so we can properly account for cpu time
    per uid.
    
    Change-Id: I34186cf4d5228cac8439e582a9e26c01ef3011e4
    Signed-off-by: Mike Chan <mike@android.com>
    Add implementation of fdprintf, clearenv, and stubs for ttyname_r, *usershell
    
    Change-Id:      I5fe7e8b6ee5edbb49e707c3b6737a58563781fa3
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    New additions/bug fixes required/found when porting perf.
    
    New functions:
            tfind
            tsearch
            tdelete
            twalk
            tdestroy (GNU extension)
    
    Bug fix: the current implementation for realpath would crash
            if the second argument (resolved_path) is NULL.
    
    New headers:
            ar.h
            search.h
    
    Change-Id: Ib6c1e42fc186a6d597a6e5a9692b16acaa155804
    Use a modern chdir(2)-free realpath(3) implementation.
    
    (This is the current OpenBSD implementation.)
    
    Bug: 3055824, 2281992
    Change-Id: Iafa8f78e8d6e44c036a547c7210a13d559b7483a
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    bionic: ftell() returns a long, not an int
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    [ENDIAN] Build md5 code correctly for bigendian targets
    
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Bug 3330205 Reentrant MD5
    
    Change-Id: I4c8e4a8f3ef4cdaac50f32d9e55accb16133ab35
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Avoid malloc lock while calling pthread_atfork.
    
    Expecting the memory in a forked child process to be sane wrt threading
    is a bad idea. An example of a problem is when the parent process has
    the malloc lock and a child process is forked. The malloc lock in the
    child will appear locked by a thread that doesn't exist.
    
    This change aims to make bionic more compatible with glibc by reseting
    the malloc lock in the child forked process, as well as holding it
    during the fork. This is a feature in dlmalloc 2.8.6 called
    LOCK_AT_FORK. In general this feature isn't necessary as a forked
    process will then exec. Some bad applications rely on being able to use
    features like malloc before the exec and having multiple threads running
    in the parent program. This isn't a problem with glibc and this patch
    makes it not a problem for bionic.
    
    Unfortunately for use in bionic, LOCK_AT_FORK has an issue as internally
    it uses pthread_atfork that in bionic uses malloc. This leads to the
    LOCK_AT_FORK initialization deadlocking with pthread_atfork's call to
    malloc due to the malloc lock. This change moves the pthread_atfork logic
    in LOCK_AT_FORK to be called without the malloc lock held.
    
    Change-Id: Id68175a564a6abb936ee4488b44d9479f7311f69
    Upgrade to dlmalloc 2.8.6.
    
    This fixes a bug and enables the use of MORECORE_CONTIGUOUS.
    
    Change-Id: Ia7c5d32bdc46e99b3ecb92ee94d1f702c4385d5d
    Revert "Revert "Upgrade to dlmalloc 2.8.5.""
    
    This reverts commit f72ee269274170cd46af2844a2fe88767fb6e43c.
    Revert "Upgrade to dlmalloc 2.8.5."
    
    This reverts commit 999089181ef60bb67e1a49f2cf6f4ec608a7caf8.
    Revert "Upgrade to dlmalloc 2.8.5."
    
    This reverts commit 999089181ef60bb67e1a49f2cf6f4ec608a7caf8.
    Upgrade to dlmalloc 2.8.5.
    
    Move dlmalloc code to upstream-dlmalloc to make pulling upstream changes
    easier.
    Declare pvalloc and malloc_usable_size routines present in malloc.h but with
    missing implementations. Remove other functions from malloc.h that have
    no implementation nor use in Android.
    
    Change-Id: Ia6472ec6cbebc9ad1ef99f4669de9d33fcc2efb4
    Split libc_debug.so into two .so modules loaded on demand from libc.so
    
    This change is intended to eliminate need to replace libc.so with libc_debug.so in order to enablememory allocation debugging.
    This is also the first step towards implementing extended memoryallocation debugging using emulator's capabilities in monitoring memory access.
    eclair snapshot
    Add mspace_merge_objects
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Switch to upstream NetBSD tdelete/tfind/tsearch.
    
    tdestroy is a GNU extension, so that stays.
    
    Change-Id: Iedebaff25ea7e92b1ab1dd4440da12b67b99aa40
    New additions/bug fixes required/found when porting perf.
    
    New functions:
            tfind
            tsearch
            tdelete
            twalk
            tdestroy (GNU extension)
    
    Bug fix: the current implementation for realpath would crash
            if the second argument (resolved_path) is NULL.
    
    New headers:
            ar.h
            search.h
    
    Change-Id: Ib6c1e42fc186a6d597a6e5a9692b16acaa155804
    <time.h>: Add timegm(), timelocal() and others.
    
    Add timegm(), timelocal(), time2posix() and posix2time() to the
    C library.
    
    Change-Id: I34d5771ed83dd994870a5ca58a511d01898b1ffb
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Remove duplicated _rand48 implementation. Use stdlib version instead
    
    Originally, there are _rand48 (in libc/bionic/_rand48.c) and __rand48
    (in libc/stdlib/_rand48.c) implemented in bionic.  Besides the naming,
    the functionality is identical.  This patch removes the duplicated
    _rand48.  Also, drand48 and erand48 are modified accordingly.
    
    Change-Id: Ie5761a0a97f45df8538222a77edacb7c3e0125d7
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Don't corrupt the thread list in static executables.
    
    Several previous changes conspired to make a mess of the thread list
    in static binaries. This was most obvious when trying to call
    pthread_key_delete(3) on the main thread.
    
    Bug: http://code.google.com/p/android/issues/detail?id=36893
    Change-Id: I2a2f553114d8fb40533c481252b410c10656da2e
    bionic: import heaptracker as chk_malloc
    
    This patch is a rewrite of libc.debug.malloc = 10 (chk_malloc).  It provides
    the same features as the original (poison freed memory, detect heap overruns
    and underruns), except that it provides more debugging information whenever it
    detects a problem.
    
    In addition to the original features, the new chk_malloc() implementation
    detects multiple frees within a given range of the last N allocations, N being
    configurable via the system property libc.debug.malloc.backlog.
    
    Finally, this patch keeps track of all outstanding memory allocations.  On
    program exit, we walk that list and report each outstanding allocation.
    
    (There is support (not enabled) for a scanner thread periodically walks over
    the list of outstanding allocations as well as the backlog of recently-freed
    allocations, checking for heap-usage errors.)
    
    Feature overview:
    
      1) memory leaks
      2) multiple frees
      3) use after free
      4) overrun
    
    Implementation:
    
    -- for each allocation, there is a:
      1) stack trace at the time the allocation is made
      2) if the memory is freed, there is also a stack trace at the point
      3) a front and rear guard (fence)
      4) the stack traces are kept together with the allocation
    
    -- the following lists and maintained
    
      1) all outstanding memory allocations
      3) a backlog of allocations what are freed; when you call free(), instead of
         actually freed, the allocation is moved to this backlog;
      4) when the backlog of allocations gets full, the oldest entry gets evicted
         from it; at that point, the allocation is checked for overruns or
         use-after-free errors, and then actually freed.
      5) when the program exits, the list of outstanding allocations and the
         backlog are inspected for errors, then freed;
    
    To use this, set the following system properties before running the process or
    processes you want to inspect:
    
    libc.malloc.debug.backlog # defaults to 100
    libc.malloc.debug 10
    
    When a problem is detected, you will see the following on logcat for a multiple
    free:
    
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 BYTES MULTIPLY FREED!
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 4009647c  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 FIRST FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096490  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 NOW BEING FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c6ac  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964a0  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    
    The following for a heap overrun and underrun:
    
    E/libc    ( 7233): +++ REAR GUARD MISMATCH [10, 11)
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 HAS A CORRUPTED REAR GUARD
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096438  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096462  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 HAS A CORRUPTED FRONT GUARD
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964ba  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964e4  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    
    The following for a memory leak:
    
    E/libc    ( 7233): +++ THERE ARE 1 LEAKED ALLOCATIONS
    E/libc    ( 7233): +++ DELETING 4096 BYTES OF LEAKED MEMORY AT 0x404b95e8 (1 REMAINING)
    E/libc    ( 7233): +++ ALLOCATION 0x404b95e8 SIZE 4096 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 0001bc94  /system/lib/libc.so
    E/libc    ( 7233):      #04  pc 0001edf6  /system/lib/libc.so
    E/libc    ( 7233):      #05  pc 0001b80a  /system/lib/libc.so
    E/libc    ( 7233):      #06  pc 0001c086  /system/lib/libc.so
    E/libc    ( 7233):      #07  pc 40096402  /system/bin/malloctest
    E/libc    ( 7233):      #08  pc 00016f24  /system/lib/libc.so
    
    Change-Id: Ic440e9d05a01e2ea86b25e8998714e88bc2d16e0
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Initialize TLS before any application code is run.
    
    Since e19d702b8e33, dlsym and friends use recursive mutexes that
    require the current thread id, which is not available before the libc
    constructor. This prevents us from using dlsym() in .preinit_array.
    
    This change moves TLS initialization from libc constructor to the earliest
    possible point - immediately after linker itself is relocated. As a result,
    pthread_internal_t for the initial thread is available from the start.
    
    As a bonus, values stored in TLS in .preinit_array are not lost when libc is
    initialized.
    
    Change-Id: Iee5a710ee000173bff63e924adeb4a4c600c1e2d
    libc: fix executable destruction support.
    
    This change allows an executable to call its destructor functions
    (declared with __attribute__((destructor))) to be properly called
    when it normally exits.
    
    Note that this is different from calling the destructors of a shared
    library when it is unloaded with dlclose() or through program exit,
    which are already supported.
    
    Bug: 3106500
    Change-Id: I1412ef5407f13b613fc6cb6103e0a691dbee4b1a
    Change-Id: I68cc462aeb2460345a53bdb9941ce4bfc10456fb
    bionic: fix clearenv() compiler warning and related comment typos
    Restore malloc debug.
    
    Some libc changes were preventing the initialization call from being made.
    The basic problem appears to be that libc_init_common.c is only built once,
    and it's only built for the non-debug libc.
    Fix the C library runtime initialization order.
    
    This allows libc.so to run the C runtime initializer as soon as the
    dynamic linker loads the shared library, i.e. before any other initializers
    (e.g. static C++ constructors in other shared libraries the executable depends
    on).
    
    This also removes the bug where the initializers from the executable itself
    were run twice: once by the dynamic linker, and another time by __libc_init
    as defined by libc_init_dynamic.c
    Revert "Fix the C library initialization to avoid calling static C++ constructors twice."
    
    This reverts commit 03eabfe65e1e2c36f4d26c78a730fa19a3bdada3.
    Fix the C library initialization to avoid calling static C++ constructors twice.
    
    The problem was due to the fact that, in the case of dynamic executables,
    the dynamic linker calls the DT_PREINIT_ARRAY, DT_INIT and DT_INIT_ARRAY
    constructors when loading shared libraries and dynamic executables,
    *before* calling the executable's entry point (i.e. arch-$ARCH/bionic/crtbegin_dynamic.c)
    which in turns call __libc_init() in libc.so, as defined by bionic/libc_init_dynamic.c
    
    The latter did call these constructors array again, mistakenly.
    
    The patch also updates the documentation of many related functions.
    
    Also adds a new section to linker/README.TXT explaining restrictions on
    C library usage.
    
    The patch has been tested on a Dream for stability issues with
    proprietary blobs:
    
    - H264 decoding works
    - Camera + Video recording works
    - GPS works
    - Sensors work
    
    The tests in system/extra/tests/bionic/libc/common/test_static_cpp_mutex.cpp has been
    run and shows the static C++ constructor being called only once.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    bionic: import heaptracker as chk_malloc
    
    This patch is a rewrite of libc.debug.malloc = 10 (chk_malloc).  It provides
    the same features as the original (poison freed memory, detect heap overruns
    and underruns), except that it provides more debugging information whenever it
    detects a problem.
    
    In addition to the original features, the new chk_malloc() implementation
    detects multiple frees within a given range of the last N allocations, N being
    configurable via the system property libc.debug.malloc.backlog.
    
    Finally, this patch keeps track of all outstanding memory allocations.  On
    program exit, we walk that list and report each outstanding allocation.
    
    (There is support (not enabled) for a scanner thread periodically walks over
    the list of outstanding allocations as well as the backlog of recently-freed
    allocations, checking for heap-usage errors.)
    
    Feature overview:
    
      1) memory leaks
      2) multiple frees
      3) use after free
      4) overrun
    
    Implementation:
    
    -- for each allocation, there is a:
      1) stack trace at the time the allocation is made
      2) if the memory is freed, there is also a stack trace at the point
      3) a front and rear guard (fence)
      4) the stack traces are kept together with the allocation
    
    -- the following lists and maintained
    
      1) all outstanding memory allocations
      3) a backlog of allocations what are freed; when you call free(), instead of
         actually freed, the allocation is moved to this backlog;
      4) when the backlog of allocations gets full, the oldest entry gets evicted
         from it; at that point, the allocation is checked for overruns or
         use-after-free errors, and then actually freed.
      5) when the program exits, the list of outstanding allocations and the
         backlog are inspected for errors, then freed;
    
    To use this, set the following system properties before running the process or
    processes you want to inspect:
    
    libc.malloc.debug.backlog # defaults to 100
    libc.malloc.debug 10
    
    When a problem is detected, you will see the following on logcat for a multiple
    free:
    
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 BYTES MULTIPLY FREED!
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 4009647c  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 FIRST FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096490  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 NOW BEING FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c6ac  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964a0  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    
    The following for a heap overrun and underrun:
    
    E/libc    ( 7233): +++ REAR GUARD MISMATCH [10, 11)
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 HAS A CORRUPTED REAR GUARD
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096438  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096462  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 HAS A CORRUPTED FRONT GUARD
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964ba  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964e4  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    
    The following for a memory leak:
    
    E/libc    ( 7233): +++ THERE ARE 1 LEAKED ALLOCATIONS
    E/libc    ( 7233): +++ DELETING 4096 BYTES OF LEAKED MEMORY AT 0x404b95e8 (1 REMAINING)
    E/libc    ( 7233): +++ ALLOCATION 0x404b95e8 SIZE 4096 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 0001bc94  /system/lib/libc.so
    E/libc    ( 7233):      #04  pc 0001edf6  /system/lib/libc.so
    E/libc    ( 7233):      #05  pc 0001b80a  /system/lib/libc.so
    E/libc    ( 7233):      #06  pc 0001c086  /system/lib/libc.so
    E/libc    ( 7233):      #07  pc 40096402  /system/bin/malloctest
    E/libc    ( 7233):      #08  pc 00016f24  /system/lib/libc.so
    
    Change-Id: Ic440e9d05a01e2ea86b25e8998714e88bc2d16e0
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    implement pthread mutex deadlock detection
    
    this works by building a directed graph of acquired
    pthread mutexes and making sure there are no loops in
    that graph.
    
    this feature is enabled with:
    
        setprop debug.libc.pthread 1
    
    when a potential deadlock is detected, a large warning is
    output to the log with appropriate back traces.
    
    currently disabled at compile-time. set PTHREAD_DEBUG_ENABLED=1
    to enable.
    
    Change-Id: I916eed2319599e8aaf8f229d3f18a8ddbec3aa8a
    libc: fix executable destruction support.
    
    This change allows an executable to call its destructor functions
    (declared with __attribute__((destructor))) to be properly called
    when it normally exits.
    
    Note that this is different from calling the destructors of a shared
    library when it is unloaded with dlclose() or through program exit,
    which are already supported.
    
    Bug: 3106500
    Change-Id: I1412ef5407f13b613fc6cb6103e0a691dbee4b1a
    Change-Id: I68cc462aeb2460345a53bdb9941ce4bfc10456fb
    bionic: fix clearenv() compiler warning and related comment typos
    Split libc_debug.so into two .so modules loaded on demand from libc.so
    
    This change is intended to eliminate need to replace libc.so with libc_debug.so in order to enablememory allocation debugging.
    This is also the first step towards implementing extended memoryallocation debugging using emulator's capabilities in monitoring memory access.
    Restore malloc debug.
    
    Some libc changes were preventing the initialization call from being made.
    The basic problem appears to be that libc_init_common.c is only built once,
    and it's only built for the non-debug libc.
    Fix the C library runtime initialization order.
    
    This allows libc.so to run the C runtime initializer as soon as the
    dynamic linker loads the shared library, i.e. before any other initializers
    (e.g. static C++ constructors in other shared libraries the executable depends
    on).
    
    This also removes the bug where the initializers from the executable itself
    were run twice: once by the dynamic linker, and another time by __libc_init
    as defined by libc_init_dynamic.c
    Revert "Fix the C library initialization to avoid calling static C++ constructors twice."
    
    This reverts commit 03eabfe65e1e2c36f4d26c78a730fa19a3bdada3.
    Fix the C library initialization to avoid calling static C++ constructors twice.
    
    The problem was due to the fact that, in the case of dynamic executables,
    the dynamic linker calls the DT_PREINIT_ARRAY, DT_INIT and DT_INIT_ARRAY
    constructors when loading shared libraries and dynamic executables,
    *before* calling the executable's entry point (i.e. arch-$ARCH/bionic/crtbegin_dynamic.c)
    which in turns call __libc_init() in libc.so, as defined by bionic/libc_init_dynamic.c
    
    The latter did call these constructors array again, mistakenly.
    
    The patch also updates the documentation of many related functions.
    
    Also adds a new section to linker/README.TXT explaining restrictions on
    C library usage.
    
    The patch has been tested on a Dream for stability issues with
    proprietary blobs:
    
    - H264 decoding works
    - Camera + Video recording works
    - GPS works
    - Sensors work
    
    The tests in system/extra/tests/bionic/libc/common/test_static_cpp_mutex.cpp has been
    run and shows the static C++ constructor being called only once.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: remove ctors/dtors sections
    
    None of the supported ARCHs actually populate these sections,
    so there is no point in keeping them in the binaries.
    
    Change-Id: I21a364f510118ac1114e1b49c53ec8c895c6bc6b
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@gmail.com>
    Updated gcc 4.4.3 IA toolchain doesn't require the .ctors list
    
    Orig-Change-Id: Ia840a19a45257128eccdcf25d105f500f2d90741
    Signed-off-by: H.J. Lu <hjl.tools@gmail.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Updated gcc 4.4.3 IA toolchain doesn't require the .ctors list
    
    Change-Id: Ia840a19a45257128eccdcf25d105f500f2d90741
    Signed-off-by: H.J. Lu <hjl.tools@gmail.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    libc: fix executable destruction support.
    
    This change allows an executable to call its destructor functions
    (declared with __attribute__((destructor))) to be properly called
    when it normally exits.
    
    Note that this is different from calling the destructors of a shared
    library when it is unloaded with dlclose() or through program exit,
    which are already supported.
    
    Bug: 3106500
    Change-Id: I1412ef5407f13b613fc6cb6103e0a691dbee4b1a
    Fix the C library runtime initialization order.
    
    This allows libc.so to run the C runtime initializer as soon as the
    dynamic linker loads the shared library, i.e. before any other initializers
    (e.g. static C++ constructors in other shared libraries the executable depends
    on).
    
    This also removes the bug where the initializers from the executable itself
    were run twice: once by the dynamic linker, and another time by __libc_init
    as defined by libc_init_dynamic.c
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Initial Contribution
    time64: make helper functions static
    
    Change-Id: I98d9a5f736482e52904228c171a1bdefd2f5b213
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Clean up warnings in the malloc_debug_* files.
    
    Also clean up cpplint.py-detected lint.
    
    Change-Id: Ia18e89c4c6878764f8d7ed34b8247e7a8d8fe88b
    bionic: import heaptracker as chk_malloc
    
    This patch is a rewrite of libc.debug.malloc = 10 (chk_malloc).  It provides
    the same features as the original (poison freed memory, detect heap overruns
    and underruns), except that it provides more debugging information whenever it
    detects a problem.
    
    In addition to the original features, the new chk_malloc() implementation
    detects multiple frees within a given range of the last N allocations, N being
    configurable via the system property libc.debug.malloc.backlog.
    
    Finally, this patch keeps track of all outstanding memory allocations.  On
    program exit, we walk that list and report each outstanding allocation.
    
    (There is support (not enabled) for a scanner thread periodically walks over
    the list of outstanding allocations as well as the backlog of recently-freed
    allocations, checking for heap-usage errors.)
    
    Feature overview:
    
      1) memory leaks
      2) multiple frees
      3) use after free
      4) overrun
    
    Implementation:
    
    -- for each allocation, there is a:
      1) stack trace at the time the allocation is made
      2) if the memory is freed, there is also a stack trace at the point
      3) a front and rear guard (fence)
      4) the stack traces are kept together with the allocation
    
    -- the following lists and maintained
    
      1) all outstanding memory allocations
      3) a backlog of allocations what are freed; when you call free(), instead of
         actually freed, the allocation is moved to this backlog;
      4) when the backlog of allocations gets full, the oldest entry gets evicted
         from it; at that point, the allocation is checked for overruns or
         use-after-free errors, and then actually freed.
      5) when the program exits, the list of outstanding allocations and the
         backlog are inspected for errors, then freed;
    
    To use this, set the following system properties before running the process or
    processes you want to inspect:
    
    libc.malloc.debug.backlog # defaults to 100
    libc.malloc.debug 10
    
    When a problem is detected, you will see the following on logcat for a multiple
    free:
    
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 BYTES MULTIPLY FREED!
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 4009647c  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 FIRST FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096490  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 NOW BEING FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c6ac  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964a0  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    
    The following for a heap overrun and underrun:
    
    E/libc    ( 7233): +++ REAR GUARD MISMATCH [10, 11)
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 HAS A CORRUPTED REAR GUARD
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096438  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096462  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 HAS A CORRUPTED FRONT GUARD
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964ba  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964e4  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    
    The following for a memory leak:
    
    E/libc    ( 7233): +++ THERE ARE 1 LEAKED ALLOCATIONS
    E/libc    ( 7233): +++ DELETING 4096 BYTES OF LEAKED MEMORY AT 0x404b95e8 (1 REMAINING)
    E/libc    ( 7233): +++ ALLOCATION 0x404b95e8 SIZE 4096 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 0001bc94  /system/lib/libc.so
    E/libc    ( 7233):      #04  pc 0001edf6  /system/lib/libc.so
    E/libc    ( 7233):      #05  pc 0001b80a  /system/lib/libc.so
    E/libc    ( 7233):      #06  pc 0001c086  /system/lib/libc.so
    E/libc    ( 7233):      #07  pc 40096402  /system/bin/malloctest
    E/libc    ( 7233):      #08  pc 00016f24  /system/lib/libc.so
    
    Change-Id: Ic440e9d05a01e2ea86b25e8998714e88bc2d16e0
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Clean up warnings in the malloc_debug_* files.
    
    Also clean up cpplint.py-detected lint.
    
    Change-Id: Ia18e89c4c6878764f8d7ed34b8247e7a8d8fe88b
    bionic: add macro protection for MALLOC_ALIGNMENT
    
    In previous commit: 2fd81ef7, .mk file has been modified to
    configure MALLOC_ALIGNMENT dynamicly according to board config.
    Add the missing macor protection here.
    
    Change-Id: I703cca2ce0504ab3e11aab226b2c61fcc0c6afa1
    Author: Jin Wei <wei.a.jin@intel.com>
    Signed-off-by: Xiaokang Qin <xiaokang.qin@intel.com>
    Signed-off-by: Beare, Bruce J <bruce.j.beare@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    bionic: import heaptracker as chk_malloc
    
    This patch is a rewrite of libc.debug.malloc = 10 (chk_malloc).  It provides
    the same features as the original (poison freed memory, detect heap overruns
    and underruns), except that it provides more debugging information whenever it
    detects a problem.
    
    In addition to the original features, the new chk_malloc() implementation
    detects multiple frees within a given range of the last N allocations, N being
    configurable via the system property libc.debug.malloc.backlog.
    
    Finally, this patch keeps track of all outstanding memory allocations.  On
    program exit, we walk that list and report each outstanding allocation.
    
    (There is support (not enabled) for a scanner thread periodically walks over
    the list of outstanding allocations as well as the backlog of recently-freed
    allocations, checking for heap-usage errors.)
    
    Feature overview:
    
      1) memory leaks
      2) multiple frees
      3) use after free
      4) overrun
    
    Implementation:
    
    -- for each allocation, there is a:
      1) stack trace at the time the allocation is made
      2) if the memory is freed, there is also a stack trace at the point
      3) a front and rear guard (fence)
      4) the stack traces are kept together with the allocation
    
    -- the following lists and maintained
    
      1) all outstanding memory allocations
      3) a backlog of allocations what are freed; when you call free(), instead of
         actually freed, the allocation is moved to this backlog;
      4) when the backlog of allocations gets full, the oldest entry gets evicted
         from it; at that point, the allocation is checked for overruns or
         use-after-free errors, and then actually freed.
      5) when the program exits, the list of outstanding allocations and the
         backlog are inspected for errors, then freed;
    
    To use this, set the following system properties before running the process or
    processes you want to inspect:
    
    libc.malloc.debug.backlog # defaults to 100
    libc.malloc.debug 10
    
    When a problem is detected, you will see the following on logcat for a multiple
    free:
    
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 BYTES MULTIPLY FREED!
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 4009647c  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 FIRST FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096490  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 NOW BEING FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c6ac  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964a0  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    
    The following for a heap overrun and underrun:
    
    E/libc    ( 7233): +++ REAR GUARD MISMATCH [10, 11)
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 HAS A CORRUPTED REAR GUARD
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096438  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096462  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 HAS A CORRUPTED FRONT GUARD
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964ba  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964e4  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    
    The following for a memory leak:
    
    E/libc    ( 7233): +++ THERE ARE 1 LEAKED ALLOCATIONS
    E/libc    ( 7233): +++ DELETING 4096 BYTES OF LEAKED MEMORY AT 0x404b95e8 (1 REMAINING)
    E/libc    ( 7233): +++ ALLOCATION 0x404b95e8 SIZE 4096 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 0001bc94  /system/lib/libc.so
    E/libc    ( 7233):      #04  pc 0001edf6  /system/lib/libc.so
    E/libc    ( 7233):      #05  pc 0001b80a  /system/lib/libc.so
    E/libc    ( 7233):      #06  pc 0001c086  /system/lib/libc.so
    E/libc    ( 7233):      #07  pc 40096402  /system/bin/malloctest
    E/libc    ( 7233):      #08  pc 00016f24  /system/lib/libc.so
    
    Change-Id: Ic440e9d05a01e2ea86b25e8998714e88bc2d16e0
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    bionic: fix integer overflows in chk_malloc(), leak_malloc(), and leak_memalign()
    
    The allocation size in chk_malloc(), leak_malloc(), and leak_memalign()
    functions may be rounded up to a small value, leading to buffer overflows.
    The code only runs in debugging mode.
    
    This patch complements commit 6f04a0f4 (CVE-2009-0607).
    
    Change-Id: Id899bcd2bcd2ea2205e5753c433390710032dc83
    Signed-off-by: Xi Wang <xi.wang@gmail.com>
    MALLOC_DEBUG: enable the option libc.debug.malloc = 10
    
    Fix the compile warning to let the libc.debug.malloc=10 works well
    Due to unsuitable value comparison, which cause compiler optimize the
    code of comparing two digits.
    
    Change-Id: I0bedd596c9ca2ba308fb008da20ecb328d8548f5
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Author: liu chuansheng <chuansheng.liu@intel.com>
    Merge memory checking functionality from sandbox
    
    Change-Id: I304c789a752c9f4af4944ca14b9bf1e7644da15a
    Split libc_debug.so into two .so modules loaded on demand from libc.so
    
    This change is intended to eliminate need to replace libc.so with libc_debug.so in order to enablememory allocation debugging.
    This is also the first step towards implementing extended memoryallocation debugging using emulator's capabilities in monitoring memory access.
    Restore malloc debug.
    
    Some libc changes were preventing the initialization call from being made.
    The basic problem appears to be that libc_init_common.c is only built once,
    and it's only built for the non-debug libc.
    Prevent a crash in the memory leak checker (which happened in chk_free())
    
    Simplify the code a little, removing un-necessary mutex locks/unlocks.
    Provide slightly better diagnostic message in case of corruption.
    Use snprintf/strlcat instead of sprintf/strcat
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@132276
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Clean up warnings in the malloc_debug_* files.
    
    Also clean up cpplint.py-detected lint.
    
    Change-Id: Ia18e89c4c6878764f8d7ed34b8247e7a8d8fe88b
    bionic: import heaptracker as chk_malloc
    
    This patch is a rewrite of libc.debug.malloc = 10 (chk_malloc).  It provides
    the same features as the original (poison freed memory, detect heap overruns
    and underruns), except that it provides more debugging information whenever it
    detects a problem.
    
    In addition to the original features, the new chk_malloc() implementation
    detects multiple frees within a given range of the last N allocations, N being
    configurable via the system property libc.debug.malloc.backlog.
    
    Finally, this patch keeps track of all outstanding memory allocations.  On
    program exit, we walk that list and report each outstanding allocation.
    
    (There is support (not enabled) for a scanner thread periodically walks over
    the list of outstanding allocations as well as the backlog of recently-freed
    allocations, checking for heap-usage errors.)
    
    Feature overview:
    
      1) memory leaks
      2) multiple frees
      3) use after free
      4) overrun
    
    Implementation:
    
    -- for each allocation, there is a:
      1) stack trace at the time the allocation is made
      2) if the memory is freed, there is also a stack trace at the point
      3) a front and rear guard (fence)
      4) the stack traces are kept together with the allocation
    
    -- the following lists and maintained
    
      1) all outstanding memory allocations
      3) a backlog of allocations what are freed; when you call free(), instead of
         actually freed, the allocation is moved to this backlog;
      4) when the backlog of allocations gets full, the oldest entry gets evicted
         from it; at that point, the allocation is checked for overruns or
         use-after-free errors, and then actually freed.
      5) when the program exits, the list of outstanding allocations and the
         backlog are inspected for errors, then freed;
    
    To use this, set the following system properties before running the process or
    processes you want to inspect:
    
    libc.malloc.debug.backlog # defaults to 100
    libc.malloc.debug 10
    
    When a problem is detected, you will see the following on logcat for a multiple
    free:
    
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 BYTES MULTIPLY FREED!
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 4009647c  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 FIRST FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096490  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 NOW BEING FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c6ac  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964a0  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    
    The following for a heap overrun and underrun:
    
    E/libc    ( 7233): +++ REAR GUARD MISMATCH [10, 11)
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 HAS A CORRUPTED REAR GUARD
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096438  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096462  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 HAS A CORRUPTED FRONT GUARD
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964ba  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964e4  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    
    The following for a memory leak:
    
    E/libc    ( 7233): +++ THERE ARE 1 LEAKED ALLOCATIONS
    E/libc    ( 7233): +++ DELETING 4096 BYTES OF LEAKED MEMORY AT 0x404b95e8 (1 REMAINING)
    E/libc    ( 7233): +++ ALLOCATION 0x404b95e8 SIZE 4096 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 0001bc94  /system/lib/libc.so
    E/libc    ( 7233):      #04  pc 0001edf6  /system/lib/libc.so
    E/libc    ( 7233):      #05  pc 0001b80a  /system/lib/libc.so
    E/libc    ( 7233):      #06  pc 0001c086  /system/lib/libc.so
    E/libc    ( 7233):      #07  pc 40096402  /system/bin/malloctest
    E/libc    ( 7233):      #08  pc 00016f24  /system/lib/libc.so
    
    Change-Id: Ic440e9d05a01e2ea86b25e8998714e88bc2d16e0
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Merge memory checking functionality from sandbox
    
    Change-Id: I304c789a752c9f4af4944ca14b9bf1e7644da15a
    Split libc_debug.so into two .so modules loaded on demand from libc.so
    
    This change is intended to eliminate need to replace libc.so with libc_debug.so in order to enablememory allocation debugging.
    This is also the first step towards implementing extended memoryallocation debugging using emulator's capabilities in monitoring memory access.
    Clean up warnings in the malloc_debug_* files.
    
    Also clean up cpplint.py-detected lint.
    
    Change-Id: Ia18e89c4c6878764f8d7ed34b8247e7a8d8fe88b
    Revert "Revert "Restore posix_memalign""
    
    This reverts commit 78a3069f827386df6166ccf9366a89be782f1dde.
    Revert "Revert "Upgrade to dlmalloc 2.8.5.""
    
    This reverts commit f72ee269274170cd46af2844a2fe88767fb6e43c.
    Revert "Upgrade to dlmalloc 2.8.5."
    
    This reverts commit 999089181ef60bb67e1a49f2cf6f4ec608a7caf8.
    Revert "Restore posix_memalign"
    
    This reverts commit bfc1d97531fa611ad2705c7179134b60e652ead4.
    Revert "Upgrade to dlmalloc 2.8.5."
    
    This reverts commit 999089181ef60bb67e1a49f2cf6f4ec608a7caf8.
    Revert "Restore posix_memalign"
    
    This reverts commit bfc1d97531fa611ad2705c7179134b60e652ead4.
    Restore posix_memalign
    
    Change-Id: I24e31bcb8b1d8be9375852e76964f09becd11938
    Restore posix_memalign
    
    Change-Id: I24e31bcb8b1d8be9375852e76964f09becd11938
    Upgrade to dlmalloc 2.8.5.
    
    Move dlmalloc code to upstream-dlmalloc to make pulling upstream changes
    easier.
    Declare pvalloc and malloc_usable_size routines present in malloc.h but with
    missing implementations. Remove other functions from malloc.h that have
    no implementation nor use in Android.
    
    Change-Id: Ia6472ec6cbebc9ad1ef99f4669de9d33fcc2efb4
    bionic: import heaptracker as chk_malloc
    
    This patch is a rewrite of libc.debug.malloc = 10 (chk_malloc).  It provides
    the same features as the original (poison freed memory, detect heap overruns
    and underruns), except that it provides more debugging information whenever it
    detects a problem.
    
    In addition to the original features, the new chk_malloc() implementation
    detects multiple frees within a given range of the last N allocations, N being
    configurable via the system property libc.debug.malloc.backlog.
    
    Finally, this patch keeps track of all outstanding memory allocations.  On
    program exit, we walk that list and report each outstanding allocation.
    
    (There is support (not enabled) for a scanner thread periodically walks over
    the list of outstanding allocations as well as the backlog of recently-freed
    allocations, checking for heap-usage errors.)
    
    Feature overview:
    
      1) memory leaks
      2) multiple frees
      3) use after free
      4) overrun
    
    Implementation:
    
    -- for each allocation, there is a:
      1) stack trace at the time the allocation is made
      2) if the memory is freed, there is also a stack trace at the point
      3) a front and rear guard (fence)
      4) the stack traces are kept together with the allocation
    
    -- the following lists and maintained
    
      1) all outstanding memory allocations
      3) a backlog of allocations what are freed; when you call free(), instead of
         actually freed, the allocation is moved to this backlog;
      4) when the backlog of allocations gets full, the oldest entry gets evicted
         from it; at that point, the allocation is checked for overruns or
         use-after-free errors, and then actually freed.
      5) when the program exits, the list of outstanding allocations and the
         backlog are inspected for errors, then freed;
    
    To use this, set the following system properties before running the process or
    processes you want to inspect:
    
    libc.malloc.debug.backlog # defaults to 100
    libc.malloc.debug 10
    
    When a problem is detected, you will see the following on logcat for a multiple
    free:
    
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 BYTES MULTIPLY FREED!
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 4009647c  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 FIRST FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096490  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 NOW BEING FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c6ac  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964a0  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    
    The following for a heap overrun and underrun:
    
    E/libc    ( 7233): +++ REAR GUARD MISMATCH [10, 11)
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 HAS A CORRUPTED REAR GUARD
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096438  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096462  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 HAS A CORRUPTED FRONT GUARD
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964ba  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964e4  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    
    The following for a memory leak:
    
    E/libc    ( 7233): +++ THERE ARE 1 LEAKED ALLOCATIONS
    E/libc    ( 7233): +++ DELETING 4096 BYTES OF LEAKED MEMORY AT 0x404b95e8 (1 REMAINING)
    E/libc    ( 7233): +++ ALLOCATION 0x404b95e8 SIZE 4096 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 0001bc94  /system/lib/libc.so
    E/libc    ( 7233):      #04  pc 0001edf6  /system/lib/libc.so
    E/libc    ( 7233):      #05  pc 0001b80a  /system/lib/libc.so
    E/libc    ( 7233):      #06  pc 0001c086  /system/lib/libc.so
    E/libc    ( 7233):      #07  pc 40096402  /system/bin/malloctest
    E/libc    ( 7233):      #08  pc 00016f24  /system/lib/libc.so
    
    Change-Id: Ic440e9d05a01e2ea86b25e8998714e88bc2d16e0
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    bionic: introduce libc.debug.malloc.program
    
    libc.debug.malloc.program  provides an additional level of control over which
    processes to enable libc.debug.malloc functionality for.  The string value of
    libc.debug.malloc.program is matched against the program name; if the value of
    libc.debug.malloc.program is a substring of the program name, then malloc debug
    is applied to that program at whatever level libc.debug.malloc specifies.
    
    If lib.debug.malloc.program is not specified, then libc.debug.malloc has the
    same effect as before.
    
    For example, to enable libc.deubug.malloc = 10 only to the mediaserver, do the
    following:
    
       adb root # necessary for setprop
       adb setprop libc.debug.malloc.program mediaserver
       adb setprop libc.debug.malloc 10
       adb kill -9 $(pid mediaserver)
    
    Change-Id: I6f01c12f033c8e2e015d73025369d7f1685ba200
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    removing shadowing redeclaration of result
    
    Change-Id: Ic1f86962dfb8620cf5c63ff4913b2f0bf908abb5
    get_malloc_leak_info: Fix assumption that totalMemory out parameter was initialized to zero.
    
    The get_malloc_leak_info() currently asssumes that the totalMemory out parameter
    was pre-initialized to zero before the routine is called. If it is not then the
    accumulated totalMemory value will be incorrect. It is likely that many callers
    will simply allocate totalMemory on the stack with no initialization and assume
    that get_malloc_leak_info will set the proper value.
    
    As an example, the caller in frameworks/base/core/jni/android_os_Debug.cpp
    calls get_malloc_leak_info() with the address uninitiazed stack variable
    for totalMemory. It is probably best to fix this in get_malloc_leak_info.
    
    Change-Id: I84c927c3781419585794726115b7d34d8fdd24ae
    Bulletproof leak dump against null hash entries
    
    Previously, the malloc leak checking code would crash in qsort()
    if null entries existed in its bookkeeping table.  This change
    makes the comparison function detect null entries and sort them
    to the end safely.
    
    Change-Id: I88244a7df1e289dd9d7992ce29606d505bd63079
    Merge memory checking functionality from sandbox
    
    Change-Id: I304c789a752c9f4af4944ca14b9bf1e7644da15a
    Split libc_debug.so into two .so modules loaded on demand from libc.so
    
    This change is intended to eliminate need to replace libc.so with libc_debug.so in order to enablememory allocation debugging.
    This is also the first step towards implementing extended memoryallocation debugging using emulator's capabilities in monitoring memory access.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Change-Id: I68cc462aeb2460345a53bdb9941ce4bfc10456fb
    bionic: fix clearenv() compiler warning and related comment typos
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    Add implementation of fdprintf, clearenv, and stubs for ttyname_r, *usershell
    
    Change-Id:      I5fe7e8b6ee5edbb49e707c3b6737a58563781fa3
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Don't copy strerror(3) or strsignal(3) strings if we can share.
    
    Change-Id: Ic405269f63b945c6fb347e7c4346cd6f104aff35
    Make strerror(3) and strsignal(3) thread-safe, and add psignal(3) and psiginfo(3).
    
    Change-Id: I426109db25e907980d6cb3a7a695796e45783b78
    ARM: make CRT_LEGACY_WORKAROUND work as intended
    
    To properly support legacy ARM shared libraries, libc.so needs
    to export the symbols __dso_handle and atexit, even though
    these are now supplied by the crt startup code.
    
    This patch reshuffles the existing CRT_LEGACY_WORKAROUND
    conditionally compiled code slightly so it works as the
    original author likely intended.
    
    Change-Id: Id6c0e94dc65b7928324a5f0bad7eba6eb2f464b9
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@gmail.com>
    arm: rewrite crtbegin* as C files.
    
    Rewrite
     crtbegin.S     -> crtbegin.c
     crtbegin_so.S  -> crtbegin_so.c
    
    This change allows us to generate PIC code without relying
    on text relocations.
    
    As a consequence of this rewrite, also rewrite
      __dso_handle.S    -> __dso_handle.c
      __dso_handle_so.S -> __dso_handle_so.c
      atexit.S          -> atexit.c
    
    In crtbegin.c _start, place the __PREINIT_ARRAY__, __INIT_ARRAY__,
    __FINI_ARRAY__, and __CTOR_LIST__ variables onto the stack, instead of
    passing a pointer to the text section of the binary.
    
    This change appears sorta wonky, as I attempted to preserve,
    as much as possible, the structure of the original assembly.
    As a result, you have C files including other C files, and other
    programming uglyness.
    
    Result: This change reduces the number of files with text-relocations
    from 315 to 19 on my Android build.
    
    Before:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      315
    
    After:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      19
    
    Change-Id: Ib9f98107c0eeabcb606e1ddc7ed7fc4eba01c9c4
    Enable functional DSO object destruction
    
    Unfortunately, legacy .so files for ARM don't have a correct crtbegin file.
    Consequently, we have to grandfather the old __dso_handle behaviour.
    Add some ifdefs for ARM to allow it to use the old code until we can work
    out a transition.
    
    Change-Id: I6a28f368267d792c94e1d985d8344023bc632f6f
    Author: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Enable functional DSO object destruction
    
    Unfortunately, legacy .so files for ARM don't have a correct crtbegin file.
    Consequently, we have to grandfather the old __dso_handle behaviour.
    Add some ifdefs for ARM to allow it to use the old code until we can work
    out a transition.
    
    Change-Id: I6a28f368267d792c94e1d985d8344023bc632f6f
    Author: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Revert "Update X86 Bionic CRT files for unwind/exceptions"
    
    This reverts commit dc3bc87b43d0d73d89cca59692b80de878e11a5d,
    causes netd to crash.
    Update X86 Bionic CRT files for unwind/exceptions
    
    Several updates to Bionic crt*.o files to implement Linux/x86
    stack unwind/exception handling.
    Mark __dso_handle as hidden.
    Note: Requires complete rebuild due to CRT changes. Google will
    need to regenerate and check-in all the prebuilt x86 CRT object
    files and libraries which link to them.
    
    Change-Id: I191ce1afb0dee7bbc28dcd9694e5919226dbd070
    Signed-off-by: Bruce J Beare <bruce.j.beare@intel.com>
    Signed-off-by: Mark D Horn <mark.d.horn@intel.com>
    Author: Lu, Hongjiu <hongjiu.lu@intel.com>
    Allow dlclose() to properly call static C++ destructors.
    
    With this patch _and_ an upcoming build/ patch, the destruction
    of static C++ objects contained in shared libraries will happen
    properly when dlclose() is called.
    
    Note that this change introduces crtbegin_so.S and crtend_so.S which
    are currently ignored by the build system.
    
    + move definition of __dso_handle to the right place
    (before that, all shared libraries used the __dso_handle
    global variable from the C library).
    
    Note that we keep a 'weak' __dso_handle in aeabi.c to avoid
    breaking the build until the next patch to build/core/combo/
    appears. We will be able to remove that later.
    
    + move bionic/aeabi.c to arch-arm/bionic/ (its proper location)
    
    NOTE: The NDK will need to be modified to enable this feature in
             the shared libraries that are generated through it.
    
    Change-Id: I99cd801375bbaef0581175893d1aa0943211b9bc
    Change-Id: I68cc462aeb2460345a53bdb9941ce4bfc10456fb
    bionic: fix clearenv() compiler warning and related comment typos
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    Add implementation of fdprintf, clearenv, and stubs for ttyname_r, *usershell
    
    Change-Id:      I5fe7e8b6ee5edbb49e707c3b6737a58563781fa3
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add implementation of fdprintf, clearenv, and stubs for ttyname_r, *usershell
    
    Change-Id:      I5fe7e8b6ee5edbb49e707c3b6737a58563781fa3
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Handle pthread-related changes (mutex/atfork)
    
    First commit:
    
    Revert "Revert "am be741d47: am 2f460fbe: am 73b5cad9: Merge "bionic: Fix wrong kernel_id in pthread descriptor after fork()"""
    
    This reverts commit 06823da2f0c8b4a4ce4c45113032f03df85c94b8.
    
    Second commit:
    
    bionic: fix atfork hanlder_mutex deadlock
    
    This cherry-picks commit 34e89c232dd5645fe3b5f9b40856d8e3e4cae57a
    
    After applying the kernel_id fix, the system refused to boot up and we
    got following crash log:
    I/DEBUG   (  113): pid: 618, tid: 618  >>> org.simalliance.openmobileapi.service:remote <<<
    I/DEBUG   (  113): signal 16 (SIGSTKFLT), code -6 (?), fault addr --------
    I/DEBUG   (  113):  eax fffffe00  ebx b77de994  ecx 00000080  edx 00724002
    I/DEBUG   (  113):  esi 00000000  edi 00004000
    I/DEBUG   (  113):  xcs 00000073  xds 0000007b  xes 0000007b  xfs 00000000 xss 0000007b
    I/DEBUG   (  113):  eip b7761351  ebp bfdf3de8  esp bfdf3dc4  flags 00000202
    I/DEBUG   (  113):     #00  eip: 00015351  /system/lib/libc.so
    I/DEBUG   (  113):     #01  eip: 0000d13c  /system/lib/libc.so (pthread_mutex_lock)
    I/DEBUG   (  113):     #02  eip: 00077b48  /system/lib/libc.so (__bionic_atfork_run_prepare)
    I/DEBUG   (  113):     #03  eip: 00052cdb  /system/lib/libc.so (fork)
    I/DEBUG   (  113):     #04  eip: 0009ae91  /system/lib/libdvm.so (_Z18dvmOptimizeDexFileillPKcjjb)
    I/DEBUG   (  113):     #05  eip: 000819d6  /system/lib/libdvm.so (_Z14dvmJarFileOpenPKcS0_PP7JarFileb)
    I/DEBUG   (  113):     #06  eip: 000b175e  /system/lib/libdvm.so (_ZL40Dalvik_dalvik_system_DexFile_openDexFilePKjP6JValue)
    I/DEBUG   (  113):     #07  eip: 0011fb94  /system/lib/libdvm.so
    
    Root cause:
    The atfork uses the mutex handler_mutex to protect the atfork_head. The
    parent will call __bionic_atfork_run_prepare() to lock the handler_mutex,
    and need both the parent and child to unlock their own copy of handler_mutex
    after fork. At that time, the owner of hanlder_mutex is set as the parent.
    If we apply the kernel_id fix, then the child's kernel_id will be set as
    child's tid.
    The handler_mutex is a recursive lock, and pthread_mutex_unlock(&hander_mutex)
    will fail because the mutex owner is the parent, while the current tid
    (__get_thread()->kernel_id) is child, not matched with the mutex owner.
    At that time, the handler_mutex is left in lock state.If the child wants to
    fork other process after than, then it will try to lock handler_mutex, and
    then be deadlocked.
    
    Fix:
    Since the child has its own copy of vm space from the the parent, the
    child space's handler_mutex should be reset to the initialized state.
    
    Change-Id: I3907dd9a153418fb78862f2aa6d0302c375d9e27
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Chenyang Du <chenyang.du@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    
    Change-Id: Ic8072f366a877443a60fe215f3c00b3df5a259c8
    bionic: fix atfork hanlder_mutex deadlock
    
    After applying the kernel_id fix, the system refused to boot up and we
    got following crash log:
    I/DEBUG   (  113): pid: 618, tid: 618  >>> org.simalliance.openmobileapi.service:remote <<<
    I/DEBUG   (  113): signal 16 (SIGSTKFLT), code -6 (?), fault addr --------
    I/DEBUG   (  113):  eax fffffe00  ebx b77de994  ecx 00000080  edx 00724002
    I/DEBUG   (  113):  esi 00000000  edi 00004000
    I/DEBUG   (  113):  xcs 00000073  xds 0000007b  xes 0000007b  xfs 00000000 xss 0000007b
    I/DEBUG   (  113):  eip b7761351  ebp bfdf3de8  esp bfdf3dc4  flags 00000202
    I/DEBUG   (  113):     #00  eip: 00015351  /system/lib/libc.so
    I/DEBUG   (  113):     #01  eip: 0000d13c  /system/lib/libc.so (pthread_mutex_lock)
    I/DEBUG   (  113):     #02  eip: 00077b48  /system/lib/libc.so (__bionic_atfork_run_prepare)
    I/DEBUG   (  113):     #03  eip: 00052cdb  /system/lib/libc.so (fork)
    I/DEBUG   (  113):     #04  eip: 0009ae91  /system/lib/libdvm.so (_Z18dvmOptimizeDexFileillPKcjjb)
    I/DEBUG   (  113):     #05  eip: 000819d6  /system/lib/libdvm.so (_Z14dvmJarFileOpenPKcS0_PP7JarFileb)
    I/DEBUG   (  113):     #06  eip: 000b175e  /system/lib/libdvm.so (_ZL40Dalvik_dalvik_system_DexFile_openDexFilePKjP6JValue)
    I/DEBUG   (  113):     #07  eip: 0011fb94  /system/lib/libdvm.so
    
    Root cause:
    The atfork uses the mutex handler_mutex to protect the atfork_head. The
    parent will call __bionic_atfork_run_prepare() to lock the handler_mutex,
    and need both the parent and child to unlock their own copy of handler_mutex
    after fork. At that time, the owner of hanlder_mutex is set as the parent.
    If we apply the kernel_id fix, then the child's kernel_id will be set as
    child's tid.
    The handler_mutex is a recursive lock, and pthread_mutex_unlock(&hander_mutex)
    will fail because the mutex owner is the parent, while the current tid
    (__get_thread()->kernel_id) is child, not matched with the mutex owner.
    At that time, the handler_mutex is left in lock state.If the child wants to
    fork other process after than, then it will try to lock handler_mutex, and
    then be deadlocked.
    
    Fix:
    Since the child has its own copy of vm space from the the parent, the
    child space's handler_mutex should be reset to the initialized state.
    
    Change-Id: I3907dd9a153418fb78862f2aa6d0302c375d9e27
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Chenyang Du <chenyang.du@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Implemented pthread_atfork()
    
    Change-Id: Ie6c0bf593315d3507b3c4a6c8903a74a1fa053db
    <sched.h>: Add sched_getcpu() and cpu_set_t
    
    This adds the cpu_set_t type definition and related functions
    and macros used to handle CPU thread affinity.
    
      sched_getcpu()
      sched_setaffinity()
      sched_getaffinity()
    
    Change-Id: If382ecafde8926341a88478062b275553645065b
    Change-Id: I68cc462aeb2460345a53bdb9941ce4bfc10456fb
    bionic: fix clearenv() compiler warning and related comment typos
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    Add implementation of fdprintf, clearenv, and stubs for ttyname_r, *usershell
    
    Change-Id:      I5fe7e8b6ee5edbb49e707c3b6737a58563781fa3
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Clean up warnings in the malloc_debug_* files.
    
    Also clean up cpplint.py-detected lint.
    
    Change-Id: Ia18e89c4c6878764f8d7ed34b8247e7a8d8fe88b
    bionic: import heaptracker as chk_malloc
    
    This patch is a rewrite of libc.debug.malloc = 10 (chk_malloc).  It provides
    the same features as the original (poison freed memory, detect heap overruns
    and underruns), except that it provides more debugging information whenever it
    detects a problem.
    
    In addition to the original features, the new chk_malloc() implementation
    detects multiple frees within a given range of the last N allocations, N being
    configurable via the system property libc.debug.malloc.backlog.
    
    Finally, this patch keeps track of all outstanding memory allocations.  On
    program exit, we walk that list and report each outstanding allocation.
    
    (There is support (not enabled) for a scanner thread periodically walks over
    the list of outstanding allocations as well as the backlog of recently-freed
    allocations, checking for heap-usage errors.)
    
    Feature overview:
    
      1) memory leaks
      2) multiple frees
      3) use after free
      4) overrun
    
    Implementation:
    
    -- for each allocation, there is a:
      1) stack trace at the time the allocation is made
      2) if the memory is freed, there is also a stack trace at the point
      3) a front and rear guard (fence)
      4) the stack traces are kept together with the allocation
    
    -- the following lists and maintained
    
      1) all outstanding memory allocations
      3) a backlog of allocations what are freed; when you call free(), instead of
         actually freed, the allocation is moved to this backlog;
      4) when the backlog of allocations gets full, the oldest entry gets evicted
         from it; at that point, the allocation is checked for overruns or
         use-after-free errors, and then actually freed.
      5) when the program exits, the list of outstanding allocations and the
         backlog are inspected for errors, then freed;
    
    To use this, set the following system properties before running the process or
    processes you want to inspect:
    
    libc.malloc.debug.backlog # defaults to 100
    libc.malloc.debug 10
    
    When a problem is detected, you will see the following on logcat for a multiple
    free:
    
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 BYTES MULTIPLY FREED!
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 4009647c  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 FIRST FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096490  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9278 SIZE 10 NOW BEING FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c6ac  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964a0  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    
    The following for a heap overrun and underrun:
    
    E/libc    ( 7233): +++ REAR GUARD MISMATCH [10, 11)
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 HAS A CORRUPTED REAR GUARD
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096438  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9198 SIZE 10 FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 40096462  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 HAS A CORRUPTED FRONT GUARD
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964ba  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    E/libc    ( 7233): +++ ALLOCATION 0x404b9358 SIZE 10 FREED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c7d2  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d94  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 400964e4  /system/bin/malloctest
    E/libc    ( 7233):      #04  pc 00016f24  /system/lib/libc.so
    
    The following for a memory leak:
    
    E/libc    ( 7233): +++ THERE ARE 1 LEAKED ALLOCATIONS
    E/libc    ( 7233): +++ DELETING 4096 BYTES OF LEAKED MEMORY AT 0x404b95e8 (1 REMAINING)
    E/libc    ( 7233): +++ ALLOCATION 0x404b95e8 SIZE 4096 ALLOCATED HERE:
    E/libc    ( 7233): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    E/libc    ( 7233):      #00  pc 0000c35a  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #01  pc 0000c658  /system/lib/libc_malloc_debug_leak.so
    E/libc    ( 7233):      #02  pc 00016d80  /system/lib/libc.so
    E/libc    ( 7233):      #03  pc 0001bc94  /system/lib/libc.so
    E/libc    ( 7233):      #04  pc 0001edf6  /system/lib/libc.so
    E/libc    ( 7233):      #05  pc 0001b80a  /system/lib/libc.so
    E/libc    ( 7233):      #06  pc 0001c086  /system/lib/libc.so
    E/libc    ( 7233):      #07  pc 40096402  /system/bin/malloctest
    E/libc    ( 7233):      #08  pc 00016f24  /system/lib/libc.so
    
    Change-Id: Ic440e9d05a01e2ea86b25e8998714e88bc2d16e0
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Add link.h for all platforms with dl_phdr_info
    
    This header is used on bionic build and should be propagated into
    sysroot on toolchain rebuild. Discussion re. this header is here:
    http://gcc.gnu.org/ml/gcc-patches/2012-08/msg00936.html
    
    It is available already in mips NDK platforms:
    development/ndk/platforms/android-9/arch-mips/include/link.h
    
    Change-Id: I39ff467cdac9f448e31c11ee3e14a6200e82ab57
    Signed-off-by: Pavel Chupin <pavel.v.chupin@intel.com>
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add a .note.android.ident section to Android ELF binaries.
    
    This allows debugging tools to know they are working with Android
    binaries and adapt accordingly.
    
    Signed-off-by: Thiago Jung Bauermann <thiago.bauermann@linaro.org>
    Signed-off-by: Michael Hope <michael.hope@linaro.org>
    
    Change-Id: Ic906992fcad61c028bb765821637a3e1333bf52b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Adding event logging to libc.
    
    I've basically just copied the relevant bits out of liblog and
    EventLog.cpp. While this will let us do the uid logging we want
    to address the concerns in 245c07027f78565858dd489eb0d94c3d48743e9d
    it doesn't give us much else.
    
    Change-Id: Icac6ff20bc0a3ade5927f6f76fedffe1ae6f8522
    Revert "Revert "libc: Add logcat error message for memory corruption""
    
    This reverts commit 368ee1e4d65c555fdb0fa4b3a91d75a397936908.
    Revert "libc: Add logcat error message for memory corruption"
    
    This fixes the build.
    
    This reverts commit 7708a89c60e7b024d31c48c8034932c5e9f0aceb.
    libc: Add logcat error message for memory corruption
    
    Our dlmalloc implementation currently calls abort() when it detects
    that the heap is corrupted, or that an invalid pointer is passed to
    one of its functions.
    
    The only way to detect this is because abort() will force-fully
    crash the current program with a magic fault address of '0xdeadbaad'.
    
    However, this is not really well documented, and a frequent topic
    on the android-ndk forum (among others).
    
    This change makes our dlmalloc code dump a simple message to the
    log just before the abort() call (and hence before the stack trace)
    to better help identify the problem.
    
    Change-Id: Iebf7eb7fe26463ecadfaca8f247d237edb441e3c
    libc: remove cutils dependencies
    
    We simply copy the stuff we need from cutils headers.
    
    A future patch will change cutils to include the private <bionic_atomic_inline.h>
    
    Change-Id: Ib6fd9a03bc9e337ce867bd606dc94c2b4438480a
    Fix log channel initialization at bionic/logd_write.c.
    
    log_channel_t contains fd member, which is file descriptor for
    exact logging channel. change cc05d1271680d6a7804bc89d3b1fe14c40b32396
    lacks initialization of this member in __write_to_log_init(), thus
    logging code is not working, although not crashable.
    
    Additional details may be found in comments here:
    http://review.source.android.com/5617
    Fix libc logging implementation.
    
    The file descriptor wasn't getting set, so the writev() call was
    silently failing.
    
    There's a parallel implementation over in system/core/liblog, but it's
    still using the old approach and didn't have this problem.
    Changed logging functions in bionic/logd_write.c.
    
    Main differences from original code:
    1. now log channel for LOG_ID_MAIN may exist even if LOG_ID_RADIO
       facility failed.
    2. __write_to_log_null() now acts as always successful function.
    3. it's more simplier to add new logging channels now
    
    ammended commit fixes my typo on line 130
    Prevent a crash in the memory leak checker (which happened in chk_free())
    
    Simplify the code a little, removing un-necessary mutex locks/unlocks.
    Provide slightly better diagnostic message in case of corruption.
    Use snprintf/strlcat instead of sprintf/strcat
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@131421
    Initial Contribution
    Update the kernel headers to match external/kernel-headers.
    
    Note that the Linux kernel handed over responsibility for most of the
    socket constants to glibc some time ago. Someone had updated our
    external/kernel-headers file but not regenerated the bionic headers,
    so this change copies the missing stuff from the old bionic <linux/socket.h>
    into <sys/socket.h>. This is what glibc does.
    
    I've hacked a few of the other files to #include <sys/socket.h> for
    backward compatibility, but even so this requires numerous other
    changes to switch people over from direct inclusion of <linux/...> headers.
    
    Change-Id: I0e4af64e631d3cef911a31d90f2f806e058278a0
    DO NOT MERGE: libc: enable IPTOS_MINCOST, fixup gethostbyaddr() proto.
    
    DO NOT MERGE: pulled in from master for iptables v1.4.11 update
    
    Make netinet/ip.h have IPTOS_MINCOST which matches what
      kernel/common/linux/ip.h has to say.
    Fixup gethostbyaddr() 1st arg to match what man has to say.
    
    Change-Id: Iff9647d4a46ea88b1fc32163eb69bb9b27cdf370
    libc: enable IPTOS_MINCOST, fixup gethostbyaddr() proto.
    
    Make netinet/ip.h have IPTOS_MINCOST which matches what
      kernel/common/linux/ip.h has to say.
    Fixup gethostbyaddr() 1st arg to match what man has to say.
    
    Change-Id: Iff9647d4a46ea88b1fc32163eb69bb9b27cdf370
    libc: enable IPTOS_MINCOST, fixup gethostbyaddr() proto.
    
    Make netinet/ip.h have IPTOS_MINCOST which matches what
      kernel/common/linux/ip.h has to say.
    Fixup gethostbyaddr() 1st arg to match what man has to say.
    
    Change-Id: Iff9647d4a46ea88b1fc32163eb69bb9b27cdf370
    Return back EAI_ADDRFAMILY definition needed for libnl-2.0
    
    Change-Id: I86e6ca8ad92da7a81ea4b659dd9fc9be2d6fd3c9
    Signed-off-by: Dmitry Shmidt <dimitrysh@google.com>
    Changed __get_h_errno linkage to "C".
    
    Bug:2441631
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add link.h for all platforms with dl_phdr_info
    
    This header is used on bionic build and should be propagated into
    sysroot on toolchain rebuild. Discussion re. this header is here:
    http://gcc.gnu.org/ml/gcc-patches/2012-08/msg00936.html
    
    It is available already in mips NDK platforms:
    development/ndk/platforms/android-9/arch-mips/include/link.h
    
    Change-Id: I39ff467cdac9f448e31c11ee3e14a6200e82ab57
    Signed-off-by: Pavel Chupin <pavel.v.chupin@intel.com>
    Eliminate duplicate copies of constants.
    
    sys/personality.h and linux/personality.h contain mostly
    identical contents. Eliminate dups.
    
    Change-Id: Ie786edcb5dca57af7ee5b5fdad2949369f1bc4e4
    add personality() system call.
    
    Change-Id: Ie899def8ea1d705930ed83adae1343c1353e7c57
    Eliminate duplicate constants
    
    include/elf.h contains basically the same values as
    linux/auxvec.h. Eliminate dups.
    
    include/sys/exec_elf.h contains basically the same
    values as linux/elf.h. Eliminate dups.
    
    Change-Id: I66b8358161bb52223bb657f8f73ba28b324f4fa3
    Eliminate duplicate constants
    
    include/elf.h contains basically the same values as
    linux/auxvec.h. Eliminate dups.
    
    include/sys/exec_elf.h contains basically the same
    values as linux/elf.h. Eliminate dups.
    
    Change-Id: I66b8358161bb52223bb657f8f73ba28b324f4fa3
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: Add missing <termio.h> header
    
    Change-Id: Id4e020ed330b3eabf09324f9b6d44d3a0f336d87
    bonic: libc: cpuacct support for setuid functions
    
    Any of the setuid functions now updates /acct/uid/ with its own tid
    before changing users. This is so we can properly account for cpu time
    per uid.
    
    Change-Id: I34186cf4d5228cac8439e582a9e26c01ef3011e4
    Signed-off-by: Mike Chan <mike@android.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Make strerror(3) and strsignal(3) thread-safe, and add psignal(3) and psiginfo(3).
    
    Change-Id: I426109db25e907980d6cb3a7a695796e45783b78
    libc: Fix the definition of SIGRTMAX
    
    After this change, SIGRTMAX will be set to 64 (instead of 32 currently).
    Note that this doesn't change the fact that our sigset_t is still defined
    as a 32-bit unsigned integer, so most functions that deal with this type
    won't support real-time signals though.
    
    Change-Id: Ie1e2f97d646f1664f05a0ac9cac4a43278c3cfa8
    libc: tag missing functions in system headers.
    
    This matches recent changes in the NDK header.
    We enclose missing functions in #if 0 .. #endif blocks
    with a clear "MISSING" in comments in order to locate
    them later.
    
    Change-Id: I87b3a62e777897e75c9243360fb0a82bcc53d9fb
    Add declaration for sys_signame[] forgotten in change 12489
    Add killpg function
    
    Change-Id:      I9bc347d264fe38faf2d0f9935d2ebb43a353196e
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Fix a ENOTUP/ENOTSUP typo.
    
    Change-Id: Ifa347a09a2aa1f505965ae7c1383fd0caf95793c
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    New additions/bug fixes required/found when porting perf.
    
    New functions:
            tfind
            tsearch
            tdelete
            twalk
            tdestroy (GNU extension)
    
    Bug fix: the current implementation for realpath would crash
            if the second argument (resolved_path) is NULL.
    
    New headers:
            ar.h
            search.h
    
    Change-Id: Ib6c1e42fc186a6d597a6e5a9692b16acaa155804
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    libc: Add missing C++ guards to <pathconf.h>
    
    Change-Id: I94dad48678181d8b02431b1c1f5d507beafb5406
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: add ftw / nftw functions
    
    Please see "man 3 ftw" for a description of the
    ftw / nftw functions.
    
    This code is taken directly from netbsd unmodified.
    
    Change-Id: Ia4879ac57212b424adf5281b5e92858e216d0f14
    Update time.h for CLOCK_BOOTTIME.
    
    (cherry-pick of 8958a383296ea0e1cc106ae245c37671809ffd49)
    
    Change-Id: Ie8de6b32fa81566db53ad7e9fd4b197f4cede628
    Update time.h for CLOCK_BOOTTIME.
    
    Change-Id: Iafbc6a2f57587feb68526e4eab67452aa0db5311
    libc: remove private declarations from <time.h> and <resolv.h>
    
    This patch is used to remove private C library declarations from the
    public headers (that are exported to the NDK). It should *only* be
    submitted after all other patches modifying the users of said
    private functions have been submitted to the tree, to avoid
    breakages.
    
    Change-Id: I0a5e3014f8e3ac9ed8df86a5cdae506337c23252
    libc: Copy private C library declarations to private/
    
    This patch is the first in a series that aims at cleaning up the
    public C library headers (which end up being distributed with the NDK).
    
    <resolv.h> and <time.h> contain declarations that should not be public.
    They are used by other parts of the platform, but NDK applications should
    not use or rely on them.
    
    So copy them to private <bionic_time.h> and <resolv_iface.h> headers
    and use a guard macro to avoid conflicts when both headers are included
    at the same time.
    
    The idea is that we're going to fix the other platform modules to
    include these private headers. After this is done, we will remove the
    duplicate definitions from <resolv.h> and <time.h>
    
    Change-Id: I121c11936951c98ca7165e811126ed8a4a3a394d
    <time.h>: Add timegm(), timelocal() and others.
    
    Add timegm(), timelocal(), time2posix() and posix2time() to the
    C library.
    
    Change-Id: I34d5771ed83dd994870a5ca58a511d01898b1ffb
    eclair snapshot
    libc: add void to clock() function prototype
    
    Signed-off-by: Erik Gilling <konkers@android.com>
    Add standalone_months field to libc strftime().
    
    Replicate my change 722a5c0462f38827f4097065bfc3826b9e0e9fb4 into
    bionic in an attempt to fix the build.
    auto import //branches/master/...@140412
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    libc: remove private declarations from <time.h> and <resolv.h>
    
    This patch is used to remove private C library declarations from the
    public headers (that are exported to the NDK). It should *only* be
    submitted after all other patches modifying the users of said
    private functions have been submitted to the tree, to avoid
    breakages.
    
    Change-Id: I0a5e3014f8e3ac9ed8df86a5cdae506337c23252
    libc: Copy private C library declarations to private/
    
    This patch is the first in a series that aims at cleaning up the
    public C library headers (which end up being distributed with the NDK).
    
    <resolv.h> and <time.h> contain declarations that should not be public.
    They are used by other parts of the platform, but NDK applications should
    not use or rely on them.
    
    So copy them to private <bionic_time.h> and <resolv_iface.h> headers
    and use a guard macro to avoid conflicts when both headers are included
    at the same time.
    
    The idea is that we're going to fix the other platform modules to
    include these private headers. After this is done, we will remove the
    duplicate definitions from <resolv.h> and <time.h>
    
    Change-Id: I121c11936951c98ca7165e811126ed8a4a3a394d
    Add per-interface dns caches.
    
    import of changes 22100 and 23138 from opensource.
    
    Change-Id: I3ce86394323d269272aeb2bebeed4374f171a8cf
    Add support for a dns cache per interface
    
    Initial commit for dns cache per interface.
    Added a type that holds a reference to a
    cache and name of associated interface,
    address of interface, name server(s)
    associated with an interface etc.
    
    New functions to set default interface,
    address of name servers etc.
    
    Change-Id: Ie991bc5592fd998409853d8bf77d7fe69035dac5
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: speed-up flockfile()/funlockfile()
    
    For Honeycomb, we added proper file thread-safety for
    all FILE* operations. However, we did implement that by
    using an out-of-band hash table to map FILE* pointers
    to phtread_mutex_t mutexes, because we couldn't change
    the size of 'struct _sFILE' without breaking the ABI.
    
    It turns out that our BSD-derived code already has
    some support code to extend FILE* objects, so use it
    instead. See libc/stdio/fileext.h
    
    This patch gets rid of the hash table, and put the
    mutex directly into the sFILE extension.
    
    Change-Id: If1c3fe0a0a89da49c568e9a7560b7827737ff4d0
    libc: <pthread.h>: Replace '#if __cplusplus' by '#ifdef __cplusplus'
    
    See http://code.google.com/p/android/issues/detail?id=15221
    
    Change-Id: Ia7b6668c28737810d6c4941604c6adf232a27c61
    libc: Fix PTHREAD_RWLOCK_INITIALIZER
    
    The macro definition was incorrect and resulted in a compile error
    when used.
    
    Fixes http://code.google.com/p/android/issues/detail?id=15306
    
    Change-Id: I8fa6047b63e7f56b53653774327099822c469cd1
    libc: remove C++ comments from public headers.
    
    Change-Id: I4af84f912062cd2ff34711c25122fb323f20c032
    Implemented pthread_atfork()
    
    Change-Id: Ie6c0bf593315d3507b3c4a6c8903a74a1fa053db
    pthread: introduce pthread_setname_np() as a mean to give names to threads
    
    ... so that each cloned process at the kernel level can be named
    independently. Tools like 'top' can display the CPU/memory statistics
    for each process's thread if "Show Threads" mode is on.
    
    With this function in place, we can convert dalvik/Thread.c setThreadName()
    function over this function. This feature ought to be provided by the
    underlying C library and not coded directly in Dalvik.
    
    Change-Id: Ifa997665dbaa114e0b126f8c667708be9a4137fd
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    Add pthread_rwlock_t implementation to the C library (DO NOT MERGE)
    
    Change-Id: I756d8c26afc37cd7b71117ddbaa02a2cb40fdecb
    Add pthread_rwlock_t implementation to the C library
    
    Change-Id: I14d0a112554756a7294a51fe88c1c408a16b5ff1
    Add pthread_condattr_init/destroy/setpshared/getpshared
    
    Note that this does not change the implementation of conditional variables
    which still use shared futexes, independent on the flags being selected.
    
    This will be fixed in a later patch, once our system is modified to use
    pthread_condattr_setpshared(attr, PTHREAD_PROCESS_SHARED) properly.
    
    Change-Id: I935de50964cd41f97a13dbfd6626d3407b0406c3
    Revert "bionic: pthread: use private futexes by default for mutexes and condvars"
    
    This reverts commit ba9c6f0989ae94778ba2b9f597adc827c9dc81e8.
    bionic: pthread: use private futexes by default for mutexes and condvars
    
    Private futexes are a recent kernel addition: faster futexes that cannot be
    shared between processes. This patch uses them by default, unless the PROCESS_SHARED
    attribute flag is used when creating a mutex and/or conditional variable.
    
    Also introduces pthread_condattr_init/destroy/setpshared/getpshared.
    
    Change-Id: I3a0e2116f467072b046524cb5babc00e41057a53
    eclair snapshot
    Add pthread_mutex_lock_timeout_np
    
    This is used to perform a mutex lock for a given amount of
    milliseconds before giving up. Using the _np prefix since this
    is absolutely not portable.
    
    Also remove a compiler warning in pthread_attr_getstackaddr
    added pthread_cond_timedwait_relative_np()
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    disable _FORTIFY_SOURCE under clang
    
    Clang and _FORTIFY_SOURCE are just plain incompatible with
    each other.  First of all, clang doesn't understand the
    __attribute__((gnu_inline)) header. Second of all,
    Clang doesn't have support for __builtin_va_arg_pack()
    and __builtin_va_arg_pack_len() (see
    http://clang.llvm.org/docs/UsersManual.html#c_unimpl_gcc)
    
    Until we can resolve these issues, don't even try using
    _FORTIFY_SOURCE under clang.
    
    Change-Id: I81c2b8073bb3276fa9a4a6b93c427b641038356a
    FORTIFY_SOURCE: Add openat, fix bug
    
    Add fortify_source support for openat(). This change requires that
    an argument be supplied when using O_CREAT.
    
    Fix unnecessary call to __open_2. If, at compile time, we know that
    "flags" is constant and DOESN'T contain O_CREAT, the call to __open_2
    is useless.
    
    Change-Id: Ifcd29c4fb25e25656961d7552d672e161f0cfdbd
    FORTIFY_SOURCE: add open() checks
    
    Add a FORTIFY_SOURCE check which requires that you pass a
    "mode" argument when calling open(..., O_CREAT). If a mode isn't
    passed, then the file is created with "undefined" permissions.
    
    Change-Id: I4427be4f9ce170c69da01af5b00fb05b03613a28
    libc: add missing O_CLOEXEC from <fcntl.h>
    
    Change-Id: Ie7ad57898e67800a9fe92bb52589d67ec30e1cd9
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    disable _FORTIFY_SOURCE under clang
    
    Clang and _FORTIFY_SOURCE are just plain incompatible with
    each other.  First of all, clang doesn't understand the
    __attribute__((gnu_inline)) header. Second of all,
    Clang doesn't have support for __builtin_va_arg_pack()
    and __builtin_va_arg_pack_len() (see
    http://clang.llvm.org/docs/UsersManual.html#c_unimpl_gcc)
    
    Until we can resolve these issues, don't even try using
    _FORTIFY_SOURCE under clang.
    
    Change-Id: I81c2b8073bb3276fa9a4a6b93c427b641038356a
    When compiling with clang, don't "fortify_source" the strlcpy and
    strlcat.
    
    Change-Id: I91f58322f28e425ab9d22b51c23fcd6b772ede97
    When compiling with clang, don't "fortify_source" the strlen.
    
    At this point, FORTIFY_SOURCE and clang are just plain incompatible.
    Need to solve the underlying incompatibility first.
    
    Change-Id: I3366477d19461e1ec93b1c30e0c7e8145b391b9b
    When compiling with clang, don't "fortify_source" the strlcpy and
    strlcat.
    
    Change-Id: I91f58322f28e425ab9d22b51c23fcd6b772ede97
    When compiling with clang, don't "fortify_source" the strlen.
    
    At this point, FORTIFY_SOURCE and clang are just plain incompatible.
    Need to solve the underlying incompatibility first.
    
    Change-Id: I3366477d19461e1ec93b1c30e0c7e8145b391b9b
    FORTIFY_SOURCE: revert memcpy changes.
    
    Performance regressions.  Hopefully this is a temporary
    rollback.
    
    Bug: 6821003
    Change-Id: I84abbb89e1739d506b583f2f1668f31534127764
    FORTIFY_SOURCE: introduce __BIONIC_FORTIFY_UNKNOWN_SIZE macro
    
    Replace all occurances of "(size_t) -1" with a
    __BIONIC_FORTIFY_UNKNOWN_SIZE macro.
    
    Change-Id: I0b188f6cf31417d2dbef0e1bd759de3f9782873a
    FORTIFY_SOURCE: strlen check.
    
    This test is designed to detect code such as:
    
    int main() {
      char buf[10];
      memcpy(buf, "1234567890", sizeof(buf));
      size_t len = strlen(buf); // segfault here with _FORTIFY_SOURCE
      printf("%d\n", len);
      return 0;
    }
    
    or anytime strlen reads beyond an object boundary. This should
    help address memory leakage vulnerabilities and make other
    unrelated vulnerabilities harder to exploit.
    
    Change-Id: I354b425be7bef4713c85f6bab0e9738445e00182
    FORTIFY_SOURCE: enhanced memcpy protections.
    
    Two changes:
    
    1) Detect memory read overruns.
    
    For example:
    
    int main() {
      char buf[10];
      memcpy(buf, "abcde", sizeof(buf));
      sprintf("%s\n", buf);
    }
    
    because "abcde" is only 6 bytes, copying 10 bytes from it is a bug.
    This particular bug will be detected at compile time.  Other similar
    bugs may be detected at runtime.
    
    2) Detect overlapping buffers on memcpy()
    
    It is a bug to call memcpy() on buffers which overlap. For
    example, the following code is buggy:
    
      char buf3[0x800];
      char *first_half  = &buf3[0x400];
      char *second_half = &buf3[1];
      memset(buf3, 0, sizeof(buf3));
      memcpy(first_half, second_half, 0x400);
      printf("1: %s\n", buf3);
    
    We now detect this at compile and run time.
    
    Change-Id: I092bd89f11f18e08e8a9dda0ca903aaea8e06d91
    libc: cleanups
    
    Prefix private functions with underscores, to prevent name
    conflicts.
    
    Use __error__ instead of error, since occasionally programs will
    create their own "#define error ...".
    
    Change-Id: I7bb171df58aec5627e61896032a140db547fd95d
    FORTIFY_SOURCE: add strlcpy / strlcat support
    
    Add strlcpy / strlcat support to FORTIFY_SOURCE. This allows
    us to do consistency checks on to ensure we don't overflow buffers
    when the compiler is able to tell us the size of the buffer we're
    dealing with.
    
    Unlike previous changes, this change DOES NOT use the compiler's
    builtin support. Instead, we do everything the compiler would
    normally do.
    
    Change-Id: I47c099a911382452eafd711f8e9bfe7c2d0a0d22
    _FORTIFY_SOURCE: add memset / bzero support
    
    Add _FORTIFY_SOURCE support for the following functions:
    
    * memset
    * bzero
    
    Move the __BIONIC_FORTIFY_INLINE definition to cdefs.h so it
    can be used from multiple header files.
    
    Change-Id: Iead4d5e35de6ec97786d58ee12573f9b11135bb7
    libc: implement some FORTIFY_SOURCE functions
    
    Add initial support for -D_FORTIFY_SOURCE to bionic for the
    following functions:
    
    * memcpy
    * memmove
    * strcpy
    * strcat
    * strncpy
    * strncat
    
    This change adds a new version of the above functions which passes
    the size of the destination buffer to __builtin___*_chk.
    
    If the compiler can determine, at compile time, that the destination
    buffer is large enough, or the destination buffer can point to an object
    of unknown size, then the check call is bypassed.
    
    If the compiler can't make a compile time decision, then it calls
    the __*_chk() function, which does a runtime buffer size check
    
    These options are only enabled if the code is compiled with
    -D_FORTIFY_SOURCE=1 or 2, and only when optimizations are enabled.
    
    Please see
    * http://gcc.gnu.org/onlinedocs/gcc/Object-Size-Checking.html
    * http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
    
    for additional details on FORTIFY_SOURCE.
    
    Testing: Compiled the entire Android tree with -D_FORTIFY_SOURCE=1,
    and verified that everything appears to be working properly.
    Also created a test buffer overflow, and verified that it was
    caught by this change.
    
    Change-Id: I4fddb445bafe92b16845b22458d72e6dedd24fbc
    string.h: add __attribute__ ((pure)) to string functions
    
    cdefs.h: Introduce the __purefunc attribute, which allows us to mark
    certain functions as being "pure".
    
    http://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html
    
      Many functions have no effects except the return value and their
      return value depends only on the parameters and/or global variables.
      Such a function can be subject to common subexpression elimination
      and loop optimization just as an arithmetic operator would be.
    
    string.h: Mark many commently used string functions as "pure", to
    allow for additional compiler optimizations.
    
    Change-Id: I42961f90f822b6dbcbc3fd72cdbe774a7adc8785
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    fix prototype of dladdr
    
    this breaks C++ source code in particular.
    
    Change-Id: Ie06b5d31d23b5455e6950c470adc64dd5e7784df
    Added support for dladdr()
    
    dladdr() is a GNU extension function, which allows the caller to retrieve
    symbol information for a specified memory address.  It is useful for things
    like generating backtrace information at runtime.
    
    Change-Id: I3a1def1a6c9c666d93e1e97b7d260dfa5b9b79a9
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: allow usage of time64.h from cpp code
    
    Wrapped declarations in time64.h with __BEGIN_DECLS/__END_DECLS so that
    the prototypes are correctly identified as extern C.
    
    Change-Id: I253453307831c929a6c7174b28b48bceef946fed
    Signed-off-by: Fred Fettinger <fred.fettinger@motorola.com>
    Signed-off-by: Mike Lockwood <lockwood@android.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add wcscasecmp() and wcsncasecmp() prototypes to wchar.h.
    
    The above prototypes are missing from libc/include/wchar.h but
    the functions are present (although with a limited implementation)
    in libc.
    
    Change-Id: I1b7c6accfc59ff0f56f3f41a9d3c075e935ac54a
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    Add stdlib functions mbstowcs() and wcstombs(). DO NOT MERGE.
    
    As with the other wchar functions in Bionic, these are really
    minimally functional stubs.
    Add stdlib functions mbstowcs() and wcstombs().
    
    As with the other wchar functions in Bionic, these are really
    minimally functional stubs.
    
    Change-Id: I805bc5642e7bc22d9d730cfc18f9fb4a5f164416
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    Always define the 64-bit int types.
    
    These preprocessor tricks have caused trouble for -std=gnu99 and -ansi, and
    both netbsd's libc and glibc seem to unconditionally define these types.
    
    Change-Id: Ib8dffa341a8ca88f80d275ba2b7f93a4c910ee32
    libc: <stdint.h>: Don't make __STD_CONSTANT_MACROS available if only __STD_LIMIT_MACROS is defined.
    
    Change-Id: I8b0ea266eab9c6f75d8407b704953ecaef948221
    libc: <stdint.h>: fix typo in INTMAX_C()/UINTMAX_C() definition
    
    Change-Id: I3c74269901a288c448734dd7eb442a62b9348db8
    libc: <stdint.h>: Proper C++
    
    This patch prevents the definition of various macros when <stdint.h> is
    included from C++. The ISO C99 standard mentions that when this header
    is included from a C++ source file, limit and constant related macros
    should only be defined when asked explicitely by defining
    __STDC_LIMIT_MACROS and __STD_CONSTANT_MACROS, respectively.
    
    The <stdint.h> lacked the proper #ifdef .. #endif blocks for the
    following macros:
    
        INTPTR_MIN, INTPTR_MAX, UINTPTR_MAX, PTRDIFF_MIN, PTRDIFF_MAX
        INTMAX_MIN, INTMAX_MAX, UINTMAX_MAX,
        INPTR_C, UINTPR_C, PTRDIFF_C, INTMAX_C, UINTMAX_C
    
    This is intended to fix http://code.google.com/p/android/issues/detail?id=14380
    after we copy this file to development/ndk/platforms/android-3/include/
    
    Change-Id: Ia77e0822edfaaf568ea599d7de673b310eeeaa4a
    Define 64 bit types if compiling with -std=c99
    
    Compiling with -std=c99 defines __STRICT_ANSI__, but the 64 bit types
    and type macros should still be defined in this case.
    
    This helps compiling third party code that needs -std=c99 with the NDK.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Fixes for the ARM-specific bswap_16, bswap_32, and bswap_64.
    
    1. Make the feature test work by excluding known-deficient processors, so
    we don't have to maintain a complete list of all the processors that support
    REV and REV16.
    
    2. Don't abuse 'register' to get an effect similar to GCC's +l constraint,
    but which was unnecessarily restrictive.
    
    3. Fix __swap64md so _x isn't clobbered, breaking 64-bit swaps.
    
    4. Make <byteswap.h> (which declars bswap_16 and friends) use <endian.h>
    rather than <sys/endian.h>, so we get the machine-dependent implementations.
    
    (git cherry-pick of 3cf53d1a7814e1520df09d24b009c16f4f27db0d)
    Fixes for the ARM-specific bswap_16, bswap_32, and bswap_64.
    
    1. Make the feature test work by excluding known-deficient processors, so
    we don't have to maintain a complete list of all the processors that support
    REV and REV16.
    
    2. Don't abuse 'register' to get an effect similar to GCC's +l constraint,
    but which was unnecessarily restrictive.
    
    3. Fix __swap64md so _x isn't clobbered, breaking 64-bit swaps.
    
    4. Make <byteswap.h> (which declars bswap_16 and friends) use <endian.h>
    rather than <sys/endian.h>, so we get the machine-dependent implementations.
    
    Change-Id: I6a38fad7a9fbe394aff141489617eb3883e1e944
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Revert "Revert "Upgrade to dlmalloc 2.8.5.""
    
    This reverts commit f72ee269274170cd46af2844a2fe88767fb6e43c.
    Revert "Upgrade to dlmalloc 2.8.5."
    
    This reverts commit 999089181ef60bb67e1a49f2cf6f4ec608a7caf8.
    Revert "Upgrade to dlmalloc 2.8.5."
    
    This reverts commit 999089181ef60bb67e1a49f2cf6f4ec608a7caf8.
    Upgrade to dlmalloc 2.8.5.
    
    Move dlmalloc code to upstream-dlmalloc to make pulling upstream changes
    easier.
    Declare pvalloc and malloc_usable_size routines present in malloc.h but with
    missing implementations. Remove other functions from malloc.h that have
    no implementation nor use in Android.
    
    Change-Id: Ia6472ec6cbebc9ad1ef99f4669de9d33fcc2efb4
    Don't mark realloc with __attribute__((malloc))
    
    According to
    http://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html
    
    realloc should NOT be marked with __attribute__((malloc)). Quoting:
    
       realloc-like functions do not have this property as the memory
       pointed to does not have undefined content.
    
    For reference, __mallocfunc is defined in sys/cdefs.h as:
    
        #define __mallocfunc  __attribute__((malloc))
    
    Change-Id: I56083542ba92e4608dd7c55fb5596a138eb50cc9
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    limits.h: Include page.h when relying on PAGE_SIZE
    
    limits.h relies on PAGE_SIZE being defined without actually including
    page.h. Make sure this is included to avoid compilation failures.
    
    Signed-off-by: Arun Raghavan <arun.raghavan@collabora.co.uk>
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Import regex from OpenBSD
    
    Change-Id: I7ad7d907ef65e4e345f94777d730813b1270a612
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@127101
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add getsid system call to bionic
    
    Add getsid() system call to bionic for
    all architectures. This is needed for various tools
    (e.g. perf).
    
    Adding the getsid system call was done in 3 steps:
    () add getsid system call (function name and syscall
    number) to libc/SYSCALLS.TXT
    () generate all necessary headers by calling
    libc/tools/gensyscalls.py. This patch is adding
    the generated files since the build system
    does not call gensyscalls.py.
    () add the system call signature to libc/include/unistd.h
    
    Change-Id: Id69a257e13ec02e1a44085a6b217a3f19ab025b1
    Signed-off-by: Irina Tirdea <irina.tirdea@intel.com>
    Add faccessat to syscall list
    
    Change-Id: I427a18811089cb280769ac8da3ed8adc00a65a10
    libc: Fix prctl() declaration.
    
    This change fixes the prctl() declaration to match GLibc, and allow us
    to build gcc-4.6 for Android (among other things). Note that this does
    not change the source and binary interfaces.
    
    Change-Id: I3900c957f0da8b3548cbe9da8c41d50099dc19d6
    libc: Add ftruncate64 and improve 64-bit parameter syscall handling.
    
    This patch improves the handling of 64-bit parameters in syscalls on ARM.
    The ARM EABI mandates that 64-bit quantities be passed in even/odd register
    pairs, which requires special treatment.
    
    This allows us to simplify our implementations of pread() and pwrite()
    and remove the C stubs for pread64() and pwrite64().
    
    Also add ftruncate64() to <unistd.h>
    
    Change-Id: I407e2fd223ba0093dd2d0b04c6152fadfc9ce3ef
    
    Bug 3107933
    Add support for pread64/pwrite64
    
    64-bit pread() and pwrite() is needed for ZipFileRO to be able to read
    ludicrously large ZIP files just in case someone is crazy enough to do
    it.
    
    Also fix a license header that was apparently mangled.
    
    Change-Id: I6819ef8b36e46b63b40749c95717b1ecf9307033
    libc: tag missing functions in system headers.
    
    This matches recent changes in the NDK header.
    We enclose missing functions in #if 0 .. #endif blocks
    with a clear "MISSING" in comments in order to locate
    them later.
    
    Change-Id: I87b3a62e777897e75c9243360fb0a82bcc53d9fb
    libc: Add missing pipe2() declaration and implementation.
    
    Change-Id: Iacb914bd6ac5adc60c5671e6fef680ede21f9b0c
    Fix pwrite to take a const void* instead of void* for the buffer.
    
    Change-Id: I10b315946b8f8f7e34825410dfef37e0220edbee
    libc: make lseek64 proto be glibc compatible (loff_t -> off64_t)
    
    Change-Id: Ib79b99be9ca8d4b1f95ceeba416b6abc04187c3c
    Signed-off-by: Dima Zavin <dima@android.com>
    libc: add missing truncate() declaration
    
    Change-Id: Icb3601bbc9365b75b05ff443a39192f9cd3cbfb7
    pthread: introduce pthread_setname_np() as a mean to give names to threads
    
    ... so that each cloned process at the kernel level can be named
    independently. Tools like 'top' can display the CPU/memory statistics
    for each process's thread if "Show Threads" mode is on.
    
    With this function in place, we can convert dalvik/Thread.c setThreadName()
    function over this function. This feature ought to be provided by the
    underlying C library and not coded directly in Dalvik.
    
    Change-Id: Ifa997665dbaa114e0b126f8c667708be9a4137fd
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    Add implementation of fdprintf, clearenv, and stubs for ttyname_r, *usershell
    
    Change-Id:      I5fe7e8b6ee5edbb49e707c3b6737a58563781fa3
    Fix usleep(3) return type to be POSIX-compliant.
    
    POSIX usleep(3) returns 0 on successful completion, -1 otherwise:
      http://www.opengroup.org/onlinepubs/007908799/xsh/usleep.html
    
    This was found by an external user porting native code:
      http://groups.google.com/group/android-porting/browse_thread/thread/674848f001db0292
    Add a GNU-compatible TEMP_FAILURE_RETRY.
    
    I wondered about #ifndef, but the other macros in here don't use it.
    
    I also wondered about __GNUC__, since this macro uses two GCC extensions.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add fts, err, and sys/queue for grep
    
    Change-Id:      Id47514a1812d828e95efa2fab0e9c15c5b682b58
    termios: add tcdrain
    
    Change-Id: I05c0007f7bcc6ef5295c32f86fafbf1ad31e07fa
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    disable _FORTIFY_SOURCE under clang
    
    Clang and _FORTIFY_SOURCE are just plain incompatible with
    each other.  First of all, clang doesn't understand the
    __attribute__((gnu_inline)) header. Second of all,
    Clang doesn't have support for __builtin_va_arg_pack()
    and __builtin_va_arg_pack_len() (see
    http://clang.llvm.org/docs/UsersManual.html#c_unimpl_gcc)
    
    Until we can resolve these issues, don't even try using
    _FORTIFY_SOURCE under clang.
    
    Change-Id: I81c2b8073bb3276fa9a4a6b93c427b641038356a
    FORTIFY_SOURCE: introduce __BIONIC_FORTIFY_UNKNOWN_SIZE macro
    
    Replace all occurances of "(size_t) -1" with a
    __BIONIC_FORTIFY_UNKNOWN_SIZE macro.
    
    Change-Id: I0b188f6cf31417d2dbef0e1bd759de3f9782873a
    FORTIFY_SOURCE: add fgets support.
    
    Change-Id: I8c3410a90c71a3336c4ac8581618fa9330edf5e3
    FORTIFY_SOURCE: add sprintf / vsprintf support
    
    sprintf FORTIFY_SOURCE protections are not available
    on clang.
    
    Also add various __attribute__s to stdio functions.
    
    Change-Id: I936d1f9e55fe53a68885c4524b7b59e68fed218d
    FORTIFY_SOURCE: add snprintf, vsnprintf
    
    Add _FORTIFY_SOURCE support for snprintf, vsnprintf
    
    At this time, we opt out of these protections for clang, as clang
    does not implement __builtin_va_arg_pack().
    
    http://clang.llvm.org/docs/UsersManual.html#c_unimpl_gcc
    
    Change-Id: I73ebe5ec8dad1dca8898a76d6afb693a25f75375
    Allow C++ to call fdprintf
    
    Change-Id: I1adb7b165ab9f62eaee4e7a9108e8b461350b347
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    libc: tag missing functions in system headers.
    
    This matches recent changes in the NDK header.
    We enclose missing functions in #if 0 .. #endif blocks
    with a clear "MISSING" in comments in order to locate
    them later.
    
    Change-Id: I87b3a62e777897e75c9243360fb0a82bcc53d9fb
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    Add implementation of fdprintf, clearenv, and stubs for ttyname_r, *usershell
    
    Change-Id:      I5fe7e8b6ee5edbb49e707c3b6737a58563781fa3
    Added a comment.
    
    The structs for stdin/stdout/stderr are formed with a static initializer
    that needs to be updated if something in FILE is changed.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: make atoi, atol, and atoll pure functions
    
    Change-Id: Ib831c079c865929b6c91d42f35e117f2e974808f
    Add the posix_memalign(3) function to bionic
    
    The posix_memalign(3) function is very similar to the traditional
    memalign(3) function, but with better error reporting and a guarantee
    that the memory it allocates can be freed.  In bionic, memalign(3)
    allocated memory can be freed, so posix_memalign(3) is just a wrapper
    around memalign(3).
    
    Change-Id: I62ee908aa5ba6b887d8446a00d8298d080a6a299
    Add the posix_memalign(3) function to bionic
    
    The posix_memalign(3) function is very similar to the traditional
    memalign(3) function, but with better error reporting and a guarantee
    that the memory it allocates can be freed.  In bionic, memalign(3)
    allocated memory can be freed, so posix_memalign(3) is just a wrapper
    around memalign(3).
    
    Change-Id: I62ee908aa5ba6b887d8446a00d8298d080a6a299
    Add mkdtemp() prototype to stdlib.h.
    
    The mkdtemp() function is implemented in libc/stdio/mktemp.c but not
    exposed in stdlib.h. This change adds the prototype to stdlib.h.
    
    Change-Id: I5a98650c665d2e45b2cf6ed3382742f7bdc7c88a
    libc: tag missing functions in system headers.
    
    This matches recent changes in the NDK header.
    We enclose missing functions in #if 0 .. #endif blocks
    with a clear "MISSING" in comments in order to locate
    them later.
    
    Change-Id: I87b3a62e777897e75c9243360fb0a82bcc53d9fb
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    Remove a gcc-4.5 compilation warning:
    bionic/libc/include/../include/stdlib.h: In function 'int grantpt(int)':
    bionic/libc/include/../include/stdlib.h:138:23: warning: parameter '__fd' set but not used [-Wunused-but-set-parameter]
    
    By adding __attribute((unused)) to __fd, the warning is gone, and this
    attribute is compatible with gcc-4.4.0, gcc-4.3.1 gcc-4.2.1.
    There is no any side effect.
    
    Change-Id: I385f0f4da1013ffd1499e391eac9123aafe1f7a5
    Remove a gcc-4.5 compilation warning:
    bionic/libc/include/../include/stdlib.h: In function 'int grantpt(int)':
    bionic/libc/include/../include/stdlib.h:138:23: warning: parameter '__fd' set but not used [-Wunused-but-set-parameter]
    
    By adding __attribute((unused)) to __fd, the warning is gone, and this
    attribute is compatible with gcc-4.4.0, gcc-4.3.1 gcc-4.2.1.
    There is no any side effect.
    
    Change-Id: Id9d2b0aeefdd9c37132da0f00c48387f7d897e83
    Fix ptsname_r(3) return type to match glibc
    
    The gHardy man pages specify the return type of ptsname_r to be char*, but the
    return value to be 0 on success, negative on error and the gHardy stdlib.h
    defines extern int ptsname_r(...).
    
    Busybox telnetd fails to run successfully without this change.
    Revert "Add qsort_r() implementation to the C library."
    
    This reverts commit 754c178ae551aedcbbfd3bfd1c1c3b710d9ad989.
    
    Turns out we don't need it afterall (needed a stable sort anyways).
    So, we'll make that change in the dev branch instead.
    Add qsort_r() implementation to the C library.
    
    NOTE: This replaces qsort.c with the FreeBSD version. While
          the patch changes the source, it should not alter the
          implementation that should use the exact same algorithm.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    _FORTIFY_SOURCE: add memset / bzero support
    
    Add _FORTIFY_SOURCE support for the following functions:
    
    * memset
    * bzero
    
    Move the __BIONIC_FORTIFY_INLINE definition to cdefs.h so it
    can be used from multiple header files.
    
    Change-Id: Iead4d5e35de6ec97786d58ee12573f9b11135bb7
    Make sure size_t is defined before used in strings.h
    
    Otherwise, including strings.h as the first file in a C file yields errors.
    
    This fixes issue 3332.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Update MS_ mount flags, define unshare() syscall.
    
    (cherry-pick of 82393decdfc6b0383054fb5d2f54725bbee88b8c.)
    
    Bug: 6925012
    Change-Id: I4f962d8975ad62ff4b9983150f9e481796092b9d
    Update MS_ mount flags, define unshare() syscall.
    
    Bug: 6925012
    Change-Id: I4ad79b4bccb7737d4dc704476cdb5795d124f53e
    <sched.h>: Add sched_getcpu() and cpu_set_t
    
    This adds the cpu_set_t type definition and related functions
    and macros used to handle CPU thread affinity.
    
      sched_getcpu()
      sched_setaffinity()
      sched_getaffinity()
    
    Change-Id: If382ecafde8926341a88478062b275553645065b
    libc: tag missing functions in system headers.
    
    This matches recent changes in the NDK header.
    We enclose missing functions in #if 0 .. #endif blocks
    with a clear "MISSING" in comments in order to locate
    them later.
    
    Change-Id: I87b3a62e777897e75c9243360fb0a82bcc53d9fb
    Implement clone() C library function properly.
    
    Only provide an implementation for ARM at the moment, since
    it requires specific assembly fragments (the standard syscall
    stubs cannot be used because the child returns in a different
    stack).
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    New additions/bug fixes required/found when porting perf.
    
    New functions:
            tfind
            tsearch
            tdelete
            twalk
            tdestroy (GNU extension)
    
    Bug fix: the current implementation for realpath would crash
            if the second argument (resolved_path) is NULL.
    
    New headers:
            ar.h
            search.h
    
    Change-Id: Ib6c1e42fc186a6d597a6e5a9692b16acaa155804
    mntent.h requires stdio.h
    
    Change-Id:      If69f64cf088dedb19602bf47627d03400abb9095
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: remove C++ comments from public headers.
    
    Change-Id: I4af84f912062cd2ff34711c25122fb323f20c032
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: tag missing functions in system headers.
    
    This matches recent changes in the NDK header.
    We enclose missing functions in #if 0 .. #endif blocks
    with a clear "MISSING" in comments in order to locate
    them later.
    
    Change-Id: I87b3a62e777897e75c9243360fb0a82bcc53d9fb
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add fts, err, and sys/queue for grep
    
    Change-Id:      Id47514a1812d828e95efa2fab0e9c15c5b682b58
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Implement scandir() for OProfile.
    Initial Contribution
    Import change from ctype.h revision 1.20 from openbsd
    
    Fixes builds with gcc >= 4.3 with -std=gnu99
    
    Change-Id:      I8729b7f4237fd7a99a82b2fe60573a7afe66b435
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    added missing ether_aton and ether_ntoa
    
    Change-Id: I32ee448abde4d5693d393030ed77ddc6d2ad1dfc
    Revert "added missing ether_aton and ether_ntoa"
    
    This reverts commit 4032c1e2dfcc99613fe3e509a8153191e35aec12.
    added missing ether_aton and ether_ntoa
    
    Change-Id: I32ee448abde4d5693d393030ed77ddc6d2ad1dfc
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    add net/ethernet.h stub
    
    
    Some externals tend to use net/ethernet.h. Most of which is in net/if_ether.h.
    
    Change-Id: I465d18136b565e56a4bd6678238fe0afef25d913
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Update the kernel headers to match external/kernel-headers.
    
    Note that the Linux kernel handed over responsibility for most of the
    socket constants to glibc some time ago. Someone had updated our
    external/kernel-headers file but not regenerated the bionic headers,
    so this change copies the missing stuff from the old bionic <linux/socket.h>
    into <sys/socket.h>. This is what glibc does.
    
    I've hacked a few of the other files to #include <sys/socket.h> for
    backward compatibility, but even so this requires numerous other
    changes to switch people over from direct inclusion of <linux/...> headers.
    
    Change-Id: I0e4af64e631d3cef911a31d90f2f806e058278a0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Update the kernel headers to match external/kernel-headers.
    
    Note that the Linux kernel handed over responsibility for most of the
    socket constants to glibc some time ago. Someone had updated our
    external/kernel-headers file but not regenerated the bionic headers,
    so this change copies the missing stuff from the old bionic <linux/socket.h>
    into <sys/socket.h>. This is what glibc does.
    
    I've hacked a few of the other files to #include <sys/socket.h> for
    backward compatibility, but even so this requires numerous other
    changes to switch people over from direct inclusion of <linux/...> headers.
    
    Change-Id: I0e4af64e631d3cef911a31d90f2f806e058278a0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix implementation of generic atomic operations
    
    Change-Id: Ie1ea5aacc561e2d6d40125d2952ed0e9116b7b0d
    libc: provide atomic operations will full barriers for NDK apps.
    
    __atomic_cmpxchg and other related atomic operations did not
    provide memory barriers, which can be a problem for non-platform
    code that links against them when it runs on multi-core devices.
    
    This patch does two things to fix this:
    
    - It modifies the existing implementation of the functions
      that are exported by the C library to always provide
      full memory barriers. We need to keep them exported by
      the C library to prevent breaking existing application
      machine code.
    
    - It also modifies <sys/atomics.h> to only export
      always-inlined versions of the functions, to ensure that
      any application code compiled against the new header will
      not rely on the platform version of the functions.
    
      This ensure that said machine code will run properly on
      all multi-core devices.
    
    This is based on the GCC built-in sync primitives.
    
    The end result should be only slightly slower than the
    previous implementation.
    
    Note that the platform code does not use these functions
    at all. A previous patch completely removed their usage in
    the pthread and libstdc++ code.
    
    + rename arch-arm/bionic/atomics_arm.S to futex_arm.S
    + rename arch-x86/bionic/atomics_x86.S to futex_x86.S
    + remove arch-x86/include/sys/atomics.h which already
      provided inlined functions to the x86 platform.
    
    Change-Id: I752a594475090cf37fa926bb38209c2175dda539
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    libc: remove C++ comments from public headers.
    
    Change-Id: I4af84f912062cd2ff34711c25122fb323f20c032
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Update MS_ mount flags, define unshare() syscall.
    
    (cherry-pick of 82393decdfc6b0383054fb5d2f54725bbee88b8c.)
    
    Bug: 6925012
    Change-Id: I4f962d8975ad62ff4b9983150f9e481796092b9d
    Update MS_ mount flags, define unshare() syscall.
    
    Bug: 6925012
    Change-Id: I4ad79b4bccb7737d4dc704476cdb5795d124f53e
    libc: tag missing functions in system headers.
    
    This matches recent changes in the NDK header.
    We enclose missing functions in #if 0 .. #endif blocks
    with a clear "MISSING" in comments in order to locate
    them later.
    
    Change-Id: I87b3a62e777897e75c9243360fb0a82bcc53d9fb
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support to sys/ headers
    
    Change-Id: I32207a1d918e4842da341f6b242ae39c69a83b03
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support to sys/ headers
    
    Change-Id: I32207a1d918e4842da341f6b242ae39c69a83b03
    libc: remove C++ comments from public headers.
    
    Change-Id: I4af84f912062cd2ff34711c25122fb323f20c032
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Update the kernel headers to match external/kernel-headers.
    
    Note that the Linux kernel handed over responsibility for most of the
    socket constants to glibc some time ago. Someone had updated our
    external/kernel-headers file but not regenerated the bionic headers,
    so this change copies the missing stuff from the old bionic <linux/socket.h>
    into <sys/socket.h>. This is what glibc does.
    
    I've hacked a few of the other files to #include <sys/socket.h> for
    backward compatibility, but even so this requires numerous other
    changes to switch people over from direct inclusion of <linux/...> headers.
    
    Change-Id: I0e4af64e631d3cef911a31d90f2f806e058278a0
    MIPS support to sys/ headers
    
    Change-Id: I32207a1d918e4842da341f6b242ae39c69a83b03
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add relro support
    
    Add support for PT_GNU_RELRO. This allows the static linker to
    indicate that certain regions of memory should be marked as
    "read-only" after dynamic linking is complete.
    
    See:
      * http://www.akkadia.org/drepper/nonselsec.pdf (section 6)
      * http://tk-blog.blogspot.com/2009/02/relro-not-so-well-known-memory.html
    
    Note that this change has no effect on Android right now, because
    we don't compile our code with relro enabled.
    
    Change-Id: I6541f8775367e8558b4388f7d105b1ae6e8f046b
    Eliminate duplicate constants
    
    include/elf.h contains basically the same values as
    linux/auxvec.h. Eliminate dups.
    
    include/sys/exec_elf.h contains basically the same
    values as linux/elf.h. Eliminate dups.
    
    Change-Id: I66b8358161bb52223bb657f8f73ba28b324f4fa3
    Eliminate duplicate constants
    
    include/elf.h contains basically the same values as
    linux/auxvec.h. Eliminate dups.
    
    include/sys/exec_elf.h contains basically the same
    values as linux/elf.h. Eliminate dups.
    
    Change-Id: I66b8358161bb52223bb657f8f73ba28b324f4fa3
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add mlockall and munlockall for Google TV.
    
    Change-Id: I10e961d701e74aab07211ec7975f61167e387853
    Add getsid system call to bionic
    
    Add getsid() system call to bionic for
    all architectures. This is needed for various tools
    (e.g. perf).
    
    Adding the getsid system call was done in 3 steps:
    () add getsid system call (function name and syscall
    number) to libc/SYSCALLS.TXT
    () generate all necessary headers by calling
    libc/tools/gensyscalls.py. This patch is adding
    the generated files since the build system
    does not call gensyscalls.py.
    () add the system call signature to libc/include/unistd.h
    
    Change-Id: Id69a257e13ec02e1a44085a6b217a3f19ab025b1
    Signed-off-by: Irina Tirdea <irina.tirdea@intel.com>
    Add unshare() syscall.
    
    (cherry-pick of 5467f25f82934d611c60f8bc57a05114f3c1bea0.)
    
    Bug: 6925012
    Change-Id: Ic5ea2fbd606311087de05d7a3594df2fa9b2fef9
    Add unshare() syscall.
    
    Bug: 6925012
    Change-Id: I2530a8f6cea49eb32b60f8f9c4d86963773456ca
    MIPS support to sigsuspend and sigwait routines
    
    Change-Id: I870e798ed7eac5a8c74e5784a670f3a4f24331a9
    Actually set the header guard in "linux-syscalls.h".
    
    Spotted while merging a MIPS change.
    
    Change-Id: I36fb5a07d0bba0c117e9fe9733957bd37ca4b4c0
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    Add faccessat to syscall list
    
    Change-Id: I427a18811089cb280769ac8da3ed8adc00a65a10
    Update kernel headers and add syscall "perf_event_open"
    
    Change-Id: I43f12b727881df002a8524f2738586c043833bae
    remove obsolete SuperH support
    
    We don't have a toolchain anymore, we don't have working original
    kernel headers, and nobody is maintaining this so there is really
    no point in keeping this here. Details of the patch:
    
    - removed code paths from Android.mk files related to the SuperH
      architecture ("sh")
    
    - removed libc/arch-sh, linker/arch-sh, libc/kernel/arch-sh
    
    - simplified libc/SYSCALLS.TXT
    
    - simplified the scripts in libc/tools/ and libc/kernel/tools
    
    Change-Id: I26b0e1422bdc347489e4573e2fbec0e402f75560
    
    Signed-off-by: David 'Digit' Turner <digit@android.com>
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    add personality() system call.
    
    Change-Id: Ie899def8ea1d705930ed83adae1343c1353e7c57
    sreadahead: adding readahead system call into bionic libc
    
    Add bionic libc to support readahead system call.
    This is needed to enable sreadahead to work.
    
    Change-Id: I3856e1a3833db82e6cf42fd34af7631bd40cc723
    Author: Winson Yung <winson.w.yung@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Add tgkill syscall.
    
    Use tgkill instead of tkill to implement pthread_kill.
    This is safer in the event that the thread has already terminated
    and its id has been reused by a different process.
    
    Change-Id: Ied715e11d7eadeceead79f33db5e2b5722954ac9
    Add support for the utimensat(2) syscall to bionic.
    
    The kernel has supported this syscall for quite some time now,
    but bionic did not.  Now that there is a need for it, let's
    add it to bionic.
    
    Change-Id: Ifcef3e46f1438d79435b600c4e6063857ab16903
    libc: Update auto-gen scripts
    
    Make the scripts use external/kernel-headers/original by default.
    
    clean_header.py:  Document -k<path>, add -d<path>
    find_headers.py:  Make kernel config files optional
    update_all.py:    Allow setting the path to kernel headers on the command-line
    update_all.py:    Better formatting of output on ttys
    update_all.py:    Automatically perform "git add/rm" on affected files.
    SYSCALLS.TXT:     Fix typo in __socketcall definition.
    checksyscalls.py: Add support for superH architecture in the checks.
    gensyscalls.py:   Automatically perform "git add/rm" on affected files.
    cpp.py:           Fixed a bug that prevented certain type definitions to
                      be kept in the generated clean header (e.g.
                      struct ethtool_drvinfo in <linux/ethtool.h>)
    
    All scripts will use the content of external/kernel-headers/original by default now.
    
    The generated code removes all empty lines and trailing whitespace. This is useful
    to ensure a unified output even if we change the parser again in the future.
    
    The top-level disclaimer has been edited with update instructions to regenerate
    the headers when needed.
    
    Also, a warning is now inserted every 8th line in the final output:
    
    /* WARNING: DO NOT EDIT, AUTO-GENERATED CODE - SEE TOP FOR INSTRUCTIONS */
    
    Changes under kernel/arch-arm and kernel/arch-x86 should correspond to whitespace
    differences and additionnal struct definitions that were missed by the previous
    parser implementation.
    
    Change-Id: Icd1c056bacd766759f3e9b7bb5d63a246f3d656a
    
    WARNING: If you run these script, do not submit the result to gerrit for now.
             It seems there are discrepancies between the content of original headers
             and those currently commited under bionic/libc/kernel/.
    
             (This problem is the main motivation to insert the warning repeatedly).
    
             Current list of issues:
    
               - Missing SuperH headers (i.e. external/kernel-headers/original/asm-sh)
    libc: Add ftruncate64 and improve 64-bit parameter syscall handling.
    
    This patch improves the handling of 64-bit parameters in syscalls on ARM.
    The ARM EABI mandates that 64-bit quantities be passed in even/odd register
    pairs, which requires special treatment.
    
    This allows us to simplify our implementations of pread() and pwrite()
    and remove the C stubs for pread64() and pwrite64().
    
    Also add ftruncate64() to <unistd.h>
    
    Change-Id: I407e2fd223ba0093dd2d0b04c6152fadfc9ce3ef
    
    Bug 3107933
    <sched.h>: Add sched_getcpu() and cpu_set_t
    
    This adds the cpu_set_t type definition and related functions
    and macros used to handle CPU thread affinity.
    
      sched_getcpu()
      sched_setaffinity()
      sched_getaffinity()
    
    Change-Id: If382ecafde8926341a88478062b275553645065b
    libc: add <sys/eventfd.h> and corresponding implementations.
    
    Change-Id: Ide040884c456190226e580513099fdb8377e015b
    libc: Add missing fdatasync() implementation
    
    Change-Id: I04bb655d77e414021e1f2a973329167ad76ca1c4
    libc: Add missing pipe2() declaration and implementation.
    
    Change-Id: Iacb914bd6ac5adc60c5671e6fef680ede21f9b0c
    Add eventfd system call support
    Revert "Set SA_RESTORER in sigaction()"
    
    This reverts commit e4fa46e75cd0d433b5c6c064720ed7e195cba7c8.
    Add missing sysinfo() implementation (already declared in <sys/sysinfo.h>) - DO NOT MERGE
    
    Change-Id: Iac4eb5911ffe4a7ab72b84df44e907685ac816af
    Add missing sysinfo() implementation (already declared in <sys/sysinfo.h>)
    
    Change-Id: Ie9168238c3a8e77daab4f39939756d4c53d8af37
    Set SA_RESTORER in sigaction()
    
    GDB looks for specific opcode sequences when trying to recognize a stack
    frame as a signal trampoline.  The sequences it looks for happen to be those
    created when SA_RESTORER is set, since glibc always sets a restorer.  This
    patch does the same here, so that the trampolines can be correctly identified.
    
    Change-Id: I0ac574a68818cb24d939c3527f3aaeb04b853d04
    add sigaltstack syscall
    bionic: syscalls: Add ioprio_set/ioprio_get syscall wrappers
    
    Signed-off-by: San Mehat <san@google.com>
    added syscalls for SuperH which automatically generate by gensyscalls.py
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@132276
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: tag missing functions in system headers.
    
    This matches recent changes in the NDK header.
    We enclose missing functions in #if 0 .. #endif blocks
    with a clear "MISSING" in comments in order to locate
    them later.
    
    Change-Id: I87b3a62e777897e75c9243360fb0a82bcc53d9fb
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add tty defaults to bionic
    
    Add ttydefaults.h bionic. Some userspace programs (e.g. perf) need the
    definitions from this file. This header file is copied from NetBSD
    (http://netbsd.org/) under the NetBSD Foundation's (TNF) license (“2 clause”
    Berkeley-style license).
    
    Change-Id: I9c862415b52b710f25adb1629a699627cd715775
    Signed-off-by: Irina Tirdea <irina.tirdea@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix <sys/klog.h> to correspond to the kernel operations.
    
    This makes the constants correspond to those in the Linux kernel's
    include/linux/syslog.h, but keeping our old badly-named constants for
    source compatibility.
    
    Change-Id: Ia47d1299205754cbfffd29ed48b497b53d1edaae
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add definition of rlim_t
    
    Change-Id:      Ie8c2451360cbcce9fc1587528a95aca09a03d0de
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Error numbers are target specific.
    
    Use the system supplied error numbers when mapping error numbers to messages.
    
    Change-Id: I520556fa3e2ff668fdc4eda36ad31491fbb48ea8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Fix strerror(3) for errno 0.
    
    Everyone else's C library says "Success". We say "Unknown error: 0", which
    isn't really true.
    
    Change-Id: I9f9054779123eda996634e5f7a277789b6805809
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    disable _FORTIFY_SOURCE under clang
    
    Clang and _FORTIFY_SOURCE are just plain incompatible with
    each other.  First of all, clang doesn't understand the
    __attribute__((gnu_inline)) header. Second of all,
    Clang doesn't have support for __builtin_va_arg_pack()
    and __builtin_va_arg_pack_len() (see
    http://clang.llvm.org/docs/UsersManual.html#c_unimpl_gcc)
    
    Until we can resolve these issues, don't even try using
    _FORTIFY_SOURCE under clang.
    
    Change-Id: I81c2b8073bb3276fa9a4a6b93c427b641038356a
    Revert "Fix the clang build: this compiler doesn't support the gnu_inline function attribute"
    
    This reverts commit 4f1f149c3757c594f9ff987e5ddd919c3e7dba10.
    Revert "Fix the clang build: this compiler doesn't support the gnu_inline function attribute"
    
    This reverts commit 4f1f149c3757c594f9ff987e5ddd919c3e7dba10.
    Fix the clang build: this compiler doesn't support the gnu_inline function attribute
    
    Recent clang compiler doesn't have gnu_inline working. When frameworks/rs
    is compiled with clang instead of gcc, it no longer works. Will be fixed
    by this patch.
    
    Change-Id: I8b281a1305151909e18958b73914ea27343cb4cd
    FORTIFY_SOURCE: introduce __BIONIC_FORTIFY_UNKNOWN_SIZE macro
    
    Replace all occurances of "(size_t) -1" with a
    __BIONIC_FORTIFY_UNKNOWN_SIZE macro.
    
    Change-Id: I0b188f6cf31417d2dbef0e1bd759de3f9782873a
    _FORTIFY_SOURCE: add memset / bzero support
    
    Add _FORTIFY_SOURCE support for the following functions:
    
    * memset
    * bzero
    
    Move the __BIONIC_FORTIFY_INLINE definition to cdefs.h so it
    can be used from multiple header files.
    
    Change-Id: Iead4d5e35de6ec97786d58ee12573f9b11135bb7
    string.h: add __attribute__ ((pure)) to string functions
    
    cdefs.h: Introduce the __purefunc attribute, which allows us to mark
    certain functions as being "pure".
    
    http://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html
    
      Many functions have no effects except the return value and their
      return value depends only on the parameters and/or global variables.
      Such a function can be subject to common subexpression elimination
      and loop optimization just as an arithmetic operator would be.
    
    string.h: Mark many commently used string functions as "pure", to
    allow for additional compiler optimizations.
    
    Change-Id: I42961f90f822b6dbcbc3fd72cdbe774a7adc8785
    libc: <sys/cdefs.h>: Fix the use of __STDC_VERSION__ from C++
    
    See http://code.google.com/p/android/issues/detail?id=14627 for context.
    
    Change-Id: Idb10b675667d0d6e64dcb1d382be11e45aa6f4c4
    libc: Add <android/api-level.h>
    
    Add a new header that defines __ANDROID_API__ as a constant integer
    corresponding to the current native API level. This header is included
    by <sys/cdefs.h>
    
    Change-Id: Ib4774e247b395991266245815a24292afc919848
    NOTE: This header is already provided by the NDK's platform headers.
          for levels 3 to 9.
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: add <sys/eventfd.h> and corresponding implementations.
    
    Change-Id: Ide040884c456190226e580513099fdb8377e015b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: fix typo in waitid() declaration.
    
    The implementation file uses the correct spelling.
    
    Change-Id: I572e336f8695a9754267c8d2e0a67b1b69bacb06
    libc: Add missing waitid() implementation.
    
    Change-Id: I312ee608dbf9249e4886a10d45d13e3cda8a9042
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: Define new symbol visibility macros
    
    This patch defines a few new macros that can be used to control the
    visibility of symbols exported by the C library:
    
    - ENTRY_PRIVATE() can be used in assembly sources to indicate
      that an assembler function should have "hidden" visibility, i.e.
      will never be exported by the C library's shared library.
    
      This is the equivalent of using __LIBC_HIDDEN__ for a C function,
      but ENTRY_PRIVATE() works like ENTRY(), and must be used with
      END() to tag the end of the function.
    
    - __LIBC_ABI_PUBLIC__ can be used to tag a C functions as being
      part of the C library's public ABI. This is important for a
      few functions that must be exposed by the NDK to maintain
      binary compatibility.
    
      Once a symbol has been tagged with this macro, it shall
      *never* be removed from the library, even if it becomes
      directly unused due to implementation changes
      (e.g. __is_threaded).
    
    - __LIBC_ABI_PRIVATE__ can be used for C functions that should
      always be exported by the C library because they are used by
      other libraries in the platform, but should not be exposed
      by the NDK. It is possible to remove such symbols from the
      implementation if all callers are also modified.
    
    + Add missing END() assembly macro for x86
    
    Change-Id: Ia96236ea0dbec41d57bea634b39d246b30e5e234
    Hide the symbol of helper function __libc_android_abort
    
    Ideally __libc_android_abort would be static, but it could not be
    because gcc would not allow calling a static function from an asm
    statement.  Instead, using GCC visibility is work around.
    
    Change-Id: Ifff6b9957ca3f0fc03c75c3e42582a48d43cefa2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix <sys/epoll.h> and <sys/system_properties.h> to include proper C++ inclusion guards
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: remove C++ comments from public headers.
    
    Change-Id: I4af84f912062cd2ff34711c25122fb323f20c032
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support to sys/ headers
    
    Change-Id: I32207a1d918e4842da341f6b242ae39c69a83b03
    Add support for the utimensat(2) syscall to bionic.
    
    The kernel has supported this syscall for quite some time now,
    but bionic did not.  Now that there is a need for it, let's
    add it to bionic.
    
    Change-Id: Ifcef3e46f1438d79435b600c4e6063857ab16903
    Add Glibc-compatible macro aliases for the nanosecond time accessors in stat structure
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    auto import from //branches/cupcake/...@126645
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    eclair snapshot
    Make IPv6 definitions comply with RFC 3493:
     - Add some definitions to netinet/in6.h
     - Include netinet/in6.h from netinet/in.h
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Eliminate duplicate copies of constants.
    
    sys/personality.h and linux/personality.h contain mostly
    identical contents. Eliminate dups.
    
    Change-Id: Ie786edcb5dca57af7ee5b5fdad2949369f1bc4e4
    add personality() system call.
    
    Change-Id: Ie899def8ea1d705930ed83adae1343c1353e7c57
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add fts, err, and sys/queue for grep
    
    Change-Id:      Id47514a1812d828e95efa2fab0e9c15c5b682b58
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    do not merge. Move property setting from libcutils to bionic.
    
    Backport I110b653a58f3
    
    All the other property stuff is already here.  Property setting was
    only in libcutils previously to leverage a utility function / constant
    or two.
    
    Unfortunately in the process of fixing a race condition we would've
    had to do break abstraction boundaries and put some libc-internal
    details into libcutils so instead of that we'll just move this
    into bionic.
    
    Along with Iee1ca9b7, this now passes:
    
    $ adb shell am instrument -w -e class android.os.SystemPropertiesTest \
      com.android.frameworks.coretests.systemproperties/android.test.InstrumentationTestRunner
    
      Bug: 3511230
    
    Change-Id: I1b588db3344169621e1279ecc0b660cf4e1015d7
    do not merge. Move property setting from libcutils to bionic.
    
    Backport I110b653a58f3
    
    All the other property stuff is already here.  Property setting was
    only in libcutils previously to leverage a utility function / constant
    or two.
    
    Unfortunately in the process of fixing a race condition we would've
    had to do break abstraction boundaries and put some libc-internal
    details into libcutils so instead of that we'll just move this
    into bionic.
    
    Along with Iee1ca9b7, this now passes:
    
    $ adb shell am instrument -w -e class android.os.SystemPropertiesTest \
      com.android.frameworks.coretests.systemproperties/android.test.InstrumentationTestRunner
    
      Bug: 3511230
    
    Change-Id: I1b588db3344169621e1279ecc0b660cf4e1015d7
    Move property setting from libcutils to bionic.
    
    All the other property stuff is already here.  Property setting was
    only in libcutils previously to leverage a utility function / constant
    or two.
    
    Unfortunately in the process of fixing a race condition we would've
    had to do break abstraction boundaries and put some libc-internal
    details into libcutils so instead of that we'll just move this
    into bionic.
    
    Along with Iee1ca9b7, this now passes:
    
    $ adb shell am instrument -w -e class android.os.SystemPropertiesTest \
      com.android.frameworks.coretests.systemproperties/android.test.InstrumentationTestRunner
    
    Bug: 3511230
    Change-Id: I110b653a58f312fbe069dca59892a877ae9bc911
    Fix <sys/epoll.h> and <sys/system_properties.h> to include proper C++ inclusion guards
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: Fix prctl() declaration.
    
    This change fixes the prctl() declaration to match GLibc, and allow us
    to build gcc-4.6 for Android (among other things). Note that this does
    not change the source and binary interfaces.
    
    Change-Id: I3900c957f0da8b3548cbe9da8c41d50099dc19d6
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix typo in SIGTTOU description.
    
    Change-Id: Ie0db3e7df3e1f17b43f5645d027a90603139be2f
    MIPS support to sys/ headers
    
    Change-Id: I32207a1d918e4842da341f6b242ae39c69a83b03
    Add the BSD sys_signame array.
    
    Signed-off-by: Thorsten Glaser <tg@mirbsd.org>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Backwards and forwards compatibility for an upcoming <sys/socket.h> change.
    
    Change-Id: Iba58077a1f057a968eb2283ebba259975925ff4c
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add icmp6.h and ip6.h files from current NetBSD libc.
    
    Change-Id: I6b304dfbefaec74c5fb15b216f38d698a55f0642
    Add icmp6.h and ip6.h files from current NetBSD libc.
    
    Change-Id: I6b304dfbefaec74c5fb15b216f38d698a55f0642
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add IN6ADDR_LOOPBACK_INIT macro to <netinet/in6.h>, as the kernel headers do not provide it anymore.
    
    Change-Id: I5af12b3f38097ed165e64a408253dc375aa605d7
    Backport (simple cherry-pick) 64b6c43379dba176659bc1313b6bb488ac94cfd6
    to gingerbread.
    
    Add a new #define IN6_IS_ADDR_ULA, for testing for Universal Local IPv6 Unicast addresses (ULAs). These replace the old site-local IPv6 addresses.
    Add a new #define IN6_IS_ADDR_ULA, for testing for Universal Local IPv6 Unicast addresses (ULAs). These replace the old site-local IPv6 addresses.
    
    Change-Id: I2656423764569d07b92b8eb8fe6dcad6eba5b0bb
    libc: Add missing declarations in <netinet/in.h>
    
    Add missing declarations:
      INET_ADDRSTRLEN
      IN6_IS_ADDR_MC_NODELOCAL
      IN6_IS_ADDR_MC_GLOBAL
    
    It has been reported that these prevent compilation of the Boost libraries
    with the NDK. The corresponding patch has already been performed under
    development/ndk/platforms/android-3/include.
    
    Change-Id: I4ac514973daf3c06a8ef5538d7df79142a98e562
    eclair snapshot
    Make IPv6 definitions comply with RFC 3493:
     - Add some definitions to netinet/in6.h
     - Include netinet/in6.h from netinet/in.h
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Update the kernel headers to match external/kernel-headers.
    
    Note that the Linux kernel handed over responsibility for most of the
    socket constants to glibc some time ago. Someone had updated our
    external/kernel-headers file but not regenerated the bionic headers,
    so this change copies the missing stuff from the old bionic <linux/socket.h>
    into <sys/socket.h>. This is what glibc does.
    
    I've hacked a few of the other files to #include <sys/socket.h> for
    backward compatibility, but even so this requires numerous other
    changes to switch people over from direct inclusion of <linux/...> headers.
    
    Change-Id: I0e4af64e631d3cef911a31d90f2f806e058278a0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    DO NOT MERGE: libc: enable IPTOS_MINCOST, fixup gethostbyaddr() proto.
    
    DO NOT MERGE: pulled in from master for iptables v1.4.11 update
    
    Make netinet/ip.h have IPTOS_MINCOST which matches what
      kernel/common/linux/ip.h has to say.
    Fixup gethostbyaddr() 1st arg to match what man has to say.
    
    Change-Id: Iff9647d4a46ea88b1fc32163eb69bb9b27cdf370
    libc: enable IPTOS_MINCOST, fixup gethostbyaddr() proto.
    
    Make netinet/ip.h have IPTOS_MINCOST which matches what
      kernel/common/linux/ip.h has to say.
    Fixup gethostbyaddr() 1st arg to match what man has to say.
    
    Change-Id: Iff9647d4a46ea88b1fc32163eb69bb9b27cdf370
    libc: enable IPTOS_MINCOST, fixup gethostbyaddr() proto.
    
    Make netinet/ip.h have IPTOS_MINCOST which matches what
      kernel/common/linux/ip.h has to say.
    Fixup gethostbyaddr() 1st arg to match what man has to say.
    
    Change-Id: Iff9647d4a46ea88b1fc32163eb69bb9b27cdf370
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Update the kernel headers to match external/kernel-headers.
    
    Note that the Linux kernel handed over responsibility for most of the
    socket constants to glibc some time ago. Someone had updated our
    external/kernel-headers file but not regenerated the bionic headers,
    so this change copies the missing stuff from the old bionic <linux/socket.h>
    into <sys/socket.h>. This is what glibc does.
    
    I've hacked a few of the other files to #include <sys/socket.h> for
    backward compatibility, but even so this requires numerous other
    changes to switch people over from direct inclusion of <linux/...> headers.
    
    Change-Id: I0e4af64e631d3cef911a31d90f2f806e058278a0
    Include the Linux ipv6.h header from netinet/in.h, to get things like in6_pktinfo.
    
    Change-Id: I4a3c2035ff8e2846352345580756a1bdc2768ec4
    libc: Add missing declarations in <netinet/in.h>
    
    Add missing declarations:
      INET_ADDRSTRLEN
      IN6_IS_ADDR_MC_NODELOCAL
      IN6_IS_ADDR_MC_GLOBAL
    
    It has been reported that these prevent compilation of the Boost libraries
    with the NDK. The corresponding patch has already been performed under
    development/ndk/platforms/android-3/include.
    
    Change-Id: I4ac514973daf3c06a8ef5538d7df79142a98e562
    eclair snapshot
    Make IPv6 definitions comply with RFC 3493:
     - Add some definitions to netinet/in6.h
     - Include netinet/in6.h from netinet/in.h
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add icmp6.h and ip6.h files from current NetBSD libc.
    
    Change-Id: I6b304dfbefaec74c5fb15b216f38d698a55f0642
    Add icmp6.h and ip6.h files from current NetBSD libc.
    
    Change-Id: I6b304dfbefaec74c5fb15b216f38d698a55f0642
    libc: Add <android/api-level.h>
    
    Add a new header that defines __ANDROID_API__ as a constant integer
    corresponding to the current native API level. This header is included
    by <sys/cdefs.h>
    
    Change-Id: Ib4774e247b395991266245815a24292afc919848
    NOTE: This header is already provided by the NDK's platform headers.
          for levels 3 to 9.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    eclair snapshot
    Make IPv6 definitions comply with RFC 3493:
     - Add some definitions to netinet/in6.h
     - Include netinet/in6.h from netinet/in.h
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Import include/arpa/telnet.h from BSD
    
    Change-Id:      I684251bfb8ef04f0706866ea55dceebcd2a5b0e1
    Add mlockall and munlockall for Google TV.
    
    Change-Id: I10e961d701e74aab07211ec7975f61167e387853
    Add getsid system call to bionic
    
    Add getsid() system call to bionic for
    all architectures. This is needed for various tools
    (e.g. perf).
    
    Adding the getsid system call was done in 3 steps:
    () add getsid system call (function name and syscall
    number) to libc/SYSCALLS.TXT
    () generate all necessary headers by calling
    libc/tools/gensyscalls.py. This patch is adding
    the generated files since the build system
    does not call gensyscalls.py.
    () add the system call signature to libc/include/unistd.h
    
    Change-Id: Id69a257e13ec02e1a44085a6b217a3f19ab025b1
    Signed-off-by: Irina Tirdea <irina.tirdea@intel.com>
    Add unshare() syscall.
    
    (cherry-pick of 5467f25f82934d611c60f8bc57a05114f3c1bea0.)
    
    Bug: 6925012
    Change-Id: Ic5ea2fbd606311087de05d7a3594df2fa9b2fef9
    Add unshare() syscall.
    
    Bug: 6925012
    Change-Id: I2530a8f6cea49eb32b60f8f9c4d86963773456ca
    Add faccessat to syscall list
    
    Change-Id: I427a18811089cb280769ac8da3ed8adc00a65a10
    Update kernel headers and add syscall "perf_event_open"
    
    Change-Id: I43f12b727881df002a8524f2738586c043833bae
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    add personality() system call.
    
    Change-Id: Ie899def8ea1d705930ed83adae1343c1353e7c57
    sreadahead: adding readahead system call into bionic libc
    
    Add bionic libc to support readahead system call.
    This is needed to enable sreadahead to work.
    
    Change-Id: I3856e1a3833db82e6cf42fd34af7631bd40cc723
    Author: Winson Yung <winson.w.yung@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Add support for the utimensat(2) syscall to bionic.
    
    The kernel has supported this syscall for quite some time now,
    but bionic did not.  Now that there is a need for it, let's
    add it to bionic.
    
    Change-Id: Ifcef3e46f1438d79435b600c4e6063857ab16903
    libc: Add ftruncate64 and improve 64-bit parameter syscall handling.
    
    This patch improves the handling of 64-bit parameters in syscalls on ARM.
    The ARM EABI mandates that 64-bit quantities be passed in even/odd register
    pairs, which requires special treatment.
    
    This allows us to simplify our implementations of pread() and pwrite()
    and remove the C stubs for pread64() and pwrite64().
    
    Also add ftruncate64() to <unistd.h>
    
    Change-Id: I407e2fd223ba0093dd2d0b04c6152fadfc9ce3ef
    
    Bug 3107933
    <sched.h>: Add sched_getcpu() and cpu_set_t
    
    This adds the cpu_set_t type definition and related functions
    and macros used to handle CPU thread affinity.
    
      sched_getcpu()
      sched_setaffinity()
      sched_getaffinity()
    
    Change-Id: If382ecafde8926341a88478062b275553645065b
    Remove duplicate item
    
    This elimates the makefile warning at the beginning of each build:
    libc_common_intermediates/arch-arm/syscalls/eventfd.o' given more than once in the same rule.
    
    Change-Id: I25cc0c373d55b5036dd17811a595c097fd6ca69a
    libc: add <sys/eventfd.h> and corresponding implementations.
    
    Change-Id: Ide040884c456190226e580513099fdb8377e015b
    libc: Add missing waitid() implementation.
    
    Change-Id: I312ee608dbf9249e4886a10d45d13e3cda8a9042
    libc: Add missing fdatasync() implementation
    
    Change-Id: I04bb655d77e414021e1f2a973329167ad76ca1c4
    libc: Add missing pipe2() declaration and implementation.
    
    Change-Id: Iacb914bd6ac5adc60c5671e6fef680ede21f9b0c
    Add eventfd system call support
    Revert "Set SA_RESTORER in sigaction()"
    
    This reverts commit e4fa46e75cd0d433b5c6c064720ed7e195cba7c8.
    libc: fix fstatfs() implementation.
    
    The syscall expects the size of the buffer as the second argument.
    
    Change-Id: I99ede2fec7fcd385ca03ff022c2cffa4297bea8d
    Add missing sysinfo() implementation (already declared in <sys/sysinfo.h>) - DO NOT MERGE
    
    Change-Id: Iac4eb5911ffe4a7ab72b84df44e907685ac816af
    Add missing sysinfo() implementation (already declared in <sys/sysinfo.h>)
    
    Change-Id: Ie9168238c3a8e77daab4f39939756d4c53d8af37
    Set SA_RESTORER in sigaction()
    
    GDB looks for specific opcode sequences when trying to recognize a stack
    frame as a signal trampoline.  The sequences it looks for happen to be those
    created when SA_RESTORER is set, since glibc always sets a restorer.  This
    patch does the same here, so that the trampolines can be correctly identified.
    
    Change-Id: I0ac574a68818cb24d939c3527f3aaeb04b853d04
    bonic: libc: cpuacct support for setuid functions
    
    Any of the setuid functions now updates /acct/uid/ with its own tid
    before changing users. This is so we can properly account for cpu time
    per uid.
    
    Change-Id: I34186cf4d5228cac8439e582a9e26c01ef3011e4
    Signed-off-by: Mike Chan <mike@android.com>
    add sigaltstack syscall
    bionic: syscalls: Add ioprio_set/ioprio_get syscall wrappers
    
    Signed-off-by: San Mehat <san@google.com>
    Implement clone() C library function properly.
    
    Only provide an implementation for ARM at the moment, since
    it requires specific assembly fragments (the standard syscall
    stubs cannot be used because the child returns in a different
    stack).
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@132276
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add getsid system call to bionic
    
    Add getsid() system call to bionic for
    all architectures. This is needed for various tools
    (e.g. perf).
    
    Adding the getsid system call was done in 3 steps:
    () add getsid system call (function name and syscall
    number) to libc/SYSCALLS.TXT
    () generate all necessary headers by calling
    libc/tools/gensyscalls.py. This patch is adding
    the generated files since the build system
    does not call gensyscalls.py.
    () add the system call signature to libc/include/unistd.h
    
    Change-Id: Id69a257e13ec02e1a44085a6b217a3f19ab025b1
    Signed-off-by: Irina Tirdea <irina.tirdea@intel.com>
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add mlockall and munlockall for Google TV.
    
    Change-Id: I10e961d701e74aab07211ec7975f61167e387853
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    <sched.h>: Add sched_getcpu() and cpu_set_t
    
    This adds the cpu_set_t type definition and related functions
    and macros used to handle CPU thread affinity.
    
      sched_getcpu()
      sched_setaffinity()
      sched_getaffinity()
    
    Change-Id: If382ecafde8926341a88478062b275553645065b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add mlockall and munlockall for Google TV.
    
    Change-Id: I10e961d701e74aab07211ec7975f61167e387853
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    add sigaltstack syscall
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    libc: Add ftruncate64 and improve 64-bit parameter syscall handling.
    
    This patch improves the handling of 64-bit parameters in syscalls on ARM.
    The ARM EABI mandates that 64-bit quantities be passed in even/odd register
    pairs, which requires special treatment.
    
    This allows us to simplify our implementations of pread() and pwrite()
    and remove the C stubs for pread64() and pwrite64().
    
    Also add ftruncate64() to <unistd.h>
    
    Change-Id: I407e2fd223ba0093dd2d0b04c6152fadfc9ce3ef
    
    Bug 3107933
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    <sched.h>: Add sched_getcpu() and cpu_set_t
    
    This adds the cpu_set_t type definition and related functions
    and macros used to handle CPU thread affinity.
    
      sched_getcpu()
      sched_setaffinity()
      sched_getaffinity()
    
    Change-Id: If382ecafde8926341a88478062b275553645065b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add unshare() syscall.
    
    (cherry-pick of 5467f25f82934d611c60f8bc57a05114f3c1bea0.)
    
    Bug: 6925012
    Change-Id: Ic5ea2fbd606311087de05d7a3594df2fa9b2fef9
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add support for the utimensat(2) syscall to bionic.
    
    The kernel has supported this syscall for quite some time now,
    but bionic did not.  Now that there is a need for it, let's
    add it to bionic.
    
    Change-Id: Ifcef3e46f1438d79435b600c4e6063857ab16903
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    libc: Add missing pipe2() declaration and implementation.
    
    Change-Id: Iacb914bd6ac5adc60c5671e6fef680ede21f9b0c
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    <sched.h>: Add sched_getcpu() and cpu_set_t
    
    This adds the cpu_set_t type definition and related functions
    and macros used to handle CPU thread affinity.
    
      sched_getcpu()
      sched_setaffinity()
      sched_getaffinity()
    
    Change-Id: If382ecafde8926341a88478062b275553645065b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    Revert "Set SA_RESTORER in sigaction()"
    
    This reverts commit e4fa46e75cd0d433b5c6c064720ed7e195cba7c8.
    Set SA_RESTORER in sigaction()
    
    GDB looks for specific opcode sequences when trying to recognize a stack
    frame as a signal trampoline.  The sequences it looks for happen to be those
    created when SA_RESTORER is set, since glibc always sets a restorer.  This
    patch does the same here, so that the trampolines can be correctly identified.
    
    Change-Id: I0ac574a68818cb24d939c3527f3aaeb04b853d04
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    libc: fix fstatfs() implementation.
    
    The syscall expects the size of the buffer as the second argument.
    
    Change-Id: I99ede2fec7fcd385ca03ff022c2cffa4297bea8d
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    bionic: syscalls: Add ioprio_set/ioprio_get syscall wrappers
    
    Signed-off-by: San Mehat <san@google.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    libc: add <sys/eventfd.h> and corresponding implementations.
    
    Change-Id: Ide040884c456190226e580513099fdb8377e015b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Update kernel headers and add syscall "perf_event_open"
    
    Change-Id: I43f12b727881df002a8524f2738586c043833bae
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    bonic: libc: cpuacct support for setuid functions
    
    Any of the setuid functions now updates /acct/uid/ with its own tid
    before changing users. This is so we can properly account for cpu time
    per uid.
    
    Change-Id: I34186cf4d5228cac8439e582a9e26c01ef3011e4
    Signed-off-by: Mike Chan <mike@android.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    bionic: syscalls: Add ioprio_set/ioprio_get syscall wrappers
    
    Signed-off-by: San Mehat <san@google.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    bonic: libc: cpuacct support for setuid functions
    
    Any of the setuid functions now updates /acct/uid/ with its own tid
    before changing users. This is so we can properly account for cpu time
    per uid.
    
    Change-Id: I34186cf4d5228cac8439e582a9e26c01ef3011e4
    Signed-off-by: Mike Chan <mike@android.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    <sched.h>: Add sched_getcpu() and cpu_set_t
    
    This adds the cpu_set_t type definition and related functions
    and macros used to handle CPU thread affinity.
    
      sched_getcpu()
      sched_setaffinity()
      sched_getaffinity()
    
    Change-Id: If382ecafde8926341a88478062b275553645065b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    Implement clone() C library function properly.
    
    Only provide an implementation for ARM at the moment, since
    it requires specific assembly fragments (the standard syscall
    stubs cannot be used because the child returns in a different
    stack).
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    add personality() system call.
    
    Change-Id: Ie899def8ea1d705930ed83adae1343c1353e7c57
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    Add missing sysinfo() implementation (already declared in <sys/sysinfo.h>) - DO NOT MERGE
    
    Change-Id: Iac4eb5911ffe4a7ab72b84df44e907685ac816af
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    sreadahead: adding readahead system call into bionic libc
    
    Add bionic libc to support readahead system call.
    This is needed to enable sreadahead to work.
    
    Change-Id: I3856e1a3833db82e6cf42fd34af7631bd40cc723
    Author: Winson Yung <winson.w.yung@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    libc: Add missing fdatasync() implementation
    
    Change-Id: I04bb655d77e414021e1f2a973329167ad76ca1c4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    bonic: libc: cpuacct support for setuid functions
    
    Any of the setuid functions now updates /acct/uid/ with its own tid
    before changing users. This is so we can properly account for cpu time
    per uid.
    
    Change-Id: I34186cf4d5228cac8439e582a9e26c01ef3011e4
    Signed-off-by: Mike Chan <mike@android.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add faccessat to syscall list
    
    Change-Id: I427a18811089cb280769ac8da3ed8adc00a65a10
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add extended attribute (xattr) system call wrappers to bionic.
    
    The xattr system calls are required for the SE Android userspace in
    order to get and set file security contexts.  In particular, libselinux
    requires these calls.
    
    Change-Id: I78f5eb3d8f3384aed0a5e7c6a6f001781d982017
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    libc: Add ftruncate64 and improve 64-bit parameter syscall handling.
    
    This patch improves the handling of 64-bit parameters in syscalls on ARM.
    The ARM EABI mandates that 64-bit quantities be passed in even/odd register
    pairs, which requires special treatment.
    
    This allows us to simplify our implementations of pread() and pwrite()
    and remove the C stubs for pread64() and pwrite64().
    
    Also add ftruncate64() to <unistd.h>
    
    Change-Id: I407e2fd223ba0093dd2d0b04c6152fadfc9ce3ef
    
    Bug 3107933
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    libc: Add missing waitid() implementation.
    
    Change-Id: I312ee608dbf9249e4886a10d45d13e3cda8a9042
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    libc: Add ftruncate64 and improve 64-bit parameter syscall handling.
    
    This patch improves the handling of 64-bit parameters in syscalls on ARM.
    The ARM EABI mandates that 64-bit quantities be passed in even/odd register
    pairs, which requires special treatment.
    
    This allows us to simplify our implementations of pread() and pwrite()
    and remove the C stubs for pread64() and pwrite64().
    
    Also add ftruncate64() to <unistd.h>
    
    Change-Id: I407e2fd223ba0093dd2d0b04c6152fadfc9ce3ef
    
    Bug 3107933
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: ARM: update syscalls with new script
    
    Used the new gensyscalls.py script to update the ARM syscalls with the
    BEGIN(x) and END(x) macros to give size information for the code of the
    syscall. Useful for valgrind.
    
    Change-Id: I8c481c8928401ac110fd19b087f7d67e4db39326
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add missing symbol type directives.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: provide atomic operations will full barriers for NDK apps.
    
    __atomic_cmpxchg and other related atomic operations did not
    provide memory barriers, which can be a problem for non-platform
    code that links against them when it runs on multi-core devices.
    
    This patch does two things to fix this:
    
    - It modifies the existing implementation of the functions
      that are exported by the C library to always provide
      full memory barriers. We need to keep them exported by
      the C library to prevent breaking existing application
      machine code.
    
    - It also modifies <sys/atomics.h> to only export
      always-inlined versions of the functions, to ensure that
      any application code compiled against the new header will
      not rely on the platform version of the functions.
    
      This ensure that said machine code will run properly on
      all multi-core devices.
    
    This is based on the GCC built-in sync primitives.
    
    The end result should be only slightly slower than the
    previous implementation.
    
    Note that the platform code does not use these functions
    at all. A previous patch completely removed their usage in
    the pthread and libstdc++ code.
    
    + rename arch-arm/bionic/atomics_arm.S to futex_arm.S
    + rename arch-x86/bionic/atomics_x86.S to futex_x86.S
    + remove arch-x86/include/sys/atomics.h which already
      provided inlined functions to the x86 platform.
    
    Change-Id: I752a594475090cf37fa926bb38209c2175dda539
    Add function marks and size indications
    
    Add a macro to annotate function end and start using both ENTRY and END
    for each function. This allows valgrind (and presumably other debugging
    tools) to use the debug symbols to trace the functions.
    
    Change-Id: I5f09cef8e22fb356eb6f5cee952b031e567599b6
    Fix setjmp()/longjmp() to save FP registers on ARMv7. - DO NOT MERGE
    
    Change-Id: I3a0c2c05e295ac05ed51a531dabda668be204ca0
    Fix setjmp()/longjmp() to save FP registers on ARMv7.
    
    Change-Id: I8ec684c8f8ca1ae58c8feb330b97d1e2b81caeef
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add function marks and size indications
    
    Add a macro to annotate function end and start using both ENTRY and END
    for each function. This allows valgrind (and presumably other debugging
    tools) to use the debug symbols to trace the functions.
    
    Change-Id: I5f09cef8e22fb356eb6f5cee952b031e567599b6
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Use ENTRY and EXIT macros for strcmp, memcpy, atexit.
    
    Without this change strcmp size is zero (not set), and it gets
    ignored by Valgrind. Changes to memcpy and atexit don't affect the
    generated binary in any way.
    
    Change-Id: I05818cb5951f75901dc8c0eef02807a2e83a9231
    bionic: Add ARM optimized strcmp()
    
    Reference results of the experiments on TI OMAP3430 at 600 MHz
    
    $ bench_strcmp -N "strcmp_1k" -s 1k -I 200
    
    [original C code]
                 prc thr   usecs/call      samples   errors cnt/samp     size
    strcmp_1k      1   1     10.38000          102        0    15000     1024
    
    [ARM optimized code]
                 prc thr   usecs/call      samples   errors cnt/samp     size
    strcmp_1k      1   1      3.08840           88        0    15000     1024
    
    The work was derived from ARM Ltd, contributed to newlib, and reworked
    for Android by Linaro.
    
    Change-Id: Ib0d5755e1eb9adb07d80ef0252f57a5c4c57a425
    Signed-off-by: Jim Huang <jserv@0xlab.org>
    Add function marks and size indications
    
    Add a macro to annotate function end and start using both ENTRY and END
    for each function. This allows valgrind (and presumably other debugging
    tools) to use the debug symbols to trace the functions.
    
    Change-Id: I5f09cef8e22fb356eb6f5cee952b031e567599b6
    Fix setjmp()/longjmp() to save FP registers on ARMv7. - DO NOT MERGE
    
    Change-Id: I3a0c2c05e295ac05ed51a531dabda668be204ca0
    Fix setjmp()/longjmp() to save FP registers on ARMv7.
    
    Change-Id: I8ec684c8f8ca1ae58c8feb330b97d1e2b81caeef
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    ARM: remove dummy entries from .so init_array/fini_array
    
    The runtime linker parses the ELF section headers to
    discover the size of the init_array and fini_array, so
    there is no point in putting NULL terminators at the end.
    
    Change-Id: I3246cd585efce9314155600277dd829e9f37d04f
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@gmail.com>
    crtend*: Add GNU_STACK note
    
    Add a GNU_STACK marker to crtend* files. This tells the linker
    that these files do not require an executable stack.
    
    When linking, a missing GNU_STACK marker in any .o file can prevent
    the compiler from automatically marking the final executable as NX
    safe (executable stack not required).  In Android, we normally work
    around this by adding -Wa,--noexecstack / -Wl,-z,noexecstack.
    For files like crtend.S / crtend_so.S, which are included in every
    executable / shared library, it's better to add the GNU_STACK note
    directly to the assembly file.  This allows the compiler to
    automatically mark the final executable as NX safe without any
    special command line options.
    
    References: http://www.gentoo.org/proj/en/hardened/gnu-stack.xml
    
    Change-Id: I07bd058f9f60ddd8b146e0fb36ba26ff84c0357d
    Allow dlclose() to properly call static C++ destructors.
    
    With this patch _and_ an upcoming build/ patch, the destruction
    of static C++ objects contained in shared libraries will happen
    properly when dlclose() is called.
    
    Note that this change introduces crtbegin_so.S and crtend_so.S which
    are currently ignored by the build system.
    
    + move definition of __dso_handle to the right place
    (before that, all shared libraries used the __dso_handle
    global variable from the C library).
    
    Note that we keep a 'weak' __dso_handle in aeabi.c to avoid
    breaking the build until the next patch to build/core/combo/
    appears. We will be able to remove that later.
    
    + move bionic/aeabi.c to arch-arm/bionic/ (its proper location)
    
    NOTE: The NDK will need to be modified to enable this feature in
             the shared libraries that are generated through it.
    
    Change-Id: I99cd801375bbaef0581175893d1aa0943211b9bc
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: Add __aeabi_llsl and __aeabi_llsr to libgcc_compat
    
    Some platform libraries built for ICS do not work with master
    because of some refactoring in frameworks/base.
    
    Make sure that these libgcc symbols are always present in our libc
    
    Change-Id: Ib8d345878be0ba711f051082a778f5cc1f1b3a19
    Signed-off-by: Dima Zavin <dima@android.com>
    libc: Add __aeabi_llsl and __aeabi_llsr to libgcc_compat
    
    Some platform libraries built for ICS do not work with master
    because of some refactoring in frameworks/base.
    
    Make sure that these libgcc symbols are always present in our libc
    
    Change-Id: Ib8d345878be0ba711f051082a778f5cc1f1b3a19
    Signed-off-by: Dima Zavin <dima@android.com>
    Trivial fix in comment
    
    Very, very trivial fix for minor typo in comment about how it works
    
    Change-Id: Ia08d332366837dec8f7e91b9728732c5edea223e
    libc: Add __aeabi_f2uiz to libgcc_compat.c
    
    This patch ensure that __aeabi_f2uiz is embedded in our C library.
    This is needed to avoid breaking certain applications when they are
    loaded in ICS. It is likely that the issue is due to mis-linked
    binaries generated with the stand-alone toolchain (the problem
    should not exist if you use ndk-build), but this fix is easier
    than asking all app developers to fix their custom build system.
    
    If you want more technical details, read the comments inside
    libgcc_compat.c
    
    Change-Id: I59ac1fc781ecb70b90b5573c5a3c67560ca8f270
    eclair snapshot
    Fix ABI breakage in libc.so and libm.so between 1.6 and Eclair.
    
    For a detailed description of the problem and why this fix is
    needed, plrease read the comments in libgcc_compat.c
    update strlen.c to compile with gcc 4.8
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Introduce a new ARM header file <machine/cpu-features.h>
    
    Introduce a new header file containing ARM-specific feature
    test macros (e.g. __ARM_HAVE_PAIR_LOAD_STORE corresponding
    to ldrd/strd instructions). Also modify a few files in our
    system to use the macros in order to build for ARMv4T.
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Rename __dso_handle_so.c to __dso_handle_so.h
    
    Also chang libc/arch-arm/bionic/crtbegin_so.c to include it
    as a header.
    
    Change-Id: Ib91b0b8caf5c8b936425aa8a4fc1a229b2b27929
    ARM: make CRT_LEGACY_WORKAROUND work as intended
    
    To properly support legacy ARM shared libraries, libc.so needs
    to export the symbols __dso_handle and atexit, even though
    these are now supplied by the crt startup code.
    
    This patch reshuffles the existing CRT_LEGACY_WORKAROUND
    conditionally compiled code slightly so it works as the
    original author likely intended.
    
    Change-Id: Id6c0e94dc65b7928324a5f0bad7eba6eb2f464b9
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@gmail.com>
    ARM: make sure __on_dlclose() actually gets called
    
    Change-Id: I280e5428b0543cccf17ca36baee4865395928cdb
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@gmail.com>
    arm: rewrite crtbegin* as C files.
    
    Rewrite
     crtbegin.S     -> crtbegin.c
     crtbegin_so.S  -> crtbegin_so.c
    
    This change allows us to generate PIC code without relying
    on text relocations.
    
    As a consequence of this rewrite, also rewrite
      __dso_handle.S    -> __dso_handle.c
      __dso_handle_so.S -> __dso_handle_so.c
      atexit.S          -> atexit.c
    
    In crtbegin.c _start, place the __PREINIT_ARRAY__, __INIT_ARRAY__,
    __FINI_ARRAY__, and __CTOR_LIST__ variables onto the stack, instead of
    passing a pointer to the text section of the binary.
    
    This change appears sorta wonky, as I attempted to preserve,
    as much as possible, the structure of the original assembly.
    As a result, you have C files including other C files, and other
    programming uglyness.
    
    Result: This change reduces the number of files with text-relocations
    from 315 to 19 on my Android build.
    
    Before:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      315
    
    After:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      19
    
    Change-Id: Ib9f98107c0eeabcb606e1ddc7ed7fc4eba01c9c4
    Eliminate duplicate copies of constants.
    
    sys/personality.h and linux/personality.h contain mostly
    identical contents. Eliminate dups.
    
    Change-Id: Ie786edcb5dca57af7ee5b5fdad2949369f1bc4e4
    add personality() system call.
    
    Change-Id: Ie899def8ea1d705930ed83adae1343c1353e7c57
    Add link.h for all platforms with dl_phdr_info
    
    This header is used on bionic build and should be propagated into
    sysroot on toolchain rebuild. Discussion re. this header is here:
    http://gcc.gnu.org/ml/gcc-patches/2012-08/msg00936.html
    
    It is available already in mips NDK platforms:
    development/ndk/platforms/android-9/arch-mips/include/link.h
    
    Change-Id: I39ff467cdac9f448e31c11ee3e14a6200e82ab57
    Signed-off-by: Pavel Chupin <pavel.v.chupin@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add function marks and size indications
    
    Add a macro to annotate function end and start using both ENTRY and END
    for each function. This allows valgrind (and presumably other debugging
    tools) to use the debug symbols to trace the functions.
    
    Change-Id: I5f09cef8e22fb356eb6f5cee952b031e567599b6
    Amend previous commit with needed include
    
    Change-Id: Idae8daaf095d90513820e05f423144ffed4ba913
    Use CLZ on ARMv5 and newer
    
    Change-Id: Ia5aa6974c0343ae43fbcb91304501213048e9ec0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    ARM: warn about atexit() calls from legacy shared libraries
    
    Legacy ARM shared libraries use this generic version of atexit(),
    which queues exit functions for invocation at program exit, at
    which time the library may have been dlclose()'d, causing the
    program to crash.
    
    Change-Id: I41ae153c23268daa65ede7fb8966fc3e9caec369
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@gmail.com>
    ARM: make CRT_LEGACY_WORKAROUND work as intended
    
    To properly support legacy ARM shared libraries, libc.so needs
    to export the symbols __dso_handle and atexit, even though
    these are now supplied by the crt startup code.
    
    This patch reshuffles the existing CRT_LEGACY_WORKAROUND
    conditionally compiled code slightly so it works as the
    original author likely intended.
    
    Change-Id: Id6c0e94dc65b7928324a5f0bad7eba6eb2f464b9
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add link.h for all platforms with dl_phdr_info
    
    This header is used on bionic build and should be propagated into
    sysroot on toolchain rebuild. Discussion re. this header is here:
    http://gcc.gnu.org/ml/gcc-patches/2012-08/msg00936.html
    
    It is available already in mips NDK platforms:
    development/ndk/platforms/android-9/arch-mips/include/link.h
    
    Change-Id: I39ff467cdac9f448e31c11ee3e14a6200e82ab57
    Signed-off-by: Pavel Chupin <pavel.v.chupin@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add function marks and size indications
    
    Add a macro to annotate function end and start using both ENTRY and END
    for each function. This allows valgrind (and presumably other debugging
    tools) to use the debug symbols to trace the functions.
    
    Change-Id: I5f09cef8e22fb356eb6f5cee952b031e567599b6
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    bionic: Stack pointer/signal race condition.
    
    Move the stackpointer so a captured signal does not corrupt
    stack variables needed for __thread_entry.
    
    Change-Id: I3e1e7b94a6d7cd3a07081f849043262743aa8064
    Add function marks and size indications
    
    Add a macro to annotate function end and start using both ENTRY and END
    for each function. This allows valgrind (and presumably other debugging
    tools) to use the debug symbols to trace the functions.
    
    Change-Id: I5f09cef8e22fb356eb6f5cee952b031e567599b6
    Implement clone() C library function properly.
    
    Only provide an implementation for ARM at the moment, since
    it requires specific assembly fragments (the standard syscall
    stubs cannot be used because the child returns in a different
    stack).
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: Fix typo that broke NDK compatibility.
    
    The function must be named __atomic_cmpxchg, not __android_cmpxchg.
    This typo broke existing prebuilt binaries (they couldn't be loaded
    at runtime anymore).
    
    Change-Id: I25ca7d18329817f0056e616a0409113269ad7b1f
    libc: provide atomic operations will full barriers for NDK apps.
    
    __atomic_cmpxchg and other related atomic operations did not
    provide memory barriers, which can be a problem for non-platform
    code that links against them when it runs on multi-core devices.
    
    This patch does two things to fix this:
    
    - It modifies the existing implementation of the functions
      that are exported by the C library to always provide
      full memory barriers. We need to keep them exported by
      the C library to prevent breaking existing application
      machine code.
    
    - It also modifies <sys/atomics.h> to only export
      always-inlined versions of the functions, to ensure that
      any application code compiled against the new header will
      not rely on the platform version of the functions.
    
      This ensure that said machine code will run properly on
      all multi-core devices.
    
    This is based on the GCC built-in sync primitives.
    
    The end result should be only slightly slower than the
    previous implementation.
    
    Note that the platform code does not use these functions
    at all. A previous patch completely removed their usage in
    the pthread and libstdc++ code.
    
    + rename arch-arm/bionic/atomics_arm.S to futex_arm.S
    + rename arch-x86/bionic/atomics_x86.S to futex_x86.S
    + remove arch-x86/include/sys/atomics.h which already
      provided inlined functions to the x86 platform.
    
    Change-Id: I752a594475090cf37fa926bb38209c2175dda539
    libc: remove ctors/dtors sections
    
    None of the supported ARCHs actually populate these sections,
    so there is no point in keeping them in the binaries.
    
    Change-Id: I21a364f510118ac1114e1b49c53ec8c895c6bc6b
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@gmail.com>
    arm: rewrite crtbegin* as C files.
    
    Rewrite
     crtbegin.S     -> crtbegin.c
     crtbegin_so.S  -> crtbegin_so.c
    
    This change allows us to generate PIC code without relying
    on text relocations.
    
    As a consequence of this rewrite, also rewrite
      __dso_handle.S    -> __dso_handle.c
      __dso_handle_so.S -> __dso_handle_so.c
      atexit.S          -> atexit.c
    
    In crtbegin.c _start, place the __PREINIT_ARRAY__, __INIT_ARRAY__,
    __FINI_ARRAY__, and __CTOR_LIST__ variables onto the stack, instead of
    passing a pointer to the text section of the binary.
    
    This change appears sorta wonky, as I attempted to preserve,
    as much as possible, the structure of the original assembly.
    As a result, you have C files including other C files, and other
    programming uglyness.
    
    Result: This change reduces the number of files with text-relocations
    from 315 to 19 on my Android build.
    
    Before:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      315
    
    After:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      19
    
    Change-Id: Ib9f98107c0eeabcb606e1ddc7ed7fc4eba01c9c4
    Updated gcc 4.4.3 IA toolchain doesn't require the .ctors list
    
    Orig-Change-Id: Ia840a19a45257128eccdcf25d105f500f2d90741
    Signed-off-by: H.J. Lu <hjl.tools@gmail.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Updated gcc 4.4.3 IA toolchain doesn't require the .ctors list
    
    Change-Id: Ia840a19a45257128eccdcf25d105f500f2d90741
    Signed-off-by: H.J. Lu <hjl.tools@gmail.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    libc: fix executable destruction support.
    
    This change allows an executable to call its destructor functions
    (declared with __attribute__((destructor))) to be properly called
    when it normally exits.
    
    Note that this is different from calling the destructors of a shared
    library when it is unloaded with dlclose() or through program exit,
    which are already supported.
    
    Bug: 3106500
    Change-Id: I1412ef5407f13b613fc6cb6103e0a691dbee4b1a
    Fix the C library runtime initialization order.
    
    This allows libc.so to run the C runtime initializer as soon as the
    dynamic linker loads the shared library, i.e. before any other initializers
    (e.g. static C++ constructors in other shared libraries the executable depends
    on).
    
    This also removes the bug where the initializers from the executable itself
    were run twice: once by the dynamic linker, and another time by __libc_init
    as defined by libc_init_dynamic.c
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: remove ctors/dtors sections
    
    None of the supported ARCHs actually populate these sections,
    so there is no point in keeping them in the binaries.
    
    Change-Id: I21a364f510118ac1114e1b49c53ec8c895c6bc6b
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@gmail.com>
    crtend*: Add GNU_STACK note
    
    Add a GNU_STACK marker to crtend* files. This tells the linker
    that these files do not require an executable stack.
    
    When linking, a missing GNU_STACK marker in any .o file can prevent
    the compiler from automatically marking the final executable as NX
    safe (executable stack not required).  In Android, we normally work
    around this by adding -Wa,--noexecstack / -Wl,-z,noexecstack.
    For files like crtend.S / crtend_so.S, which are included in every
    executable / shared library, it's better to add the GNU_STACK note
    directly to the assembly file.  This allows the compiler to
    automatically mark the final executable as NX safe without any
    special command line options.
    
    References: http://www.gentoo.org/proj/en/hardened/gnu-stack.xml
    
    Change-Id: I07bd058f9f60ddd8b146e0fb36ba26ff84c0357d
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Implement the "abort" stub in assembly for ARM.
    
    So that we can always get the full stack trace regardless of gcc's handling
    of the "noreturn" attribute associated with abort().
    
    (Cherry pick of Id264a5167e7cabbf11515fbc48f5469c527e34d4.)
    
    Bug: 6455193
    
    Conflicts:
    
            libc/Android.mk
    
    Change-Id: I568fc5303fd1d747075ca933355f914122f94dac
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add function marks and size indications
    
    Add a macro to annotate function end and start using both ENTRY and END
    for each function. This allows valgrind (and presumably other debugging
    tools) to use the debug symbols to trace the functions.
    
    Change-Id: I5f09cef8e22fb356eb6f5cee952b031e567599b6
    eclair snapshot
    use local symbols in memset so it doesn't screw up profiling
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add function marks and size indications
    
    Add a macro to annotate function end and start using both ENTRY and END
    for each function. This allows valgrind (and presumably other debugging
    tools) to use the debug symbols to trace the functions.
    
    Change-Id: I5f09cef8e22fb356eb6f5cee952b031e567599b6
    bionic: Add ARM optimized strcpy()
    
    Reference results of the experiments on Qualcomm MSM7x25 (524MHz):
    
    [original C code]
                 prc thr   usecs/call      samples   errors cnt/samp
    size
    strcpy_1k      1   1     14.56159           99        0     1000
    1024
    
    [ARM optimized code]
                 prc thr   usecs/call      samples   errors cnt/samp
    size
    strcpy_1k      1   1      3.46653           99        0     1000
    1024
    
    The work was derived from ARM Ltd.
    
    Change-Id: I906ac53bb7a7285e14693c77d3ce8d4ed6f98bfd
    Add function marks and size indications
    
    Add a macro to annotate function end and start using both ENTRY and END
    for each function. This allows valgrind (and presumably other debugging
    tools) to use the debug symbols to trace the functions.
    
    Change-Id: I5f09cef8e22fb356eb6f5cee952b031e567599b6
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add tgkill syscall.
    
    Use tgkill instead of tkill to implement pthread_kill.
    This is safer in the event that the thread has already terminated
    and its id has been reused by a different process.
    
    Change-Id: Ied715e11d7eadeceead79f33db5e2b5722954ac9
    Add function marks and size indications
    
    Add a macro to annotate function end and start using both ENTRY and END
    for each function. This allows valgrind (and presumably other debugging
    tools) to use the debug symbols to trace the functions.
    
    Change-Id: I5f09cef8e22fb356eb6f5cee952b031e567599b6
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    bionic: add support for non-NEON memcpy() on NEON SoCs
    
    Some SoCs that support NEON nevertheless perform better with a non-NEON than a
    NEON memcpy().  This patch adds build variable ARCH_ARM_USE_NON_NEON_MEMCPY,
    which can be set in BoardConfig.mk.  When ARCH_ARM_USE_NON_NEON_MEMCPY is
    defined, we compile in the non-NEON optimized memcpy() even if the SoC supports
    NEON.
    
    Change-Id: Ia0e5bee6bad5880ffc5ff8f34a1382d567546cf9
    Adjust memcpy for ARM Cortex A9 cache line size
    
    ARM Cortex A8 use 64 bytes and ARM Cortex A9 use 32 bytes cache line
    size.
    
    The following patch:
      Adds code to adjust memcpy cache line size to match A9 cache line
      size.
      Adds a flag to select between 32 bytes and 64 bytes cache line
      size.
    
      Copyright (C) ST-Ericsson SA 2010
        Modified neon implementation to fit Cortex A9 cache line size
        Author: Henrik Smiding henrik.smiding@stericsson.com for
                ST-Ericsson.
    
    Change-Id: I8a55946bfb074e6ec0a14805ed65f73fcd0984a3
    Signed-off-by: Christian Bejram <christian.bejram@stericsson.com>
    Use ENTRY and EXIT macros for strcmp, memcpy, atexit.
    
    Without this change strcmp size is zero (not set), and it gets
    ignored by Valgrind. Changes to memcpy and atexit don't affect the
    generated binary in any way.
    
    Change-Id: I05818cb5951f75901dc8c0eef02807a2e83a9231
    Add function marks and size indications
    
    Add a macro to annotate function end and start using both ENTRY and END
    for each function. This allows valgrind (and presumably other debugging
    tools) to use the debug symbols to trace the functions.
    
    Change-Id: I5f09cef8e22fb356eb6f5cee952b031e567599b6
    Only use NEON memcpy if __ARM_NEON__ is defined
    
    Change-Id: I32e6b9385d46efeec15dee8e395a82eef24ba3ea
    eclair snapshot
    Improve memcpy performance from 290 MiB/s to 340 MiB/s (17% improvment)
    
    use 64 bytes cache lines, reduce the main loop to 64-bytes instead of
    128 bytes and adjust the prefetch distance to the optimal value.
    Re-enable ARMv7 memcpy implementation.
    
    Do not submit this patch before the one that modifies the Android emulator to
    work-around a weird ARMv7 emulation issue. This is done to temporarily re-allow
    the -user builds needed for QA.
    Fix armv7-user builds by disabling the ARMv7-optimized memcpy.
    
    This is required to work-around some corny bugs in ARMv7 emulation.
    
    The emulation itself is required to run the dex pre-optimization pass
    for -user builds.
    NEON optimized memcpy.
    
    372 MB/s for large transfers, 440 MB/s for smaller ones down to 1KB. 130 MB/s for very small transfers ( < 32 bytes )
    Performance is similar with non-congruent buffers.
    Remove NEON optimizations for memcpy
    Add stack unwinding directives to assembly leaf functions.
    
    So that the real culprit of native crashes can surface in the stack trace.
    Neon-optimized versions of memcpy.
    
    This optimization come from the external 0xdroid repository.
    Original patch can be found here:
    
    http://gitorious.org/0xdroid/bionic/commit/ebafe41c2c02f8c09a3c1d7746047083df180ac5
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Introduce a new ARM header file <machine/cpu-features.h>
    
    Introduce a new header file containing ARM-specific feature
    test macros (e.g. __ARM_HAVE_PAIR_LOAD_STORE corresponding
    to ldrd/strd instructions). Also modify a few files in our
    system to use the macros in order to build for ARMv4T.
    Initial Contribution
    ARM: make CRT_LEGACY_WORKAROUND work as intended
    
    To properly support legacy ARM shared libraries, libc.so needs
    to export the symbols __dso_handle and atexit, even though
    these are now supplied by the crt startup code.
    
    This patch reshuffles the existing CRT_LEGACY_WORKAROUND
    conditionally compiled code slightly so it works as the
    original author likely intended.
    
    Change-Id: Id6c0e94dc65b7928324a5f0bad7eba6eb2f464b9
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@gmail.com>
    arm: rewrite crtbegin* as C files.
    
    Rewrite
     crtbegin.S     -> crtbegin.c
     crtbegin_so.S  -> crtbegin_so.c
    
    This change allows us to generate PIC code without relying
    on text relocations.
    
    As a consequence of this rewrite, also rewrite
      __dso_handle.S    -> __dso_handle.c
      __dso_handle_so.S -> __dso_handle_so.c
      atexit.S          -> atexit.c
    
    In crtbegin.c _start, place the __PREINIT_ARRAY__, __INIT_ARRAY__,
    __FINI_ARRAY__, and __CTOR_LIST__ variables onto the stack, instead of
    passing a pointer to the text section of the binary.
    
    This change appears sorta wonky, as I attempted to preserve,
    as much as possible, the structure of the original assembly.
    As a result, you have C files including other C files, and other
    programming uglyness.
    
    Result: This change reduces the number of files with text-relocations
    from 315 to 19 on my Android build.
    
    Before:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      315
    
    After:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      19
    
    Change-Id: Ib9f98107c0eeabcb606e1ddc7ed7fc4eba01c9c4
    Enable functional DSO object destruction
    
    Unfortunately, legacy .so files for ARM don't have a correct crtbegin file.
    Consequently, we have to grandfather the old __dso_handle behaviour.
    Add some ifdefs for ARM to allow it to use the old code until we can work
    out a transition.
    
    Change-Id: I6a28f368267d792c94e1d985d8344023bc632f6f
    Author: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Enable functional DSO object destruction
    
    Unfortunately, legacy .so files for ARM don't have a correct crtbegin file.
    Consequently, we have to grandfather the old __dso_handle behaviour.
    Add some ifdefs for ARM to allow it to use the old code until we can work
    out a transition.
    
    Change-Id: I6a28f368267d792c94e1d985d8344023bc632f6f
    Author: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Revert "Update X86 Bionic CRT files for unwind/exceptions"
    
    This reverts commit dc3bc87b43d0d73d89cca59692b80de878e11a5d,
    causes netd to crash.
    Update X86 Bionic CRT files for unwind/exceptions
    
    Several updates to Bionic crt*.o files to implement Linux/x86
    stack unwind/exception handling.
    Mark __dso_handle as hidden.
    Note: Requires complete rebuild due to CRT changes. Google will
    need to regenerate and check-in all the prebuilt x86 CRT object
    files and libraries which link to them.
    
    Change-Id: I191ce1afb0dee7bbc28dcd9694e5919226dbd070
    Signed-off-by: Bruce J Beare <bruce.j.beare@intel.com>
    Signed-off-by: Mark D Horn <mark.d.horn@intel.com>
    Author: Lu, Hongjiu <hongjiu.lu@intel.com>
    Allow dlclose() to properly call static C++ destructors.
    
    With this patch _and_ an upcoming build/ patch, the destruction
    of static C++ objects contained in shared libraries will happen
    properly when dlclose() is called.
    
    Note that this change introduces crtbegin_so.S and crtend_so.S which
    are currently ignored by the build system.
    
    + move definition of __dso_handle to the right place
    (before that, all shared libraries used the __dso_handle
    global variable from the C library).
    
    Note that we keep a 'weak' __dso_handle in aeabi.c to avoid
    breaking the build until the next patch to build/core/combo/
    appears. We will be able to remove that later.
    
    + move bionic/aeabi.c to arch-arm/bionic/ (its proper location)
    
    NOTE: The NDK will need to be modified to enable this feature in
             the shared libraries that are generated through it.
    
    Change-Id: I99cd801375bbaef0581175893d1aa0943211b9bc
    Change-Id: I68cc462aeb2460345a53bdb9941ce4bfc10456fb
    bionic: fix clearenv() compiler warning and related comment typos
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    Add implementation of fdprintf, clearenv, and stubs for ttyname_r, *usershell
    
    Change-Id:      I5fe7e8b6ee5edbb49e707c3b6737a58563781fa3
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    ARM: make CRT_LEGACY_WORKAROUND work as intended
    
    To properly support legacy ARM shared libraries, libc.so needs
    to export the symbols __dso_handle and atexit, even though
    these are now supplied by the crt startup code.
    
    This patch reshuffles the existing CRT_LEGACY_WORKAROUND
    conditionally compiled code slightly so it works as the
    original author likely intended.
    
    Change-Id: Id6c0e94dc65b7928324a5f0bad7eba6eb2f464b9
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@gmail.com>
    Allow dlclose() to properly call static C++ destructors.
    
    With this patch _and_ an upcoming build/ patch, the destruction
    of static C++ objects contained in shared libraries will happen
    properly when dlclose() is called.
    
    Note that this change introduces crtbegin_so.S and crtend_so.S which
    are currently ignored by the build system.
    
    + move definition of __dso_handle to the right place
    (before that, all shared libraries used the __dso_handle
    global variable from the C library).
    
    Note that we keep a 'weak' __dso_handle in aeabi.c to avoid
    breaking the build until the next patch to build/core/combo/
    appears. We will be able to remove that later.
    
    + move bionic/aeabi.c to arch-arm/bionic/ (its proper location)
    
    NOTE: The NDK will need to be modified to enable this feature in
             the shared libraries that are generated through it.
    
    Change-Id: I99cd801375bbaef0581175893d1aa0943211b9bc
    Allow static C++ destructors to be properly called on dlclose().
    
    With this patch, _and_ an upcoming build/ patch, the destruction
    of static C++ objects contained in shared libraries will happen
    properly when dlclose() is called.
    
    Note that this change introduces crtbegin_so.S and crtend_so.S which
    are currently ignored by the build system.
    
    + move definition of __dso_handle to the right place
      (before that, all shared libraries used the __dso_handle
       global variable from the C library).
    
      Note that we keep a 'weak' __dso_handle in aeabi.c to avoid
      breaking the build until the next patch to build/core/combo/
      appears. We will be able to remove that later.
    
    + move bionic/aeabi.c to arch-arm/bionic/ (its proper location)
    
    Change-Id: Ie771aa204e3acbdf02fd30ebd4150373a1398f39
    NOTE: The NDK will need to be modified to enable this feature in
          the shared libraries that are generated through it.
    Fix __eabi_atexit() implementation, as well as a bug in the BSD-originated __cxa_finalize() implementation
    This patch uses "#if ANDROID" instead of "#if 1" in the __cxa_finalize() fix
    revert to previous implementation of __aeabi_atexit() since the new one seems to crash a static ICU String destructor.
    I don't have the time to investigate why right now, so a revert is preferred. Damn...
    Fix __aeabi_atexit to call __cxa_atexit properly. This function is defined by the C++ ABI for ARM document.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Initial Contribution
    Add function marks and size indications
    
    Add a macro to annotate function end and start using both ENTRY and END
    for each function. This allows valgrind (and presumably other debugging
    tools) to use the debug symbols to trace the functions.
    
    Change-Id: I5f09cef8e22fb356eb6f5cee952b031e567599b6
    eclair snapshot
    Add stack unwinding directives to assembly leaf functions.
    
    So that the real culprit of native crashes can surface in the stack trace.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Introduce a new ARM header file <machine/cpu-features.h>
    
    Introduce a new header file containing ARM-specific feature
    test macros (e.g. __ARM_HAVE_PAIR_LOAD_STORE corresponding
    to ldrd/strd instructions). Also modify a few files in our
    system to use the macros in order to build for ARMv4T.
    Initial Contribution
    Add function marks and size indications
    
    Add a macro to annotate function end and start using both ENTRY and END
    for each function. This allows valgrind (and presumably other debugging
    tools) to use the debug symbols to trace the functions.
    
    Change-Id: I5f09cef8e22fb356eb6f5cee952b031e567599b6
    eclair snapshot
    Add stack unwinding directives to assembly leaf functions.
    
    So that the real culprit of native crashes can surface in the stack trace.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Introduce a new ARM header file <machine/cpu-features.h>
    
    Introduce a new header file containing ARM-specific feature
    test macros (e.g. __ARM_HAVE_PAIR_LOAD_STORE corresponding
    to ldrd/strd instructions). Also modify a few files in our
    system to use the macros in order to build for ARMv4T.
    Initial Contribution
    Add function marks and size indications
    
    Add a macro to annotate function end and start using both ENTRY and END
    for each function. This allows valgrind (and presumably other debugging
    tools) to use the debug symbols to trace the functions.
    
    Change-Id: I5f09cef8e22fb356eb6f5cee952b031e567599b6
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fixes for the ARM-specific bswap_16, bswap_32, and bswap_64.
    
    1. Make the feature test work by excluding known-deficient processors, so
    we don't have to maintain a complete list of all the processors that support
    REV and REV16.
    
    2. Don't abuse 'register' to get an effect similar to GCC's +l constraint,
    but which was unnecessarily restrictive.
    
    3. Fix __swap64md so _x isn't clobbered, breaking 64-bit swaps.
    
    4. Make <byteswap.h> (which declars bswap_16 and friends) use <endian.h>
    rather than <sys/endian.h>, so we get the machine-dependent implementations.
    
    (git cherry-pick of 3cf53d1a7814e1520df09d24b009c16f4f27db0d)
    Fixes for the ARM-specific bswap_16, bswap_32, and bswap_64.
    
    1. Make the feature test work by excluding known-deficient processors, so
    we don't have to maintain a complete list of all the processors that support
    REV and REV16.
    
    2. Don't abuse 'register' to get an effect similar to GCC's +l constraint,
    but which was unnecessarily restrictive.
    
    3. Fix __swap64md so _x isn't clobbered, breaking 64-bit swaps.
    
    4. Make <byteswap.h> (which declars bswap_16 and friends) use <endian.h>
    rather than <sys/endian.h>, so we get the machine-dependent implementations.
    
    Change-Id: I6a38fad7a9fbe394aff141489617eb3883e1e944
    Use ARMv6 instruction for handling byte order
    
    ARMv6 ISA has several instructions to handle data in different byte order.
    For endian conversion (byte swapping) of single data words, it might be a
    good idea to use the REV/REV16 instruction simply.
    
    (git cherry-pick -e aa35095517b78b3d2e8ee282cab93ef058479fcf)
    
    Change-Id: Id6cca2e5e0a978f5abbee6d48876dfa8fa198f6a
    Use ARMv6 instruction for handling byte order
    
    ARMv6 ISA has several instructions to handle data in different byte order.
    For endian conversion (byte swapping) of single data words, it might be a
    good idea to use the REV/REV16 instruction simply.
    
    Change-Id: Ic4a5ed6254e082763e54aa70d428f59a0088636e
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: Define new symbol visibility macros
    
    This patch defines a few new macros that can be used to control the
    visibility of symbols exported by the C library:
    
    - ENTRY_PRIVATE() can be used in assembly sources to indicate
      that an assembler function should have "hidden" visibility, i.e.
      will never be exported by the C library's shared library.
    
      This is the equivalent of using __LIBC_HIDDEN__ for a C function,
      but ENTRY_PRIVATE() works like ENTRY(), and must be used with
      END() to tag the end of the function.
    
    - __LIBC_ABI_PUBLIC__ can be used to tag a C functions as being
      part of the C library's public ABI. This is important for a
      few functions that must be exposed by the NDK to maintain
      binary compatibility.
    
      Once a symbol has been tagged with this macro, it shall
      *never* be removed from the library, even if it becomes
      directly unused due to implementation changes
      (e.g. __is_threaded).
    
    - __LIBC_ABI_PRIVATE__ can be used for C functions that should
      always be exported by the C library because they are used by
      other libraries in the platform, but should not be exposed
      by the NDK. It is possible to remove such symbols from the
      implementation if all callers are also modified.
    
    + Add missing END() assembly macro for x86
    
    Change-Id: Ia96236ea0dbec41d57bea634b39d246b30e5e234
    Add function marks and size indications
    
    Add a macro to annotate function end and start using both ENTRY and END
    for each function. This allows valgrind (and presumably other debugging
    tools) to use the debug symbols to trace the functions.
    
    Change-Id: I5f09cef8e22fb356eb6f5cee952b031e567599b6
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Reconcile assembly-only macros in <machine/cpu-features.h>
    
    The change explicitly isolates the assembly-only macros in header
    <machine/cpu-features.h> in order to prevent mis-inclusion in C/C++
    source files.
    
    Change-Id: I0258e87c5ac3fd24944fb227290ac3b9cac4bfba
    bionic: Rename _ARM_HAVE_LDREX_STREX to __ARM_HAVE_LDREX_STREX for consistency
    
    The patch follows the naming manner in existing macros with prefix
    __ARM_HAVE.
    
    Change-Id: I6763ce2bf3ee85fd1da112c719543061d8d19bf4
    Fix setjmp()/longjmp() to save FP registers on ARMv7. - DO NOT MERGE
    
    Change-Id: I3a0c2c05e295ac05ed51a531dabda668be204ca0
    Atomic/SMP update.  [manual merge to dalvik-dev]
    
    Added an underscore to _ARM_HAVE_LDREX_STREX to make it match the others.
    
    Added __ARM_HAVE_DMB and __ARM_HAVE_LDREXD when appropriate.
    
    Fixed some typos.
    
    Change-Id: I85ca1980192b509a09190dd84f1ca4a361e9c3a2
    Atomic/SMP update.
    
    Added an underscore to _ARM_HAVE_LDREX_STREX to make it match the others.
    
    Added __ARM_HAVE_DMB and __ARM_HAVE_LDREXD when appropriate.
    
    Fixed some typos.
    
    Change-Id: I2f55febcff4aeb7de572a514fb2cd2f820dca27c
    Fix setjmp()/longjmp() to save FP registers on ARMv7.
    
    Change-Id: I8ec684c8f8ca1ae58c8feb330b97d1e2b81caeef
    eclair snapshot
    Fix TLS access for ARMv6 and beyond.
    
    For performance reasons, we don't call the kernel helper. Instead, we directly
    access the TLS register on ARMv6 and higher. For ARMv5TE, keep using the hard-coded
    address populated by the kernel on each task switch.
    
    NOTE: Since we don't call the kernel helper, this must precisely match your
          kernel configuration. This is controlled by setting the ARCH_ARM_HAVE_TLS_REGISTER
          variable to 'true' in your board configuration file.
    ARM architecture reference manuals for ARMv6 & ARMv7 state that the use of 'swp' instruction is deprecated
    ARMv6 onwards. These architectures provide the load-linked, store-conditional pair of ldrex/strex whose use
    is recommended in place of 'swp'. Also, the description of the 'swp' instruction in the ARMv6 reference
    manual states that the swap operation does not include any memory barrier guarantees.This fix attempts to
    address these issues by providing an atomic swap implementation using ldrex/strex under _ARM_HAVE_LDREX_STREX
    macro.  This Fix is verified on ST Ericsson's U8500 platform and Submitted on behalf of a third-party:
    Surinder-pal SINGH from STMicroelectronics.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Introduce a new ARM header file <machine/cpu-features.h>
    
    Introduce a new header file containing ARM-specific feature
    test macros (e.g. __ARM_HAVE_PAIR_LOAD_STORE corresponding
    to ldrd/strd instructions). Also modify a few files in our
    system to use the macros in order to build for ARMv4T.
    libc: remove C++ comments from public headers.
    
    Change-Id: I4af84f912062cd2ff34711c25122fb323f20c032
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix setjmp()/longjmp() to save FP registers on ARMv7. - DO NOT MERGE
    
    Change-Id: I3a0c2c05e295ac05ed51a531dabda668be204ca0
    Fix setjmp()/longjmp() to save FP registers on ARMv7.
    
    Change-Id: I8ec684c8f8ca1ae58c8feb330b97d1e2b81caeef
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Added actual event logging calls to the FORTIFY_SOURCE methods.
    
    Change-Id: I3bf4fa8678c33187cb8ce4b75e666ddcd24403ab
    _FORTIFY_SOURCE: check for integer overflows
    
    Ensure that strcat / strncat check for integer overflows
    when computing the length of the resulting string.
    
    Change-Id: Ib806ad33a0d3b50876f384bc17787a28f0dddc37
    libc: implement some FORTIFY_SOURCE functions
    
    Add initial support for -D_FORTIFY_SOURCE to bionic for the
    following functions:
    
    * memcpy
    * memmove
    * strcpy
    * strcat
    * strncpy
    * strncat
    
    This change adds a new version of the above functions which passes
    the size of the destination buffer to __builtin___*_chk.
    
    If the compiler can determine, at compile time, that the destination
    buffer is large enough, or the destination buffer can point to an object
    of unknown size, then the check call is bypassed.
    
    If the compiler can't make a compile time decision, then it calls
    the __*_chk() function, which does a runtime buffer size check
    
    These options are only enabled if the code is compiled with
    -D_FORTIFY_SOURCE=1 or 2, and only when optimizations are enabled.
    
    Please see
    * http://gcc.gnu.org/onlinedocs/gcc/Object-Size-Checking.html
    * http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
    
    for additional details on FORTIFY_SOURCE.
    
    Testing: Compiled the entire Android tree with -D_FORTIFY_SOURCE=1,
    and verified that everything appears to be working properly.
    Also created a test buffer overflow, and verified that it was
    caught by this change.
    
    Change-Id: I4fddb445bafe92b16845b22458d72e6dedd24fbc
    Implement the "abort" stub in assembly for ARM.
    
    So that we can always get the full stack trace regardless of gcc's handling
    of the "noreturn" attribute associated with abort().
    
    (Cherry pick of Id264a5167e7cabbf11515fbc48f5469c527e34d4.)
    
    Bug: 6455193
    
    Conflicts:
    
            libc/Android.mk
    
    Change-Id: I568fc5303fd1d747075ca933355f914122f94dac
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of string: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    FORTIFY_SOURCE: strlen check.
    
    This test is designed to detect code such as:
    
    int main() {
      char buf[10];
      memcpy(buf, "1234567890", sizeof(buf));
      size_t len = strlen(buf); // segfault here with _FORTIFY_SOURCE
      printf("%d\n", len);
      return 0;
    }
    
    or anytime strlen reads beyond an object boundary. This should
    help address memory leakage vulnerabilities and make other
    unrelated vulnerabilities harder to exploit.
    
    Change-Id: I354b425be7bef4713c85f6bab0e9738445e00182
    Added actual event logging calls to the FORTIFY_SOURCE methods.
    
    Change-Id: I3bf4fa8678c33187cb8ce4b75e666ddcd24403ab
    _FORTIFY_SOURCE: add memset / bzero support
    
    Add _FORTIFY_SOURCE support for the following functions:
    
    * memset
    * bzero
    
    Move the __BIONIC_FORTIFY_INLINE definition to cdefs.h so it
    can be used from multiple header files.
    
    Change-Id: Iead4d5e35de6ec97786d58ee12573f9b11135bb7
    libc: implement some FORTIFY_SOURCE functions
    
    Add initial support for -D_FORTIFY_SOURCE to bionic for the
    following functions:
    
    * memcpy
    * memmove
    * strcpy
    * strcat
    * strncpy
    * strncat
    
    This change adds a new version of the above functions which passes
    the size of the destination buffer to __builtin___*_chk.
    
    If the compiler can determine, at compile time, that the destination
    buffer is large enough, or the destination buffer can point to an object
    of unknown size, then the check call is bypassed.
    
    If the compiler can't make a compile time decision, then it calls
    the __*_chk() function, which does a runtime buffer size check
    
    These options are only enabled if the code is compiled with
    -D_FORTIFY_SOURCE=1 or 2, and only when optimizations are enabled.
    
    Please see
    * http://gcc.gnu.org/onlinedocs/gcc/Object-Size-Checking.html
    * http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
    
    for additional details on FORTIFY_SOURCE.
    
    Testing: Compiled the entire Android tree with -D_FORTIFY_SOURCE=1,
    and verified that everything appears to be working properly.
    Also created a test buffer overflow, and verified that it was
    caught by this change.
    
    Change-Id: I4fddb445bafe92b16845b22458d72e6dedd24fbc
    Implement the "abort" stub in assembly for ARM.
    
    So that we can always get the full stack trace regardless of gcc's handling
    of the "noreturn" attribute associated with abort().
    
    (Cherry pick of Id264a5167e7cabbf11515fbc48f5469c527e34d4.)
    
    Bug: 6455193
    
    Conflicts:
    
            libc/Android.mk
    
    Change-Id: I568fc5303fd1d747075ca933355f914122f94dac
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Generic memcpy should define MEMCOPY before including bcopy.c
    
    Signed-off-by: Chris Dearman <chris@mips.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Added actual event logging calls to the FORTIFY_SOURCE methods.
    
    Change-Id: I3bf4fa8678c33187cb8ce4b75e666ddcd24403ab
    _FORTIFY_SOURCE: check for integer overflows
    
    Ensure that strcat / strncat check for integer overflows
    when computing the length of the resulting string.
    
    Change-Id: Ib806ad33a0d3b50876f384bc17787a28f0dddc37
    libc: implement some FORTIFY_SOURCE functions
    
    Add initial support for -D_FORTIFY_SOURCE to bionic for the
    following functions:
    
    * memcpy
    * memmove
    * strcpy
    * strcat
    * strncpy
    * strncat
    
    This change adds a new version of the above functions which passes
    the size of the destination buffer to __builtin___*_chk.
    
    If the compiler can determine, at compile time, that the destination
    buffer is large enough, or the destination buffer can point to an object
    of unknown size, then the check call is bypassed.
    
    If the compiler can't make a compile time decision, then it calls
    the __*_chk() function, which does a runtime buffer size check
    
    These options are only enabled if the code is compiled with
    -D_FORTIFY_SOURCE=1 or 2, and only when optimizations are enabled.
    
    Please see
    * http://gcc.gnu.org/onlinedocs/gcc/Object-Size-Checking.html
    * http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
    
    for additional details on FORTIFY_SOURCE.
    
    Testing: Compiled the entire Android tree with -D_FORTIFY_SOURCE=1,
    and verified that everything appears to be working properly.
    Also created a test buffer overflow, and verified that it was
    caught by this change.
    
    Change-Id: I4fddb445bafe92b16845b22458d72e6dedd24fbc
    Implement the "abort" stub in assembly for ARM.
    
    So that we can always get the full stack trace regardless of gcc's handling
    of the "noreturn" attribute associated with abort().
    
    (Cherry pick of Id264a5167e7cabbf11515fbc48f5469c527e34d4.)
    
    Bug: 6455193
    
    Conflicts:
    
            libc/Android.mk
    
    Change-Id: I568fc5303fd1d747075ca933355f914122f94dac
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of string: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of string: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    FORTIFY_SOURCE: add strlcpy / strlcat support
    
    Add strlcpy / strlcat support to FORTIFY_SOURCE. This allows
    us to do consistency checks on to ensure we don't overflow buffers
    when the compiler is able to tell us the size of the buffer we're
    dealing with.
    
    Unlike previous changes, this change DOES NOT use the compiler's
    builtin support. Instead, we do everything the compiler would
    normally do.
    
    Change-Id: I47c099a911382452eafd711f8e9bfe7c2d0a0d22
    Added actual event logging calls to the FORTIFY_SOURCE methods.
    
    Change-Id: I3bf4fa8678c33187cb8ce4b75e666ddcd24403ab
    libc: implement some FORTIFY_SOURCE functions
    
    Add initial support for -D_FORTIFY_SOURCE to bionic for the
    following functions:
    
    * memcpy
    * memmove
    * strcpy
    * strcat
    * strncpy
    * strncat
    
    This change adds a new version of the above functions which passes
    the size of the destination buffer to __builtin___*_chk.
    
    If the compiler can determine, at compile time, that the destination
    buffer is large enough, or the destination buffer can point to an object
    of unknown size, then the check call is bypassed.
    
    If the compiler can't make a compile time decision, then it calls
    the __*_chk() function, which does a runtime buffer size check
    
    These options are only enabled if the code is compiled with
    -D_FORTIFY_SOURCE=1 or 2, and only when optimizations are enabled.
    
    Please see
    * http://gcc.gnu.org/onlinedocs/gcc/Object-Size-Checking.html
    * http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
    
    for additional details on FORTIFY_SOURCE.
    
    Testing: Compiled the entire Android tree with -D_FORTIFY_SOURCE=1,
    and verified that everything appears to be working properly.
    Also created a test buffer overflow, and verified that it was
    caught by this change.
    
    Change-Id: I4fddb445bafe92b16845b22458d72e6dedd24fbc
    Implement the "abort" stub in assembly for ARM.
    
    So that we can always get the full stack trace regardless of gcc's handling
    of the "noreturn" attribute associated with abort().
    
    (Cherry pick of Id264a5167e7cabbf11515fbc48f5469c527e34d4.)
    
    Bug: 6455193
    
    Conflicts:
    
            libc/Android.mk
    
    Change-Id: I568fc5303fd1d747075ca933355f914122f94dac
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    string: Fix wrong comparison semantics
    
    Chars are signed for x86 -- correct the comparison semantics.
    
    Change-Id: I2049e98eb063c0b4e83ea973d3fcae49c6817dde
    Author: Liubov Dmitrieva <liubov.dmitrieva@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    improve readability of string: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    string: Fix wrong comparison semantics
    
    Chars are signed for x86 -- correct the comparison semantics.
    
    Change-Id: I2049e98eb063c0b4e83ea973d3fcae49c6817dde
    Author: Liubov Dmitrieva <liubov.dmitrieva@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of string: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of string: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Initial Contribution
    improve readability of string: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    string: Fix wrong comparison semantics
    
    Chars are signed for x86 -- correct the comparison semantics.
    
    Change-Id: I2049e98eb063c0b4e83ea973d3fcae49c6817dde
    Author: Liubov Dmitrieva <liubov.dmitrieva@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    improve readability of string: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of string: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Added actual event logging calls to the FORTIFY_SOURCE methods.
    
    Change-Id: I3bf4fa8678c33187cb8ce4b75e666ddcd24403ab
    libc: implement some FORTIFY_SOURCE functions
    
    Add initial support for -D_FORTIFY_SOURCE to bionic for the
    following functions:
    
    * memcpy
    * memmove
    * strcpy
    * strcat
    * strncpy
    * strncat
    
    This change adds a new version of the above functions which passes
    the size of the destination buffer to __builtin___*_chk.
    
    If the compiler can determine, at compile time, that the destination
    buffer is large enough, or the destination buffer can point to an object
    of unknown size, then the check call is bypassed.
    
    If the compiler can't make a compile time decision, then it calls
    the __*_chk() function, which does a runtime buffer size check
    
    These options are only enabled if the code is compiled with
    -D_FORTIFY_SOURCE=1 or 2, and only when optimizations are enabled.
    
    Please see
    * http://gcc.gnu.org/onlinedocs/gcc/Object-Size-Checking.html
    * http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
    
    for additional details on FORTIFY_SOURCE.
    
    Testing: Compiled the entire Android tree with -D_FORTIFY_SOURCE=1,
    and verified that everything appears to be working properly.
    Also created a test buffer overflow, and verified that it was
    caught by this change.
    
    Change-Id: I4fddb445bafe92b16845b22458d72e6dedd24fbc
    Implement the "abort" stub in assembly for ARM.
    
    So that we can always get the full stack trace regardless of gcc's handling
    of the "noreturn" attribute associated with abort().
    
    (Cherry pick of Id264a5167e7cabbf11515fbc48f5469c527e34d4.)
    
    Bug: 6455193
    
    Conflicts:
    
            libc/Android.mk
    
    Change-Id: I568fc5303fd1d747075ca933355f914122f94dac
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    FORTIFY_SOURCE: add strlcpy / strlcat support
    
    Add strlcpy / strlcat support to FORTIFY_SOURCE. This allows
    us to do consistency checks on to ensure we don't overflow buffers
    when the compiler is able to tell us the size of the buffer we're
    dealing with.
    
    Unlike previous changes, this change DOES NOT use the compiler's
    builtin support. Instead, we do everything the compiler would
    normally do.
    
    Change-Id: I47c099a911382452eafd711f8e9bfe7c2d0a0d22
    Added actual event logging calls to the FORTIFY_SOURCE methods.
    
    Change-Id: I3bf4fa8678c33187cb8ce4b75e666ddcd24403ab
    libc: implement some FORTIFY_SOURCE functions
    
    Add initial support for -D_FORTIFY_SOURCE to bionic for the
    following functions:
    
    * memcpy
    * memmove
    * strcpy
    * strcat
    * strncpy
    * strncat
    
    This change adds a new version of the above functions which passes
    the size of the destination buffer to __builtin___*_chk.
    
    If the compiler can determine, at compile time, that the destination
    buffer is large enough, or the destination buffer can point to an object
    of unknown size, then the check call is bypassed.
    
    If the compiler can't make a compile time decision, then it calls
    the __*_chk() function, which does a runtime buffer size check
    
    These options are only enabled if the code is compiled with
    -D_FORTIFY_SOURCE=1 or 2, and only when optimizations are enabled.
    
    Please see
    * http://gcc.gnu.org/onlinedocs/gcc/Object-Size-Checking.html
    * http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
    
    for additional details on FORTIFY_SOURCE.
    
    Testing: Compiled the entire Android tree with -D_FORTIFY_SOURCE=1,
    and verified that everything appears to be working properly.
    Also created a test buffer overflow, and verified that it was
    caught by this change.
    
    Change-Id: I4fddb445bafe92b16845b22458d72e6dedd24fbc
    Implement the "abort" stub in assembly for ARM.
    
    So that we can always get the full stack trace regardless of gcc's handling
    of the "noreturn" attribute associated with abort().
    
    (Cherry pick of Id264a5167e7cabbf11515fbc48f5469c527e34d4.)
    
    Bug: 6455193
    
    Conflicts:
    
            libc/Android.mk
    
    Change-Id: I568fc5303fd1d747075ca933355f914122f94dac
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    FORTIFY_SOURCE: enhanced memcpy protections.
    
    Two changes:
    
    1) Detect memory read overruns.
    
    For example:
    
    int main() {
      char buf[10];
      memcpy(buf, "abcde", sizeof(buf));
      sprintf("%s\n", buf);
    }
    
    because "abcde" is only 6 bytes, copying 10 bytes from it is a bug.
    This particular bug will be detected at compile time.  Other similar
    bugs may be detected at runtime.
    
    2) Detect overlapping buffers on memcpy()
    
    It is a bug to call memcpy() on buffers which overlap. For
    example, the following code is buggy:
    
      char buf3[0x800];
      char *first_half  = &buf3[0x400];
      char *second_half = &buf3[1];
      memset(buf3, 0, sizeof(buf3));
      memcpy(first_half, second_half, 0x400);
      printf("1: %s\n", buf3);
    
    We now detect this at compile and run time.
    
    Change-Id: I092bd89f11f18e08e8a9dda0ca903aaea8e06d91
    memmove: Don't call memcpy if regions overlap
    
    memmove() unconditionally calls memcpy() if "dst" < "src". For
    example, in the code below, memmove() would end up calling memcpy(),
    even though the regions of memory overlap.
    
    int main() {
      char buf3[0x800];
      char *dst  = &buf3[1];
      char *src = &buf3[0x400];
      memset(buf3, 0, sizeof(buf3));
      memmove(dst, src, 0x400);
      printf("1: %s\n", buf3);
      return 0;
    }
    
    Calling memcpy() on overlaping regions only works if you assume
    that memcpy() copies from start to finish. On some architectures,
    it's more efficient to call memcpy() from finish to start.
    
    This is also triggering a failure in some of my code.
    
    More reading:
    * http://lwn.net/Articles/414467/
    * https://bugzilla.redhat.com/show_bug.cgi?id=638477#c31 (comment 31)
    
    Change-Id: I65a51ae3a52dd4af335fe5c278056b8c2cbd8948
    Use more optimized version of memmove
    
    On ARM there is currently no assembler optimized memmove in libc.
    There is however a more optimized bcopy which copies long instead
    of bytes where possible. This almost doubles the performance in
    best case.
    
    Change-Id: I1f1cd27529443358047c385730deaf938ce4e642
    libc: optimize memmove() with memcpy() if possible.
    
    Change-Id: I90e578fdc82e427caee8fa4157ce3f8c6c99926d
    Revert "libc: memmove(): non-overlapping block optim."
    
    This reverts commit 80fba9a2fe4eacaabee99cf0bbead872c2792231,
    which caused the system to not boot anymore, aborting with:
    "java.lang.RuntimeException: Missing static main on com.android.server.SystemServer".
    
    Change-Id: I745e0a23c728cccf5f95a3c7642d544478a4e57e
    libc: memmove(): non-overlapping block optim.
    
    Change-Id: I5652f4f97ca59d95176443fc27c737ef76258183
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Added actual event logging calls to the FORTIFY_SOURCE methods.
    
    Change-Id: I3bf4fa8678c33187cb8ce4b75e666ddcd24403ab
    libc: implement some FORTIFY_SOURCE functions
    
    Add initial support for -D_FORTIFY_SOURCE to bionic for the
    following functions:
    
    * memcpy
    * memmove
    * strcpy
    * strcat
    * strncpy
    * strncat
    
    This change adds a new version of the above functions which passes
    the size of the destination buffer to __builtin___*_chk.
    
    If the compiler can determine, at compile time, that the destination
    buffer is large enough, or the destination buffer can point to an object
    of unknown size, then the check call is bypassed.
    
    If the compiler can't make a compile time decision, then it calls
    the __*_chk() function, which does a runtime buffer size check
    
    These options are only enabled if the code is compiled with
    -D_FORTIFY_SOURCE=1 or 2, and only when optimizations are enabled.
    
    Please see
    * http://gcc.gnu.org/onlinedocs/gcc/Object-Size-Checking.html
    * http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
    
    for additional details on FORTIFY_SOURCE.
    
    Testing: Compiled the entire Android tree with -D_FORTIFY_SOURCE=1,
    and verified that everything appears to be working properly.
    Also created a test buffer overflow, and verified that it was
    caught by this change.
    
    Change-Id: I4fddb445bafe92b16845b22458d72e6dedd24fbc
    Implement the "abort" stub in assembly for ARM.
    
    So that we can always get the full stack trace regardless of gcc's handling
    of the "noreturn" attribute associated with abort().
    
    (Cherry pick of Id264a5167e7cabbf11515fbc48f5469c527e34d4.)
    
    Bug: 6455193
    
    Conflicts:
    
            libc/Android.mk
    
    Change-Id: I568fc5303fd1d747075ca933355f914122f94dac
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix return value.
    
    Return a valid pointer (not NULL) when the character "c" is at the end of "src".
    
    Change-Id: Iab0b677943f2c8a9fbb255c44689f5d6dc3535d7
    Example:
      memccpy(dest, "xzy", 'y', 3) should return dest+3 rather than null.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Correct generic memset implementation
    
    Signed-off-by: Chris Dearman <chris@mips.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    FORTIFY_SOURCE: revert memcpy changes.
    
    Performance regressions.  Hopefully this is a temporary
    rollback.
    
    Bug: 6821003
    Change-Id: I84abbb89e1739d506b583f2f1668f31534127764
    FORTIFY_SOURCE: restore __memcpy_chk()
    
    In our previous FORTIFY_SOURCE change, we started using a custom
    inline for memcpy(), rather than using GCC's __builtin_memcpy_chk().
    This allowed us to delete our copy of __memcpy_chk(), and replace it
    by __memcpy_chk2().
    
    Apparently GCC uses __memcpy_chk() outside of __builtin_memcpy_chk().
    Specifically, __memcpy_chk() is used by __builtin__memMOVE_chk() under
    certain optimization levels.
    
    Keep the old __memcpy_chk() function around, and have it call into
    __memcpy_chk2().
    
    Change-Id: I2453930b24b8a492a3b6ed860e18d92a6b762b80
    FORTIFY_SOURCE: enhanced memcpy protections.
    
    Two changes:
    
    1) Detect memory read overruns.
    
    For example:
    
    int main() {
      char buf[10];
      memcpy(buf, "abcde", sizeof(buf));
      sprintf("%s\n", buf);
    }
    
    because "abcde" is only 6 bytes, copying 10 bytes from it is a bug.
    This particular bug will be detected at compile time.  Other similar
    bugs may be detected at runtime.
    
    2) Detect overlapping buffers on memcpy()
    
    It is a bug to call memcpy() on buffers which overlap. For
    example, the following code is buggy:
    
      char buf3[0x800];
      char *first_half  = &buf3[0x400];
      char *second_half = &buf3[1];
      memset(buf3, 0, sizeof(buf3));
      memcpy(first_half, second_half, 0x400);
      printf("1: %s\n", buf3);
    
    We now detect this at compile and run time.
    
    Change-Id: I092bd89f11f18e08e8a9dda0ca903aaea8e06d91
    Added actual event logging calls to the FORTIFY_SOURCE methods.
    
    Change-Id: I3bf4fa8678c33187cb8ce4b75e666ddcd24403ab
    libc: implement some FORTIFY_SOURCE functions
    
    Add initial support for -D_FORTIFY_SOURCE to bionic for the
    following functions:
    
    * memcpy
    * memmove
    * strcpy
    * strcat
    * strncpy
    * strncat
    
    This change adds a new version of the above functions which passes
    the size of the destination buffer to __builtin___*_chk.
    
    If the compiler can determine, at compile time, that the destination
    buffer is large enough, or the destination buffer can point to an object
    of unknown size, then the check call is bypassed.
    
    If the compiler can't make a compile time decision, then it calls
    the __*_chk() function, which does a runtime buffer size check
    
    These options are only enabled if the code is compiled with
    -D_FORTIFY_SOURCE=1 or 2, and only when optimizations are enabled.
    
    Please see
    * http://gcc.gnu.org/onlinedocs/gcc/Object-Size-Checking.html
    * http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
    
    for additional details on FORTIFY_SOURCE.
    
    Testing: Compiled the entire Android tree with -D_FORTIFY_SOURCE=1,
    and verified that everything appears to be working properly.
    Also created a test buffer overflow, and verified that it was
    caught by this change.
    
    Change-Id: I4fddb445bafe92b16845b22458d72e6dedd24fbc
    Implement the "abort" stub in assembly for ARM.
    
    So that we can always get the full stack trace regardless of gcc's handling
    of the "noreturn" attribute associated with abort().
    
    (Cherry pick of Id264a5167e7cabbf11515fbc48f5469c527e34d4.)
    
    Bug: 6455193
    
    Conflicts:
    
            libc/Android.mk
    
    Change-Id: I568fc5303fd1d747075ca933355f914122f94dac
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Added actual event logging calls to the FORTIFY_SOURCE methods.
    
    Change-Id: I3bf4fa8678c33187cb8ce4b75e666ddcd24403ab
    libc: implement some FORTIFY_SOURCE functions
    
    Add initial support for -D_FORTIFY_SOURCE to bionic for the
    following functions:
    
    * memcpy
    * memmove
    * strcpy
    * strcat
    * strncpy
    * strncat
    
    This change adds a new version of the above functions which passes
    the size of the destination buffer to __builtin___*_chk.
    
    If the compiler can determine, at compile time, that the destination
    buffer is large enough, or the destination buffer can point to an object
    of unknown size, then the check call is bypassed.
    
    If the compiler can't make a compile time decision, then it calls
    the __*_chk() function, which does a runtime buffer size check
    
    These options are only enabled if the code is compiled with
    -D_FORTIFY_SOURCE=1 or 2, and only when optimizations are enabled.
    
    Please see
    * http://gcc.gnu.org/onlinedocs/gcc/Object-Size-Checking.html
    * http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
    
    for additional details on FORTIFY_SOURCE.
    
    Testing: Compiled the entire Android tree with -D_FORTIFY_SOURCE=1,
    and verified that everything appears to be working properly.
    Also created a test buffer overflow, and verified that it was
    caught by this change.
    
    Change-Id: I4fddb445bafe92b16845b22458d72e6dedd24fbc
    Implement the "abort" stub in assembly for ARM.
    
    So that we can always get the full stack trace regardless of gcc's handling
    of the "noreturn" attribute associated with abort().
    
    (Cherry pick of Id264a5167e7cabbf11515fbc48f5469c527e34d4.)
    
    Bug: 6455193
    
    Conflicts:
    
            libc/Android.mk
    
    Change-Id: I568fc5303fd1d747075ca933355f914122f94dac
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    string: tidy up strndup()
    
    It decreases code size:
       text    data     bss     dec     hex filename
        161       0       0     161      a1 strndup-BEFORE.o
        153       0       0     153      99 strndup-AFTER.o
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of string: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of string: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Added actual event logging calls to the FORTIFY_SOURCE methods.
    
    Change-Id: I3bf4fa8678c33187cb8ce4b75e666ddcd24403ab
    _FORTIFY_SOURCE: add memset / bzero support
    
    Add _FORTIFY_SOURCE support for the following functions:
    
    * memset
    * bzero
    
    Move the __BIONIC_FORTIFY_INLINE definition to cdefs.h so it
    can be used from multiple header files.
    
    Change-Id: Iead4d5e35de6ec97786d58ee12573f9b11135bb7
    libc: implement some FORTIFY_SOURCE functions
    
    Add initial support for -D_FORTIFY_SOURCE to bionic for the
    following functions:
    
    * memcpy
    * memmove
    * strcpy
    * strcat
    * strncpy
    * strncat
    
    This change adds a new version of the above functions which passes
    the size of the destination buffer to __builtin___*_chk.
    
    If the compiler can determine, at compile time, that the destination
    buffer is large enough, or the destination buffer can point to an object
    of unknown size, then the check call is bypassed.
    
    If the compiler can't make a compile time decision, then it calls
    the __*_chk() function, which does a runtime buffer size check
    
    These options are only enabled if the code is compiled with
    -D_FORTIFY_SOURCE=1 or 2, and only when optimizations are enabled.
    
    Please see
    * http://gcc.gnu.org/onlinedocs/gcc/Object-Size-Checking.html
    * http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
    
    for additional details on FORTIFY_SOURCE.
    
    Testing: Compiled the entire Android tree with -D_FORTIFY_SOURCE=1,
    and verified that everything appears to be working properly.
    Also created a test buffer overflow, and verified that it was
    caught by this change.
    
    Change-Id: I4fddb445bafe92b16845b22458d72e6dedd24fbc
    Implement the "abort" stub in assembly for ARM.
    
    So that we can always get the full stack trace regardless of gcc's handling
    of the "noreturn" attribute associated with abort().
    
    (Cherry pick of Id264a5167e7cabbf11515fbc48f5469c527e34d4.)
    
    Bug: 6455193
    
    Conflicts:
    
            libc/Android.mk
    
    Change-Id: I568fc5303fd1d747075ca933355f914122f94dac
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    string: Fix wrong comparison semantics
    
    Chars are signed for x86 -- correct the comparison semantics.
    
    Change-Id: I2049e98eb063c0b4e83ea973d3fcae49c6817dde
    Author: Liubov Dmitrieva <liubov.dmitrieva@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    improve readability of string: fix indentation and remove trailing spaces
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix build.
    
    prebuilt/linux-x86/toolchain/arm-linux-androideabi-4.4.x/bin/../lib/gcc/arm-linux-androideabi/4.4.3/../../../../arm-linux-androideabi/bin/ld: out/target/product/stingray/obj/lib/libc.so: error: undefined reference to '_inet_pton'
    
    Change-Id: Iee9f1ee87d0a37fa6aa91ecfb6283a7e03fb91c2
    Update to the latest NetBSD inet_pton.c.
    
    Bug: 4580520
    Change-Id: I1079574b14e78e153e10ac527ca406ef560af310
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    added missing ether_aton and ether_ntoa
    
    Change-Id: I32ee448abde4d5693d393030ed77ddc6d2ad1dfc
    Add implementation of fdprintf, clearenv, and stubs for ttyname_r, *usershell
    
    Change-Id:      I5fe7e8b6ee5edbb49e707c3b6737a58563781fa3
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    added missing ether_aton and ether_ntoa
    
    Change-Id: I32ee448abde4d5693d393030ed77ddc6d2ad1dfc
    Add implementation of fdprintf, clearenv, and stubs for ttyname_r, *usershell
    
    Change-Id:      I5fe7e8b6ee5edbb49e707c3b6737a58563781fa3
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    inet_ntop: pass the size of tmp to snprintf()
    
    Fix runtime error when snprintf() FORTIFY_SOURCE protections are
    applied. The size passed to snprintf() is larger than the tmp
    buffer size, which results in a runtime assertion failure.
    
    Even though the size passed to snprintf is larger than the buffer,
    there's no danger of overwriting the buffer because of the format
    string passed to snprintf.
    
    Change-Id: I35f0217d25f3b9c6d04c5a76c3238759c235545a
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add mlockall and munlockall for Google TV.
    
    Change-Id: I10e961d701e74aab07211ec7975f61167e387853
    Add getsid system call to bionic
    
    Add getsid() system call to bionic for
    all architectures. This is needed for various tools
    (e.g. perf).
    
    Adding the getsid system call was done in 3 steps:
    () add getsid system call (function name and syscall
    number) to libc/SYSCALLS.TXT
    () generate all necessary headers by calling
    libc/tools/gensyscalls.py. This patch is adding
    the generated files since the build system
    does not call gensyscalls.py.
    () add the system call signature to libc/include/unistd.h
    
    Change-Id: Id69a257e13ec02e1a44085a6b217a3f19ab025b1
    Signed-off-by: Irina Tirdea <irina.tirdea@intel.com>
    Add unshare() syscall.
    
    (cherry-pick of 5467f25f82934d611c60f8bc57a05114f3c1bea0.)
    
    Bug: 6925012
    Change-Id: Ic5ea2fbd606311087de05d7a3594df2fa9b2fef9
    Add unshare() syscall.
    
    Bug: 6925012
    Change-Id: I2530a8f6cea49eb32b60f8f9c4d86963773456ca
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    Add getsid system call to bionic
    
    Add getsid() system call to bionic for
    all architectures. This is needed for various tools
    (e.g. perf).
    
    Adding the getsid system call was done in 3 steps:
    () add getsid system call (function name and syscall
    number) to libc/SYSCALLS.TXT
    () generate all necessary headers by calling
    libc/tools/gensyscalls.py. This patch is adding
    the generated files since the build system
    does not call gensyscalls.py.
    () add the system call signature to libc/include/unistd.h
    
    Change-Id: Id69a257e13ec02e1a44085a6b217a3f19ab025b1
    Signed-off-by: Irina Tirdea <irina.tirdea@intel.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    Add mlockall and munlockall for Google TV.
    
    Change-Id: I10e961d701e74aab07211ec7975f61167e387853
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    Add mlockall and munlockall for Google TV.
    
    Change-Id: I10e961d701e74aab07211ec7975f61167e387853
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    Add unshare() syscall.
    
    (cherry-pick of 5467f25f82934d611c60f8bc57a05114f3c1bea0.)
    
    Bug: 6925012
    Change-Id: Ic5ea2fbd606311087de05d7a3594df2fa9b2fef9
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    [MIPS] Add support for MIPS syscalls
    
    Change-Id: I4deba67e15c865c4c2db03064c04098a09828ea6
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Signed-off-by: Chris Dearman <chris@mips.com>
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Add missing symbol type directives.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    arm: rewrite crtbegin* as C files.
    
    Rewrite
     crtbegin.S     -> crtbegin.c
     crtbegin_so.S  -> crtbegin_so.c
    
    This change allows us to generate PIC code without relying
    on text relocations.
    
    As a consequence of this rewrite, also rewrite
      __dso_handle.S    -> __dso_handle.c
      __dso_handle_so.S -> __dso_handle_so.c
      atexit.S          -> atexit.c
    
    In crtbegin.c _start, place the __PREINIT_ARRAY__, __INIT_ARRAY__,
    __FINI_ARRAY__, and __CTOR_LIST__ variables onto the stack, instead of
    passing a pointer to the text section of the binary.
    
    This change appears sorta wonky, as I attempted to preserve,
    as much as possible, the structure of the original assembly.
    As a result, you have C files including other C files, and other
    programming uglyness.
    
    Result: This change reduces the number of files with text-relocations
    from 315 to 19 on my Android build.
    
    Before:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      315
    
    After:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      19
    
    Change-Id: Ib9f98107c0eeabcb606e1ddc7ed7fc4eba01c9c4
    Enable functional DSO object destruction
    
    Unfortunately, legacy .so files for ARM don't have a correct crtbegin file.
    Consequently, we have to grandfather the old __dso_handle behaviour.
    Add some ifdefs for ARM to allow it to use the old code until we can work
    out a transition.
    
    Change-Id: I6a28f368267d792c94e1d985d8344023bc632f6f
    Author: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Enable functional DSO object destruction
    
    Unfortunately, legacy .so files for ARM don't have a correct crtbegin file.
    Consequently, we have to grandfather the old __dso_handle behaviour.
    Add some ifdefs for ARM to allow it to use the old code until we can work
    out a transition.
    
    Change-Id: I6a28f368267d792c94e1d985d8344023bc632f6f
    Author: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Revert "Update X86 Bionic CRT files for unwind/exceptions"
    
    This reverts commit dc3bc87b43d0d73d89cca59692b80de878e11a5d,
    causes netd to crash.
    Update X86 Bionic CRT files for unwind/exceptions
    
    Several updates to Bionic crt*.o files to implement Linux/x86
    stack unwind/exception handling.
    Mark __dso_handle as hidden.
    Note: Requires complete rebuild due to CRT changes. Google will
    need to regenerate and check-in all the prebuilt x86 CRT object
    files and libraries which link to them.
    
    Change-Id: I191ce1afb0dee7bbc28dcd9694e5919226dbd070
    Signed-off-by: Bruce J Beare <bruce.j.beare@intel.com>
    Signed-off-by: Mark D Horn <mark.d.horn@intel.com>
    Author: Lu, Hongjiu <hongjiu.lu@intel.com>
    Allow dlclose() to properly call static C++ destructors.
    
    With this patch _and_ an upcoming build/ patch, the destruction
    of static C++ objects contained in shared libraries will happen
    properly when dlclose() is called.
    
    Note that this change introduces crtbegin_so.S and crtend_so.S which
    are currently ignored by the build system.
    
    + move definition of __dso_handle to the right place
    (before that, all shared libraries used the __dso_handle
    global variable from the C library).
    
    Note that we keep a 'weak' __dso_handle in aeabi.c to avoid
    breaking the build until the next patch to build/core/combo/
    appears. We will be able to remove that later.
    
    + move bionic/aeabi.c to arch-arm/bionic/ (its proper location)
    
    NOTE: The NDK will need to be modified to enable this feature in
             the shared libraries that are generated through it.
    
    Change-Id: I99cd801375bbaef0581175893d1aa0943211b9bc
    Change-Id: I68cc462aeb2460345a53bdb9941ce4bfc10456fb
    bionic: fix clearenv() compiler warning and related comment typos
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    Add implementation of fdprintf, clearenv, and stubs for ttyname_r, *usershell
    
    Change-Id:      I5fe7e8b6ee5edbb49e707c3b6737a58563781fa3
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Import regex from OpenBSD
    
    Change-Id: I7ad7d907ef65e4e345f94777d730813b1270a612
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    arm: rewrite crtbegin* as C files.
    
    Rewrite
     crtbegin.S     -> crtbegin.c
     crtbegin_so.S  -> crtbegin_so.c
    
    This change allows us to generate PIC code without relying
    on text relocations.
    
    As a consequence of this rewrite, also rewrite
      __dso_handle.S    -> __dso_handle.c
      __dso_handle_so.S -> __dso_handle_so.c
      atexit.S          -> atexit.c
    
    In crtbegin.c _start, place the __PREINIT_ARRAY__, __INIT_ARRAY__,
    __FINI_ARRAY__, and __CTOR_LIST__ variables onto the stack, instead of
    passing a pointer to the text section of the binary.
    
    This change appears sorta wonky, as I attempted to preserve,
    as much as possible, the structure of the original assembly.
    As a result, you have C files including other C files, and other
    programming uglyness.
    
    Result: This change reduces the number of files with text-relocations
    from 315 to 19 on my Android build.
    
    Before:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      315
    
    After:
      $ scanelf -aR $OUT/system | grep TEXTREL | wc -l
      19
    
    Change-Id: Ib9f98107c0eeabcb606e1ddc7ed7fc4eba01c9c4
    Enable functional DSO object destruction
    
    Unfortunately, legacy .so files for ARM don't have a correct crtbegin file.
    Consequently, we have to grandfather the old __dso_handle behaviour.
    Add some ifdefs for ARM to allow it to use the old code until we can work
    out a transition.
    
    Change-Id: I6a28f368267d792c94e1d985d8344023bc632f6f
    Author: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Enable functional DSO object destruction
    
    Unfortunately, legacy .so files for ARM don't have a correct crtbegin file.
    Consequently, we have to grandfather the old __dso_handle behaviour.
    Add some ifdefs for ARM to allow it to use the old code until we can work
    out a transition.
    
    Change-Id: I6a28f368267d792c94e1d985d8344023bc632f6f
    Author: H.J. Lu <hongjiu.lu@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Revert "Update X86 Bionic CRT files for unwind/exceptions"
    
    This reverts commit dc3bc87b43d0d73d89cca59692b80de878e11a5d,
    causes netd to crash.
    Update X86 Bionic CRT files for unwind/exceptions
    
    Several updates to Bionic crt*.o files to implement Linux/x86
    stack unwind/exception handling.
    Mark __dso_handle as hidden.
    Note: Requires complete rebuild due to CRT changes. Google will
    need to regenerate and check-in all the prebuilt x86 CRT object
    files and libraries which link to them.
    
    Change-Id: I191ce1afb0dee7bbc28dcd9694e5919226dbd070
    Signed-off-by: Bruce J Beare <bruce.j.beare@intel.com>
    Signed-off-by: Mark D Horn <mark.d.horn@intel.com>
    Author: Lu, Hongjiu <hongjiu.lu@intel.com>
    Allow dlclose() to properly call static C++ destructors.
    
    With this patch _and_ an upcoming build/ patch, the destruction
    of static C++ objects contained in shared libraries will happen
    properly when dlclose() is called.
    
    Note that this change introduces crtbegin_so.S and crtend_so.S which
    are currently ignored by the build system.
    
    + move definition of __dso_handle to the right place
    (before that, all shared libraries used the __dso_handle
    global variable from the C library).
    
    Note that we keep a 'weak' __dso_handle in aeabi.c to avoid
    breaking the build until the next patch to build/core/combo/
    appears. We will be able to remove that later.
    
    + move bionic/aeabi.c to arch-arm/bionic/ (its proper location)
    
    NOTE: The NDK will need to be modified to enable this feature in
             the shared libraries that are generated through it.
    
    Change-Id: I99cd801375bbaef0581175893d1aa0943211b9bc
    Change-Id: I68cc462aeb2460345a53bdb9941ce4bfc10456fb
    bionic: fix clearenv() compiler warning and related comment typos
    Remove compiler warnings when building Bionic.
    
    Also add missing declarations to misc. functions.
    Fix clearerr() implementation (previous was broken).
    Handle feature test macros like _POSIX_C_SOURCE properly.
    
    Change-Id: Icdc973a6b9d550a166fc2545f727ea837fe800c4
    Add implementation of fdprintf, clearenv, and stubs for ttyname_r, *usershell
    
    Change-Id:      I5fe7e8b6ee5edbb49e707c3b6737a58563781fa3
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    [MIPS] Check error status from pipe system call
    
    Change-Id: Iaaea0e826c2678aa7f6fad9d46b16302a4d3b876
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Add function marks and size indications
    
    Add a macro to annotate function end and start using both ENTRY and END
    for each function. This allows valgrind (and presumably other debugging
    tools) to use the debug symbols to trace the functions.
    
    Change-Id: I5f09cef8e22fb356eb6f5cee952b031e567599b6
    Amend previous commit with needed include
    
    Change-Id: Idae8daaf095d90513820e05f423144ffed4ba913
    Use CLZ on ARMv5 and newer
    
    Change-Id: Ia5aa6974c0343ae43fbcb91304501213048e9ec0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Initial Contribution
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    FORTIFY_SOURCE: enhanced memcpy protections.
    
    Two changes:
    
    1) Detect memory read overruns.
    
    For example:
    
    int main() {
      char buf[10];
      memcpy(buf, "abcde", sizeof(buf));
      sprintf("%s\n", buf);
    }
    
    because "abcde" is only 6 bytes, copying 10 bytes from it is a bug.
    This particular bug will be detected at compile time.  Other similar
    bugs may be detected at runtime.
    
    2) Detect overlapping buffers on memcpy()
    
    It is a bug to call memcpy() on buffers which overlap. For
    example, the following code is buggy:
    
      char buf3[0x800];
      char *first_half  = &buf3[0x400];
      char *second_half = &buf3[1];
      memset(buf3, 0, sizeof(buf3));
      memcpy(first_half, second_half, 0x400);
      printf("1: %s\n", buf3);
    
    We now detect this at compile and run time.
    
    Change-Id: I092bd89f11f18e08e8a9dda0ca903aaea8e06d91
    memmove: Don't call memcpy if regions overlap
    
    memmove() unconditionally calls memcpy() if "dst" < "src". For
    example, in the code below, memmove() would end up calling memcpy(),
    even though the regions of memory overlap.
    
    int main() {
      char buf3[0x800];
      char *dst  = &buf3[1];
      char *src = &buf3[0x400];
      memset(buf3, 0, sizeof(buf3));
      memmove(dst, src, 0x400);
      printf("1: %s\n", buf3);
      return 0;
    }
    
    Calling memcpy() on overlaping regions only works if you assume
    that memcpy() copies from start to finish. On some architectures,
    it's more efficient to call memcpy() from finish to start.
    
    This is also triggering a failure in some of my code.
    
    More reading:
    * http://lwn.net/Articles/414467/
    * https://bugzilla.redhat.com/show_bug.cgi?id=638477#c31 (comment 31)
    
    Change-Id: I65a51ae3a52dd4af335fe5c278056b8c2cbd8948
    Use more optimized version of memmove
    
    On ARM there is currently no assembler optimized memmove in libc.
    There is however a more optimized bcopy which copies long instead
    of bytes where possible. This almost doubles the performance in
    best case.
    
    Change-Id: I1f1cd27529443358047c385730deaf938ce4e642
    libc: optimize memmove() with memcpy() if possible.
    
    Change-Id: I90e578fdc82e427caee8fa4157ce3f8c6c99926d
    Revert "libc: memmove(): non-overlapping block optim."
    
    This reverts commit 80fba9a2fe4eacaabee99cf0bbead872c2792231,
    which caused the system to not boot anymore, aborting with:
    "java.lang.RuntimeException: Missing static main on com.android.server.SystemServer".
    
    Change-Id: I745e0a23c728cccf5f95a3c7642d544478a4e57e
    libc: memmove(): non-overlapping block optim.
    
    Change-Id: I5652f4f97ca59d95176443fc27c737ef76258183
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    libc: remove ctors/dtors sections
    
    None of the supported ARCHs actually populate these sections,
    so there is no point in keeping them in the binaries.
    
    Change-Id: I21a364f510118ac1114e1b49c53ec8c895c6bc6b
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@gmail.com>
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libc: remove ctors/dtors sections
    
    None of the supported ARCHs actually populate these sections,
    so there is no point in keeping them in the binaries.
    
    Change-Id: I21a364f510118ac1114e1b49c53ec8c895c6bc6b
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@gmail.com>
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    compiles on mips big endian platform
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    libc: remove C++ comments from public headers.
    
    Change-Id: I4af84f912062cd2ff34711c25122fb323f20c032
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Fix the handle locking in stdio
    
    Fix the handle locking in stdio to use flockfile/funlockfile
    internally when and where required.  Macros in <stdio.h> are updated
    to automatically call the underlying functions when the process is
    threaded to obtain the necessary locking.  A private mutex is added
    to protect __sglue, the internal list of FILE handles, and another
    to protect the one-time initialization.  Some routines in libc that
    use getc() change to use getc_unlocked() as they're either protected
    by their own lock or aren't thread-safe routines anyway.
    
    Based on OpenBSD change by guenther@openbsd.org
    http://www.mail-archive.com/source-changes@cvs.openbsd.org/msg01015.html
    
    Bug: 3446659
    Change-Id: Ie82116e358c541718d6709ec45ca6796be5a007b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    MIPS support for libc.
    
    Change-Id: I2864dea04b3faf2d919165dcaa600af5b16c41c8
    Signed-off-by: Chris Dearman <chris@mips.com>
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    Add tests for Android-specific stubs
    
    Also fix problem with multi-user IDs that the home directory was
    returned as "/data" instead of "/" unlike all the other uids.
    
    Change-Id: I914d22052e5a86552989f8969b85aadbc748c65d
    Make strerror(3) and strsignal(3) thread-safe, and add psignal(3) and psiginfo(3).
    
    Change-Id: I426109db25e907980d6cb3a7a695796e45783b78
    Fix Mac build.
    
    Change-Id: Id625806fab0f2f7f90f9508c5fce649afe970414
    Added new test for dlopen which is failing for MIPS.
    
    Change-Id: I2240faefb387a11647f49b1a15699907a40f98c1
    Don't corrupt the thread list in static executables.
    
    Several previous changes conspired to make a mess of the thread list
    in static binaries. This was most obvious when trying to call
    pthread_key_delete(3) on the main thread.
    
    Bug: http://code.google.com/p/android/issues/detail?id=36893
    Change-Id: I2a2f553114d8fb40533c481252b410c10656da2e
    Add missing dependencies.
    
    Change-Id: I53c1cfb59ac7a89952a8d6b906b2b9e16a66624f
    bionic: Fix TINY_ANDROID build
    
    (cherry-pick of 545d5dbbcb0dc9e44323c4f2e687a3aace75a483.)
    
    Change-Id: Ifc91e84ffed5a3a287accabd7f08b02752688db6
    Don't over-generalize makefiles.  Host modules always build. This isn't needed on eng builds.
    
    Change-Id: I5821ced7a8a9042fd2094204e07470d8002263ca
    Enhance getcwd(3) to handle NULL like glibc.
    
    Bug: http://code.google.com/p/android/issues/detail?id=36085
    Change-Id: I960a1b585887eb66176c61d29c5c61c239a4003f
    Switch to the current NetBSD regex implementation.
    
    Change-Id: If32b28dd85d6a7ab8957ab81d19fa4c0de9499d5
    Added new test for dlopen which is failing for MIPS.
    
    Change-Id: I2240faefb387a11647f49b1a15699907a40f98c1
    Switch to the current NetBSD regex implementation.
    
    Change-Id: If32b28dd85d6a7ab8957ab81d19fa4c0de9499d5
    Revert "Revert "Switch to NetBSD's strxfrm(3).""
    
    This reverts commit 8793e7c7d21a0434d1b5e63364c88b2b125a3d29,
    and fixes the build by building upstream NetBSD source as a
    separate library that's then swallowed whole into libc_common.
    
    Change-Id: I6c9317d8c48b5ccaf85a7b185bc07fb31176ff97
    New additions/bug fixes required/found when porting perf.
    
    New functions:
            tfind
            tsearch
            tdelete
            twalk
            tdestroy (GNU extension)
    
    Bug fix: the current implementation for realpath would crash
            if the second argument (resolved_path) is NULL.
    
    New headers:
            ar.h
            search.h
    
    Change-Id: Ib6c1e42fc186a6d597a6e5a9692b16acaa155804
    Print out shared app gids correctly
    
    For applications that share resources across users such as
    forward-locked applications, print out their group name correctly.
    
    Change-Id: I06ee0b67e4325cfa415ffd7a03e301700399a66d
    Add tests for Android-specific stubs
    
    Also fix problem with multi-user IDs that the home directory was
    returned as "/data" instead of "/" unlike all the other uids.
    
    Change-Id: I914d22052e5a86552989f8969b85aadbc748c65d
    Make strerror(3) and strsignal(3) thread-safe, and add psignal(3) and psiginfo(3).
    
    Change-Id: I426109db25e907980d6cb3a7a695796e45783b78
    Add more pthreads tests.
    
    Someone reported a bug if pthread_detach is called while a pthread_join is
    already in progress, but I'm unable to reproduce it. Keep the tests I wrote,
    though.
    
    Change-Id: I3d71450bbbb5345f2cb213dc56310ec020d528cc
    Don't corrupt the thread list in static executables.
    
    Several previous changes conspired to make a mess of the thread list
    in static binaries. This was most obvious when trying to call
    pthread_key_delete(3) on the main thread.
    
    Bug: http://code.google.com/p/android/issues/detail?id=36893
    Change-Id: I2a2f553114d8fb40533c481252b410c10656da2e
    Fix nice...
    
    ...by switching to the NetBSD implementation.
    
    Change-Id: I562b27b237a24ded95804035cc322c7bff12ff59
    Revert "Revert "Switch to NetBSD's strxfrm(3).""
    
    This reverts commit 8793e7c7d21a0434d1b5e63364c88b2b125a3d29,
    and fixes the build by building upstream NetBSD source as a
    separate library that's then swallowed whole into libc_common.
    
    Change-Id: I6c9317d8c48b5ccaf85a7b185bc07fb31176ff97
    New additions/bug fixes required/found when porting perf.
    
    New functions:
            tfind
            tsearch
            tdelete
            twalk
            tdestroy (GNU extension)
    
    Bug fix: the current implementation for realpath would crash
            if the second argument (resolved_path) is NULL.
    
    New headers:
            ar.h
            search.h
    
    Change-Id: Ib6c1e42fc186a6d597a6e5a9692b16acaa155804
    Enhance getcwd(3) to handle NULL like glibc.
    
    Bug: http://code.google.com/p/android/issues/detail?id=36085
    Change-Id: I960a1b585887eb66176c61d29c5c61c239a4003f
    Switch to the current NetBSD regex implementation.
    
    Change-Id: If32b28dd85d6a7ab8957ab81d19fa4c0de9499d5
    Revert "Revert "Switch to NetBSD's strxfrm(3).""
    
    This reverts commit 8793e7c7d21a0434d1b5e63364c88b2b125a3d29,
    and fixes the build by building upstream NetBSD source as a
    separate library that's then swallowed whole into libc_common.
    
    Change-Id: I6c9317d8c48b5ccaf85a7b185bc07fb31176ff97
    New additions/bug fixes required/found when porting perf.
    
    New functions:
            tfind
            tsearch
            tdelete
            twalk
            tdestroy (GNU extension)
    
    Bug fix: the current implementation for realpath would crash
            if the second argument (resolved_path) is NULL.
    
    New headers:
            ar.h
            search.h
    
    Change-Id: Ib6c1e42fc186a6d597a6e5a9692b16acaa155804
    Add dependencies on all the makefiles.
    
    This should help prevent broken builds next time I'm messing with
    assembler/compiler/linker flags...
    
    Change-Id: I30f15a3ce3c3f3c60cad7bc59aaba9f42d792224
    Report errors to the log, not just stderr.
    
    In particular this affects assert(3) and __cxa_pure_virtual, both of
    which have managed to confuse people this week by apparently aborting
    without reason. (Because stderr goes nowhere, normally.)
    
    Bug: 6852995
    Bug: 6840813
    Change-Id: I7f5d17d5ddda439e217b7932096702dc013b9142
    Add missing SMP barriers to libstdc++
    
    Change-Id: I20a8dcd2e3316ac60237e800c682cacc8e59e187
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Regenerate all NOTICE files with the latest version of the script.
    
    This sorts every entry, so we should have more stability and fewer
    merge conflicts in future.
    
    Change-Id: Ifc5347dc53352da22c82d41ca59b483966fcfc6b
    Auto-generate a complete NOTICE file.
    
    Remove the hand-collated ones, and switch to a script that pulls the
    copyright headers out of every file and collects the unique ones.
    
    Change-Id: Ied3b98b3f56241df97166c410ff81de4e0157c9d
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    compiles on mips big endian platform
    Auto-generate a complete NOTICE file.
    
    Remove the hand-collated ones, and switch to a script that pulls the
    copyright headers out of every file and collects the unique ones.
    
    Change-Id: Ied3b98b3f56241df97166c410ff81de4e0157c9d
    Report errors to the log, not just stderr.
    
    In particular this affects assert(3) and __cxa_pure_virtual, both of
    which have managed to confuse people this week by apparently aborting
    without reason. (Because stderr goes nowhere, normally.)
    
    Bug: 6852995
    Bug: 6840813
    Change-Id: I7f5d17d5ddda439e217b7932096702dc013b9142
    libstdc++: Fix x86 thread-safe one-time-construction implementation.
    
    The root of the problem is that the existing implementation is based on the
    ARM C++ ABI, which mandates a different guard variable layout than the
    Itanium/x86 C++ one.
    
    This patch modifies the implementation in a way that satisfies both ABIs (and
    doesn't require changing the toolchains).
    
    Change-Id: I885e9adc7f088b9c0a78355bd752f1e6aeec9f07
    Signed-off-by: Fengwei Yin <fengwei.yin@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    bionic: Do not use <sys/atomics.h> for platform code.
    
    We're going to modify the __atomic_xxx implementation to provide
    full memory barriers, to avoid problems for NDK machine code that
    link to these functions.
    
    First step is to remove their usage from our platform code.
    We now use inlined versions of the same functions for a slight
    performance boost.
    
    + remove obsolete atomics_x86.c (was never compiled)
    
    NOTE: This improvement was benchmarked on various devices.
          Comparing a pthread mutex lock + atomic increment + unlock
          we get:
    
      - ARMv7 emulator, running on a 2.4 GHz Xeon:
           before: 396 ns    after: 288 ns
    
      - x86 emulator in KVM mode on same machine:
           before: 27 ns     after: 27 ns
    
      - Google Nexus S, in ARMv7 mode (single-core):
           before: 82 ns     after: 76 ns
    
      - Motorola Xoom, in ARMv7 mode (multi-core):
           before: 121 ns    after: 120 ns
    
    The code has also been rebuilt in ARMv5TE mode for correctness.
    
    Change-Id: Ic1dc72b173d59b2e7af901dd70d6a72fb2f64b17
    Add missing SMP barriers to libstdc++
    
    Change-Id: I20a8dcd2e3316ac60237e800c682cacc8e59e187
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libstdc++: make operator new call abort on failure.
    
    This change ensures that operator new will call abort() in case
    of memory allocation failure. Note that due to our usage of memory
    overcommit, this can only happen under very rare circumstances
    (i.e. trying to allocate memory larger than the larger free range
    of virtual address space, or when memory is corrutped in various
    ways).
    
    Change-Id: I128b8bf626216e899c22a00f24492cd148a1fc94
    optimize delete/delete[] operators by removing unneeded branch
    
    Remove redundant not NULL check already done in free().
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Report errors to the log, not just stderr.
    
    In particular this affects assert(3) and __cxa_pure_virtual, both of
    which have managed to confuse people this week by apparently aborting
    without reason. (Because stderr goes nowhere, normally.)
    
    Bug: 6852995
    Bug: 6840813
    Change-Id: I7f5d17d5ddda439e217b7932096702dc013b9142
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    AI 144391: am: CL 144236 Added new C to stdc++ header files: cassert, cctype, climits, ctime.
      QA Impact:None
      Original author: niko
    
    Automated import of CL 144391
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    AI 145159: am: CL 145059 (Almost) final set of wrapper around the C headers for stdc++ and their tests.
      The only one left is cstring.
      * bionic/libstdc++/include/cstdlib:
      * bionic/libstdc++/include/cstdio:
      * bionic/libstdc++/include/cstdint:
      * bionic/libstdc++/include/csignal:
      * bionic/libstdc++/include/csetjmp:
      Added header file.
      Checks the bionic headers file were picked up instead of the host ones.
      Added test for new header files
      * system/extras/tests/bionic/libstdc++/Android.mk:
      Added tests for the new header files.
      EXTRA_CFLAGS: include the bionic header files.
      Original author: niko
    
    Automated import of CL 145159
    AI 144391: am: CL 144236 Added new C to stdc++ header files: cassert, cctype, climits, ctime.
      QA Impact:None
      Original author: niko
    
    Automated import of CL 144391
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libstdc++: use extern "C++" in all our C++ system headers.
    
    This is needed to build an independent toolchain with g++ that doesn't think
    that all these headers are in C.
    
    Change-Id: Ie9a8ccfcab7780d6a4e5722777d61c2b1b312001
    AI 145159: am: CL 145059 (Almost) final set of wrapper around the C headers for stdc++ and their tests.
      The only one left is cstring.
      * bionic/libstdc++/include/cstdlib:
      * bionic/libstdc++/include/cstdio:
      * bionic/libstdc++/include/cstdint:
      * bionic/libstdc++/include/csignal:
      * bionic/libstdc++/include/csetjmp:
      Added header file.
      Checks the bionic headers file were picked up instead of the host ones.
      Added test for new header files
      * system/extras/tests/bionic/libstdc++/Android.mk:
      Added tests for the new header files.
      EXTRA_CFLAGS: include the bionic header files.
      Original author: niko
    
    Automated import of CL 145159
    AI 144391: am: CL 144236 Added new C to stdc++ header files: cassert, cctype, climits, ctime.
      QA Impact:None
      Original author: niko
    
    Automated import of CL 144391
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libstdc++: use extern "C++" in all our C++ system headers.
    
    This is needed to build an independent toolchain with g++ that doesn't think
    that all these headers are in C.
    
    Change-Id: Ie9a8ccfcab7780d6a4e5722777d61c2b1b312001
    Add <cmath> standard C++ header.
    This is needed for upcoming STLport experimentation.
    AI 144391: am: CL 144236 Added new C to stdc++ header files: cassert, cctype, climits, ctime.
      QA Impact:None
      Original author: niko
    
    Automated import of CL 144391
    AI 143632: am: CL 143504 Completed cstddef to be non empty and similar to the gnu stl implementation.
      Even if we don't want to have a bloated stl implementation, having empty
      files around is probably not very good either.
      Added a test to make sure the header file compiles on host and kila-eng.
      QA Impact: In system/extras/test/bionic/libstdc++ build the tests using:
      mm BIONIC_TESTS=1
      to build the host and target tests.
      Original author: niko
      Merged from: //branches/donutburger/...
    
    Automated import of CL 143632
    AI 143504: Completed cstddef to be non empty and similar to the gnu stl implementation.
      Even if we don't want to have a bloated stl implementation, having empty
      files around is probably not very good either.
      Added a test to make sure the header file compiles on host and kila-eng.
      QA Impact: In system/extras/test/bionic/libstdc++ build the tests using:
      mm BIONIC_TESTS=1
      to build the host and target tests.
      BUG=1601432
    
    Automated import of CL 143504
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    AI 145159: am: CL 145059 (Almost) final set of wrapper around the C headers for stdc++ and their tests.
      The only one left is cstring.
      * bionic/libstdc++/include/cstdlib:
      * bionic/libstdc++/include/cstdio:
      * bionic/libstdc++/include/cstdint:
      * bionic/libstdc++/include/csignal:
      * bionic/libstdc++/include/csetjmp:
      Added header file.
      Checks the bionic headers file were picked up instead of the host ones.
      Added test for new header files
      * system/extras/tests/bionic/libstdc++/Android.mk:
      Added tests for the new header files.
      EXTRA_CFLAGS: include the bionic header files.
      Original author: niko
    
    Automated import of CL 145159
    AI 145059: (Almost) final set of wrapper around the C headers for stdc++ and their tests.
      The only one left is cstring.
      * bionic/libstdc++/include/cstdlib:
      * bionic/libstdc++/include/cstdio:
      * bionic/libstdc++/include/cstdint:
      * bionic/libstdc++/include/csignal:
      * bionic/libstdc++/include/csetjmp:
      Added header file.
      Checks the bionic headers file were picked up instead of the host ones.
      Added test for new header files
      * system/extras/tests/bionic/libstdc++/Android.mk:
      Added tests for the new header files.
      EXTRA_CFLAGS: include the bionic header files.
      BUG=1601432
    
    Automated import of CL 145059
    AI 144391: am: CL 144236 Added new C to stdc++ header files: cassert, cctype, climits, ctime.
      QA Impact:None
      Original author: niko
    
    Automated import of CL 144391
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Initial Contribution
    libstdc++: use extern "C++" in all our C++ system headers.
    
    This is needed to build an independent toolchain with g++ that doesn't think
    that all these headers are in C.
    
    Change-Id: Ie9a8ccfcab7780d6a4e5722777d61c2b1b312001
    AI 144391: am: CL 144236 Added new C to stdc++ header files: cassert, cctype, climits, ctime.
      QA Impact:None
      Original author: niko
    
    Automated import of CL 144391
    AI 143632: am: CL 143504 Completed cstddef to be non empty and similar to the gnu stl implementation.
      Even if we don't want to have a bloated stl implementation, having empty
      files around is probably not very good either.
      Added a test to make sure the header file compiles on host and kila-eng.
      QA Impact: In system/extras/test/bionic/libstdc++ build the tests using:
      mm BIONIC_TESTS=1
      to build the host and target tests.
      Original author: niko
      Merged from: //branches/donutburger/...
    
    Automated import of CL 143632
    AI 143504: Completed cstddef to be non empty and similar to the gnu stl implementation.
      Even if we don't want to have a bloated stl implementation, having empty
      files around is probably not very good either.
      Added a test to make sure the header file compiles on host and kila-eng.
      QA Impact: In system/extras/test/bionic/libstdc++ build the tests using:
      mm BIONIC_TESTS=1
      to build the host and target tests.
      BUG=1601432
    
    Automated import of CL 143504
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libstdc++: use extern "C++" in all our C++ system headers.
    
    This is needed to build an independent toolchain with g++ that doesn't think
    that all these headers are in C.
    
    Change-Id: Ie9a8ccfcab7780d6a4e5722777d61c2b1b312001
    AI 145159: am: CL 145059 (Almost) final set of wrapper around the C headers for stdc++ and their tests.
      The only one left is cstring.
      * bionic/libstdc++/include/cstdlib:
      * bionic/libstdc++/include/cstdio:
      * bionic/libstdc++/include/cstdint:
      * bionic/libstdc++/include/csignal:
      * bionic/libstdc++/include/csetjmp:
      Added header file.
      Checks the bionic headers file were picked up instead of the host ones.
      Added test for new header files
      * system/extras/tests/bionic/libstdc++/Android.mk:
      Added tests for the new header files.
      EXTRA_CFLAGS: include the bionic header files.
      Original author: niko
    
    Automated import of CL 145159
    AI 144391: am: CL 144236 Added new C to stdc++ header files: cassert, cctype, climits, ctime.
      QA Impact:None
      Original author: niko
    
    Automated import of CL 144391
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libstdc++: use extern "C++" in all our C++ system headers.
    
    This is needed to build an independent toolchain with g++ that doesn't think
    that all these headers are in C.
    
    Change-Id: Ie9a8ccfcab7780d6a4e5722777d61c2b1b312001
    AI 145159: am: CL 145059 (Almost) final set of wrapper around the C headers for stdc++ and their tests.
      The only one left is cstring.
      * bionic/libstdc++/include/cstdlib:
      * bionic/libstdc++/include/cstdio:
      * bionic/libstdc++/include/cstdint:
      * bionic/libstdc++/include/csignal:
      * bionic/libstdc++/include/csetjmp:
      Added header file.
      Checks the bionic headers file were picked up instead of the host ones.
      Added test for new header files
      * system/extras/tests/bionic/libstdc++/Android.mk:
      Added tests for the new header files.
      EXTRA_CFLAGS: include the bionic header files.
      Original author: niko
    
    Automated import of CL 145159
    AI 144391: am: CL 144236 Added new C to stdc++ header files: cassert, cctype, climits, ctime.
      QA Impact:None
      Original author: niko
    
    Automated import of CL 144391
    AI 143632: am: CL 143504 Completed cstddef to be non empty and similar to the gnu stl implementation.
      Even if we don't want to have a bloated stl implementation, having empty
      files around is probably not very good either.
      Added a test to make sure the header file compiles on host and kila-eng.
      QA Impact: In system/extras/test/bionic/libstdc++ build the tests using:
      mm BIONIC_TESTS=1
      to build the host and target tests.
      Original author: niko
      Merged from: //branches/donutburger/...
    
    Automated import of CL 143632
    AI 143504: Completed cstddef to be non empty and similar to the gnu stl implementation.
      Even if we don't want to have a bloated stl implementation, having empty
      files around is probably not very good either.
      Added a test to make sure the header file compiles on host and kila-eng.
      QA Impact: In system/extras/test/bionic/libstdc++ build the tests using:
      mm BIONIC_TESTS=1
      to build the host and target tests.
      BUG=1601432
    
    Automated import of CL 143504
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    AI 145716: am: CL 145714 Added cstring wrapper around string.h.
      In new, include cstddef which declares std::size_t.
      Original author: niko
    
    Automated import of CL 145716
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix the build. Oops.
    
    (We remove the declaration for on_exit() from the C library headers,
    so do the same for the C++ <cstdlib>)
    
    Change-Id: I31a21d5643068cd160724908dd8156863a44d95a
    libstdc++: use extern "C++" in all our C++ system headers.
    
    This is needed to build an independent toolchain with g++ that doesn't think
    that all these headers are in C.
    
    Change-Id: Ie9a8ccfcab7780d6a4e5722777d61c2b1b312001
    Add new C++ headers <cerrno> and <cfloat>
    
    Also add std::malloc/realloc/calloc/free to <cstdlib>
    Rename <cwchar_is_not_supported> to <cwchar>
    AI 145159: am: CL 145059 (Almost) final set of wrapper around the C headers for stdc++ and their tests.
      The only one left is cstring.
      * bionic/libstdc++/include/cstdlib:
      * bionic/libstdc++/include/cstdio:
      * bionic/libstdc++/include/cstdint:
      * bionic/libstdc++/include/csignal:
      * bionic/libstdc++/include/csetjmp:
      Added header file.
      Checks the bionic headers file were picked up instead of the host ones.
      Added test for new header files
      * system/extras/tests/bionic/libstdc++/Android.mk:
      Added tests for the new header files.
      EXTRA_CFLAGS: include the bionic header files.
      Original author: niko
    
    Automated import of CL 145159
    AI 145059: (Almost) final set of wrapper around the C headers for stdc++ and their tests.
      The only one left is cstring.
      * bionic/libstdc++/include/cstdlib:
      * bionic/libstdc++/include/cstdio:
      * bionic/libstdc++/include/cstdint:
      * bionic/libstdc++/include/csignal:
      * bionic/libstdc++/include/csetjmp:
      Added header file.
      Checks the bionic headers file were picked up instead of the host ones.
      Added test for new header files
      * system/extras/tests/bionic/libstdc++/Android.mk:
      Added tests for the new header files.
      EXTRA_CFLAGS: include the bionic header files.
      BUG=1601432
    
    Automated import of CL 145059
    AI 143632: am: CL 143504 Completed cstddef to be non empty and similar to the gnu stl implementation.
      Even if we don't want to have a bloated stl implementation, having empty
      files around is probably not very good either.
      Added a test to make sure the header file compiles on host and kila-eng.
      QA Impact: In system/extras/test/bionic/libstdc++ build the tests using:
      mm BIONIC_TESTS=1
      to build the host and target tests.
      Original author: niko
      Merged from: //branches/donutburger/...
    
    Automated import of CL 143632
    AI 143504: Completed cstddef to be non empty and similar to the gnu stl implementation.
      Even if we don't want to have a bloated stl implementation, having empty
      files around is probably not very good either.
      Added a test to make sure the header file compiles on host and kila-eng.
      QA Impact: In system/extras/test/bionic/libstdc++ build the tests using:
      mm BIONIC_TESTS=1
      to build the host and target tests.
      BUG=1601432
    
    Automated import of CL 143504
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libstdc++: use extern "C++" in all our C++ system headers.
    
    This is needed to build an independent toolchain with g++ that doesn't think
    that all these headers are in C.
    
    Change-Id: Ie9a8ccfcab7780d6a4e5722777d61c2b1b312001
    eclair snapshot
    Removed non-standard declaration in cstring.
    
    Aligned the list of the function declared in std:: to
    match gcc.
    In the first cut, too many functions were included.
    The test under system/extras/tests/bionic/libstdc++ already
    has the correct (shorter) list.
    AI 145716: am: CL 145714 Added cstring wrapper around string.h.
      In new, include cstddef which declares std::size_t.
      Original author: niko
    
    Automated import of CL 145716
    AI 144391: am: CL 144236 Added new C to stdc++ header files: cassert, cctype, climits, ctime.
      QA Impact:None
      Original author: niko
    
    Automated import of CL 144391
    AI 143632: am: CL 143504 Completed cstddef to be non empty and similar to the gnu stl implementation.
      Even if we don't want to have a bloated stl implementation, having empty
      files around is probably not very good either.
      Added a test to make sure the header file compiles on host and kila-eng.
      QA Impact: In system/extras/test/bionic/libstdc++ build the tests using:
      mm BIONIC_TESTS=1
      to build the host and target tests.
      Original author: niko
      Merged from: //branches/donutburger/...
    
    Automated import of CL 143632
    AI 143504: Completed cstddef to be non empty and similar to the gnu stl implementation.
      Even if we don't want to have a bloated stl implementation, having empty
      files around is probably not very good either.
      Added a test to make sure the header file compiles on host and kila-eng.
      QA Impact: In system/extras/test/bionic/libstdc++ build the tests using:
      mm BIONIC_TESTS=1
      to build the host and target tests.
      BUG=1601432
    
    Automated import of CL 143504
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libstdc++: use extern "C++" in all our C++ system headers.
    
    This is needed to build an independent toolchain with g++ that doesn't think
    that all these headers are in C.
    
    Change-Id: Ie9a8ccfcab7780d6a4e5722777d61c2b1b312001
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add new C++ headers <cerrno> and <cfloat>
    
    Also add std::malloc/realloc/calloc/free to <cstdlib>
    Rename <cwchar_is_not_supported> to <cwchar>
    AI 145716: am: CL 145714 Added cstring wrapper around string.h.
      In new, include cstddef which declares std::size_t.
      Original author: niko
    
    Automated import of CL 145716
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libstdc++: use extern "C++" in all our C++ system headers.
    
    This is needed to build an independent toolchain with g++ that doesn't think
    that all these headers are in C.
    
    Change-Id: Ie9a8ccfcab7780d6a4e5722777d61c2b1b312001
    AI 145159: am: CL 145059 (Almost) final set of wrapper around the C headers for stdc++ and their tests.
      The only one left is cstring.
      * bionic/libstdc++/include/cstdlib:
      * bionic/libstdc++/include/cstdio:
      * bionic/libstdc++/include/cstdint:
      * bionic/libstdc++/include/csignal:
      * bionic/libstdc++/include/csetjmp:
      Added header file.
      Checks the bionic headers file were picked up instead of the host ones.
      Added test for new header files
      * system/extras/tests/bionic/libstdc++/Android.mk:
      Added tests for the new header files.
      EXTRA_CFLAGS: include the bionic header files.
      Original author: niko
    
    Automated import of CL 145159
    AI 145059: (Almost) final set of wrapper around the C headers for stdc++ and their tests.
      The only one left is cstring.
      * bionic/libstdc++/include/cstdlib:
      * bionic/libstdc++/include/cstdio:
      * bionic/libstdc++/include/cstdint:
      * bionic/libstdc++/include/csignal:
      * bionic/libstdc++/include/csetjmp:
      Added header file.
      Checks the bionic headers file were picked up instead of the host ones.
      Added test for new header files
      * system/extras/tests/bionic/libstdc++/Android.mk:
      Added tests for the new header files.
      EXTRA_CFLAGS: include the bionic header files.
      BUG=1601432
    
    Automated import of CL 145059
    AI 143632: am: CL 143504 Completed cstddef to be non empty and similar to the gnu stl implementation.
      Even if we don't want to have a bloated stl implementation, having empty
      files around is probably not very good either.
      Added a test to make sure the header file compiles on host and kila-eng.
      QA Impact: In system/extras/test/bionic/libstdc++ build the tests using:
      mm BIONIC_TESTS=1
      to build the host and target tests.
      Original author: niko
      Merged from: //branches/donutburger/...
    
    Automated import of CL 143632
    AI 143504: Completed cstddef to be non empty and similar to the gnu stl implementation.
      Even if we don't want to have a bloated stl implementation, having empty
      files around is probably not very good either.
      Added a test to make sure the header file compiles on host and kila-eng.
      QA Impact: In system/extras/test/bionic/libstdc++ build the tests using:
      mm BIONIC_TESTS=1
      to build the host and target tests.
      BUG=1601432
    
    Automated import of CL 143504
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add new C++ headers <cerrno> and <cfloat>
    
    Also add std::malloc/realloc/calloc/free to <cstdlib>
    Rename <cwchar_is_not_supported> to <cwchar>
    AI 145716: am: CL 145714 Added cstring wrapper around string.h.
      In new, include cstddef which declares std::size_t.
      Original author: niko
    
    Automated import of CL 145716
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libstdc++: use extern "C++" in all our C++ system headers.
    
    This is needed to build an independent toolchain with g++ that doesn't think
    that all these headers are in C.
    
    Change-Id: Ie9a8ccfcab7780d6a4e5722777d61c2b1b312001
    AI 144391: am: CL 144236 Added new C to stdc++ header files: cassert, cctype, climits, ctime.
      QA Impact:None
      Original author: niko
    
    Automated import of CL 144391
    AI 143632: am: CL 143504 Completed cstddef to be non empty and similar to the gnu stl implementation.
      Even if we don't want to have a bloated stl implementation, having empty
      files around is probably not very good either.
      Added a test to make sure the header file compiles on host and kila-eng.
      QA Impact: In system/extras/test/bionic/libstdc++ build the tests using:
      mm BIONIC_TESTS=1
      to build the host and target tests.
      Original author: niko
      Merged from: //branches/donutburger/...
    
    Automated import of CL 143632
    AI 143504: Completed cstddef to be non empty and similar to the gnu stl implementation.
      Even if we don't want to have a bloated stl implementation, having empty
      files around is probably not very good either.
      Added a test to make sure the header file compiles on host and kila-eng.
      QA Impact: In system/extras/test/bionic/libstdc++ build the tests using:
      mm BIONIC_TESTS=1
      to build the host and target tests.
      BUG=1601432
    
    Automated import of CL 143504
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    libstdc++: use extern "C++" in all our C++ system headers.
    
    This is needed to build an independent toolchain with g++ that doesn't think
    that all these headers are in C.
    
    Change-Id: Ie9a8ccfcab7780d6a4e5722777d61c2b1b312001
    AI 145716: am: CL 145714 Added cstring wrapper around string.h.
      In new, include cstddef which declares std::size_t.
      Original author: niko
    
    Automated import of CL 145716
    AI 145714: Added cstring wrapper around string.h.
      In new, include cstddef which declares std::size_t.
      BUG=1601432
    
    Automated import of CL 145714
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add new C++ headers <cerrno> and <cfloat>
    
    Also add std::malloc/realloc/calloc/free to <cstdlib>
    Rename <cwchar_is_not_supported> to <cwchar>
    AI 145716: am: CL 145714 Added cstring wrapper around string.h.
      In new, include cstddef which declares std::size_t.
      Original author: niko
    
    Automated import of CL 145716
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add dependencies on all the makefiles.
    
    This should help prevent broken builds next time I'm messing with
    assembler/compiler/linker flags...
    
    Change-Id: I30f15a3ce3c3f3c60cad7bc59aaba9f42d792224
    Remove the last references to SuperH.
    
    Change-Id: Icb44c1f94cb178d90b4c2b1e8f6d175586aec4e1
    Rename the misleading var name TARGET_OUT_STATIC_LIBRARIES
    
    TARGET_OUT_STATIC_LIBRARIES is actually the same as
    TARGET_OUT_INTERMEDIATE_LIBRARIES.
    
    Change-Id: I11ac35256031d461d20156cd4c19ed7eae781d22
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I9064e3221582fcf3d4210d67f1cf0a96e7e3aa86
    added and modified libdl to support SuperH architecture
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Initial Contribution
    MIPS support to libm, libdl and libthread_db
    
    Change-Id: I9106721af7fe0cd45df82976250db0d300a20117
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    fix prototype of dladdr
    
    this breaks C++ source code in particular.
    
    Change-Id: Ie06b5d31d23b5455e6950c470adc64dd5e7784df
    Added support for dladdr()
    
    dladdr() is a GNU extension function, which allows the caller to retrieve
    symbol information for a specified memory address.  It is useful for things
    like generating backtrace information at runtime.
    
    Change-Id: I3a1def1a6c9c666d93e1e97b7d260dfa5b9b79a9
    added and modified libdl to support SuperH architecture
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Regenerate all NOTICE files with the latest version of the script.
    
    This sorts every entry, so we should have more stability and fewer
    merge conflicts in future.
    
    Change-Id: Ifc5347dc53352da22c82d41ca59b483966fcfc6b
    Auto-generate a complete NOTICE file.
    
    Remove the hand-collated ones, and switch to a script that pulls the
    copyright headers out of every file and collects the unique ones.
    
    Change-Id: Ied3b98b3f56241df97166c410ff81de4e0157c9d
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add dependencies on all the makefiles.
    
    This should help prevent broken builds next time I'm messing with
    assembler/compiler/linker flags...
    
    Change-Id: I30f15a3ce3c3f3c60cad7bc59aaba9f42d792224
    bionic, libthread_db x86 fixes
    
    Orig-Change-Id: I3be997f5f1f6a894a3c200d4f325cf3bfd428c66
    Author: James Rose <james.rose@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    bionic, libthread_db x86 fixes
    
    Change-Id: I3be997f5f1f6a894a3c200d4f325cf3bfd428c66
    Author: James Rose <james.rose@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Fix libthread_db linkage
    
    libthread_db depends on libc but since unresolved symbols were allowed
    in the makefile this problem was never realized until gdbserver tried
    to link with it, failing in the runtime.
    
    Change-Id: If2ee319a2503c81abf3010829444f920c7c0c227
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support to libm, libdl and libthread_db
    
    Change-Id: I9106721af7fe0cd45df82976250db0d300a20117
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    bionic, libthread_db x86 fixes
    
    Orig-Change-Id: I3be997f5f1f6a894a3c200d4f325cf3bfd428c66
    Author: James Rose <james.rose@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    bionic, libthread_db x86 fixes
    
    Change-Id: I3be997f5f1f6a894a3c200d4f325cf3bfd428c66
    Author: James Rose <james.rose@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Update libthread_db for gdb-7.0 - DO NOT MERGE
    
    Change-Id: Id02b29314109ad1bf6de3388f856af6da3f90d33
    Update libthread_db for gdb-7.0
    
    Change-Id: If8fbcea1cf6d06fc465a22d73671e6ff6aa1f312
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Auto-generate a complete NOTICE file.
    
    Remove the hand-collated ones, and switch to a script that pulls the
    copyright headers out of every file and collects the unique ones.
    
    Change-Id: Ied3b98b3f56241df97166c410ff81de4e0157c9d
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    bionic, libthread_db x86 fixes
    
    Orig-Change-Id: I3be997f5f1f6a894a3c200d4f325cf3bfd428c66
    Author: James Rose <james.rose@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    move some typedefs to procfs.h required by gdbserver build
    
    Orig-Change-Id: I51fba4ceb80b63e583f462a2a00f3f658c7cdd36
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    bionic, libthread_db x86 fixes
    
    Change-Id: I3be997f5f1f6a894a3c200d4f325cf3bfd428c66
    Author: James Rose <james.rose@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    move some typedefs to procfs.h required by gdbserver build
    
    Change-Id: I51fba4ceb80b63e583f462a2a00f3f658c7cdd36
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Update libthread_db for gdb-7.0 - DO NOT MERGE
    
    Change-Id: Id02b29314109ad1bf6de3388f856af6da3f90d33
    Update libthread_db for gdb-7.0
    
    Change-Id: If8fbcea1cf6d06fc465a22d73671e6ff6aa1f312
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    move some typedefs to procfs.h required by gdbserver build
    
    Orig-Change-Id: I51fba4ceb80b63e583f462a2a00f3f658c7cdd36
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    move some typedefs to procfs.h required by gdbserver build
    
    Change-Id: I51fba4ceb80b63e583f462a2a00f3f658c7cdd36
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Add dependencies on all the makefiles.
    
    This should help prevent broken builds next time I'm messing with
    assembler/compiler/linker flags...
    
    Change-Id: I30f15a3ce3c3f3c60cad7bc59aaba9f42d792224
    Enable sqrtf() x86 assembly code
    
    This patch can improve the sqrtf() performance.
    
    Change-Id: Ic9d11d6a9ecd9b263f54d4878e13595e136b95ce
    MIPS support to libm, libdl and libthread_db
    
    Change-Id: I9106721af7fe0cd45df82976250db0d300a20117
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    remove obsolete SuperH support
    
    We don't have a toolchain anymore, we don't have working original
    kernel headers, and nobody is maintaining this so there is really
    no point in keeping this here. Details of the patch:
    
    - removed code paths from Android.mk files related to the SuperH
      architecture ("sh")
    
    - removed libc/arch-sh, linker/arch-sh, libc/kernel/arch-sh
    
    - simplified libc/SYSCALLS.TXT
    
    - simplified the scripts in libc/tools/ and libc/kernel/tools
    
    Change-Id: I26b0e1422bdc347489e4573e2fbec0e402f75560
    
    Signed-off-by: David 'Digit' Turner <digit@android.com>
    libm: Add nanf() and tgammaf() implementations.
    
    Requested by b/3370708 to export these through RenderScript.
    
    Change-Id: I1ae69f87a1ad4765b2dee8e4a6f2f3a6eb7c5ad4
    DO NOT MERGE - add sincos.c to libm compilation
    
    For some reason, a previous backport from master didn't get this.
    
    Change-Id: I59eb96ad9de495a659808fdfb557033476c3d123
    Add sincos() and sincosf() implementation.
    
    This is a GLibc-compatibility patch required to simplify our
    upcoming toolchain work/porting.
    
    Change-Id: I615a20a449763f86b6e2b0e4f5ab43fb029ceb6d
    added and modified libm to support SuperH architecture
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Disable sincos optimization for sincos calls.
    
    sincos() functions would be turned into infinite calls to
    itself if sincos optimization is applied to itself. See
    gcc bugzilla http://gcc.gnu.org/bugzilla/show_bug.cgi?id=46926
    
    arm-linux-androideabi-4.4.3 toolchain does not have this problem
    because sincos optimization is entirely disabled. Starting
    from arm-linux-androideabi-4.6 toolchain, we enable sincos optimization
    in gcc.
    
    This patch simply enforce -O0 on this function to minimize the
    change.
    
    Change-Id: I0fc00b5f1dd71c0a024943bdedfed29b0d195e82
    Add sincosl() function to bionic. So that sincos optimization can - DO NOT MERGE
    be enabled.
    
    Change-Id: I672cb319689aa4fb3f1f7cd868dda76842bebae9
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Regenerate all NOTICE files with the latest version of the script.
    
    This sorts every entry, so we should have more stability and fewer
    merge conflicts in future.
    
    Change-Id: Ifc5347dc53352da22c82d41ca59b483966fcfc6b
    Auto-generate a complete NOTICE file.
    
    Remove the hand-collated ones, and switch to a script that pulls the
    copyright headers out of every file and collects the unique ones.
    
    Change-Id: Ied3b98b3f56241df97166c410ff81de4e0157c9d
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Enclosed functions in fenv.h with __BEGIN_DECLS/__END_DECLS
    
    Those are C funcitons
    
    Related CL: https://android-review.googlesource.com/#/c/41833/
    
    Change-Id: I4386bcf948ad31c3690c9b7a145103088133d041
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Bionic: x86: Fix libm macro definitions
    
    http://code.google.com/p/android/issues/detail?id=19276
    
    GCC would remove inline asm due to lack of knowledge
    of FPU register changes.
    
    Change-Id: I9f9e8623fa6580843b7cd8178439ace8c2db2d51
    Signed-off-by: Mark D Horn <mark.d.horn@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Author: Jingwei Zhang <jingwei.zhang@intel.com>
    Use proper variable typing
    
    Orig-Change-Id: If5c33d90b33f538448ac12e7bee94b4b9173d39c
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Use proper variable typing
    
    Change-Id: If5c33d90b33f538448ac12e7bee94b4b9173d39c
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Sometimes the compiler is very right! Found bug in bessel routines for float.
    
    Original compiler error:
    
    target arm C: libm <= bionic/libm/src/e_j0f.c
    bionic/libm/src/e_j0f.c: In function 'j0f':
    bionic/libm/src/e_j0f.c:66: warning: comparison between signed and unsigned integer expressions
    bionic/libm/src/e_j0f.c: In function 'y0f':
    bionic/libm/src/e_j0f.c:140: warning: comparison between signed and unsigned integer expressions
    target arm C: libm <= bionic/libm/src/e_j1.c
    
    It's subtle but ix is masked with 0x7f000000 so it can never ever have a value
    greater than 0x80000000. So I switched to using the unmasked hx and added a
    cast as a reward to the compiler for being right.
    
    I checked the original routines that e_j0f.c was ported from (in e_j0.c) and
    the double's don't use 0x80000000 so this issue didn't exist there.
    
    Let that be a warning to those that just slap on casts to shut up the compiler,
    sometimes it's sniffed out a bug for you. :-)
    
    Similar fixes in the other functions.
    
    Change-Id: I7a776e5d4721fc3a9e3bd89179b67e9af3a2ebfa
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libm: Add nanf() and tgammaf() implementations.
    
    Requested by b/3370708 to export these through RenderScript.
    
    Change-Id: I1ae69f87a1ad4765b2dee8e4a6f2f3a6eb7c5ad4
    wchar.h: improve wchar_t support in Bionic
    
    Change-Id: Iffd41046fd0933c66542abf7627a1569522dfcb2
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libm: cherry-pick one patch from freebsd to fix logb() denormals issue
    
    from http://svnweb.freebsd.org/base?view=revision&revision=176101
    "
    Oops, fix the fix in rev.1.10.  logb() and logbf() were broken on
     denormals, and logb() remained broken after 1.10 because the fix for
     logbf() was incompletely translated.
    
    Convert to __FBSDID().
    "
    
    Change-Id: I54f33648db7c421b06eee1ea8e63c57a179fae0d
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Jin Wei <wei.a.jin@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Reduce compiler anxiety.
    
    Warning from compiler:
    
    target arm C: libm <= bionic/libm/src/e_atan2.c
    bionic/libm/src/e_atan2.c: In function 'atan2':
    bionic/libm/src/e_atan2.c:71: warning: suggest parentheses around arithmetic in operand of '|'
    target arm C: libm <= bionic/libm/src/e_atan2f.c
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Sometimes the compiler is very right! Found bug in bessel routines for float.
    
    Original compiler error:
    
    target arm C: libm <= bionic/libm/src/e_j0f.c
    bionic/libm/src/e_j0f.c: In function 'j0f':
    bionic/libm/src/e_j0f.c:66: warning: comparison between signed and unsigned integer expressions
    bionic/libm/src/e_j0f.c: In function 'y0f':
    bionic/libm/src/e_j0f.c:140: warning: comparison between signed and unsigned integer expressions
    target arm C: libm <= bionic/libm/src/e_j1.c
    
    It's subtle but ix is masked with 0x7f000000 so it can never ever have a value
    greater than 0x80000000. So I switched to using the unmasked hx and added a
    cast as a reward to the compiler for being right.
    
    I checked the original routines that e_j0f.c was ported from (in e_j0.c) and
    the double's don't use 0x80000000 so this issue didn't exist there.
    
    Let that be a warning to those that just slap on casts to shut up the compiler,
    sometimes it's sniffed out a bug for you. :-)
    
    Similar fixes in the other functions.
    
    Change-Id: I7a776e5d4721fc3a9e3bd89179b67e9af3a2ebfa
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libm: Add nanf() and tgammaf() implementations.
    
    Requested by b/3370708 to export these through RenderScript.
    
    Change-Id: I1ae69f87a1ad4765b2dee8e4a6f2f3a6eb7c5ad4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libm: fix invalid result of function remquo/remquof
    
    Currently we will get the wrong result as follows:
    remquof(0x7bb33336, 0x63000000) = -671088640, 0x00000000
    remquo(0xbff0000000000003, 0x3ff0000000000003) = 1, 0x8000000000000000
    remquo(0x9120000000000001, 0x0000000000000005) = -1288490188, 0x0000000000000004
    while the correct one should be:
    remquof(0x7bb33336, 0x63000000) = 1476395008, 0x00000000
    remquo(0xbff0000000000003, 0x3ff0000000000003) = -1, 0x8000000000000000
    remquo(0x9120000000000001, 0x0000000000000005) = -1288490189, 0x0000000000000001
    
    Fixed in this patch.
    
    Change-Id: I540b348cd10a539f3b39b1753945c893c4c7ec46
    Signed-off-by: Jingwei Zhang <jingwei.zhang@intel.com>
    Signed-off-by: Jin Wei <wei.a.jin@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Bionic: Aliasing problems with frexpf
    
    This patch fixes a known bug in bionic libm
    due to aliasing issues in gcc 4.2 and 4.4; more
    specifically in frexpf.
    
    The function frexpf is used to extract the
    mantissa and exponent from a double precision number.
    
    The bug has already been reported here:
    https://code.google.com/p/android/issues/detail?id=6697
    
    Change-Id: I2e1f2e0a45906642d2225b9d150ed391d2bf331c
    Signed-off-by: Rodrigo Obregon <robregon@ti.com>
    libm: remove aliasing issue.
    
    See http://code.google.com/p/android/issues/detail?id=6697
    for details about this change.
    
    Change-Id: I516f00c6f3bc99b22be51669e4573246bdd6e33d
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Sometimes the compiler is very right! Found bug in bessel routines for float.
    
    Original compiler error:
    
    target arm C: libm <= bionic/libm/src/e_j0f.c
    bionic/libm/src/e_j0f.c: In function 'j0f':
    bionic/libm/src/e_j0f.c:66: warning: comparison between signed and unsigned integer expressions
    bionic/libm/src/e_j0f.c: In function 'y0f':
    bionic/libm/src/e_j0f.c:140: warning: comparison between signed and unsigned integer expressions
    target arm C: libm <= bionic/libm/src/e_j1.c
    
    It's subtle but ix is masked with 0x7f000000 so it can never ever have a value
    greater than 0x80000000. So I switched to using the unmasked hx and added a
    cast as a reward to the compiler for being right.
    
    I checked the original routines that e_j0f.c was ported from (in e_j0.c) and
    the double's don't use 0x80000000 so this issue didn't exist there.
    
    Let that be a warning to those that just slap on casts to shut up the compiler,
    sometimes it's sniffed out a bug for you. :-)
    
    Similar fixes in the other functions.
    
    Change-Id: I7a776e5d4721fc3a9e3bd89179b67e9af3a2ebfa
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libm: fix invalid result of function remquo/remquof
    
    Currently we will get the wrong result as follows:
    remquof(0x7bb33336, 0x63000000) = -671088640, 0x00000000
    remquo(0xbff0000000000003, 0x3ff0000000000003) = 1, 0x8000000000000000
    remquo(0x9120000000000001, 0x0000000000000005) = -1288490188, 0x0000000000000004
    while the correct one should be:
    remquof(0x7bb33336, 0x63000000) = 1476395008, 0x00000000
    remquo(0xbff0000000000003, 0x3ff0000000000003) = -1, 0x8000000000000000
    remquo(0x9120000000000001, 0x0000000000000005) = -1288490189, 0x0000000000000001
    
    Fixed in this patch.
    
    Change-Id: I540b348cd10a539f3b39b1753945c893c4c7ec46
    Signed-off-by: Jingwei Zhang <jingwei.zhang@intel.com>
    Signed-off-by: Jin Wei <wei.a.jin@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Update s_fabsl.c to upstream head.
    
    Bug: http://code.google.com/p/android/issues/detail?id=29539
    Change-Id: I843dcfcbfe49e8e9f43c49aae6ade1edb57a3053
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Reversed order of const and static to hush warning from compiler.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libm: Add nanf() and tgammaf() implementations.
    
    Requested by b/3370708 to export these through RenderScript.
    
    Change-Id: I1ae69f87a1ad4765b2dee8e4a6f2f3a6eb7c5ad4
    Add sincosl() function to bionic. So that sincos optimization can - DO NOT MERGE
    be enabled.
    
    Change-Id: I672cb319689aa4fb3f1f7cd868dda76842bebae9
    Add sincosl() function to bionic. So that sincos optimization can
    be enabled.
    
    Change-Id: I19671a407dc96a92417c719da938ee0c1669bfb8
    Add sincos() and sincosf() implementation.
    
    This is a GLibc-compatibility patch required to simplify our
    upcoming toolchain work/porting.
    
    Change-Id: I615a20a449763f86b6e2b0e4f5ab43fb029ceb6d
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Enclosed functions in fenv.h with __BEGIN_DECLS/__END_DECLS
    
    Those are C funcitons
    
    Related CL: https://android-review.googlesource.com/#/c/41833/
    
    Change-Id: I4386bcf948ad31c3690c9b7a145103088133d041
    Bionic: x86: Fix libm macro definitions
    
    http://code.google.com/p/android/issues/detail?id=19276
    
    GCC would remove inline asm due to lack of knowledge
    of FPU register changes.
    
    Change-Id: I9f9e8623fa6580843b7cd8178439ace8c2db2d51
    Signed-off-by: Mark D Horn <mark.d.horn@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Author: Jingwei Zhang <jingwei.zhang@intel.com>
    Use proper variable typing
    
    Orig-Change-Id: If5c33d90b33f538448ac12e7bee94b4b9173d39c
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    android-x86: use proper variable typing
    
    Change-Id: Iff99932acd2f6cb482fc5da9ff586d7ab2a8b209
    Use proper variable typing
    
    Change-Id: If5c33d90b33f538448ac12e7bee94b4b9173d39c
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Had include/arm/fenv.h, but missed include/mips/fenv.h.
    
    Needed for the device-build for LLVM's constant folding pass.
    
    Change-Id: I412a98d52458231650801a8b59fe3159a789b8b9
    Author: fu@mips.com
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support to libm, libdl and libthread_db
    
    Change-Id: I9106721af7fe0cd45df82976250db0d300a20117
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    MIPS support to libm, libdl and libthread_db
    
    Change-Id: I9106721af7fe0cd45df82976250db0d300a20117
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MIPS support to libm, libdl and libthread_db
    
    Change-Id: I9106721af7fe0cd45df82976250db0d300a20117
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Enclosed functions in fenv.h with __BEGIN_DECLS/__END_DECLS
    
    Those are C funcitons
    
    Related CL: https://android-review.googlesource.com/#/c/41833/
    
    Change-Id: I4386bcf948ad31c3690c9b7a145103088133d041
    MIPS support to libm, libdl and libthread_db
    
    Change-Id: I9106721af7fe0cd45df82976250db0d300a20117
    Signed-off-by: Raghu Gandham <raghu@mips.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
