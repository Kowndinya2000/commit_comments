    Update README.md
    Update README.md
    Update README.md
    Update README.md
    removed make commands from readme
    added readme pointing users to develop branch for now
    Update README.md
    Updated the readme to include information about the make targets
    Added Google Ultron Image
    Update README.md
    Changed folder name and where it is used in the scripts NOTE: delete your local build folder and rebuild
    Removed information that has been moved to the wiki
    Update README.md
    Update README.md
    Update README.md
    updated readme
    initial commit
    Continued working on visualisation asset loader, fixed bug in build script that may have been the result of a bad merge at some point
    Now broadcasting key codes on upstagekeyinput
    debug.sh is now generated by the build process, and the generation can be configured with debugconfig. Produces logs in a "logs" subfolder by default
    Added files for running tests on Jenkins
    Created searching script
    Added recursive option to grep and exiting with status 0 so make doesn't complain
    Including the line number in the todos script
    Created a script to find TODOs in the code
    debug.sh is now generated by the build process, and the generation can be configured with debugconfig. Produces logs in a "logs" subfolder by default
    changed build script to make run.sh executable
    Fixed the build scripts so that the exit status is correctly passed up and jenkins can tell if the build failed
    Simplified the process of adding actors further
    Make Actor's px, py and theta absolute, moved the actorlist-building script to main directory with other build scripts
    Edited CMakeLists to define build dependencies and removed the manual build command in the build script
    Corrected build order for messages to work
    commented out all new code that broke the build. need to check as we uncomment to make sure it all works
    Fixed build script
    Put message files into a separate package and made R0 advertise with the location message as a test
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Made it a little easier to add new robots
    Changed folder name and where it is used in the scripts NOTE: delete your local build folder and rebuild
    Created seperate build script for jenkins
    Sourcing setup.bash for Jenkins
    Scripts now include link to /bin/bash, added run script for stage
    added build script
    Continued working on visualisation asset loader, fixed bug in build script that may have been the result of a bad merge at some point
    Now broadcasting key codes on upstagekeyinput
    debug.sh is now generated by the build process, and the generation can be configured with debugconfig. Produces logs in a "logs" subfolder by default
    Added files for running tests on Jenkins
    Tired of maintaining the Makefile
    Updated the all target to be consistent with the build script, it would be really awesome if when you modified the build script you updated the Makefile or alternatively we could ditch the build script
    Added a Makefile as alternative to using the bash script
    Fixed the build scripts so that the exit status is correctly passed up and jenkins can tell if the build failed
    Fixed jenkins build script, using absolute paths isn't that nice
    jenkins_build.sh now creates a tarball with all the files required to run the project
    Testing github webhook for Jenkins
    Updated dependancies in jenkins build script
    Created seperate build script for jenkins
    Fixed src/CMakeLists.txt
    Cleaned up visualisation folder hierarchy a bit
    Implemented a mock version of StageOdom_callback for the Actor class
    removed .AppleDouble
    Changed a symlink to a more Windows-hosted-shared-folder-friendly cmake include
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    inital commit of skeleton code
    initialised workspace using catkin
    Added a small test suite for some core graph search behaviour
    Fixed tests
    Added some more navigation system tests.
    Removed some deleted tests from CMakeLists.
    Added some tests for the navigation system.
    Added files for running tests on Jenkins
    Fomatted the gtest in the CMaklists.txt
    Linking against catkin_LIBRARIES
    Apparently I was meant to link the tests against ActorLibrary
    Not working gtest in ROS is probably the worst
    Initial state of gtest, working test script. But not actually testing our code
    Started work on navigation system testing. Doesn't quite compile yet >:(
    Initial commit so Kurt can work off same framework. Absolutely no way this compiles so don't even try.
    Started adding pathfinding to go to resident
    Simplified the process of adding actors further
    Added basic/empty entertainment Robot
    Edited CMakeLists to define build dependencies and removed the manual build command in the build script
    removed generate messages from the non-message folder CMakeLists as it keeps creating warnings upon building
    Fixed project not building; removed add_messages section from CMakeLists.
    Slightly tidied up some variable names in Actor, tried to send test std_msgs/String message but failed :(
    Path planner now returns list of nodes
    Split path planning nodes into it's own subclass
    Inital commit, started path planner using simple nodes
    Put message files into a separate package and made R0 advertise with the location message as a test
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Changed folder name and where it is used in the scripts NOTE: delete your local build folder and rebuild
    Added makefile so that robot source is built
    Removed all the extra Mac files from initial commit
    inital commit of skeleton code
    Simplified the process of adding actors further
    updated toms / chaoyi's email address
    added tf as a build dependency
    Put message files into a separate package and made R0 advertise with the location message as a test
    Cleaned up comments and dependencies in package.xml. Added additional info.
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Dog
    Added propper number of visitors and arranged them
    Added caregivers again :(
    made models lewl
    Added a bunch of debug messages, trying to figure out why EntertainmentRobot segfaults instead of moving to the Doctor.
    Lol caregivers
    Added Caregiver
    positioned robots
    minor edits to RCmode
    removed R0 and R1 and moved RC Robot to under the bed
    Changed doctor and nurses starting position
    Spawned companion and cooking robots in the utility room
    Spawned a medication robot in the utility room
    created rainbow model for entertainment robot haha
    Changed order of robots in actorlist
    Added friend class
    made the clock look kind of like a clock
    made the clock node be invisible
    moved clock node
    time now publishing
    Nurses are now self aware, know who they are so can act independantly
    Added two nurses and tweaked doctor's variable names
    Added RC bot
    Added empty doctor class/robot
    Made Relative pink, deleted Relative's model - fixes Relative not getting cmd_vel data from Stage. Fixed Resident not receiving socialising messages from Relative.
    Copied EntertertainmentRobot stuff into Relative.
    moved positions of robot and relative
    moved entertaiment robot
    Adding relative files to develop
    made entertainment robot move to resident
    resident is now the tall red robot
    Moved a robot and switched a boolean
    Moved some robots and pathfinding nodes around to make the demonstration look better. R0 no longer walks into bed/resident/walls immediately. :)
    Added basic/empty entertainment Robot
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Added resident to world with no functionality
    Made it a little easier to add new robots
    Dog
    Disabled actor-actor collisions as well
    Disabled world collisions
    Cargiver tried to move to resident
    Changed shower floor colour, added carpet and tiles
    Added kitchen bench (straight and corner pieces), oven, and fridge. Also removed invisible box from within wardrobe.
    Added basin, bathroom bench, and toilet
    Added shower and wardrobe, fixed incorrect naming of beds
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Made it a little easier to add new robots
    Created several pieces of furniture, simplified layout of world.
    Added house layout to world file, trying isometric view
    Changed folder name and where it is used in the scripts NOTE: delete your local build folder and rebuild
    inital commit of skeleton code
    no collisions between actors
    Disabled actor-actor collisions as well
    created rainbow model for entertainment robot haha
    no collisions between actors
    Disabled actor-actor collisions as well
    Added the module of caregiver
    doctor model advanced mode lol
    Made doctor taller
    Added Doctor model
    finished chef
    truly stopped extra robots moving and additions to the cooking model
    truly stopped extra robots moving and additions to the cooking model
    stopped robots from moving to resident who weren't supposed to. added cooking robot model file
    created rainbow model for entertainment robot haha
    no collisions between actors
    Disabled actor-actor collisions as well
    updated resident model, ultron logo third done
    doctor model advanced mode lol
    Made doctor taller
    Added Doctor model
    finished chef
    truly stopped extra robots moving and additions to the cooking model
    truly stopped extra robots moving and additions to the cooking model
    stopped robots from moving to resident who weren't supposed to. added cooking robot model file
    created rainbow model for entertainment robot haha
    Dog
    no collisions between actors
    Disabled actor-actor collisions as well
    made models lewl
    Added the module of caregiver
    doctor model advanced mode lol
    Made doctor taller
    Added Doctor model
    finished chef
    truly stopped extra robots moving and additions to the cooking model
    truly stopped extra robots moving and additions to the cooking model
    stopped robots from moving to resident who weren't supposed to. added cooking robot model file
    created rainbow model for entertainment robot haha
    no collisions between actors
    Disabled actor-actor collisions as well
    changed clock colour again
    changed the yuck gold colour on the clock. someone should seriously make this clock look better
    made the clock look kind of like a clock
    made the clock node be invisible
    no collisions between actors
    Disabled actor-actor collisions as well
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Made it a little easier to add new robots
    no collisions between actors
    Disabled actor-actor collisions as well
    made model for companion robot
    no collisions between actors
    Disabled actor-actor collisions as well
    made models lewl
    Added the module of caregiver
    doctor model advanced mode lol
    Made doctor taller
    Added Doctor model
    finished chef
    truly stopped extra robots moving and additions to the cooking model
    truly stopped extra robots moving and additions to the cooking model
    stopped robots from moving to resident who weren't supposed to. added cooking robot model file
    created rainbow model for entertainment robot haha
    no collisions between actors
    Disabled actor-actor collisions as well
    finished chef
    truly stopped extra robots moving and additions to the cooking model
    truly stopped extra robots moving and additions to the cooking model
    stopped robots from moving to resident who weren't supposed to. added cooking robot model file
    created rainbow model for entertainment robot haha
    Disabled actor-actor collisions as well
    Fixed like the entire world go me
    Adding relative files to develop
    no collisions between actors
    Disabled actor-actor collisions as well
    Given resident walking stick and a few other features
    updated resident model, ultron logo third done
    Resident model is back in business!
    resident is now the tall red robot
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Made it a little easier to add new robots
    no collisions between actors
    Disabled actor-actor collisions as well
    Spawned a medication robot in the utility room
    Made medication model but is currently on RCActor just to see it
    no collisions between actors
    Disabled actor-actor collisions as well
    upgraded nurse model to full human mode
    Made the Nurses Taller
    Added nurse model
    Spawned a medication robot in the utility room
    Made medication model but is currently on RCActor just to see it
    no more collisions
    Added shower and wardrobe, fixed incorrect naming of beds
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Created several pieces of furniture, simplified layout of world.
    no more collisions
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Created several pieces of furniture, simplified layout of world.
    Added kitchen bench (straight and corner pieces), oven, and fridge. Also removed invisible box from within wardrobe.
    no more collisions
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Created several pieces of furniture, simplified layout of world.
    Added kitchen bench (straight and corner pieces), oven, and fridge. Also removed invisible box from within wardrobe.
    Added basin, bathroom bench, and toilet
    Added basin, bathroom bench, and toilet
    no more collisions
    Added kitchen bench (straight and corner pieces), oven, and fridge. Also removed invisible box from within wardrobe.
    Added kitchen bench (straight and corner pieces), oven, and fridge. Also removed invisible box from within wardrobe.
    no more collisions
    Added kitchen bench (straight and corner pieces), oven, and fridge. Also removed invisible box from within wardrobe.
    Added shower and wardrobe, fixed incorrect naming of beds
    no more collisions
    Added basin, bathroom bench, and toilet
    Added basin, bathroom bench, and toilet
    no more collisions
    Added shower and wardrobe, fixed incorrect naming of beds
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Created several pieces of furniture, simplified layout of world.
    Changed shower floor colour, added carpet and tiles
    Added shower and wardrobe, fixed incorrect naming of beds
    Added basin, bathroom bench, and toilet
    Added kitchen bench (straight and corner pieces), oven, and fridge. Also removed invisible box from within wardrobe.
    Added basin, bathroom bench, and toilet
    Added basin, bathroom bench, and toilet
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Created several pieces of furniture, simplified layout of world.
    Added house layout to world file, trying isometric view
    Changed folder name and where it is used in the scripts NOTE: delete your local build folder and rebuild
    inital commit of skeleton code
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Created several pieces of furniture, simplified layout of world.
    Added house layout to world file, trying isometric view
    Changed folder name and where it is used in the scripts NOTE: delete your local build folder and rebuild
    inital commit of skeleton code
    Removed my debug messages from getClosestNode()
    Confirmed that the closest node is correctly being detected and that paths are being correctly generated.
    Nodes are all added to the graph, but are not all updating their location correctly. This is due to their processes hanging. These nodes give segfaults when CTRL+Ced
    Made all queues update path planner
    Nodes aren't persisting when added to the graph. Need to find out why.
    Various improvements and error catching, does not fix the fact that addNode doesn't work
    Removed reference to non-existant variable.
    Need to update PathPlanner to the new version (using the Listener)
    Still trying to figure out why EntertainmentRobot isn't being added to the graph.
    Added a bunch of debug messages, trying to figure out why EntertainmentRobot segfaults instead of moving to the Doctor.
    Actor was not telling its PathPlanner to update during goToNode()
    readded core navigiation files
    Made PathPlanner static, did a lot of debugging - super close to compiling!
    More debugging. Callbacks are static - need to finish making PathPlanner a singleton to get this to work.
    Did some more debugging. /Still/ not compiling, but I'm making progress.
    Actor now extends PathPlannerNode, soon we'll be able to pathfind to any Actor. PathPlanner now maintains its graph including the current positions of all Actors, and updates their neighbour based on current location (from location topic).
    Added method to PathPlanner to return the closest node to a given set of coordinates. Cannot test if this builds correctly as Actor already breaks the build at this time.
    Added some comments to all messages and classes.
    Corrected path planner to mark visited nodes as visited, fixed 4 nodes bug
    fixed bug where robots could only drive to coordinates with the same x and y
    Actor Now can go to location, going to nodes in progress
    fixed path planner, now choses correct nodes to go to
    testing path planner, still not in working state
    change nodes to reference strings as pointers
    changed pathplanner to use object references rather than objects
    Changed path planning to take node inputs rather than names, nodes now have a position
    Path planner now returns list of nodes
    Split path planning nodes into it's own subclass
    Inital commit, started path planner using simple nodes
    Fixed docotr
    Fixed merge conflict
    fixed doctor
    removed erranous debug statements
    changed mend to health in doctor
    Added goToNode in Doctor and Nurse
    Removed white space, removed deprecated go to resident and going to resident
    Worked on doctor's logic
    Added locking to doctor
    Fixed Doctor and Nurse
    Doctors and nurses now can be controlled
    Added logic and navigation functionality to doctor that should work when navigation is merged into develop
    Doctor now calls none, one or two nurses
    Nurses are now self aware, know who they are so can act independantly
    Added call nurse random and logic
    Added two nurses and tweaked doctor's variable names
    Changed to telephone message implementation
    Added a TODO
    Changed response health number
    Added subscriber to Health for Doctor
    Added empty doctor class/robot
    Make Actor's px, py and theta absolute, moved the actorlist-building script to main directory with other build scripts
    Implemented a mock version of StageOdom_callback for the Actor class
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Refactored a bit (a lot)
    Made all queues update path planner
    Need to update PathPlanner to the new version (using the Listener)
    readded core navigiation files
    removed debug statements
    fixed bad edge
    took back cooking robot an hour
    added giving of food  to caregiver to functionality
    added time callback and subscriber for cooking robot
    implemented some cooking robot functionality
    Confirmed that the closest node is correctly being detected and that paths are being correctly generated.
    Nodes aren't persisting when added to the graph. Need to find out why.
    positioned robots
    added getActorName to all nodes
    can now control any robot
    refactored cooking robot, still needs major edits
    truly stopped extra robots moving and additions to the cooking model
    stopped robots from moving to resident who weren't supposed to. added cooking robot model file
    Changed Entertainedness to Morale
    Added some comments to all messages and classes.
    renamed classes and methods
    started work on other robots
    Set correct privacy on path planner functions, removed path planning logic from subclasses
    Copied EntertertainmentRobot stuff into Relative.
    Entertainment now returns home after entertaining
    fixed really bad brackets
    Fixed conditional in EntertainmentRobot, it was actually a variable assignment
    trying to delay entertainment stuff
    moved positions of robot and relative
    Updated entertainment robot
    removed 'kurt fix this shit' things
    Removed unused meethod in entertainment robot
    Fixed actor to wait for level change and then complete when arriving at resident
    sped up stuff
    syntax fiend
    made entertainment robot move to resident
    Moved a robot and switched a boolean
    Removed unneeded ROS_INFO
    Changed the response to interaction topic to be slower, untested
    Will now move and publish that it is entertaining, although due to alpha, will never get to resident, so will publish after a certain time
    Started adding pathfinding to go to resident
    Added logic to tell if robot is currently entertaining and now handles the incomming message (not tested)
    Added empty check method to check value of entertainedness
    Added functionality to subscribe to entertainedness topic, however untested until someone publishes to it
    Added basic/empty entertainment Robot
    Removed all dependecies on movetoresident and the associated boolean
    added getActorName to all nodes
    can now control any robot
    Removed unnecessary if block
    removed some debug messages
    Added some comments to all messages and classes.
    Set correct privacy on path planner functions, removed path planning logic from subclasses
    Copied EntertertainmentRobot stuff into Relative.
    Added socialness subscriber logic to relative
    Adding relative files to develop
    readded core navigiation files
    Added some tests for the navigation system.
    Added some comments to all messages and classes.
    Actor Now can go to location, going to nodes in progress
    testing path planner, still not in working state
    change nodes to reference strings as pointers
    Changed path planning to take node inputs rather than names, nodes now have a position
    Split path planning nodes into it's own subclass
    MATT FIXED THIS SHIT
    Didn't crash as much
    Added ifdef thing
    GraphSearch is now static
    Returns list of points
    Implemented BFS
    added nodes
    Added findClosestPoint function
    Implemented helper methods for BFS
    implemented singleton
    breadth first search time
    jamie plz
    Made all queues update path planner
    readded core navigiation files
    implemented companion
    CompanionRobot building now
    Fixed Companion getActorName
    added getActorName to all nodes
    refactored CompanionRobot
    Spawned companion and cooking robots in the utility room
    Changed Entertainedness to Morale
    renamed classes and methods
    started work on other robots
    Copied EntertertainmentRobot stuff into Relative.
    Entertainment now returns home after entertaining
    Removed unused meethod in entertainment robot
    Fixed actor to wait for level change and then complete when arriving at resident
    Changed the response to interaction topic to be slower, untested
    Will now move and publish that it is entertaining, although due to alpha, will never get to resident, so will publish after a certain time
    Started adding pathfinding to go to resident
    Added logic to tell if robot is currently entertaining and now handles the incomming message (not tested)
    Added empty check method to check value of entertainedness
    Added functionality to subscribe to entertainedness topic, however untested until someone publishes to it
    Added basic/empty entertainment Robot
    Added goToNode in Doctor and Nurse
    Removed white space, removed deprecated go to resident and going to resident
    Fixed Doctor and Nurse
    Doctors and nurses now can be controlled
    Added commented methods that should work when navigation is merged into develop
    Nurses are now self aware, know who they are so can act independantly
    Added two nurses and tweaked doctor's variable names
    started work on visitor
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Refactored a bit (a lot)
    Updated MedicationRobot to new pathfinding system.
    Added phonecall initiation method to resident
    added moving of resident to and from bed for sleeping and to the eating place
    added time callback and subscriber for cooking robot
    Moved max min and critical macros into Actor.h
    Removed unsed consts
    Increased modularity in resident, extended debugging.
    cleaned up resident file after randomness merge
    added getActorName to all nodes
    Resident now calls friend when low socialness
    Changed srand() to dev/urandom, added 'fake' rand test mode
    Level MIN/MAX fixed, enforced in changeLevel(), fitness change fixed
    added call method
    finished locking implementation
    Topics and messages now set up, need to create unlock topic
    Added debugging to randomness; changing a level returns new level as int
    Locking almost implemented
    locking coming along nicely
    started implementing lock functionality
    Solved a bunch of issues, added 'final' random logic
    inverted 12 hours time within clock to make it neater
    resident now responding to time messages
    More logic for each level
    trying out clock node
    First random events working
    Fixed break in branch from an oversight during merge
    Simpler RNG for now, also time of loop being measured
    Tested and confirmed booleans for have_woken and gone_to_bed work as expected
    can now retrieve hours or minutes from the time_of_day value
    Got time incrementing by required amount to have 30seconds real world equal 1 hour Ultron world
    created a time variable, going to move to new branch now
    Changed Entertainedness to Morale
    Switched to C's rand() - the problem was that /dev/random blocks when it doesn't have a value ready
    Implemented foundation for randomness method
    socialness now changes over time after entertainedness
    sped up stuff
    adjusted wait time
    entertainment visually shows now for demo
    Might be a little closer to compiling. Hard to tell.
    tidied up code and removed surplus functions
    trying to make static method but failing
    Added publication of entertainedness level by resident every time it changes.
    included ros to remove a lot of errors haha
    some progress made towards updating levels, not building at the moment
    Added some comments to all messages and classes.
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Refactored a bit (a lot)
    Created Human and Robot (Actor subclasses with no functionality). Made R0 extend Robot rather than Actor.
    Actors now store a list of the current locations of all other Actors. This allows us to pathfind to a specific node by name instead of needing to hardcode the closest waypoint to them.
    Added RC bot
    readded core navigiation files
    Added method to PathPlanner to return the closest node to a given set of coordinates. Cannot test if this builds correctly as Actor already breaks the build at this time.
    Actor Now can go to location, going to nodes in progress
    fixed path planner, now choses correct nodes to go to
    change nodes to reference strings as pointers
    Changed path planning to take node inputs rather than names, nodes now have a position
    Split path planning nodes into it's own subclass
    Added some comments to all messages and classes.
    started work on visitor
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Refactored a bit (a lot)
    Added Visitor class (Human subclass), fixed Human.cpp not including Human.h
    Created Human and Robot (Actor subclasses with no functionality). Made R0 extend Robot rather than Actor.
    Added propper l;ocking for friend
    added getActorName to all nodes
    Friend goes to resident when called and socialness
    low
    Resident now calls friend when low socialness
    Implemented socialising after obtaining lock
    Friend socialness callback implemented, morale and time still to be implemented
    Added friend class
    Copied EntertertainmentRobot stuff into Relative.
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Refactored a bit (a lot)
    Created Human and Robot (Actor subclasses with no functionality). Made R0 extend Robot rather than Actor.
    added getActorName to all nodes
    Sped up the night time hours
    changed back to real time adding, not debug time
    inverted 12 hours time within clock to make it neater
    time now publishing
    trying out clock node
    removed erranous debug statements
    stuff12
    Removed all dependecies on movetoresident and the associated boolean
    Added propper l;ocking for friend
    Reverted the generateStageName function behaviour
    added getActorName to all nodes
    Friend goes to resident when called and socialness
    low
    Resident now calls friend when low socialness
    Implemented socialising after obtaining lock
    Friend socialness callback implemented, morale and time still to be implemented
    Added friend class
    added getActorName to all nodes
    removed unused variable
    Got entertainment robot requesting the lock and interacting with it
    Changed Entertainedness to Morale
    Copied EntertertainmentRobot stuff into Relative.
    Entertainment now returns home after entertaining
    Removed unused meethod in entertainment robot
    Fixed actor to wait for level change and then complete when arriving at resident
    Changed the response to interaction topic to be slower, untested
    Will now move and publish that it is entertaining, although due to alpha, will never get to resident, so will publish after a certain time
    Started adding pathfinding to go to resident
    Added logic to tell if robot is currently entertaining and now handles the incomming message (not tested)
    Added empty check method to check value of entertainedness
    Added functionality to subscribe to entertainedness topic, however untested until someone publishes to it
    Added basic/empty entertainment Robot
    Now day can be published to caregiver through msg_pkg::Time
    added getActorName to all nodes
    Sped up the night time hours
    changed back to real time adding, not debug time
    inverted 12 hours time within clock to make it neater
    time now publishing
    trying out clock node
    Added RC bot
    Updated MedicationRobot to new pathfinding system.
    Added phonecall initiation method to resident
    Added telephone call for doctor
    added moving of resident to and from bed for sleeping and to the eating place
    removed commented code
    Increased modularity in resident, extended debugging.
    Increased modularity in resident, extended debugging.
    fixed stuff up
    cleaned up resident file after randomness merge
    added getActorName to all nodes
    Resident now calls friend when low socialness
    minor edits to RCmode
    Changed srand() to dev/urandom, added 'fake' rand test mode
    Level MIN/MAX fixed, enforced in changeLevel(), fitness change fixed
    added call method
    finished locking implementation
    Topics and messages now set up, need to create unlock topic
    Changed debugging to use preprocessor directives
    Added debugging to randomness; changing a level returns new level as int
    Locking almost implemented
    locking coming along nicely
    started implementing lock functionality
    Solved a bunch of issues, added 'final' random logic
    removed merge text in the file that was failing the build
    inverted 12 hours time within clock to make it neater
    resident now responding to time messages
    time now publishing
    More logic for each level
    trying out clock node
    Reduced the amount of code in getNewLevel
    First random events working
    Fixed break in branch from an oversight during merge
    Simpler RNG for now, also time of loop being measured
    Tested and confirmed booleans for have_woken and gone_to_bed work as expected
    replaced hard coded seconds value with calculated value
    can now retrieve hours or minutes from the time_of_day value
    Got time incrementing by required amount to have 30seconds real world equal 1 hour Ultron world
    created a time variable, going to move to new branch now
    Changed Entertainedness to Morale
    Switched to C's rand() - the problem was that /dev/random blocks when it doesn't have a value ready
    Added some comments to all messages and classes.
    Implemented foundation for randomness method
    Made Relative pink, deleted Relative's model - fixes Relative not getting cmd_vel data from Stage. Fixed Resident not receiving socialising messages from Relative.
    removed debugging info string
    resident now spins whe is being entertained and stops when he's not
    socialness now changes over time after entertainedness
    Robot spins when interacting now
    removed 'kurt fix this shit' things
    sped up stuff
    made resident stationary
    removed counter output to terminal
    resident is now the tall red robot
    adjusted wait time
    entertainment visually shows now for demo
    removed test code
    removed test code for changing level
    testing entertainedness level changes for Joshua testing
    tidied up code and removed surplus functions
    Needed to add Resident:: to the static function as it is a static member function of Resident
    trying to make static method but failing
    Added publication of entertainedness level by resident every time it changes.
    set initial levels to maximum value of 5
    subscribing to interactions now functioning and is publishing the appropriate message as the level changes
    included ros to remove a lot of errors haha
    some progress made towards updating levels, not building at the moment
    Didn't crash as much
    added some files
    Slowly getting there
    Editing code (not building)
    added time callback and subscriber for cooking robot
    actor now storing location of other nodes
    Changed things
    Nodes are all added to the graph, but are not all updating their location correctly. This is due to their processes hanging. These nodes give segfaults when CTRL+Ced
    Removed redundant code from cargiver
    Removed references to Actor's locationCallback method - not needed anymore.
    Removed white space, removed deprecated go to resident and going to resident
    Added caregivers again :(
    Moved max min and critical macros into Actor.h
    returned moving to resident
    supporting changes to navigation in actor and actorspawner
    Reverted the generateStageName function behaviour
    Adding getName to all actors
    minor edits to RCmode
    set up basis of toggling modes
    Changed actor so subclasses will not request for a new lock until another robot relenquishes the lock
    Added functionality to handle the case where a robot does not get a lock or is kicked off the lock
    Fixed subscribing to wrong topic in actor.cpp to find if the child class has the lock or not
    Added callbacks in actor so that all child classes will know if they have the lock or not without subscribing to topics
    finished locking implementation
    Topics and messages now set up, need to create unlock topic
    locking coming along nicely
    started implementing lock functionality
    Made PathPlanner static, did a lot of debugging - super close to compiling!
    More debugging. Callbacks are static - need to finish making PathPlanner a singleton to get this to work.
    time now publishing
    Did some more debugging. /Still/ not compiling, but I'm making progress.
    Did some debugging (still a lot more to go), removed 'location' topic subscribing from Actor.
    Actor now extends PathPlannerNode, soon we'll be able to pathfind to any Actor. PathPlanner now maintains its graph including the current positions of all Actors, and updates their neighbour based on current location (from location topic).
    Got keyboard listener set up on se306_p1_pkg, fixed automated ActorSpawner
    Actors now store a list of the current locations of all other Actors. This allows us to pathfind to a specific node by name instead of needing to hardcode the closest waypoint to them.
    Got time incrementing by required amount to have 30seconds real world equal 1 hour Ultron world
    Added method to PathPlanner to return the closest node to a given set of coordinates. Cannot test if this builds correctly as Actor already breaks the build at this time.
    Fixed build (I think Actor.h was meant to be pushed before)
    updated goToNode() method to go to the string name of a node, rather than taking a path
    Set correct privacy on path planner functions, removed path planning logic from subclasses
    Added a stopResponse function to Actor
    fixed breakage and remove more autogen
    Fixed actor to wait for level change and then complete when arriving at resident
    added another node for in the mavmesh
    made entertainment robot move to resident
    added move to resident behaviour
    Added nodeDoor. This should be the activeNode of all Visitors.
    Created doResponse stub
    Corrected path planner to mark visited nodes as visited, fixed 4 nodes bug
    Make Actor's px, py and theta absolute, moved the actorlist-building script to main directory with other build scripts
    fixed bug where robots could only drive to coordinates with the same x and y
    Actor Now can go to location, going to nodes in progress
    added tf as a build dependency
    Moved publishing location functionality to its own function
    Should be able to subscribe to location topic, but hasn't been tested, but compiles
    location topic created
    change nodes to reference strings as pointers
    Implemented a mock version of StageOdom_callback for the Actor class
    Slightly tidied up some variable names in Actor, tried to send test std_msgs/String message but failed :(
    changed pathplanner to use object references rather than objects
    changed pathplanner to use object references rather than objects
    commented out all new code that broke the build. need to check as we uncomment to make sure it all works
    Attempted to create a topic and publish location data to it
    Added functionality for subscribing, however awaiting publishing implimentation to test if it works or not
    Put message files into a separate package and made R0 advertise with the location message as a test
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Refactored a bit (a lot)
    attempting to fix inheritance issue. still not fixed
    Updated things
    Added functionality to init and loop
    Added another hook method for initial setup of the robot
    Added while loop and hook to Actor
    Attempting to implement executeHook and initHook for subclasses of Actor, does not compile please don't kill me
    Uncommented MainHook function declaration in Actor.h - my mistake :b
    Created Human and Robot (Actor subclasses with no functionality). Made R0 extend Robot rather than Actor.
    Overriding virtual method in R0
    from Actor
    Removed class definition in Actor.cpp, overriding mainHook in R0.cpp
    Changed Actor class fields from private to protected, as C++ subclasses cannot access private fields of parent classes.
    Added main hook method and other methods for the class and also in the header file
    Added empty Actor class and header file
    Dog
    Added RC bot
    Actors now store a list of the current locations of all other Actors. This allows us to pathfind to a specific node by name instead of needing to hardcode the closest waypoint to them.
    Updated MedicationRobot to new pathfinding system.
    removed debug statements
    fixed what someone when someone reverted a bugfix
    implemeted medicine robot, hopefully
    removed debug statements
    added locking to medication robot
    changed medication robot to locking
    Removed all dependecies on movetoresident and the associated boolean
    added getActorName to all nodes
    can now control any robot
    refactored medicine robot
    truly stopped extra robots moving and additions to the cooking model
    stopped robots from moving to resident who weren't supposed to. added cooking robot model file
    Changed Entertainedness to Morale
    Added some comments to all messages and classes.
    renamed classes and methods
    started work on other robots
    Set correct privacy on path planner functions, removed path planning logic from subclasses
    Copied EntertertainmentRobot stuff into Relative.
    Entertainment now returns home after entertaining
    fixed really bad brackets
    Fixed conditional in EntertainmentRobot, it was actually a variable assignment
    trying to delay entertainment stuff
    moved positions of robot and relative
    Updated entertainment robot
    removed 'kurt fix this shit' things
    Removed unused meethod in entertainment robot
    Fixed actor to wait for level change and then complete when arriving at resident
    sped up stuff
    syntax fiend
    made entertainment robot move to resident
    Moved a robot and switched a boolean
    Removed unneeded ROS_INFO
    Changed the response to interaction topic to be slower, untested
    Will now move and publish that it is entertaining, although due to alpha, will never get to resident, so will publish after a certain time
    Started adding pathfinding to go to resident
    Added logic to tell if robot is currently entertaining and now handles the incomming message (not tested)
    Added empty check method to check value of entertainedness
    Added functionality to subscribe to entertainedness topic, however untested until someone publishes to it
    Added basic/empty entertainment Robot
    A lot of changes had been made
    Removed redundant code from cargiver
    Implemented lock in Cargiver
    Temporarily removed lockStatus
    Added LockStatus
    Added LockStatus
    Created Caregiver. (But moving to resident and showering are unfinished)
    Updated MedicationRobot to new pathfinding system.
    implemeted medicine robot, hopefully
    changed medication robot to locking
    added getActorName to all nodes
    refactored medicine robot
    Spawned a medication robot in the utility room
    Changed Entertainedness to Morale
    renamed classes and methods
    started work on other robots
    Copied EntertertainmentRobot stuff into Relative.
    Entertainment now returns home after entertaining
    Removed unused meethod in entertainment robot
    Fixed actor to wait for level change and then complete when arriving at resident
    Changed the response to interaction topic to be slower, untested
    Will now move and publish that it is entertaining, although due to alpha, will never get to resident, so will publish after a certain time
    Started adding pathfinding to go to resident
    Added logic to tell if robot is currently entertaining and now handles the incomming message (not tested)
    Added empty check method to check value of entertainedness
    Added functionality to subscribe to entertainedness topic, however untested until someone publishes to it
    Added basic/empty entertainment Robot
    Added some comments to all messages and classes.
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Refactored a bit (a lot)
    Added Visitor class (Human subclass), fixed Human.cpp not including Human.h
    Created Human and Robot (Actor subclasses with no functionality). Made R0 extend Robot rather than Actor.
    Fixed Doctor and Nurse
    Doctors and nurses now can be controlled
    Nurses are now self aware, know who they are so can act independantly
    Added two nurses and tweaked doctor's variable names
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Refactored a bit (a lot)
    Created Human and Robot (Actor subclasses with no functionality). Made R0 extend Robot rather than Actor.
    Dog
    supporting changes to navigation in actor and actorspawner
    Nurses are now self aware, know who they are so can act independantly
    Got keyboard listener set up on se306_p1_pkg, fixed automated ActorSpawner
    Added some comments to all messages and classes.
    Included Relative in ActorSpawner.
    Added Relative to ActorSpawner
    Make Actor's px, py and theta absolute, moved the actorlist-building script to main directory with other build scripts
    Added basic/empty entertainment Robot
    Implemented a mock version of StageOdom_callback for the Actor class
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Added resident to world with no functionality
    Made it a little easier to add new robots
    Refactored a bit (a lot)
    changed how companion provides morale
    implemented companion
    Removed all dependecies on movetoresident and the associated boolean
    Adding getName to all actors
    can now control any robot
    refactored CompanionRobot
    truly stopped extra robots moving and additions to the cooking model
    stopped robots from moving to resident who weren't supposed to. added cooking robot model file
    Changed Entertainedness to Morale
    Added some comments to all messages and classes.
    renamed classes and methods
    started work on other robots
    Set correct privacy on path planner functions, removed path planning logic from subclasses
    Copied EntertertainmentRobot stuff into Relative.
    Entertainment now returns home after entertaining
    fixed really bad brackets
    Fixed conditional in EntertainmentRobot, it was actually a variable assignment
    trying to delay entertainment stuff
    moved positions of robot and relative
    Updated entertainment robot
    removed 'kurt fix this shit' things
    Removed unused meethod in entertainment robot
    Fixed actor to wait for level change and then complete when arriving at resident
    sped up stuff
    syntax fiend
    made entertainment robot move to resident
    Moved a robot and switched a boolean
    Removed unneeded ROS_INFO
    Changed the response to interaction topic to be slower, untested
    Will now move and publish that it is entertaining, although due to alpha, will never get to resident, so will publish after a certain time
    Started adding pathfinding to go to resident
    Added logic to tell if robot is currently entertaining and now handles the incomming message (not tested)
    Added empty check method to check value of entertainedness
    Added functionality to subscribe to entertainedness topic, however untested until someone publishes to it
    Added basic/empty entertainment Robot
    fixed dumb merge conflict, robot rotational velocity set to zero when pathplanning finished
    removed erranous debug statements
    stuff12
    fixed bad edge
    Added a hell of alot of debug statements
    Slowly getting there
    Editing code (not building)
    stops at the node
    Changed things
    Removed all dependecies on movetoresident and the associated boolean
    Implemented lock in Cargiver
    Nodes aren't persisting when added to the graph. Need to find out why.
    Still trying to figure out why EntertainmentRobot isn't being added to the graph.
    Added a bunch of debug messages, trying to figure out why EntertainmentRobot segfaults instead of moving to the Doctor.
    Actor was not telling its PathPlanner to update during goToNode()
    Reverted the generateStageName function behaviour
    added getActorName to all nodes
    can now control any robot
    Changed actor so subclasses will not request for a new lock until another robot relenquishes the lock
    Added functionality to handle the case where a robot does not get a lock or is kicked off the lock
    Removed commented code
    Fixed subscribing to wrong topic in actor.cpp to find if the child class has the lock or not
    removed unused variable
    Got entertainment robot requesting the lock and interacting with it
    finished locking implementation
    Topics and messages now set up, need to create unlock topic
    Changed Entertainedness to Morale
    Added some comments to all messages and classes.
    Set correct privacy on path planner functions, removed path planning logic from subclasses
    Copied EntertertainmentRobot stuff into Relative.
    Entertainment now returns home after entertaining
    fixed really bad brackets
    Fixed conditional in EntertainmentRobot, it was actually a variable assignment
    trying to delay entertainment stuff
    moved positions of robot and relative
    Updated entertainment robot
    removed 'kurt fix this shit' things
    Removed unused meethod in entertainment robot
    Fixed actor to wait for level change and then complete when arriving at resident
    sped up stuff
    syntax fiend
    made entertainment robot move to resident
    Moved a robot and switched a boolean
    Removed unneeded ROS_INFO
    Changed the response to interaction topic to be slower, untested
    Will now move and publish that it is entertaining, although due to alpha, will never get to resident, so will publish after a certain time
    Started adding pathfinding to go to resident
    Added logic to tell if robot is currently entertaining and now handles the incomming message (not tested)
    Added empty check method to check value of entertainedness
    Added functionality to subscribe to entertainedness topic, however untested until someone publishes to it
    Added basic/empty entertainment Robot
    added getActorName to all nodes
    Copied EntertertainmentRobot stuff into Relative.
    Added socialness subscriber logic to relative
    Adding relative files to develop
    fixed doctor
    Removed white space, removed deprecated go to resident and going to resident
    Worked on doctor's logic
    Added locking to doctor
    Fixed Doctor and Nurse
    Added logic and navigation functionality to doctor that should work when navigation is merged into develop
    Nurses are now self aware, know who they are so can act independantly
    Added call nurse random and logic
    Added two nurses and tweaked doctor's variable names
    Changed to telephone message implementation
    Added subscriber to Health for Doctor
    Added empty doctor class/robot
    fixed dumb merge conflict, robot rotational velocity set to zero when pathplanning finished
    removed erranous debug statements
    MATT FIXED THIS SHIT
    removed debug statements
    fixed bad edge
    Fixed goToPositon to actually work GO GO GO TEAM WE CAN MAKE IT GO !
    Didn't crash as much
    Added a hell of alot of debug statements
    Slowly getting there
    Editing code (not building)
    GraphSearch is now static
    Added commented code, waiting for kurt
    using new for point struct
    actor now storing location of other nodes
    defined graphsearch class - KURT AND JOSH ARE PEER PROGRAMMING
    stops at the node
    gotoPosition started - KURT HELPED
    cleaned up go to position
    Changed things
    Added alot of comments for debugging path finding
    Nodes are all added to the graph, but are not all updating their location correctly. This is due to their processes hanging. These nodes give segfaults when CTRL+Ced
    Removed redundant code from cargiver
    Removed references to Actor's locationCallback method - not needed anymore.
    Removed all dependecies on movetoresident and the associated boolean
    Removed white space, removed deprecated go to resident and going to resident
    Made all queues update path planner
    Various improvements and error catching, does not fix the fact that addNode doesn't work
    Added a bunch of debug messages, trying to figure out why EntertainmentRobot segfaults instead of moving to the Doctor.
    actors now update pathplanners correctly
    Actor was not telling its PathPlanner to update during goToNode()
    supporting changes to navigation in actor and actorspawner
    Reverted the generateStageName function behaviour
    fixed spacebar for control of robots
    Doctors and nurses now can be controlled
    Fixed Companion getActorName
    Removed verbose debug statements from Actor.cpp
    can now control any robot
    it works!
    minor edits to RCmode
    set up basis of toggling modes
    Changed actor so subclasses will not request for a new lock until another robot relenquishes the lock
    Added functionality to handle the case where a robot does not get a lock or is kicked off the lock
    Fixed subscribing to wrong topic in actor.cpp to find if the child class has the lock or not
    Added callbacks in actor so that all child classes will know if they have the lock or not without subscribing to topics
    finished locking implementation
    Topics and messages now set up, need to create unlock topic
    Made PathPlanner static, did a lot of debugging - super close to compiling!
    Do we really need this debug statement, I don't think it provides any useful information
    Added some more navigation system tests.
    Did some more debugging. /Still/ not compiling, but I'm making progress.
    Did some debugging (still a lot more to go), removed 'location' topic subscribing from Actor.
    Added RC bot
    Got keyboard listener set up on se306_p1_pkg, fixed automated ActorSpawner
    Actors now store a list of the current locations of all other Actors. This allows us to pathfind to a specific node by name instead of needing to hardcode the closest waypoint to them.
    Got time incrementing by required amount to have 30seconds real world equal 1 hour Ultron world
    Added method to PathPlanner to return the closest node to a given set of coordinates. Cannot test if this builds correctly as Actor already breaks the build at this time.
    Added some comments to all messages and classes.
    Set correct privacy on path planner functions, removed path planning logic from subclasses
    added additional links between nodes with clear paths
    Entertainment now returns home after entertaining
    Added a stopResponse function to Actor
    Fixed actor to wait for level change and then complete when arriving at resident
    added another node for in the mavmesh
    made entertainment robot move to resident
    added move to resident behaviour
    whitespace
    Forgot to give nodeDoor a name.
    Added nodeDoor. This should be the activeNode of all Visitors.
    made resident stationary
    Adding spinning to doResponse for alpha
    Removed unneeded ROS_INFO
    Will now move and publish that it is entertaining, although due to alpha, will never get to resident, so will publish after a certain time
    Created doResponse stub
    Corrected path planner to mark visited nodes as visited, fixed 4 nodes bug
    some progress made towards updating levels, not building at the moment
    Moved some robots and pathfinding nodes around to make the demonstration look better. R0 no longer walks into bed/resident/walls immediately. :)
    Make Actor's px, py and theta absolute, moved the actorlist-building script to main directory with other build scripts
    fixed bug where robots could only drive to coordinates with the same x and y
    Actor Now can go to location, going to nodes in progress
    added tf as a build dependency
    Moved publishing location functionality to its own function
    added in todo stuff for kurt to fix later
    fixed path planner, now choses correct nodes to go to
    testing path planner, still not in working state
    Implimented subscribe to locationgit status Wooopgit status!
    publishing location to location topic
    Should be able to subscribe to location topic, but hasn't been tested, but compiles
    Example logging code for checking location is coming through
    location topic created
    Corrected build order for messages to work
    change nodes to reference strings as pointers
    Implemented a mock version of StageOdom_callback for the Actor class
    Slightly tidied up some variable names in Actor, tried to send test std_msgs/String message but failed :(
    changed pathplanner to use object references rather than objects
    Changed path planning to take node inputs rather than names, nodes now have a position
    commented out all new code that broke the build. need to check as we uncomment to make sure it all works
    Commented out initial broken message references for now
    Attempted to create a topic and publish location data to it
    Added functionality for subscribing, however awaiting publishing implimentation to test if it works or not
    Put message files into a separate package and made R0 advertise with the location message as a test
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Made it a little easier to add new robots
    Refactored a bit (a lot)
    attempting to fix inheritance issue. still not fixed
    Updated things
    commented out some specific example code
    Changed things, small bugs
    renamed variables to begin publishing functionality
    Changed mistakes
    Added functionality to init and loop
    Added another hook method for initial setup of the robot
    Added while loop and hook to Actor
    Created Human and Robot (Actor subclasses with no functionality). Made R0 extend Robot rather than Actor.
    Removed class definition in Actor.cpp, overriding mainHook in R0.cpp
    Added main hook method and other methods for the class and also in the header file
    Added empty Actor class and header file
    removed erranous debug statements
    MATT FIXED THIS SHIT
    Messed around with whitespace in GraphSearch.cpp to sort edges into pairs.
    removed debug statements
    Removed debug stuff
    fixed bad edge
    Didn't crash as much
    haha
    fixed stuff i broke
    added locking to medication robot
    Added a hell of alot of debug statements
    Slowly getting there
    Actually comparing strings correctly
    GraphSearch is now static
    using new for point struct
    bedroom, livingroom, and kitchen nodes added
    Reverse path
    added a bunch more bathroom nodes
    Returns list of points
    Implemented BFS
    actually fixed merge
    added nodes
    Added findClosestPoint function
    Implemented helper methods for BFS
    implemented singleton
    kurts turn
    implemented 3 getpath methods - JOSH DID THIS
    breadth first search time
    jamie plz
    Confirmed that the closest node is correctly being detected and that paths are being correctly generated.
    Made all queues update path planner
    Nodes aren't persisting when added to the graph. Need to find out why.
    readded core navigiation files
    Made PathPlanner static, did a lot of debugging - super close to compiling!
    More debugging. Callbacks are static - need to finish making PathPlanner a singleton to get this to work.
    Did some more debugging. /Still/ not compiling, but I'm making progress.
    Did some debugging (still a lot more to go), removed 'location' topic subscribing from Actor.
    Actor now extends PathPlannerNode, soon we'll be able to pathfind to any Actor. PathPlanner now maintains its graph including the current positions of all Actors, and updates their neighbour based on current location (from location topic).
    Added method to PathPlanner to return the closest node to a given set of coordinates. Cannot test if this builds correctly as Actor already breaks the build at this time.
    fixed path planner, now choses correct nodes to go to
    change nodes to reference strings as pointers
    changed pathplanner to use object references rather than objects
    Changed path planning to take node inputs rather than names, nodes now have a position
    Path planner now returns list of nodes
    Split path planning nodes into it's own subclass
    Inital commit, started path planner using simple nodes
    controlling caregiveers
    stuff12
    A lot of changes had been made
    
    Basic functions were finished. Now caregivers take turn coming to house. Lock was finished
    Removed redundant code from cargiver
    Implemented lock in Cargiver
    Cargiver tried to move to resident
    Added caregivers again :(
    Created Caregiver. (However, moving to resident and showering are unfinished)
    added giving of food  to caregiver to functionality
    added time callback and subscriber for cooking robot
    implemented some cooking robot functionality
    added getActorName to all nodes
    refactored cooking robot, still needs major edits
    Spawned companion and cooking robots in the utility room
    Changed Entertainedness to Morale
    renamed classes and methods
    started work on other robots
    Copied EntertertainmentRobot stuff into Relative.
    Entertainment now returns home after entertaining
    Removed unused meethod in entertainment robot
    Fixed actor to wait for level change and then complete when arriving at resident
    Changed the response to interaction topic to be slower, untested
    Will now move and publish that it is entertaining, although due to alpha, will never get to resident, so will publish after a certain time
    Started adding pathfinding to go to resident
    Added logic to tell if robot is currently entertaining and now handles the incomming message (not tested)
    Added empty check method to check value of entertainedness
    Added functionality to subscribe to entertainedness topic, however untested until someone publishes to it
    Added basic/empty entertainment Robot
    Added KeyboardListener::isKeyTapped
    Got keyboard listener set up on se306_p1_pkg, fixed automated ActorSpawner
    Now broadcasting key codes on upstagekeyinput
    Removed white space, removed deprecated go to resident and going to resident
    Added KeyboardListener::isKeyTapped
    Got keyboard listener set up on se306_p1_pkg, fixed automated ActorSpawner
    Now broadcasting key codes on upstagekeyinput
    Fixed tests
    Renamed test files for consistency.
    Fixed tests not running.
    Commented out some code temporarily while I fix it so that develop is not broken.
    Added some tests for the navigation system.
    added more resident tests
    added some files
    Commented out tests because of changes to Resident
    Reduced the amount of code in getNewLevel
    Added a test to test getNewLevel in resident
    Added files for running tests on Jenkins
    Started adding tests for Cargiver
    Commented the use of TEST_F
    utest.cpp now correctly demonstrates a test using the SetUp and TearDown functions to start and stop roscore
    Removed redundant tests.
    Tests using callbacks actually work
    Initial state of gtest, working test script. But not actually testing our code
    Dog
    added some files
    Added multiple tests for nearest nodes in graph_search_test
    Added a small test suite for some core graph search behaviour
    Uncommented a pathplanner test
    Fixed tests
    Added some more navigation system tests.
    Renamed test files for consistency.
    Added some tests for the navigation system.
    finished locking implementation
    locking coming along nicely
    Nurses are now self aware, know who they are so can act independantly
    Added Fitness.msg and Hygiene.msg
    corrected time msg file
    Preparing to broadcast KeyInput messages
    Removed thirst message as we are not going to use it any more
    Adding telephone msg
    Changed Entertainedness to Morale
    Added an empty tests file for msg_pkg and added msg_pkg tests to the test script.
    some progress made towards updating levels, not building at the moment
    Put message files into a separate package and made R0 advertise with the location message as a test
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    updated toms / chaoyi's email address
    Put message files into a separate package and made R0 advertise with the location message as a test
    Cleaned up comments and dependencies in package.xml. Added additional info.
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Added some comments to all messages and classes.
    some progress made towards updating levels, not building at the moment
    Put message files into a separate package and made R0 advertise with the location message as a test
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Refactored a bit (a lot)
    Added all specified message types. Some fields may need to be changed later depending on system functionality (int8 to int32 etc).
    Nurses are now self aware, know who they are so can act independantly
    Topics and messages now set up, need to create unlock topic
    locking coming along nicely
    Added morale message file
    Added message Hygiene file
    Added some comments to all messages and classes.
    Put message files into a separate package and made R0 advertise with the location message as a test
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Refactored a bit (a lot)
    Added all specified message types. Some fields may need to be changed later depending on system functionality (int8 to int32 etc).
    Create Fitness.msg
    Added some comments to all messages and classes.
    Put message files into a separate package and made R0 advertise with the location message as a test
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Refactored a bit (a lot)
    Added all specified message types. Some fields may need to be changed later depending on system functionality (int8 to int32 etc).
    Adding message Telephone file
    Added some comments to all messages and classes.
    started work on visitor
    Put message files into a separate package and made R0 advertise with the location message as a test
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Refactored a bit (a lot)
    Added all specified message types. Some fields may need to be changed later depending on system functionality (int8 to int32 etc).
    Topics and messages now set up, need to create unlock topic
    Locking almost implemented
    locking coming along nicely
    finished locking implementation
    Added day into msg_pkg/Time
    time now publishing
    corrected time msg file
    Added time msg
    Added some comments to all messages and classes.
    started work on visitor
    Put message files into a separate package and made R0 advertise with the location message as a test
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Refactored a bit (a lot)
    Added all specified message types. Some fields may need to be changed later depending on system functionality (int8 to int32 etc).
    Added some comments to all messages and classes.
    started work on visitor
    Changed Location.msg back to float64 for its positional data rather than double - ROS has no built-in double keyword.
    Attempted to create a topic and publish location data to it
    Put message files into a separate package and made R0 advertise with the location message as a test
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Refactored a bit (a lot)
    Added all specified message types. Some fields may need to be changed later depending on system functionality (int8 to int32 etc).
    Added some comments to all messages and classes.
    some progress made towards updating levels, not building at the moment
    Put message files into a separate package and made R0 advertise with the location message as a test
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Refactored a bit (a lot)
    Added all specified message types. Some fields may need to be changed later depending on system functionality (int8 to int32 etc).
    Added some comments to all messages and classes.
    Put message files into a separate package and made R0 advertise with the location message as a test
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Refactored a bit (a lot)
    Added all specified message types. Some fields may need to be changed later depending on system functionality (int8 to int32 etc).
    Now broadcasting key codes on upstagekeyinput
    Preparing to broadcast KeyInput messages
    Visualisation: created "UltronScale" - a dynamically-scaling ui element. Should look okay
    Visualisation: now loading TGA files for fonts
    Visualisation: working on text and font loading
    Visualisation: displaying textures now works
    Visualisation: Loading BMP (sort of) works
    Visualisation: loading OpenGL >1.3 stuff
    Visualisation: started setting up 2D ortho drawing
    Visualisation: quaternions implemented, set up a point for configuring renderer states for 2D and 3D.
    Visualisation: started setting up environment file to load
    Continued working on visualisation asset loader, fixed bug in build script that may have been the result of a bad merge at some point
    Set up a nice clean architecture for loading different resources in a unified way for visualisation
    Preparing resource manager for visualisation
    Preparing to broadcast KeyInput messages
    Cleaned up visualisation folder hierarchy a bit
    Started setting up renderer for visualisation
    Began working on visualisation/keyboard input. Currently just a pink window that detects keystrokes
    Began working on visualisation/keyboard input. Currently just a pink window that detects keystrokes
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Changed folder name and where it is used in the scripts NOTE: delete your local build folder and rebuild
    Added makefile so that robot source is built
    Removed all the extra Mac files from initial commit
    inital commit of skeleton code
    Began working on visualisation/keyboard input. Currently just a pink window that detects keystrokes
    Simplified the process of adding actors further
    updated toms / chaoyi's email address
    added tf as a build dependency
    Put message files into a separate package and made R0 advertise with the location message as a test
    Cleaned up comments and dependencies in package.xml. Added additional info.
    Refactored project to use catkin packages instead of rosbuild packages - Kurt contributed to this commit too
    Visualisation: started setting up 2D ortho drawing
    Now broadcasting key codes on upstagekeyinput
    Started setting up renderer for visualisation
    Began working on visualisation/keyboard input. Currently just a pink window that detects keystrokes
    Removed build-breaking debug statement
    Renderer is now able to take tasks
    Started setting up renderer for visualisation
    Visualisation: Loading BMP (sort of) works
    Continued working on visualisation asset loader, fixed bug in build script that may have been the result of a bad merge at some point
    Set up a nice clean architecture for loading different resources in a unified way for visualisation
    Preparing resource manager for visualisation
    Now broadcasting key codes on upstagekeyinput
    Preparing to broadcast KeyInput messages
    Began working on visualisation/keyboard input. Currently just a pink window that detects keystrokes
    Visualisation: now loading TGA files for fonts
    Visualisation: working on text and font loading
    Visualisation: Loading BMP (sort of) works
    Continued working on visualisation asset loader, fixed bug in build script that may have been the result of a bad merge at some point
    Set up a nice clean architecture for loading different resources in a unified way for visualisation
    Preparing resource manager for visualisation
    Began working on visualisation/keyboard input. Currently just a pink window that detects keystrokes
    Now broadcasting key codes on upstagekeyinput
    Preparing to broadcast KeyInput messages
    Began working on visualisation/keyboard input. Currently just a pink window that detects keystrokes
    Visualisation: can now load from XML
    Visualisation: created "UltronScale" - a dynamically-scaling ui element. Should look okay
    Added small font to visualisation
    Visualisation: font display now working as intended
    Visualisation: now loading TGA files for fonts
    Visualisation: working on text and font loading
    Visualisation: displaying textures now works
    Visualisation: Loading BMP (sort of) works
    Visualisation: started setting up 2D ortho drawing
    Visualisation: quaternions implemented, set up a point for configuring renderer states for 2D and 3D.
    Visualisation: started setting up environment file to load
    Continued working on visualisation asset loader, fixed bug in build script that may have been the result of a bad merge at some point
    Set up a nice clean architecture for loading different resources in a unified way for visualisation
    Now broadcasting key codes on upstagekeyinput
    Cleaned up visualisation folder hierarchy a bit
    Renderer is now able to take tasks
    Started setting up renderer for visualisation
    Began working on visualisation/keyboard input. Currently just a pink window that detects keystrokes
    Visualisation: displaying textures now works
    Visualisation: started setting up environment file to load
    Continued working on visualisation asset loader, fixed bug in build script that may have been the result of a bad merge at some point
    Set up a nice clean architecture for loading different resources in a unified way for visualisation
    Preparing resource manager for visualisation
    Visualisation: now loading TGA files for fonts
    Visualisation: working on text and font loading
    Visualisation: Loading BMP (sort of) works
    Continued working on visualisation asset loader, fixed bug in build script that may have been the result of a bad merge at some point
    Set up a nice clean architecture for loading different resources in a unified way for visualisation
    Preparing resource manager for visualisation
    Visualisation: started adding release assets
    Visualisation: now loading TGA files for fonts
    Visualisation: working on text and font loading
    Visualisation: Loading BMP (sort of) works
    Visualisation: loading configuration from file started
    Continued working on visualisation asset loader, fixed bug in build script that may have been the result of a bad merge at some point
    Started setting up renderer for visualisation
    Preparing resource manager for visualisation
    Visualisation: created "UltronScale" - a dynamically-scaling ui element. Should look okay
    Visualisation: started setting up environment file to load
    Visualisation: started setting up 2D ortho drawing
    Continued working on visualisation asset loader, fixed bug in build script that may have been the result of a bad merge at some point
    Made window smaller so it's less intrusive until there's something to put it in
    Started setting up renderer for visualisation
    Began working on visualisation/keyboard input. Currently just a pink window that detects keystrokes
    Now broadcasting key codes on upstagekeyinput
    Preparing resource manager for visualisation
    Continued working on visualisation asset loader, fixed bug in build script that may have been the result of a bad merge at some point
    Started setting up renderer for visualisation
    Visualisation: XML parser now creates text nodes, and a bug with attributes was fixed
    Continued working on visualisation asset loader, fixed bug in build script that may have been the result of a bad merge at some point
    Preparing to broadcast KeyInput messages
    Cleaned up visualisation folder hierarchy a bit
    Visualisation: created "UltronScale" - a dynamically-scaling ui element. Should look okay
    Visualisation: started setting up environment file to load
    Visualisation: started setting up 2D ortho drawing
    Visualisation: started setting up 2D ortho drawing
    Visualisation: started setting up 2D ortho drawing
    Visualisation: started setting up 2D ortho drawing
    Visualisation: displaying textures now works
    Visualisation: removed debug statements from BMP loader - turns out it was working fine, I was just checking it wrong
    Visualisation: Loading BMP (sort of) works
    Continued working on visualisation asset loader, fixed bug in build script that may have been the result of a bad merge at some point
    Continued working on visualisation asset loader, fixed bug in build script that may have been the result of a bad merge at some point
    Set up a nice clean architecture for loading different resources in a unified way for visualisation
    Visualisation: now loading TGA files for fonts
    Visualisation: working on text and font loading
    Visualisation: started adding release assets
    Added small font to visualisation
    Visualisation: now loading TGA files for fonts
    Visualisation: Finished by adding prompts about how to use the tool
    Visualisation: can now load from XML
    Visualisation: loading configuration from file started
    Visualisation: started setting up environment file to load
    Continued working on visualisation asset loader, fixed bug in build script that may have been the result of a bad merge at some point
    Set up a nice clean architecture for loading different resources in a unified way for visualisation
    Visualisation: quaternions implemented, set up a point for configuring renderer states for 2D and 3D.
    Visualisation: quaternions implemented, set up a point for configuring renderer states for 2D and 3D.
    Visualisation: working on text and font loading
    Visualisation: progress commit
    Visualisation: Finished by adding prompts about how to use the tool
    Visualisation: can now load from XML
    Visualisation: now loading TGA files for fonts
    Visualisation: working on text and font loading
    Visualisation: Loading BMP (sort of) works
    Visualisation: loading OpenGL >1.3 stuff
    Visualisation: started setting up environment file to load
    Visualisation: now loading TGA files for fonts
    Visualisation: displaying textures now works
    Visualisation: started setting up 2D ortho drawing
    Cleaned up visualisation folder hierarchy a bit
    Started setting up renderer for visualisation
    Visualisation: working on text and font loading
    Visualisation: progress commit
    Visualisation: displaying textures now works
    Visualisation: Loading BMP (sort of) works
    Visualisation: started setting up 2D ortho drawing
    Visualisation: Finished by adding prompts about how to use the tool
    Visualisation: started adding release assets
    Visualisation: can now load from XML
    Visualisation: font display now working as intended
    Visualisation: now loading TGA files for fonts
    Visualisation: working on text and font loading
    Visualisation: now loading TGA files for fonts
    Visualisation: displaying textures now works
    Visualisation: Loading BMP (sort of) works
    Visualisation: started setting up 2D ortho drawing
    Visualisation: can now load from XML
    Visualisation: created "UltronScale" - a dynamically-scaling ui element. Should look okay
    Added small font to visualisation
    Visualisation: now loading TGA files for fonts
    Visualisation: displaying textures now works
    Visualisation: Loading BMP (sort of) works
    Visualisation: loading OpenGL >1.3 stuff
    Visualisation: started setting up 2D ortho drawing
    Visualisation: quaternions implemented, set up a point for configuring renderer states for 2D and 3D.
    Visualisation: started setting up environment file to load
    Cleaned up visualisation folder hierarchy a bit
    Renderer is now able to take tasks
    Started setting up renderer for visualisation
    Visualisation: started setting up environment file to load
    Cleaned up visualisation folder hierarchy a bit
    Started setting up renderer for visualisation
    Visualisation: now loading TGA files for fonts
    Visualisation: displaying textures now works
    Visualisation: Loading BMP (sort of) works
    Visualisation: started setting up 2D ortho drawing
    Visualisation: started setting up environment file to load
    Cleaned up visualisation folder hierarchy a bit
    Renderer is now able to take tasks
    Started setting up renderer for visualisation
    Visualisation: can now load from XML
    Visualisation: created "UltronScale" - a dynamically-scaling ui element. Should look okay
    Visualisation: created "UltronScale" - a dynamically-scaling ui element. Should look okay
    Visualisation: created "UltronScale" - a dynamically-scaling ui element. Should look okay
    Visualisation: loading OpenGL >1.3 stuff
    Visualisation: loading OpenGL >1.3 stuff
    Visualisation: loading OpenGL >1.3 stuff
    Visualisation: loading OpenGL >1.3 stuff
    Visualisation: loading OpenGL >1.3 stuff
    Visualisation: now loading TGA files for fonts
    Visualisation: started setting up environment file to load
    Cleaned up visualisation folder hierarchy a bit
    Renderer is now able to take tasks
    Started setting up renderer for visualisation
    Visualisation: displaying textures now works
    Visualisation: started setting up 2D ortho drawing
    Visualisation: displaying textures now works
    Got keyboard listener set up on se306_p1_pkg, fixed automated ActorSpawner
    Now broadcasting key codes on upstagekeyinput
    Preparing to broadcast KeyInput messages
    Visualisation: displaying textures now works
    Now broadcasting key codes on upstagekeyinput
    Preparing to broadcast KeyInput messages
    Visualisation: progress commit
    Visualisation: progress commit
    Visualisation: displaying textures now works
    Visualisation: Loading BMP (sort of) works
    Visualisation: displaying textures now works
    Visualisation: Loading BMP (sort of) works
    Visualisation: loading configuration from file started
    Visualisation: XML parser now creates text nodes, and a bug with attributes was fixed
    Visualisation: XML parser now gets attributes
    Visualisation: XML parser now constructs a hierarchy, but does not get attributes yet
    Visualisation: XML parser now recognises tag types
    Continued working on visualisation asset loader, fixed bug in build script that may have been the result of a bad merge at some point
    Visualisation: can now load from XML
    Added small font to visualisation
    Visualisation: working on text and font loading
    Visualisation: loading configuration from file started
    Visualisation: XML parser now creates text nodes, and a bug with attributes was fixed
    Visualisation: XML parser now gets attributes
    Visualisation: XML parser now constructs a hierarchy, but does not get attributes yet
    Visualisation: XML parser now recognises tag types
    Continued working on visualisation asset loader, fixed bug in build script that may have been the result of a bad merge at some point
    Visualisation: Finished by adding prompts about how to use the tool
    Visualisation: started adding release assets
    Visualisation: can now load from XML
    Added small font to visualisation
    Visualisation: now loading TGA files for fonts
    Visualisation: progress commit
    Visualisation: quaternions implemented, set up a point for configuring renderer states for 2D and 3D.
    Visualisation: started setting up environment file to load
    Continued working on visualisation asset loader, fixed bug in build script that may have been the result of a bad merge at some point
    Visualisation: created "UltronScale" - a dynamically-scaling ui element. Should look okay
    Visualisation: Finished by adding prompts about how to use the tool
    Visualisation: started adding release assets
    Visualisation: font display now working as intended
    Visualisation: now loading TGA files for fonts
    Visualisation: working on text and font loading
    Continued working on visualisation asset loader, fixed bug in build script that may have been the result of a bad merge at some point
    Added small font to visualisation
    Visualisation: now loading TGA files for fonts
    Visualisation: Finished by adding prompts about how to use the tool
    Visualisation: started adding release assets
    Added small font to visualisation
    Visualisation: Finished by adding prompts about how to use the tool
    Visualisation: Finished by adding prompts about how to use the tool
    Visualisation: started adding release assets
