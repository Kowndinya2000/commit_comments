    Initial-checkin for ON2 Software AVC/H264 decoder
    
    o when neon is present, the performance gain of On2 AVC software decoder
      over PV software decoder is more than 30%.
    
    o In addition, it fixes some known PV software decoder issues like missing
      output frames
    
    o allow both pv and on2 software avc to be available for easy comparision
    
    o change output frames from 8 to 16
    
    Change-Id: I567ad1842025ead7092f0c47e3513d6d9ca232dd
    Initial-checkin for ON2 Software AVC/H264 decoder
    
    o when neon is present, the performance gain of On2 AVC software decoder
      over PV software decoder is more than 30%.
    
    o In addition, it fixes some known PV software decoder issues like missing
      output frames
    
    o allow both pv and on2 software avc to be available for easy comparision
    
    o change output frames from 8 to 16
    
    Change-Id: I567ad1842025ead7092f0c47e3513d6d9ca232dd
    Initial-checkin for ON2 Software AVC/H264 decoder
    
    o when neon is present, the performance gain of On2 AVC software decoder
      over PV software decoder is more than 30%.
    
    o In addition, it fixes some known PV software decoder issues like missing
      output frames
    
    o allow both pv and on2 software avc to be available for easy comparision
    
    o change output frames from 8 to 16
    
    Change-Id: I567ad1842025ead7092f0c47e3513d6d9ca232dd
    Initial checkins of the mpeg4 and h263 software decoders based on PV
    Initial check in of AMR (NB and WB) decoders based on PV source code.
    Initial checkin of stagefright MP3 audio decoder based on PV source code.
    Initial software encoder checkins
    
    Change-Id: I27f387db23594e46384c4eb3a0093ce220bb6b60
    Initial check in of AMR (NB and WB) decoders based on PV source code.
    Initial checkin of stagefright MP3 audio decoder based on PV source code.
    Initial checkin of software AVC video decoder based on PV source code.
    Initial check in of AMR (NB and WB) decoders based on PV source code.
    Initial checkin of stagefright MP3 audio decoder based on PV source code.
    Initial checkin of stagefright MP3 audio decoder based on PV source code.
    Initial software encoder checkins
    
    Change-Id: I27f387db23594e46384c4eb3a0093ce220bb6b60
    Initial check in of AMR (NB and WB) decoders based on PV source code.
    Initial checkin of stagefright MP3 audio decoder based on PV source code.
    Initial check in of AMR (NB and WB) decoders based on PV source code.
    Initial checkin of stagefright MP3 audio decoder based on PV source code.
    Initial check in of AMR (NB and WB) decoders based on PV source code.
    Initial checkin of stagefright MP3 audio decoder based on PV source code.
    Documentation on pipes
    
    Change-Id: I3de496c7db026c50dcb6bc577741bb65d08e7c9d
    Documentation on pipes
    
    Change-Id: I3de496c7db026c50dcb6bc577741bb65d08e7c9d
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Non-blocking audio I/O interface, WIP
    
    Yet another abstraction similar to AudioTrack::Buffer and AudioBufferProvider,
    but with support for streaming, non-blocking, and eventually PTS.
    
    This is intended to be used as follows:
     - primary HAL output stream implements a Sink
     - primary HAL input stream implements a Source
     - Pipe implements a Sink
     - PipeReader implements a Source or TimedSource (not shown yet),
       which supports "read at PTS"
     - fast AudioTrack on server side will implement a Source using cblk
     - normal AudioTrack on server side will not be changed initially
     - fast AudioRecord on server side will implement a Sink using cblk
     - normal AudioRecord on server side will not be changed initially
     - fast mixer thread will read from Sources and write to a Sink,
       or (unlikely) implement a Source and multiple Sinks
     - Visualization and PCM logger will read from Source or TimedSource
     - A2DP normal mixer will be connected directly to its output stream
       and there will be a kind of OutputTrack for duplication that will
       read from a Sink with non-blocking write fed by the fast mixer.
    
    Patch set 3 changes:
     - Add more implementations of NBAIO interfaces:
       added SourceAudioBufferProvider, MonoPipe, MonoPipeReader.
     - Added Format_sampleRate and Format_channelCount.
     - Extract out the roundUp() method.
     - Respond to most comments from previous code review.
     - The new classes are untested.
    
    Patch set 4 changes:
     - Fix bugs in MonoPipe::write() and MonoPipeReader::read()
     - Fix bug initializing mFrameBitShift too early
     - renamed roundUp() to roundup()
     - Fix Android.mk
     - Add LOG_TAG an LOG_NDEBUG, use ALOG_ASSERT and utils/Log.h instead of assert
     - Fix build warnings
     - Move constructor and destructor bodies from .h to .cpp
     - Line length 100
     - Following naming conventions for #include double-include protector macros
     - Include what you use
     - More NBAIO logging
     - MonoPipe write can be blocking
    
    Patch set 5 changes:
     - Address code review comments
     - Use a static library so unused implementations don't take memory
     - Comment out libsndfile dependency
     - Remove debugging LOGV and LOG_NDEBUG
    
    Patch set 6 changes (would be 6 at old location, actually 2 at new location):
     - Address code review comments on patchset 5
     - For MonoPipe, allow the full pipe to be used, no need to omit one slot
     - Don't do atomic releasing stores unless needed
    
    Still to do:
     - I'm not happy with the Pipe class names
     - Update build/ for new static library?
    
    Change-Id: Ie6c61f05ce06b676b033be448a8ef9025a2ffcfd
    Factor out and speed up permission-checking code
    
    Use the caching permission check for dump to save IPC.
    
    Cache getpid() to save kernel call for other permission checks.
    
    The C runtime library getpid() can't cache due to a fork
    race condition, but we know that mediaserver doesn't fork.
    
    Don't construct String16 on the stack.
    
    Change-Id: I6be6161dae5155d39ba6ed6228e7683e67be34ed
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Non-blocking audio I/O interface, WIP
    
    Yet another abstraction similar to AudioTrack::Buffer and AudioBufferProvider,
    but with support for streaming, non-blocking, and eventually PTS.
    
    This is intended to be used as follows:
     - primary HAL output stream implements a Sink
     - primary HAL input stream implements a Source
     - Pipe implements a Sink
     - PipeReader implements a Source or TimedSource (not shown yet),
       which supports "read at PTS"
     - fast AudioTrack on server side will implement a Source using cblk
     - normal AudioTrack on server side will not be changed initially
     - fast AudioRecord on server side will implement a Sink using cblk
     - normal AudioRecord on server side will not be changed initially
     - fast mixer thread will read from Sources and write to a Sink,
       or (unlikely) implement a Source and multiple Sinks
     - Visualization and PCM logger will read from Source or TimedSource
     - A2DP normal mixer will be connected directly to its output stream
       and there will be a kind of OutputTrack for duplication that will
       read from a Sink with non-blocking write fed by the fast mixer.
    
    Patch set 3 changes:
     - Add more implementations of NBAIO interfaces:
       added SourceAudioBufferProvider, MonoPipe, MonoPipeReader.
     - Added Format_sampleRate and Format_channelCount.
     - Extract out the roundUp() method.
     - Respond to most comments from previous code review.
     - The new classes are untested.
    
    Patch set 4 changes:
     - Fix bugs in MonoPipe::write() and MonoPipeReader::read()
     - Fix bug initializing mFrameBitShift too early
     - renamed roundUp() to roundup()
     - Fix Android.mk
     - Add LOG_TAG an LOG_NDEBUG, use ALOG_ASSERT and utils/Log.h instead of assert
     - Fix build warnings
     - Move constructor and destructor bodies from .h to .cpp
     - Line length 100
     - Following naming conventions for #include double-include protector macros
     - Include what you use
     - More NBAIO logging
     - MonoPipe write can be blocking
    
    Patch set 5 changes:
     - Address code review comments
     - Use a static library so unused implementations don't take memory
     - Comment out libsndfile dependency
     - Remove debugging LOGV and LOG_NDEBUG
    
    Patch set 6 changes (would be 6 at old location, actually 2 at new location):
     - Address code review comments on patchset 5
     - For MonoPipe, allow the full pipe to be used, no need to omit one slot
     - Don't do atomic releasing stores unless needed
    
    Still to do:
     - I'm not happy with the Pipe class names
     - Update build/ for new static library?
    
    Change-Id: Ie6c61f05ce06b676b033be448a8ef9025a2ffcfd
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Non-blocking audio I/O interface, WIP
    
    Yet another abstraction similar to AudioTrack::Buffer and AudioBufferProvider,
    but with support for streaming, non-blocking, and eventually PTS.
    
    This is intended to be used as follows:
     - primary HAL output stream implements a Sink
     - primary HAL input stream implements a Source
     - Pipe implements a Sink
     - PipeReader implements a Source or TimedSource (not shown yet),
       which supports "read at PTS"
     - fast AudioTrack on server side will implement a Source using cblk
     - normal AudioTrack on server side will not be changed initially
     - fast AudioRecord on server side will implement a Sink using cblk
     - normal AudioRecord on server side will not be changed initially
     - fast mixer thread will read from Sources and write to a Sink,
       or (unlikely) implement a Source and multiple Sinks
     - Visualization and PCM logger will read from Source or TimedSource
     - A2DP normal mixer will be connected directly to its output stream
       and there will be a kind of OutputTrack for duplication that will
       read from a Sink with non-blocking write fed by the fast mixer.
    
    Patch set 3 changes:
     - Add more implementations of NBAIO interfaces:
       added SourceAudioBufferProvider, MonoPipe, MonoPipeReader.
     - Added Format_sampleRate and Format_channelCount.
     - Extract out the roundUp() method.
     - Respond to most comments from previous code review.
     - The new classes are untested.
    
    Patch set 4 changes:
     - Fix bugs in MonoPipe::write() and MonoPipeReader::read()
     - Fix bug initializing mFrameBitShift too early
     - renamed roundUp() to roundup()
     - Fix Android.mk
     - Add LOG_TAG an LOG_NDEBUG, use ALOG_ASSERT and utils/Log.h instead of assert
     - Fix build warnings
     - Move constructor and destructor bodies from .h to .cpp
     - Line length 100
     - Following naming conventions for #include double-include protector macros
     - Include what you use
     - More NBAIO logging
     - MonoPipe write can be blocking
    
    Patch set 5 changes:
     - Address code review comments
     - Use a static library so unused implementations don't take memory
     - Comment out libsndfile dependency
     - Remove debugging LOGV and LOG_NDEBUG
    
    Patch set 6 changes (would be 6 at old location, actually 2 at new location):
     - Address code review comments on patchset 5
     - For MonoPipe, allow the full pipe to be used, no need to omit one slot
     - Don't do atomic releasing stores unless needed
    
    Still to do:
     - I'm not happy with the Pipe class names
     - Update build/ for new static library?
    
    Change-Id: Ie6c61f05ce06b676b033be448a8ef9025a2ffcfd
    Add NBAIO support for more sample rates
    
    This will be used for audio capture but it is not scalable,
    and we need a better approach in the long term.
    
    Change-Id: I8b12f6b64a3fd8e8a8c425c82574260fe8ffbed6
    Add NBAIO support for more sample rates
    
    This will be used for audio capture but it is not scalable,
    and we need a better approach in the long term.
    
    Change-Id: I8b12f6b64a3fd8e8a8c425c82574260fe8ffbed6
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    AudioFlinger: fix timed audio
    
    (cherry picked from commit e20ac92c564a2f4e8123885807abdf0a78de0dd7)
    
    > AudioFlinger: fix timed audio
    >
    > Addresses Bug 6900517.
    >
    > Finish up support for timed audio in the new FastMixer world.  Pay special
    > attention to remaining lock-less and voluntary yield free on the FastMixer
    > thread.  This fixes audio playback for Q on JB.
    >
    > Change-Id: Iaf815e58a1b1d0a0190051794bec8dc5c9231785
    > Signed-off-by: John Grossman <johngro@google.com>
    
    Change-Id: I9bd687acc345a05867af48e71116690fdb0ce1b5
    Signed-off-by: John Grossman <johngro@google.com>
    Non-blocking audio I/O interface, WIP
    
    Yet another abstraction similar to AudioTrack::Buffer and AudioBufferProvider,
    but with support for streaming, non-blocking, and eventually PTS.
    
    This is intended to be used as follows:
     - primary HAL output stream implements a Sink
     - primary HAL input stream implements a Source
     - Pipe implements a Sink
     - PipeReader implements a Source or TimedSource (not shown yet),
       which supports "read at PTS"
     - fast AudioTrack on server side will implement a Source using cblk
     - normal AudioTrack on server side will not be changed initially
     - fast AudioRecord on server side will implement a Sink using cblk
     - normal AudioRecord on server side will not be changed initially
     - fast mixer thread will read from Sources and write to a Sink,
       or (unlikely) implement a Source and multiple Sinks
     - Visualization and PCM logger will read from Source or TimedSource
     - A2DP normal mixer will be connected directly to its output stream
       and there will be a kind of OutputTrack for duplication that will
       read from a Sink with non-blocking write fed by the fast mixer.
    
    Patch set 3 changes:
     - Add more implementations of NBAIO interfaces:
       added SourceAudioBufferProvider, MonoPipe, MonoPipeReader.
     - Added Format_sampleRate and Format_channelCount.
     - Extract out the roundUp() method.
     - Respond to most comments from previous code review.
     - The new classes are untested.
    
    Patch set 4 changes:
     - Fix bugs in MonoPipe::write() and MonoPipeReader::read()
     - Fix bug initializing mFrameBitShift too early
     - renamed roundUp() to roundup()
     - Fix Android.mk
     - Add LOG_TAG an LOG_NDEBUG, use ALOG_ASSERT and utils/Log.h instead of assert
     - Fix build warnings
     - Move constructor and destructor bodies from .h to .cpp
     - Line length 100
     - Following naming conventions for #include double-include protector macros
     - Include what you use
     - More NBAIO logging
     - MonoPipe write can be blocking
    
    Patch set 5 changes:
     - Address code review comments
     - Use a static library so unused implementations don't take memory
     - Comment out libsndfile dependency
     - Remove debugging LOGV and LOG_NDEBUG
    
    Patch set 6 changes (would be 6 at old location, actually 2 at new location):
     - Address code review comments on patchset 5
     - For MonoPipe, allow the full pipe to be used, no need to omit one slot
     - Don't do atomic releasing stores unless needed
    
    Still to do:
     - I'm not happy with the Pipe class names
     - Update build/ for new static library?
    
    Change-Id: Ie6c61f05ce06b676b033be448a8ef9025a2ffcfd
    New VHQ resampler
    
    Squashed commit of the following:
    
    commit 12b6952da9f25e94d06dd7185bce255924e7e791
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 19 15:27:26 2012 -0800
    
        fix a typo in SINC resampler that prevented tracks to be mixed
    
        we were always erasing the current mix instead of mixing into it.
    
        Change-Id: Ib229245f9e5a0d384f1727640a59e9f0469211a2
    
    commit 0019ce082df430278f14ab922e900ce33b64897d
    Author: Dave Bort <dbort@google.com>
    Date:   Tue Nov 13 01:30:32 2007 -0800
    
        Rename "TARGET" to "MODULE" in the build system.
    
        Part one of the grand renaming.
    
        API_CHANGE: Third parties may need to update their makefiles.
        Any variables with "LOCAL" and "TARGET" in their names
        should now use "MODULE" instead of "TARGET"; e.g., LOCAL_MODULE,
        LOCAL_MODULE_TAGS.
    
        PRESUBMIT=passed
        OCL=39840
    
        Change-Id: Ica9a7937d3d9552ab84db46ac6eea8a290e404fe
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit f01adc0cef0e39e75c76d9195ac26a94cac0a100
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Wed Nov 14 08:32:08 2012 -0800
    
        Fix build warnings
    
        Change-Id: Ic43bcca166a529a6431711b05a7fa21849b6a38b
    
    commit 9bb031a565c753a03d9c9397edea318947d80528
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 04:44:30 2012 -0800
    
        more optimizations...
    
        calculate the offsets from the phase differently, this happens
        to reduce the register pressure in the main loop, which in turns
        allows the compiler to generate much better code (doesn't need
        to spill a lot of stuff on the stack).
    
        this gives another 15% performance increase
    
        Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    
    commit 5a951598f31217b8cd2babd0720c9608ee17291a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 03:26:39 2012 -0800
    
        refactor code to improve neon code
    
        we want to make sure we don't transfer data from the
        neon unit to the arm register file, as this can be quite
        slow. instead we do all the calculation on the neon side
        and write the result directly to main memory.
    
        Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    
    commit b381ee9e83bc9fd18986e79c7809841514ed590e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 15:16:13 2012 -0800
    
        NEON optimized SINC resampler
    
        this currently gives us a 60% to 80% boost depending
        on the quality level selected.
    
        Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    
    commit bea077354210242ea193a50b0dbab0fedab25df3
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 5 01:51:37 2012 -0800
    
        minor cleanups
    
        Change-Id: Ia12ee4fb59e90221761bec85e6450db29197591f
    
    commit 8f4ed7decbe161a5ff38200b218f5216d80aba46
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 18:49:14 2012 -0800
    
        improve resample test
    
        - handle stereo input
        - input file can now be ommited, in this case
          a linear chirp will be used automatically
        - better usage information
    
        Change-Id: I5d62a6c26a9054a1c1a517a065b4df5a2cdcda22
    
    commit 5fcd634ea6cb4df27c495abe20f5f9b8ff55d128
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 02:03:49 2012 -0800
    
        change how we store the FIR coefficients
    
        The coefficient table is now transposed and shows
        much better its polyphase nature: we now have a FIR
        per line, each line corresponding to a phase.
    
        This doesn't change at all the results produced by
        the filter, but allows us to make slightly better
        use of the data cache and improves performance a bit
        (although not as much as I thought it would).
    
        The main benefit is that it is the first step
        before we can make much larger optimizations
        (like using NEON).
    
        Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    
    commit d652231abf4c7e2ea1fc89caae730cec1f7259a1
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 3 23:37:53 2012 -0700
    
        improve SINC resampler performance
    
        The improvement is about 60% by just tweaking a few
        things to help the compiler generate better code.
        It turns out that inlining too much stuff manually was hurting us.
    
        Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    
    commit 9dc68ef5b94c700c4ee68790e8cbb334c90a538d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Nov 1 21:03:46 2012 -0700
    
        new coefficients for the vhq resampler
    
        previous coefficients were provided by a 3rd party and didn't have a
        way to re-generate them. we're now using the 'fir' utility.
    
        the performance of the filter is virtually identical, except for
        the down-sampling case which seems slightly better now:
           It looks like both the previous and new coefficients are generating
        some sort of clipping for full-scale signals in the down-sampling case
        (although the new ones seem better), the reason for that is
        unknown (see bug: 7453062)
    
        Also updated the HQ coefficients for the down-samplers, previous ones
        were a little bit too conservative -- the new ones push the cut-off
        frequency up by about 1 KHz.
    
        Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    
    commit 38e0b8560a6fc1b7124e22e0e09a84a285182f8e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 13:51:44 2012 -0700
    
        fix SINC resampler on non ARM architectures
    
        make sure the C version of the code generates the same
        output than the ARM assemply version.
    
        Change-Id: Ide218785c35d02598b2d7278e646b1b178148698
    
    commit a1878128b182696ba508569b4d211d0dfae92463
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 12:49:07 2012 -0700
    
        fix another issue with generating FIR coefficients
    
        the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
        missing the 2*f scale factor. This explains why we were seeing
        clipping and had to manually scale the filter down.
    
        Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    
    commit 1a0fb993430acc9f601e6c538305bc407c20ac5d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:20 2012 -0700
    
        fir a typo that caused up-sampling coefficiens to be wrong
    
        up-sample coefficient were generated with a cut-off frequency of 24KHz
        intead of ~20KHz, which caused more aliasing in the audible band.
    
        also increased the attenuation to 1.3 dB on both up and down
        sampling coefficient to avoid clipping.
    
        Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    
    commit 9520ad6862bd682ad075a9d9e3e94ada9f6e58b6
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:16 2012 -0700
    
        test-resample: clip instead of overflowing
    
        Change-Id: I550e5a59e51c11e1095ca338222b094f92b96878
    
    commit ba36656300f250f7f1fdeb75149749344260e6cb
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 01:01:38 2012 -0700
    
        a test app for the resamplers
    
        Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    
    commit 056a08b9bfd33cf27228c992adc8293a56b01be8
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 14:11:01 2012 -0700
    
        reenable the cubic resampler
    
        cubic resampler was disabled because it hadn't been qualified,
        however after I did some tests, it does improve significantly
        the sound quality over the order-1 resampler, even if it is
        still quite bad.
    
        also HIGH_QUALITY resampler was partially disabled, it's now
        fully enabled. It's a big improvement over the cubic resampler
        in terms of aliasing noise (it's not as good in the pass-band).
    
        Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    
    commit 8c0241d3ff50ae85167f69b3bd369244894cfa44
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 13:48:42 2012 -0700
    
        improve SINC resampler coefficients
    
        - we increase the interpolation precision from 4 to 7 bits
        this doesn't increase CPU power required, it only increases the
        size of the filter table but significantly reduces the noise
        introduced by the quantization of the impulse response.
    
        - the parameters of the filter are set such that aliasing is
        rejected at 80 dB below 20 KHz. Because we don't use a lot of
        coefficient (to save compute power), there are quite a bit of
        attenuation in the pass-band: starting at 9KHz for the
        down-sampler (48 to 44.1), and starting at 13 KHz for the
        up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
        Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    
    commit 69e7dab2192adc1f780464146810629ebd01b145
    Author: Pixelflinger <mathias.agopian@gmail.com>
    Date:   Thu Oct 25 19:43:49 2012 -0700
    
        improve fir tool: cleanup, better default, bug fixes
    
        - all parameters can be changed on the command-line
        - added float output
        - added debug option
        - added an option to generate a polyphase filter coefficients
        - added an attenuation option in dBFS
        - added a lot of comments and references
        - fixed kaiser window parameter
    
        also the default should generate a filter with 80 dB rejection
        (of the 24 KHz aliasing) above 20 KHz and a 15 KHz transition
        band around ~20 KHz (for 48 KHz sampling rate).
        It's not very good but corresponds to the current code.
    
    commit 8347499d105a50257c18e9dac652e750b06428b1
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Mon Oct 22 17:09:27 2012 -0700
    
        Increase allowed number of VHQ resamplers to 3
    
        Bug: 7378660
        Change-Id: I69e33ca2eb4bb9bd38e2c63df62cd1130d68baf6
    
    commit f91cf3cad7f5c4d52614271c89ab468741c5d24c
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 03:04:05 2012 -0700
    
        Fix a typo that caused the high quality resampler to produce garbage
    
        the problem is that if libaudio_resampler is present, it is those
        coefficients that will always be selected, but the correct
        meta-data.
    
        Bug: 7385994
        Change-Id: Ieebeb37b4dfb62a1a051bc29fae2ce056dbc6621
    
    commit e158a9e4262a174c59469a205658bc3ca4078234
    Author: Dan Bornstein <danfuzz@google.com>
    Date:   Fri Oct 3 10:34:57 2008 -0700
    
        Manually merge change #111620 from tc3 to mainline, to keep the
    
        automerger from choking on it.
    
        p4 sync
        p4 integrate -r -b android_to_tc3 //...@111620,111620
        p4 resolve -a
        p4 resolve     # resolve a couple merge travesties
    
        PRESUBMIT=passed
        BUG=1399648
        TBR=edheyl
        OCL=111902
    
        Change-Id: I854b01553dd92bbf9c864f5a9bd51a3d665f0ac2
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b9f3c26032be7a6ea01a10d93d94826f449e68ab
    Author: Dave Bort <dbort@google.com>
    Date:   Fri Jan 18 14:51:05 2008 -0800
    
        Rename "Makefile" to "Android.mk" throughout the tree.
    
        For <http://b/issue?id=960416>.
    
        I've tested this as much as I can, but 1500 open files =
        easy to mess things up.  Please let me know if there's
        a problem rather than rolling back this change.
    
        PRESUBMIT=passed
        BUG=960416
        TBR=joeo
        OCL=46537
    
        Change-Id: I5a404caf0f398a7afa7ae7abaf2f2a1c6ab490eb
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 0c22a9a44c4103483fba1d944acf1354c5eb1617
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 23:44:25 2007 -0700
    
        Tweak the SINC resampler parameters and double the performance. It's using about 10% CPU in the worse case now.
    
        Change-Id: I50ac7e6c6702a427fa36ab6d976c507155057507
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b85e41487983ad085b859acf8251e7e54480308a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 04:34:36 2007 -0700
    
        A sinc resampler for Audioflinger. It's not enabled yet, but fully functional and apparently working. It need more "quality" tests. In the 48->44 KHz, it takes about 25% of the CPU time.
    
        Change-Id: I80eb5185e13ebdb907e0b85c49ba1272c23d60ec
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit ba3949ef17cac2ba71cc3096c413782a49c922e5
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 21:01:28 2007 -0700
    
        fix a few small typos in the FIR computation
    
        Change-Id: I6e56b514fe520f30f7487f85c64ea5d2a7c19b40
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 7474bfa7de2604021963794dddfe44985648db6a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 03:16:02 2007 -0700
    
        This is a tool to compute the the reconstruction filter coefficients for a sinc audio resampler.
    
        Change-Id: I99be2505139b8e0e7647200e1647509d4f7e6067
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    Bug: 7577965
    Change-Id: I2c84a9283a1668723bad83e1a119c849c88c3e6b
    New VHQ resampler
    
    Squashed commit of the following:
    
    commit 12b6952da9f25e94d06dd7185bce255924e7e791
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 19 15:27:26 2012 -0800
    
        fix a typo in SINC resampler that prevented tracks to be mixed
    
        we were always erasing the current mix instead of mixing into it.
    
        Change-Id: Ib229245f9e5a0d384f1727640a59e9f0469211a2
    
    commit 0019ce082df430278f14ab922e900ce33b64897d
    Author: Dave Bort <dbort@google.com>
    Date:   Tue Nov 13 01:30:32 2007 -0800
    
        Rename "TARGET" to "MODULE" in the build system.
    
        Part one of the grand renaming.
    
        API_CHANGE: Third parties may need to update their makefiles.
        Any variables with "LOCAL" and "TARGET" in their names
        should now use "MODULE" instead of "TARGET"; e.g., LOCAL_MODULE,
        LOCAL_MODULE_TAGS.
    
        PRESUBMIT=passed
        OCL=39840
    
        Change-Id: Ica9a7937d3d9552ab84db46ac6eea8a290e404fe
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit f01adc0cef0e39e75c76d9195ac26a94cac0a100
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Wed Nov 14 08:32:08 2012 -0800
    
        Fix build warnings
    
        Change-Id: Ic43bcca166a529a6431711b05a7fa21849b6a38b
    
    commit 9bb031a565c753a03d9c9397edea318947d80528
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 04:44:30 2012 -0800
    
        more optimizations...
    
        calculate the offsets from the phase differently, this happens
        to reduce the register pressure in the main loop, which in turns
        allows the compiler to generate much better code (doesn't need
        to spill a lot of stuff on the stack).
    
        this gives another 15% performance increase
    
        Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    
    commit 5a951598f31217b8cd2babd0720c9608ee17291a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 03:26:39 2012 -0800
    
        refactor code to improve neon code
    
        we want to make sure we don't transfer data from the
        neon unit to the arm register file, as this can be quite
        slow. instead we do all the calculation on the neon side
        and write the result directly to main memory.
    
        Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    
    commit b381ee9e83bc9fd18986e79c7809841514ed590e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 15:16:13 2012 -0800
    
        NEON optimized SINC resampler
    
        this currently gives us a 60% to 80% boost depending
        on the quality level selected.
    
        Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    
    commit bea077354210242ea193a50b0dbab0fedab25df3
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 5 01:51:37 2012 -0800
    
        minor cleanups
    
        Change-Id: Ia12ee4fb59e90221761bec85e6450db29197591f
    
    commit 8f4ed7decbe161a5ff38200b218f5216d80aba46
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 18:49:14 2012 -0800
    
        improve resample test
    
        - handle stereo input
        - input file can now be ommited, in this case
          a linear chirp will be used automatically
        - better usage information
    
        Change-Id: I5d62a6c26a9054a1c1a517a065b4df5a2cdcda22
    
    commit 5fcd634ea6cb4df27c495abe20f5f9b8ff55d128
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 02:03:49 2012 -0800
    
        change how we store the FIR coefficients
    
        The coefficient table is now transposed and shows
        much better its polyphase nature: we now have a FIR
        per line, each line corresponding to a phase.
    
        This doesn't change at all the results produced by
        the filter, but allows us to make slightly better
        use of the data cache and improves performance a bit
        (although not as much as I thought it would).
    
        The main benefit is that it is the first step
        before we can make much larger optimizations
        (like using NEON).
    
        Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    
    commit d652231abf4c7e2ea1fc89caae730cec1f7259a1
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 3 23:37:53 2012 -0700
    
        improve SINC resampler performance
    
        The improvement is about 60% by just tweaking a few
        things to help the compiler generate better code.
        It turns out that inlining too much stuff manually was hurting us.
    
        Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    
    commit 9dc68ef5b94c700c4ee68790e8cbb334c90a538d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Nov 1 21:03:46 2012 -0700
    
        new coefficients for the vhq resampler
    
        previous coefficients were provided by a 3rd party and didn't have a
        way to re-generate them. we're now using the 'fir' utility.
    
        the performance of the filter is virtually identical, except for
        the down-sampling case which seems slightly better now:
           It looks like both the previous and new coefficients are generating
        some sort of clipping for full-scale signals in the down-sampling case
        (although the new ones seem better), the reason for that is
        unknown (see bug: 7453062)
    
        Also updated the HQ coefficients for the down-samplers, previous ones
        were a little bit too conservative -- the new ones push the cut-off
        frequency up by about 1 KHz.
    
        Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    
    commit 38e0b8560a6fc1b7124e22e0e09a84a285182f8e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 13:51:44 2012 -0700
    
        fix SINC resampler on non ARM architectures
    
        make sure the C version of the code generates the same
        output than the ARM assemply version.
    
        Change-Id: Ide218785c35d02598b2d7278e646b1b178148698
    
    commit a1878128b182696ba508569b4d211d0dfae92463
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 12:49:07 2012 -0700
    
        fix another issue with generating FIR coefficients
    
        the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
        missing the 2*f scale factor. This explains why we were seeing
        clipping and had to manually scale the filter down.
    
        Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    
    commit 1a0fb993430acc9f601e6c538305bc407c20ac5d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:20 2012 -0700
    
        fir a typo that caused up-sampling coefficiens to be wrong
    
        up-sample coefficient were generated with a cut-off frequency of 24KHz
        intead of ~20KHz, which caused more aliasing in the audible band.
    
        also increased the attenuation to 1.3 dB on both up and down
        sampling coefficient to avoid clipping.
    
        Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    
    commit 9520ad6862bd682ad075a9d9e3e94ada9f6e58b6
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:16 2012 -0700
    
        test-resample: clip instead of overflowing
    
        Change-Id: I550e5a59e51c11e1095ca338222b094f92b96878
    
    commit ba36656300f250f7f1fdeb75149749344260e6cb
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 01:01:38 2012 -0700
    
        a test app for the resamplers
    
        Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    
    commit 056a08b9bfd33cf27228c992adc8293a56b01be8
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 14:11:01 2012 -0700
    
        reenable the cubic resampler
    
        cubic resampler was disabled because it hadn't been qualified,
        however after I did some tests, it does improve significantly
        the sound quality over the order-1 resampler, even if it is
        still quite bad.
    
        also HIGH_QUALITY resampler was partially disabled, it's now
        fully enabled. It's a big improvement over the cubic resampler
        in terms of aliasing noise (it's not as good in the pass-band).
    
        Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    
    commit 8c0241d3ff50ae85167f69b3bd369244894cfa44
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 13:48:42 2012 -0700
    
        improve SINC resampler coefficients
    
        - we increase the interpolation precision from 4 to 7 bits
        this doesn't increase CPU power required, it only increases the
        size of the filter table but significantly reduces the noise
        introduced by the quantization of the impulse response.
    
        - the parameters of the filter are set such that aliasing is
        rejected at 80 dB below 20 KHz. Because we don't use a lot of
        coefficient (to save compute power), there are quite a bit of
        attenuation in the pass-band: starting at 9KHz for the
        down-sampler (48 to 44.1), and starting at 13 KHz for the
        up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
        Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    
    commit 69e7dab2192adc1f780464146810629ebd01b145
    Author: Pixelflinger <mathias.agopian@gmail.com>
    Date:   Thu Oct 25 19:43:49 2012 -0700
    
        improve fir tool: cleanup, better default, bug fixes
    
        - all parameters can be changed on the command-line
        - added float output
        - added debug option
        - added an option to generate a polyphase filter coefficients
        - added an attenuation option in dBFS
        - added a lot of comments and references
        - fixed kaiser window parameter
    
        also the default should generate a filter with 80 dB rejection
        (of the 24 KHz aliasing) above 20 KHz and a 15 KHz transition
        band around ~20 KHz (for 48 KHz sampling rate).
        It's not very good but corresponds to the current code.
    
    commit 8347499d105a50257c18e9dac652e750b06428b1
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Mon Oct 22 17:09:27 2012 -0700
    
        Increase allowed number of VHQ resamplers to 3
    
        Bug: 7378660
        Change-Id: I69e33ca2eb4bb9bd38e2c63df62cd1130d68baf6
    
    commit f91cf3cad7f5c4d52614271c89ab468741c5d24c
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 03:04:05 2012 -0700
    
        Fix a typo that caused the high quality resampler to produce garbage
    
        the problem is that if libaudio_resampler is present, it is those
        coefficients that will always be selected, but the correct
        meta-data.
    
        Bug: 7385994
        Change-Id: Ieebeb37b4dfb62a1a051bc29fae2ce056dbc6621
    
    commit e158a9e4262a174c59469a205658bc3ca4078234
    Author: Dan Bornstein <danfuzz@google.com>
    Date:   Fri Oct 3 10:34:57 2008 -0700
    
        Manually merge change #111620 from tc3 to mainline, to keep the
    
        automerger from choking on it.
    
        p4 sync
        p4 integrate -r -b android_to_tc3 //...@111620,111620
        p4 resolve -a
        p4 resolve     # resolve a couple merge travesties
    
        PRESUBMIT=passed
        BUG=1399648
        TBR=edheyl
        OCL=111902
    
        Change-Id: I854b01553dd92bbf9c864f5a9bd51a3d665f0ac2
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b9f3c26032be7a6ea01a10d93d94826f449e68ab
    Author: Dave Bort <dbort@google.com>
    Date:   Fri Jan 18 14:51:05 2008 -0800
    
        Rename "Makefile" to "Android.mk" throughout the tree.
    
        For <http://b/issue?id=960416>.
    
        I've tested this as much as I can, but 1500 open files =
        easy to mess things up.  Please let me know if there's
        a problem rather than rolling back this change.
    
        PRESUBMIT=passed
        BUG=960416
        TBR=joeo
        OCL=46537
    
        Change-Id: I5a404caf0f398a7afa7ae7abaf2f2a1c6ab490eb
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 0c22a9a44c4103483fba1d944acf1354c5eb1617
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 23:44:25 2007 -0700
    
        Tweak the SINC resampler parameters and double the performance. It's using about 10% CPU in the worse case now.
    
        Change-Id: I50ac7e6c6702a427fa36ab6d976c507155057507
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b85e41487983ad085b859acf8251e7e54480308a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 04:34:36 2007 -0700
    
        A sinc resampler for Audioflinger. It's not enabled yet, but fully functional and apparently working. It need more "quality" tests. In the 48->44 KHz, it takes about 25% of the CPU time.
    
        Change-Id: I80eb5185e13ebdb907e0b85c49ba1272c23d60ec
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit ba3949ef17cac2ba71cc3096c413782a49c922e5
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 21:01:28 2007 -0700
    
        fix a few small typos in the FIR computation
    
        Change-Id: I6e56b514fe520f30f7487f85c64ea5d2a7c19b40
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 7474bfa7de2604021963794dddfe44985648db6a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 03:16:02 2007 -0700
    
        This is a tool to compute the the reconstruction filter coefficients for a sinc audio resampler.
    
        Change-Id: I99be2505139b8e0e7647200e1647509d4f7e6067
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    Bug: 7577965
    Change-Id: I2c84a9283a1668723bad83e1a119c849c88c3e6b
    Manually merge change #111620 from tc3 to mainline, to keep the
    
    automerger from choking on it.
    
    p4 sync
    p4 integrate -r -b android_to_tc3 //...@111620,111620
    p4 resolve -a
    p4 resolve     # resolve a couple merge travesties
    
    PRESUBMIT=passed
    BUG=1399648
    TBR=edheyl
    OCL=111902
    
    Change-Id: I854b01553dd92bbf9c864f5a9bd51a3d665f0ac2
    Signed-off-by: Glenn Kasten <gkasten@google.com>
    Rename "Makefile" to "Android.mk" throughout the tree.
    
    For <http://b/issue?id=960416>.
    
    I've tested this as much as I can, but 1500 open files =
    easy to mess things up.  Please let me know if there's
    a problem rather than rolling back this change.
    
    PRESUBMIT=passed
    BUG=960416
    TBR=joeo
    OCL=46537
    
    Change-Id: I5a404caf0f398a7afa7ae7abaf2f2a1c6ab490eb
    Signed-off-by: Glenn Kasten <gkasten@google.com>
    Rename "TARGET" to "MODULE" in the build system.
    
    Part one of the grand renaming.
    
    API_CHANGE: Third parties may need to update their makefiles.
    Any variables with "LOCAL" and "TARGET" in their names
    should now use "MODULE" instead of "TARGET"; e.g., LOCAL_MODULE,
    LOCAL_MODULE_TAGS.
    
    PRESUBMIT=passed
    OCL=39840
    
    Change-Id: Ica9a7937d3d9552ab84db46ac6eea8a290e404fe
    Signed-off-by: Glenn Kasten <gkasten@google.com>
    This is a tool to compute the the reconstruction filter coefficients for a sinc audio resampler.
    
    Change-Id: I99be2505139b8e0e7647200e1647509d4f7e6067
    Signed-off-by: Glenn Kasten <gkasten@google.com>
    New VHQ resampler
    
    Squashed commit of the following:
    
    commit 12b6952da9f25e94d06dd7185bce255924e7e791
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 19 15:27:26 2012 -0800
    
        fix a typo in SINC resampler that prevented tracks to be mixed
    
        we were always erasing the current mix instead of mixing into it.
    
        Change-Id: Ib229245f9e5a0d384f1727640a59e9f0469211a2
    
    commit 0019ce082df430278f14ab922e900ce33b64897d
    Author: Dave Bort <dbort@google.com>
    Date:   Tue Nov 13 01:30:32 2007 -0800
    
        Rename "TARGET" to "MODULE" in the build system.
    
        Part one of the grand renaming.
    
        API_CHANGE: Third parties may need to update their makefiles.
        Any variables with "LOCAL" and "TARGET" in their names
        should now use "MODULE" instead of "TARGET"; e.g., LOCAL_MODULE,
        LOCAL_MODULE_TAGS.
    
        PRESUBMIT=passed
        OCL=39840
    
        Change-Id: Ica9a7937d3d9552ab84db46ac6eea8a290e404fe
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit f01adc0cef0e39e75c76d9195ac26a94cac0a100
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Wed Nov 14 08:32:08 2012 -0800
    
        Fix build warnings
    
        Change-Id: Ic43bcca166a529a6431711b05a7fa21849b6a38b
    
    commit 9bb031a565c753a03d9c9397edea318947d80528
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 04:44:30 2012 -0800
    
        more optimizations...
    
        calculate the offsets from the phase differently, this happens
        to reduce the register pressure in the main loop, which in turns
        allows the compiler to generate much better code (doesn't need
        to spill a lot of stuff on the stack).
    
        this gives another 15% performance increase
    
        Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    
    commit 5a951598f31217b8cd2babd0720c9608ee17291a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 03:26:39 2012 -0800
    
        refactor code to improve neon code
    
        we want to make sure we don't transfer data from the
        neon unit to the arm register file, as this can be quite
        slow. instead we do all the calculation on the neon side
        and write the result directly to main memory.
    
        Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    
    commit b381ee9e83bc9fd18986e79c7809841514ed590e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 15:16:13 2012 -0800
    
        NEON optimized SINC resampler
    
        this currently gives us a 60% to 80% boost depending
        on the quality level selected.
    
        Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    
    commit bea077354210242ea193a50b0dbab0fedab25df3
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 5 01:51:37 2012 -0800
    
        minor cleanups
    
        Change-Id: Ia12ee4fb59e90221761bec85e6450db29197591f
    
    commit 8f4ed7decbe161a5ff38200b218f5216d80aba46
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 18:49:14 2012 -0800
    
        improve resample test
    
        - handle stereo input
        - input file can now be ommited, in this case
          a linear chirp will be used automatically
        - better usage information
    
        Change-Id: I5d62a6c26a9054a1c1a517a065b4df5a2cdcda22
    
    commit 5fcd634ea6cb4df27c495abe20f5f9b8ff55d128
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 02:03:49 2012 -0800
    
        change how we store the FIR coefficients
    
        The coefficient table is now transposed and shows
        much better its polyphase nature: we now have a FIR
        per line, each line corresponding to a phase.
    
        This doesn't change at all the results produced by
        the filter, but allows us to make slightly better
        use of the data cache and improves performance a bit
        (although not as much as I thought it would).
    
        The main benefit is that it is the first step
        before we can make much larger optimizations
        (like using NEON).
    
        Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    
    commit d652231abf4c7e2ea1fc89caae730cec1f7259a1
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 3 23:37:53 2012 -0700
    
        improve SINC resampler performance
    
        The improvement is about 60% by just tweaking a few
        things to help the compiler generate better code.
        It turns out that inlining too much stuff manually was hurting us.
    
        Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    
    commit 9dc68ef5b94c700c4ee68790e8cbb334c90a538d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Nov 1 21:03:46 2012 -0700
    
        new coefficients for the vhq resampler
    
        previous coefficients were provided by a 3rd party and didn't have a
        way to re-generate them. we're now using the 'fir' utility.
    
        the performance of the filter is virtually identical, except for
        the down-sampling case which seems slightly better now:
           It looks like both the previous and new coefficients are generating
        some sort of clipping for full-scale signals in the down-sampling case
        (although the new ones seem better), the reason for that is
        unknown (see bug: 7453062)
    
        Also updated the HQ coefficients for the down-samplers, previous ones
        were a little bit too conservative -- the new ones push the cut-off
        frequency up by about 1 KHz.
    
        Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    
    commit 38e0b8560a6fc1b7124e22e0e09a84a285182f8e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 13:51:44 2012 -0700
    
        fix SINC resampler on non ARM architectures
    
        make sure the C version of the code generates the same
        output than the ARM assemply version.
    
        Change-Id: Ide218785c35d02598b2d7278e646b1b178148698
    
    commit a1878128b182696ba508569b4d211d0dfae92463
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 12:49:07 2012 -0700
    
        fix another issue with generating FIR coefficients
    
        the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
        missing the 2*f scale factor. This explains why we were seeing
        clipping and had to manually scale the filter down.
    
        Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    
    commit 1a0fb993430acc9f601e6c538305bc407c20ac5d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:20 2012 -0700
    
        fir a typo that caused up-sampling coefficiens to be wrong
    
        up-sample coefficient were generated with a cut-off frequency of 24KHz
        intead of ~20KHz, which caused more aliasing in the audible band.
    
        also increased the attenuation to 1.3 dB on both up and down
        sampling coefficient to avoid clipping.
    
        Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    
    commit 9520ad6862bd682ad075a9d9e3e94ada9f6e58b6
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:16 2012 -0700
    
        test-resample: clip instead of overflowing
    
        Change-Id: I550e5a59e51c11e1095ca338222b094f92b96878
    
    commit ba36656300f250f7f1fdeb75149749344260e6cb
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 01:01:38 2012 -0700
    
        a test app for the resamplers
    
        Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    
    commit 056a08b9bfd33cf27228c992adc8293a56b01be8
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 14:11:01 2012 -0700
    
        reenable the cubic resampler
    
        cubic resampler was disabled because it hadn't been qualified,
        however after I did some tests, it does improve significantly
        the sound quality over the order-1 resampler, even if it is
        still quite bad.
    
        also HIGH_QUALITY resampler was partially disabled, it's now
        fully enabled. It's a big improvement over the cubic resampler
        in terms of aliasing noise (it's not as good in the pass-band).
    
        Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    
    commit 8c0241d3ff50ae85167f69b3bd369244894cfa44
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 13:48:42 2012 -0700
    
        improve SINC resampler coefficients
    
        - we increase the interpolation precision from 4 to 7 bits
        this doesn't increase CPU power required, it only increases the
        size of the filter table but significantly reduces the noise
        introduced by the quantization of the impulse response.
    
        - the parameters of the filter are set such that aliasing is
        rejected at 80 dB below 20 KHz. Because we don't use a lot of
        coefficient (to save compute power), there are quite a bit of
        attenuation in the pass-band: starting at 9KHz for the
        down-sampler (48 to 44.1), and starting at 13 KHz for the
        up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
        Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    
    commit 69e7dab2192adc1f780464146810629ebd01b145
    Author: Pixelflinger <mathias.agopian@gmail.com>
    Date:   Thu Oct 25 19:43:49 2012 -0700
    
        improve fir tool: cleanup, better default, bug fixes
    
        - all parameters can be changed on the command-line
        - added float output
        - added debug option
        - added an option to generate a polyphase filter coefficients
        - added an attenuation option in dBFS
        - added a lot of comments and references
        - fixed kaiser window parameter
    
        also the default should generate a filter with 80 dB rejection
        (of the 24 KHz aliasing) above 20 KHz and a 15 KHz transition
        band around ~20 KHz (for 48 KHz sampling rate).
        It's not very good but corresponds to the current code.
    
    commit 8347499d105a50257c18e9dac652e750b06428b1
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Mon Oct 22 17:09:27 2012 -0700
    
        Increase allowed number of VHQ resamplers to 3
    
        Bug: 7378660
        Change-Id: I69e33ca2eb4bb9bd38e2c63df62cd1130d68baf6
    
    commit f91cf3cad7f5c4d52614271c89ab468741c5d24c
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 03:04:05 2012 -0700
    
        Fix a typo that caused the high quality resampler to produce garbage
    
        the problem is that if libaudio_resampler is present, it is those
        coefficients that will always be selected, but the correct
        meta-data.
    
        Bug: 7385994
        Change-Id: Ieebeb37b4dfb62a1a051bc29fae2ce056dbc6621
    
    commit e158a9e4262a174c59469a205658bc3ca4078234
    Author: Dan Bornstein <danfuzz@google.com>
    Date:   Fri Oct 3 10:34:57 2008 -0700
    
        Manually merge change #111620 from tc3 to mainline, to keep the
    
        automerger from choking on it.
    
        p4 sync
        p4 integrate -r -b android_to_tc3 //...@111620,111620
        p4 resolve -a
        p4 resolve     # resolve a couple merge travesties
    
        PRESUBMIT=passed
        BUG=1399648
        TBR=edheyl
        OCL=111902
    
        Change-Id: I854b01553dd92bbf9c864f5a9bd51a3d665f0ac2
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b9f3c26032be7a6ea01a10d93d94826f449e68ab
    Author: Dave Bort <dbort@google.com>
    Date:   Fri Jan 18 14:51:05 2008 -0800
    
        Rename "Makefile" to "Android.mk" throughout the tree.
    
        For <http://b/issue?id=960416>.
    
        I've tested this as much as I can, but 1500 open files =
        easy to mess things up.  Please let me know if there's
        a problem rather than rolling back this change.
    
        PRESUBMIT=passed
        BUG=960416
        TBR=joeo
        OCL=46537
    
        Change-Id: I5a404caf0f398a7afa7ae7abaf2f2a1c6ab490eb
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 0c22a9a44c4103483fba1d944acf1354c5eb1617
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 23:44:25 2007 -0700
    
        Tweak the SINC resampler parameters and double the performance. It's using about 10% CPU in the worse case now.
    
        Change-Id: I50ac7e6c6702a427fa36ab6d976c507155057507
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b85e41487983ad085b859acf8251e7e54480308a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 04:34:36 2007 -0700
    
        A sinc resampler for Audioflinger. It's not enabled yet, but fully functional and apparently working. It need more "quality" tests. In the 48->44 KHz, it takes about 25% of the CPU time.
    
        Change-Id: I80eb5185e13ebdb907e0b85c49ba1272c23d60ec
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit ba3949ef17cac2ba71cc3096c413782a49c922e5
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 21:01:28 2007 -0700
    
        fix a few small typos in the FIR computation
    
        Change-Id: I6e56b514fe520f30f7487f85c64ea5d2a7c19b40
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 7474bfa7de2604021963794dddfe44985648db6a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 03:16:02 2007 -0700
    
        This is a tool to compute the the reconstruction filter coefficients for a sinc audio resampler.
    
        Change-Id: I99be2505139b8e0e7647200e1647509d4f7e6067
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    Bug: 7577965
    Change-Id: I2c84a9283a1668723bad83e1a119c849c88c3e6b
    New VHQ resampler
    
    Squashed commit of the following:
    
    commit 12b6952da9f25e94d06dd7185bce255924e7e791
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 19 15:27:26 2012 -0800
    
        fix a typo in SINC resampler that prevented tracks to be mixed
    
        we were always erasing the current mix instead of mixing into it.
    
        Change-Id: Ib229245f9e5a0d384f1727640a59e9f0469211a2
    
    commit 0019ce082df430278f14ab922e900ce33b64897d
    Author: Dave Bort <dbort@google.com>
    Date:   Tue Nov 13 01:30:32 2007 -0800
    
        Rename "TARGET" to "MODULE" in the build system.
    
        Part one of the grand renaming.
    
        API_CHANGE: Third parties may need to update their makefiles.
        Any variables with "LOCAL" and "TARGET" in their names
        should now use "MODULE" instead of "TARGET"; e.g., LOCAL_MODULE,
        LOCAL_MODULE_TAGS.
    
        PRESUBMIT=passed
        OCL=39840
    
        Change-Id: Ica9a7937d3d9552ab84db46ac6eea8a290e404fe
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit f01adc0cef0e39e75c76d9195ac26a94cac0a100
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Wed Nov 14 08:32:08 2012 -0800
    
        Fix build warnings
    
        Change-Id: Ic43bcca166a529a6431711b05a7fa21849b6a38b
    
    commit 9bb031a565c753a03d9c9397edea318947d80528
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 04:44:30 2012 -0800
    
        more optimizations...
    
        calculate the offsets from the phase differently, this happens
        to reduce the register pressure in the main loop, which in turns
        allows the compiler to generate much better code (doesn't need
        to spill a lot of stuff on the stack).
    
        this gives another 15% performance increase
    
        Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    
    commit 5a951598f31217b8cd2babd0720c9608ee17291a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 03:26:39 2012 -0800
    
        refactor code to improve neon code
    
        we want to make sure we don't transfer data from the
        neon unit to the arm register file, as this can be quite
        slow. instead we do all the calculation on the neon side
        and write the result directly to main memory.
    
        Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    
    commit b381ee9e83bc9fd18986e79c7809841514ed590e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 15:16:13 2012 -0800
    
        NEON optimized SINC resampler
    
        this currently gives us a 60% to 80% boost depending
        on the quality level selected.
    
        Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    
    commit bea077354210242ea193a50b0dbab0fedab25df3
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 5 01:51:37 2012 -0800
    
        minor cleanups
    
        Change-Id: Ia12ee4fb59e90221761bec85e6450db29197591f
    
    commit 8f4ed7decbe161a5ff38200b218f5216d80aba46
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 18:49:14 2012 -0800
    
        improve resample test
    
        - handle stereo input
        - input file can now be ommited, in this case
          a linear chirp will be used automatically
        - better usage information
    
        Change-Id: I5d62a6c26a9054a1c1a517a065b4df5a2cdcda22
    
    commit 5fcd634ea6cb4df27c495abe20f5f9b8ff55d128
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 02:03:49 2012 -0800
    
        change how we store the FIR coefficients
    
        The coefficient table is now transposed and shows
        much better its polyphase nature: we now have a FIR
        per line, each line corresponding to a phase.
    
        This doesn't change at all the results produced by
        the filter, but allows us to make slightly better
        use of the data cache and improves performance a bit
        (although not as much as I thought it would).
    
        The main benefit is that it is the first step
        before we can make much larger optimizations
        (like using NEON).
    
        Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    
    commit d652231abf4c7e2ea1fc89caae730cec1f7259a1
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 3 23:37:53 2012 -0700
    
        improve SINC resampler performance
    
        The improvement is about 60% by just tweaking a few
        things to help the compiler generate better code.
        It turns out that inlining too much stuff manually was hurting us.
    
        Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    
    commit 9dc68ef5b94c700c4ee68790e8cbb334c90a538d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Nov 1 21:03:46 2012 -0700
    
        new coefficients for the vhq resampler
    
        previous coefficients were provided by a 3rd party and didn't have a
        way to re-generate them. we're now using the 'fir' utility.
    
        the performance of the filter is virtually identical, except for
        the down-sampling case which seems slightly better now:
           It looks like both the previous and new coefficients are generating
        some sort of clipping for full-scale signals in the down-sampling case
        (although the new ones seem better), the reason for that is
        unknown (see bug: 7453062)
    
        Also updated the HQ coefficients for the down-samplers, previous ones
        were a little bit too conservative -- the new ones push the cut-off
        frequency up by about 1 KHz.
    
        Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    
    commit 38e0b8560a6fc1b7124e22e0e09a84a285182f8e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 13:51:44 2012 -0700
    
        fix SINC resampler on non ARM architectures
    
        make sure the C version of the code generates the same
        output than the ARM assemply version.
    
        Change-Id: Ide218785c35d02598b2d7278e646b1b178148698
    
    commit a1878128b182696ba508569b4d211d0dfae92463
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 12:49:07 2012 -0700
    
        fix another issue with generating FIR coefficients
    
        the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
        missing the 2*f scale factor. This explains why we were seeing
        clipping and had to manually scale the filter down.
    
        Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    
    commit 1a0fb993430acc9f601e6c538305bc407c20ac5d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:20 2012 -0700
    
        fir a typo that caused up-sampling coefficiens to be wrong
    
        up-sample coefficient were generated with a cut-off frequency of 24KHz
        intead of ~20KHz, which caused more aliasing in the audible band.
    
        also increased the attenuation to 1.3 dB on both up and down
        sampling coefficient to avoid clipping.
    
        Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    
    commit 9520ad6862bd682ad075a9d9e3e94ada9f6e58b6
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:16 2012 -0700
    
        test-resample: clip instead of overflowing
    
        Change-Id: I550e5a59e51c11e1095ca338222b094f92b96878
    
    commit ba36656300f250f7f1fdeb75149749344260e6cb
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 01:01:38 2012 -0700
    
        a test app for the resamplers
    
        Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    
    commit 056a08b9bfd33cf27228c992adc8293a56b01be8
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 14:11:01 2012 -0700
    
        reenable the cubic resampler
    
        cubic resampler was disabled because it hadn't been qualified,
        however after I did some tests, it does improve significantly
        the sound quality over the order-1 resampler, even if it is
        still quite bad.
    
        also HIGH_QUALITY resampler was partially disabled, it's now
        fully enabled. It's a big improvement over the cubic resampler
        in terms of aliasing noise (it's not as good in the pass-band).
    
        Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    
    commit 8c0241d3ff50ae85167f69b3bd369244894cfa44
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 13:48:42 2012 -0700
    
        improve SINC resampler coefficients
    
        - we increase the interpolation precision from 4 to 7 bits
        this doesn't increase CPU power required, it only increases the
        size of the filter table but significantly reduces the noise
        introduced by the quantization of the impulse response.
    
        - the parameters of the filter are set such that aliasing is
        rejected at 80 dB below 20 KHz. Because we don't use a lot of
        coefficient (to save compute power), there are quite a bit of
        attenuation in the pass-band: starting at 9KHz for the
        down-sampler (48 to 44.1), and starting at 13 KHz for the
        up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
        Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    
    commit 69e7dab2192adc1f780464146810629ebd01b145
    Author: Pixelflinger <mathias.agopian@gmail.com>
    Date:   Thu Oct 25 19:43:49 2012 -0700
    
        improve fir tool: cleanup, better default, bug fixes
    
        - all parameters can be changed on the command-line
        - added float output
        - added debug option
        - added an option to generate a polyphase filter coefficients
        - added an attenuation option in dBFS
        - added a lot of comments and references
        - fixed kaiser window parameter
    
        also the default should generate a filter with 80 dB rejection
        (of the 24 KHz aliasing) above 20 KHz and a 15 KHz transition
        band around ~20 KHz (for 48 KHz sampling rate).
        It's not very good but corresponds to the current code.
    
    commit 8347499d105a50257c18e9dac652e750b06428b1
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Mon Oct 22 17:09:27 2012 -0700
    
        Increase allowed number of VHQ resamplers to 3
    
        Bug: 7378660
        Change-Id: I69e33ca2eb4bb9bd38e2c63df62cd1130d68baf6
    
    commit f91cf3cad7f5c4d52614271c89ab468741c5d24c
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 03:04:05 2012 -0700
    
        Fix a typo that caused the high quality resampler to produce garbage
    
        the problem is that if libaudio_resampler is present, it is those
        coefficients that will always be selected, but the correct
        meta-data.
    
        Bug: 7385994
        Change-Id: Ieebeb37b4dfb62a1a051bc29fae2ce056dbc6621
    
    commit e158a9e4262a174c59469a205658bc3ca4078234
    Author: Dan Bornstein <danfuzz@google.com>
    Date:   Fri Oct 3 10:34:57 2008 -0700
    
        Manually merge change #111620 from tc3 to mainline, to keep the
    
        automerger from choking on it.
    
        p4 sync
        p4 integrate -r -b android_to_tc3 //...@111620,111620
        p4 resolve -a
        p4 resolve     # resolve a couple merge travesties
    
        PRESUBMIT=passed
        BUG=1399648
        TBR=edheyl
        OCL=111902
    
        Change-Id: I854b01553dd92bbf9c864f5a9bd51a3d665f0ac2
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b9f3c26032be7a6ea01a10d93d94826f449e68ab
    Author: Dave Bort <dbort@google.com>
    Date:   Fri Jan 18 14:51:05 2008 -0800
    
        Rename "Makefile" to "Android.mk" throughout the tree.
    
        For <http://b/issue?id=960416>.
    
        I've tested this as much as I can, but 1500 open files =
        easy to mess things up.  Please let me know if there's
        a problem rather than rolling back this change.
    
        PRESUBMIT=passed
        BUG=960416
        TBR=joeo
        OCL=46537
    
        Change-Id: I5a404caf0f398a7afa7ae7abaf2f2a1c6ab490eb
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 0c22a9a44c4103483fba1d944acf1354c5eb1617
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 23:44:25 2007 -0700
    
        Tweak the SINC resampler parameters and double the performance. It's using about 10% CPU in the worse case now.
    
        Change-Id: I50ac7e6c6702a427fa36ab6d976c507155057507
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b85e41487983ad085b859acf8251e7e54480308a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 04:34:36 2007 -0700
    
        A sinc resampler for Audioflinger. It's not enabled yet, but fully functional and apparently working. It need more "quality" tests. In the 48->44 KHz, it takes about 25% of the CPU time.
    
        Change-Id: I80eb5185e13ebdb907e0b85c49ba1272c23d60ec
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit ba3949ef17cac2ba71cc3096c413782a49c922e5
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 21:01:28 2007 -0700
    
        fix a few small typos in the FIR computation
    
        Change-Id: I6e56b514fe520f30f7487f85c64ea5d2a7c19b40
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 7474bfa7de2604021963794dddfe44985648db6a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 03:16:02 2007 -0700
    
        This is a tool to compute the the reconstruction filter coefficients for a sinc audio resampler.
    
        Change-Id: I99be2505139b8e0e7647200e1647509d4f7e6067
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    Bug: 7577965
    Change-Id: I2c84a9283a1668723bad83e1a119c849c88c3e6b
    change how we store the FIR coefficients
    
    The coefficient table is now transposed and shows
    much better its polyphase nature: we now have a FIR
    per line, each line corresponding to a phase.
    
    This doesn't change at all the results produced by
    the filter, but allows us to make slightly better
    use of the data cache and improves performance a bit
    (although not as much as I thought it would).
    
    The main benefit is that it is the first step
    before we can make much larger optimizations
    (like using NEON).
    
    Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    change how we store the FIR coefficients
    
    The coefficient table is now transposed and shows
    much better its polyphase nature: we now have a FIR
    per line, each line corresponding to a phase.
    
    This doesn't change at all the results produced by
    the filter, but allows us to make slightly better
    use of the data cache and improves performance a bit
    (although not as much as I thought it would).
    
    The main benefit is that it is the first step
    before we can make much larger optimizations
    (like using NEON).
    
    Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    fix another issue with generating FIR coefficients
    
    the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
    missing the 2*f scale factor. This explains why we were seeing
    clipping and had to manually scale the filter down.
    
    Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    fix another issue with generating FIR coefficients
    
    the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
    missing the 2*f scale factor. This explains why we were seeing
    clipping and had to manually scale the filter down.
    
    Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    fir a typo that caused up-sampling coefficiens to be wrong
    
    up-sample coefficient were generated with a cut-off frequency of 24KHz
    intead of ~20KHz, which caused more aliasing in the audible band.
    
    also increased the attenuation to 1.3 dB on both up and down
    sampling coefficient to avoid clipping.
    
    Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    fir a typo that caused up-sampling coefficiens to be wrong
    
    up-sample coefficient were generated with a cut-off frequency of 24KHz
    intead of ~20KHz, which caused more aliasing in the audible band.
    
    also increased the attenuation to 1.3 dB on both up and down
    sampling coefficient to avoid clipping.
    
    Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    improve fir tool: cleanup, better default, bug fixes
    
    - all parameters can be changed on the command-line
    - added float output
    - added debug option
    - added an option to generate a polyphase filter coefficients
    - added an attenuation option in dBFS
    - added a lot of comments and references
    - fixed kaiser window parameter
    
    also the default should generate a filter with 80 dB rejection
    (of the 24 KHz aliasing) above 20 KHz and a 15 KHz transition
    band around ~20 KHz (for 48 KHz sampling rate).
    It's not very good but corresponds to the current code.
    improve fir tool: cleanup, better default, bug fixes
    
    - all parameters can be changed on the command-line
    - added float output
    - added debug option
    - added an option to generate a polyphase filter coefficients
    - added an attenuation option in dBFS
    - added a lot of comments and references
    - fixed kaiser window parameter
    
    also the default should generate a filter with 80 dB rejection
    (of the 24 KHz aliasing) above 20 KHz and a 15 KHz transition
    band around ~20 KHz (for 48 KHz sampling rate).
    It's not very good but corresponds to the current code.
    Manually merge change #111620 from tc3 to mainline, to keep the
    
    automerger from choking on it.
    
    p4 sync
    p4 integrate -r -b android_to_tc3 //...@111620,111620
    p4 resolve -a
    p4 resolve     # resolve a couple merge travesties
    
    PRESUBMIT=passed
    BUG=1399648
    TBR=edheyl
    OCL=111902
    
    Change-Id: I854b01553dd92bbf9c864f5a9bd51a3d665f0ac2
    Signed-off-by: Glenn Kasten <gkasten@google.com>
    Tweak the SINC resampler parameters and double the performance. It's using about 10% CPU in the worse case now.
    
    Change-Id: I50ac7e6c6702a427fa36ab6d976c507155057507
    Signed-off-by: Glenn Kasten <gkasten@google.com>
    A sinc resampler for Audioflinger. It's not enabled yet, but fully functional and apparently working. It need more "quality" tests. In the 48->44 KHz, it takes about 25% of the CPU time.
    
    Change-Id: I80eb5185e13ebdb907e0b85c49ba1272c23d60ec
    Signed-off-by: Glenn Kasten <gkasten@google.com>
    fix a few small typos in the FIR computation
    
    Change-Id: I6e56b514fe520f30f7487f85c64ea5d2a7c19b40
    Signed-off-by: Glenn Kasten <gkasten@google.com>
    This is a tool to compute the the reconstruction filter coefficients for a sinc audio resampler.
    
    Change-Id: I99be2505139b8e0e7647200e1647509d4f7e6067
    Signed-off-by: Glenn Kasten <gkasten@google.com>
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    AV Android make files changes
    
    o plus a few file relocation: ActivityManager.cpp/h, SoundPool.h, etc
    o remove some runtime dependencies to libandroid, libandroid_runtime, etc
    
    Change-Id: I047a47c5fb361dd5cf85cd98798c39f629a75d10
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    Add memory leak tracking/debugging code to drm server
    
    bug - 4099038
    
    Change-Id: I6c048eaf3d7f34bc144b8daaa5fdef1ed474af66
    Bug 4016329 do full string comparisons
    
    Use full string comparisons instead of partial for
      file extension and MIME type.
    Do case-insensitive comparison of MIME type and file extensions.
    Fix error in comment for String8::getPathExtension.
    Remove dead code -- StringTokenizer is unused.
    
    Change-Id: I322be6235abbdaab5f7eafa48926dbb2cf46dc29
    Make DRM libraries optional
    
    Change-Id: I0b591b75a035bc6d8049c85b595966845fedaa15
    fix build
    
    Change-Id: I4aba42eabb2f959b5301bfd16f65fa6141d86ddc
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Remove obsolete drm manager code
    
    bug: 9545965
    Change-Id: Ia6e09efa826b1349d027045e782980daeb7d7596
    (cherry picked from commit f355f18aa2cc1706761e373fe19298a9ccc9c75a)
    Remove obsolete drm manager code
    
    bug: 9545965
    Change-Id: Ia6e09efa826b1349d027045e782980daeb7d7596
    Let getOriginalMimeType() take a fd passed from drm java applications
    
    This patch enables the drm framework to avoid opening files directly.
    As a result, the drm framework no longer needs the sdcard read permision.
    
    o related-to-bug: 6426185
    
    Change-Id: Ib176c35ef4b1a1a405e8e954f19a7985266f2510
    Add a new API on DRM Framework for streaming
    
    In case of DRM streaming, decrypt session can start just after
    receiving the header, and it doesn't need to wait for the entire
    content. However, current API of DRM framework only accepts file
    handle or URI. With this new API, DRM session can start
    without waiting for the entire content.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I74375fe127df636067f1c300ea91654ba3d1aa3c
    Support widevine:// URLs in NuMediaExtractor / java MediaExtractor.
    
    Allow anyone to talk to drm services.
    
    Change-Id: I5c2f3c419d01de30c3d6e2bc85b1fe5c9c37b392
    related-to-bug: 6276111
    Added permission check for all sensitive drm API calls
    
    o all drm calls using a DecryptHandle now check the permission before proceeding
    
    Change-Id: Ic992a991357876c6e4bfbfab4f5eec1fa0634a13
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Separate sniffing from session initialization
    
    This avoid lengthy/duplicate sniffing for drm plugins when a decrypt session is opened
    
    o The change is backward compatibile in that no update is required
      for existing drm plug-ins if they do not plan to provide separate
      sniffer/extractor
    
    related-to-bug: 5725548
    
    Change-Id: I7fc4caf82d77472da4e2bc7b5d31060fb54fd84c
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Fix for bug 4371230.
    - Generate unique ID for each DrmManagerClient in native side
    - Fix the bug where multiple clients could use the same ID
    - Return the correct unique ID back to Java
    - Add a flag in the unique ID to separate native client and Java client
    
    Change-Id: Ia4574b6b0a526f2335a65380975dc62f9a6e7f9b
    Add memory leak tracking/debugging code to drm server
    
    bug - 4099038
    
    Change-Id: I6c048eaf3d7f34bc144b8daaa5fdef1ed474af66
    64-bit file size/offset support for DRM framework
    
    Change-Id: I0ba7147607825234df9fa28732e1bba344e82e79
    Update of DRM Framework.
    
    -Access permission handling
      Introduce an internal function which allows the desired process to
      access decryption flow. This new function is just for reference and
      each OEM manufacturer should implement/replace with their solutions.
    -New API, getMetadata()
      This API is for retrieving media metadata from container-based DRM,
      such as OMA forward-lock content. This API asks DRM agent to retrieve
      media metadata hiddein inside of DRM special container.
    -New API, acquireRights()
      This API wraps acquireDrmInfo() and processDrmInfo().
      If DRM agent has valid implementation of both APIs,
      Application can acquire DrmRights only by calling this API.
    -Bug fix in event loop of OnInfoListener.
      Separate OnInfo event loop from mail thread loop so as to avoid
      the issue that message is not dispatched when mail thread is busy.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I04ee3e0988152a71e221f2256d83253749a29da0
    Update of DRM framework
    
     - Overload openDecryptSession() with uri parameter
       in order to accept URI of DRM content,
       Following API is added,
           DecryptHandle*openDecryptSession(const char* uri);.
     - Unify texisting three event types of processDrmInfo()
       so that caller of DRM framework does not have to handle many event types.
     - Let DrmManagerService call load/unload plugins API so that
       client of DRM framework does not have to manage plug-in load/unload.
     - Trivial fix in DrmManagerClient.java is also incorporated.
    
    Changes are made by Sony Corporation.
    
    Change-Id: If62b47fa0360718fdc943e6e6143671d7db26adc
    Do not create drm directory here. Fix for bug 3134576.
    
    Change-Id: I1e26ff32b1c2d97464d544c2455eab0a726e3294
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Add NOTICE and MODULE_LICENSE_APACH2 to libs build under /frameworks/av/
    
    Change-Id: I0a3af3e2abdedebd5934f3d941d01c32cfc75e26
    related-to-bug: 6647465
    Copied MODULE_LICENSE_APACH2 and NOTICE from frameworks/base to frameworks/av
    
    Change-Id: I48c927b9690bf902ab167d60171c0ee7995687e0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Remove obsolete drm manager code
    
    bug: 9545965
    Change-Id: Ia6e09efa826b1349d027045e782980daeb7d7596
    (cherry picked from commit f355f18aa2cc1706761e373fe19298a9ccc9c75a)
    Remove obsolete drm manager code
    
    bug: 9545965
    Change-Id: Ia6e09efa826b1349d027045e782980daeb7d7596
    Fix for not ending up in an eternal loop in DrmManager.
    
    In the original code a random number is used to get try
    to find an empty slot in the list of free DRM id's.
    When you reached the limit of 0xfff id's you ended up
    in an eternal loop causing ANRs.
    
    Updated by James Dong <jdong@google.com>.
    
    Change-Id: I70176cc3f770223c4a8060f9739fe2bc03a703d9
    Fix for not ending up in an eternal loop in DrmManager.
    
    In the original code a random number is used to get try
    to find an empty slot in the list of free DRM id's.
    When you reached the limit of 0xfff id's you ended up
    in an eternal loop causing ANRs.
    
    Updated by James Dong <jdong@google.com>.
    
    Change-Id: I70176cc3f770223c4a8060f9739fe2bc03a703d9
    Let getOriginalMimeType() take a fd passed from drm java applications
    
    This patch enables the drm framework to avoid opening files directly.
    As a result, the drm framework no longer needs the sdcard read permision.
    
    o related-to-bug: 6426185
    
    Change-Id: Ib176c35ef4b1a1a405e8e954f19a7985266f2510
    Add a new API on DRM Framework for streaming
    
    In case of DRM streaming, decrypt session can start just after
    receiving the header, and it doesn't need to wait for the entire
    content. However, current API of DRM framework only accepts file
    handle or URI. With this new API, DRM session can start
    without waiting for the entire content.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I74375fe127df636067f1c300ea91654ba3d1aa3c
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Separate sniffing from session initialization
    
    This avoid lengthy/duplicate sniffing for drm plugins when a decrypt session is opened
    
    o The change is backward compatibile in that no update is required
      for existing drm plug-ins if they do not plan to provide separate
      sniffer/extractor
    
    related-to-bug: 5725548
    
    Change-Id: I7fc4caf82d77472da4e2bc7b5d31060fb54fd84c
    Revert the following patches because they may lead to power regression because SHA/MD5 module is stuck
    1. Revert "Fix drm flag setting missed in false drm recognition fix."
       This reverts commit 9f704f6c46a171357e49c411c83458b9d4565f3b.
    
    2. Revert "Fixed the false drm recognition."
       This reverts commit aadbd80b307c817698ce5110ff8e002804d1b230.
    
    3. Revert "Fix drm enumeration order, resolves failure to play forward lock ringtones"
       This reverts commit a5cbf023e349f2394ba6fc58d73b4375cfec4369.
    
    4. Revert "Fix ANRs due to Widevine DRM plugin sniff taking too long."
       This reverts commit d0d19db1ca1c289b069db33f4665bcb9386064e9.
    
    As a result of the reverting, many ANRs from WV sniffing are back.
    
    related-to-bug: 5739618
    Revert the following patches because they may lead to power regression because SHA/MD5 module is stuck
    1. Revert "Fix drm flag setting missed in false drm recognition fix."
       This reverts commit 9f704f6c46a171357e49c411c83458b9d4565f3b.
    
    2. Revert "Fixed the false drm recognition."
       This reverts commit aadbd80b307c817698ce5110ff8e002804d1b230.
    
    3. Revert "Fix drm enumeration order, resolves failure to play forward lock ringtones"
       This reverts commit a5cbf023e349f2394ba6fc58d73b4375cfec4369.
    
    4. Revert "Fix ANRs due to Widevine DRM plugin sniff taking too long."
       This reverts commit d0d19db1ca1c289b069db33f4665bcb9386064e9.
    
    As a result of the reverting, many ANRs from WV sniffing are back.
    
    related-to-bug: 5739618
    Fix drm enumeration order, resolves failure to play forward lock ringtones
    
    Change-Id: I58e8a26849409bc3bf98b066c5e07c2a0c91e0c9
    related-to-bug: 5735466
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Modified loadPlugIns to load from /vendor and /system; skip libraries that are already loaded.
    BUG: 5284436
    
    Change-Id: I99267c81a488860c3c7edb747100d44f3083bfc2
    Fix for bug 4371230.
    - Generate unique ID for each DrmManagerClient in native side
    - Fix the bug where multiple clients could use the same ID
    - Return the correct unique ID back to Java
    - Add a flag in the unique ID to separate native client and Java client
    
    Change-Id: Ia4574b6b0a526f2335a65380975dc62f9a6e7f9b
    Fix memory leak from retrieval of getSupportedDrmInfo.
    
    Change-Id: Ic2192a9791c0a3c5e5357b4367a2d8bfb15af20c
    Bug fixes of DRM framework.
    
    - Add death listener to clean-up drmserver appropriately
      when drmserver died.
    - Remove "static" declaration of mUniqueIdVector because it was not
      needed to be static variable.
    - Remove "class DrmContentIds;" because the class does not exist.
    - contentPath in saveRights() could be empty because
      it is not required by some DRM schemes.
    - Fix naming convention to use sXXX for static variables.
    - Fix typo
    
    Change-Id: I7d440488fc074c200f1009d1bafafeffebd690b2
    - Some change on the DrmManager in order to support feature request 4082089.
        In DrmManager, we currently lock both processDrmInfo() and onInfo() which is
        ok for now since processDrmInfo() is async call, and it will return without
        waiting for onInfo() call. However, if we send an event in processDrmInfo(),
        we will got deadlock here because we need to invoke onInf() which will wait
        for processDrmInfo() to release the lock. Use different lock for onInfo().
    - Remove some redundent mutex lock.
    
    Change-Id: I59c794f95ba1693425723224114fa975cf9b235f
    - Change level of some LOGs from LOGE to LOGV because those logs
      are not error logs from non-DRMed content's point of view.
    - Add more mutex lock to avoid crash by multi-thread calls.
    - Fix for bug 4050039
    
    Change-Id: I52fed22069f0cda6c4ac6a5363469168c797a33b
    To support DRM files without file extension
    
    Change-Id: Ie7701048d0dbd51bf358364014a1b41c894b664c
    Bug 3229711
    
    Change-Id: I3a4d41597cb92a1526417a622390dbb93dc71e99
    DRM Framework bug fixes.
    
    - Make sure to clean-up obsolete listeners.
    - Close cursor after using it.
    - Add virtual destructor to the base class of OnInfoListener.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: Ibb6dd625ef48e3597188f0d7c90f9d4c780b6139
    64-bit file size/offset support for DRM framework
    
    Change-Id: I0ba7147607825234df9fa28732e1bba344e82e79
    Update of DRM Framework.
    
    -Access permission handling
      Introduce an internal function which allows the desired process to
      access decryption flow. This new function is just for reference and
      each OEM manufacturer should implement/replace with their solutions.
    -New API, getMetadata()
      This API is for retrieving media metadata from container-based DRM,
      such as OMA forward-lock content. This API asks DRM agent to retrieve
      media metadata hiddein inside of DRM special container.
    -New API, acquireRights()
      This API wraps acquireDrmInfo() and processDrmInfo().
      If DRM agent has valid implementation of both APIs,
      Application can acquire DrmRights only by calling this API.
    -Bug fix in event loop of OnInfoListener.
      Separate OnInfo event loop from mail thread loop so as to avoid
      the issue that message is not dispatched when mail thread is busy.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I04ee3e0988152a71e221f2256d83253749a29da0
    Disable some logs
    
    Change-Id: I05fcf6869916504367814fd2abd2b1af88619f5b
    Update of DRM framework
    
     - Overload openDecryptSession() with uri parameter
       in order to accept URI of DRM content,
       Following API is added,
           DecryptHandle*openDecryptSession(const char* uri);.
     - Unify texisting three event types of processDrmInfo()
       so that caller of DRM framework does not have to handle many event types.
     - Let DrmManagerService call load/unload plugins API so that
       client of DRM framework does not have to manage plug-in load/unload.
     - Trivial fix in DrmManagerClient.java is also incorporated.
    
    Changes are made by Sony Corporation.
    
    Change-Id: If62b47fa0360718fdc943e6e6143671d7db26adc
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Remove unnecessary header file includes for drmserver
    
    Change-Id: I14033861e74d20f9d4897b651c4eeee126d4d610
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)
    
    Change-Id: I26f76452ac49e2890b14d133c065493d8df0fb4a
    Fix log message
    
    Log did not have a tag, and was wrong level
    
    Change-Id: I8d12895c80483e1e39f117a393b8be2f4bdd3e1d
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    eclair snapshot
    move libbinder's header files under includes/binder
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add NOTICE and MODULE_LICENSE_APACH2 to libs build under /frameworks/av/
    
    Change-Id: I0a3af3e2abdedebd5934f3d941d01c32cfc75e26
    related-to-bug: 6647465
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    AV Android make files changes
    
    o plus a few file relocation: ActivityManager.cpp/h, SoundPool.h, etc
    o remove some runtime dependencies to libandroid, libandroid_runtime, etc
    
    Change-Id: I047a47c5fb361dd5cf85cd98798c39f629a75d10
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    frameworks/base: remove LOCAL_PRELINK_MODULE
    
    Change-Id: I54dd62ebef47e7690afa5a858f3cad941b135481
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Make DRM libraries optional
    
    Change-Id: I0b591b75a035bc6d8049c85b595966845fedaa15
    fix build
    
    Change-Id: Iccb40c8c5df879288f35e0940c721d306fb75c12
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Add NOTICE and MODULE_LICENSE_APACH2 to libs build under /frameworks/av/
    
    Change-Id: I0a3af3e2abdedebd5934f3d941d01c32cfc75e26
    related-to-bug: 6647465
    Copied MODULE_LICENSE_APACH2 and NOTICE from frameworks/base to frameworks/av
    
    Change-Id: I48c927b9690bf902ab167d60171c0ee7995687e0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Remove obsolete drm manager code
    
    bug: 9545965
    Change-Id: Ia6e09efa826b1349d027045e782980daeb7d7596
    (cherry picked from commit f355f18aa2cc1706761e373fe19298a9ccc9c75a)
    Remove obsolete drm manager code
    
    bug: 9545965
    Change-Id: Ia6e09efa826b1349d027045e782980daeb7d7596
    Let getOriginalMimeType() take a fd passed from drm java applications
    
    This patch enables the drm framework to avoid opening files directly.
    As a result, the drm framework no longer needs the sdcard read permision.
    
    o related-to-bug: 6426185
    
    Change-Id: Ib176c35ef4b1a1a405e8e954f19a7985266f2510
    Add a new API on DRM Framework for streaming
    
    In case of DRM streaming, decrypt session can start just after
    receiving the header, and it doesn't need to wait for the entire
    content. However, current API of DRM framework only accepts file
    handle or URI. With this new API, DRM session can start
    without waiting for the entire content.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I74375fe127df636067f1c300ea91654ba3d1aa3c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Separate sniffing from session initialization
    
    This avoid lengthy/duplicate sniffing for drm plugins when a decrypt session is opened
    
    o The change is backward compatibile in that no update is required
      for existing drm plug-ins if they do not plan to provide separate
      sniffer/extractor
    
    related-to-bug: 5725548
    
    Change-Id: I7fc4caf82d77472da4e2bc7b5d31060fb54fd84c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Fix for bug 4371230.
    - Generate unique ID for each DrmManagerClient in native side
    - Fix the bug where multiple clients could use the same ID
    - Return the correct unique ID back to Java
    - Add a flag in the unique ID to separate native client and Java client
    
    Change-Id: Ia4574b6b0a526f2335a65380975dc62f9a6e7f9b
    - Add two sanity checks.
    - Remove one unnecessary line.
    - Clear the extendedData vector in DecryptHandle.
    
    Change-Id: I2610c6d68f12d48cb69323a5eb2ae4b3b3e44dff
    Fix for bug 4165823.
    Add death listener to clean-up drmserver appropriately when drmserver died.
    Cherry-pick from master. Do not merge.
    
    Change-Id: I7782cc96ce173a87ebfd315950f3880fa90294d6
    Bug fixes of DRM framework.
    
    - Add death listener to clean-up drmserver appropriately
      when drmserver died.
    - Remove "static" declaration of mUniqueIdVector because it was not
      needed to be static variable.
    - Remove "class DrmContentIds;" because the class does not exist.
    - contentPath in saveRights() could be empty because
      it is not required by some DRM schemes.
    - Fix naming convention to use sXXX for static variables.
    - Fix typo
    
    Change-Id: I7d440488fc074c200f1009d1bafafeffebd690b2
    Fix for bug 3477330
    This patch fixs a crash bug caused by using a NULL DecryptHandle pointer.
    Fix by using sp<DecryptHandle> instead.
    
    Change-Id: Icbd59858385e8256125a615a3c82656b25319d44
    DRM Framework bug fixes.
    
    - Make sure to clean-up obsolete listeners.
    - Close cursor after using it.
    - Add virtual destructor to the base class of OnInfoListener.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: Ibb6dd625ef48e3597188f0d7c90f9d4c780b6139
    64-bit file size/offset support for DRM framework
    
    Change-Id: I0ba7147607825234df9fa28732e1bba344e82e79
    Update of DRM Framework.
    
    -Access permission handling
      Introduce an internal function which allows the desired process to
      access decryption flow. This new function is just for reference and
      each OEM manufacturer should implement/replace with their solutions.
    -New API, getMetadata()
      This API is for retrieving media metadata from container-based DRM,
      such as OMA forward-lock content. This API asks DRM agent to retrieve
      media metadata hiddein inside of DRM special container.
    -New API, acquireRights()
      This API wraps acquireDrmInfo() and processDrmInfo().
      If DRM agent has valid implementation of both APIs,
      Application can acquire DrmRights only by calling this API.
    -Bug fix in event loop of OnInfoListener.
      Separate OnInfo event loop from mail thread loop so as to avoid
      the issue that message is not dispatched when mail thread is busy.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I04ee3e0988152a71e221f2256d83253749a29da0
    Update of DRM framework
    
     - Overload openDecryptSession() with uri parameter
       in order to accept URI of DRM content,
       Following API is added,
           DecryptHandle*openDecryptSession(const char* uri);.
     - Unify texisting three event types of processDrmInfo()
       so that caller of DRM framework does not have to handle many event types.
     - Let DrmManagerService call load/unload plugins API so that
       client of DRM framework does not have to manage plug-in load/unload.
     - Trivial fix in DrmManagerClient.java is also incorporated.
    
    Changes are made by Sony Corporation.
    
    Change-Id: If62b47fa0360718fdc943e6e6143671d7db26adc
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Let getOriginalMimeType() take a fd passed from drm java applications
    
    This patch enables the drm framework to avoid opening files directly.
    As a result, the drm framework no longer needs the sdcard read permision.
    
    o related-to-bug: 6426185
    
    Change-Id: Ib176c35ef4b1a1a405e8e954f19a7985266f2510
    Add a new API on DRM Framework for streaming
    
    In case of DRM streaming, decrypt session can start just after
    receiving the header, and it doesn't need to wait for the entire
    content. However, current API of DRM framework only accepts file
    handle or URI. With this new API, DRM session can start
    without waiting for the entire content.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I74375fe127df636067f1c300ea91654ba3d1aa3c
    Separate sniffing from session initialization
    
    This avoid lengthy/duplicate sniffing for drm plugins when a decrypt session is opened
    
    o The change is backward compatibile in that no update is required
      for existing drm plug-ins if they do not plan to provide separate
      sniffer/extractor
    
    related-to-bug: 5725548
    
    Change-Id: I7fc4caf82d77472da4e2bc7b5d31060fb54fd84c
    Fix for bug 4371230.
    - Generate unique ID for each DrmManagerClient in native side
    - Fix the bug where multiple clients could use the same ID
    - Return the correct unique ID back to Java
    - Add a flag in the unique ID to separate native client and Java client
    
    Change-Id: Ia4574b6b0a526f2335a65380975dc62f9a6e7f9b
    Fix for bug 4126624.
    Change the mDrmManagerClientImpl to sp to avoid double delete the pointer.
    
    Change-Id: I7aacea1bc58ab6425ef6f6f09472c6f2970ebb4d
    - Some change on the DrmManager in order to support feature request 4082089.
        In DrmManager, we currently lock both processDrmInfo() and onInfo() which is
        ok for now since processDrmInfo() is async call, and it will return without
        waiting for onInfo() call. However, if we send an event in processDrmInfo(),
        we will got deadlock here because we need to invoke onInf() which will wait
        for processDrmInfo() to release the lock. Use different lock for onInfo().
    - Remove some redundent mutex lock.
    
    Change-Id: I59c794f95ba1693425723224114fa975cf9b235f
    Fix for bug 3477330
    This patch fixs a crash bug caused by using a NULL DecryptHandle pointer.
    Fix by using sp<DecryptHandle> instead.
    
    Change-Id: Icbd59858385e8256125a615a3c82656b25319d44
    DRM Framework bug fixes.
    
    - Make sure to clean-up obsolete listeners.
    - Close cursor after using it.
    - Add virtual destructor to the base class of OnInfoListener.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: Ibb6dd625ef48e3597188f0d7c90f9d4c780b6139
    64-bit file size/offset support for DRM framework
    
    Change-Id: I0ba7147607825234df9fa28732e1bba344e82e79
    Update of DRM Framework.
    
    -Access permission handling
      Introduce an internal function which allows the desired process to
      access decryption flow. This new function is just for reference and
      each OEM manufacturer should implement/replace with their solutions.
    -New API, getMetadata()
      This API is for retrieving media metadata from container-based DRM,
      such as OMA forward-lock content. This API asks DRM agent to retrieve
      media metadata hiddein inside of DRM special container.
    -New API, acquireRights()
      This API wraps acquireDrmInfo() and processDrmInfo().
      If DRM agent has valid implementation of both APIs,
      Application can acquire DrmRights only by calling this API.
    -Bug fix in event loop of OnInfoListener.
      Separate OnInfo event loop from mail thread loop so as to avoid
      the issue that message is not dispatched when mail thread is busy.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I04ee3e0988152a71e221f2256d83253749a29da0
    Update of DRM framework
    
     - Overload openDecryptSession() with uri parameter
       in order to accept URI of DRM content,
       Following API is added,
           DecryptHandle*openDecryptSession(const char* uri);.
     - Unify texisting three event types of processDrmInfo()
       so that caller of DRM framework does not have to handle many event types.
     - Let DrmManagerService call load/unload plugins API so that
       client of DRM framework does not have to manage plug-in load/unload.
     - Trivial fix in DrmManagerClient.java is also incorporated.
    
    Changes are made by Sony Corporation.
    
    Change-Id: If62b47fa0360718fdc943e6e6143671d7db26adc
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Add NOTICE and MODULE_LICENSE_APACH2 to libs build under /frameworks/av/
    
    Change-Id: I0a3af3e2abdedebd5934f3d941d01c32cfc75e26
    related-to-bug: 6647465
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Remove obsolete drm manager code
    
    bug: 9545965
    Change-Id: Ia6e09efa826b1349d027045e782980daeb7d7596
    (cherry picked from commit f355f18aa2cc1706761e373fe19298a9ccc9c75a)
    Remove obsolete drm manager code
    
    bug: 9545965
    Change-Id: Ia6e09efa826b1349d027045e782980daeb7d7596
    Let getOriginalMimeType() take a fd passed from drm java applications
    
    This patch enables the drm framework to avoid opening files directly.
    As a result, the drm framework no longer needs the sdcard read permision.
    
    o related-to-bug: 6426185
    
    Change-Id: Ib176c35ef4b1a1a405e8e954f19a7985266f2510
    Add a new API on DRM Framework for streaming
    
    In case of DRM streaming, decrypt session can start just after
    receiving the header, and it doesn't need to wait for the entire
    content. However, current API of DRM framework only accepts file
    handle or URI. With this new API, DRM session can start
    without waiting for the entire content.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I74375fe127df636067f1c300ea91654ba3d1aa3c
    Separate sniffing from session initialization
    
    This avoid lengthy/duplicate sniffing for drm plugins when a decrypt session is opened
    
    o The change is backward compatibile in that no update is required
      for existing drm plug-ins if they do not plan to provide separate
      sniffer/extractor
    
    related-to-bug: 5725548
    
    Change-Id: I7fc4caf82d77472da4e2bc7b5d31060fb54fd84c
    Fix for bug 4371230.
    - Generate unique ID for each DrmManagerClient in native side
    - Fix the bug where multiple clients could use the same ID
    - Return the correct unique ID back to Java
    - Add a flag in the unique ID to separate native client and Java client
    
    Change-Id: Ia4574b6b0a526f2335a65380975dc62f9a6e7f9b
    Add memory leak tracking/debugging code to drm server
    
    bug - 4099038
    
    Change-Id: I6c048eaf3d7f34bc144b8daaa5fdef1ed474af66
    64-bit file size/offset support for DRM framework
    
    Change-Id: I0ba7147607825234df9fa28732e1bba344e82e79
    Update of DRM Framework.
    
    -Access permission handling
      Introduce an internal function which allows the desired process to
      access decryption flow. This new function is just for reference and
      each OEM manufacturer should implement/replace with their solutions.
    -New API, getMetadata()
      This API is for retrieving media metadata from container-based DRM,
      such as OMA forward-lock content. This API asks DRM agent to retrieve
      media metadata hiddein inside of DRM special container.
    -New API, acquireRights()
      This API wraps acquireDrmInfo() and processDrmInfo().
      If DRM agent has valid implementation of both APIs,
      Application can acquire DrmRights only by calling this API.
    -Bug fix in event loop of OnInfoListener.
      Separate OnInfo event loop from mail thread loop so as to avoid
      the issue that message is not dispatched when mail thread is busy.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I04ee3e0988152a71e221f2256d83253749a29da0
    Update of DRM framework
    
     - Overload openDecryptSession() with uri parameter
       in order to accept URI of DRM content,
       Following API is added,
           DecryptHandle*openDecryptSession(const char* uri);.
     - Unify texisting three event types of processDrmInfo()
       so that caller of DRM framework does not have to handle many event types.
     - Let DrmManagerService call load/unload plugins API so that
       client of DRM framework does not have to manage plug-in load/unload.
     - Trivial fix in DrmManagerClient.java is also incorporated.
    
    Changes are made by Sony Corporation.
    
    Change-Id: If62b47fa0360718fdc943e6e6143671d7db26adc
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Remove obsolete drm manager code
    
    bug: 9545965
    Change-Id: Ia6e09efa826b1349d027045e782980daeb7d7596
    (cherry picked from commit f355f18aa2cc1706761e373fe19298a9ccc9c75a)
    Remove obsolete drm manager code
    
    bug: 9545965
    Change-Id: Ia6e09efa826b1349d027045e782980daeb7d7596
    Fix for not ending up in an eternal loop in DrmManager.
    
    In the original code a random number is used to get try
    to find an empty slot in the list of free DRM id's.
    When you reached the limit of 0xfff id's you ended up
    in an eternal loop causing ANRs.
    
    Updated by James Dong <jdong@google.com>.
    
    Change-Id: I70176cc3f770223c4a8060f9739fe2bc03a703d9
    Fix for not ending up in an eternal loop in DrmManager.
    
    In the original code a random number is used to get try
    to find an empty slot in the list of free DRM id's.
    When you reached the limit of 0xfff id's you ended up
    in an eternal loop causing ANRs.
    
    Updated by James Dong <jdong@google.com>.
    
    Change-Id: I70176cc3f770223c4a8060f9739fe2bc03a703d9
    Let getOriginalMimeType() take a fd passed from drm java applications
    
    This patch enables the drm framework to avoid opening files directly.
    As a result, the drm framework no longer needs the sdcard read permision.
    
    o related-to-bug: 6426185
    
    Change-Id: Ib176c35ef4b1a1a405e8e954f19a7985266f2510
    Add a new API on DRM Framework for streaming
    
    In case of DRM streaming, decrypt session can start just after
    receiving the header, and it doesn't need to wait for the entire
    content. However, current API of DRM framework only accepts file
    handle or URI. With this new API, DRM session can start
    without waiting for the entire content.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I74375fe127df636067f1c300ea91654ba3d1aa3c
    Separate sniffing from session initialization
    
    This avoid lengthy/duplicate sniffing for drm plugins when a decrypt session is opened
    
    o The change is backward compatibile in that no update is required
      for existing drm plug-ins if they do not plan to provide separate
      sniffer/extractor
    
    related-to-bug: 5725548
    
    Change-Id: I7fc4caf82d77472da4e2bc7b5d31060fb54fd84c
    Fix for bug 4371230.
    - Generate unique ID for each DrmManagerClient in native side
    - Fix the bug where multiple clients could use the same ID
    - Return the correct unique ID back to Java
    - Add a flag in the unique ID to separate native client and Java client
    
    Change-Id: Ia4574b6b0a526f2335a65380975dc62f9a6e7f9b
    Bug fixes of DRM framework.
    
    - Add death listener to clean-up drmserver appropriately
      when drmserver died.
    - Remove "static" declaration of mUniqueIdVector because it was not
      needed to be static variable.
    - Remove "class DrmContentIds;" because the class does not exist.
    - contentPath in saveRights() could be empty because
      it is not required by some DRM schemes.
    - Fix naming convention to use sXXX for static variables.
    - Fix typo
    
    Change-Id: I7d440488fc074c200f1009d1bafafeffebd690b2
    - Some change on the DrmManager in order to support feature request 4082089.
        In DrmManager, we currently lock both processDrmInfo() and onInfo() which is
        ok for now since processDrmInfo() is async call, and it will return without
        waiting for onInfo() call. However, if we send an event in processDrmInfo(),
        we will got deadlock here because we need to invoke onInf() which will wait
        for processDrmInfo() to release the lock. Use different lock for onInfo().
    - Remove some redundent mutex lock.
    
    Change-Id: I59c794f95ba1693425723224114fa975cf9b235f
    64-bit file size/offset support for DRM framework
    
    Change-Id: I0ba7147607825234df9fa28732e1bba344e82e79
    Update of DRM Framework.
    
    -Access permission handling
      Introduce an internal function which allows the desired process to
      access decryption flow. This new function is just for reference and
      each OEM manufacturer should implement/replace with their solutions.
    -New API, getMetadata()
      This API is for retrieving media metadata from container-based DRM,
      such as OMA forward-lock content. This API asks DRM agent to retrieve
      media metadata hiddein inside of DRM special container.
    -New API, acquireRights()
      This API wraps acquireDrmInfo() and processDrmInfo().
      If DRM agent has valid implementation of both APIs,
      Application can acquire DrmRights only by calling this API.
    -Bug fix in event loop of OnInfoListener.
      Separate OnInfo event loop from mail thread loop so as to avoid
      the issue that message is not dispatched when mail thread is busy.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I04ee3e0988152a71e221f2256d83253749a29da0
    Update of DRM framework
    
     - Overload openDecryptSession() with uri parameter
       in order to accept URI of DRM content,
       Following API is added,
           DecryptHandle*openDecryptSession(const char* uri);.
     - Unify texisting three event types of processDrmInfo()
       so that caller of DRM framework does not have to handle many event types.
     - Let DrmManagerService call load/unload plugins API so that
       client of DRM framework does not have to manage plug-in load/unload.
     - Trivial fix in DrmManagerClient.java is also incorporated.
    
    Changes are made by Sony Corporation.
    
    Change-Id: If62b47fa0360718fdc943e6e6143671d7db26adc
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    -Fix some typo
    -Remove one unnecessary memory allocation
    
    Change-Id: Icea21f33d2c7891333e06429d2f382389e5bd27f
    Bug 4016329 do full string comparisons
    
    Use full string comparisons instead of partial for
      file extension and MIME type.
    Do case-insensitive comparison of MIME type and file extensions.
    Fix error in comment for String8::getPathExtension.
    Remove dead code -- StringTokenizer is unused.
    
    Change-Id: I322be6235abbdaab5f7eafa48926dbb2cf46dc29
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Remove obsolete drm manager code
    
    bug: 9545965
    Change-Id: Ia6e09efa826b1349d027045e782980daeb7d7596
    (cherry picked from commit f355f18aa2cc1706761e373fe19298a9ccc9c75a)
    Remove obsolete drm manager code
    
    bug: 9545965
    Change-Id: Ia6e09efa826b1349d027045e782980daeb7d7596
    Let getOriginalMimeType() take a fd passed from drm java applications
    
    This patch enables the drm framework to avoid opening files directly.
    As a result, the drm framework no longer needs the sdcard read permision.
    
    o related-to-bug: 6426185
    
    Change-Id: Ib176c35ef4b1a1a405e8e954f19a7985266f2510
    Add a new API on DRM Framework for streaming
    
    In case of DRM streaming, decrypt session can start just after
    receiving the header, and it doesn't need to wait for the entire
    content. However, current API of DRM framework only accepts file
    handle or URI. With this new API, DRM session can start
    without waiting for the entire content.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I74375fe127df636067f1c300ea91654ba3d1aa3c
    Separate sniffing from session initialization
    
    This avoid lengthy/duplicate sniffing for drm plugins when a decrypt session is opened
    
    o The change is backward compatibile in that no update is required
      for existing drm plug-ins if they do not plan to provide separate
      sniffer/extractor
    
    related-to-bug: 5725548
    
    Change-Id: I7fc4caf82d77472da4e2bc7b5d31060fb54fd84c
    Fix for bug 4371230.
    - Generate unique ID for each DrmManagerClient in native side
    - Fix the bug where multiple clients could use the same ID
    - Return the correct unique ID back to Java
    - Add a flag in the unique ID to separate native client and Java client
    
    Change-Id: Ia4574b6b0a526f2335a65380975dc62f9a6e7f9b
    Fix for bug 4165823.
    Add death listener to clean-up drmserver appropriately when drmserver died.
    Cherry-pick from master. Do not merge.
    
    Change-Id: I7782cc96ce173a87ebfd315950f3880fa90294d6
    Bug fixes of DRM framework.
    
    - Add death listener to clean-up drmserver appropriately
      when drmserver died.
    - Remove "static" declaration of mUniqueIdVector because it was not
      needed to be static variable.
    - Remove "class DrmContentIds;" because the class does not exist.
    - contentPath in saveRights() could be empty because
      it is not required by some DRM schemes.
    - Fix naming convention to use sXXX for static variables.
    - Fix typo
    
    Change-Id: I7d440488fc074c200f1009d1bafafeffebd690b2
    Fix for bug 3477330
    This patch fixs a crash bug caused by using a NULL DecryptHandle pointer.
    Fix by using sp<DecryptHandle> instead.
    
    Change-Id: Icbd59858385e8256125a615a3c82656b25319d44
    64-bit file size/offset support for DRM framework
    
    Change-Id: I0ba7147607825234df9fa28732e1bba344e82e79
    Update of DRM Framework.
    
    -Access permission handling
      Introduce an internal function which allows the desired process to
      access decryption flow. This new function is just for reference and
      each OEM manufacturer should implement/replace with their solutions.
    -New API, getMetadata()
      This API is for retrieving media metadata from container-based DRM,
      such as OMA forward-lock content. This API asks DRM agent to retrieve
      media metadata hiddein inside of DRM special container.
    -New API, acquireRights()
      This API wraps acquireDrmInfo() and processDrmInfo().
      If DRM agent has valid implementation of both APIs,
      Application can acquire DrmRights only by calling this API.
    -Bug fix in event loop of OnInfoListener.
      Separate OnInfo event loop from mail thread loop so as to avoid
      the issue that message is not dispatched when mail thread is busy.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I04ee3e0988152a71e221f2256d83253749a29da0
    Update of DRM framework
    
     - Overload openDecryptSession() with uri parameter
       in order to accept URI of DRM content,
       Following API is added,
           DecryptHandle*openDecryptSession(const char* uri);.
     - Unify texisting three event types of processDrmInfo()
       so that caller of DRM framework does not have to handle many event types.
     - Let DrmManagerService call load/unload plugins API so that
       client of DRM framework does not have to manage plug-in load/unload.
     - Trivial fix in DrmManagerClient.java is also incorporated.
    
    Changes are made by Sony Corporation.
    
    Change-Id: If62b47fa0360718fdc943e6e6143671d7db26adc
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Remove obsolete drm manager code
    
    bug: 9545965
    Change-Id: Ia6e09efa826b1349d027045e782980daeb7d7596
    (cherry picked from commit f355f18aa2cc1706761e373fe19298a9ccc9c75a)
    Remove obsolete drm manager code
    
    bug: 9545965
    Change-Id: Ia6e09efa826b1349d027045e782980daeb7d7596
    Let getOriginalMimeType() take a fd passed from drm java applications
    
    This patch enables the drm framework to avoid opening files directly.
    As a result, the drm framework no longer needs the sdcard read permision.
    
    o related-to-bug: 6426185
    
    Change-Id: Ib176c35ef4b1a1a405e8e954f19a7985266f2510
    Add a new API on DRM Framework for streaming
    
    In case of DRM streaming, decrypt session can start just after
    receiving the header, and it doesn't need to wait for the entire
    content. However, current API of DRM framework only accepts file
    handle or URI. With this new API, DRM session can start
    without waiting for the entire content.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I74375fe127df636067f1c300ea91654ba3d1aa3c
    Separate sniffing from session initialization
    
    This avoid lengthy/duplicate sniffing for drm plugins when a decrypt session is opened
    
    o The change is backward compatibile in that no update is required
      for existing drm plug-ins if they do not plan to provide separate
      sniffer/extractor
    
    related-to-bug: 5725548
    
    Change-Id: I7fc4caf82d77472da4e2bc7b5d31060fb54fd84c
    Fix for bug 4371230.
    - Generate unique ID for each DrmManagerClient in native side
    - Fix the bug where multiple clients could use the same ID
    - Return the correct unique ID back to Java
    - Add a flag in the unique ID to separate native client and Java client
    
    Change-Id: Ia4574b6b0a526f2335a65380975dc62f9a6e7f9b
    Bug fixes of DRM framework.
    
    - Add death listener to clean-up drmserver appropriately
      when drmserver died.
    - Remove "static" declaration of mUniqueIdVector because it was not
      needed to be static variable.
    - Remove "class DrmContentIds;" because the class does not exist.
    - contentPath in saveRights() could be empty because
      it is not required by some DRM schemes.
    - Fix naming convention to use sXXX for static variables.
    - Fix typo
    
    Change-Id: I7d440488fc074c200f1009d1bafafeffebd690b2
    64-bit file size/offset support for DRM framework
    
    Change-Id: I0ba7147607825234df9fa28732e1bba344e82e79
    Update of DRM Framework.
    
    -Access permission handling
      Introduce an internal function which allows the desired process to
      access decryption flow. This new function is just for reference and
      each OEM manufacturer should implement/replace with their solutions.
    -New API, getMetadata()
      This API is for retrieving media metadata from container-based DRM,
      such as OMA forward-lock content. This API asks DRM agent to retrieve
      media metadata hiddein inside of DRM special container.
    -New API, acquireRights()
      This API wraps acquireDrmInfo() and processDrmInfo().
      If DRM agent has valid implementation of both APIs,
      Application can acquire DrmRights only by calling this API.
    -Bug fix in event loop of OnInfoListener.
      Separate OnInfo event loop from mail thread loop so as to avoid
      the issue that message is not dispatched when mail thread is busy.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I04ee3e0988152a71e221f2256d83253749a29da0
    Update of DRM framework
    
     - Overload openDecryptSession() with uri parameter
       in order to accept URI of DRM content,
       Following API is added,
           DecryptHandle*openDecryptSession(const char* uri);.
     - Unify texisting three event types of processDrmInfo()
       so that caller of DRM framework does not have to handle many event types.
     - Let DrmManagerService call load/unload plugins API so that
       client of DRM framework does not have to manage plug-in load/unload.
     - Trivial fix in DrmManagerClient.java is also incorporated.
    
    Changes are made by Sony Corporation.
    
    Change-Id: If62b47fa0360718fdc943e6e6143671d7db26adc
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Let getOriginalMimeType() take a fd passed from drm java applications
    
    This patch enables the drm framework to avoid opening files directly.
    As a result, the drm framework no longer needs the sdcard read permision.
    
    o related-to-bug: 6426185
    
    Change-Id: Ib176c35ef4b1a1a405e8e954f19a7985266f2510
    Add a new API on DRM Framework for streaming
    
    In case of DRM streaming, decrypt session can start just after
    receiving the header, and it doesn't need to wait for the entire
    content. However, current API of DRM framework only accepts file
    handle or URI. With this new API, DRM session can start
    without waiting for the entire content.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I74375fe127df636067f1c300ea91654ba3d1aa3c
    Separate sniffing from session initialization
    
    This avoid lengthy/duplicate sniffing for drm plugins when a decrypt session is opened
    
    o The change is backward compatibile in that no update is required
      for existing drm plug-ins if they do not plan to provide separate
      sniffer/extractor
    
    related-to-bug: 5725548
    
    Change-Id: I7fc4caf82d77472da4e2bc7b5d31060fb54fd84c
    Fix for bug 4371230.
    - Generate unique ID for each DrmManagerClient in native side
    - Fix the bug where multiple clients could use the same ID
    - Return the correct unique ID back to Java
    - Add a flag in the unique ID to separate native client and Java client
    
    Change-Id: Ia4574b6b0a526f2335a65380975dc62f9a6e7f9b
    64-bit file size/offset support for DRM framework
    
    Change-Id: I0ba7147607825234df9fa28732e1bba344e82e79
    Update of DRM Framework.
    
    -Access permission handling
      Introduce an internal function which allows the desired process to
      access decryption flow. This new function is just for reference and
      each OEM manufacturer should implement/replace with their solutions.
    -New API, getMetadata()
      This API is for retrieving media metadata from container-based DRM,
      such as OMA forward-lock content. This API asks DRM agent to retrieve
      media metadata hiddein inside of DRM special container.
    -New API, acquireRights()
      This API wraps acquireDrmInfo() and processDrmInfo().
      If DRM agent has valid implementation of both APIs,
      Application can acquire DrmRights only by calling this API.
    -Bug fix in event loop of OnInfoListener.
      Separate OnInfo event loop from mail thread loop so as to avoid
      the issue that message is not dispatched when mail thread is busy.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I04ee3e0988152a71e221f2256d83253749a29da0
    Update of DRM framework
    
     - Overload openDecryptSession() with uri parameter
       in order to accept URI of DRM content,
       Following API is added,
           DecryptHandle*openDecryptSession(const char* uri);.
     - Unify texisting three event types of processDrmInfo()
       so that caller of DRM framework does not have to handle many event types.
     - Let DrmManagerService call load/unload plugins API so that
       client of DRM framework does not have to manage plug-in load/unload.
     - Trivial fix in DrmManagerClient.java is also incorporated.
    
    Changes are made by Sony Corporation.
    
    Change-Id: If62b47fa0360718fdc943e6e6143671d7db26adc
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Let getOriginalMimeType() take a fd passed from drm java applications
    
    This patch enables the drm framework to avoid opening files directly.
    As a result, the drm framework no longer needs the sdcard read permision.
    
    o related-to-bug: 6426185
    
    Change-Id: Ib176c35ef4b1a1a405e8e954f19a7985266f2510
    Add a new API on DRM Framework for streaming
    
    In case of DRM streaming, decrypt session can start just after
    receiving the header, and it doesn't need to wait for the entire
    content. However, current API of DRM framework only accepts file
    handle or URI. With this new API, DRM session can start
    without waiting for the entire content.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I74375fe127df636067f1c300ea91654ba3d1aa3c
    Separate sniffing from session initialization
    
    This avoid lengthy/duplicate sniffing for drm plugins when a decrypt session is opened
    
    o The change is backward compatibile in that no update is required
      for existing drm plug-ins if they do not plan to provide separate
      sniffer/extractor
    
    related-to-bug: 5725548
    
    Change-Id: I7fc4caf82d77472da4e2bc7b5d31060fb54fd84c
    Bug fixes of DRM framework.
    
    - Add death listener to clean-up drmserver appropriately
      when drmserver died.
    - Remove "static" declaration of mUniqueIdVector because it was not
      needed to be static variable.
    - Remove "class DrmContentIds;" because the class does not exist.
    - contentPath in saveRights() could be empty because
      it is not required by some DRM schemes.
    - Fix naming convention to use sXXX for static variables.
    - Fix typo
    
    Change-Id: I7d440488fc074c200f1009d1bafafeffebd690b2
    64-bit file size/offset support for DRM framework
    
    Change-Id: I0ba7147607825234df9fa28732e1bba344e82e79
    Update of DRM Framework.
    
    -Access permission handling
      Introduce an internal function which allows the desired process to
      access decryption flow. This new function is just for reference and
      each OEM manufacturer should implement/replace with their solutions.
    -New API, getMetadata()
      This API is for retrieving media metadata from container-based DRM,
      such as OMA forward-lock content. This API asks DRM agent to retrieve
      media metadata hiddein inside of DRM special container.
    -New API, acquireRights()
      This API wraps acquireDrmInfo() and processDrmInfo().
      If DRM agent has valid implementation of both APIs,
      Application can acquire DrmRights only by calling this API.
    -Bug fix in event loop of OnInfoListener.
      Separate OnInfo event loop from mail thread loop so as to avoid
      the issue that message is not dispatched when mail thread is busy.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I04ee3e0988152a71e221f2256d83253749a29da0
    Update of DRM framework
    
     - Overload openDecryptSession() with uri parameter
       in order to accept URI of DRM content,
       Following API is added,
           DecryptHandle*openDecryptSession(const char* uri);.
     - Unify texisting three event types of processDrmInfo()
       so that caller of DRM framework does not have to handle many event types.
     - Let DrmManagerService call load/unload plugins API so that
       client of DRM framework does not have to manage plug-in load/unload.
     - Trivial fix in DrmManagerClient.java is also incorporated.
    
    Changes are made by Sony Corporation.
    
    Change-Id: If62b47fa0360718fdc943e6e6143671d7db26adc
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    You don't need LOCAL_SHARED_LIBRARIES/LOCAL_STATIC_LIBRARIES to build a static library.
    
    Change-Id: Ia2c4b4fb3b78cbe0d2856cec073b2c7f9c28d3cb
    Removed unnecessary include JNI from two drm Android.mk files
    
    Change-Id: I7b7a1acce4d6db748ff193270e73bc3582ba2380
    AV Android make files changes
    
    o plus a few file relocation: ActivityManager.cpp/h, SoundPool.h, etc
    o remove some runtime dependencies to libandroid, libandroid_runtime, etc
    
    Change-Id: I047a47c5fb361dd5cf85cd98798c39f629a75d10
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
    Make DRM libraries optional
    
    Change-Id: I0b591b75a035bc6d8049c85b595966845fedaa15
    fix build
    
    Change-Id: Iccb40c8c5df879288f35e0940c721d306fb75c12
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Add NOTICE and MODULE_LICENSE_APACH2 to libs build under /frameworks/av/
    
    Change-Id: I0a3af3e2abdedebd5934f3d941d01c32cfc75e26
    related-to-bug: 6647465
    Copied MODULE_LICENSE_APACH2 and NOTICE from frameworks/base to frameworks/av
    
    Change-Id: I48c927b9690bf902ab167d60171c0ee7995687e0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add NOTICE and MODULE_LICENSE_APACH2 to libs build under /frameworks/av/
    
    Change-Id: I0a3af3e2abdedebd5934f3d941d01c32cfc75e26
    related-to-bug: 6647465
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Bug fixes in OMA DRM v1 Forward Lock Agent
    
    A couple of fixes in the Forward Lock Agent.
    The DRM Framework isn't thread safe so the Forward Lock Agent needs
    to protect the private structures.
    Base64-encoded content with LF-only instead of CRLF line breaks is now
    accepted.
    A fix for non-standard boundary characters.
    The debug prints are also turned off as default.
    
    Change-Id: I8ab417231380fbe1c371d18a147773ceabc6f69f
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Runtime dump support for MediaWriter
    
    Change-Id: I10b2c474de612ee4cef4b7c9eae2ee1dd8c2e895
    Make MediaWriter stop and pause return errors if necessary
    
    o Make the API consistent with SF framework, which the MediaSource
      provides a return status for stop
    
    o Also, helps to convey errors that occurred right when a
      premature stop() is called, leading to a potentially
      mal-formed output file.
    
    Change-Id: I52a932345f38570fdf8ea04d67d73dd94ccd30ef
    Support for writing the extracted data to an .mp4 file in the stagefright commandline tool.
    
    Change-Id: I972324a8fc9757e6e8116b0270ec0882106f8733
    Separate MediaRecorderClient with MediaPlayerClient
    
    - An alternative would be to define a common base class that
      both MediaRecorderClient and MediaPlayerClient can derive.
      But since the common code, onTransact() and notify() uses
      some Binder code, having a common base class may not gain
      us too much in terms of code reuse.
    
    Change-Id: Ibc06720278ad173fceacff3d267b7060856c6316
    Enable passing parameters to the MediaWriter at runtime (at start() call).
    
    - estimate the moov box size for mp4 file writer based on the file
      size/duration limit and target bit rate.
    - can switch to use 64 bit file offset at runtime
    
    rebased
    
    Change-Id: Ibbe1f57e91ab2605820d5d96e8048d11e5559c53
    Initial checkin for pause and resume control
    
    Change-Id: Ibdcf7bea5fb66baa81878704ba4091dfcfe382ee
    Handle recording file size and/or duration limit
    
    Change-Id: Ib9ed1f3ebd8fef550cc130a7ef11f2905fa9aedc
    Support for audio recording into AMR NB/WB files as well as audio tracks in MPEG4 files.
    
    related-to-bug: 2295449
    eclair snapshot
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Bug fixes in OMA DRM v1 Forward Lock Agent
    
    A couple of fixes in the Forward Lock Agent.
    The DRM Framework isn't thread safe so the Forward Lock Agent needs
    to protect the private structures.
    Base64-encoded content with LF-only instead of CRLF line breaks is now
    accepted.
    A fix for non-standard boundary characters.
    The debug prints are also turned off as default.
    
    Change-Id: I8ab417231380fbe1c371d18a147773ceabc6f69f
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Removed unnecessary include JNI from two drm Android.mk files
    
    Change-Id: I7b7a1acce4d6db748ff193270e73bc3582ba2380
    AV Android make files changes
    
    o plus a few file relocation: ActivityManager.cpp/h, SoundPool.h, etc
    o remove some runtime dependencies to libandroid, libandroid_runtime, etc
    
    Change-Id: I047a47c5fb361dd5cf85cd98798c39f629a75d10
    Bug fixes in OMA DRM v1 Forward Lock Agent
    
    A couple of fixes in the Forward Lock Agent.
    The DRM Framework isn't thread safe so the Forward Lock Agent needs
    to protect the private structures.
    Base64-encoded content with LF-only instead of CRLF line breaks is now
    accepted.
    A fix for non-standard boundary characters.
    The debug prints are also turned off as default.
    
    Change-Id: I8ab417231380fbe1c371d18a147773ceabc6f69f
    frameworks/base: remove LOCAL_PRELINK_MODULE
    
    Change-Id: I54dd62ebef47e7690afa5a858f3cad941b135481
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    rename /system/lib/drm/plugins/native/ to /system/lib/drm-plugin/
    
    Change-Id: I043489cb81e53ed7cd5abd9769004da5ecd4d91d
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
    Add NOTICE and MODULE_LICENSE_APACH2 to libs build under /frameworks/av/
    
    Change-Id: I0a3af3e2abdedebd5934f3d941d01c32cfc75e26
    related-to-bug: 6647465
    Copied MODULE_LICENSE_APACH2 and NOTICE from frameworks/base to frameworks/av
    
    Change-Id: I48c927b9690bf902ab167d60171c0ee7995687e0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add NOTICE and MODULE_LICENSE_APACH2 to libs build under /frameworks/av/
    
    Change-Id: I0a3af3e2abdedebd5934f3d941d01c32cfc75e26
    related-to-bug: 6647465
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Let getOriginalMimeType() take a fd passed from drm java applications
    
    This patch enables the drm framework to avoid opening files directly.
    As a result, the drm framework no longer needs the sdcard read permision.
    
    o related-to-bug: 6426185
    
    Change-Id: Ib176c35ef4b1a1a405e8e954f19a7985266f2510
    make sure that lower-case mime and file suffix is used to check against the supported ones
    
    Change-Id: I6a20832f6a2dfb8554dbddef0dee87cc21c05c80
    Avoid checking supported mime types or file suffixes in multiple places
    
    Change-Id: I47d24070c7bda385cd1d7fa1f6a75dbb1f82b476
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Bug fixes in OMA DRM v1 Forward Lock Agent
    
    A couple of fixes in the Forward Lock Agent.
    The DRM Framework isn't thread safe so the Forward Lock Agent needs
    to protect the private structures.
    Base64-encoded content with LF-only instead of CRLF line breaks is now
    accepted.
    A fix for non-standard boundary characters.
    The debug prints are also turned off as default.
    
    Change-Id: I8ab417231380fbe1c371d18a147773ceabc6f69f
    Fix a memory leak in the Forward Lock plugin.
    For bug 4770217.
    
    Change-Id: I14f4d4ead524c661e68a20738e7a50e4d8fd92ea
    To remove log spam in the Forward Lock DRM plugin.
    Fix for bug 4619159.
    
    Change-Id: Id4984aade4cceb59a1fdf904949f62535decd2a4
    Duplicated fileDesc is not closed when input file is not forward-lock content.
    Fix for bug 4606053.
    
    Change-Id: I1b45457d8cdc75d268631911f46ce6ec931b1770
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
    Let getOriginalMimeType() take a fd passed from drm java applications
    
    This patch enables the drm framework to avoid opening files directly.
    As a result, the drm framework no longer needs the sdcard read permision.
    
    o related-to-bug: 6426185
    
    Change-Id: Ib176c35ef4b1a1a405e8e954f19a7985266f2510
    Avoid checking supported mime types or file suffixes in multiple places
    
    Change-Id: I47d24070c7bda385cd1d7fa1f6a75dbb1f82b476
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
    Remove unnecessary lib dependencies in the FL makefile
    
    Change-Id: Ia1e81a91b4b8dc1bf3558a4aa06e90a955c6fbe6
    Remove unnecessary lib dependencies in the FL makefile
    
    Change-Id: Ia1e81a91b4b8dc1bf3558a4aa06e90a955c6fbe6
    AV Android make files changes
    
    o plus a few file relocation: ActivityManager.cpp/h, SoundPool.h, etc
    o remove some runtime dependencies to libandroid, libandroid_runtime, etc
    
    Change-Id: I047a47c5fb361dd5cf85cd98798c39f629a75d10
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Let getOriginalMimeType() take a fd passed from drm java applications
    
    This patch enables the drm framework to avoid opening files directly.
    As a result, the drm framework no longer needs the sdcard read permision.
    
    o related-to-bug: 6426185
    
    Change-Id: Ib176c35ef4b1a1a405e8e954f19a7985266f2510
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
    Fixed bugs where the content of buffer holding keys was cleared using a wrong size in forward lock
    
    Modified by James Dong <jdong@google.com>
    
    Change-Id: Iaacfc79b2b26bdee7046d8555e3b4e0bc224c3c5
    Fixed bugs where the content of buffer holding keys was cleared using a wrong size in forward lock
    
    Modified by James Dong <jdong@google.com>
    
    Change-Id: Iaacfc79b2b26bdee7046d8555e3b4e0bc224c3c5
    Let getOriginalMimeType() take a fd passed from drm java applications
    
    This patch enables the drm framework to avoid opening files directly.
    As a result, the drm framework no longer needs the sdcard read permision.
    
    o related-to-bug: 6426185
    
    Change-Id: Ib176c35ef4b1a1a405e8e954f19a7985266f2510
    Added an failure log message when the fwdlock engine fails to open a given file.
    
    Change-Id: I0e7f60b61f03fde046fc1ad668b28cdee635898b
    Bug fixes in OMA DRM v1 Forward Lock Agent
    
    A couple of fixes in the Forward Lock Agent.
    The DRM Framework isn't thread safe so the Forward Lock Agent needs
    to protect the private structures.
    Base64-encoded content with LF-only instead of CRLF line breaks is now
    accepted.
    A fix for non-standard boundary characters.
    The debug prints are also turned off as default.
    
    Change-Id: I8ab417231380fbe1c371d18a147773ceabc6f69f
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
    Remove unnecessary lib dependencies in the FL makefile
    
    Change-Id: Ia1e81a91b4b8dc1bf3558a4aa06e90a955c6fbe6
    Remove unnecessary lib dependencies in the FL makefile
    
    Change-Id: Ia1e81a91b4b8dc1bf3558a4aa06e90a955c6fbe6
    AV Android make files changes
    
    o plus a few file relocation: ActivityManager.cpp/h, SoundPool.h, etc
    o remove some runtime dependencies to libandroid, libandroid_runtime, etc
    
    Change-Id: I047a47c5fb361dd5cf85cd98798c39f629a75d10
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Fixed bugs where the content of buffer holding keys was cleared using a wrong size in forward lock
    
    Modified by James Dong <jdong@google.com>
    
    Change-Id: Iaacfc79b2b26bdee7046d8555e3b4e0bc224c3c5
    Fixed bugs where the content of buffer holding keys was cleared using a wrong size in forward lock
    
    Modified by James Dong <jdong@google.com>
    
    Change-Id: Iaacfc79b2b26bdee7046d8555e3b4e0bc224c3c5
    Remove some unused forward lock code
    
    Change-Id: I94d01f6ad5b1676cc4d6a95807e166f3c25aa79c
    Bug fixes in OMA DRM v1 Forward Lock Agent
    
    A couple of fixes in the Forward Lock Agent.
    The DRM Framework isn't thread safe so the Forward Lock Agent needs
    to protect the private structures.
    Base64-encoded content with LF-only instead of CRLF line breaks is now
    accepted.
    A fix for non-standard boundary characters.
    The debug prints are also turned off as default.
    
    Change-Id: I8ab417231380fbe1c371d18a147773ceabc6f69f
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
    Remove some unused forward lock code
    
    Change-Id: I94d01f6ad5b1676cc4d6a95807e166f3c25aa79c
    Initial OMA DRM forward lock contribution
    
    OMA DRM forward lock agent is plugged into the
    Open DRM framework. Forward lock agent implementation contains:
    - Forward lock engine to communicate with framework
    - Converter to encrypt the original file into a special format
    - Decoder to feed the decrypted data for rendering
    - Lightweight unique key-encryption mechanism
    - Documentation
    
    Change-Id: Id828ebc30b8147b58b14960a73571648bc01ae94
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    AV Android make files changes
    
    o plus a few file relocation: ActivityManager.cpp/h, SoundPool.h, etc
    o remove some runtime dependencies to libandroid, libandroid_runtime, etc
    
    Change-Id: I047a47c5fb361dd5cf85cd98798c39f629a75d10
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    frameworks/base: remove LOCAL_PRELINK_MODULE
    
    Change-Id: I54dd62ebef47e7690afa5a858f3cad941b135481
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Make DRM libraries optional
    
    Change-Id: I0b591b75a035bc6d8049c85b595966845fedaa15
    fix build
    
    Change-Id: Idccb3f2499bbaac61099d8232cadd633b93ad846
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Add NOTICE and MODULE_LICENSE_APACH2 to libs build under /frameworks/av/
    
    Change-Id: I0a3af3e2abdedebd5934f3d941d01c32cfc75e26
    related-to-bug: 6647465
    Copied MODULE_LICENSE_APACH2 and NOTICE from frameworks/base to frameworks/av
    
    Change-Id: I48c927b9690bf902ab167d60171c0ee7995687e0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add NOTICE and MODULE_LICENSE_APACH2 to libs build under /frameworks/av/
    
    Change-Id: I0a3af3e2abdedebd5934f3d941d01c32cfc75e26
    related-to-bug: 6647465
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fixed memory leakage in the DRM framework
    
    Change-Id: Ib1276bec6cafb4e94f8f13b52e50e4987765eec4
    Fixed memory leakage in the DRM framework
    
    Change-Id: Ib1276bec6cafb4e94f8f13b52e50e4987765eec4
    Let getOriginalMimeType() take a fd passed from drm java applications
    
    This patch enables the drm framework to avoid opening files directly.
    As a result, the drm framework no longer needs the sdcard read permision.
    
    o related-to-bug: 6426185
    
    Change-Id: Ib176c35ef4b1a1a405e8e954f19a7985266f2510
    Fixed a buffer overflow bug in DrmPassthruPlugin
    
    Change-Id: I8df2a90409c9266a094a1a0904a5ff76ec483d16
    Turned off log spamming from DrmPassthruPlugin
    
    Change-Id: I2cecdba49cf044d2aafd8aa404d27df311cad401
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    64-bit file size/offset support for DRM framework
    
    Change-Id: I0ba7147607825234df9fa28732e1bba344e82e79
    Update of DRM Framework.
    
    -Access permission handling
      Introduce an internal function which allows the desired process to
      access decryption flow. This new function is just for reference and
      each OEM manufacturer should implement/replace with their solutions.
    -New API, getMetadata()
      This API is for retrieving media metadata from container-based DRM,
      such as OMA forward-lock content. This API asks DRM agent to retrieve
      media metadata hiddein inside of DRM special container.
    -New API, acquireRights()
      This API wraps acquireDrmInfo() and processDrmInfo().
      If DRM agent has valid implementation of both APIs,
      Application can acquire DrmRights only by calling this API.
    -Bug fix in event loop of OnInfoListener.
      Separate OnInfo event loop from mail thread loop so as to avoid
      the issue that message is not dispatched when mail thread is busy.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I04ee3e0988152a71e221f2256d83253749a29da0
    Update of DRM framework
    
     - Overload openDecryptSession() with uri parameter
       in order to accept URI of DRM content,
       Following API is added,
           DecryptHandle*openDecryptSession(const char* uri);.
     - Unify texisting three event types of processDrmInfo()
       so that caller of DRM framework does not have to handle many event types.
     - Let DrmManagerService call load/unload plugins API so that
       client of DRM framework does not have to manage plug-in load/unload.
     - Trivial fix in DrmManagerClient.java is also incorporated.
    
    Changes are made by Sony Corporation.
    
    Change-Id: If62b47fa0360718fdc943e6e6143671d7db26adc
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Let getOriginalMimeType() take a fd passed from drm java applications
    
    This patch enables the drm framework to avoid opening files directly.
    As a result, the drm framework no longer needs the sdcard read permision.
    
    o related-to-bug: 6426185
    
    Change-Id: Ib176c35ef4b1a1a405e8e954f19a7985266f2510
    64-bit file size/offset support for DRM framework
    
    Change-Id: I0ba7147607825234df9fa28732e1bba344e82e79
    Update of DRM Framework.
    
    -Access permission handling
      Introduce an internal function which allows the desired process to
      access decryption flow. This new function is just for reference and
      each OEM manufacturer should implement/replace with their solutions.
    -New API, getMetadata()
      This API is for retrieving media metadata from container-based DRM,
      such as OMA forward-lock content. This API asks DRM agent to retrieve
      media metadata hiddein inside of DRM special container.
    -New API, acquireRights()
      This API wraps acquireDrmInfo() and processDrmInfo().
      If DRM agent has valid implementation of both APIs,
      Application can acquire DrmRights only by calling this API.
    -Bug fix in event loop of OnInfoListener.
      Separate OnInfo event loop from mail thread loop so as to avoid
      the issue that message is not dispatched when mail thread is busy.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I04ee3e0988152a71e221f2256d83253749a29da0
    Update of DRM framework
    
     - Overload openDecryptSession() with uri parameter
       in order to accept URI of DRM content,
       Following API is added,
           DecryptHandle*openDecryptSession(const char* uri);.
     - Unify texisting three event types of processDrmInfo()
       so that caller of DRM framework does not have to handle many event types.
     - Let DrmManagerService call load/unload plugins API so that
       client of DRM framework does not have to manage plug-in load/unload.
     - Trivial fix in DrmManagerClient.java is also incorporated.
    
    Changes are made by Sony Corporation.
    
    Change-Id: If62b47fa0360718fdc943e6e6143671d7db26adc
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    AV Android make files changes
    
    o plus a few file relocation: ActivityManager.cpp/h, SoundPool.h, etc
    o remove some runtime dependencies to libandroid, libandroid_runtime, etc
    
    Change-Id: I047a47c5fb361dd5cf85cd98798c39f629a75d10
    Bug 3361124 Remove drmioserver, continued
    
    Change-Id: I525b7a3ac1a79d3aaa1d3c7853df1c903b38b7c0
    Update of DRM Framework.
    
    -Access permission handling
      Introduce an internal function which allows the desired process to
      access decryption flow. This new function is just for reference and
      each OEM manufacturer should implement/replace with their solutions.
    -New API, getMetadata()
      This API is for retrieving media metadata from container-based DRM,
      such as OMA forward-lock content. This API asks DRM agent to retrieve
      media metadata hiddein inside of DRM special container.
    -New API, acquireRights()
      This API wraps acquireDrmInfo() and processDrmInfo().
      If DRM agent has valid implementation of both APIs,
      Application can acquire DrmRights only by calling this API.
    -Bug fix in event loop of OnInfoListener.
      Separate OnInfo event loop from mail thread loop so as to avoid
      the issue that message is not dispatched when mail thread is busy.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I04ee3e0988152a71e221f2256d83253749a29da0
    Make DRM libraries optional
    
    Change-Id: I0b591b75a035bc6d8049c85b595966845fedaa15
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add NOTICE and MODULE_LICENSE_APACH2 to libs build under /frameworks/av/
    
    Change-Id: I0a3af3e2abdedebd5934f3d941d01c32cfc75e26
    related-to-bug: 6647465
    Copied MODULE_LICENSE_APACH2 and NOTICE from frameworks/base to frameworks/av
    
    Change-Id: I48c927b9690bf902ab167d60171c0ee7995687e0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fixed memory leakage in the DRM framework
    
    Change-Id: Ib1276bec6cafb4e94f8f13b52e50e4987765eec4
    Fixed memory leakage in the DRM framework
    
    Change-Id: Ib1276bec6cafb4e94f8f13b52e50e4987765eec4
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    64-bit file size/offset support for DRM framework
    
    Change-Id: I0ba7147607825234df9fa28732e1bba344e82e79
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Let getOriginalMimeType() take a fd passed from drm java applications
    
    This patch enables the drm framework to avoid opening files directly.
    As a result, the drm framework no longer needs the sdcard read permision.
    
    o related-to-bug: 6426185
    
    Change-Id: Ib176c35ef4b1a1a405e8e954f19a7985266f2510
    Add a new API on DRM Framework for streaming
    
    In case of DRM streaming, decrypt session can start just after
    receiving the header, and it doesn't need to wait for the entire
    content. However, current API of DRM framework only accepts file
    handle or URI. With this new API, DRM session can start
    without waiting for the entire content.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I74375fe127df636067f1c300ea91654ba3d1aa3c
    Separate sniffing from session initialization
    
    This avoid lengthy/duplicate sniffing for drm plugins when a decrypt session is opened
    
    o The change is backward compatibile in that no update is required
      for existing drm plug-ins if they do not plan to provide separate
      sniffer/extractor
    
    related-to-bug: 5725548
    
    Change-Id: I7fc4caf82d77472da4e2bc7b5d31060fb54fd84c
    64-bit file size/offset support for DRM framework
    
    Change-Id: I0ba7147607825234df9fa28732e1bba344e82e79
    Update of DRM Framework.
    
    -Access permission handling
      Introduce an internal function which allows the desired process to
      access decryption flow. This new function is just for reference and
      each OEM manufacturer should implement/replace with their solutions.
    -New API, getMetadata()
      This API is for retrieving media metadata from container-based DRM,
      such as OMA forward-lock content. This API asks DRM agent to retrieve
      media metadata hiddein inside of DRM special container.
    -New API, acquireRights()
      This API wraps acquireDrmInfo() and processDrmInfo().
      If DRM agent has valid implementation of both APIs,
      Application can acquire DrmRights only by calling this API.
    -Bug fix in event loop of OnInfoListener.
      Separate OnInfo event loop from mail thread loop so as to avoid
      the issue that message is not dispatched when mail thread is busy.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I04ee3e0988152a71e221f2256d83253749a29da0
    Update of DRM framework
    
     - Overload openDecryptSession() with uri parameter
       in order to accept URI of DRM content,
       Following API is added,
           DecryptHandle*openDecryptSession(const char* uri);.
     - Unify texisting three event types of processDrmInfo()
       so that caller of DRM framework does not have to handle many event types.
     - Let DrmManagerService call load/unload plugins API so that
       client of DRM framework does not have to manage plug-in load/unload.
     - Trivial fix in DrmManagerClient.java is also incorporated.
    
    Changes are made by Sony Corporation.
    
    Change-Id: If62b47fa0360718fdc943e6e6143671d7db26adc
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Update of DRM framework
    
     - Overload openDecryptSession() with uri parameter
       in order to accept URI of DRM content,
       Following API is added,
           DecryptHandle*openDecryptSession(const char* uri);.
     - Unify texisting three event types of processDrmInfo()
       so that caller of DRM framework does not have to handle many event types.
     - Let DrmManagerService call load/unload plugins API so that
       client of DRM framework does not have to manage plug-in load/unload.
     - Trivial fix in DrmManagerClient.java is also incorporated.
    
    Changes are made by Sony Corporation.
    
    Change-Id: If62b47fa0360718fdc943e6e6143671d7db26adc
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Update of DRM Framework.
    
    -Access permission handling
      Introduce an internal function which allows the desired process to
      access decryption flow. This new function is just for reference and
      each OEM manufacturer should implement/replace with their solutions.
    -New API, getMetadata()
      This API is for retrieving media metadata from container-based DRM,
      such as OMA forward-lock content. This API asks DRM agent to retrieve
      media metadata hiddein inside of DRM special container.
    -New API, acquireRights()
      This API wraps acquireDrmInfo() and processDrmInfo().
      If DRM agent has valid implementation of both APIs,
      Application can acquire DrmRights only by calling this API.
    -Bug fix in event loop of OnInfoListener.
      Separate OnInfo event loop from mail thread loop so as to avoid
      the issue that message is not dispatched when mail thread is busy.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I04ee3e0988152a71e221f2256d83253749a29da0
    Revert "Enhancement for OnInfo callback on DRM Framework"
    
    This reverts commit 5ff7836da0220b3097f36c8a5e82111816ebca62.
    
    Fixes Fatal signal 6 (SIGABRT)" when playing or downloading a video
    bug: 10542864
    
    Change-Id: I7f81a41c3acdbeb571a514b3f65e7ba37d403cca
    Enhancement for OnInfo callback on DRM Framework
    
    In DRM framework, plugins can transmit DrmInfoEvent to Java layer.
    Although DrmInfoEvent has several entries, current implementation
    can only convey integer and String. This change enables plugins
    uto propagate a hashmap to Java layer. The hashmap can have
    one or more Strings and one byte array as value.
    
    Changes are made by Sony Corporation.
    
    bug: 10459159
    
    Change-Id: Ic19265d4ad3db4eda66a3c27e1e08873a8f2a4d7
    (cherry picked from commit 4f782bf0cb69929ebf03de239e2c9bf8e82adf5e)
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Revert "Enhancement for OnInfo callback on DRM Framework"
    
    This reverts commit 5ff7836da0220b3097f36c8a5e82111816ebca62.
    
    Fixes Fatal signal 6 (SIGABRT)" when playing or downloading a video
    bug: 10542864
    
    Change-Id: I7f81a41c3acdbeb571a514b3f65e7ba37d403cca
    Enhancement for OnInfo callback on DRM Framework
    
    In DRM framework, plugins can transmit DrmInfoEvent to Java layer.
    Although DrmInfoEvent has several entries, current implementation
    can only convey integer and String. This change enables plugins
    uto propagate a hashmap to Java layer. The hashmap can have
    one or more Strings and one byte array as value.
    
    Changes are made by Sony Corporation.
    
    bug: 10459159
    
    Change-Id: Ic19265d4ad3db4eda66a3c27e1e08873a8f2a4d7
    (cherry picked from commit 4f782bf0cb69929ebf03de239e2c9bf8e82adf5e)
    Fix for bug 4126103.
    mMessage in DrmInfoEvent is a reference to the message string, so the
    temporary message created in the plugin was going out of scope and
    being destructed while the message was being sent. Changed DrmInfoEvent's
    mMessage to be const String8 instead of const String8&
    
    Change-Id: I174197ad24f3df997d3bc1f897658cfc53862636
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Runtime dump support for MediaWriter
    
    Change-Id: I10b2c474de612ee4cef4b7c9eae2ee1dd8c2e895
    Make MediaWriter stop and pause return errors if necessary
    
    o Make the API consistent with SF framework, which the MediaSource
      provides a return status for stop
    
    o Also, helps to convey errors that occurred right when a
      premature stop() is called, leading to a potentially
      mal-formed output file.
    
    Change-Id: I52a932345f38570fdf8ea04d67d73dd94ccd30ef
    Support for writing the extracted data to an .mp4 file in the stagefright commandline tool.
    
    Change-Id: I972324a8fc9757e6e8116b0270ec0882106f8733
    Separate MediaRecorderClient with MediaPlayerClient
    
    - An alternative would be to define a common base class that
      both MediaRecorderClient and MediaPlayerClient can derive.
      But since the common code, onTransact() and notify() uses
      some Binder code, having a common base class may not gain
      us too much in terms of code reuse.
    
    Change-Id: Ibc06720278ad173fceacff3d267b7060856c6316
    Enable passing parameters to the MediaWriter at runtime (at start() call).
    
    - estimate the moov box size for mp4 file writer based on the file
      size/duration limit and target bit rate.
    - can switch to use 64 bit file offset at runtime
    
    rebased
    
    Change-Id: Ibbe1f57e91ab2605820d5d96e8048d11e5559c53
    Initial checkin for pause and resume control
    
    Change-Id: Ibdcf7bea5fb66baa81878704ba4091dfcfe382ee
    Handle recording file size and/or duration limit
    
    Change-Id: Ib9ed1f3ebd8fef550cc130a7ef11f2905fa9aedc
    Support for audio recording into AMR NB/WB files as well as audio tracks in MPEG4 files.
    
    related-to-bug: 2295449
    eclair snapshot
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Add NOTICE and MODULE_LICENSE_APACH2 to libs build under /frameworks/av/
    
    Change-Id: I0a3af3e2abdedebd5934f3d941d01c32cfc75e26
    related-to-bug: 6647465
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    - Add two sanity checks.
    - Remove one unnecessary line.
    - Clear the extendedData vector in DecryptHandle.
    
    Change-Id: I2610c6d68f12d48cb69323a5eb2ae4b3b3e44dff
    Include strings.h for the strcasecmp prototype.
    
    Change-Id: I83cd464d59d16f1c5f8afa7e50d474ca2bb41713
    Bug 4016329 do full string comparisons
    
    Use full string comparisons instead of partial for
      file extension and MIME type.
    Do case-insensitive comparison of MIME type and file extensions.
    Fix error in comment for String8::getPathExtension.
    Remove dead code -- StringTokenizer is unused.
    
    Change-Id: I322be6235abbdaab5f7eafa48926dbb2cf46dc29
    To support DRM files without file extension
    
    Change-Id: Ie7701048d0dbd51bf358364014a1b41c894b664c
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Remove obsolete drm manager code
    
    bug: 9545965
    Change-Id: Ia6e09efa826b1349d027045e782980daeb7d7596
    (cherry picked from commit f355f18aa2cc1706761e373fe19298a9ccc9c75a)
    Remove obsolete drm manager code
    
    bug: 9545965
    Change-Id: Ia6e09efa826b1349d027045e782980daeb7d7596
    Fixed memory leakage in the DRM framework
    
    Change-Id: Ib1276bec6cafb4e94f8f13b52e50e4987765eec4
    Fixed memory leakage in the DRM framework
    
    Change-Id: Ib1276bec6cafb4e94f8f13b52e50e4987765eec4
    Allow DRM client to pass the FD of an open file to the DRM server.
    
    Part of CL https://googleplex-android-review.googlesource.com/#/c/222797/
    This modifies the marshall/unmarshall of IDrmManagerService::
    acquireDrmInfo() to watch for DrmInfoRequest tag "FileDescriptorKey".
    If tag is present convert string to binary FD, then back to string
    after passage through the interface's Binder.
    
    Relevant bug reports:
    bug: 6426185
    
    Change-Id: I63748b7c986ca0a89613ed3f1c81f24cffb7a9b2
    Allow DRM client to pass the FD of an open file to the DRM server.
    
    Part of CL https://googleplex-android-review.googlesource.com/#/c/222797/
    This modifies the marshall/unmarshall of IDrmManagerService::
    acquireDrmInfo() to watch for DrmInfoRequest tag "FileDescriptorKey".
    If tag is present convert string to binary FD, then back to string
    after passage through the interface's Binder.
    
    Relevant bug reports:
    bug: 6426185
    
    Change-Id: I63748b7c986ca0a89613ed3f1c81f24cffb7a9b2
    Let getOriginalMimeType() take a fd passed from drm java applications
    
    This patch enables the drm framework to avoid opening files directly.
    As a result, the drm framework no longer needs the sdcard read permision.
    
    o related-to-bug: 6426185
    
    Change-Id: Ib176c35ef4b1a1a405e8e954f19a7985266f2510
    Add a new API on DRM Framework for streaming
    
    In case of DRM streaming, decrypt session can start just after
    receiving the header, and it doesn't need to wait for the entire
    content. However, current API of DRM framework only accepts file
    handle or URI. With this new API, DRM session can start
    without waiting for the entire content.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I74375fe127df636067f1c300ea91654ba3d1aa3c
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Separate sniffing from session initialization
    
    This avoid lengthy/duplicate sniffing for drm plugins when a decrypt session is opened
    
    o The change is backward compatibile in that no update is required
      for existing drm plug-ins if they do not plan to provide separate
      sniffer/extractor
    
    related-to-bug: 5725548
    
    Change-Id: I7fc4caf82d77472da4e2bc7b5d31060fb54fd84c
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Fix ordering assumption of argument evaluation.
    
    No specific order is specified in the C++ standard, but the order of
    the calls to Parcel read commands matters.  Move any calls with multiple
    reads to local variables.
    
    Fix for bug 5103507.
    
    Change-Id: Ic23ad50ec5f443146f00324b66d5e2bd5b9ffd0d
    Fix for bug 4371230.
    - Generate unique ID for each DrmManagerClient in native side
    - Fix the bug where multiple clients could use the same ID
    - Return the correct unique ID back to Java
    - Add a flag in the unique ID to separate native client and Java client
    
    Change-Id: Ia4574b6b0a526f2335a65380975dc62f9a6e7f9b
    - Add two sanity checks.
    - Remove one unnecessary line.
    - Clear the extendedData vector in DecryptHandle.
    
    Change-Id: I2610c6d68f12d48cb69323a5eb2ae4b3b3e44dff
    -Fix some typo
    -Remove one unnecessary memory allocation
    
    Change-Id: Icea21f33d2c7891333e06429d2f382389e5bd27f
    Add one more field in DecryptHandle to support bug 4126624
    
    Change-Id: Ic7ea5fd211c4f8283de8fdf722f89b6a94e5750b
    do not merge: Cherry pick change I6529695c from master to partially fix bug 4126624.
    
    Change-Id: If724de60bd6da1becdffc815d5358ffe78629469
    Fix for 4084554.
    DRM framework support for enabling/disabling copy control settings from a DRM plugin
    
    Change-Id: I6529695cc4adbab2b9a63708bb459e3b77e07564
    Fix for bug 3477330
    This patch fixs a crash bug caused by using a NULL DecryptHandle pointer.
    Fix by using sp<DecryptHandle> instead.
    
    Change-Id: Icbd59858385e8256125a615a3c82656b25319d44
    - Change level of some LOGs from LOGE to LOGV because those logs
      are not error logs from non-DRMed content's point of view.
    - Add more mutex lock to avoid crash by multi-thread calls.
    - Fix for bug 4050039
    
    Change-Id: I52fed22069f0cda6c4ac6a5363469168c797a33b
    More fix for 64 bit offset.
    
    Change-Id: Ia05060113ca0f43a4362914dc99c89c89e30eb4a
    64-bit file size/offset support for DRM framework
    
    Change-Id: I0ba7147607825234df9fa28732e1bba344e82e79
    Update of DRM Framework.
    
    -Access permission handling
      Introduce an internal function which allows the desired process to
      access decryption flow. This new function is just for reference and
      each OEM manufacturer should implement/replace with their solutions.
    -New API, getMetadata()
      This API is for retrieving media metadata from container-based DRM,
      such as OMA forward-lock content. This API asks DRM agent to retrieve
      media metadata hiddein inside of DRM special container.
    -New API, acquireRights()
      This API wraps acquireDrmInfo() and processDrmInfo().
      If DRM agent has valid implementation of both APIs,
      Application can acquire DrmRights only by calling this API.
    -Bug fix in event loop of OnInfoListener.
      Separate OnInfo event loop from mail thread loop so as to avoid
      the issue that message is not dispatched when mail thread is busy.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I04ee3e0988152a71e221f2256d83253749a29da0
    Disable some logs
    
    Change-Id: I05fcf6869916504367814fd2abd2b1af88619f5b
    Update of DRM framework
    
     - Overload openDecryptSession() with uri parameter
       in order to accept URI of DRM content,
       Following API is added,
           DecryptHandle*openDecryptSession(const char* uri);.
     - Unify texisting three event types of processDrmInfo()
       so that caller of DRM framework does not have to handle many event types.
     - Let DrmManagerService call load/unload plugins API so that
       client of DRM framework does not have to manage plug-in load/unload.
     - Trivial fix in DrmManagerClient.java is also incorporated.
    
    Changes are made by Sony Corporation.
    
    Change-Id: If62b47fa0360718fdc943e6e6143671d7db26adc
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Fix MediaDrm cts tests
    
    Moving the build of the mock MediaDrm plugin back to
    frameworks/av since it can't be installed by cts.
    
    b/10668350
    
    Change-Id: Id662bdb0775389b458f86a299392217f2d959422
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    AV Android make files changes
    
    o plus a few file relocation: ActivityManager.cpp/h, SoundPool.h, etc
    o remove some runtime dependencies to libandroid, libandroid_runtime, etc
    
    Change-Id: I047a47c5fb361dd5cf85cd98798c39f629a75d10
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    frameworks/base: remove LOCAL_PRELINK_MODULE
    
    Change-Id: I54dd62ebef47e7690afa5a858f3cad941b135481
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Make DRM libraries optional
    
    Change-Id: I0b591b75a035bc6d8049c85b595966845fedaa15
    fix build
    
    Change-Id: Idccb3f2499bbaac61099d8232cadd633b93ad846
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Fix MediaDrm cts tests
    
    Moving the build of the mock MediaDrm plugin back to
    frameworks/av since it can't be installed by cts.
    
    b/10668350
    
    Change-Id: Id662bdb0775389b458f86a299392217f2d959422
    Fix MediaDrm cts tests
    
    Moving the build of the mock MediaDrm plugin back to
    frameworks/av since it can't be installed by cts.
    
    b/10668350
    
    Change-Id: Id662bdb0775389b458f86a299392217f2d959422
    fix MediaDrm.isCryptoSchemeSupported(uuid)
    
    1. Don't expect plugins to support an empty mimeType in isContentTypeSupported
    2. Move the cts test mock drm plugin to the cts tree so it is always used
    
    b/10528466
    
    Change-Id: I6023f6165b1e9d294986f7e5cd0896e056e376f1
    Add ability to test supported content types to MediaDrm
    
    bug: 10244066
    Change-Id: I317f05b146db962c271893f6208890a5a6c396f1
    Added CTS test for secure stop APIs
    
    bug: 8604418
    
    Change-Id: I173fa1ec904ba11dc4cff0343462b3f4bac0d365
    Added CTS test for secure stop APIs
    
    bug: 8604418
    
    Change-Id: I173fa1ec904ba11dc4cff0343462b3f4bac0d365
    Implement async event callout from drm plugin to Java app
    
    Change-Id: I007f147d693664e777b8758be2bb8a4c7ec0236b
    Implement async event callout from drm plugin to Java app
    
    Change-Id: I007f147d693664e777b8758be2bb8a4c7ec0236b
    MediaDrm API update
    
    Clarify offline usage of sessions and keys and implement
    implement CryptoSession to support additional crypto use
    cases.
    
    Change-Id: I5d8000ce7e1dd7eba08969fc50296c9e1456c4fc
    MediaDrm API update
    
    Clarify offline usage of sessions and keys and implement
    implement CryptoSession to support additional crypto use
    cases.
    
    Change-Id: I5d8000ce7e1dd7eba08969fc50296c9e1456c4fc
    Implementing MediaDrm APIs
    
    Change-Id: I9ff8eeb7d0c383b5c0c68cd54eb54ce7d2d22fe6
    Implementing MediaDrm APIs
    
    Change-Id: I9ff8eeb7d0c383b5c0c68cd54eb54ce7d2d22fe6
    Fix MediaDrm cts tests
    
    Moving the build of the mock MediaDrm plugin back to
    frameworks/av since it can't be installed by cts.
    
    b/10668350
    
    Change-Id: Id662bdb0775389b458f86a299392217f2d959422
    Fix MediaDrm cts tests
    
    Moving the build of the mock MediaDrm plugin back to
    frameworks/av since it can't be installed by cts.
    
    b/10668350
    
    Change-Id: Id662bdb0775389b458f86a299392217f2d959422
    fix MediaDrm.isCryptoSchemeSupported(uuid)
    
    1. Don't expect plugins to support an empty mimeType in isContentTypeSupported
    2. Move the cts test mock drm plugin to the cts tree so it is always used
    
    b/10528466
    
    Change-Id: I6023f6165b1e9d294986f7e5cd0896e056e376f1
    Add ability to test supported content types to MediaDrm
    
    bug: 10244066
    Change-Id: I317f05b146db962c271893f6208890a5a6c396f1
    MediaDrm API update
    
    Clarify offline usage of sessions and keys and implement
    implement CryptoSession to support additional crypto use
    cases.
    
    Change-Id: I5d8000ce7e1dd7eba08969fc50296c9e1456c4fc
    MediaDrm API update
    
    Clarify offline usage of sessions and keys and implement
    implement CryptoSession to support additional crypto use
    cases.
    
    Change-Id: I5d8000ce7e1dd7eba08969fc50296c9e1456c4fc
    Implementing MediaDrm APIs
    
    Change-Id: I9ff8eeb7d0c383b5c0c68cd54eb54ce7d2d22fe6
    Implementing MediaDrm APIs
    
    Change-Id: I9ff8eeb7d0c383b5c0c68cd54eb54ce7d2d22fe6
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Remove libvideoeditor_jni.so's dependency on static libs in video editor engine
    
    related-to-bug: 6502980
    
    Change-Id: I9cbbf44eb53c406263df4003cc3de2af4d239180
    Revert "Remove libvideoeditor_jni.so's dependency on static libs in video editor engine"
    
    This reverts commit 1af1f6a60b9fa217b6809e767babf1ce8a2e95c9.
    Remove libvideoeditor_jni.so's dependency on static libs in video editor engine
    
    related-to-bug: 6328360
    
    Change-Id: I36324820c7e72fedd8c4caf1b03443a4f7cec37f
    Make file change because libvideoeditor source files moved
    
    o related-to-bug: 6214141
    
    Change-Id: I3ef60ca7670df37d7e43546e244cfe6a33093ba9
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: Ida75833739d363061c2e688a6c7f7d7b3f3edd1e
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I79efc956aa0d23fb333d12c8947b48455b7524d1
    frameworks/media/libvideoeditor: remove LOCAL_PRELINK_MODULE
    
    Change-Id: Ib3ecb46e1ecc192edae2d5634798efffccbb6c94
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Remove the eng developement LOCALtags in makefiles
    
    Change-Id: I6da8691dba062cd54410ffafde27b7eca0b73aa2
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    VideoEditor: Issue ID: 3371667: Fix Set1
    
    Change-Id: I728bc27b86e0c8720a2d05e6cff8a76f820bf016
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I79efc956aa0d23fb333d12c8947b48455b7524d1
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Change trace labels
    
    bug - 3385135
    
    Change-Id: Iad66e122a9e2ce7cce26779f679cbf04dd1a5434
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    Copied MODULE_LICENSE_APACH2 and NOTICE from frameworks/base to frameworks/av
    
    Change-Id: I48c927b9690bf902ab167d60171c0ee7995687e0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4035003 Support for 64 bit datatype
    a. M4OSA_64BITS_SUPPORTED removed
    b. M4OSA_64BITS_NOT_SUPPORTED removed
    c. M4OSA_UInt64 removed
    d. M4OSA_Int64 removed
    e. M4OSA_INT32_FROM_INT32 removed
    f. M4OSA_TIME_FROM_INT32_UINT32 removed
    g. clean-up all macro in M4OSA_Time.h, M4OSA_Types.h and osal/inc/M4OSA_FileCommon.h
    
    Change-Id: I2b1751962945dcc668e995d05a57b66cd268642f
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4035003 Support for 64 bit datatype
    a. M4OSA_64BITS_SUPPORTED removed
    b. M4OSA_64BITS_NOT_SUPPORTED removed
    c. M4OSA_UInt64 removed
    d. M4OSA_Int64 removed
    e. M4OSA_INT32_FROM_INT32 removed
    f. M4OSA_TIME_FROM_INT32_UINT32 removed
    g. clean-up all macro in M4OSA_Time.h, M4OSA_Types.h and osal/inc/M4OSA_FileCommon.h
    
    Change-Id: I2b1751962945dcc668e995d05a57b66cd268642f
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I79efc956aa0d23fb333d12c8947b48455b7524d1
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4035003 Support for 64 bit datatype
    a. M4OSA_64BITS_SUPPORTED removed
    b. M4OSA_64BITS_NOT_SUPPORTED removed
    c. M4OSA_UInt64 removed
    d. M4OSA_Int64 removed
    e. M4OSA_INT32_FROM_INT32 removed
    f. M4OSA_TIME_FROM_INT32_UINT32 removed
    g. clean-up all macro in M4OSA_Time.h, M4OSA_Types.h and osal/inc/M4OSA_FileCommon.h
    
    Change-Id: I2b1751962945dcc668e995d05a57b66cd268642f
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4035003 Support for 64 bit datatype
    a. M4OSA_64BITS_SUPPORTED removed
    b. M4OSA_64BITS_NOT_SUPPORTED removed
    c. M4OSA_UInt64 removed
    d. M4OSA_Int64 removed
    e. M4OSA_INT32_FROM_INT32 removed
    f. M4OSA_TIME_FROM_INT32_UINT32 removed
    g. clean-up all macro in M4OSA_Time.h, M4OSA_Types.h and osal/inc/M4OSA_FileCommon.h
    
    Change-Id: I2b1751962945dcc668e995d05a57b66cd268642f
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I79efc956aa0d23fb333d12c8947b48455b7524d1
    VideoEditor: Issue ID: 3371667: Fix Set1
    
    Change-Id: I728bc27b86e0c8720a2d05e6cff8a76f820bf016
    Incorporated review comments and merged on TOT
    
    Change-Id: Ia147aeb73a6d8cf9c48e02ccaa428aa7adc04d3a
    support lowercase only files.
    
    Change-Id: I2f22697a7847d14527b666980fc88412c6c49bdf
    videoeditor osal files check in on honeycomb
    
    Change-Id: Ibb1f20329fbc6bb1629f5d6d4588eb6966f1c1ab
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4035003 Support for 64 bit datatype
    a. M4OSA_64BITS_SUPPORTED removed
    b. M4OSA_64BITS_NOT_SUPPORTED removed
    c. M4OSA_UInt64 removed
    d. M4OSA_Int64 removed
    e. M4OSA_INT32_FROM_INT32 removed
    f. M4OSA_TIME_FROM_INT32_UINT32 removed
    g. clean-up all macro in M4OSA_Time.h, M4OSA_Types.h and osal/inc/M4OSA_FileCommon.h
    
    Change-Id: I2b1751962945dcc668e995d05a57b66cd268642f
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4035003 Support for 64 bit datatype
    a. M4OSA_64BITS_SUPPORTED removed
    b. M4OSA_64BITS_NOT_SUPPORTED removed
    c. M4OSA_UInt64 removed
    d. M4OSA_Int64 removed
    e. M4OSA_INT32_FROM_INT32 removed
    f. M4OSA_TIME_FROM_INT32_UINT32 removed
    g. clean-up all macro in M4OSA_Time.h, M4OSA_Types.h and osal/inc/M4OSA_FileCommon.h
    
    Change-Id: I2b1751962945dcc668e995d05a57b66cd268642f
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix of issue 4973565 Cannot export movie.
    Also fixes 4441452 Native Crash after applying transition
    
    Change-Id: Ic48c44bc2c5d07e57edb8f63393cea424d3275f4
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4035003 Support for 64 bit datatype
    a. M4OSA_64BITS_SUPPORTED removed
    b. M4OSA_64BITS_NOT_SUPPORTED removed
    c. M4OSA_UInt64 removed
    d. M4OSA_Int64 removed
    e. M4OSA_INT32_FROM_INT32 removed
    f. M4OSA_TIME_FROM_INT32_UINT32 removed
    g. clean-up all macro in M4OSA_Time.h, M4OSA_Types.h and osal/inc/M4OSA_FileCommon.h
    
    Change-Id: I2b1751962945dcc668e995d05a57b66cd268642f
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I79efc956aa0d23fb333d12c8947b48455b7524d1
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    libvideoeditor: fix code bugs when enabling all-level debugging macros
    
    Change-Id: Ic8aedfa821d79698d31cf7ee3bf382aae85981f6
    Signed-off-by: beanz <beanz@marvell.com>
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4035003 Support for 64 bit datatype
    a. M4OSA_64BITS_SUPPORTED removed
    b. M4OSA_64BITS_NOT_SUPPORTED removed
    c. M4OSA_UInt64 removed
    d. M4OSA_Int64 removed
    e. M4OSA_INT32_FROM_INT32 removed
    f. M4OSA_TIME_FROM_INT32_UINT32 removed
    g. clean-up all macro in M4OSA_Time.h, M4OSA_Types.h and osal/inc/M4OSA_FileCommon.h
    
    Change-Id: I2b1751962945dcc668e995d05a57b66cd268642f
    Fix for issue 3456689 : Export failed with Runtime error
    
    Change-Id: I402601590a39d71cf8bd25379f3fdd7915078c9d
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I79efc956aa0d23fb333d12c8947b48455b7524d1
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4035003 Support for 64 bit datatype
    a. M4OSA_64BITS_SUPPORTED removed
    b. M4OSA_64BITS_NOT_SUPPORTED removed
    c. M4OSA_UInt64 removed
    d. M4OSA_Int64 removed
    e. M4OSA_INT32_FROM_INT32 removed
    f. M4OSA_TIME_FROM_INT32_UINT32 removed
    g. clean-up all macro in M4OSA_Time.h, M4OSA_Types.h and osal/inc/M4OSA_FileCommon.h
    
    Change-Id: I2b1751962945dcc668e995d05a57b66cd268642f
    videoeditor osal files check in on honeycomb
    
    Change-Id: Id6c5f9f8819158ebffa9fd4dbbf5979a0e5f5808
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Remove libvideoeditor_jni.so's dependency on static libs in video editor engine
    
    related-to-bug: 6502980
    
    Change-Id: I9cbbf44eb53c406263df4003cc3de2af4d239180
    Make file change because libvideoeditor source files moved
    
    o related-to-bug: 6214141
    
    Change-Id: I3ef60ca7670df37d7e43546e244cfe6a33093ba9
    Switched to use header files in /frameworks/native
    
    o related-to-bug: 6044887
    
    Change-Id: I3a1143b09560a6b8fd67d23bbb375c83442a12e9
    DO NOT MERGE. Fix for 5247764 profile and level settings are not always correctly set
    
    Cherry picked from master.
    Correct video bitrate value is set from 3gpReader node.
    Also, bitrate is limited to max supported by encoder as
    per profile and level.
    
    This patch also fixes bug
     5309520 [Prime] Native crash while running CTS test testExportEffectOverlay.
    
    Change-Id: Icd649c02465e88553b6e69ea8bcd01baf66ded9e
    Fix for 5247764 profile and level settings are not always correctly set
    
    Correct video bitrate value is set from 3gpReader node.
    Also, bitrate is limited to max supported by encoder as
    per profile and level.
    
    This patch also fixes bug
     5309520 [Prime] Native crash while running CTS test testExportEffectOverlay.
    
    Change-Id: Icd649c02465e88553b6e69ea8bcd01baf66ded9e
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: Ida75833739d363061c2e688a6c7f7d7b3f3edd1e
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    frameworks/media/libvideoeditor: remove LOCAL_PRELINK_MODULE
    
    Change-Id: Ib3ecb46e1ecc192edae2d5634798efffccbb6c94
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Remove the eng developement LOCALtags in makefiles
    
    Change-Id: I6da8691dba062cd54410ffafde27b7eca0b73aa2
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    Copied MODULE_LICENSE_APACH2 and NOTICE from frameworks/base to frameworks/av
    
    Change-Id: I48c927b9690bf902ab167d60171c0ee7995687e0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix an error to deal with 0-size nal units in some AVC files
    
    o related-to-bug: 5890998
    
    Change-Id: If0198e52ff7bbd7422f219f55a37aae97f7d74f1
    Fix an error that missed an "=" for equality in an if statement
    
    Change-Id: Ib566226b427f5357d52c7b9c0742afa05fdd3a84
        Fix for issue  5309336
        -add videoeditor maximum prefetch YUV frames in media_profiles.xml to
         limit the total memory usage.
    
    Change-Id: I43c03fc626194d9ebbe8d914d9209a04bc085831
    Fix for 5477832 Movie Studio crash when trying to import the attached h263 file.
    
    Add support for Audio Object type 5(SBR) and 29(PS) in
    audio decoder node.
    
    Change-Id: I9b631893f530d0c8550a0a7addfbdce226313693
    DO NOT MERGE. Fix for 5247764 profile and level settings are not always correctly set
    
    Cherry picked from master.
    Correct video bitrate value is set from 3gpReader node.
    Also, bitrate is limited to max supported by encoder as
    per profile and level.
    
    This patch also fixes bug
     5309520 [Prime] Native crash while running CTS test testExportEffectOverlay.
    
    Change-Id: Icd649c02465e88553b6e69ea8bcd01baf66ded9e
    Fix for 5247764 profile and level settings are not always correctly set
    
    Correct video bitrate value is set from 3gpReader node.
    Also, bitrate is limited to max supported by encoder as
    per profile and level.
    
    This patch also fixes bug
     5309520 [Prime] Native crash while running CTS test testExportEffectOverlay.
    
    Change-Id: Icd649c02465e88553b6e69ea8bcd01baf66ded9e
    Fix for
    -5234840 corrupted frames in transition.
    -Green frames in image transition.
    
            modified:   vss/mcs/src/M4MCS_API.c
            modified:   vss/src/M4VSS3GPP_EditVideo.c
    
    Change-Id: I2632d47c44f00bbc81e2b3e19b225178ab456810
    Fix for 5156702 Rotate video output for thumbnails and export
    
    This is part of a multi project submit.
    This is the native engine part.
    
    Change-Id: Icde922194a123a90544942caa12430fc3c4ef10e
    Fix 5212886: free the reader after freeing decoders.
    
    If we free the reader first, the decoder may still read from it
    after the reader is freed. So we need to free the reader last.
    
    Change-Id: Ib6c7d6991d544870f1b3892387d0db312d501755
    Fix for 5151331 [CRESPO] testPerformanceExport failed
    
    Ensure encoding width and height are multiple of 16.
    
    Change-Id: Ia077a52a16273cb9f775ebe0f0c66a81a35b9e19
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Speed up thumbnail generation.
    
    We accept a tolerance parameter while decoding. We also tell the
    stagefright decoder to jump so we can move to the new frame faster.
    
    Change-Id: Iede3c1f909f1c42b2d5a53c782083367b00f62fb
    Fix for 4132872 inefficient export logic.
    
    Also fixes 3371103 Transitions between images takes a long time
    to generate.
    
    Redundant transcoding is removed. Decode encode will be done only
    once per clip.
    For images, conversion to 3gp clip is removed (except for generating
    Kenburn image clip).
    
    Change-Id: Id722cd0296641bd643eb5c63f4d8028716259c01
    Fix for issue 5055001 Movie studio is unusable after importing music
    
    Change-Id: I9b3da1122e807c034cf44dd51b5e1d92dd84d73f
    fix for issue 4142219
    Don't hard code platform-specific limitations
    engine part.
    
    Change-Id: Ibc8a539e5bbac738f60ef935670a333b7017e20e
    Fix of issue 4973565 Cannot export movie.
    Also fixes 4441452 Native Crash after applying transition
    
    Change-Id: Ic48c44bc2c5d07e57edb8f63393cea424d3275f4
    Fix for issue 4905998 OMXCodec::drainInputBuffer, findInt64(kKeyTime, &lastBufferTimeUs) fails
    
    Change-Id: I353bd9e8aa1eceb9c14040a9953777967500fb1d
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4035003 Support for 64 bit datatype
    a. M4OSA_64BITS_SUPPORTED removed
    b. M4OSA_64BITS_NOT_SUPPORTED removed
    c. M4OSA_UInt64 removed
    d. M4OSA_Int64 removed
    e. M4OSA_INT32_FROM_INT32 removed
    f. M4OSA_TIME_FROM_INT32_UINT32 removed
    g. clean-up all macro in M4OSA_Time.h, M4OSA_Types.h and osal/inc/M4OSA_FileCommon.h
    
    Change-Id: I2b1751962945dcc668e995d05a57b66cd268642f
    Fix for issue 3385135 "source code cleanup" engine part
    - Removed below unused functions
        a. M4PTO3GPP_RegisterExternalVideoEncoder
        b. M4VSS3GPP_editRegisterExternalVideoDecoder
        c. M4VSS3GPP_editRegisterExternalVideoEncoder
        d. M4VSS3GPP_extractPictureRegisterExternalVideoDecoder
        e. M4VSS3GPP_editRegisterExternalCodec
        f. M4VSS3GPP_editSubscribeExternalCodecs
        g. M4VSS3GPP_intSubscribeExternalCodecs
        h. M4VSS3GPP_intClipRegisterExternalVideoDecoder
        i. M4xVSS_RegisterExternalVideoDecoder
        j. M4xVSS_RegisterExternalVideoEncoder
        k. M4MCS_registerExternalVideoDecoder
        l. M4MCS_registerExternalVideoEncoder
        m. M4MCS_registerExternalAudioDecoder
        n. M4MCS_registerExternalAudioEncoder
        o. M4DECODER_EXTERNAL_getInterface
    
    - Also remove small code associated with these functions and Remove below unsused src + header files
        a. M4CLOCK.h
        b. M4MDP_API.h
        c. M4VD_EXTERNAL_Internal.h
        d. M4VD_HW_API.h
        e. M4VE_API.h
        f. M4_Logo.h
        g. M4VD_EXTERNAL_Interface.c
        h. LV_Types.h
        i. M4OSA_FileAccess.h
        j. M4OSA_FileCache.h
        k. M4OSA_FileExtra.h
        l. M4OSA_FileReaderRam.h
        m. M4OSA_FileWriterRam.h
        n. M4OSA_String.h
        o. M4OSA_String_priv.h
        p. M4OSA_FileCache.c
        q. M4OSA_FileExtra.c
        r. M4OSA_FileReader_RAM.c
        s. M4OSA_FileWriter_RAM.c
        t. M4OSA_String.c
        u. M4OSA_String_priv.c
    
    Change-Id: I7271cbe92168e665a8e5b7afe7c7fe1c331eaa1e
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Fix for issue 3453519: do not allow editing of DRM protected contents
    
    Change-Id: I19f56cbdaab0ddb3d1ab0aec8dcf625a3ff3ead2
    Fix for issue 3371667: fix source code compilation warnings(Moved from master)
    
    Change-Id: Ife1fc3f89beae498a49970ab5d2a080a112ce7c2
    VideoEditor: Issue ID:3431967 : MemLeak with Invalid input
    
    Modified the fix after review
    
    Change-Id: Ic4dd92d76870256453a93b3a7d80e0d147884425
    Fixed issue 3443078 overlay flicker on transition in exported video
    
    Change-Id: I0376b09acd91be8ba792478323d9f48a71818c2b
    Fixed the SRC interface
    
    bug - 3369860
    
    Change-Id: I6b866d334af9c9aea1db0295bf19edbc4123293d
    VideEditor:Fix for 3369908 Removed redundant code.
    
    Change-Id: Ia0789f5c6205ad2fc793921bb967bd9ec76e2b9a
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Merge the same files on top of tree.
    
    Add support for .m4v Issue 3395600
    
    Change-Id: Ica9efce7ee3b550b2c49251c97a0663d490ffd73
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - Removed below unused functions
        a. M4PTO3GPP_RegisterExternalVideoEncoder
        b. M4VSS3GPP_editRegisterExternalVideoDecoder
        c. M4VSS3GPP_editRegisterExternalVideoEncoder
        d. M4VSS3GPP_extractPictureRegisterExternalVideoDecoder
        e. M4VSS3GPP_editRegisterExternalCodec
        f. M4VSS3GPP_editSubscribeExternalCodecs
        g. M4VSS3GPP_intSubscribeExternalCodecs
        h. M4VSS3GPP_intClipRegisterExternalVideoDecoder
        i. M4xVSS_RegisterExternalVideoDecoder
        j. M4xVSS_RegisterExternalVideoEncoder
        k. M4MCS_registerExternalVideoDecoder
        l. M4MCS_registerExternalVideoEncoder
        m. M4MCS_registerExternalAudioDecoder
        n. M4MCS_registerExternalAudioEncoder
        o. M4DECODER_EXTERNAL_getInterface
    
    - Also remove small code associated with these functions and Remove below unsused src + header files
        a. M4CLOCK.h
        b. M4MDP_API.h
        c. M4VD_EXTERNAL_Internal.h
        d. M4VD_HW_API.h
        e. M4VE_API.h
        f. M4_Logo.h
        g. M4VD_EXTERNAL_Interface.c
        h. LV_Types.h
        i. M4OSA_FileAccess.h
        j. M4OSA_FileCache.h
        k. M4OSA_FileExtra.h
        l. M4OSA_FileReaderRam.h
        m. M4OSA_FileWriterRam.h
        n. M4OSA_String.h
        o. M4OSA_String_priv.h
        p. M4OSA_FileCache.c
        q. M4OSA_FileExtra.c
        r. M4OSA_FileReader_RAM.c
        s. M4OSA_FileWriter_RAM.c
        t. M4OSA_String.c
        u. M4OSA_String_priv.c
    
    Change-Id: I7271cbe92168e665a8e5b7afe7c7fe1c331eaa1e
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 3371667: fix source code compilation warnings(Moved from master)
    
    Change-Id: Ife1fc3f89beae498a49970ab5d2a080a112ce7c2
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3453519: do not allow editing of DRM protected contents
    
    Change-Id: I19f56cbdaab0ddb3d1ab0aec8dcf625a3ff3ead2
    Fixed Issue 3423072: Imported 1080x720 video clips present distorted view in preview
    
    Change-Id: I38f2a042d66f7b639510d503321296e915689f7a
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Remove libvideoeditor_jni.so's dependency on static libs in video editor engine
    
    related-to-bug: 6502980
    
    Change-Id: I9cbbf44eb53c406263df4003cc3de2af4d239180
    Revert "Remove libvideoeditor_jni.so's dependency on static libs in video editor engine"
    
    This reverts commit 1af1f6a60b9fa217b6809e767babf1ce8a2e95c9.
    Remove libvideoeditor_jni.so's dependency on static libs in video editor engine
    
    related-to-bug: 6328360
    
    Change-Id: I36324820c7e72fedd8c4caf1b03443a4f7cec37f
    Make file change because libvideoeditor source files moved
    
    o related-to-bug: 6214141
    
    Change-Id: I3ef60ca7670df37d7e43546e244cfe6a33093ba9
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: Ida75833739d363061c2e688a6c7f7d7b3f3edd1e
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    frameworks/media/libvideoeditor: remove LOCAL_PRELINK_MODULE
    
    Change-Id: Ib3ecb46e1ecc192edae2d5634798efffccbb6c94
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Fix for issue 3370007 Overlay transparency is missing
    
    Change-Id: I1b513b607f669d141bcd28bd918b8c1319bef7fa
    Remove the eng developement LOCALtags in makefiles
    
    Change-Id: I6da8691dba062cd54410ffafde27b7eca0b73aa2
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    Copied MODULE_LICENSE_APACH2 and NOTICE from frameworks/base to frameworks/av
    
    Change-Id: I48c927b9690bf902ab167d60171c0ee7995687e0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 3370007 Overlay transparency is missing
    
    Change-Id: I1b513b607f669d141bcd28bd918b8c1319bef7fa
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue: 3437071 Crash during rendering mode change for specific video size
    
    Change-Id: I358c7cc24a7f8c71b953cf5179902fa20fbd727c
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 3370007 Overlay transparency is missing
    
    Change-Id: I1b513b607f669d141bcd28bd918b8c1319bef7fa
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Remove curtain effects (they are unused).
    
    Change-Id: I8e1ccad3e9ddf4c272e85e7ca04582b4863c242d
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Remove libvideoeditor_jni.so's dependency on static libs in video editor engine
    
    related-to-bug: 6502980
    
    Change-Id: I9cbbf44eb53c406263df4003cc3de2af4d239180
    Revert "Remove libvideoeditor_jni.so's dependency on static libs in video editor engine"
    
    This reverts commit 1af1f6a60b9fa217b6809e767babf1ce8a2e95c9.
    Remove libvideoeditor_jni.so's dependency on static libs in video editor engine
    
    related-to-bug: 6328360
    
    Change-Id: I36324820c7e72fedd8c4caf1b03443a4f7cec37f
    AV Android make files changes
    
    o plus a few file relocation: ActivityManager.cpp/h, SoundPool.h, etc
    o remove some runtime dependencies to libandroid, libandroid_runtime, etc
    
    Change-Id: I047a47c5fb361dd5cf85cd98798c39f629a75d10
    Make file change because libvideoeditor source files moved
    
    o related-to-bug: 6214141
    
    Change-Id: I3ef60ca7670df37d7e43546e244cfe6a33093ba9
    Fix LOCAL_C_INCLUDES and correct #include syntax
    
    Change-Id: I522861043cc2ee905258a2ae409bf9dddbe452dc
    Prepare frameworks/native/services/audioflinger
    
    Part of this change will be reverted after the move is complete.
    
    p.s. this dependency on AudioFlinger should be removed
    
    Change-Id: Ib29d413b74a6dc1babe7a33471128be11304ce56
    Switched to use header files in /frameworks/native
    
    o related-to-bug: 6044887
    
    Change-Id: I3a1143b09560a6b8fd67d23bbb375c83442a12e9
    Update build dependency on AudioMixer header
    
    VideoEditorSRC doesn't need to include AudioMixer.h.
    
    VideoEditorResampler includes AudioMixer.h, which requires
     system/media/audio_effects/include in the include path.
    
    Change-Id: Ibf6194831aeb91e788ce0a3b1282a0d930ee6e48
    ditherAndClamp from libaudioutils not AudioMixer
    
    Change-Id: I1e8a00c81efefd956fe9e4d9b58557373320e322
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Fix for 4132872 inefficient export logic.
    
    Also fixes 3371103 Transitions between images takes a long time
    to generate.
    
    Redundant transcoding is removed. Decode encode will be done only
    once per clip.
    For images, conversion to 3gp clip is removed (except for generating
    Kenburn image clip).
    
    Change-Id: Id722cd0296641bd643eb5c63f4d8028716259c01
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: Ida75833739d363061c2e688a6c7f7d7b3f3edd1e
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix a typo in filename "M4ChannelCoverter.c"
    
    Change-Id: If7e3afa8ac10fc34e920a199fd31526ced0a2534
    Fix for issue 3385135 "source code cleanup" engine part
    - Removed below unused functions
        a. M4PTO3GPP_RegisterExternalVideoEncoder
        b. M4VSS3GPP_editRegisterExternalVideoDecoder
        c. M4VSS3GPP_editRegisterExternalVideoEncoder
        d. M4VSS3GPP_extractPictureRegisterExternalVideoDecoder
        e. M4VSS3GPP_editRegisterExternalCodec
        f. M4VSS3GPP_editSubscribeExternalCodecs
        g. M4VSS3GPP_intSubscribeExternalCodecs
        h. M4VSS3GPP_intClipRegisterExternalVideoDecoder
        i. M4xVSS_RegisterExternalVideoDecoder
        j. M4xVSS_RegisterExternalVideoEncoder
        k. M4MCS_registerExternalVideoDecoder
        l. M4MCS_registerExternalVideoEncoder
        m. M4MCS_registerExternalAudioDecoder
        n. M4MCS_registerExternalAudioEncoder
        o. M4DECODER_EXTERNAL_getInterface
    
    - Also remove small code associated with these functions and Remove below unsused src + header files
        a. M4CLOCK.h
        b. M4MDP_API.h
        c. M4VD_EXTERNAL_Internal.h
        d. M4VD_HW_API.h
        e. M4VE_API.h
        f. M4_Logo.h
        g. M4VD_EXTERNAL_Interface.c
        h. LV_Types.h
        i. M4OSA_FileAccess.h
        j. M4OSA_FileCache.h
        k. M4OSA_FileExtra.h
        l. M4OSA_FileReaderRam.h
        m. M4OSA_FileWriterRam.h
        n. M4OSA_String.h
        o. M4OSA_String_priv.h
        p. M4OSA_FileCache.c
        q. M4OSA_FileExtra.c
        r. M4OSA_FileReader_RAM.c
        s. M4OSA_FileWriter_RAM.c
        t. M4OSA_String.c
        u. M4OSA_String_priv.c
    
    Change-Id: I7271cbe92168e665a8e5b7afe7c7fe1c331eaa1e
    frameworks/media/libvideoeditor: remove LOCAL_PRELINK_MODULE
    
    Change-Id: Ib3ecb46e1ecc192edae2d5634798efffccbb6c94
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    VideEditor:Fix for 3369908 Removed redundant code.
    
    Change-Id: Ia0789f5c6205ad2fc793921bb967bd9ec76e2b9a
    Remove the eng developement LOCALtags in makefiles
    
    Change-Id: I6da8691dba062cd54410ffafde27b7eca0b73aa2
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    fix for issue 4142219
    Don't hard code platform-specific limitations
    engine part.
    
    Change-Id: Ibc8a539e5bbac738f60ef935670a333b7017e20e
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - Removed below unused functions
        a. M4PTO3GPP_RegisterExternalVideoEncoder
        b. M4VSS3GPP_editRegisterExternalVideoDecoder
        c. M4VSS3GPP_editRegisterExternalVideoEncoder
        d. M4VSS3GPP_extractPictureRegisterExternalVideoDecoder
        e. M4VSS3GPP_editRegisterExternalCodec
        f. M4VSS3GPP_editSubscribeExternalCodecs
        g. M4VSS3GPP_intSubscribeExternalCodecs
        h. M4VSS3GPP_intClipRegisterExternalVideoDecoder
        i. M4xVSS_RegisterExternalVideoDecoder
        j. M4xVSS_RegisterExternalVideoEncoder
        k. M4MCS_registerExternalVideoDecoder
        l. M4MCS_registerExternalVideoEncoder
        m. M4MCS_registerExternalAudioDecoder
        n. M4MCS_registerExternalAudioEncoder
        o. M4DECODER_EXTERNAL_getInterface
    
    - Also remove small code associated with these functions and Remove below unsused src + header files
        a. M4CLOCK.h
        b. M4MDP_API.h
        c. M4VD_EXTERNAL_Internal.h
        d. M4VD_HW_API.h
        e. M4VE_API.h
        f. M4_Logo.h
        g. M4VD_EXTERNAL_Interface.c
        h. LV_Types.h
        i. M4OSA_FileAccess.h
        j. M4OSA_FileCache.h
        k. M4OSA_FileExtra.h
        l. M4OSA_FileReaderRam.h
        m. M4OSA_FileWriterRam.h
        n. M4OSA_String.h
        o. M4OSA_String_priv.h
        p. M4OSA_FileCache.c
        q. M4OSA_FileExtra.c
        r. M4OSA_FileReader_RAM.c
        s. M4OSA_FileWriter_RAM.c
        t. M4OSA_String.c
        u. M4OSA_String_priv.c
    
    Change-Id: I7271cbe92168e665a8e5b7afe7c7fe1c331eaa1e
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    Copied MODULE_LICENSE_APACH2 and NOTICE from frameworks/base to frameworks/av
    
    Change-Id: I48c927b9690bf902ab167d60171c0ee7995687e0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix for 5638097 KenBurn generation time increased from 19 secs to 30 secs
    
    -Remove the additional transcoding for kenburn video in video editor saving phase.
    
    Change-Id: Ia8721ba75d4b7923db0f483bf30209c6fa40e4bd
        Fix for issue  5309336
        -add videoeditor maximum prefetch YUV frames in media_profiles.xml to
         limit the total memory usage.
    
    Change-Id: I43c03fc626194d9ebbe8d914d9209a04bc085831
    Fix for 5234840 Corrupted frames in transition
    
    This is to solve the corrupt frame in transition clip generated
    from mpeg4 input clip.
    Compress domain trimming is disabled for mpeg4 since hardware
    encdoer may use different time scale value than the input mpeg4
    clip.
    
    Change-Id: I19377a19840f599ba9cb24c89dc86aaa63fc229e
    Fix for 5205420 compression domain trimming fallback mechanism
    
    Transcode if clip's profile or level exceeds encoder's supported
    profile or level.
    
    Change-Id: Ib2f678828a58657b095ef6ef219fd0aa2bdccf91
    Fix for 5156702 Rotate video output for thumbnails and export
    
    This is part of a multi project submit.
    This is the native engine part.
    
    Change-Id: Icde922194a123a90544942caa12430fc3c4ef10e
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Fix for 4132872 inefficient export logic.
    
    Also fixes 3371103 Transitions between images takes a long time
    to generate.
    
    Redundant transcoding is removed. Decode encode will be done only
    once per clip.
    For images, conversion to 3gp clip is removed (except for generating
    Kenburn image clip).
    
    Change-Id: Id722cd0296641bd643eb5c63f4d8028716259c01
    fix for issue 4142219
    Don't hard code platform-specific limitations
    engine part.
    
    Change-Id: Ibc8a539e5bbac738f60ef935670a333b7017e20e
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - Removed below unused functions
        a. M4PTO3GPP_RegisterExternalVideoEncoder
        b. M4VSS3GPP_editRegisterExternalVideoDecoder
        c. M4VSS3GPP_editRegisterExternalVideoEncoder
        d. M4VSS3GPP_extractPictureRegisterExternalVideoDecoder
        e. M4VSS3GPP_editRegisterExternalCodec
        f. M4VSS3GPP_editSubscribeExternalCodecs
        g. M4VSS3GPP_intSubscribeExternalCodecs
        h. M4VSS3GPP_intClipRegisterExternalVideoDecoder
        i. M4xVSS_RegisterExternalVideoDecoder
        j. M4xVSS_RegisterExternalVideoEncoder
        k. M4MCS_registerExternalVideoDecoder
        l. M4MCS_registerExternalVideoEncoder
        m. M4MCS_registerExternalAudioDecoder
        n. M4MCS_registerExternalAudioEncoder
        o. M4DECODER_EXTERNAL_getInterface
    
    - Also remove small code associated with these functions and Remove below unsused src + header files
        a. M4CLOCK.h
        b. M4MDP_API.h
        c. M4VD_EXTERNAL_Internal.h
        d. M4VD_HW_API.h
        e. M4VE_API.h
        f. M4_Logo.h
        g. M4VD_EXTERNAL_Interface.c
        h. LV_Types.h
        i. M4OSA_FileAccess.h
        j. M4OSA_FileCache.h
        k. M4OSA_FileExtra.h
        l. M4OSA_FileReaderRam.h
        m. M4OSA_FileWriterRam.h
        n. M4OSA_String.h
        o. M4OSA_String_priv.h
        p. M4OSA_FileCache.c
        q. M4OSA_FileExtra.c
        r. M4OSA_FileReader_RAM.c
        s. M4OSA_FileWriter_RAM.c
        t. M4OSA_String.c
        u. M4OSA_String_priv.c
    
    Change-Id: I7271cbe92168e665a8e5b7afe7c7fe1c331eaa1e
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I79efc956aa0d23fb333d12c8947b48455b7524d1
    VideoEditor: Issue ID: 3371667: Fix Set1
    
    Change-Id: I728bc27b86e0c8720a2d05e6cff8a76f820bf016
    Fix for issue 3422485: Kenburn not showing continuous progress bar
    
    Change-Id: I19688a89fec1edeae2af1c9a8185b96a5fde2974
    Fix for issue 3404624 - The overlay in exported video is blurry
    
    Change-Id: I52bd474c85589bd75e58c675045a7c7fe058a228
    Incorporated review comments and merged on TOT
    
    Change-Id: Ia147aeb73a6d8cf9c48e02ccaa428aa7adc04d3a
    Merge the same files on top of tree.
    
    Add support for .m4v Issue 3395600
    
    Change-Id: Ica9efce7ee3b550b2c49251c97a0663d490ffd73
    Fix for issue 3400229 Pan and Zoom effect is not accurate in core
    
    Change-Id: I14e79bc5b75772df5095dc96bef2fabfa6763af1
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4035003 Support for 64 bit datatype
    a. M4OSA_64BITS_SUPPORTED removed
    b. M4OSA_64BITS_NOT_SUPPORTED removed
    c. M4OSA_UInt64 removed
    d. M4OSA_Int64 removed
    e. M4OSA_INT32_FROM_INT32 removed
    f. M4OSA_TIME_FROM_INT32_UINT32 removed
    g. clean-up all macro in M4OSA_Time.h, M4OSA_Types.h and osal/inc/M4OSA_FileCommon.h
    
    Change-Id: I2b1751962945dcc668e995d05a57b66cd268642f
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Fix for issue 3371667: fix source code compilation warnings(Moved from master)
    
    Change-Id: Ife1fc3f89beae498a49970ab5d2a080a112ce7c2
    Fixed the SRC interface
    
    bug - 3369860
    
    Change-Id: I6b866d334af9c9aea1db0295bf19edbc4123293d
    VideEditor:Fix for 3369908 Removed redundant code.
    
    Change-Id: Ia0789f5c6205ad2fc793921bb967bd9ec76e2b9a
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I79efc956aa0d23fb333d12c8947b48455b7524d1
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Speed up thumbnail generation.
    
    We accept a tolerance parameter while decoding. We also tell the
    stagefright decoder to jump so we can move to the new frame faster.
    
    Change-Id: Iede3c1f909f1c42b2d5a53c782083367b00f62fb
    Fix for 4132872 inefficient export logic.
    
    Also fixes 3371103 Transitions between images takes a long time
    to generate.
    
    Redundant transcoding is removed. Decode encode will be done only
    once per clip.
    For images, conversion to 3gp clip is removed (except for generating
    Kenburn image clip).
    
    Change-Id: Id722cd0296641bd643eb5c63f4d8028716259c01
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Fix for 4132872 inefficient export logic.
    
    Also fixes 3371103 Transitions between images takes a long time
    to generate.
    
    Redundant transcoding is removed. Decode encode will be done only
    once per clip.
    For images, conversion to 3gp clip is removed (except for generating
    Kenburn image clip).
    
    Change-Id: Id722cd0296641bd643eb5c63f4d8028716259c01
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Fixed 3419090 Throwing exception for unsupported video codec profiles and level
    
    Change-Id: Icc6fa16e1aed5eef4eb7908a8657b940290668e4
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for 4132872 inefficient export logic.
    
    Also fixes 3371103 Transitions between images takes a long time
    to generate.
    
    Redundant transcoding is removed. Decode encode will be done only
    once per clip.
    For images, conversion to 3gp clip is removed (except for generating
    Kenburn image clip).
    
    Change-Id: Id722cd0296641bd643eb5c63f4d8028716259c01
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Merge the same files on top of tree.
    
    Add support for .m4v Issue 3395600
    
    Change-Id: Ica9efce7ee3b550b2c49251c97a0663d490ffd73
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix green or corrupted video frames in the exported movies
    
    At least two use cases are affected: trimming and transition clip generation.
    
    If the starting time of the transition or the trimming position is not the same as
    that of any existing video frame, the video frame right before the transition
    starting position or the trimming position must be encoded as the the first video
    frame for the transtion or the trimmed video, and it is encoded as a key frame.
    This frame was not saved without the patch.
    
    In the transcoding phrase, since we could not find such a frame, the existing
    code did not return an error, and incorrectly used some other frame to serve
    as the reference key frame for the remaining video frames of the transition or
    the trimmed video. As a result, we may see corrupted or green video frames in
    the exported movies.
    
    The fix is to always save the frame right before the trimming position or
    the transition starting time, so that a key frame will always be encoded, and
    the right reference frame is used for remaining video frames. In addition,
    checks are added to prevent from future mistakes to use incorrect reference frames.
    
    Patch was originally contributed by teng.hong@nxp.com
    
    Change-Id: I182784d4c1786224445224634edab3338bf2278f
    related-to-bug: 5713461
    Fix green frame issue
    
    When the transition clip is generated: two clips in general are involved.
    The second clip was assigned the incorrect effect number when a transition was coupled with a color effect
    
    o patch contributed by Hong Teng <hongteng@nxp.com>
    o related-to-bug: 5713461
    
    Change-Id: I61b497620264692b331da8b8e7753240edc5d1aa
    Fix for 5154138 Titles are not aligned properly in a exported movie from Movie Studio
    Apply frame effect(overlay) after rendering mode was done
    
    Change-Id: I1ff9cc868117cc8dcdc735e6854ff429b74e8154
    DO NOT MERGE - Fix for bug 5255159 Cannot play exported movie from Movie Studio
    
    Ensure video encoder is not created and destroyed for every clip.
    
    Change-Id: I9ce4db9312af801570dd51f4b075f262e27e3952
    Fix for bug 5255159 Cannot play exported movie from Movie Studio
    
    Ensure video encoder is not created and destroyed for every clip.
    
    Change-Id: I7a1d525e7bcdc839acc39d43e5046207c2d3b44f
    Fix for
    -5234840 corrupted frames in transition.
    -Green frames in image transition.
    
            modified:   vss/mcs/src/M4MCS_API.c
            modified:   vss/src/M4VSS3GPP_EditVideo.c
    
    Change-Id: I2632d47c44f00bbc81e2b3e19b225178ab456810
    Fix for 5156702 Rotate video output for thumbnails and export
    
    This is part of a multi project submit.
    This is the native engine part.
    
    Change-Id: Icde922194a123a90544942caa12430fc3c4ef10e
    Fix 5200858: we need to pass timestamp to render correct frames.
    
    Change-Id: I262cefabea87f75883bcd074370deae054df3e88
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Fix for 4132872 inefficient export logic.
    
    Also fixes 3371103 Transitions between images takes a long time
    to generate.
    
    Redundant transcoding is removed. Decode encode will be done only
    once per clip.
    For images, conversion to 3gp clip is removed (except for generating
    Kenburn image clip).
    
    Change-Id: Id722cd0296641bd643eb5c63f4d8028716259c01
    Remove curtain effects (they are unused).
    
    Change-Id: I8e1ccad3e9ddf4c272e85e7ca04582b4863c242d
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    VideoEditor: Issue ID: 3371667: Fix Set1
    
    Change-Id: I728bc27b86e0c8720a2d05e6cff8a76f820bf016
    Fixed issue 3421896 Slide transition causes images to jump in exported movie playback
    
    Change-Id: I78cbe7e3509f65ce651de926267fad4f65c3c263
    Fixed issue 3443078 overlay flicker on transition in exported video
    
    Change-Id: I4c625a1f7c9897ee0d9aee3f521974456c97ad8c
    Fix for issue: 3404624 The overlay in the exported video is blurry
    
    Change-Id: Ia24eeec5d22b1f9bc911260292e8e481830f2493
    Fix for issue 3404624 - The overlay in exported video is blurry
    
    Change-Id: I52bd474c85589bd75e58c675045a7c7fe058a228
    Fix 3367037 Transition are of low Quality
    
    Change-Id: I511546aef895edbfed16fc855bada93486dd886a
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for 4132872 inefficient export logic.
    
    Also fixes 3371103 Transitions between images takes a long time
    to generate.
    
    Redundant transcoding is removed. Decode encode will be done only
    once per clip.
    For images, conversion to 3gp clip is removed (except for generating
    Kenburn image clip).
    
    Change-Id: Id722cd0296641bd643eb5c63f4d8028716259c01
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    VideoEditor: Issue ID: 3371667: Fix Set1
    
    Change-Id: I728bc27b86e0c8720a2d05e6cff8a76f820bf016
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Integrate improved coefficient sinc resampler: VHQ
    
    Summary:
    Very high quality is enabled only for 44.1 -> 48 or 48 -> 44.1,
      and uses low quality for all other use cases.
    Track estimated CPU load and throttles the quality based on load;
      as currently configured it should allow up to 2 instances of very high quality.
    Medium quality and high quality are currently disabled unless explicitly requested.
    
    Details:
    Only load .so the first time it is needed.
    Cleanup code style: formatting, indentation, whitespace.
    Restore medium quality resampler, but it is not used (see next line).
    Fix memory leak for sinc resampler.
    Check sample rate in resampler constructor.
    Add logs for debugging.
    Rename DEFAULT to DEFAULT_QUALITY for consistency with other quality levels.
    Renumber VERY_HIGH_QUALITY from 255 to 4.
    Use enum src_quality consistently.
    Improve parsing of property af.resampler.quality.
    Fix reentrancy bug - allow an instance of high quality and an instance
      of very high quality to both be active concurrently.
    
    Bug: 7229644
    Change-Id: I0ce6b913b05038889f50462a38830b61a602a9f7
    Integrate improved coefficient sinc resampler: VHQ
    
    Summary:
    Very high quality is enabled only for 44.1 -> 48 or 48 -> 44.1,
      and uses low quality for all other use cases.
    Track estimated CPU load and throttles the quality based on load;
      as currently configured it should allow up to 2 instances of very high quality.
    Medium quality and high quality are currently disabled unless explicitly requested.
    
    Details:
    Only load .so the first time it is needed.
    Cleanup code style: formatting, indentation, whitespace.
    Restore medium quality resampler, but it is not used (see next line).
    Fix memory leak for sinc resampler.
    Check sample rate in resampler constructor.
    Add logs for debugging.
    Rename DEFAULT to DEFAULT_QUALITY for consistency with other quality levels.
    Renumber VERY_HIGH_QUALITY from 255 to 4.
    Use enum src_quality consistently.
    Improve parsing of property af.resampler.quality.
    Fix reentrancy bug - allow an instance of high quality and an instance
      of very high quality to both be active concurrently.
    
    Bug: 7229644
    Change-Id: I0ce6b913b05038889f50462a38830b61a602a9f7
    Update method sigs.
    
    Update the getNextBuffer signatures to have an additional (but
    ignorable) parameter used to implement timed audio output.
    
    Change-Id: Icb98e4af4d136c234ae8c5cbb4a5de4350b436bb
    Fix two typos in the defined frequency enums
    
    Change-Id: Ia0b6af98bd8f2ccb4d79705064a225e5f699ed8d
    ditherAndClamp from libaudioutils not AudioMixer
    
    Change-Id: I1e8a00c81efefd956fe9e4d9b58557373320e322
    Incorporate aah changes to AudioBufferProvider into VideoEditor
    
    This is a squashed merge from master-tungsten of the following change:
    
    commit e1bec6e10c8d7462a0970568153a2d9db1463e6e
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:57 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: I565b48450f98089767bf92b435826c9f4baeb01c
    
    Change-Id: I201bdc4479a53b4bc023549d0a1831ac0a8f33dc
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    Incorporate aah changes to AudioBufferProvider into VideoEditor
    
    This is a squashed merge from master-tungsten of the following change:
    
    commit e1bec6e10c8d7462a0970568153a2d9db1463e6e
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:57 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: I565b48450f98089767bf92b435826c9f4baeb01c
    
    Change-Id: I76021f5de9aad92381678e299c8e8b5a77d577bf
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3371667: fix source code compilation warnings(Moved from master)
    
    Change-Id: Ife1fc3f89beae498a49970ab5d2a080a112ce7c2
    Fix for issue  3444969 : Crash while generating transition
    
    Change-Id: I63286dc66bfcd496aee45d26c8934f519ce63429
    Fix for issue 3431967 : Memory leak from video editor engine
    
    Change-Id: I36e1cae53c91217804bc8243d9eb47820fb2114e
    Fixed the SRC interface
    
    bug - 3369860
    
    Change-Id: I6b866d334af9c9aea1db0295bf19edbc4123293d
    VideEditor:Fix for 3369908 Removed redundant code.
    
    Change-Id: Ia0789f5c6205ad2fc793921bb967bd9ec76e2b9a
    Fix another buffer overflow issue
    
    Using hard-coded length value easily leads to buffer overflow.
    Refactor the code a bit to make it more readable, and more
    extensible, and less subject to the buffer overflow coding error.
    
    Patch originally contributed by teng.hong@nxp.com
    
    Change-Id: Id262915302ccea8ae3b0121bf39890ab463aeeb7
    related-to-bug: 6328360
    Speed up thumbnail generation.
    
    We accept a tolerance parameter while decoding. We also tell the
    stagefright decoder to jump so we can move to the new frame faster.
    
    Change-Id: Iede3c1f909f1c42b2d5a53c782083367b00f62fb
    Fix for 4132872 inefficient export logic.
    
    Also fixes 3371103 Transitions between images takes a long time
    to generate.
    
    Redundant transcoding is removed. Decode encode will be done only
    once per clip.
    For images, conversion to 3gp clip is removed (except for generating
    Kenburn image clip).
    
    Change-Id: Id722cd0296641bd643eb5c63f4d8028716259c01
    Fix of issue 4973565 Cannot export movie.
    Also fixes 4441452 Native Crash after applying transition
    
    Change-Id: Ic48c44bc2c5d07e57edb8f63393cea424d3275f4
    Fix for issue 4905998 OMXCodec::drainInputBuffer, findInt64(kKeyTime, &lastBufferTimeUs) fails
    
    Change-Id: I353bd9e8aa1eceb9c14040a9953777967500fb1d
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - Removed below unused functions
        a. M4PTO3GPP_RegisterExternalVideoEncoder
        b. M4VSS3GPP_editRegisterExternalVideoDecoder
        c. M4VSS3GPP_editRegisterExternalVideoEncoder
        d. M4VSS3GPP_extractPictureRegisterExternalVideoDecoder
        e. M4VSS3GPP_editRegisterExternalCodec
        f. M4VSS3GPP_editSubscribeExternalCodecs
        g. M4VSS3GPP_intSubscribeExternalCodecs
        h. M4VSS3GPP_intClipRegisterExternalVideoDecoder
        i. M4xVSS_RegisterExternalVideoDecoder
        j. M4xVSS_RegisterExternalVideoEncoder
        k. M4MCS_registerExternalVideoDecoder
        l. M4MCS_registerExternalVideoEncoder
        m. M4MCS_registerExternalAudioDecoder
        n. M4MCS_registerExternalAudioEncoder
        o. M4DECODER_EXTERNAL_getInterface
    
    - Also remove small code associated with these functions and Remove below unsused src + header files
        a. M4CLOCK.h
        b. M4MDP_API.h
        c. M4VD_EXTERNAL_Internal.h
        d. M4VD_HW_API.h
        e. M4VE_API.h
        f. M4_Logo.h
        g. M4VD_EXTERNAL_Interface.c
        h. LV_Types.h
        i. M4OSA_FileAccess.h
        j. M4OSA_FileCache.h
        k. M4OSA_FileExtra.h
        l. M4OSA_FileReaderRam.h
        m. M4OSA_FileWriterRam.h
        n. M4OSA_String.h
        o. M4OSA_String_priv.h
        p. M4OSA_FileCache.c
        q. M4OSA_FileExtra.c
        r. M4OSA_FileReader_RAM.c
        s. M4OSA_FileWriter_RAM.c
        t. M4OSA_String.c
        u. M4OSA_String_priv.c
    
    Change-Id: I7271cbe92168e665a8e5b7afe7c7fe1c331eaa1e
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I79efc956aa0d23fb333d12c8947b48455b7524d1
    Fixed issue 3443078 overlay flicker on transition in exported video
    
    Change-Id: I0376b09acd91be8ba792478323d9f48a71818c2b
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix of issue 4973565 Cannot export movie.
    Also fixes 4441452 Native Crash after applying transition
    
    Change-Id: Ic48c44bc2c5d07e57edb8f63393cea424d3275f4
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix a typo in filename "M4ChannelCoverter.c"
    
    Change-Id: If7e3afa8ac10fc34e920a199fd31526ced0a2534
    Fix for issue 3385135 "source code cleanup" engine part
    - Removed below unused functions
        a. M4PTO3GPP_RegisterExternalVideoEncoder
        b. M4VSS3GPP_editRegisterExternalVideoDecoder
        c. M4VSS3GPP_editRegisterExternalVideoEncoder
        d. M4VSS3GPP_extractPictureRegisterExternalVideoDecoder
        e. M4VSS3GPP_editRegisterExternalCodec
        f. M4VSS3GPP_editSubscribeExternalCodecs
        g. M4VSS3GPP_intSubscribeExternalCodecs
        h. M4VSS3GPP_intClipRegisterExternalVideoDecoder
        i. M4xVSS_RegisterExternalVideoDecoder
        j. M4xVSS_RegisterExternalVideoEncoder
        k. M4MCS_registerExternalVideoDecoder
        l. M4MCS_registerExternalVideoEncoder
        m. M4MCS_registerExternalAudioDecoder
        n. M4MCS_registerExternalAudioEncoder
        o. M4DECODER_EXTERNAL_getInterface
    
    - Also remove small code associated with these functions and Remove below unsused src + header files
        a. M4CLOCK.h
        b. M4MDP_API.h
        c. M4VD_EXTERNAL_Internal.h
        d. M4VD_HW_API.h
        e. M4VE_API.h
        f. M4_Logo.h
        g. M4VD_EXTERNAL_Interface.c
        h. LV_Types.h
        i. M4OSA_FileAccess.h
        j. M4OSA_FileCache.h
        k. M4OSA_FileExtra.h
        l. M4OSA_FileReaderRam.h
        m. M4OSA_FileWriterRam.h
        n. M4OSA_String.h
        o. M4OSA_String_priv.h
        p. M4OSA_FileCache.c
        q. M4OSA_FileExtra.c
        r. M4OSA_FileReader_RAM.c
        s. M4OSA_FileWriter_RAM.c
        t. M4OSA_String.c
        u. M4OSA_String_priv.c
    
    Change-Id: I7271cbe92168e665a8e5b7afe7c7fe1c331eaa1e
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4035003 Support for 64 bit datatype
    a. M4OSA_64BITS_SUPPORTED removed
    b. M4OSA_64BITS_NOT_SUPPORTED removed
    c. M4OSA_UInt64 removed
    d. M4OSA_Int64 removed
    e. M4OSA_INT32_FROM_INT32 removed
    f. M4OSA_TIME_FROM_INT32_UINT32 removed
    g. clean-up all macro in M4OSA_Time.h, M4OSA_Types.h and osal/inc/M4OSA_FileCommon.h
    
    Change-Id: I2b1751962945dcc668e995d05a57b66cd268642f
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4035003 Support for 64 bit datatype
    a. M4OSA_64BITS_SUPPORTED removed
    b. M4OSA_64BITS_NOT_SUPPORTED removed
    c. M4OSA_UInt64 removed
    d. M4OSA_Int64 removed
    e. M4OSA_INT32_FROM_INT32 removed
    f. M4OSA_TIME_FROM_INT32_UINT32 removed
    g. clean-up all macro in M4OSA_Time.h, M4OSA_Types.h and osal/inc/M4OSA_FileCommon.h
    
    Change-Id: I2b1751962945dcc668e995d05a57b66cd268642f
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    libvideoeditor: fix code bugs when enabling all-level debugging macros
    
    Change-Id: Ic8aedfa821d79698d31cf7ee3bf382aae85981f6
    Signed-off-by: beanz <beanz@marvell.com>
    Fix for 5274212 Transition clip contains more video frames from 1 video clip than the other
    
    Set the alpha blending value correctly.
    
    Change-Id: I6aaed47144d09d182afb1c70d5bb72b7360fb51e
    Fix for 5156702 Rotate video output for thumbnails and export
    
    This is part of a multi project submit.
    This is the native engine part.
    
    Change-Id: Icde922194a123a90544942caa12430fc3c4ef10e
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Fix for 4132872 inefficient export logic.
    
    Also fixes 3371103 Transitions between images takes a long time
    to generate.
    
    Redundant transcoding is removed. Decode encode will be done only
    once per clip.
    For images, conversion to 3gp clip is removed (except for generating
    Kenburn image clip).
    
    Change-Id: Id722cd0296641bd643eb5c63f4d8028716259c01
    Fix for 5083973 M4VSS3GPP_editCleanUp called twice problem.
    
    Set VSS context to NULL after cleanup.
    
    Change-Id: I1086fbe60a7777b00e80f0ea504f58a183fd3241
    fix for issue 4142219
    Don't hard code platform-specific limitations
    engine part.
    
    Change-Id: Ibc8a539e5bbac738f60ef935670a333b7017e20e
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - Removed below unused functions
        a. M4PTO3GPP_RegisterExternalVideoEncoder
        b. M4VSS3GPP_editRegisterExternalVideoDecoder
        c. M4VSS3GPP_editRegisterExternalVideoEncoder
        d. M4VSS3GPP_extractPictureRegisterExternalVideoDecoder
        e. M4VSS3GPP_editRegisterExternalCodec
        f. M4VSS3GPP_editSubscribeExternalCodecs
        g. M4VSS3GPP_intSubscribeExternalCodecs
        h. M4VSS3GPP_intClipRegisterExternalVideoDecoder
        i. M4xVSS_RegisterExternalVideoDecoder
        j. M4xVSS_RegisterExternalVideoEncoder
        k. M4MCS_registerExternalVideoDecoder
        l. M4MCS_registerExternalVideoEncoder
        m. M4MCS_registerExternalAudioDecoder
        n. M4MCS_registerExternalAudioEncoder
        o. M4DECODER_EXTERNAL_getInterface
    
    - Also remove small code associated with these functions and Remove below unsused src + header files
        a. M4CLOCK.h
        b. M4MDP_API.h
        c. M4VD_EXTERNAL_Internal.h
        d. M4VD_HW_API.h
        e. M4VE_API.h
        f. M4_Logo.h
        g. M4VD_EXTERNAL_Interface.c
        h. LV_Types.h
        i. M4OSA_FileAccess.h
        j. M4OSA_FileCache.h
        k. M4OSA_FileExtra.h
        l. M4OSA_FileReaderRam.h
        m. M4OSA_FileWriterRam.h
        n. M4OSA_String.h
        o. M4OSA_String_priv.h
        p. M4OSA_FileCache.c
        q. M4OSA_FileExtra.c
        r. M4OSA_FileReader_RAM.c
        s. M4OSA_FileWriter_RAM.c
        t. M4OSA_String.c
        u. M4OSA_String_priv.c
    
    Change-Id: I7271cbe92168e665a8e5b7afe7c7fe1c331eaa1e
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I79efc956aa0d23fb333d12c8947b48455b7524d1
    VideoEditor: Issue ID: 3371667: Fix Set1
    
    Change-Id: I728bc27b86e0c8720a2d05e6cff8a76f820bf016
    VideoEditor:Issue:3431967: Memory leak in Export case
    
    Code cleanup
    
    Change-Id: I81be8ef4f3abead6a85db8b0a4b2a9c594b1bcac
    Fixed issue 3443078 overlay flicker on transition in exported video
    
    Change-Id: I4c625a1f7c9897ee0d9aee3f521974456c97ad8c
    Fix Issue Crash during Export Issue 3414805 , and Preview smoothning for 720p Clips
    
    Change-Id: I5a90fc350a33c1eca9b4ec682b68b80913578341
    Incorporated review comments and merged on TOT
    
    Change-Id: Ia147aeb73a6d8cf9c48e02ccaa428aa7adc04d3a
    Merge the same files on top of tree.
    
    Add support for .m4v Issue 3395600
    
    Change-Id: Ica9efce7ee3b550b2c49251c97a0663d490ffd73
    Fix for issue 3400229 Pan and Zoom effect is not accurate in core
    
    Change-Id: I14e79bc5b75772df5095dc96bef2fabfa6763af1
    Fix for issue 3370007 Overlay transparency is missing
    
    Change-Id: I1b513b607f669d141bcd28bd918b8c1319bef7fa
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: I5c54a0185527f6ca3e746d625a007aa06f6f25f9
    Rename LOGV(_IF) to ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I366680b6e614b8983d1def28cc2fdbfa98f39531
    Fix for 5156702 Rotate video output for thumbnails and export
    
    This is part of a multi project submit.
    This is the native engine part.
    
    Change-Id: Icde922194a123a90544942caa12430fc3c4ef10e
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - Removed below unused functions
        a. M4PTO3GPP_RegisterExternalVideoEncoder
        b. M4VSS3GPP_editRegisterExternalVideoDecoder
        c. M4VSS3GPP_editRegisterExternalVideoEncoder
        d. M4VSS3GPP_extractPictureRegisterExternalVideoDecoder
        e. M4VSS3GPP_editRegisterExternalCodec
        f. M4VSS3GPP_editSubscribeExternalCodecs
        g. M4VSS3GPP_intSubscribeExternalCodecs
        h. M4VSS3GPP_intClipRegisterExternalVideoDecoder
        i. M4xVSS_RegisterExternalVideoDecoder
        j. M4xVSS_RegisterExternalVideoEncoder
        k. M4MCS_registerExternalVideoDecoder
        l. M4MCS_registerExternalVideoEncoder
        m. M4MCS_registerExternalAudioDecoder
        n. M4MCS_registerExternalAudioEncoder
        o. M4DECODER_EXTERNAL_getInterface
    
    - Also remove small code associated with these functions and Remove below unsused src + header files
        a. M4CLOCK.h
        b. M4MDP_API.h
        c. M4VD_EXTERNAL_Internal.h
        d. M4VD_HW_API.h
        e. M4VE_API.h
        f. M4_Logo.h
        g. M4VD_EXTERNAL_Interface.c
        h. LV_Types.h
        i. M4OSA_FileAccess.h
        j. M4OSA_FileCache.h
        k. M4OSA_FileExtra.h
        l. M4OSA_FileReaderRam.h
        m. M4OSA_FileWriterRam.h
        n. M4OSA_String.h
        o. M4OSA_String_priv.h
        p. M4OSA_FileCache.c
        q. M4OSA_FileExtra.c
        r. M4OSA_FileReader_RAM.c
        s. M4OSA_FileWriter_RAM.c
        t. M4OSA_String.c
        u. M4OSA_String_priv.c
    
    Change-Id: I7271cbe92168e665a8e5b7afe7c7fe1c331eaa1e
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Fix issue 3457629 FIle loads but does not play
    
    Change-Id: Id4f77d3883b0f6ad6ffd75ddac49efd5cf2ca1c7
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for 5154138 Titles are not aligned properly in a exported movie from Movie Studio
    Apply frame effect(overlay) after rendering mode was done
    
    Change-Id: I1ff9cc868117cc8dcdc735e6854ff429b74e8154
    Fix for 5205420 compression domain trimming fallback mechanism
    
    Transcode if clip's profile or level exceeds encoder's supported
    profile or level.
    
    Change-Id: Ib2f678828a58657b095ef6ef219fd0aa2bdccf91
    DO NOT MERGE - Fix for bug 5255159 Cannot play exported movie from Movie Studio
    
    Ensure video encoder is not created and destroyed for every clip.
    
    Change-Id: I9ce4db9312af801570dd51f4b075f262e27e3952
    Fix for bug 5255159 Cannot play exported movie from Movie Studio
    
    Ensure video encoder is not created and destroyed for every clip.
    
    Change-Id: I7a1d525e7bcdc839acc39d43e5046207c2d3b44f
    Fix 5240036: We didn't handle the 1920x1080 resolution.
    
    Change-Id: Id48c7db085bb73625acad365e0a036c8e45567dc
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Fix for 4132872 inefficient export logic.
    
    Also fixes 3371103 Transitions between images takes a long time
    to generate.
    
    Redundant transcoding is removed. Decode encode will be done only
    once per clip.
    For images, conversion to 3gp clip is removed (except for generating
    Kenburn image clip).
    
    Change-Id: Id722cd0296641bd643eb5c63f4d8028716259c01
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - Removed below unused functions
        a. M4PTO3GPP_RegisterExternalVideoEncoder
        b. M4VSS3GPP_editRegisterExternalVideoDecoder
        c. M4VSS3GPP_editRegisterExternalVideoEncoder
        d. M4VSS3GPP_extractPictureRegisterExternalVideoDecoder
        e. M4VSS3GPP_editRegisterExternalCodec
        f. M4VSS3GPP_editSubscribeExternalCodecs
        g. M4VSS3GPP_intSubscribeExternalCodecs
        h. M4VSS3GPP_intClipRegisterExternalVideoDecoder
        i. M4xVSS_RegisterExternalVideoDecoder
        j. M4xVSS_RegisterExternalVideoEncoder
        k. M4MCS_registerExternalVideoDecoder
        l. M4MCS_registerExternalVideoEncoder
        m. M4MCS_registerExternalAudioDecoder
        n. M4MCS_registerExternalAudioEncoder
        o. M4DECODER_EXTERNAL_getInterface
    
    - Also remove small code associated with these functions and Remove below unsused src + header files
        a. M4CLOCK.h
        b. M4MDP_API.h
        c. M4VD_EXTERNAL_Internal.h
        d. M4VD_HW_API.h
        e. M4VE_API.h
        f. M4_Logo.h
        g. M4VD_EXTERNAL_Interface.c
        h. LV_Types.h
        i. M4OSA_FileAccess.h
        j. M4OSA_FileCache.h
        k. M4OSA_FileExtra.h
        l. M4OSA_FileReaderRam.h
        m. M4OSA_FileWriterRam.h
        n. M4OSA_String.h
        o. M4OSA_String_priv.h
        p. M4OSA_FileCache.c
        q. M4OSA_FileExtra.c
        r. M4OSA_FileReader_RAM.c
        s. M4OSA_FileWriter_RAM.c
        t. M4OSA_String.c
        u. M4OSA_String_priv.c
    
    Change-Id: I7271cbe92168e665a8e5b7afe7c7fe1c331eaa1e
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Fixed issue 3421896 Slide transition causes images to jump in exported movie playback
    
    Change-Id: I78cbe7e3509f65ce651de926267fad4f65c3c263
    Fixed issue 3443078 overlay flicker on transition in exported video
    
    Change-Id: I4c625a1f7c9897ee0d9aee3f521974456c97ad8c
    Fix for issue 3404624 - The overlay in exported video is blurry
    
    Change-Id: I52bd474c85589bd75e58c675045a7c7fe058a228
    Fix 3367037 Transition are of low Quality
    
    Change-Id: I511546aef895edbfed16fc855bada93486dd886a
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Remove curtain effects (they are unused).
    
    Change-Id: I8e1ccad3e9ddf4c272e85e7ca04582b4863c242d
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for 4132872 inefficient export logic.
    
    Also fixes 3371103 Transitions between images takes a long time
    to generate.
    
    Redundant transcoding is removed. Decode encode will be done only
    once per clip.
    For images, conversion to 3gp clip is removed (except for generating
    Kenburn image clip).
    
    Change-Id: Id722cd0296641bd643eb5c63f4d8028716259c01
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for 5156702 Rotate video output for thumbnails and export
    
    This is part of a multi project submit.
    This is the native engine part.
    
    Change-Id: Icde922194a123a90544942caa12430fc3c4ef10e
    Fix for 4132872 inefficient export logic.
    
    Also fixes 3371103 Transitions between images takes a long time
    to generate.
    
    Redundant transcoding is removed. Decode encode will be done only
    once per clip.
    For images, conversion to 3gp clip is removed (except for generating
    Kenburn image clip).
    
    Change-Id: Id722cd0296641bd643eb5c63f4d8028716259c01
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4035003 Support for 64 bit datatype
    a. M4OSA_64BITS_SUPPORTED removed
    b. M4OSA_64BITS_NOT_SUPPORTED removed
    c. M4OSA_UInt64 removed
    d. M4OSA_Int64 removed
    e. M4OSA_INT32_FROM_INT32 removed
    f. M4OSA_TIME_FROM_INT32_UINT32 removed
    g. clean-up all macro in M4OSA_Time.h, M4OSA_Types.h and osal/inc/M4OSA_FileCommon.h
    
    Change-Id: I2b1751962945dcc668e995d05a57b66cd268642f
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for 5156702 Rotate video output for thumbnails and export
    
    This is part of a multi project submit.
    This is the native engine part.
    
    Change-Id: Icde922194a123a90544942caa12430fc3c4ef10e
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Fix for 4132872 inefficient export logic.
    
    Also fixes 3371103 Transitions between images takes a long time
    to generate.
    
    Redundant transcoding is removed. Decode encode will be done only
    once per clip.
    For images, conversion to 3gp clip is removed (except for generating
    Kenburn image clip).
    
    Change-Id: Id722cd0296641bd643eb5c63f4d8028716259c01
    fix for issue 4142219
    Don't hard code platform-specific limitations
    engine part.
    
    Change-Id: Ibc8a539e5bbac738f60ef935670a333b7017e20e
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    VideoEditor: Fix for Issue 3419090
    
    Change-Id: Id0dd34bbe9bb530e44bcdba6933bd6b2d9a7795c
    Merge the same files on top of tree.
    
    Add support for .m4v Issue 3395600
    
    Change-Id: Ica9efce7ee3b550b2c49251c97a0663d490ffd73
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3371667: fix source code compilation warnings(Moved from master)
    
    Change-Id: Ife1fc3f89beae498a49970ab5d2a080a112ce7c2
    Fixed the SRC interface
    
    bug - 3369860
    
    Change-Id: I6b866d334af9c9aea1db0295bf19edbc4123293d
    VideEditor:Fix for 3369908 Removed redundant code.
    
    Change-Id: Ia0789f5c6205ad2fc793921bb967bd9ec76e2b9a
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - Removed below unused functions
        a. M4PTO3GPP_RegisterExternalVideoEncoder
        b. M4VSS3GPP_editRegisterExternalVideoDecoder
        c. M4VSS3GPP_editRegisterExternalVideoEncoder
        d. M4VSS3GPP_extractPictureRegisterExternalVideoDecoder
        e. M4VSS3GPP_editRegisterExternalCodec
        f. M4VSS3GPP_editSubscribeExternalCodecs
        g. M4VSS3GPP_intSubscribeExternalCodecs
        h. M4VSS3GPP_intClipRegisterExternalVideoDecoder
        i. M4xVSS_RegisterExternalVideoDecoder
        j. M4xVSS_RegisterExternalVideoEncoder
        k. M4MCS_registerExternalVideoDecoder
        l. M4MCS_registerExternalVideoEncoder
        m. M4MCS_registerExternalAudioDecoder
        n. M4MCS_registerExternalAudioEncoder
        o. M4DECODER_EXTERNAL_getInterface
    
    - Also remove small code associated with these functions and Remove below unsused src + header files
        a. M4CLOCK.h
        b. M4MDP_API.h
        c. M4VD_EXTERNAL_Internal.h
        d. M4VD_HW_API.h
        e. M4VE_API.h
        f. M4_Logo.h
        g. M4VD_EXTERNAL_Interface.c
        h. LV_Types.h
        i. M4OSA_FileAccess.h
        j. M4OSA_FileCache.h
        k. M4OSA_FileExtra.h
        l. M4OSA_FileReaderRam.h
        m. M4OSA_FileWriterRam.h
        n. M4OSA_String.h
        o. M4OSA_String_priv.h
        p. M4OSA_FileCache.c
        q. M4OSA_FileExtra.c
        r. M4OSA_FileReader_RAM.c
        s. M4OSA_FileWriter_RAM.c
        t. M4OSA_String.c
        u. M4OSA_String_priv.c
    
    Change-Id: I7271cbe92168e665a8e5b7afe7c7fe1c331eaa1e
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    fix for issue 4142219
    Don't hard code platform-specific limitations
    engine part.
    
    Change-Id: Ibc8a539e5bbac738f60ef935670a333b7017e20e
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    VideoEditor:Issue 3385135, AU_B_Frame changed to AU_P_Frame
    
    Change-Id: I18f82dcf819ba5df67f65d1705cda57b4a73c71d
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix of issue 4973565 Cannot export movie.
    Also fixes 4441452 Native Crash after applying transition
    
    Change-Id: Ic48c44bc2c5d07e57edb8f63393cea424d3275f4
    Fix for issue 4905998 OMXCodec::drainInputBuffer, findInt64(kKeyTime, &lastBufferTimeUs) fails
    
    Change-Id: I353bd9e8aa1eceb9c14040a9953777967500fb1d
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Speed up thumbnail generation.
    
    We accept a tolerance parameter while decoding. We also tell the
    stagefright decoder to jump so we can move to the new frame faster.
    
    Change-Id: Iede3c1f909f1c42b2d5a53c782083367b00f62fb
    Fix for 4132872 inefficient export logic.
    
    Also fixes 3371103 Transitions between images takes a long time
    to generate.
    
    Redundant transcoding is removed. Decode encode will be done only
    once per clip.
    For images, conversion to 3gp clip is removed (except for generating
    Kenburn image clip).
    
    Change-Id: Id722cd0296641bd643eb5c63f4d8028716259c01
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - Removed below unused functions
        a. M4PTO3GPP_RegisterExternalVideoEncoder
        b. M4VSS3GPP_editRegisterExternalVideoDecoder
        c. M4VSS3GPP_editRegisterExternalVideoEncoder
        d. M4VSS3GPP_extractPictureRegisterExternalVideoDecoder
        e. M4VSS3GPP_editRegisterExternalCodec
        f. M4VSS3GPP_editSubscribeExternalCodecs
        g. M4VSS3GPP_intSubscribeExternalCodecs
        h. M4VSS3GPP_intClipRegisterExternalVideoDecoder
        i. M4xVSS_RegisterExternalVideoDecoder
        j. M4xVSS_RegisterExternalVideoEncoder
        k. M4MCS_registerExternalVideoDecoder
        l. M4MCS_registerExternalVideoEncoder
        m. M4MCS_registerExternalAudioDecoder
        n. M4MCS_registerExternalAudioEncoder
        o. M4DECODER_EXTERNAL_getInterface
    
    - Also remove small code associated with these functions and Remove below unsused src + header files
        a. M4CLOCK.h
        b. M4MDP_API.h
        c. M4VD_EXTERNAL_Internal.h
        d. M4VD_HW_API.h
        e. M4VE_API.h
        f. M4_Logo.h
        g. M4VD_EXTERNAL_Interface.c
        h. LV_Types.h
        i. M4OSA_FileAccess.h
        j. M4OSA_FileCache.h
        k. M4OSA_FileExtra.h
        l. M4OSA_FileReaderRam.h
        m. M4OSA_FileWriterRam.h
        n. M4OSA_String.h
        o. M4OSA_String_priv.h
        p. M4OSA_FileCache.c
        q. M4OSA_FileExtra.c
        r. M4OSA_FileReader_RAM.c
        s. M4OSA_FileWriter_RAM.c
        t. M4OSA_String.c
        u. M4OSA_String_priv.c
    
    Change-Id: I7271cbe92168e665a8e5b7afe7c7fe1c331eaa1e
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for 4132872 inefficient export logic.
    
    Also fixes 3371103 Transitions between images takes a long time
    to generate.
    
    Redundant transcoding is removed. Decode encode will be done only
    once per clip.
    For images, conversion to 3gp clip is removed (except for generating
    Kenburn image clip).
    
    Change-Id: Id722cd0296641bd643eb5c63f4d8028716259c01
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Remove libvideoeditor_jni.so's dependency on static libs in video editor engine
    
    related-to-bug: 6502980
    
    Change-Id: I9cbbf44eb53c406263df4003cc3de2af4d239180
    Make file change because libvideoeditor source files moved
    
    o related-to-bug: 6214141
    
    Change-Id: I3ef60ca7670df37d7e43546e244cfe6a33093ba9
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: Ida75833739d363061c2e688a6c7f7d7b3f3edd1e
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    frameworks/media/libvideoeditor: remove LOCAL_PRELINK_MODULE
    
    Change-Id: Ib3ecb46e1ecc192edae2d5634798efffccbb6c94
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Remove the eng developement LOCALtags in makefiles
    
    Change-Id: I6da8691dba062cd54410ffafde27b7eca0b73aa2
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I79efc956aa0d23fb333d12c8947b48455b7524d1
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    Copied MODULE_LICENSE_APACH2 and NOTICE from frameworks/base to frameworks/av
    
    Change-Id: I48c927b9690bf902ab167d60171c0ee7995687e0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Prevent invalid frame durations
    
    Prevent frame duration from being negative when
    exporting movie studio project
    
    Change-Id: I459fb243650c777c2b59d1094acc88c3a944bd81
    Prevent invalid frame durations
    
    Prevent frame duration from being negative when
    exporting movie studio project
    
    Change-Id: I459fb243650c777c2b59d1094acc88c3a944bd81
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4035003 Support for 64 bit datatype
    a. M4OSA_64BITS_SUPPORTED removed
    b. M4OSA_64BITS_NOT_SUPPORTED removed
    c. M4OSA_UInt64 removed
    d. M4OSA_Int64 removed
    e. M4OSA_INT32_FROM_INT32 removed
    f. M4OSA_TIME_FROM_INT32_UINT32 removed
    g. clean-up all macro in M4OSA_Time.h, M4OSA_Types.h and osal/inc/M4OSA_FileCommon.h
    
    Change-Id: I2b1751962945dcc668e995d05a57b66cd268642f
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - Removed below unused functions
        a. M4PTO3GPP_RegisterExternalVideoEncoder
        b. M4VSS3GPP_editRegisterExternalVideoDecoder
        c. M4VSS3GPP_editRegisterExternalVideoEncoder
        d. M4VSS3GPP_extractPictureRegisterExternalVideoDecoder
        e. M4VSS3GPP_editRegisterExternalCodec
        f. M4VSS3GPP_editSubscribeExternalCodecs
        g. M4VSS3GPP_intSubscribeExternalCodecs
        h. M4VSS3GPP_intClipRegisterExternalVideoDecoder
        i. M4xVSS_RegisterExternalVideoDecoder
        j. M4xVSS_RegisterExternalVideoEncoder
        k. M4MCS_registerExternalVideoDecoder
        l. M4MCS_registerExternalVideoEncoder
        m. M4MCS_registerExternalAudioDecoder
        n. M4MCS_registerExternalAudioEncoder
        o. M4DECODER_EXTERNAL_getInterface
    
    - Also remove small code associated with these functions and Remove below unsused src + header files
        a. M4CLOCK.h
        b. M4MDP_API.h
        c. M4VD_EXTERNAL_Internal.h
        d. M4VD_HW_API.h
        e. M4VE_API.h
        f. M4_Logo.h
        g. M4VD_EXTERNAL_Interface.c
        h. LV_Types.h
        i. M4OSA_FileAccess.h
        j. M4OSA_FileCache.h
        k. M4OSA_FileExtra.h
        l. M4OSA_FileReaderRam.h
        m. M4OSA_FileWriterRam.h
        n. M4OSA_String.h
        o. M4OSA_String_priv.h
        p. M4OSA_FileCache.c
        q. M4OSA_FileExtra.c
        r. M4OSA_FileReader_RAM.c
        s. M4OSA_FileWriter_RAM.c
        t. M4OSA_String.c
        u. M4OSA_String_priv.c
    
    Change-Id: I7271cbe92168e665a8e5b7afe7c7fe1c331eaa1e
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - Removed below unused functions
        a. M4PTO3GPP_RegisterExternalVideoEncoder
        b. M4VSS3GPP_editRegisterExternalVideoDecoder
        c. M4VSS3GPP_editRegisterExternalVideoEncoder
        d. M4VSS3GPP_extractPictureRegisterExternalVideoDecoder
        e. M4VSS3GPP_editRegisterExternalCodec
        f. M4VSS3GPP_editSubscribeExternalCodecs
        g. M4VSS3GPP_intSubscribeExternalCodecs
        h. M4VSS3GPP_intClipRegisterExternalVideoDecoder
        i. M4xVSS_RegisterExternalVideoDecoder
        j. M4xVSS_RegisterExternalVideoEncoder
        k. M4MCS_registerExternalVideoDecoder
        l. M4MCS_registerExternalVideoEncoder
        m. M4MCS_registerExternalAudioDecoder
        n. M4MCS_registerExternalAudioEncoder
        o. M4DECODER_EXTERNAL_getInterface
    
    - Also remove small code associated with these functions and Remove below unsused src + header files
        a. M4CLOCK.h
        b. M4MDP_API.h
        c. M4VD_EXTERNAL_Internal.h
        d. M4VD_HW_API.h
        e. M4VE_API.h
        f. M4_Logo.h
        g. M4VD_EXTERNAL_Interface.c
        h. LV_Types.h
        i. M4OSA_FileAccess.h
        j. M4OSA_FileCache.h
        k. M4OSA_FileExtra.h
        l. M4OSA_FileReaderRam.h
        m. M4OSA_FileWriterRam.h
        n. M4OSA_String.h
        o. M4OSA_String_priv.h
        p. M4OSA_FileCache.c
        q. M4OSA_FileExtra.c
        r. M4OSA_FileReader_RAM.c
        s. M4OSA_FileWriter_RAM.c
        t. M4OSA_String.c
        u. M4OSA_String_priv.c
    
    Change-Id: I7271cbe92168e665a8e5b7afe7c7fe1c331eaa1e
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - Removed below unused functions
        a. M4PTO3GPP_RegisterExternalVideoEncoder
        b. M4VSS3GPP_editRegisterExternalVideoDecoder
        c. M4VSS3GPP_editRegisterExternalVideoEncoder
        d. M4VSS3GPP_extractPictureRegisterExternalVideoDecoder
        e. M4VSS3GPP_editRegisterExternalCodec
        f. M4VSS3GPP_editSubscribeExternalCodecs
        g. M4VSS3GPP_intSubscribeExternalCodecs
        h. M4VSS3GPP_intClipRegisterExternalVideoDecoder
        i. M4xVSS_RegisterExternalVideoDecoder
        j. M4xVSS_RegisterExternalVideoEncoder
        k. M4MCS_registerExternalVideoDecoder
        l. M4MCS_registerExternalVideoEncoder
        m. M4MCS_registerExternalAudioDecoder
        n. M4MCS_registerExternalAudioEncoder
        o. M4DECODER_EXTERNAL_getInterface
    
    - Also remove small code associated with these functions and Remove below unsused src + header files
        a. M4CLOCK.h
        b. M4MDP_API.h
        c. M4VD_EXTERNAL_Internal.h
        d. M4VD_HW_API.h
        e. M4VE_API.h
        f. M4_Logo.h
        g. M4VD_EXTERNAL_Interface.c
        h. LV_Types.h
        i. M4OSA_FileAccess.h
        j. M4OSA_FileCache.h
        k. M4OSA_FileExtra.h
        l. M4OSA_FileReaderRam.h
        m. M4OSA_FileWriterRam.h
        n. M4OSA_String.h
        o. M4OSA_String_priv.h
        p. M4OSA_FileCache.c
        q. M4OSA_FileExtra.c
        r. M4OSA_FileReader_RAM.c
        s. M4OSA_FileWriter_RAM.c
        t. M4OSA_String.c
        u. M4OSA_String_priv.c
    
    Change-Id: I7271cbe92168e665a8e5b7afe7c7fe1c331eaa1e
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix green or corrupted video frames in the exported movies
    
    At least two use cases are affected: trimming and transition clip generation.
    
    If the starting time of the transition or the trimming position is not the same as
    that of any existing video frame, the video frame right before the transition
    starting position or the trimming position must be encoded as the the first video
    frame for the transtion or the trimmed video, and it is encoded as a key frame.
    This frame was not saved without the patch.
    
    In the transcoding phrase, since we could not find such a frame, the existing
    code did not return an error, and incorrectly used some other frame to serve
    as the reference key frame for the remaining video frames of the transition or
    the trimmed video. As a result, we may see corrupted or green video frames in
    the exported movies.
    
    The fix is to always save the frame right before the trimming position or
    the transition starting time, so that a key frame will always be encoded, and
    the right reference frame is used for remaining video frames. In addition,
    checks are added to prevent from future mistakes to use incorrect reference frames.
    
    Patch was originally contributed by teng.hong@nxp.com
    
    Change-Id: I182784d4c1786224445224634edab3338bf2278f
    related-to-bug: 5713461
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Remove curtain effects (they are unused).
    
    Change-Id: I8e1ccad3e9ddf4c272e85e7ca04582b4863c242d
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fixed 3419090 Throwing exception for unsupported video codec profiles and level
    
    Change-Id: Icc6fa16e1aed5eef4eb7908a8657b940290668e4
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - Removed below unused functions
        a. M4PTO3GPP_RegisterExternalVideoEncoder
        b. M4VSS3GPP_editRegisterExternalVideoDecoder
        c. M4VSS3GPP_editRegisterExternalVideoEncoder
        d. M4VSS3GPP_extractPictureRegisterExternalVideoDecoder
        e. M4VSS3GPP_editRegisterExternalCodec
        f. M4VSS3GPP_editSubscribeExternalCodecs
        g. M4VSS3GPP_intSubscribeExternalCodecs
        h. M4VSS3GPP_intClipRegisterExternalVideoDecoder
        i. M4xVSS_RegisterExternalVideoDecoder
        j. M4xVSS_RegisterExternalVideoEncoder
        k. M4MCS_registerExternalVideoDecoder
        l. M4MCS_registerExternalVideoEncoder
        m. M4MCS_registerExternalAudioDecoder
        n. M4MCS_registerExternalAudioEncoder
        o. M4DECODER_EXTERNAL_getInterface
    
    - Also remove small code associated with these functions and Remove below unsused src + header files
        a. M4CLOCK.h
        b. M4MDP_API.h
        c. M4VD_EXTERNAL_Internal.h
        d. M4VD_HW_API.h
        e. M4VE_API.h
        f. M4_Logo.h
        g. M4VD_EXTERNAL_Interface.c
        h. LV_Types.h
        i. M4OSA_FileAccess.h
        j. M4OSA_FileCache.h
        k. M4OSA_FileExtra.h
        l. M4OSA_FileReaderRam.h
        m. M4OSA_FileWriterRam.h
        n. M4OSA_String.h
        o. M4OSA_String_priv.h
        p. M4OSA_FileCache.c
        q. M4OSA_FileExtra.c
        r. M4OSA_FileReader_RAM.c
        s. M4OSA_FileWriter_RAM.c
        t. M4OSA_String.c
        u. M4OSA_String_priv.c
    
    Change-Id: I7271cbe92168e665a8e5b7afe7c7fe1c331eaa1e
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for 4132872 inefficient export logic.
    
    Also fixes 3371103 Transitions between images takes a long time
    to generate.
    
    Redundant transcoding is removed. Decode encode will be done only
    once per clip.
    For images, conversion to 3gp clip is removed (except for generating
    Kenburn image clip).
    
    Change-Id: Id722cd0296641bd643eb5c63f4d8028716259c01
    Remove curtain effects (they are unused).
    
    Change-Id: I8e1ccad3e9ddf4c272e85e7ca04582b4863c242d
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - Removed below unused functions
        a. M4PTO3GPP_RegisterExternalVideoEncoder
        b. M4VSS3GPP_editRegisterExternalVideoDecoder
        c. M4VSS3GPP_editRegisterExternalVideoEncoder
        d. M4VSS3GPP_extractPictureRegisterExternalVideoDecoder
        e. M4VSS3GPP_editRegisterExternalCodec
        f. M4VSS3GPP_editSubscribeExternalCodecs
        g. M4VSS3GPP_intSubscribeExternalCodecs
        h. M4VSS3GPP_intClipRegisterExternalVideoDecoder
        i. M4xVSS_RegisterExternalVideoDecoder
        j. M4xVSS_RegisterExternalVideoEncoder
        k. M4MCS_registerExternalVideoDecoder
        l. M4MCS_registerExternalVideoEncoder
        m. M4MCS_registerExternalAudioDecoder
        n. M4MCS_registerExternalAudioEncoder
        o. M4DECODER_EXTERNAL_getInterface
    
    - Also remove small code associated with these functions and Remove below unsused src + header files
        a. M4CLOCK.h
        b. M4MDP_API.h
        c. M4VD_EXTERNAL_Internal.h
        d. M4VD_HW_API.h
        e. M4VE_API.h
        f. M4_Logo.h
        g. M4VD_EXTERNAL_Interface.c
        h. LV_Types.h
        i. M4OSA_FileAccess.h
        j. M4OSA_FileCache.h
        k. M4OSA_FileExtra.h
        l. M4OSA_FileReaderRam.h
        m. M4OSA_FileWriterRam.h
        n. M4OSA_String.h
        o. M4OSA_String_priv.h
        p. M4OSA_FileCache.c
        q. M4OSA_FileExtra.c
        r. M4OSA_FileReader_RAM.c
        s. M4OSA_FileWriter_RAM.c
        t. M4OSA_String.c
        u. M4OSA_String_priv.c
    
    Change-Id: I7271cbe92168e665a8e5b7afe7c7fe1c331eaa1e
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for 5156702 Rotate video output for thumbnails and export
    
    This is part of a multi project submit.
    This is the native engine part.
    
    Change-Id: Icde922194a123a90544942caa12430fc3c4ef10e
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Fix for 4132872 inefficient export logic.
    
    Also fixes 3371103 Transitions between images takes a long time
    to generate.
    
    Redundant transcoding is removed. Decode encode will be done only
    once per clip.
    For images, conversion to 3gp clip is removed (except for generating
    Kenburn image clip).
    
    Change-Id: Id722cd0296641bd643eb5c63f4d8028716259c01
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - Removed below unused functions
        a. M4PTO3GPP_RegisterExternalVideoEncoder
        b. M4VSS3GPP_editRegisterExternalVideoDecoder
        c. M4VSS3GPP_editRegisterExternalVideoEncoder
        d. M4VSS3GPP_extractPictureRegisterExternalVideoDecoder
        e. M4VSS3GPP_editRegisterExternalCodec
        f. M4VSS3GPP_editSubscribeExternalCodecs
        g. M4VSS3GPP_intSubscribeExternalCodecs
        h. M4VSS3GPP_intClipRegisterExternalVideoDecoder
        i. M4xVSS_RegisterExternalVideoDecoder
        j. M4xVSS_RegisterExternalVideoEncoder
        k. M4MCS_registerExternalVideoDecoder
        l. M4MCS_registerExternalVideoEncoder
        m. M4MCS_registerExternalAudioDecoder
        n. M4MCS_registerExternalAudioEncoder
        o. M4DECODER_EXTERNAL_getInterface
    
    - Also remove small code associated with these functions and Remove below unsused src + header files
        a. M4CLOCK.h
        b. M4MDP_API.h
        c. M4VD_EXTERNAL_Internal.h
        d. M4VD_HW_API.h
        e. M4VE_API.h
        f. M4_Logo.h
        g. M4VD_EXTERNAL_Interface.c
        h. LV_Types.h
        i. M4OSA_FileAccess.h
        j. M4OSA_FileCache.h
        k. M4OSA_FileExtra.h
        l. M4OSA_FileReaderRam.h
        m. M4OSA_FileWriterRam.h
        n. M4OSA_String.h
        o. M4OSA_String_priv.h
        p. M4OSA_FileCache.c
        q. M4OSA_FileExtra.c
        r. M4OSA_FileReader_RAM.c
        s. M4OSA_FileWriter_RAM.c
        t. M4OSA_String.c
        u. M4OSA_String_priv.c
    
    Change-Id: I7271cbe92168e665a8e5b7afe7c7fe1c331eaa1e
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Incorporated review comments and merged on TOT
    
    Change-Id: Ia147aeb73a6d8cf9c48e02ccaa428aa7adc04d3a
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for 5154138 Titles are not aligned properly in a exported movie from Movie Studio
    Apply frame effect(overlay) after rendering mode was done
    
    Change-Id: I1ff9cc868117cc8dcdc735e6854ff429b74e8154
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Fix for 4132872 inefficient export logic.
    
    Also fixes 3371103 Transitions between images takes a long time
    to generate.
    
    Redundant transcoding is removed. Decode encode will be done only
    once per clip.
    For images, conversion to 3gp clip is removed (except for generating
    Kenburn image clip).
    
    Change-Id: Id722cd0296641bd643eb5c63f4d8028716259c01
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - Removed below unused functions
        a. M4PTO3GPP_RegisterExternalVideoEncoder
        b. M4VSS3GPP_editRegisterExternalVideoDecoder
        c. M4VSS3GPP_editRegisterExternalVideoEncoder
        d. M4VSS3GPP_extractPictureRegisterExternalVideoDecoder
        e. M4VSS3GPP_editRegisterExternalCodec
        f. M4VSS3GPP_editSubscribeExternalCodecs
        g. M4VSS3GPP_intSubscribeExternalCodecs
        h. M4VSS3GPP_intClipRegisterExternalVideoDecoder
        i. M4xVSS_RegisterExternalVideoDecoder
        j. M4xVSS_RegisterExternalVideoEncoder
        k. M4MCS_registerExternalVideoDecoder
        l. M4MCS_registerExternalVideoEncoder
        m. M4MCS_registerExternalAudioDecoder
        n. M4MCS_registerExternalAudioEncoder
        o. M4DECODER_EXTERNAL_getInterface
    
    - Also remove small code associated with these functions and Remove below unsused src + header files
        a. M4CLOCK.h
        b. M4MDP_API.h
        c. M4VD_EXTERNAL_Internal.h
        d. M4VD_HW_API.h
        e. M4VE_API.h
        f. M4_Logo.h
        g. M4VD_EXTERNAL_Interface.c
        h. LV_Types.h
        i. M4OSA_FileAccess.h
        j. M4OSA_FileCache.h
        k. M4OSA_FileExtra.h
        l. M4OSA_FileReaderRam.h
        m. M4OSA_FileWriterRam.h
        n. M4OSA_String.h
        o. M4OSA_String_priv.h
        p. M4OSA_FileCache.c
        q. M4OSA_FileExtra.c
        r. M4OSA_FileReader_RAM.c
        s. M4OSA_FileWriter_RAM.c
        t. M4OSA_String.c
        u. M4OSA_String_priv.c
    
    Change-Id: I7271cbe92168e665a8e5b7afe7c7fe1c331eaa1e
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 3371667: fix source code compilation warnings(Moved from master)
    
    Change-Id: Ife1fc3f89beae498a49970ab5d2a080a112ce7c2
    Fixed issue 3421896 Slide transition causes images to jump in exported movie playback
    
    Change-Id: I78cbe7e3509f65ce651de926267fad4f65c3c263
    Fixed issue 3443078 overlay flicker on transition in exported video
    
    Change-Id: I4c625a1f7c9897ee0d9aee3f521974456c97ad8c
    Fix for issue 3404624 - The overlay in exported video is blurry
    
    Change-Id: I52bd474c85589bd75e58c675045a7c7fe058a228
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Remove libvideoeditor_jni.so's dependency on static libs in video editor engine
    
    related-to-bug: 6502980
    
    Change-Id: I9cbbf44eb53c406263df4003cc3de2af4d239180
    AV Android make files changes
    
    o plus a few file relocation: ActivityManager.cpp/h, SoundPool.h, etc
    o remove some runtime dependencies to libandroid, libandroid_runtime, etc
    
    Change-Id: I047a47c5fb361dd5cf85cd98798c39f629a75d10
    Resolve undesirable dependency of /frameworks/av/libvideoeditor on /frameworks/base/media/jni
    
    o move VideoEditorMain.h to /frameworks/av/libvideoeditor
    o removed JNI related C_INCLUDE in some Android.mk files
    
    o related-to-bug: 6214141
    
    Change-Id: Iadd01eef701deb728fbac1a3f524ea1db72f6b48
    Make file change because libvideoeditor source files moved
    
    o related-to-bug: 6214141
    
    Change-Id: I3ef60ca7670df37d7e43546e244cfe6a33093ba9
    Fix LOCAL_C_INCLUDES and correct #include syntax
    
    Change-Id: I522861043cc2ee905258a2ae409bf9dddbe452dc
    Switched to use header files in /frameworks/native
    
    o related-to-bug: 6044887
    
    Change-Id: I3a1143b09560a6b8fd67d23bbb375c83442a12e9
    Swtched to use header file in /frameworks/native
    
    o related-to-bug: 6044894
    
    Change-Id: I192f0436572d240fd2fb88446f6fa63ba0128d7e
    Refactored MediaBufferPuller class from VideoEditorVideoEncoder class
    
    o MediaBufferPull class will be useful for the audio encoder also once we switch
      to use OMX-based audio encoder.
    o This is the part one for fixing bug 5947347
    
    Change-Id: Icddfeb636f7a59ad766220ef0d3155abace73ad3
    Move away from MediaDebug and use ADebug instead
    
    Change-Id: I307b3f565808ec8e3b9a4d944c6c0d1f603b04c9
    Add YV12 color converter interface for VideoEditor.
    
    The original assumption in VideoEditor is that the decoder output
    and encoder input are in YV12 format. However on different
    hardware platform the actual formats may be different. So now we
    load a platform-specific YV12 color conversion module which
    knows the actual format and can convert to/from YV12, which is
    the format used in VideoEditor internally for processing.
    
    Bug: 5061733
    Change-Id: I852f85efd30c05cf6c42810059ee4d2ef37ee3da
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    replace libsurfaceflinger_client by libgui
    
    Change-Id: I50b43cd8a75b8a013ad5f778708dfbc09c1d76d6
    Remove unused LOCAL_LDFLAGS
    
    LOCAL_LDFLAGS is never used when building static library.
    
    Change-Id: I55c093b1ab1c58081bcbc4d9d91f45025115536c
    Remove the eng developement LOCALtags in makefiles
    
    Change-Id: I6da8691dba062cd54410ffafde27b7eca0b73aa2
    Fix git_master-without-vendor build
    
    Change-Id: Ia5944bd87ae788b070ff9e44b3428a303fb45ca5
    Fix git_master-without-vendor build
    
    Change-Id: Ia1ceb9d2d11725950c1cdc3215661830842c51fb
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    Copied MODULE_LICENSE_APACH2 and NOTICE from frameworks/base to frameworks/av
    
    Change-Id: I48c927b9690bf902ab167d60171c0ee7995687e0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Refactored MediaBufferPuller class from VideoEditorVideoEncoder class
    
    o MediaBufferPull class will be useful for the audio encoder also once we switch
      to use OMX-based audio encoder.
    o This is the part one for fixing bug 5947347
    
    Change-Id: Icddfeb636f7a59ad766220ef0d3155abace73ad3
    Move away from MediaDebug and use ADebug instead
    
    Change-Id: I307b3f565808ec8e3b9a4d944c6c0d1f603b04c9
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I605079da4a7c01e6555e2aab6f16ccf8cc6ac694
    Rename LOGV(_IF) to ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I366680b6e614b8983d1def28cc2fdbfa98f39531
    Fix for 5477832 Movie Studio crash when trying to import the attached h263 file.
    
    Add support for Audio Object type 5(SBR) and 29(PS) in
    audio decoder node.
    
    Change-Id: I9b631893f530d0c8550a0a7addfbdce226313693
    Fix 5115581: Native crash while importing audio track
    
    Add locking in storeBuffer and read.
    Use the Vector class to simplify the code.
    
    Change-Id: If36ddda432df2b6d6d728b27fa196d2a655e0ba4
    Fix of issue 4973565 Cannot export movie.
    Also fixes 4441452 Native Crash after applying transition
    
    Change-Id: Ic48c44bc2c5d07e57edb8f63393cea424d3275f4
    add private copy constructor and assignment operator to four media source classes
    
    o this patch addresses the encoder and decoder sources for audio and video
    
    Change-Id: I918784ca22138267c270836c91312540eedebc7f
    Fix for issue 4905998 OMXCodec::drainInputBuffer, findInt64(kKeyTime, &lastBufferTimeUs) fails
    
    Change-Id: I353bd9e8aa1eceb9c14040a9953777967500fb1d
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    VideoEditor:Fix for 3384150 and 3369908
    
    Change-Id: I3ea2983d8df263dcbd0b4c55a81f06cdea4ff568
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Refactored MediaBufferPuller class from VideoEditorVideoEncoder class
    
    o MediaBufferPull class will be useful for the audio encoder also once we switch
      to use OMX-based audio encoder.
    o This is the part one for fixing bug 5947347
    
    Change-Id: Icddfeb636f7a59ad766220ef0d3155abace73ad3
    Move away from MediaDebug and use ADebug instead
    
    Change-Id: I307b3f565808ec8e3b9a4d944c6c0d1f603b04c9
    Rename LOGV(_IF) to ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I366680b6e614b8983d1def28cc2fdbfa98f39531
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4035003 Support for 64 bit datatype
    a. M4OSA_64BITS_SUPPORTED removed
    b. M4OSA_64BITS_NOT_SUPPORTED removed
    c. M4OSA_UInt64 removed
    d. M4OSA_Int64 removed
    e. M4OSA_INT32_FROM_INT32 removed
    f. M4OSA_TIME_FROM_INT32_UINT32 removed
    g. clean-up all macro in M4OSA_Time.h, M4OSA_Types.h and osal/inc/M4OSA_FileCommon.h
    
    Change-Id: I2b1751962945dcc668e995d05a57b66cd268642f
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 3453519: do not allow editing of DRM protected contents
    
    Change-Id: I19f56cbdaab0ddb3d1ab0aec8dcf625a3ff3ead2
    Merging on top of new sync
    
    VideoEditor:Fix for issue 3378727
    
    Change-Id: Iff7d13689b436cda2b2073625a786322945b3edc
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    libvideoeditor: fix cannot show some thumbnails in storyboard or no frame display in PreviewRenderer surface after importing video
    
    1. this is caused mFrameIntervalMs isn't assigned for use-software-codec case
    2. without the assingment, some decoded frames will not be copied to the buffer queue of VideoEditorVideoDecoder
    
    Change-Id: I578954e38958ebac8f258300e60b8ddf60e50521
    Signed-off-by: beanz <beanz@marvell.com>
    libvideoeditor: fix cannot show some thumbnails in storyboard or no frame display in PreviewRenderer surface after importing video
    
    1. this is caused mFrameIntervalMs isn't assigned for use-software-codec case
    2. without the assingment, some decoded frames will not be copied to the buffer queue of VideoEditorVideoDecoder
    
    Change-Id: I578954e38958ebac8f258300e60b8ddf60e50521
    Signed-off-by: beanz <beanz@marvell.com>
    Fix green or corrupted video frames in the exported movies
    
    At least two use cases are affected: trimming and transition clip generation.
    
    If the starting time of the transition or the trimming position is not the same as
    that of any existing video frame, the video frame right before the transition
    starting position or the trimming position must be encoded as the the first video
    frame for the transtion or the trimmed video, and it is encoded as a key frame.
    This frame was not saved without the patch.
    
    In the transcoding phrase, since we could not find such a frame, the existing
    code did not return an error, and incorrectly used some other frame to serve
    as the reference key frame for the remaining video frames of the transition or
    the trimmed video. As a result, we may see corrupted or green video frames in
    the exported movies.
    
    The fix is to always save the frame right before the trimming position or
    the transition starting time, so that a key frame will always be encoded, and
    the right reference frame is used for remaining video frames. In addition,
    checks are added to prevent from future mistakes to use incorrect reference frames.
    
    Patch was originally contributed by teng.hong@nxp.com
    
    Change-Id: I182784d4c1786224445224634edab3338bf2278f
    related-to-bug: 5713461
    Move away from MediaDebug and use ADebug instead
    
    Change-Id: I307b3f565808ec8e3b9a4d944c6c0d1f603b04c9
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: I5c54a0185527f6ca3e746d625a007aa06f6f25f9
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: I261ad4d5348f4832488707edeb3cbdbb6dd12fca
    Fix for issue 5490443 Native crash while exporting a video
    Handle the decoder error case, this modification is to fix the native crash.
    
    Change-Id: I3f2ef62b591ebfb9e01153b80b04eb330f575207
    Rename LOGV(_IF) to ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I366680b6e614b8983d1def28cc2fdbfa98f39531
    Video editor incorrectly rejects videos that could be supported by the HW decoder
    
    Change-Id: I831b32c7ab02fa110865c88bbb02f339889d97a5
    related-to-bug: 5407761
    Fix 5200962: Handle 0-length buffers from OMXCodec and drop it.
    
    Change-Id: I67c42c41f649f8e37055721efb67ab3ca4b02f0b
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Speed up thumbnail generation.
    
    We accept a tolerance parameter while decoding. We also tell the
    stagefright decoder to jump so we can move to the new frame faster.
    
    Change-Id: Iede3c1f909f1c42b2d5a53c782083367b00f62fb
    Rename YV12 to I420.
    
    Change-Id: I453b7044bf46950ef67091f3417ed3e6a65086a0
    Add YV12 color converter interface for VideoEditor.
    
    The original assumption in VideoEditor is that the decoder output
    and encoder input are in YV12 format. However on different
    hardware platform the actual formats may be different. So now we
    load a platform-specific YV12 color conversion module which
    knows the actual format and can convert to/from YV12, which is
    the format used in VideoEditor internally for processing.
    
    Bug: 5061733
    Change-Id: I852f85efd30c05cf6c42810059ee4d2ef37ee3da
    add private copy constructor and assignment operator to four media source classes
    
    o this patch addresses the encoder and decoder sources for audio and video
    
    Change-Id: I918784ca22138267c270836c91312540eedebc7f
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Fix for 3431967 Memory leak in SF shells
    
    Change-Id: Iaecf24e7cc095c5295a1568b4185e977f19f15aa
    Fixed 3423072 Imported 1080x720 video clips present distorted view
    
    Change-Id: I4e6fb6e803dcb29afeb7cd82967c63479c40b329
    Modification for using Software decoder for thumbnail generation
    
    Change-Id: I6f910292796917ad5aca5054a3522fb197df7826
    Change preview player code also.
    
    Adapt to 32 bit aligned decoder buffers
    
    Change-Id: I631f7e60b8e424af496f45d0e5e292bf9e8a9dde
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    libvideoeditor: fix code bugs when enabling all-level debugging macros
    
    Change-Id: Ic8aedfa821d79698d31cf7ee3bf382aae85981f6
    Signed-off-by: beanz <beanz@marvell.com>
    Fixed a video editor crash due to "divided by 0"
    
    The crash was because the video sample was too short and has 0 duration (or a single frame video).
    This patch is just simply not to support 0 duration video for editing.
    
    Change-Id: I2c7ff78b1e884a4d3a5051f87cdbeeb5dc3078a6
    related-to-bug: 6670656
    Avoid prematurely terminating parsing when some track only has a single access unit
    
    Patch was contributed by teng.hong@nxp.com
    
    Change-Id: I0f56361d839f18627e512d18e86f51b58b9b0e05
    related-to-bug: 6240789
    Move away from MediaDebug and use ADebug instead
    
    Change-Id: I307b3f565808ec8e3b9a4d944c6c0d1f603b04c9
    Rename LOGV(_IF) to ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I366680b6e614b8983d1def28cc2fdbfa98f39531
    DO NOT MERGE. Fix for 5247764 profile and level settings are not always correctly set
    
    Cherry picked from master.
    Correct video bitrate value is set from 3gpReader node.
    Also, bitrate is limited to max supported by encoder as
    per profile and level.
    
    This patch also fixes bug
     5309520 [Prime] Native crash while running CTS test testExportEffectOverlay.
    
    Change-Id: Icd649c02465e88553b6e69ea8bcd01baf66ded9e
    Fix for 5247764 profile and level settings are not always correctly set
    
    Correct video bitrate value is set from 3gpReader node.
    Also, bitrate is limited to max supported by encoder as
    per profile and level.
    
    This patch also fixes bug
     5309520 [Prime] Native crash while running CTS test testExportEffectOverlay.
    
    Change-Id: Icd649c02465e88553b6e69ea8bcd01baf66ded9e
    Fix for 5156702 Rotate video output for thumbnails and export
    
    This is part of a multi project submit.
    This is the native engine part.
    
    Change-Id: Icde922194a123a90544942caa12430fc3c4ef10e
    Fix copy and paste errors for mime type strings in the 3GP reader
    
    Change-Id: Ia91b06f4dba9e4265260b28aabeeffeceff6d157
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4035003 Support for 64 bit datatype
    a. M4OSA_64BITS_SUPPORTED removed
    b. M4OSA_64BITS_NOT_SUPPORTED removed
    c. M4OSA_UInt64 removed
    d. M4OSA_Int64 removed
    e. M4OSA_INT32_FROM_INT32 removed
    f. M4OSA_TIME_FROM_INT32_UINT32 removed
    g. clean-up all macro in M4OSA_Time.h, M4OSA_Types.h and osal/inc/M4OSA_FileCommon.h
    
    Change-Id: I2b1751962945dcc668e995d05a57b66cd268642f
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Fix for issue 3453519: do not allow editing of DRM protected contents
    
    Change-Id: I19f56cbdaab0ddb3d1ab0aec8dcf625a3ff3ead2
    Fix for 3448630 H.263 files returning unsupported profile and level.
    
    Change-Id: I9b65cd902fc575db2bc529d4349198d83d421854
    VideoEditor: Fix for issue 3387848 and 3375632
    
    Change-Id: I146deb70e6c494f60bea3e3380c6a80320b5ccf0
    VideoEditor: Modified to fill FPS information
    
    Change-Id: Ief53ecdfdd9e32e980592f0513ba92993d655d0b
    Fix for issue 3372755 : File descriptor leak
    
    Change-Id: Ib1471078dbbcb595422fd481e5a3368e79e39e19
    Video Editor: Fix for seek in exported clip
    
    Change-Id: I5f519a9a987b3bfbff7ab9e6057a8a94be527982
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    MediaMuxer prefer not to use the MPEG4Writer in real time recording mode.
    
    By default, MPEG4Write will keep running in real time recording mode.
    
    bug:8598944
    
    Change-Id: Idf7fbd4e0feb7763660a74279ba8817b79098aaf
    MediaMuxer prefer not to use the MPEG4Writer in real time recording mode.
    
    By default, MPEG4Write will keep running in real time recording mode.
    
    bug:8598944
    
    Change-Id: Idf7fbd4e0feb7763660a74279ba8817b79098aaf
    Move away from MediaDebug and use ADebug instead
    
    Change-Id: I307b3f565808ec8e3b9a4d944c6c0d1f603b04c9
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: I5c54a0185527f6ca3e746d625a007aa06f6f25f9
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: I261ad4d5348f4832488707edeb3cbdbb6dd12fca
    Rename LOGV(_IF) to ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I366680b6e614b8983d1def28cc2fdbfa98f39531
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Refactored MediaBufferPuller class from VideoEditorVideoEncoder class
    
    o MediaBufferPull class will be useful for the audio encoder also once we switch
      to use OMX-based audio encoder.
    o This is the part one for fixing bug 5947347
    
    Change-Id: Icddfeb636f7a59ad766220ef0d3155abace73ad3
    Move away from MediaDebug and use ADebug instead
    
    Change-Id: I307b3f565808ec8e3b9a4d944c6c0d1f603b04c9
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: I5c54a0185527f6ca3e746d625a007aa06f6f25f9
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I605079da4a7c01e6555e2aab6f16ccf8cc6ac694
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: I261ad4d5348f4832488707edeb3cbdbb6dd12fca
        Fix for issue  5309336
        -add videoeditor maximum prefetch YUV frames in media_profiles.xml to
         limit the total memory usage.
    
    Change-Id: I43c03fc626194d9ebbe8d914d9209a04bc085831
    Rename LOGV(_IF) to ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I366680b6e614b8983d1def28cc2fdbfa98f39531
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Rename YV12 to I420.
    
    Change-Id: I453b7044bf46950ef67091f3417ed3e6a65086a0
    Remove unnecessary encoder input format check.
    
    This was preventing the export function from working because the
    encoder may accept a format other than YV12. As we always
    convert frames to what the encoder accepts, the check is
    unnecessary.
    
    Change-Id: I2056f560b4737d33956b277fb39ebe85278464ae
    Add YV12 color converter interface for VideoEditor.
    
    The original assumption in VideoEditor is that the decoder output
    and encoder input are in YV12 format. However on different
    hardware platform the actual formats may be different. So now we
    load a platform-specific YV12 color conversion module which
    knows the actual format and can convert to/from YV12, which is
    the format used in VideoEditor internally for processing.
    
    Bug: 5061733
    Change-Id: I852f85efd30c05cf6c42810059ee4d2ef37ee3da
    Clear buffer lists in stop() so we won't free the buffers again.
    Bug: 5073626
    
    Change-Id: Ia41fc089568b48de005235d66c9b5b1a5f72b5ca
    Remove hard-coded requirement for number of buffers.
    
    This change use two threads to read and return buffers from/to the
    encoder, so we won't block on read even if there are not enough
    input buffers.
    
    Bug: 4972572
    Change-Id: Iab07da5b55ef384e1d2723b4f5d3164e5a509ebd
    add private copy constructor and assignment operator to four media source classes
    
    o this patch addresses the encoder and decoder sources for audio and video
    
    Change-Id: I918784ca22138267c270836c91312540eedebc7f
    Simplified regulBitRate() method and fixed a copy and paste error in stop() method
    
    Change-Id: I589aea9471130e690594f91598853a1f08dca081
    Fix for issue 4949999 getFormat() returns NULL
    
    Change-Id: Ie534e2660b0de2c3ac697b4e1f61e3aaf2c4cffe
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    VideoEditor:Issue 3385135, AU_B_Frame changed to AU_P_Frame
    
    Change-Id: I18f82dcf819ba5df67f65d1705cda57b4a73c71d
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Move away from MediaDebug and use ADebug instead
    
    Change-Id: I307b3f565808ec8e3b9a4d944c6c0d1f603b04c9
    Use AACEncoder instead of OMX-based AAC software encoder to workaround issues in the video editor engine
    
    o related-to-bug: 5947347
    
    Change-Id: I8eae8166e87e5809e2f3699f760f3a3e57895b4f
    Rename LOGV(_IF) to ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I366680b6e614b8983d1def28cc2fdbfa98f39531
    Fix 4973565: implement getFormat() like Ie534e2660b0de2c3ac697b4e1f61e3aaf2c4cffe.
    
    Change-Id: I9c684fa971d5ef3f975017cbaaf06ba789a6c41f
    add private copy constructor and assignment operator to four media source classes
    
    o this patch addresses the encoder and decoder sources for audio and video
    
    Change-Id: I918784ca22138267c270836c91312540eedebc7f
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Initialize pool's buffer pointers to null.
    
    If these pointers are not properly initialized to null and
    allocation of one of the buffers subsequently fail, the freePool
    mechanism might erroneously free uninitialized pointers.
    
    Change-Id: I2101bdb2cc576e5f50b5a1440e6fc0c54dc4e81b
    Rename LOGV(_IF) to ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I366680b6e614b8983d1def28cc2fdbfa98f39531
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Fix for 3431967 Memory leak in SF shells
    
    Change-Id: Iaecf24e7cc095c5295a1568b4185e977f19f15aa
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Resolve undesirable dependency of /frameworks/av/libvideoeditor on /frameworks/base/media/jni
    
    o move VideoEditorMain.h to /frameworks/av/libvideoeditor
    o removed JNI related C_INCLUDE in some Android.mk files
    
    o related-to-bug: 6214141
    
    Change-Id: Iadd01eef701deb728fbac1a3f524ea1db72f6b48
    Fix for 4142219 Don't hard code platform-specific limitations.
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    For importing video clips, Video Editor engine will query StageFright codecs
    for supported codecs, profiles and levels.
    For Export, the profile and level are configured in media_profiles.xml
    
    Change-Id: I85c8bb8b87cfcf0f1351ecb8c4f369a8902e7a09
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Modification for using Software decoder for thumbnail generation
    
    Change-Id: I6f910292796917ad5aca5054a3522fb197df7826
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Rename LOGV(_IF) to ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I366680b6e614b8983d1def28cc2fdbfa98f39531
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Fix green or corrupted video frames in the exported movies
    
    At least two use cases are affected: trimming and transition clip generation.
    
    If the starting time of the transition or the trimming position is not the same as
    that of any existing video frame, the video frame right before the transition
    starting position or the trimming position must be encoded as the the first video
    frame for the transtion or the trimmed video, and it is encoded as a key frame.
    This frame was not saved without the patch.
    
    In the transcoding phrase, since we could not find such a frame, the existing
    code did not return an error, and incorrectly used some other frame to serve
    as the reference key frame for the remaining video frames of the transition or
    the trimmed video. As a result, we may see corrupted or green video frames in
    the exported movies.
    
    The fix is to always save the frame right before the trimming position or
    the transition starting time, so that a key frame will always be encoded, and
    the right reference frame is used for remaining video frames. In addition,
    checks are added to prevent from future mistakes to use incorrect reference frames.
    
    Patch was originally contributed by teng.hong@nxp.com
    
    Change-Id: I182784d4c1786224445224634edab3338bf2278f
    related-to-bug: 5713461
    Speed up thumbnail generation.
    
    We accept a tolerance parameter while decoding. We also tell the
    stagefright decoder to jump so we can move to the new frame faster.
    
    Change-Id: Iede3c1f909f1c42b2d5a53c782083367b00f62fb
    Rename YV12 to I420.
    
    Change-Id: I453b7044bf46950ef67091f3417ed3e6a65086a0
    Add YV12 color converter interface for VideoEditor.
    
    The original assumption in VideoEditor is that the decoder output
    and encoder input are in YV12 format. However on different
    hardware platform the actual formats may be different. So now we
    load a platform-specific YV12 color conversion module which
    knows the actual format and can convert to/from YV12, which is
    the format used in VideoEditor internally for processing.
    
    Bug: 5061733
    Change-Id: I852f85efd30c05cf6c42810059ee4d2ef37ee3da
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Change preview player code also.
    
    Adapt to 32 bit aligned decoder buffers
    
    Change-Id: I631f7e60b8e424af496f45d0e5e292bf9e8a9dde
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Remove obsolete references to libmedia_native
    
    Bug: 6654403
    Change-Id: I3993d62987cf0dd85db10bf002a5cce53d4f01bd
    Remove obsolete references to libmedia_native
    
    Bug: 6654403
    Change-Id: I3993d62987cf0dd85db10bf002a5cce53d4f01bd
    Update ANativeWindow client code for sync
    
    This change updates all the uses of ANativeWindow to use the new ANW functions
    that accept and return Sync HAL fence file descriptors.
    
    Change-Id: Id7db42d8d6380f8b440d88476ce9211c6225fb16
    Remove libvideoeditor_jni.so's dependency on static libs in video editor engine
    
    related-to-bug: 6502980
    
    Change-Id: I9cbbf44eb53c406263df4003cc3de2af4d239180
    Revert "Remove libvideoeditor_jni.so's dependency on static libs in video editor engine"
    
    This reverts commit 1af1f6a60b9fa217b6809e767babf1ce8a2e95c9.
    Remove libvideoeditor_jni.so's dependency on static libs in video editor engine
    
    related-to-bug: 6328360
    
    Change-Id: I36324820c7e72fedd8c4caf1b03443a4f7cec37f
    AV Android make files changes
    
    o plus a few file relocation: ActivityManager.cpp/h, SoundPool.h, etc
    o remove some runtime dependencies to libandroid, libandroid_runtime, etc
    
    Change-Id: I047a47c5fb361dd5cf85cd98798c39f629a75d10
    Resolve undesirable dependency of /frameworks/av/libvideoeditor on /frameworks/base/media/jni
    
    o move VideoEditorMain.h to /frameworks/av/libvideoeditor
    o removed JNI related C_INCLUDE in some Android.mk files
    
    o related-to-bug: 6214141
    
    Change-Id: Iadd01eef701deb728fbac1a3f524ea1db72f6b48
    Make file change because libvideoeditor source files moved
    
    o related-to-bug: 6214141
    
    Change-Id: I3ef60ca7670df37d7e43546e244cfe6a33093ba9
    Add libmedia_native
    
    Change-Id: I4bff781a26d01023d23d5285a8aa83dbce46c629
    Fix LOCAL_C_INCLUDES and correct #include syntax
    
    Change-Id: I522861043cc2ee905258a2ae409bf9dddbe452dc
    Prepare frameworks/native/services/audioflinger
    
    Part of this change will be reverted after the move is complete.
    
    p.s. this dependency on AudioFlinger should be removed
    
    Change-Id: Ib29d413b74a6dc1babe7a33471128be11304ce56
    Switched to use header files in /frameworks/native
    
    o related-to-bug: 6044887
    
    Change-Id: I3a1143b09560a6b8fd67d23bbb375c83442a12e9
    Swtched to use header file in /frameworks/native
    
    o related-to-bug: 6044894
    
    Change-Id: I192f0436572d240fd2fb88446f6fa63ba0128d7e
    AudioPlayerBase and VideoEditorAudioPlayer class design is incorrect.
    
    o this patch removed the AudioPlayerBase class.
    o verified and passed functional tests
    
    Change-Id: I33727069ef63136979b954a9dee1c35309ef6dd4
    More source code Clean up in video editor engine
    
    o fixed incorrect design and got rid of PreviewPlayerBase class
    o removed obsolete/unused code as much as possible and reformatted the source code
    o verified and passed functional tests
    o More to come ...
    
    Change-Id: I7a89162f8b9d9ea6eabcf0457366cd2f6d970d11
    ditherAndClamp from libaudioutils not AudioMixer
    
    Change-Id: I1e8a00c81efefd956fe9e4d9b58557373320e322
    Rename YV12 to I420.
    
    Change-Id: I453b7044bf46950ef67091f3417ed3e6a65086a0
    Use GL to render preview.
    
    To speed up the preview, we direct the decoder output to a
    SurfaceTexture, then draw the texture to a surface. The media
    rendering parameters (crop, black-border) are implemented
    using different vertex coordinates. The color effects are
    implemented using fragment shaders. Currently only three color
    effects are implemented, but that's all the appplication uses.
    
    Change-Id: If84439fee572ed37ea077749ef9f2bd4f78703e1
    Add YV12 color converter interface for VideoEditor.
    
    The original assumption in VideoEditor is that the decoder output
    and encoder input are in YV12 format. However on different
    hardware platform the actual formats may be different. So now we
    load a platform-specific YV12 color conversion module which
    knows the actual format and can convert to/from YV12, which is
    the format used in VideoEditor internally for processing.
    
    Bug: 5061733
    Change-Id: I852f85efd30c05cf6c42810059ee4d2ef37ee3da
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: Ida75833739d363061c2e688a6c7f7d7b3f3edd1e
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Separate preview player from AwesomePlayer and also video editor audio player from AudioPlayer
    
    Change-Id: I436ac541df3e34ad16be95a50c96d7af67fa15e4
    replace libsurfaceflinger_client by libgui
    
    Change-Id: I50b43cd8a75b8a013ad5f778708dfbc09c1d76d6
    frameworks/media/libvideoeditor: remove LOCAL_PRELINK_MODULE
    
    Change-Id: Ib3ecb46e1ecc192edae2d5634798efffccbb6c94
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Remove the eng developement LOCALtags in makefiles
    
    Change-Id: I6da8691dba062cd54410ffafde27b7eca0b73aa2
    Fix git_master-without-vendor build
    
    Change-Id: Ia5944bd87ae788b070ff9e44b3428a303fb45ca5
    Fix git_master-without-vendor build
    
    Change-Id: Ia1ceb9d2d11725950c1cdc3215661830842c51fb
    videoeditor preview code on honeycomb
    
    Change-Id: I9c3c9cb921ea697ab16732973d26ef9035cda2ee
    stagefright: offload playback support
    
    Offloading of compressed audio decoding to audio DSP
    is implemented for audio only, non streamed content.
    when the datasource is
    
    AudioPlayer:
    - Create an offloaded sink when playing a compressed
    source
    - Send metadata to audio HAL
    - Return sink start error to AwesomePlayer so that a
    new player for PCM audio can be created in case of problem.
    - Forward stream end and tear down callback events to AwesomePlayer
    - Stop the sink and wait for stream end callback when EOS is reached.
    - Pause and restart the sink if needed before flushing when seeking
    (otherwise flush is a no op).
    - For current media time, directly query the render position from the
    sink and offset by the start position (seek to time)
    
    AwesomePlayer:
    
    - When initializing the audio decoder, check with audio policy manager
    if offloading is supported. If yes, create the software decoder in
    case a reconfiguration is needed but connect the audio track directly
    to the AudioPlayer.
    - In case of error when starting the AudioPlayer, reconnect the software
    decoder (OMXSource) and recreate a PCM AudioPlayer.
    - Handle AudioPlayer tear down event by detroying and recreating the
    AudioPlayer to allow transitions between situations were offloading
    is supported or not.
    - Force tear down of offloaded AudioPlayer when paused for a certain time:
    This will close the sink and allow the DSP to power down.
    
    Utils:
    - Added helper methods:
        - send meta data to audio ia sink setParameters
        - query audio policy manager if offloading is supported for a
    given audio content
    
    Change-Id: I115842ce424f947b966d45e253a74d3fd5df9aae
    Signed-off-by: Eric Laurent <elaurent@google.com>
    Public API changes for audio offload support.
    
    NOTE: this does _not_ include all private member variables added
    to classes as part of offload support. Only public/protected functions
    and stubs functions/variables needed to make the changes buildable.
    
    - isOffloadSupported() added to audio policy service
        A stub implementation is required to build, this always returns false
    - setParameters() added to IAudioTrack
        A stub implementation is required to build, this always returns
        INVALID_OPERATION
    
    - CBlk flag for stream end
    
    - Change AudioSystem::getRenderPosition() to take an audio_output_t
        so caller can specify which output to query
    
    - Add AudioSystem::isOffloadSupported()
        This is fully implemented down to the AudioFlinger function
        AudioPolicyServer::isOffloadSupported() which is just a stub
        that always returns false.
    
    - Add EVENT_STREAM_END to AudioTrack interface.
        STREAM_END is used to signal when the hardware has actually finished
        playing all the data it was sent.
    
    - Add event type enumeration to media player interface AudioSink callbacks
        so that the same callback can be used to handle multiple types of
        event. For offloaded tracks we also have to handle STREAM_END and
        TEAR_DOWN events
    
    - Pass audio_offload_info_t to various functions used for opening outputs,
        tracks and audio players. This passes additional information about the
        compressed stream down to the HAL when using offload.
        For publicly-available APIs this is an optional parameter (for some of
        the internal and low-level APIs around the HAL interface it is mandatory)
    
    - Add getParameters() and setParameters() API to AudioTrack
        Currently dummy implementations.
    
    - Change AudioPlayer contructor so that it takes a set of bitflags defining what
        options are required. This replaces the original bool which only specified
        whether to use deep buffering.
    
    - Changes to StageFright class definition related to handling tearing-down of
        an offloaded track when we need to switch back to software decode
    
    - Define new StageFright utility functions used for offloaded tracks
        Currently dummy implementations.
    
    - AudioFlinger changes to use extended audio_config_t.
        Fills in audio_offload_info_t member if this info is passed in when
        opening an output.
    
    - libvideoeditor changes required to add the new event type parameter
        to AudioSink callback functions
    
    - libmediaplayerservice changes required to add the new event type parameter
        to AudioSink callback functions
    
    Change-Id: I3ab41138aa1083d81fe83b886a9b1021ec7320f1
    Signed-off-by: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
    Signed-off-by: Eric Laurent <elaurent@google.com>
    Use sp<AudioTrack> instead of raw AudioTrack *
    
    This change prepares for the new implementation of AudioTrack client, which
    will require clients to use only sp<AudioTrack>, not raw AudioTrack *.
    A raw delete will cause a race condition during AudioTrack destruction.
    
    AudioTrack was made a RefBase by commit b68a91a70bc8d0d18e7404e14443d4e4020b3635
    on 2011/11/15, when it was needed by OpenSL ES (for the callback protector).
    At that time, the only other client that was also converted from
    AudioTrack * to sp<AudioTrack> was android.media.AudioTrack JNI in
    project frameworks/base (file android_media_AudioTrack.cpp).
    
    Details:
     * Use .clear() instead of delete followed by = NULL.
     * ALOG %p need .get().
     * sp<> don't need to be listed in constructor initializer, if initially 0.
     * Use == 0 for sp<> vs == NULL for raw pointers.
     * Use if (sp != 0) instead of if (raw).
    
    Change-Id: Ic7cad25795d6e862e112abdc227b6d33afdfce17
    Use audio_channel_mask_t for channel mask
    
    Change-Id: I1c1896da48983aa9f1462a4b471f910498816f60
    rename audio policy output flags
    
    Change-Id: I27c46bd1d1b2b5f96b87af7d05b951fef18a1312
    Use audio_policy_output_flags_t consistently
    
    Change-Id: I425cfd442257560dcf141d3d8599ddc7d21c1d13
    Set channel mask when opening audio sink
    
    Update the code to use the AudioSink::open() interface that
     takes a channel mask as an additional parameter. The code
     is only stereo, and returns an error when attempting to create
     a video editor audio sink with more than two channels.
    
    Change-Id: Ib9bba067da0b286c08656976b89fba7c8b42f99f
    Move away from MediaDebug and use ADebug instead
    
    Change-Id: I307b3f565808ec8e3b9a4d944c6c0d1f603b04c9
    Clean up VideoEditorGBAudioProcessing
    
    o added #ifndef/#define in the header
    o removed unused variables
    o renamed some types and methods
    o replaced macro with class private enum
    
    Change-Id: I588ef062fcadcd11591a5a55b4aed771c724492f
    AudioPlayerBase and VideoEditorAudioPlayer class design is incorrect.
    
    o this patch removed the AudioPlayerBase class.
    o verified and passed functional tests
    
    Change-Id: I33727069ef63136979b954a9dee1c35309ef6dd4
    More source code Clean up in video editor engine
    
    o fixed incorrect design and got rid of PreviewPlayerBase class
    o removed obsolete/unused code as much as possible and reformatted the source code
    o verified and passed functional tests
    o More to come ...
    
    Change-Id: I7a89162f8b9d9ea6eabcf0457366cd2f6d970d11
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: I5c54a0185527f6ca3e746d625a007aa06f6f25f9
    Rename LOGV(_IF) to ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I366680b6e614b8983d1def28cc2fdbfa98f39531
    Fix 5123908: Native crash rewinding movie
    
    Simplify the VideoEditorSRC code and fix some bugs.
    
    Change-Id: I6bcf3a5cea21a2eec4b51f167560c4b0d3a04a29
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    update for new audio.h header location
    
    Change-Id: I593b91a84a603d8c7f51a83232cced5af4980baf
    Signed-off-by: Dima Zavin <dima@android.com>
    Separate preview player from AwesomePlayer and also video editor audio player from AudioPlayer
    
    Change-Id: I436ac541df3e34ad16be95a50c96d7af67fa15e4
    libvideoeditor: convert to use new audio.h
    
    Change-Id: I39726f6f6cd5aabbd91629f329876660b3d3cec2
    Signed-off-by: Dima Zavin <dima@android.com>
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Bring videoeditor copies of internal code in sync with recent changes to the originals
    
    Change-Id: Ie534360f9f1f7757c57cffabb0fa4b4903422ecb
    related-to-bug: 4193552
    Fix for issue 3371667: fix source code compilation warnings(Moved from master)
    
    Change-Id: Ife1fc3f89beae498a49970ab5d2a080a112ce7c2
    Fix for memory leak with single audio player instance
    
    Change-Id: Idb0d24ac1a4fbe21c5f63871a4c7da2beb90e516
    Fix for 3369917 Audio skips at clip edit points
    
    Change-Id: Iba66585cc2e679475d8db529d6113586b58e626e
    Fix for issue : 3450195 Adapt to the recent changes of awesome player in video editor preview player
    
    Change-Id: Ibd15264837dab32464fb90e75cf6d3d323cbbae3
    Fix for issue 3431967 : Memory leak from video editor engine
    
    Change-Id: I4cc445ce7d41a4842dcf0b5ad1c729c0ae5553cd
    X86 target fixes
    
    GCC 4.2.1 complains about using void* in arithmetic. Cast it to unsigned
    int before using it.
    
    Also there was a missing stdint.h include.
    
    Change-Id: If78bb6a771b72eb08bd2dc401371e8da14fd9ecc
    videoeditor preview code on honeycomb
    
    Change-Id: I9c3c9cb921ea697ab16732973d26ef9035cda2ee
    stagefright: offload playback support
    
    Offloading of compressed audio decoding to audio DSP
    is implemented for audio only, non streamed content.
    when the datasource is
    
    AudioPlayer:
    - Create an offloaded sink when playing a compressed
    source
    - Send metadata to audio HAL
    - Return sink start error to AwesomePlayer so that a
    new player for PCM audio can be created in case of problem.
    - Forward stream end and tear down callback events to AwesomePlayer
    - Stop the sink and wait for stream end callback when EOS is reached.
    - Pause and restart the sink if needed before flushing when seeking
    (otherwise flush is a no op).
    - For current media time, directly query the render position from the
    sink and offset by the start position (seek to time)
    
    AwesomePlayer:
    
    - When initializing the audio decoder, check with audio policy manager
    if offloading is supported. If yes, create the software decoder in
    case a reconfiguration is needed but connect the audio track directly
    to the AudioPlayer.
    - In case of error when starting the AudioPlayer, reconnect the software
    decoder (OMXSource) and recreate a PCM AudioPlayer.
    - Handle AudioPlayer tear down event by detroying and recreating the
    AudioPlayer to allow transitions between situations were offloading
    is supported or not.
    - Force tear down of offloaded AudioPlayer when paused for a certain time:
    This will close the sink and allow the DSP to power down.
    
    Utils:
    - Added helper methods:
        - send meta data to audio ia sink setParameters
        - query audio policy manager if offloading is supported for a
    given audio content
    
    Change-Id: I115842ce424f947b966d45e253a74d3fd5df9aae
    Signed-off-by: Eric Laurent <elaurent@google.com>
    Public API changes for audio offload support.
    
    NOTE: this does _not_ include all private member variables added
    to classes as part of offload support. Only public/protected functions
    and stubs functions/variables needed to make the changes buildable.
    
    - isOffloadSupported() added to audio policy service
        A stub implementation is required to build, this always returns false
    - setParameters() added to IAudioTrack
        A stub implementation is required to build, this always returns
        INVALID_OPERATION
    
    - CBlk flag for stream end
    
    - Change AudioSystem::getRenderPosition() to take an audio_output_t
        so caller can specify which output to query
    
    - Add AudioSystem::isOffloadSupported()
        This is fully implemented down to the AudioFlinger function
        AudioPolicyServer::isOffloadSupported() which is just a stub
        that always returns false.
    
    - Add EVENT_STREAM_END to AudioTrack interface.
        STREAM_END is used to signal when the hardware has actually finished
        playing all the data it was sent.
    
    - Add event type enumeration to media player interface AudioSink callbacks
        so that the same callback can be used to handle multiple types of
        event. For offloaded tracks we also have to handle STREAM_END and
        TEAR_DOWN events
    
    - Pass audio_offload_info_t to various functions used for opening outputs,
        tracks and audio players. This passes additional information about the
        compressed stream down to the HAL when using offload.
        For publicly-available APIs this is an optional parameter (for some of
        the internal and low-level APIs around the HAL interface it is mandatory)
    
    - Add getParameters() and setParameters() API to AudioTrack
        Currently dummy implementations.
    
    - Change AudioPlayer contructor so that it takes a set of bitflags defining what
        options are required. This replaces the original bool which only specified
        whether to use deep buffering.
    
    - Changes to StageFright class definition related to handling tearing-down of
        an offloaded track when we need to switch back to software decode
    
    - Define new StageFright utility functions used for offloaded tracks
        Currently dummy implementations.
    
    - AudioFlinger changes to use extended audio_config_t.
        Fills in audio_offload_info_t member if this info is passed in when
        opening an output.
    
    - libvideoeditor changes required to add the new event type parameter
        to AudioSink callback functions
    
    - libmediaplayerservice changes required to add the new event type parameter
        to AudioSink callback functions
    
    Change-Id: I3ab41138aa1083d81fe83b886a9b1021ec7320f1
    Signed-off-by: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
    Signed-off-by: Eric Laurent <elaurent@google.com>
    Use sp<AudioTrack> instead of raw AudioTrack *
    
    This change prepares for the new implementation of AudioTrack client, which
    will require clients to use only sp<AudioTrack>, not raw AudioTrack *.
    A raw delete will cause a race condition during AudioTrack destruction.
    
    AudioTrack was made a RefBase by commit b68a91a70bc8d0d18e7404e14443d4e4020b3635
    on 2011/11/15, when it was needed by OpenSL ES (for the callback protector).
    At that time, the only other client that was also converted from
    AudioTrack * to sp<AudioTrack> was android.media.AudioTrack JNI in
    project frameworks/base (file android_media_AudioTrack.cpp).
    
    Details:
     * Use .clear() instead of delete followed by = NULL.
     * ALOG %p need .get().
     * sp<> don't need to be listed in constructor initializer, if initially 0.
     * Use == 0 for sp<> vs == NULL for raw pointers.
     * Use if (sp != 0) instead of if (raw).
    
    Change-Id: Ic7cad25795d6e862e112abdc227b6d33afdfce17
    AudioPlayerBase and VideoEditorAudioPlayer class design is incorrect.
    
    o this patch removed the AudioPlayerBase class.
    o verified and passed functional tests
    
    Change-Id: I33727069ef63136979b954a9dee1c35309ef6dd4
    More source code Clean up in video editor engine
    
    o fixed incorrect design and got rid of PreviewPlayerBase class
    o removed obsolete/unused code as much as possible and reformatted the source code
    o verified and passed functional tests
    o More to come ...
    
    Change-Id: I7a89162f8b9d9ea6eabcf0457366cd2f6d970d11
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Separate preview player from AwesomePlayer and also video editor audio player from AudioPlayer
    
    Change-Id: I436ac541df3e34ad16be95a50c96d7af67fa15e4
    Fix for 3369917 Audio skips at clip edit points
    
    Change-Id: Iba66585cc2e679475d8db529d6113586b58e626e
    videoeditor preview code on honeycomb
    
    Change-Id: I9c3c9cb921ea697ab16732973d26ef9035cda2ee
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    Copied MODULE_LICENSE_APACH2 and NOTICE from frameworks/base to frameworks/av
    
    Change-Id: I48c927b9690bf902ab167d60171c0ee7995687e0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Removed unnecessary memset before an immediate memcpy
    
    Change-Id: I447057f861bb6b7977de48a598fd5bed7e75460b
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: I5c54a0185527f6ca3e746d625a007aa06f6f25f9
    Rename LOGV(_IF) to ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I366680b6e614b8983d1def28cc2fdbfa98f39531
    Fix for 5156702 Rotate video output for thumbnails and export
    
    This is part of a multi project submit.
    This is the native engine part.
    
    Change-Id: Icde922194a123a90544942caa12430fc3c4ef10e
    fix for issue 4142219
    Don't hard code platform-specific limitations
    engine part.
    
    Change-Id: Ibc8a539e5bbac738f60ef935670a333b7017e20e
    Remove curtain effects (they are unused).
    
    Change-Id: I8e1ccad3e9ddf4c272e85e7ca04582b4863c242d
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 3385135 "source code cleanup" engine part
    - remove commented code
    - remove code under #if 0
    - remove macro FILE_LOWER_CASE as it is not used
    - remove macro #if 1
    - remove TIMESCALE_BUG macro, and all code under this macro as it is not used
    - remove following unused functions:
        * M4MCS_getExifInfo
        * M4MCS_registerAudioEncoderExtended
        * M4MCS_registerVideoDecoderExtended
        * M4MCS_registerAudioDecoderExtended
        * M4MCS_registerVideoEncoderExtended
    
    Change-Id: I8e2916d956af6d381ae1962fedc61a8b48f60ce2
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Fix for issue 3371667: fix source code compilation warnings
    
    Change-Id: I6cb6950af55effe0da6d421eaa5feb179be68158
    Fix for issue 3431967 : Movie Studio crashed after pressing the back button
    
    Change-Id: I4b8cb2a54c2a1b7117feae9d8c6ca14e81b1f83d
    Fix for issue: 3437071 Crash during rendering mode change for specific video size
    
    Change-Id: I358c7cc24a7f8c71b953cf5179902fa20fbd727c
    Fixed Issue 3423072: Imported 1080x720 video clips present distorted view in preview
    
    Change-Id: I38f2a042d66f7b639510d503321296e915689f7a
    Fix Issue Crash during Export Issue 3414805 , and Preview smoothning for 720p Clips
    
    Change-Id: I5a90fc350a33c1eca9b4ec682b68b80913578341
    Change preview player code also.
    
    Adapt to 32 bit aligned decoder buffers
    
    Change-Id: I631f7e60b8e424af496f45d0e5e292bf9e8a9dde
    videoeditor preview code on honeycomb
    
    Change-Id: I9c3c9cb921ea697ab16732973d26ef9035cda2ee
    Fix for 5156702 Rotate video output for thumbnails and export
    
    This is part of a multi project submit.
    This is the native engine part.
    
    Change-Id: Icde922194a123a90544942caa12430fc3c4ef10e
    fix for issue 4142219
    Don't hard code platform-specific limitations
    engine part.
    
    Change-Id: Ibc8a539e5bbac738f60ef935670a333b7017e20e
    Remove curtain effects (they are unused).
    
    Change-Id: I8e1ccad3e9ddf4c272e85e7ca04582b4863c242d
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Change preview player code also.
    
    Adapt to 32 bit aligned decoder buffers
    
    Change-Id: I631f7e60b8e424af496f45d0e5e292bf9e8a9dde
    videoeditor preview code on honeycomb
    
    Change-Id: I9c3c9cb921ea697ab16732973d26ef9035cda2ee
    More source code Clean up in video editor engine
    
    o fixed incorrect design and got rid of PreviewPlayerBase class
    o removed obsolete/unused code as much as possible and reformatted the source code
    o verified and passed functional tests
    o More to come ...
    
    Change-Id: I7a89162f8b9d9ea6eabcf0457366cd2f6d970d11
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Cleaned up dummy audio and video sources
    
    o remove unused member variables
    o replace a full loop with a memset
    
    Change-Id: Ib482525a321c2a17dd188fba47b642c63ab811c3
    Fix for 3369917 Audio skips at clip edit points
    
    Change-Id: Iba66585cc2e679475d8db529d6113586b58e626e
    videoeditor preview code on honeycomb
    
    Change-Id: I9c3c9cb921ea697ab16732973d26ef9035cda2ee
    More source code Clean up in video editor engine
    
    o fixed incorrect design and got rid of PreviewPlayerBase class
    o removed obsolete/unused code as much as possible and reformatted the source code
    o verified and passed functional tests
    o More to come ...
    
    Change-Id: I7a89162f8b9d9ea6eabcf0457366cd2f6d970d11
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Cleaned up dummy audio and video sources
    
    o remove unused member variables
    o replace a full loop with a memset
    
    Change-Id: Ib482525a321c2a17dd188fba47b642c63ab811c3
    videoeditor preview code on honeycomb
    
    Change-Id: I9c3c9cb921ea697ab16732973d26ef9035cda2ee
    Integrate improved coefficient sinc resampler: VHQ
    
    Summary:
    Very high quality is enabled only for 44.1 -> 48 or 48 -> 44.1,
      and uses low quality for all other use cases.
    Track estimated CPU load and throttles the quality based on load;
      as currently configured it should allow up to 2 instances of very high quality.
    Medium quality and high quality are currently disabled unless explicitly requested.
    
    Details:
    Only load .so the first time it is needed.
    Cleanup code style: formatting, indentation, whitespace.
    Restore medium quality resampler, but it is not used (see next line).
    Fix memory leak for sinc resampler.
    Check sample rate in resampler constructor.
    Add logs for debugging.
    Rename DEFAULT to DEFAULT_QUALITY for consistency with other quality levels.
    Renumber VERY_HIGH_QUALITY from 255 to 4.
    Use enum src_quality consistently.
    Improve parsing of property af.resampler.quality.
    Fix reentrancy bug - allow an instance of high quality and an instance
      of very high quality to both be active concurrently.
    
    Bug: 7229644
    Change-Id: I0ce6b913b05038889f50462a38830b61a602a9f7
    Integrate improved coefficient sinc resampler: VHQ
    
    Summary:
    Very high quality is enabled only for 44.1 -> 48 or 48 -> 44.1,
      and uses low quality for all other use cases.
    Track estimated CPU load and throttles the quality based on load;
      as currently configured it should allow up to 2 instances of very high quality.
    Medium quality and high quality are currently disabled unless explicitly requested.
    
    Details:
    Only load .so the first time it is needed.
    Cleanup code style: formatting, indentation, whitespace.
    Restore medium quality resampler, but it is not used (see next line).
    Fix memory leak for sinc resampler.
    Check sample rate in resampler constructor.
    Add logs for debugging.
    Rename DEFAULT to DEFAULT_QUALITY for consistency with other quality levels.
    Renumber VERY_HIGH_QUALITY from 255 to 4.
    Use enum src_quality consistently.
    Improve parsing of property af.resampler.quality.
    Fix reentrancy bug - allow an instance of high quality and an instance
      of very high quality to both be active concurrently.
    
    Bug: 7229644
    Change-Id: I0ce6b913b05038889f50462a38830b61a602a9f7
    Update build dependency on AudioMixer header
    
    VideoEditorSRC doesn't need to include AudioMixer.h.
    
    VideoEditorResampler includes AudioMixer.h, which requires
     system/media/audio_effects/include in the include path.
    
    Change-Id: Ibf6194831aeb91e788ce0a3b1282a0d930ee6e48
    Update method sigs.
    
    Update the getNextBuffer signatures to have an additional (but
    ignorable) parameter used to implement timed audio output.
    
    Change-Id: Icb98e4af4d136c234ae8c5cbb4a5de4350b436bb
    Move away from MediaDebug and use ADebug instead
    
    Change-Id: I307b3f565808ec8e3b9a4d944c6c0d1f603b04c9
    More source code Clean up in video editor engine
    
    o fixed incorrect design and got rid of PreviewPlayerBase class
    o removed obsolete/unused code as much as possible and reformatted the source code
    o verified and passed functional tests
    o More to come ...
    
    Change-Id: I7a89162f8b9d9ea6eabcf0457366cd2f6d970d11
    ditherAndClamp from libaudioutils not AudioMixer
    
    Change-Id: I1e8a00c81efefd956fe9e4d9b58557373320e322
    Fix 5607624: Native crash in movie studio while previewing the movie
    
    Change-Id: I6bc123a3da4fb071a65fe776bcba0268fa58bf29
    Incorporate aah changes to AudioBufferProvider into VideoEditor
    
    This is a squashed merge from master-tungsten of the following change:
    
    commit e1bec6e10c8d7462a0970568153a2d9db1463e6e
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:57 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: I565b48450f98089767bf92b435826c9f4baeb01c
    
    Change-Id: I201bdc4479a53b4bc023549d0a1831ac0a8f33dc
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    Rename LOGV(_IF) to ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I366680b6e614b8983d1def28cc2fdbfa98f39531
    Incorporate aah changes to AudioBufferProvider into VideoEditor
    
    This is a squashed merge from master-tungsten of the following change:
    
    commit e1bec6e10c8d7462a0970568153a2d9db1463e6e
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:57 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: I565b48450f98089767bf92b435826c9f4baeb01c
    
    Change-Id: I76021f5de9aad92381678e299c8e8b5a77d577bf
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    Fix 5123908: Native crash rewinding movie
    
    Simplify the VideoEditorSRC code and fix some bugs.
    
    Change-Id: I6bcf3a5cea21a2eec4b51f167560c4b0d3a04a29
    Fix for issue 4988956 No audio can be heard during preview
    
    Change-Id: I61fc9086f2c00259e4f54535a5938b161d95b144
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Clean up VideoEditorSRC
    
    o removed unused member variables
    o removed pre-processor for FROYO, since we only made video editor available after HC.
    o cleaned up the header includes
    
    Change-Id: I101775cc384310d661a65485113ac1bc1f6cdf17
    Fix for issue 3431967 : Movie Studio crashed after pressing the back button
    
    Change-Id: I4b8cb2a54c2a1b7117feae9d8c6ca14e81b1f83d
    X86 target fixes
    
    GCC 4.2.1 complains about using void* in arithmetic. Cast it to unsigned
    int before using it.
    
    Also there was a missing stdint.h include.
    
    Change-Id: If78bb6a771b72eb08bd2dc401371e8da14fd9ecc
    Fix for issue 3372755 : File descriptor leak
    
    Change-Id: Ib1471078dbbcb595422fd481e5a3368e79e39e19
    videoeditor preview code on honeycomb
    
    Change-Id: I9c3c9cb921ea697ab16732973d26ef9035cda2ee
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    AudioPlayerBase and VideoEditorAudioPlayer class design is incorrect.
    
    o this patch removed the AudioPlayerBase class.
    o verified and passed functional tests
    
    Change-Id: I33727069ef63136979b954a9dee1c35309ef6dd4
    More source code Clean up in video editor engine
    
    o fixed incorrect design and got rid of PreviewPlayerBase class
    o removed obsolete/unused code as much as possible and reformatted the source code
    o verified and passed functional tests
    o More to come ...
    
    Change-Id: I7a89162f8b9d9ea6eabcf0457366cd2f6d970d11
    Remove streaming related logic from preview player.
    
    Video editor engine only deals with local file playback/preview.
    
    Change-Id: I8e3414abf8a109a77a1e34a959fb4a090612ae3d
    related-to-bug: 5857057
    Fix for 5369981 Native crash : testPreviewWithEndAudioTrack functional test.
    
    Change-Id: Icb8cadaff50a22588417c2c8f5c31415dd0cca9e
    Use GL to render preview.
    
    To speed up the preview, we direct the decoder output to a
    SurfaceTexture, then draw the texture to a surface. The media
    rendering parameters (crop, black-border) are implemented
    using different vertex coordinates. The color effects are
    implemented using fragment shaders. Currently only three color
    effects are implemented, but that's all the appplication uses.
    
    Change-Id: If84439fee572ed37ea077749ef9f2bd4f78703e1
    Remove unused mLastVideoBuffer and bAppliedVideoEffect.
    
    Change-Id: I29511aaa714494a1a6caa4ed95bbc26370b37246
    Remove PreviewLocalRenderer (simplify the code).
    
    Change-Id: I1f04e591cd0a33eb70bd93d5600aba12e727386e
    Add YV12 color converter interface for VideoEditor.
    
    The original assumption in VideoEditor is that the decoder output
    and encoder input are in YV12 format. However on different
    hardware platform the actual formats may be different. So now we
    load a platform-specific YV12 color conversion module which
    knows the actual format and can convert to/from YV12, which is
    the format used in VideoEditor internally for processing.
    
    Bug: 5061733
    Change-Id: I852f85efd30c05cf6c42810059ee4d2ef37ee3da
    Remove redundant include, now that NuHTTPDataSource.h is no more.
    
    Change-Id: I7bed503ba341b5ea3b7a3cac7aa2a1f349c8ed03
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Separate preview player from AwesomePlayer and also video editor audio player from AudioPlayer
    
    Change-Id: I436ac541df3e34ad16be95a50c96d7af67fa15e4
    remove unused references to ISurface
    
    Change-Id: Ia11c5f46f38c0b00ca63d19d3484bf4024cdb75d
    Fix for the issue: TestPreviewWithTransition fails (4133108)
    
    Change-Id: I53eb798f4f86e83f8a4668c7256241367c1ccbe4
    Adapt to changes in AwesomePlayer for Honeycomb branch - DO NOT MERGE
    
    Bug - 3497783
    
    Change-Id: I26eee1538d1f2f86476b115c9e7df85fadd796dd
    Adapt to changes in AwesomePlayer for Honeycomb branch - DO NOT MERGE
    
    Bug - 3497783
    
    Change-Id: I26eee1538d1f2f86476b115c9e7df85fadd796dd
    Fix for 3369917 Audio skips at clip edit points
    
    Change-Id: Iba66585cc2e679475d8db529d6113586b58e626e
    Fix for issue 3439595 : Movie studio playback previous frames
    
    Change-Id: I0f1a6cdfa40f6c8eebe989116e01ba8c212d5872
    Update this copy of our internal sources to reflect changes to the original...
    
    Change-Id: I6f66c1f4e73f0a83faf0fbcdea5073e6b9fef1de
    Fix for issue : 3450195 Adapt to the recent changes of awesome player in video editor preview player
    
    Change-Id: Ibd15264837dab32464fb90e75cf6d3d323cbbae3
    Fix for 3409334 Movie Studio "Force Close" after importing a 3gp video
    
    Change-Id: I37949140a6c37a0c2d04221e220e7e267b6c7a02
    Fix for ISSUE 3370836 - Overlay optmization.
    
    Change-Id: I9c6657f6fdab0fa815201d8b26b8c90700663c12
    Change preview player code also.
    
    Adapt to 32 bit aligned decoder buffers
    
    Change-Id: I631f7e60b8e424af496f45d0e5e292bf9e8a9dde
    videoeditor preview code on honeycomb
    
    Change-Id: I9c3c9cb921ea697ab16732973d26ef9035cda2ee
    Update ANativeWindow client code for sync
    
    This change updates all the uses of ANativeWindow to use the new ANW functions
    that accept and return Sync HAL fence file descriptors.
    
    Change-Id: Id7db42d8d6380f8b440d88476ce9211c6225fb16
    fix location of libgui headers
    
    Change-Id: I0d203f4e7aa83e0449f7ebb9f3cafe021e38fc2f
    Move away from MediaDebug and use ADebug instead
    
    Change-Id: I307b3f565808ec8e3b9a4d944c6c0d1f603b04c9
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I605079da4a7c01e6555e2aab6f16ccf8cc6ac694
    Fix 5180429: Initialize native window transform to 0.
    
    Change-Id: I2730895059d408fa731dc4ca8da3f7984fe196ae
    Add connect calls for SurfaceTexture. Clean PreviewRenderer.
    
    Now connect() is necessary for SurfaceTexture.
    Also cleaned unused code in PreviewRenderer.
    
    Change-Id: Ic49df01e79f38a48a8c2cf194d13ee575660c834
    Use GL to render preview.
    
    To speed up the preview, we direct the decoder output to a
    SurfaceTexture, then draw the texture to a surface. The media
    rendering parameters (crop, black-border) are implemented
    using different vertex coordinates. The color effects are
    implemented using fragment shaders. Currently only three color
    effects are implemented, but that's all the appplication uses.
    
    Change-Id: If84439fee572ed37ea077749ef9f2bd4f78703e1
    call the new setScaling method in the appropriate places
    
    Change-Id: Iabd738b195d326b6bdf04fdfee75e1dd9d411cbd
    Use the ANativeWindow APIs instead of the Surface APIs
    
    Surface inherits from ANativeWindow, the APIs on the later
    are the only public APIs.
    
    Change-Id: Ibddebfe535e026d872cc13287a102660c004385f
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    android_native_buffer_t --> ANativeWindowBuffer
    
    Change-Id: Id43b27ed2d1b85488b731948d018da0c0fd0c50d
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Fix for 3409334 Movie Studio "Force Close" after importing a 3gp video
    
    Change-Id: I37949140a6c37a0c2d04221e220e7e267b6c7a02
    Fix Issue Crash during Export Issue 3414805 , and Preview smoothning for 720p Clips
    
    Change-Id: I5a90fc350a33c1eca9b4ec682b68b80913578341
    videoeditor preview code on honeycomb
    
    Change-Id: I9c3c9cb921ea697ab16732973d26ef9035cda2ee
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Update method sigs.
    
    Update the getNextBuffer signatures to have an additional (but
    ignorable) parameter used to implement timed audio output.
    
    Change-Id: Icb98e4af4d136c234ae8c5cbb4a5de4350b436bb
    More source code Clean up in video editor engine
    
    o fixed incorrect design and got rid of PreviewPlayerBase class
    o removed obsolete/unused code as much as possible and reformatted the source code
    o verified and passed functional tests
    o More to come ...
    
    Change-Id: I7a89162f8b9d9ea6eabcf0457366cd2f6d970d11
    Fix two typos in the defined frequency enums
    
    Change-Id: Ia0b6af98bd8f2ccb4d79705064a225e5f699ed8d
    Fix 5607624: Native crash in movie studio while previewing the movie
    
    Change-Id: I6bc123a3da4fb071a65fe776bcba0268fa58bf29
    Incorporate aah changes to AudioBufferProvider into VideoEditor
    
    This is a squashed merge from master-tungsten of the following change:
    
    commit e1bec6e10c8d7462a0970568153a2d9db1463e6e
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:57 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: I565b48450f98089767bf92b435826c9f4baeb01c
    
    Change-Id: I201bdc4479a53b4bc023549d0a1831ac0a8f33dc
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    Incorporate aah changes to AudioBufferProvider into VideoEditor
    
    This is a squashed merge from master-tungsten of the following change:
    
    commit e1bec6e10c8d7462a0970568153a2d9db1463e6e
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:57 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: I565b48450f98089767bf92b435826c9f4baeb01c
    
    Change-Id: I76021f5de9aad92381678e299c8e8b5a77d577bf
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    Fix 5123908: Native crash rewinding movie
    
    Simplify the VideoEditorSRC code and fix some bugs.
    
    Change-Id: I6bcf3a5cea21a2eec4b51f167560c4b0d3a04a29
    Fix for issue 4988956 No audio can be heard during preview
    
    Change-Id: I61fc9086f2c00259e4f54535a5938b161d95b144
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Clean up VideoEditorSRC
    
    o removed unused member variables
    o removed pre-processor for FROYO, since we only made video editor available after HC.
    o cleaned up the header includes
    
    Change-Id: I101775cc384310d661a65485113ac1bc1f6cdf17
    Fix for issue 3431967 : Movie Studio crashed after pressing the back button
    
    Change-Id: I4b8cb2a54c2a1b7117feae9d8c6ca14e81b1f83d
    X86 target fixes
    
    GCC 4.2.1 complains about using void* in arithmetic. Cast it to unsigned
    int before using it.
    
    Also there was a missing stdint.h include.
    
    Change-Id: If78bb6a771b72eb08bd2dc401371e8da14fd9ecc
    videoeditor preview code on honeycomb
    
    Change-Id: I9c3c9cb921ea697ab16732973d26ef9035cda2ee
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    fix location of libgui headers
    
    Change-Id: I0d203f4e7aa83e0449f7ebb9f3cafe021e38fc2f
    AudioPlayerBase and VideoEditorAudioPlayer class design is incorrect.
    
    o this patch removed the AudioPlayerBase class.
    o verified and passed functional tests
    
    Change-Id: I33727069ef63136979b954a9dee1c35309ef6dd4
    More source code Clean up in video editor engine
    
    o fixed incorrect design and got rid of PreviewPlayerBase class
    o removed obsolete/unused code as much as possible and reformatted the source code
    o verified and passed functional tests
    o More to come ...
    
    Change-Id: I7a89162f8b9d9ea6eabcf0457366cd2f6d970d11
    Remove streaming related logic from preview player.
    
    Video editor engine only deals with local file playback/preview.
    
    Change-Id: I8e3414abf8a109a77a1e34a959fb4a090612ae3d
    related-to-bug: 5857057
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: I5c54a0185527f6ca3e746d625a007aa06f6f25f9
    Rename LOGV(_IF) to ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I366680b6e614b8983d1def28cc2fdbfa98f39531
    Remove RTSP support from libvideoeditor's PreviewPlayer...
    
    Change-Id: I2032772037c1130736081cb62bd6ce8d1270e1b9
    Fix for 5369981 Native crash : testPreviewWithEndAudioTrack functional test.
    
    Change-Id: Icb8cadaff50a22588417c2c8f5c31415dd0cca9e
    Use GL to render preview.
    
    To speed up the preview, we direct the decoder output to a
    SurfaceTexture, then draw the texture to a surface. The media
    rendering parameters (crop, black-border) are implemented
    using different vertex coordinates. The color effects are
    implemented using fragment shaders. Currently only three color
    effects are implemented, but that's all the appplication uses.
    
    Change-Id: If84439fee572ed37ea077749ef9f2bd4f78703e1
    Remove unused mLastVideoBuffer and bAppliedVideoEffect.
    
    Change-Id: I29511aaa714494a1a6caa4ed95bbc26370b37246
    Remove PreviewLocalRenderer (simplify the code).
    
    Change-Id: I1f04e591cd0a33eb70bd93d5600aba12e727386e
    Add YV12 color converter interface for VideoEditor.
    
    The original assumption in VideoEditor is that the decoder output
    and encoder input are in YV12 format. However on different
    hardware platform the actual formats may be different. So now we
    load a platform-specific YV12 color conversion module which
    knows the actual format and can convert to/from YV12, which is
    the format used in VideoEditor internally for processing.
    
    Bug: 5061733
    Change-Id: I852f85efd30c05cf6c42810059ee4d2ef37ee3da
    fix for issue 4142219
    Don't hard code platform-specific limitations
    engine part.
    
    Change-Id: Ibc8a539e5bbac738f60ef935670a333b7017e20e
    Remove curtain effects (they are unused).
    
    Change-Id: I8e1ccad3e9ddf4c272e85e7ca04582b4863c242d
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Separate preview player from AwesomePlayer and also video editor audio player from AudioPlayer
    
    Change-Id: I436ac541df3e34ad16be95a50c96d7af67fa15e4
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    remove unused references to ISurface
    
    Change-Id: Ia11c5f46f38c0b00ca63d19d3484bf4024cdb75d
    Fix for the issue: TestPreviewWithTransition fails (4133108)
    
    Change-Id: I53eb798f4f86e83f8a4668c7256241367c1ccbe4
    Fix for the issue: 4099068 For long duration files, after end of the preview the progress bar is moved to the middle
    
    Change-Id: I3463581138e20e1a00f51183d3be013d6b2cd43f
    Fix for 4084134 End transition applied on image does not show up in previewer when playback
    
    Change-Id: I72ee9fe95f038c07b6ccfe3305aa6436e882eedf
    Fix for issue 3495914: (In Preview) Video clip switches between start and end
    
    Change-Id: Ib11c069127b3e81cfc741fab5a4f05a21d382c6b
    Adapt to changes in AwesomePlayer for Honeycomb branch - DO NOT MERGE
    
    Bug - 3497783
    
    Change-Id: I26eee1538d1f2f86476b115c9e7df85fadd796dd
    Adapt to changes in AwesomePlayer for Honeycomb branch - DO NOT MERGE
    
    Bug - 3497783
    
    Change-Id: I26eee1538d1f2f86476b115c9e7df85fadd796dd
    DO NOT MERGE: Hack this copy of our internal sources to match changes to support A/V sync.
    
    Change-Id: Iae0c63e936b2042473def8839f663605e68b6066
    FIX for Issue Fix for issue 3371667: fix source code compilation warnings(3)
    
    Change-Id: I15e8572cbce7443fba9afcd494a92038a5a0bd43
    Fix for memory leak with single audio player instance
    
    Change-Id: Idb0d24ac1a4fbe21c5f63871a4c7da2beb90e516
    DO NOT MERGE: Hack this copy of our internal sources to match changes to support A/V sync.
    
    Change-Id: Iae0c63e936b2042473def8839f663605e68b6066
    And again keep this copy of our internal sources in sync, so much fun...
    
    Change-Id: I4b588f14ba2d06d3163615557fd97fc2a5f6ca47
    related-to-bug: 3375737
    Fix for 3369917 Audio skips at clip edit points
    
    Change-Id: Iba66585cc2e679475d8db529d6113586b58e626e
    Fix for issue 3439595 : Movie studio playback previous frames
    
    Change-Id: I0f1a6cdfa40f6c8eebe989116e01ba8c212d5872
    Fix for issue 3456480 A/V not in sync when a picture is added followed by a video clip trimmed from start
    
    Change-Id: I7a46f7fc20de9a6c0ebbc2ad03dca898306bad6b
    Update this copy of our internal sources to reflect changes to the original...
    
    Change-Id: I6f66c1f4e73f0a83faf0fbcdea5073e6b9fef1de
    Fix for issue 3431967 : Memory leak from video editor engine
    
    Cleanup
    
    Change-Id: Ie5432de17c30dbb02c70a759502b7f2e2dbba447
    Fix for issue : 3450195 Adapt to the recent changes of awesome player in video editor preview player
    
    Change-Id: Ibd15264837dab32464fb90e75cf6d3d323cbbae3
    Fix for issue : 3439708 Last frame is missing effect
    
    Change-Id: I533695f4154d4ebce4e8f1ff39a622ca4fd62430
    This copy of our internal code does not handle seek-preview while paused well.
    
    disabling that functionality.
    
    Change-Id: Ie1d2bda6866e3754fb6237ab827c3c93a38104d8
    related-to-bug: 3427268
    Fix for 3409334 Movie Studio "Force Close" after importing a 3gp video
    
    Change-Id: I37949140a6c37a0c2d04221e220e7e267b6c7a02
    Fix Issue Crash during Export Issue 3414805 , and Preview smoothning for 720p Clips
    
    Change-Id: I5a90fc350a33c1eca9b4ec682b68b80913578341
    Fix issue 3369917 :Audio skips at clip edit points
    
    Change-Id: Ibfdcf7511efe054cd41bc36690696c6eddd2e500
    Fix issue 3404563. Overlay is not seen when the clip is trimmed in the beginning.
    
    Change-Id: Iec0fcea164f6909283c8686605378c3e1db127f0
    Fix for issue 3399126 Overlay displayed over next clip
    
    Change-Id: If2baf25bfe10cd4034db827c0333b3020bbd3087
    Fix Issues 3395836
    
    Change-Id: I4cf83c99d09b27c92a7789a4c16b2e237011a7fd
    Fix for ISSUE 3370836 - Overlay optmization.
    
    Change-Id: I9c6657f6fdab0fa815201d8b26b8c90700663c12
    Change preview player code also.
    
    Adapt to 32 bit aligned decoder buffers
    
    Change-Id: I631f7e60b8e424af496f45d0e5e292bf9e8a9dde
    videoeditor preview code on honeycomb
    
    Change-Id: I9c3c9cb921ea697ab16732973d26ef9035cda2ee
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Fix LOCAL_C_INCLUDES and correct #include syntax
    
    Change-Id: I522861043cc2ee905258a2ae409bf9dddbe452dc
    Rename YV12 to I420.
    
    Change-Id: I453b7044bf46950ef67091f3417ed3e6a65086a0
    Use GL to render preview.
    
    To speed up the preview, we direct the decoder output to a
    SurfaceTexture, then draw the texture to a surface. The media
    rendering parameters (crop, black-border) are implemented
    using different vertex coordinates. The color effects are
    implemented using fragment shaders. Currently only three color
    effects are implemented, but that's all the appplication uses.
    
    Change-Id: If84439fee572ed37ea077749ef9f2bd4f78703e1
    Rename YV12 to I420.
    
    Change-Id: I453b7044bf46950ef67091f3417ed3e6a65086a0
    Add YV12 color converter interface for VideoEditor.
    
    The original assumption in VideoEditor is that the decoder output
    and encoder input are in YV12 format. However on different
    hardware platform the actual formats may be different. So now we
    load a platform-specific YV12 color conversion module which
    knows the actual format and can convert to/from YV12, which is
    the format used in VideoEditor internally for processing.
    
    Bug: 5061733
    Change-Id: I852f85efd30c05cf6c42810059ee4d2ef37ee3da
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Removed unwanted line in M4READER_Amr.h
    
    vss core files upload on honeycomb
    
    Change-Id: I61206ae2398ce8ac544c6fb01a76fe8917bce75b
    AwesomePlayer: correct stream type for offload
    
    canOffloadStream() function in stagefright utils forces the
    stream type to AUDIO_STREAM_MUSIC when querying the audio policy
    manager if a particular track is offloadable or not.
    This causes MP3 ringtones to be offloaded which is not a validated use case.
    
    The fix consists in using the actual stream type read from the AudioSink.
    
    Bug: 11410937.
    Change-Id: I44b8e033a8e785a79cdc291b142f80b5580bdc4d
    libmediaplayerservice: offload playback support
    
    Main change is to how recycled tracks are used for gapless
    playback. If we are playing offloaded tracks that can't be
    recycled we don't open a new offloaded output until we have
    closed the previous one. This is because offloaded tracks
    are a limited resource so we don't want to spuriously create
    unnecessary instances. If the tracks cannot be recycled
    this means that the formats are incompatible and so the
    hardware most likely will also be unable to use the existing
    output channel for the new track. If we already have the
    maximum number of hardware offload channels open (which could
    be only one) then creation of the next output would fail if
    we attempted it while the previous output was still open.
    
    Change-Id: I4f5958074e7ffd2e17108157fee86329506730ea
    Signed-off-by: Eric Laurent <elaurent@google.com>
    Public API changes for audio offload support.
    
    NOTE: this does _not_ include all private member variables added
    to classes as part of offload support. Only public/protected functions
    and stubs functions/variables needed to make the changes buildable.
    
    - isOffloadSupported() added to audio policy service
        A stub implementation is required to build, this always returns false
    - setParameters() added to IAudioTrack
        A stub implementation is required to build, this always returns
        INVALID_OPERATION
    
    - CBlk flag for stream end
    
    - Change AudioSystem::getRenderPosition() to take an audio_output_t
        so caller can specify which output to query
    
    - Add AudioSystem::isOffloadSupported()
        This is fully implemented down to the AudioFlinger function
        AudioPolicyServer::isOffloadSupported() which is just a stub
        that always returns false.
    
    - Add EVENT_STREAM_END to AudioTrack interface.
        STREAM_END is used to signal when the hardware has actually finished
        playing all the data it was sent.
    
    - Add event type enumeration to media player interface AudioSink callbacks
        so that the same callback can be used to handle multiple types of
        event. For offloaded tracks we also have to handle STREAM_END and
        TEAR_DOWN events
    
    - Pass audio_offload_info_t to various functions used for opening outputs,
        tracks and audio players. This passes additional information about the
        compressed stream down to the HAL when using offload.
        For publicly-available APIs this is an optional parameter (for some of
        the internal and low-level APIs around the HAL interface it is mandatory)
    
    - Add getParameters() and setParameters() API to AudioTrack
        Currently dummy implementations.
    
    - Change AudioPlayer contructor so that it takes a set of bitflags defining what
        options are required. This replaces the original bool which only specified
        whether to use deep buffering.
    
    - Changes to StageFright class definition related to handling tearing-down of
        an offloaded track when we need to switch back to software decode
    
    - Define new StageFright utility functions used for offloaded tracks
        Currently dummy implementations.
    
    - AudioFlinger changes to use extended audio_config_t.
        Fills in audio_offload_info_t member if this info is passed in when
        opening an output.
    
    - libvideoeditor changes required to add the new event type parameter
        to AudioSink callback functions
    
    - libmediaplayerservice changes required to add the new event type parameter
        to AudioSink callback functions
    
    Change-Id: I3ab41138aa1083d81fe83b886a9b1021ec7320f1
    Signed-off-by: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
    Signed-off-by: Eric Laurent <elaurent@google.com>
    Use sp<AudioTrack> instead of raw AudioTrack *
    
    This change prepares for the new implementation of AudioTrack client, which
    will require clients to use only sp<AudioTrack>, not raw AudioTrack *.
    A raw delete will cause a race condition during AudioTrack destruction.
    
    AudioTrack was made a RefBase by commit b68a91a70bc8d0d18e7404e14443d4e4020b3635
    on 2011/11/15, when it was needed by OpenSL ES (for the callback protector).
    At that time, the only other client that was also converted from
    AudioTrack * to sp<AudioTrack> was android.media.AudioTrack JNI in
    project frameworks/base (file android_media_AudioTrack.cpp).
    
    Details:
     * Use .clear() instead of delete followed by = NULL.
     * ALOG %p need .get().
     * sp<> don't need to be listed in constructor initializer, if initially 0.
     * Use == 0 for sp<> vs == NULL for raw pointers.
     * Use if (sp != 0) instead of if (raw).
    
    Change-Id: Ic7cad25795d6e862e112abdc227b6d33afdfce17
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Add support for deep audio buffers
    
    Allow AudioSink to use deep audio buffering when the
    source is audio only and its duration is more than
    a certain threshold.
    This helps improve battery life but implies higher
    audio latency.
    
    Change-Id: Ie79915b61c370292f05aabda9779356570e03cbb
    Add gapless playback support for NuPlayer
    
    This makes NuPlayer use a SkipCutBuffer when needed, and adds a new
    AudioSink method to retrieve the number of frames written so far, so
    NuPlayerRenderer can calculate how much data it can write without blocking.
    Also make some more methods const.
    
    Change-Id: Id7d253ad8a7b85e9a84ca2baafbe32817b16c744
    Fix LOCAL_C_INCLUDES and correct #include syntax
    
    Change-Id: I522861043cc2ee905258a2ae409bf9dddbe452dc
    Set channel mask when opening audio sink
    
    Update the code to use the AudioSink::open() interface that
     takes a channel mask as an additional parameter. The code
     is only stereo, and returns an error when attempting to create
     a video editor audio sink with more than two channels.
    
    Change-Id: Ib9bba067da0b286c08656976b89fba7c8b42f99f
    Use audio_stream_type_t consistently
    
    Change-Id: I0b3ba8ab74f03433d1e64cb898fa62c02535a2f1
    Use audio_format_t consistently
    
    Change-Id: Idb08c49fe1a2c87ea2bb080815a5a6f95409834c
    Use GL to render preview.
    
    To speed up the preview, we direct the decoder output to a
    SurfaceTexture, then draw the texture to a surface. The media
    rendering parameters (crop, black-border) are implemented
    using different vertex coordinates. The color effects are
    implemented using fragment shaders. Currently only three color
    effects are implemented, but that's all the appplication uses.
    
    Change-Id: If84439fee572ed37ea077749ef9f2bd4f78703e1
    Add YV12 color converter interface for VideoEditor.
    
    The original assumption in VideoEditor is that the decoder output
    and encoder input are in YV12 format. However on different
    hardware platform the actual formats may be different. So now we
    load a platform-specific YV12 color conversion module which
    knows the actual format and can convert to/from YV12, which is
    the format used in VideoEditor internally for processing.
    
    Bug: 5061733
    Change-Id: I852f85efd30c05cf6c42810059ee4d2ef37ee3da
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Revert "Use AudioTrack::event_type not int in callback"
    
    This reverts commit dd51bdc4cf4b7c9f09e7dc4116651c6681d5287c
    Use AudioTrack::event_type not int in callback
    
    Change-Id: I09ff321f9457c0a9ee58e59bee38ed53799e494b
    Add setParameter/getParameter to MediaPlayer API
    for bug 1982947
    
    Change-Id: Ic32704367bdcf2ade3f035a164927e95c69af7fa
    remove unused references to ISurface
    
    Change-Id: Ia11c5f46f38c0b00ca63d19d3484bf4024cdb75d
    Fix for the issue: TestPreviewWithTransition fails (4133108)
    
    Change-Id: I53eb798f4f86e83f8a4668c7256241367c1ccbe4
    Bug 3438258 surface textures
    
    This is sufficient to build, but is not a full implementation.
    See bug 3467199 for the real implementation.
    
    Change-Id: Ifc3325fa9b019669bffddfd7bfd10bce57d0a136
    Fix for 3369917 Audio skips at clip edit points
    
    Change-Id: Iba66585cc2e679475d8db529d6113586b58e626e
    Fix for issue 3439595 : Movie studio playback previous frames
    
    Change-Id: I0f1a6cdfa40f6c8eebe989116e01ba8c212d5872
    videoeditor preview code on honeycomb
    
    Change-Id: I9c3c9cb921ea697ab16732973d26ef9035cda2ee
    separte producer and consumer interfaces
    
    Bug: 9265647
    Change-Id: Iefabc11e4bd2e2e8ffd31160476c450affe6629c
    always pass the BufferQueue explicitely to consumers
    
    Change-Id: Ic2d9a9cf184a482b3c78a481ed693ee32df5ca13
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    stop using a deprecated SurfaceTextureClient ctor"
    stop using a deprecated SurfaceTextureClient ctor"
    Revert "stop using a deprecated SurfaceTextureClient ctor"
    
    This reverts commit aef79b0676d8f0ee8ef637ec8be5ba73225b038d
    
    Change-Id: I5f6cf4d6d5dc895a9426f212dfc8a25b4bf2d23a
    Revert "stop using a deprecated SurfaceTextureClient ctor"
    
    This reverts commit aef79b0676d8f0ee8ef637ec8be5ba73225b038d
    
    Change-Id: I5f6cf4d6d5dc895a9426f212dfc8a25b4bf2d23a
    stop using a deprecated SurfaceTextureClient ctor
    
    Change-Id: I792277b0d711da22f6b2abb7f1d837450d6af8e2
    stop using a deprecated SurfaceTextureClient ctor
    
    Change-Id: I792277b0d711da22f6b2abb7f1d837450d6af8e2
    Update ANativeWindow client code for sync
    
    This change updates all the uses of ANativeWindow to use the new ANW functions
    that accept and return Sync HAL fence file descriptors.
    
    Change-Id: Id7db42d8d6380f8b440d88476ce9211c6225fb16
    remove dependency on SurfaceTexture::connect()
    
    Change-Id: I97ce29ecfde4df171120a3570db9575b32c8d362
    Fix LOCAL_C_INCLUDES and correct #include syntax
    
    Change-Id: I522861043cc2ee905258a2ae409bf9dddbe452dc
    fix location of libgui headers
    
    Change-Id: I0d203f4e7aa83e0449f7ebb9f3cafe021e38fc2f
    Move away from MediaDebug and use ADebug instead
    
    Change-Id: I307b3f565808ec8e3b9a4d944c6c0d1f603b04c9
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: I5c54a0185527f6ca3e746d625a007aa06f6f25f9
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I17166d9fb435c85c5fd9d5fba1a39d2661c61e10
    Add connect calls for SurfaceTexture. Clean PreviewRenderer.
    
    Now connect() is necessary for SurfaceTexture.
    Also cleaned unused code in PreviewRenderer.
    
    Change-Id: Ic49df01e79f38a48a8c2cf194d13ee575660c834
    Rename YV12 to I420.
    
    Change-Id: I453b7044bf46950ef67091f3417ed3e6a65086a0
    Use GL to render preview.
    
    To speed up the preview, we direct the decoder output to a
    SurfaceTexture, then draw the texture to a surface. The media
    rendering parameters (crop, black-border) are implemented
    using different vertex coordinates. The color effects are
    implemented using fragment shaders. Currently only three color
    effects are implemented, but that's all the appplication uses.
    
    Change-Id: If84439fee572ed37ea077749ef9f2bd4f78703e1
    libmediaplayerservice: offload playback support
    
    Main change is to how recycled tracks are used for gapless
    playback. If we are playing offloaded tracks that can't be
    recycled we don't open a new offloaded output until we have
    closed the previous one. This is because offloaded tracks
    are a limited resource so we don't want to spuriously create
    unnecessary instances. If the tracks cannot be recycled
    this means that the formats are incompatible and so the
    hardware most likely will also be unable to use the existing
    output channel for the new track. If we already have the
    maximum number of hardware offload channels open (which could
    be only one) then creation of the next output would fail if
    we attempted it while the previous output was still open.
    
    Change-Id: I4f5958074e7ffd2e17108157fee86329506730ea
    Signed-off-by: Eric Laurent <elaurent@google.com>
    Public API changes for audio offload support.
    
    NOTE: this does _not_ include all private member variables added
    to classes as part of offload support. Only public/protected functions
    and stubs functions/variables needed to make the changes buildable.
    
    - isOffloadSupported() added to audio policy service
        A stub implementation is required to build, this always returns false
    - setParameters() added to IAudioTrack
        A stub implementation is required to build, this always returns
        INVALID_OPERATION
    
    - CBlk flag for stream end
    
    - Change AudioSystem::getRenderPosition() to take an audio_output_t
        so caller can specify which output to query
    
    - Add AudioSystem::isOffloadSupported()
        This is fully implemented down to the AudioFlinger function
        AudioPolicyServer::isOffloadSupported() which is just a stub
        that always returns false.
    
    - Add EVENT_STREAM_END to AudioTrack interface.
        STREAM_END is used to signal when the hardware has actually finished
        playing all the data it was sent.
    
    - Add event type enumeration to media player interface AudioSink callbacks
        so that the same callback can be used to handle multiple types of
        event. For offloaded tracks we also have to handle STREAM_END and
        TEAR_DOWN events
    
    - Pass audio_offload_info_t to various functions used for opening outputs,
        tracks and audio players. This passes additional information about the
        compressed stream down to the HAL when using offload.
        For publicly-available APIs this is an optional parameter (for some of
        the internal and low-level APIs around the HAL interface it is mandatory)
    
    - Add getParameters() and setParameters() API to AudioTrack
        Currently dummy implementations.
    
    - Change AudioPlayer contructor so that it takes a set of bitflags defining what
        options are required. This replaces the original bool which only specified
        whether to use deep buffering.
    
    - Changes to StageFright class definition related to handling tearing-down of
        an offloaded track when we need to switch back to software decode
    
    - Define new StageFright utility functions used for offloaded tracks
        Currently dummy implementations.
    
    - AudioFlinger changes to use extended audio_config_t.
        Fills in audio_offload_info_t member if this info is passed in when
        opening an output.
    
    - libvideoeditor changes required to add the new event type parameter
        to AudioSink callback functions
    
    - libmediaplayerservice changes required to add the new event type parameter
        to AudioSink callback functions
    
    Change-Id: I3ab41138aa1083d81fe83b886a9b1021ec7320f1
    Signed-off-by: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
    Signed-off-by: Eric Laurent <elaurent@google.com>
    Use sp<AudioTrack> instead of raw AudioTrack *
    
    This change prepares for the new implementation of AudioTrack client, which
    will require clients to use only sp<AudioTrack>, not raw AudioTrack *.
    A raw delete will cause a race condition during AudioTrack destruction.
    
    AudioTrack was made a RefBase by commit b68a91a70bc8d0d18e7404e14443d4e4020b3635
    on 2011/11/15, when it was needed by OpenSL ES (for the callback protector).
    At that time, the only other client that was also converted from
    AudioTrack * to sp<AudioTrack> was android.media.AudioTrack JNI in
    project frameworks/base (file android_media_AudioTrack.cpp).
    
    Details:
     * Use .clear() instead of delete followed by = NULL.
     * ALOG %p need .get().
     * sp<> don't need to be listed in constructor initializer, if initially 0.
     * Use == 0 for sp<> vs == NULL for raw pointers.
     * Use if (sp != 0) instead of if (raw).
    
    Change-Id: Ic7cad25795d6e862e112abdc227b6d33afdfce17
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Use size_t for frame counts
    
    Also fix typo: bufferCount should be frameCount.
    
    Change-Id: Ibed539504db75ef99dc21c8ff1bf2987122063a5
    Use size_t for frame counts
    
    Also fix typo: bufferCount should be frameCount.
    
    Change-Id: Ibed539504db75ef99dc21c8ff1bf2987122063a5
    Use uint32_t for sample rate
    
    Change-Id: Ie240b48fb54b08359f69ecd4e5f8bda3d15cbe80
    Use uint32_t for sample rate
    
    Change-Id: Ie240b48fb54b08359f69ecd4e5f8bda3d15cbe80
    Add support for deep audio buffers
    
    Allow AudioSink to use deep audio buffering when the
    source is audio only and its duration is more than
    a certain threshold.
    This helps improve battery life but implies higher
    audio latency.
    
    Change-Id: Ie79915b61c370292f05aabda9779356570e03cbb
    rename audio policy output flags
    
    Change-Id: I27c46bd1d1b2b5f96b87af7d05b951fef18a1312
    Add gapless playback support for NuPlayer
    
    This makes NuPlayer use a SkipCutBuffer when needed, and adds a new
    AudioSink method to retrieve the number of frames written so far, so
    NuPlayerRenderer can calculate how much data it can write without blocking.
    Also make some more methods const.
    
    Change-Id: Id7d253ad8a7b85e9a84ca2baafbe32817b16c744
    Use audio_policy_output_flags_t consistently
    
    Change-Id: I425cfd442257560dcf141d3d8599ddc7d21c1d13
    Set channel mask when opening audio sink
    
    Update the code to use the AudioSink::open() interface that
     takes a channel mask as an additional parameter. The code
     is only stereo, and returns an error when attempting to create
     a video editor audio sink with more than two channels.
    
    Change-Id: Ib9bba067da0b286c08656976b89fba7c8b42f99f
    More source code Clean up in video editor engine
    
    o fixed incorrect design and got rid of PreviewPlayerBase class
    o removed obsolete/unused code as much as possible and reformatted the source code
    o verified and passed functional tests
    o More to come ...
    
    Change-Id: I7a89162f8b9d9ea6eabcf0457366cd2f6d970d11
    Remove streaming related logic from preview player.
    
    Video editor engine only deals with local file playback/preview.
    
    Change-Id: I8e3414abf8a109a77a1e34a959fb4a090612ae3d
    related-to-bug: 5857057
    Use audio_format_t consistently
    
    Change-Id: Idb08c49fe1a2c87ea2bb080815a5a6f95409834c
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: I5c54a0185527f6ca3e746d625a007aa06f6f25f9
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: I261ad4d5348f4832488707edeb3cbdbb6dd12fca
    Rename LOGV(_IF) to ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I366680b6e614b8983d1def28cc2fdbfa98f39531
    Use GL to render preview.
    
    To speed up the preview, we direct the decoder output to a
    SurfaceTexture, then draw the texture to a surface. The media
    rendering parameters (crop, black-border) are implemented
    using different vertex coordinates. The color effects are
    implemented using fragment shaders. Currently only three color
    effects are implemented, but that's all the appplication uses.
    
    Change-Id: If84439fee572ed37ea077749ef9f2bd4f78703e1
    Add YV12 color converter interface for VideoEditor.
    
    The original assumption in VideoEditor is that the decoder output
    and encoder input are in YV12 format. However on different
    hardware platform the actual formats may be different. So now we
    load a platform-specific YV12 color conversion module which
    knows the actual format and can convert to/from YV12, which is
    the format used in VideoEditor internally for processing.
    
    Bug: 5061733
    Change-Id: I852f85efd30c05cf6c42810059ee4d2ef37ee3da
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Revert "Use AudioTrack::event_type not int in callback"
    
    This reverts commit dd51bdc4cf4b7c9f09e7dc4116651c6681d5287c
    Use AudioTrack::event_type not int in callback
    
    Change-Id: I09ff321f9457c0a9ee58e59bee38ed53799e494b
    update for new audio.h header location
    
    Change-Id: I593b91a84a603d8c7f51a83232cced5af4980baf
    Signed-off-by: Dima Zavin <dima@android.com>
    Add setParameter/getParameter to MediaPlayer API
    for bug 1982947
    
    Change-Id: Ic32704367bdcf2ade3f035a164927e95c69af7fa
    libvideoeditor: convert to use new audio.h
    
    Change-Id: I39726f6f6cd5aabbd91629f329876660b3d3cec2
    Signed-off-by: Dima Zavin <dima@android.com>
    remove unused references to ISurface
    
    Change-Id: Ia11c5f46f38c0b00ca63d19d3484bf4024cdb75d
    Fix for the issue: TestPreviewWithTransition fails (4133108)
    
    Change-Id: I53eb798f4f86e83f8a4668c7256241367c1ccbe4
    Bug 3438258 surface textures
    
    This is sufficient to build, but is not a full implementation.
    See bug 3467199 for the real implementation.
    
    Change-Id: Ifc3325fa9b019669bffddfd7bfd10bce57d0a136
    Fix for 3369917 Audio skips at clip edit points
    
    Change-Id: Iba66585cc2e679475d8db529d6113586b58e626e
    Fix for issue 3439595 : Movie studio playback previous frames
    
    Change-Id: I0f1a6cdfa40f6c8eebe989116e01ba8c212d5872
    Fixed issue 3385135: change min audio buffer count to match awesome player
    
    Change-Id: I4408b5c42edd0a65016ed621b31ecda513d17d60
    videoeditor preview code on honeycomb
    
    Change-Id: I9c3c9cb921ea697ab16732973d26ef9035cda2ee
    Clean up VideoEditorGBAudioProcessing
    
    o added #ifndef/#define in the header
    o removed unused variables
    o renamed some types and methods
    o replaced macro with class private enum
    
    Change-Id: I588ef062fcadcd11591a5a55b4aed771c724492f
    Don't allow evil constructors in VideoEditorBGAudioProcessing
    
    Change-Id: Ic525ed66308681ec62363bc90ed2cea42c165a2b
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Clean up background audio processing code
    
    Change-Id: I6184e71cb0ccfdb1fc5f250bd7ecd4555efad482
    Fix for 3369917 Audio skips at clip edit points
    
    Change-Id: Iba66585cc2e679475d8db529d6113586b58e626e
    Fix for issue 3431967 : Memory leak from video editor engine
    
    Change-Id: I4cc445ce7d41a4842dcf0b5ad1c729c0ae5553cd
    videoeditor preview code on honeycomb
    
    Change-Id: I9c3c9cb921ea697ab16732973d26ef9035cda2ee
    fix location of libgui headers
    
    Change-Id: I0d203f4e7aa83e0449f7ebb9f3cafe021e38fc2f
    Clean up VideoEditorPreviewController class part one:
    
    o moved local types inside the class to avoid external exposure
    o use non-virtual destructor since it is not meant to be a base class
    o removed unused header files and moved some of the header files to .cpp file from .h file
    o replaced #define constants with local enums
    
    Change-Id: Ib321fc8c0379955083bc892c2ef93ed58c6c2ff5
    Remove streaming related logic from preview player.
    
    Video editor engine only deals with local file playback/preview.
    
    Change-Id: I8e3414abf8a109a77a1e34a959fb4a090612ae3d
    related-to-bug: 5857057
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: I5c54a0185527f6ca3e746d625a007aa06f6f25f9
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I605079da4a7c01e6555e2aab6f16ccf8cc6ac694
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I17166d9fb435c85c5fd9d5fba1a39d2661c61e10
    Rename LOGV(_IF) to ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I366680b6e614b8983d1def28cc2fdbfa98f39531
    Enable some logs to debug 5195693.
    
    Change-Id: I1c71b6fa6b8dbcbf2a6685be5f24afddab4afc5d
    Fix for 5156702 Rotate video output for thumbnails and export
    
    This is part of a multi project submit.
    This is the native engine part.
    
    Change-Id: Icde922194a123a90544942caa12430fc3c4ef10e
    Add connect calls for SurfaceTexture. Clean PreviewRenderer.
    
    Now connect() is necessary for SurfaceTexture.
    Also cleaned unused code in PreviewRenderer.
    
    Change-Id: Ic49df01e79f38a48a8c2cf194d13ee575660c834
    Use GL to render preview.
    
    To speed up the preview, we direct the decoder output to a
    SurfaceTexture, then draw the texture to a surface. The media
    rendering parameters (crop, black-border) are implemented
    using different vertex coordinates. The color effects are
    implemented using fragment shaders. Currently only three color
    effects are implemented, but that's all the appplication uses.
    
    Change-Id: If84439fee572ed37ea077749ef9f2bd4f78703e1
    fix for issue 4142219
    Don't hard code platform-specific limitations
    engine part.
    
    Change-Id: Ibc8a539e5bbac738f60ef935670a333b7017e20e
    Remove curtain effects (they are unused).
    
    Change-Id: I8e1ccad3e9ddf4c272e85e7ca04582b4863c242d
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    remove unused references to ISurface
    
    Change-Id: Ia11c5f46f38c0b00ca63d19d3484bf4024cdb75d
    Fix for the issue: TestPreviewWithTransition fails (4133108)
    
    Change-Id: I53eb798f4f86e83f8a4668c7256241367c1ccbe4
    Fix for issue 3371667: fix source code compilation warnings(Moved from master)
    
    Change-Id: Ife1fc3f89beae498a49970ab5d2a080a112ce7c2
    Fix for issue 3427268 Crash when stopping playback
    
    Change-Id: I4cd615ffa8c5db39ec34dc14f6b09fad55cae263
    Fix for 3369917 Audio skips at clip edit points
    
    Change-Id: Iba66585cc2e679475d8db529d6113586b58e626e
    Fix for issue 3439595 : Movie studio playback previous frames
    
    Change-Id: I0f1a6cdfa40f6c8eebe989116e01ba8c212d5872
    Fix for issue : 3439708 Last frame is missing effect
    
    Change-Id: I533695f4154d4ebce4e8f1ff39a622ca4fd62430
    Fix for issue 3431967 : Memory leak from video editor engine
    
    Change-Id: I36e1cae53c91217804bc8243d9eb47820fb2114e
    Fix for 3409334 Movie Studio "Force Close" after importing a 3gp video
    
    Change-Id: I37949140a6c37a0c2d04221e220e7e267b6c7a02
    Fix for issue 3410180: Small green lines at end of surface after removing last media item
    
    Change-Id: I49695d5d77709da66ffa44d648b35e194f069a7f
    Fix issue 3369917 :Audio skips at clip edit points
    
    Change-Id: Ibfdcf7511efe054cd41bc36690696c6eddd2e500
    Crash in prepare player. Issue No 3403342
    
    Avoid race in preparing the same player twice.
    
    Change-Id: I5a735e54b94cd0dd435a066a92b1353e761eafc6
    Merging on top of new sync
    
    VideoEditor:Fix for issue 3378727
    
    Change-Id: Iff7d13689b436cda2b2073625a786322945b3edc
    Fix Issue no 3374842. Preview Optimization while switching between two clips.
    
    Change-Id: Iefb55107965b3978f83794fe727405206afdde72
    Fix Issues 3395836
    
    Change-Id: I4cf83c99d09b27c92a7789a4c16b2e237011a7fd
    Fix for ISSUE 3370836 - Overlay optmization.
    
    Change-Id: I9c6657f6fdab0fa815201d8b26b8c90700663c12
    VideoEditor:Fix for Clear Surface API Bug of not able to create empty project
    
    bug - 3370622
    
    Change-Id: Icb18b3d8afbdb077a93dc5e599ccc20da64703f2
    Change preview player code also.
    
    Adapt to 32 bit aligned decoder buffers
    
    Change-Id: I631f7e60b8e424af496f45d0e5e292bf9e8a9dde
    videoeditor preview code on honeycomb
    
    Change-Id: I9c3c9cb921ea697ab16732973d26ef9035cda2ee
    Clean up VideoEditorPreviewController class part one:
    
    o moved local types inside the class to avoid external exposure
    o use non-virtual destructor since it is not meant to be a base class
    o removed unused header files and moved some of the header files to .cpp file from .h file
    o replaced #define constants with local enums
    
    Change-Id: Ib321fc8c0379955083bc892c2ef93ed58c6c2ff5
    Use GL to render preview.
    
    To speed up the preview, we direct the decoder output to a
    SurfaceTexture, then draw the texture to a surface. The media
    rendering parameters (crop, black-border) are implemented
    using different vertex coordinates. The color effects are
    implemented using fragment shaders. Currently only three color
    effects are implemented, but that's all the appplication uses.
    
    Change-Id: If84439fee572ed37ea077749ef9f2bd4f78703e1
    fix for issue 4142219
    Don't hard code platform-specific limitations
    engine part.
    
    Change-Id: Ibc8a539e5bbac738f60ef935670a333b7017e20e
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    remove unused references to ISurface
    
    Change-Id: Ia11c5f46f38c0b00ca63d19d3484bf4024cdb75d
    Fix for issue 3427268 Crash when stopping playback
    
    Change-Id: I4cd615ffa8c5db39ec34dc14f6b09fad55cae263
    Fix for 3369917 Audio skips at clip edit points
    
    Change-Id: Iba66585cc2e679475d8db529d6113586b58e626e
    Fix for issue 3439595 : Movie studio playback previous frames
    
    Change-Id: I0f1a6cdfa40f6c8eebe989116e01ba8c212d5872
    Fix for issue : 3439708 Last frame is missing effect
    
    Change-Id: I533695f4154d4ebce4e8f1ff39a622ca4fd62430
    Fix Issue no 3374842. Preview Optimization while switching between two clips.
    
    Change-Id: Iefb55107965b3978f83794fe727405206afdde72
    Fix for ISSUE 3370836 - Overlay optmization.
    
    Change-Id: I9c6657f6fdab0fa815201d8b26b8c90700663c12
    VideoEditor:Fix for Clear Surface API Bug of not able to create empty project
    
    bug - 3370622
    
    Change-Id: Icb18b3d8afbdb077a93dc5e599ccc20da64703f2
    videoeditor preview code on honeycomb
    
    Change-Id: I9c3c9cb921ea697ab16732973d26ef9035cda2ee
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I605079da4a7c01e6555e2aab6f16ccf8cc6ac694
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: I261ad4d5348f4832488707edeb3cbdbb6dd12fca
    Rename YV12 to I420.
    
    Change-Id: I453b7044bf46950ef67091f3417ed3e6a65086a0
    Add YV12 color converter interface for VideoEditor.
    
    The original assumption in VideoEditor is that the decoder output
    and encoder input are in YV12 format. However on different
    hardware platform the actual formats may be different. So now we
    load a platform-specific YV12 color conversion module which
    knows the actual format and can convert to/from YV12, which is
    the format used in VideoEditor internally for processing.
    
    Bug: 5061733
    Change-Id: I852f85efd30c05cf6c42810059ee4d2ef37ee3da
    Clean up VideoEditorGBAudioProcessing
    
    o added #ifndef/#define in the header
    o removed unused variables
    o renamed some types and methods
    o replaced macro with class private enum
    
    Change-Id: I588ef062fcadcd11591a5a55b4aed771c724492f
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: I261ad4d5348f4832488707edeb3cbdbb6dd12fca
    Rename LOGV(_IF) to ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I366680b6e614b8983d1def28cc2fdbfa98f39531
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Clean up background audio processing code
    
    Change-Id: I6184e71cb0ccfdb1fc5f250bd7ecd4555efad482
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I9e2e142bcdf3153c529b790e368caea4fdb65ac8
    Fix for 3369917 Audio skips at clip edit points
    
    Change-Id: Iba66585cc2e679475d8db529d6113586b58e626e
    videoeditor preview code on honeycomb
    
    Change-Id: I9c3c9cb921ea697ab16732973d26ef9035cda2ee
    AV Android make files changes
    
    o plus a few file relocation: ActivityManager.cpp/h, SoundPool.h, etc
    o remove some runtime dependencies to libandroid, libandroid_runtime, etc
    
    Change-Id: I047a47c5fb361dd5cf85cd98798c39f629a75d10
    remove dependency on android_native_buffer.h
    
    Change-Id: I720d5e6ac7e4455d7ab59eab7e9c2478b911228a
    Add connect calls for SurfaceTexture. Clean PreviewRenderer.
    
    Now connect() is necessary for SurfaceTexture.
    Also cleaned unused code in PreviewRenderer.
    
    Change-Id: Ic49df01e79f38a48a8c2cf194d13ee575660c834
    Use GL to render preview.
    
    To speed up the preview, we direct the decoder output to a
    SurfaceTexture, then draw the texture to a surface. The media
    rendering parameters (crop, black-border) are implemented
    using different vertex coordinates. The color effects are
    implemented using fragment shaders. Currently only three color
    effects are implemented, but that's all the appplication uses.
    
    Change-Id: If84439fee572ed37ea077749ef9f2bd4f78703e1
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    android_native_buffer_t --> ANativeWindowBuffer
    
    Change-Id: Id43b27ed2d1b85488b731948d018da0c0fd0c50d
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Fix for 3409334 Movie Studio "Force Close" after importing a 3gp video
    
    Change-Id: I37949140a6c37a0c2d04221e220e7e267b6c7a02
    videoeditor preview code on honeycomb
    
    Change-Id: I9c3c9cb921ea697ab16732973d26ef9035cda2ee
    Move away from MediaDebug and use ADebug instead
    
    Change-Id: I307b3f565808ec8e3b9a4d944c6c0d1f603b04c9
    More source code Clean up in video editor engine
    
    o fixed incorrect design and got rid of PreviewPlayerBase class
    o removed obsolete/unused code as much as possible and reformatted the source code
    o verified and passed functional tests
    o More to come ...
    
    Change-Id: I7a89162f8b9d9ea6eabcf0457366cd2f6d970d11
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: I5c54a0185527f6ca3e746d625a007aa06f6f25f9
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: I261ad4d5348f4832488707edeb3cbdbb6dd12fca
    Rename LOGV(_IF) to ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I366680b6e614b8983d1def28cc2fdbfa98f39531
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Cleaned up dummy audio and video sources
    
    o remove unused member variables
    o replace a full loop with a memset
    
    Change-Id: Ib482525a321c2a17dd188fba47b642c63ab811c3
    Fix for issue 3371667: fix source code compilation warnings(Moved from master)
    
    Change-Id: Ife1fc3f89beae498a49970ab5d2a080a112ce7c2
    Fix for 3369917 Audio skips at clip edit points
    
    Change-Id: Iba66585cc2e679475d8db529d6113586b58e626e
    videoeditor preview code on honeycomb
    
    Change-Id: I9c3c9cb921ea697ab16732973d26ef9035cda2ee
    Move away from MediaDebug and use ADebug instead
    
    Change-Id: I307b3f565808ec8e3b9a4d944c6c0d1f603b04c9
    More source code Clean up in video editor engine
    
    o fixed incorrect design and got rid of PreviewPlayerBase class
    o removed obsolete/unused code as much as possible and reformatted the source code
    o verified and passed functional tests
    o More to come ...
    
    Change-Id: I7a89162f8b9d9ea6eabcf0457366cd2f6d970d11
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: I5c54a0185527f6ca3e746d625a007aa06f6f25f9
    Rename LOGV(_IF) to ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I366680b6e614b8983d1def28cc2fdbfa98f39531
    Make line-ending consistent (unix style).
    
    Change-Id: Id837b042952ff5d97907591f337b2222cff2c8a9
    Fix for: 4676350 Do not use dual copyright declaration for video editor code
    
    Change-Id: I2856be051fa3b3ddfe67e096e45fb0b34beb92be
    Fix for issue 4133431 "Remove OSAL layer" in engine part
    
    Change-Id: I98f98691048a5afc6f691b0cc3cec92e458e8f44
    Fix for issue 3371667: fix source code compilation warnings(Moved from master)
    
    Change-Id: Ife1fc3f89beae498a49970ab5d2a080a112ce7c2
    Fix issue 3369917 :Audio skips at clip edit points
    
    Change-Id: Ibfdcf7511efe054cd41bc36690696c6eddd2e500
    videoeditor preview code on honeycomb
    
    Change-Id: I9c3c9cb921ea697ab16732973d26ef9035cda2ee
    Native input dispatch rewrite work in progress.
    
    The old dispatch mechanism has been left in place and continues to
    be used by default for now.  To enable native input dispatch,
    edit the ENABLE_NATIVE_DISPATCH constant in WindowManagerPolicy.
    
    Includes part of the new input event NDK API.  Some details TBD.
    
    To wire up input dispatch, as the ViewRoot adds a window to the
    window session it receives an InputChannel object as an output
    argument.  The InputChannel encapsulates the file descriptors for a
    shared memory region and two pipe end-points.  The ViewRoot then
    provides the InputChannel to the InputQueue.  Behind the
    scenes, InputQueue simply attaches handlers to the native PollLoop object
    that underlies the MessageQueue.  This way MessageQueue doesn't need
    to know anything about input dispatch per-se, it just exposes (in native
    code) a PollLoop that other components can use to monitor file descriptor
    state changes.
    
    There can be zero or more targets for any given input event.  Each
    input target is specified by its input channel and some parameters
    including flags, an X/Y coordinate offset, and the dispatch timeout.
    An input target can request either synchronous dispatch (for foreground apps)
    or asynchronous dispatch (fire-and-forget for wallpapers and "outside"
    targets).  Currently, finding the appropriate input targets for an event
    requires a call back into the WindowManagerServer from native code.
    In the future this will be refactored to avoid most of these callbacks
    except as required to handle pending focus transitions.
    
    End-to-end event dispatch mostly works!
    
    To do: event injection, rate limiting, ANRs, testing, optimization, etc.
    
    Change-Id: I8c36b2b9e0a2d27392040ecda0f51b636456de25
    Add template class SingleStateQueue
    
    Change-Id: If7e2bc9b2a216524ee9cbb68682e2634933b4973
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Fix race condition for non-started fast tracks
    
    This required re-implementing how fast tracks are considered active.
    Now, they use the same logic as normal tracks, except underrun is ignored.
    
    Other changes:
     - add framesReady() to AudioBufferProvider interface
     - rebased
     - add track underrun counter state to fast mixer dump state
     - move dumpsys header to Track::appendDumpHeader()
       so it closer to where tracks are dumped
     - display track state in dumpsys as a character code
     - measure and display warmup time and cycles in dumpsys
     - copy in the presentation complete code
     - add ExtendedAudioBufferProvider for framesReady() which returns size_t
     - simplify underrun tracking
     - deferred reset track after stop()
     - add comments
    
    Change-Id: I7db8821bc565230ec76da1f9380fe3fb09735e5b
    Use scheduling policy service
    
    Change-Id: I3c09da1dc0de5039d0c15ce7fb2bc373fa398712
    Factor out and speed up permission-checking code
    
    Use the caching permission check for dump to save IPC.
    
    Cache getpid() to save kernel call for other permission checks.
    
    The C runtime library getpid() can't cache due to a fork
    race condition, but we know that mediaserver doesn't fork.
    
    Don't construct String16 on the stack.
    
    Change-Id: I6be6161dae5155d39ba6ed6228e7683e67be34ed
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    * Gut the use of AudioFlinger for recording and replace it with custom RecordThread, RecordTrack and RecordHandle implementations
    * Make sure addBatteryData is disabled so that MediaService isn't called
    * Disable AudioFlinger call to get number of frame lost
    * Audio recording works, also clean up the code to remove many of the unnecessary commented out AudioFlinger calls
    * Clean up code more, removed commented out lines of code that will never be used, added some comments
    
    Change-Id: I875bc90223369d9a5653c5aeeb2d49175f65e08b
    Signed-off-by: Jim Hodapp <jim.hodapp@canonical.com>
    Allow releaseBuffer after flush
    
    After AudioTrack start checks for pending flush,
    allow releaseBuffer on any previously obtained buffer.
    For example, this can happen if the resampler has obtained
    a buffer but not released the whole buffer yet.
    Note that the resampler will be reading obsolete data.
    
    Bug: 11285590
    Change-Id: I0614fbb62e43604aac3089cce4b7797c87a306b5
    AudioTrack: fix head position after restore
    
    The head position transfered to the new track
    by restoreTrack_l() must take into account the frames that
    are dropped from the old track to avoid a non recoverable
    offset in the playback head position returned to applications.
    
    Bug: 11230062.
    Change-Id: I51143a08b95e8f264ed709ae2054360315f2b8b1
    Fix underruns when fast track denied due to SRC
    
    OpenSL ES requests a fast track.  If sample rate conversion is needed,
    the request is denied by server, and a larger client buffer is used
    to handle the higher latency of a normal track.  However the client
    notification period was calculated based on buffer being divided into
    2 sub-buffers.  That resulted in the notification period being too long.
    The server pulls chunks that are smaller than half the total buffer.
    So now the client uses 3 sub-buffers when there is SRC.
    
    Also removed the 'defer wake' optimization because it was incorrect.
    This optimization attempted to reduce the number of wakeups of client,
    when server releaseBuffer knows that another releaseBuffer will be
    following.  But there is no way for the first releaseBuffer to predict
    how soon the second releaseBuffer will occur.  In some cases it was
    a long time, and the client underran.  So now the client is woken up
    immediately if the total number of available frames to client is >=
    the minimum number the client wants to see (the notification period).
    
    Also fix bug where minimum frame count was not being used in the
    calculation of notification period.
    
    Bug: 10342804
    Change-Id: I3c246f4e7bc3684a344f2cf08268dc082e338e2a
    Implement Track::getTimestamp()
    
    using a new timestamp latch in PlaybackThread, and
    AudioTrackServerProxy::framesReleased() which returns mServer.
    
    Change-Id: I1ebfba968c773faaab95648c272fd3ebd74718d6
    Report underruns for fast tracks also
    
    This fixes a regression that was introduced earlier
    by commit 9f80dd223d83d9bb9077fb6baee056cee4eaf7e5
    called "New control block for AudioTrack and AudioRecord".
    That commit broke underrun reporting for fast tracks.
    
    Also remove Track::mUnderrunCount, which counted the number of underrun
    events, and was only used by dumpsys media.audio_flinger.
    
    Now dumpsys media.audio_flinger reports the number of underrun frames,
    
    Isolated underrun-related control block accesses via the proxy, so that
    the server is not directly poking around in the control block.
    
    The new proxy APIs are AudioTrackServerProxy::getUnderrunFrames() and
    AudioTrackServerProxy::tallyUnderrunFrames().  getUnderrunFrames() returns
    a rolling counter for streaming tracks, or zero for static buffer tracks
    which never underrun, but do a kind of 'pause' at end of buffer.
    tallyUnderrunFrames() increments the counter by a specified number of frames.
    
    Change-Id: Ib31fd73eb17cbb23888ce3af8ff29f471f5bd5a2
    Move control block mName to createTrack() output
    
    This is part of a series of CLs to clean up the shared memory
    control block, by removing any fields that don't have to be there.
    
    Change-Id: I6e51003a1293b6800258c31b22cff2eba42162e7
    Rename control block flags to mFlags
    
    Change-Id: I7b6d31e24531954ab1ecdf3ed56c19433700bd89
    Rename control block server to mServer and add comments
    
    Change-Id: Ieabd91acee92d0e84e66fbd358df5282b856306e
    libmedia: offloaded playback support
    
    - start() returns a status so that upper layers can
    recreate a non offloaded track in case of error.
    
    - Added states to handle offloaded tracks specific:
      - waiting for stream end (drain) notification by
    audio flinger
      - allow pause while waiting for stream end notification
    
    - getPosition() queries the render position directly from
    audio HAL.
    
    - disable APIs not applicable to offloaded tracks
    
    - Modified track restoring behavior for invalidated
    offloaded tracks: just send the callback and wait for
    upper layers to create a new track.
    
    - Added wait for stream end management in audio track client
    proxy. Similar to obtainBuffer and should be factored in.
    
    Change-Id: I0fc48117946364cb255afd653195498891f622bd
    Signed-off-by: Eric Laurent <elaurent@google.com>
    AudioFlinger: offload playback, non-blocking write
    
    - Added specialized playback thread class for offload playback,
    derived from directoutput thread.
    This thread type handles specific state transitions for offloaded
    tracks and offloading commands (pause/resume/drain/flush..) to audio HAL.
    As opposed to other threads, does not go to standby if the track is paused.
    
    - Added support for asynchronous write and drain operations at audio HAL.
    Use a thread to handle async callback events from HAL: this avoids locking
    playback thread mutex when executing the callback and cause deadlocks when
    calling audio HAL functions with the playback thread mutex locked.
    
    - Better accouting for track activity: call start/stop and release Output
    methods in audio policy manager when tracks are actually added and removed
    from the active tracks list.
    Added a command thread in audio policy service to handle stop/release commands
    asynchronously and avoid deadlocks with playback thread.
    
    - Track terminated status is not a state anymore. This condition is othogonal
    to state to permitted state transitions while terminated.
    
    Change-Id: Id157f4b3277620568d8eace7535d9186602564de
    AudioTrackShared cleanup
    
    Maintain unreleased frame count on client side also (was already there on server side).
    Assertion failure instead of BAD_VALUE status for incorrect usage of APIs.
    Clean up error handling code.
    
    Change-Id: I23ca2f6f8a7c18645309ee5d64fbc844429bcba8
    Public API changes for audio offload support.
    
    NOTE: this does _not_ include all private member variables added
    to classes as part of offload support. Only public/protected functions
    and stubs functions/variables needed to make the changes buildable.
    
    - isOffloadSupported() added to audio policy service
        A stub implementation is required to build, this always returns false
    - setParameters() added to IAudioTrack
        A stub implementation is required to build, this always returns
        INVALID_OPERATION
    
    - CBlk flag for stream end
    
    - Change AudioSystem::getRenderPosition() to take an audio_output_t
        so caller can specify which output to query
    
    - Add AudioSystem::isOffloadSupported()
        This is fully implemented down to the AudioFlinger function
        AudioPolicyServer::isOffloadSupported() which is just a stub
        that always returns false.
    
    - Add EVENT_STREAM_END to AudioTrack interface.
        STREAM_END is used to signal when the hardware has actually finished
        playing all the data it was sent.
    
    - Add event type enumeration to media player interface AudioSink callbacks
        so that the same callback can be used to handle multiple types of
        event. For offloaded tracks we also have to handle STREAM_END and
        TEAR_DOWN events
    
    - Pass audio_offload_info_t to various functions used for opening outputs,
        tracks and audio players. This passes additional information about the
        compressed stream down to the HAL when using offload.
        For publicly-available APIs this is an optional parameter (for some of
        the internal and low-level APIs around the HAL interface it is mandatory)
    
    - Add getParameters() and setParameters() API to AudioTrack
        Currently dummy implementations.
    
    - Change AudioPlayer contructor so that it takes a set of bitflags defining what
        options are required. This replaces the original bool which only specified
        whether to use deep buffering.
    
    - Changes to StageFright class definition related to handling tearing-down of
        an offloaded track when we need to switch back to software decode
    
    - Define new StageFright utility functions used for offloaded tracks
        Currently dummy implementations.
    
    - AudioFlinger changes to use extended audio_config_t.
        Fills in audio_offload_info_t member if this info is passed in when
        opening an output.
    
    - libvideoeditor changes required to add the new event type parameter
        to AudioSink callback functions
    
    - libmediaplayerservice changes required to add the new event type parameter
        to AudioSink callback functions
    
    Change-Id: I3ab41138aa1083d81fe83b886a9b1021ec7320f1
    Signed-off-by: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
    Signed-off-by: Eric Laurent <elaurent@google.com>
    Use mFutex as an event flag rather than semaphore
    
    An event flag can be more fault-tolerant in case of loss of synchronization,
    as it cannot overflow.  It also allows more bits to be used in the future.
    See http://en.wikipedia.org/wiki/Event_flag
    
    Change-Id: I01ca25d951eb263124da54bb4738f0d94ec4a48b
    New control block for AudioTrack and AudioRecord
    
    Main differences between old and new control block:
     - removes the mutex, which was a potential source of priority inversion
     - circular indices into shared buffer, which is now always a power-of-2 size
    
    Change-Id: I4e9b7fa99858b488ac98a441fa70e31dbba1b865
    Start isolating control block accesses in a proxy
    
    The proxy object will eventually be the only code that understands the
    details of the control block.  This should make it easier to change the
    control block in the future.
    
    Initial set of control block fields that are isolated:
     - sample rate
     - send level
     - volume
    
    Prepare for streaming/static separation by adding a union to the control
    block for the new fields.
    
    Fix bug in handling of max sample rate on a track.  It was only checking
    at re-configuration, not at each mix.
    
    Simplify OutputTrack::obtainBuffer.
    
    Change-Id: I2249f9d04f73a911a922ad1d7f6197292c74cd92
    Start isolating control block accesses in a proxy
    
    The proxy object will eventually be the only code that understands the
    details of the control block.  This should make it easier to change the
    control block in the future.
    
    Initial set of control block fields that are isolated:
     - sample rate
     - send level
     - volume
    
    Prepare for streaming/static separation by adding a union to the control
    block for the new fields.
    
    Fix bug in handling of max sample rate on a track.  It was only checking
    at re-configuration, not at each mix.
    
    Simplify OutputTrack::obtainBuffer.
    
    Change-Id: I2249f9d04f73a911a922ad1d7f6197292c74cd92
    Don't use control block frame count after create
    
    This is part of a series to clean up the control block.
    
    Change-Id: I7f4cb05aef63053f8e2ab05b286d302260ef4758
    Don't use control block frame count after create
    
    This is part of a series to clean up the control block.
    
    Change-Id: I7f4cb05aef63053f8e2ab05b286d302260ef4758
    Update audio comments
    
    Change-Id: I85d7d2f6381b251db5695202fec75128883a8662
    Update audio comments
    
    Change-Id: I85d7d2f6381b251db5695202fec75128883a8662
    Simplify AudioRecord::restoreTrack_l()
    
    Finish removing CBLK_RESTORING and CBLK_RESTORED from control block flags,
    and remove constant RESTORE_TIMEOUT_MS.
    
    Also minor cleanup:
     - Cache mCblk in local variable cblk and make cblk allocatable in a register.
     - Use "iMem" for sp<IMemory>.
     - Add missing error log to AudioRecord; it was already in AudioTrack.
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ia5f5ab4763c392bc06a45851b167ddaee29e3455
    Simplify AudioRecord::restoreTrack_l()
    
    Finish removing CBLK_RESTORING and CBLK_RESTORED from control block flags,
    and remove constant RESTORE_TIMEOUT_MS.
    
    Also minor cleanup:
     - Cache mCblk in local variable cblk and make cblk allocatable in a register.
     - Use "iMem" for sp<IMemory>.
     - Add missing error log to AudioRecord; it was already in AudioTrack.
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ia5f5ab4763c392bc06a45851b167ddaee29e3455
    Move frame size out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ifab1c42ac0f8be704e571b292713cd2250d12a3f
    Move frame size out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ifab1c42ac0f8be704e571b292713cd2250d12a3f
    Move buffers pointer out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ie474557db7cb360f2d9a0f11600a68f5a3d46f07
    Move buffers pointer out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ie474557db7cb360f2d9a0f11600a68f5a3d46f07
    Simplify AudioTrack::restoreTrack_l()
    
    Remove CBLK_RESTORING and CBLK_RESTORED from control block flags,
    for AudioTrack only.  They are still used by AudioRecord.
    
    This is part of a series to clean up the control block.
    
    Change-Id: Iae4798f5b527c492bdaf789987ff3a1dadd0cb37
    Simplify AudioTrack::restoreTrack_l()
    
    Remove CBLK_RESTORING and CBLK_RESTORED from control block flags,
    for AudioTrack only.  They are still used by AudioRecord.
    
    This is part of a series to clean up the control block.
    
    Change-Id: Iae4798f5b527c492bdaf789987ff3a1dadd0cb37
    Remove CBLK_DIRECTION from control block flags
    
    This is part of a series to clean up the control block.
    
    Change-Id: I0265fece3247356b585d4d48fbda6f37aea8a851
    Remove CBLK_DIRECTION from control block flags
    
    This is part of a series to clean up the control block.
    
    Change-Id: I0265fece3247356b585d4d48fbda6f37aea8a851
    Remove CBLK_FAST from control block flags
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ic881a3560d9547cb63fcc0cefec87aa3da480e0d
    Remove CBLK_FAST from control block flags
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ic881a3560d9547cb63fcc0cefec87aa3da480e0d
    Simplify control block flag names
    
    Use only one symbol per flag
    
    Change-Id: Ia3582e2134abd60c896d11337face65383e79c7c
    Simplify control block flag names
    
    Use only one symbol per flag
    
    Change-Id: Ia3582e2134abd60c896d11337face65383e79c7c
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Log track name on obtain/releaseBuffer warnings
    
    This should help diagnose problems by allowing us to correlate
    the logs with the dumpsys media.audio_flinger output.
    
    Change-Id: I8c7c592b4f87d13b0f29c66ce7a2f301a0f063c9
    Configure policy of mediaserver threads
    
    Change-Id: Ifd825590ba36996064a458f64453a94b84722cb0
    Update comments
    
    We no longer put the filename at start of file.
    
    Change-Id: Ic435b159a23105681e3d4a6cb1ac097bc853302e
    Don't double destruct audio_track_cblk_t
    
    Fortunately audio_track_cblk_t doesn't have a destructor, but for clarity
    remove the double destruction.
    
    Also add warning not to add any virtuals to audio_track_cblk_t.
    
    Change-Id: I70ebe1a70460c7002145b2cdf10f9f137396e6f3
    Make AudioTrack control block volume field private
    
    This is part of the process of abstracting the control block
    to make it easier to maintain.
    
    Change-Id: Idb8f461e68dab3bcf268159cc0781651c6fb7094
    Track volume cleanup
    
    Always read and write track volumes atomically. In most places this was
    already being done, but there were a couple places where the left and
    right channels were read independently.
    
    Changed constant MAX_GAIN_INT to be a uint32_t instead of a float.
    It is always used as a uint32_t in comparisons and assignments.
    Use MAX_GAIN_INT in more places.
    
    Now that volume is always accessed atomically, removed the union
    and alias for uint16_t volume[2], and kept only volumeLR.
    
    Removed volatile as it's meaningless.
    
    In AudioFlinger, clamp the track volumes read from shared memory
    before applying master and stream volume.
    
    Change-Id: If65e2b27e5bc3db5bf75540479843041b58433f0
    AudioTrack and AudioFlinger send level cleanup
    
    Add an API to control block for getting/setting send level.
    This allow us to make the mSendLevel field private.
    
    Document the lack of barriers.
    
    Use 0.0f to initialize floating-point values (for doc only).
    
    Change-Id: I59f83b00adeb89eeee227e7648625d9a835be7a4
    Use size_t for frame size
    
    except in the control block, where we don't have room.
    
    In AudioFlinger::ThreadBase::TrackBase::getBuffer,
    read the frame size from control block only once.
    
    Change-Id: Id6c4bccd4ed3e07d91df6bbea43bae45524f9f4e
    Audio C++ comments
    
    Change-Id: I84906ebb9dfcfa5b96b287d18364b407f02a30c1
    Remove unnecessary level of priority indirection
    
    Change-Id: I942d43973c20a7ace8b0d3f78b4da97e45e996c6
    Use channel mask instead of channel count for track creation
    
    Record and playback objects (resp AudioRecord and AudioTrack)
    are created using a channel mask, but this information is lost
    in the mixer because only the channel count is known to
    AudioFlinger. A channel count can always be derived from a
    channel mask.
    
    The change consists in:
    - disambiguiting variable names for channel masks and counts
    - passing the mask information from the client to AudioFlinger
     and the mixer.
    - when using the DIRECT ouput, only verifying the format of
     the track is compatible with the output's for PCM.
    
    Change-Id: I50d87bfb7d7afcabdf5f12d4ab75ef3a54132c0e
    New fix for issue 4111672: control block flags
    
    The first fix (commit 913af0b4) is problematic because it makes threads
    in mediaserver process block on the cblk mutex. This is not permitted
    as it can cause audio to skip or worse have a malicious application
    prevent all audio playback by keeping the mutex locked.
    
    The fix consists in using atomic operations when modifying the control
    block flags.
    
    Also fixed audio_track_cblk_t::framesReady() so that it doesn't block
    when called from AudioFlinger (only applies when a loop is active).
    
    Change-Id: Ibf0abb562ced3e9f64118afdd5036854bb959428
    Fix issue 3439872: video chat and bluetooth SCO
    
    This change fixes the stability problems experienced when using
    a bluetooth headset supporting both A2DP and SCO. Problems occur
    when starting the video chat at which time the A2DP output is being
    stopped to start SCO. At that time, active AudioTracks are invalidated
    by AudioFlinger so that a new AudioTrack binder interface can be
    recreated by the client process on the new mixer thread with correct parameters.
    The problem was that the process to restore the binder interface was not
    protected against concurrent requests which caused 2 binder interfaces
    to be created sometimes. This could lead to permanent client deadlock
    if one of the client threads was waiting for a condition of the first
    created binder interface while the second one was created (as the AudioFlinger
    would only signal conditions on the last one created).
    This concurrent request situation is more likely to happen when a client
    uses the JAVA AudioTrack as the JNI implementation uses simultaneously the
    native AudioTrack callback and write push mechanisms. By doing so, the code
    that checks if the binder interface should be restored (in obtainBuffer()) is
    much more likely to be called concurrently from two different threads.
    
    The fix consists in protecting the critical binder interface restore phase
    with a flag in the AudioTrack control block. The first thread acting upon the binder
    interface restore request will raise the flag and the second thread will just wait for
    a condition to be signaled when the restore process is complete.
    
    Also protected all accesses to the AudioTrack control block by a mutex to prevent
    access while the track is being destroyed and restored. If a mutex cannot be held
    (e.g because we call a callback function), acquire a strong reference on the IAudioTrack
    to prevent its destruction while the cblk is being accessed.
    
    Modified AudioTrack JNI to use GetByteArrayElements() instead of
    GetPrimitiveArrayCritical() when writing audio buffers. Entering a critical section would
    cause the JNI to abort if a mediaserver crash occurs during a write due to the AudioSystem
    callback being called during the critical section when media server process restarts.
    Anyway with current JNI implementation, either versions do not copy data most of the times
    and the criticial version does not guaranty no data copy.
    
    The same modifications have been made to AudioRecord.
    
    Change-Id: Idc5aa711a04c3eee180cdd03f44fe17f3c4dcb52
    Issue 3032913: improve AudioTrack recovery time
    
    This issue showed that when an AudioTrack underruns during a too long period
    of time and is therefore disabled by audioflinger mixer, it takes an additional
    delay of up to 3 seconds to recover.
    This fix adds a simple mechanism to recover immediately when the client application
    is ready to write data again in the AudioTrack buffer
    
    Also throttle warnings on record overflows
    
    Change-Id: I8b2c71578dd134b9e60a15ee4d91b70f3799cb3d
    Issue 2667801: [Audio Effect Framework] AudioFlinger, AudioMixer AudioTrack modifications.
    
    First drop of audio framework modifications for audio effects support.
    
    - AudioTrack/AudioRecord:
    Added support for auxiliary effects in AudioTrack
    Added support for audio sessions
    Fixed left right channel inversion in setVolume()
    
    - IAudioFlinger:
    Added interface methods for effect enumeraiton and instantiation
    Added support for audio sessions.
    
    - IAudioTrack:
    Added method to attach auxiliary effect.
    
    - AudioFlinger
    Created new classes to control effect engines in effect library and manage effect connections to tracks or
    output mix:
      EffectModule: wrapper object controlling the effect engine implementation in the effect library. There
            is one EffectModule per instance of an effect in a given audio session
      EffectChain: group of effects associated to one audio session. There is one EffectChain per audio session.
            EffectChain for session 0 is for output mix effects, other chains are attached to audio tracks
            with same session ID. Each chain contains a variable number of EffectModules
      EffectHandle: implements the IEffect interface. There is one EffectHandle object for each application
            controlling (or using) an effect module. THe EffectModule maintians a list of EffectHandles.
    
    Added support for effect modules and effect chains creation in PlaybackThread.
    modified mixer thread loop to allow track volume control by effect modules and call effect processing.
    
    -AudioMixer
    Each track now specifies its output buffer used by mixer for accumulation
    Modified mixer process functions to process tracks by groups of tracks with same buffer
    Modified track process functions to support accumulation to auxiliary channel
    
    Change-Id: I26d5f7c9e070a89bdd383e1a659f8b7ca150379c
    Fix issue 2553359: Pandora does not work well with Passion deskdock / Cardock.
    
    The problem is due to a too big difference between the buffer size used at the hardware interface and at the A2DP interface.
    When no resampling occurs we don't notice problems but the timing is very tight. As soon as resampling is activated, the AudioTrack underruns.
    This is because the AudioTrack buffers are not resized when moving the AudioTrack from hardware to A2DP output.
    The AudioTrack buffers are calculated based on a hardware output buffer size of 3072 bytes. Which is much less than the A2DP output buffer size (10240).
    
    The solution consists in creating new tracks with new buffers in AudioFlinger when the A2DP output is opened
    instead of just transfering active tracks from hardware output mixer thread to the new A2DP output mixer thread.
    To avoid synchronization issues between mixer threads and client processes, this is done by invalidating tracks
    by setting a flag in their control block and having AudioTrack release the handle on this track (IAudioTrack)
    and create a new IAudioTrack when this flag is detected next time obtainBuffer() or start() is executed.
    
    AudioFlinger modifications:
    - invalidate the tracks when setStreamOutput() is called
    - make sure that notifications of output opening/closing and change of stream type to output mapping are sent synchronously to client process.
    This is necessary so that AudioSystem has the new stream to output mapping when the AudioTrack detects the invalidate flag in the client process.
    Previously their were sent when the corresponding thread loop was executed.
    
    AudioTrack modifications:
    - move frame count calculation and verification from set() to createTrack() so that is is updated every time a new IAudioTrack is created.
    - detect track invalidate flag in obtainBuffer() and start() and create a new IAudioTrack.
    
    AudioTrackShared modifications
    - group all flags (out, flowControlFlag, forceReady...) into a single bit filed to save space.
    
    Change-Id: I9ac26b6192230627d35084e1449640caaf7d56ee
    AudioFlinger: rename variables to clarify reference to track channel count or channel mask
    
    Some variables and structure members should be renamed to reflect the fact that they contain the
    number of channels in a track (channel count) or the actual channels used by a track (channel mask).
    Especially member "channels" of track control block (struct audio_track_cblk_t) is actually the
    number of channels (channels count).
    
    Change-Id: I220c8dede9fc00c8a5693389e790073b6ed307b8
    eclair snapshot
    Fix issue 1795088       Improve audio routing code
    
    Initial commit for review.
    Integrated comments after patch set 1 review.
    Fixed lockup in AudioFlinger::ThreadBase::exit()
    Fixed lockup when playing tone with AudioPlocyService startTone()
    donut snapshot
    Fix issue 1743700: AudioTrack: setPlaybackRate can not set the playback rate to twice of the ouputSR
    
    Store sample rate on 32 bits instead of 16 bits in audio_track_cblk_t.
    Removed sampleRate() methods from AudioTrack and AudioRecord: replaced by getSampleRate().
    AudioTrack::setSampleRate() no returns a status.
    auto import from //branches/cupcake_rel/...@140373
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@127101
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Initialize and copy mRotationAngle in VideoFrame
    
    When thumbnails were generated they could be generated at random
    angles as the mRotationAngle variable was not initialized to any
    value. This variable would have to be explicitly overwritten to not
    cause random rotation. Changed the implementation to initialize the
    value to 0 (no rotation). mRotationAngle was also missing in the
    copy constructor.
    
    Change-Id: I67a5340fdd807c6ab3a3da5eecb09b5b9d5f4666
    Initialize and copy mRotationAngle in VideoFrame
    
    When thumbnails were generated they could be generated at random
    angles as the mRotationAngle variable was not initialized to any
    value. This variable would have to be explicitly overwritten to not
    cause random rotation. Changed the implementation to initialize the
    value to 0 (no rotation). mRotationAngle was also missing in the
    copy constructor.
    
    Change-Id: I67a5340fdd807c6ab3a3da5eecb09b5b9d5f4666
    Whitespace and indentation
    
    Fix indentation to be multiple of 4.
    Make it easier to search:
      sp< not sp < to
      "switch (...)" instead of "switch(...)" (also "if" and "while")
    Remove redundant blank line at start or EOF.
    Remove whitespace at end of line.
    Remove extra blank lines where they don't add value.
    
    Use git diff -b or -w to verify.
    
    Change-Id: I966b7ba852faa5474be6907fb212f5e267c2874e
    Support extracting thumbnail from rotated video tracks
    
    Change-Id: Ife0a2536aaac5ff1efdf1035b9d2c892773ee16c
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Issue 2667801: [Audio Effect Framework] AudioFlinger, AudioMixer AudioTrack modifications.
    
    First drop of audio framework modifications for audio effects support.
    
    - AudioTrack/AudioRecord:
    Added support for auxiliary effects in AudioTrack
    Added support for audio sessions
    Fixed left right channel inversion in setVolume()
    
    - IAudioFlinger:
    Added interface methods for effect enumeraiton and instantiation
    Added support for audio sessions.
    
    - IAudioTrack:
    Added method to attach auxiliary effect.
    
    - AudioFlinger
    Created new classes to control effect engines in effect library and manage effect connections to tracks or
    output mix:
      EffectModule: wrapper object controlling the effect engine implementation in the effect library. There
            is one EffectModule per instance of an effect in a given audio session
      EffectChain: group of effects associated to one audio session. There is one EffectChain per audio session.
            EffectChain for session 0 is for output mix effects, other chains are attached to audio tracks
            with same session ID. Each chain contains a variable number of EffectModules
      EffectHandle: implements the IEffect interface. There is one EffectHandle object for each application
            controlling (or using) an effect module. THe EffectModule maintians a list of EffectHandles.
    
    Added support for effect modules and effect chains creation in PlaybackThread.
    modified mixer thread loop to allow track volume control by effect modules and call effect processing.
    
    -AudioMixer
    Each track now specifies its output buffer used by mixer for accumulation
    Modified mixer process functions to process tracks by groups of tracks with same buffer
    Modified track process functions to support accumulation to auxiliary channel
    
    Change-Id: I26d5f7c9e070a89bdd383e1a659f8b7ca150379c
    Make MediaScanner skip certain directories
    
    The list of directories to skip are configurable via setprop.
    The main motivation is that some test data folder takes long time
    to scan, and media scanner may compete for CPU time against perf
    tests therefore skewing the results.
    
    Bug: 5263115
    Change-Id: I568213e2a4babf6033021c1d336ef0347c0e3315
    Untangle MediaScanner error handling.
    Bug: 5056917
    
    Change-Id: I1a7a73579e3ba4e9709459329fc1901a28b0f4b1
    DO NOT MERGE MediaScanner: reimplement the ".nomedia" feature for hiding files from the media provider
    
    Previously we ignored any files and directories that had name started with '.'
    and ignored any directories that contained a ".nomedia" file.
    Now to support transferring any file via MTP, we now add these previously ignored files
    to the media database, but will not mark them as audio, video, image or playlist files.
    That way they will be included in the files table but will be hidden from the
    audio, video, images and playlist views that are used by apps like Music and Gallery.
    
    Bug: 3405327
    
    Change-Id: Ib707f329be98878501952b6054998518a6eabbbd
    Signed-off-by: Mike Lockwood <lockwood@android.com>
    DO NOT MERGE MediaScanner: reimplement the ".nomedia" feature for hiding files from the media provider
    
    Previously we ignored any files and directories that had name started with '.'
    and ignored any directories that contained a ".nomedia" file.
    Now to support transferring any file via MTP, we now add these previously ignored files
    to the media database, but will not mark them as audio, video, image or playlist files.
    That way they will be included in the files table but will be hidden from the
    audio, video, images and playlist views that are used by apps like Music and Gallery.
    
    Bug: 3405327
    
    Change-Id: Ibb37bb2856a0684ce9f685ed565ad35347622834
    Signed-off-by: Mike Lockwood <lockwood@android.com>
    MediaScanner: reimplement the ".nomedia" feature for hiding files from the media provider
    
    Previously we ignored any files and directories that had name started with '.'
    and ignored any directories that contained a ".nomedia" file.
    Now to support transferring any file via MTP, we now add these previously ignored files
    to the media database, but will not mark them as audio, video, image or playlist files.
    That way they will be included in the files table but will be hidden from the
    audio, video, images and playlist views that are used by apps like Music and Gallery.
    
    Bug: 3405327
    
    Change-Id: I2d7285bd32e06c1a5c4ef6a8a15f8f8b2c33b39b
    Signed-off-by: Mike Lockwood <lockwood@android.com>
    MediaScanner: Add support for scanning empty directories
    
    Currently the media scanner does not create database entries for directories
    unless they contain a file that is scanned.
    Fixing this so we provide a consistent view of the world to MTP.
    
    Change-Id: Ia776acfeae23192183e7192d63cdc34d830ea889
    Signed-off-by: Mike Lockwood <lockwood@android.com>
    Media scanner support for tracking files of arbitrary type.
    
    The native media scanner no longer filters files based on file extension.
    Audio, video, image and playlist files are handled as before, but non-media
    files are now inserted into the "files" table, which was originally added
    to support MTP.
    
    Change-Id: I9053218fb6d2671a3bb181405c34442b94678afc
    Signed-off-by: Mike Lockwood <lockwood@android.com>
    Refactor MediaScanner. Some steps on the way towards being able to build the tree without OpenCore.
    eclair snapshot
    When encountering a .nomedia file, notify the MediaScannerClient,
    so that it can erase the data column for entries that are in the
    folder containing the .nomedia file. This prevents us from
    deleting (via a delete trigger) files when somebody adds a
    .nomedia file after the fact.
    get rid of utils.h
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Whitespace and indentation
    
    Fix indentation to be multiple of 4.
    Make it easier to search:
      sp< not sp < to
      "switch (...)" instead of "switch(...)" (also "if" and "while")
    Remove redundant blank line at start or EOF.
    Remove whitespace at end of line.
    Remove extra blank lines where they don't add value.
    
    Use git diff -b or -w to verify.
    
    Change-Id: I966b7ba852faa5474be6907fb212f5e267c2874e
    Fix for issue  5309336
    -add videoeditor maximum prefetch YUV frames in media_profiles.xml to limit the total memory usage.
    
    Change-Id: I41ffbc192fcce4c7635e5b0a1f2835852e5ee509
    Add QVGA resolution to CamcorderProfile
    
    Change-Id: Icebbafb68d8164370f98a2c36699845d10ef081b
    related-to-bug: 5145483
    Add QVGA resolution to CamcorderProfile
    
    Change-Id: Icebbafb68d8164370f98a2c36699845d10ef081b
    related-to-bug: 5145483
    Fix for 4142219 Don't hard code platform-specific limitations (Jni/ Java)
    
    Also fixes 5118207 add other video codec support for video editor export.
    
    Change-Id: If72427173bd8ff684af07ba00f4425c1deef29c6
    fix for issue  4142219
    Don't hard code platform-specific limitations-jni/java part
    
    Change-Id: Icde261b1caf29a8cf552884c97f3c9d0b41741a3
    Add support for platform-specific recording start time offset
    
    o This start time offset is used in the media framework to eliminate
      the recording sound in the recorded file.
    
    Change-Id: I97926a74f0743b8a4f985d51334e8d1486a318ea
    related-to-bug: 4390777
    Get rid of redundant media profiles
    
    bug - 3330679
    
    Change-Id: Idc55aea32746c0c57552c5e15a289681421aa859
    Adding default profiles for specific levels.
    
    The low and high profiles should each match one of the
    specific profiles. So we need to add the specific profiles
    corresponding to the low/high profiles. This makes the
    default profile compliant to documentation + cts.
    
    Also fixed javadoc to account time lapse profiles.
    
    Change-Id: I34e7307d00ce261c69dc10ead2900025c7f6d428
    Exposing specific profile levels + hasProfile().
    
    - Exposing the specific resolution profile levels
      QUALITY_{QCIF,CIF,480P,720P,1080P} and the new time lapse profiles
      QUALITY_TIME_LAPSE_{LOW,HIGH,QCIF,CIF,480P,720P,1080P}
    - Unhiding the hasProfile() function used to test if a given profile exists.
    
    Change-Id: I5d8b9e1ba61718f304235e76d85244e428e68643
    Adding hasProfile.
    
    - Added hasProfile to CamcorderProfile and JNI.
    - Added hasCamcorderProfile to MediaProfiles.
    - using android.hardware.Camera.CAMERA_ID_DEFAULT for default camera
      in get().
    
    Change-Id: Ib57bb49ae79492d7cbc0ec6c7b6efcbf74f80013
    Added specific resolution and time lapse profiles.
    
    - Added enums QUALITY_{QCIF,480P,720P,1080P}
      QUALITY_TIME_LAPSE_{LOW,HIGH,QCIF,480P,720P,1080P} in CamcorderProfile
      and corresponding ones in MediaProfiles.
    - Added functions createDefaultCamcorderTimeLapseLowProfile,
      createDefaultCamcorderTimeLapseHighProfile to set default values.
    - Moved javadoc for constants to the get() function.
    
    Change-Id: Ib8b3f8d29395dff77a397d1e6b44cfaf8c481d4d
    Add multiple camera support for in MediaProfiles.
    
    Change-Id: Ie89568a0f5f5fd08ede77e33f9a559215d6bed9a
    Public API changes for CameraProfile and CamcorderProfile classes
    
    1. CamcorderProfile: “@see” links are broken; Remove m prefix from fields; remove “final”
    2. CamcorderProfile.Quality: use an int rather than an enum
    3. Add API on MediaRecorder to pass in a CamcorderProfile
    4. CameraProfile.getImageEncodingQualityLevels @hide or make it consistent with CamcorderProfile
    5. Remove a convenient method and instead let the (mms) app do that task
    
    bug - 2553862
    
    Change-Id: I759215c7892f772aeddf3651d17038489c6fbc50
    Image encoding settings java API through xml configuration file
    
    - I decided to completely remove jpeg decoding related stuff from this change
      I think that setting is better off if it is specified by the system properties.
      We don't have to include MediaProfiles.h header in skia files
    Camcorder profile Java API support
    - Use Enum for Quality instead of int
    - Use static values() method from Enum, rather than if-else
    
    bug - 2417312
    Initial check-in for xml-based encoder capabilities retrieval
    - Changed the Java API as suggested
    - Treat /etc/media_profiles.xml as the default xml configurtion file
    Media server death nodification
    Moved audio record source files from libhybris source tree to here to fix compile issues on other architectures
    
    Change-Id: Ifd962837cbb82c55ad7af1c313f03c1848936965
    Signed-off-by: Jim Hodapp <jim.hodapp@canonical.com>
    Allows MediaMetadataRetriever to retrieve video rotation angle
    
    o related-to-bug: 6872687
    
    Change-Id: I34e74b0756f8269edefdf3a25d8806c76fd1e2f8
    Add support for retrieving location information in mp4/3gpp files
    
    Change-Id: Ib8427704ef9ee5a4fa8fe1818c8a62d77b4ea687
    related-to-bug: 5560253
    - Retrieve is_drm in MediaMetadataRetriever.
    - Add one more column in MediaStore to indicate whether a
      media file is drm-protected.
    - Remove old DRM code from Ringtone
    - Use the new DRM code in RingtoneManager
    
    Change-Id: I1311fd1c04841c2cd47df6c901589966cf55a692
    Initial CL for the timed text support:
    - Add support for MP4 timed text
    - Add API for app to turn on/off a text track
    - Add timed text metadata(language) in the MediaMetadataRetriever
    
    Change-Id: I0055beba38ac761627dbcc6d581ae9582d68bb94
    Support passing headers to MediaMetadataRetriever's setDataSource API
    
    Change-Id: Ib1a5c08fc5034cac05034db27007a35c9b660b26
    related-to-bug: 3506316
    Added more metadata published by the MediaMetaDataRetriever
    
    - presence of audio/video content
    - video dimensions
    - avg. bitrate
    
    Change-Id: Ie6d478a3c2d0bb6bebaea99ac0a20a4c17808934
    related-to-bug: 3506316
    Squash commits of the following patches, cherry-picked from other branch - do not merge.
    
    o Prepare for publishing MediaMetadataRetriever as public API
      step one:
      o replaced captureFrame with getFrameAtTime
      o removed getMode
    
    o Replace MediaMetadataRetriever.captureFrame() with MediaMetadataRetriever.getFrameAtTime()
      as part of the preparation for publishing MediaMetadataRetriever as public Java API
    
    o Remove captureFrame from MediaMetadataRetriever.java class
      It has been replaced by getFrameAtTime() method
    
    o Replace extractAlbumArt() with getEmbeddedPicture() in MediaMetadataRetriever.java
    
    o Publish MediaMetadataRetriever.java as public API
      o Removed setMode() methods and related mode constants
      o Removed some of the unused the metadata keys
      o Updated the javadoc
      o part of a multi-project change.
    
    bug - 3309041
    
    Change-Id: I2efb6e8b8d52897186b016cb4efda6862f5584c4
    Publish MediaMetadataRetriever.java as public API
    
    o Removed setMode() methods and related mode constants
    o Removed some of the unused the metadata keys
    o Updated the javadoc
    
    o part of a multi-project change.
    
    bug - 2433195
    
    Change-Id: I5ed167f1fd6a53cb143b7dc385b149431d434438
    Add support for the "compilation" tag in mp3, mp4 and ogg, and also add
    support for two common ways of specifying album artist in ogg files.
    b/3311831
    
    (cherry-picked from GB because of weird automerger failure)
    
    Change-Id: Ibf12a3d6bc8bbc2ac5ea815de6b33414b8f53f0f
    Add support for the "compilation" tag in mp3, mp4 and ogg, and also add
    support for two common ways of specifying album artist in ogg files.
    b/3311831
    
    Change-Id: Iba1152013b7577168af71f947d7249560419fa05
    Prepare for publishing MediaMetadataRetriever as public API
    
    step one:
    o replaced captureFrame with getFrameAtTime
    o removed getMode
    
    bug - 2433195
    
    Change-Id: I38a8cecef29014692f0b08b8818326e3ebb40a12
    Fix the media metadata retriever (tests). The native constants must match those published at the java layer.
    
    Change-Id: Ic1efed709e4d93c61913b231a8cd3ef1074f8ca0
    Add support for "album artist" tag.
    Add support for the TPOS/TPA (disc number) id3 tag.
    Support for determining the mime type of media via metadata extraction.
    eclair snapshot
    Add basic metadata retrieval support for midi, ogg, etc.
    Bug 2050320
    DO NOT MERGE, ALready merged to master.
    1440173 [NJ-1331] MetaData utility parse the wrong m4a meta data. Changes to Java, application side.
    1440173 [NJ-1331] MetaData utility parse the wrong m4a meta data. Changes to Java, application side.
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Moved audio record source files from libhybris source tree to here to fix compile issues on other architectures
    
    Change-Id: Ifd962837cbb82c55ad7af1c313f03c1848936965
    Signed-off-by: Jim Hodapp <jim.hodapp@canonical.com>
    * Gut the use of AudioFlinger for recording and replace it with custom RecordThread, RecordTrack and RecordHandle implementations
    * Make sure addBatteryData is disabled so that MediaService isn't called
    * Disable AudioFlinger call to get number of frame lost
    * Audio recording works, also clean up the code to remove many of the unnecessary commented out AudioFlinger calls
    * Clean up code more, removed commented out lines of code that will never be used, added some comments
    
    Change-Id: I875bc90223369d9a5653c5aeeb2d49175f65e08b
    Signed-off-by: Jim Hodapp <jim.hodapp@canonical.com>
    Whitespace and indentation
    
    Fix indentation to be multiple of 4.
    Make it easier to search:
      sp< not sp < to
      "switch (...)" instead of "switch(...)" (also "if" and "while")
    Remove redundant blank line at start or EOF.
    Remove whitespace at end of line.
    Remove extra blank lines where they don't add value.
    
    Use git diff -b or -w to verify.
    
    Change-Id: I966b7ba852faa5474be6907fb212f5e267c2874e
    Separate MediaRecorderClient with MediaPlayerClient
    
    - An alternative would be to define a common base class that
      both MediaRecorderClient and MediaPlayerClient can derive.
      But since the common code, onTransact() and notify() uses
      some Binder code, having a common base class may not gain
      us too much in terms of code reuse.
    
    Change-Id: Ibc06720278ad173fceacff3d267b7060856c6316
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    [libstagefright] : camcorder pause-resume implementation
    
    - Added pause resume feature in camcorder app.so that
      user pause recording and resume later which results
      in a single recorded clip.
    CRs-Fixed: 587051
    
    Change-Id: Ib82a93009348d997a4b8343b8b417b433be4c9df
    
    (cherry picked from commit 1f348eb12a631bbe6c3288c797354da6d425e64d
    from CM repository, with some of manual code removal. You know,
    CM tree tends to have QCOM-specific code all around. - peat-psuwit)
    
    Conflicts:
            media/libmediaplayerservice/StagefrightRecorder.cpp
            media/libstagefright/AudioSource.cpp
            media/libstagefright/OMXCodec.cpp
    remove uses of Surface in favor or IGraphicBufferProducer
    
    Change-Id: I13d7a9553aa335bca790a3a59d389d7533c83d57
    remove uses of Surface in favor or IGraphicBufferProducer
    
    Change-Id: I13d7a9553aa335bca790a3a59d389d7533c83d57
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Connect MediaRecorder Native to SurfaceMediaSource
    
    Making a connection from MediaRecorder Native layer to the
    SurfaceMediaSource for the purpose of encoding GL Frames. This will be
    called from the java side inside the Mobile Filter Framework.
    
    The mediarecorder native layer (client), when set the videosource to
    option VIDEO_SOURCE_FRAMES, asks the StageFrightRecorder on the mediaserver
    side to create a SurfaceMediaSource object and pass it back as a
    sp<ISurfaceTexture> object. Using that, the client side will dequeue and
    queue buffers. Connecting the GL Frames to the obtained
    sp<ISurfaceTexture> is not part of this CL.
    
    Related to bug id: 4529323
    
    Change-Id: I651bec718dd5b935779e7d7a050b841c2d0b0fcd
    Add framework support for camcorder zoom.
    
    The purpose of ICameraRecordingProxy and ICameraRecordingProxyListener is to
    allow applications using the camera during recording.
    
    Camera service allows only one client at a time. Since camcorder application
    needs to own the camera to do things like zoom, the media recorder cannot
    access the camera directly during recording. So ICameraRecordingProxy is a proxy
    of ICamera, which allows the media recorder to start/stop the recording and
    release recording frames. ICameraRecordingProxyListener is an interface that
    allows the recorder to receive video frames during recording.
    
    ICameraRecordingProxy
      startRecording()
      stopRecording()
      releaseRecordingFrame()
    
    ICameraRecordingProxyListener
      dataCallbackTimestamp()
    
    The camcorder app opens the camera and starts the preview. The app passes
    ICamera and ICameraRecordingProxy to the media recorder by
    MediaRecorder::setCamera(). The recorder uses ICamera to setup the camera in
    MediaRecorder::start(). After setup, the recorder disconnects from camera
    service. The recorder calls ICameraRecordingProxy::startRecording() and
    passes a ICameraRecordingProxyListener to the app. The app connects back to
    camera service and starts the recording. The app owns the camera and can do
    things like zoom. The media recorder receives the video frames from the
    listener and releases them by ICameraRecordingProxy::releaseRecordingFrame.
    The recorder calls ICameraRecordingProxy::stopRecording() to stop the
    recording.
    
    The call sequences are as follows:
    1. The app: Camera.unlock().
    2. The app: MediaRecorder.setCamera().
    3. Start recording
       (1) The app: MediaRecorder.start().
       (2) The recorder: ICamera.unlock() and ICamera.disconnect().
       (3) The recorder: ICameraRecordingProxy.startRecording().
       (4) The app: ICamera.reconnect().
       (5) The app: ICamera.startRecording().
    4. During recording
       (1) The recorder: receive frames from ICameraRecordingProxyListener.dataCallbackTimestamp()
       (2) The recorder: release frames by ICameraRecordingProxy.releaseRecordingFrame().
    5. Stop recording
       (1) The app: MediaRecorder.stop()
       (2) The recorder: ICameraRecordingProxy.stopRecording().
       (3) The app: ICamera.stopRecording().
    
    bug:2644213
    
    Change-Id: I15269397defc25cbbcae16abc071c8349c123122
    update for new audio.h header location
    
    Change-Id: Ic4c62c4037800802427eb7d3c7f5eb8b25d18876
    Signed-off-by: Dima Zavin <dima@android.com>
    audio/media: convert to using the audio HAL and new audio defs
    
    Change-Id: Ibc637918637329e4f2b62f4ac7781102fbc269f5
    Signed-off-by: Dima Zavin <dima@android.com>
    Added setAuxiliaryOutputFile to MediaRecorder and JNI
    
    added setAuxiliaryOutputFile to allow setting of an auxiliary output file.
    Also added the JNI support.
    
    Change-Id: I8c3335192bd6f7fcbfdfc8552cfd0848f2ad2a5d
    Change the framework to use the new camera preview path.
    
    This change makes the camera HAL interface take an ANativeWindow interface from
    which all the camera preview buffers will be allocated.  The framework code
    running in application processes now passes a Surface object rather than an
    ISurface to the camera server via Binder when setting the preview surface.  The
    camera server then forwards that Surface object (which implements the
    ANativeWindow interface) to the camera HAL, which uses it to communicate with
    SurfaceFlinger to allocate the camera preview buffers.
    
    Change-Id: Ie438f721559cd7de5e4f848a26d96360dda07b5f
    Add runtime dumpsys support for media recorder client
    
    Change-Id: I4c8a81720f3be2db54678a7e84fe12849255046b
    Separate MediaRecorderClient with MediaPlayerClient
    
    - An alternative would be to define a common base class that
      both MediaRecorderClient and MediaPlayerClient can derive.
      But since the common code, onTransact() and notify() uses
      some Binder code, having a common base class may not gain
      us too much in terms of code reuse.
    
    Change-Id: Ibc06720278ad173fceacff3d267b7060856c6316
    Squashed commit of the following:
    
    commit 333057b355f8c260c549553b9a0634755c838b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 13 15:35:48 2009 -0800
    
        Some more tweaks to AVC encoding on sholes.
    
    commit 9981d0ee52ec5b8b0182aae733d1571e3ebb8390
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 12 16:36:57 2009 -0800
    
        Support for avc encoding, including sholes specific tweaks to pick the right colorspace for the camera to not require transcoding.
    
    commit 5ba0ebbbd4efca51f3ae1f60e2ca31e7d2cf136d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 11 09:50:03 2009 -0800
    
        Enable actual (camera) video-only recording using h.263 or mpeg4 encoding.
    
    commit 3fd59c3526a37fe7c696f4a978925d1831c09313
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 10 14:57:48 2009 -0800
    
        Allow switching between the PV recorder implementation and one supported by stagefright.
    
        This is controlled through the property "media.stagefright.enable-record".
    Moved audio record source files from libhybris source tree to here to fix compile issues on other architectures
    
    Change-Id: Ifd962837cbb82c55ad7af1c313f03c1848936965
    Signed-off-by: Jim Hodapp <jim.hodapp@canonical.com>
    Fix slow AudioTrack and AudioRecord destruction
    
    There were two causes for the slowness:
    
    When thread was paused, it used nanosleep and sleep.  These usually
    run to completion (except for POSIX signal, which we avoid because it
    is low-level).  Instead, replace the nanosleep and sleep by condition
    timed wait, as that can be made to return early by a condition signal.
    Another advantage of condition timed wait is that a condition wait was
    already being used at top of thread loop, so it is a simpler change.
    
    The AudioRecord destructor was missing a proxy interrupt that was correct
    in AudioTrack.  This proxy interrupt is needed in case another thread
    is blocked in proxy obtainBuffer.
    
    Does not address the 1 second polling for NS_WHENEVER.
    
    Bug: 10822765
    Change-Id: Id665994551e87e4d7da9c7b015f424fd7a0b5560
    Fix potential leak of audio input handle.
    
    The audio input handle is ultimately owned by the audio recorder
    object but it could be dropped on the floor if an error occurred
    before that object was fully initialized.
    
    Rearranged some of the argument validation and merged getInput_l
    with openRecord_l to simplify the code and prevent such a leak
    from occurring.
    
    Bug: 10265163
    Change-Id: I124dce344b1d11c2dd66ca5e2c9aec0c52c230e2
    AudioRecord notification frames
    
    Change-Id: I76ec536d1504eb9a558178b62bf225aace4b40d1
    AudioRecord::openRecord_l now take flags
    
    The new parameter 'flags' of type audio_input_flags_t will be used for
    requesting a fast track, but is currently ignored.
    
    Change-Id: If68dfda8b2d4eaaca42927d721b4630c47f71f3b
    AudioRecord::set and constructor now take flags
    
    The new optional parameter 'flags' of type audio_input_flags_t will be
    used for requesting a fast track.
    
    Change-Id: Ia7e070cb57c833e608352da354fb30dc26df6918
    AudioRecord callback thread waits for priority boost
    
    Change-Id: Iae38fa4ac20a45751566169213a08a15deb0a2f6
    Cleanup comments for the new control block implementation
    
    There was some obsolete and incomplete text left over
    after the new control block code was submitted.
    This cleans up all those comments to be accurate again.
    
    Change-Id: Ic52f5869cb723cde25d709514d6deea6aa6f20aa
    AudioRecord has no default sample rate
    
    Change-Id: I72feefdd6f3a623fd3669b80d4b264518fdc0929
    Make AudioRecord and AudioTrack comments more similar
    
    Change-Id: I122a7cf7bfc162090cb27f37c325db7a23985bc7
    Remove default channel mask in AudioRecord constructor and set()
    
    Change-Id: I22ad4ba8777842bf6705e79c6ad796fdb9a4104c
    AudioRecord must be used as sp<> only
    
    Bug: 9423855
    Change-Id: I78ba8228c60dff11fb466156bb632c5dda45cdaf
    New control block for AudioTrack and AudioRecord
    
    Main differences between old and new control block:
     - removes the mutex, which was a potential source of priority inversion
     - circular indices into shared buffer, which is now always a power-of-2 size
    
    Change-Id: I4e9b7fa99858b488ac98a441fa70e31dbba1b865
    Start isolating control block accesses in a proxy
    
    The proxy object will eventually be the only code that understands the
    details of the control block.  This should make it easier to change the
    control block in the future.
    
    Initial set of control block fields that are isolated:
     - sample rate
     - send level
     - volume
    
    Prepare for streaming/static separation by adding a union to the control
    block for the new fields.
    
    Fix bug in handling of max sample rate on a track.  It was only checking
    at re-configuration, not at each mix.
    
    Simplify OutputTrack::obtainBuffer.
    
    Change-Id: I2249f9d04f73a911a922ad1d7f6197292c74cd92
    Start isolating control block accesses in a proxy
    
    The proxy object will eventually be the only code that understands the
    details of the control block.  This should make it easier to change the
    control block in the future.
    
    Initial set of control block fields that are isolated:
     - sample rate
     - send level
     - volume
    
    Prepare for streaming/static separation by adding a union to the control
    block for the new fields.
    
    Fix bug in handling of max sample rate on a track.  It was only checking
    at re-configuration, not at each mix.
    
    Simplify OutputTrack::obtainBuffer.
    
    Change-Id: I2249f9d04f73a911a922ad1d7f6197292c74cd92
    Clean up channel count and channel mask
    
    Channel count is uint32_t.
    Remove redundant mask parameter to AudioTrack::createTrack_l()
        and AudioRecord::openRecord_l().
    
    Change-Id: I5dc2b18eb609b2c0dc3091994cbaa4628062c17f
    Clean up channel count and channel mask
    
    Channel count is uint32_t.
    Remove redundant mask parameter to AudioTrack::createTrack_l()
        and AudioRecord::openRecord_l().
    
    Change-Id: I5dc2b18eb609b2c0dc3091994cbaa4628062c17f
    Use size_t for frame counts
    
    Also fix typo: bufferCount should be frameCount.
    
    Change-Id: Ibed539504db75ef99dc21c8ff1bf2987122063a5
    Use size_t for frame counts
    
    Also fix typo: bufferCount should be frameCount.
    
    Change-Id: Ibed539504db75ef99dc21c8ff1bf2987122063a5
    Move frame size out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ifab1c42ac0f8be704e571b292713cd2250d12a3f
    Move frame size out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ifab1c42ac0f8be704e571b292713cd2250d12a3f
    Move buffers pointer out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ie474557db7cb360f2d9a0f11600a68f5a3d46f07
    Move buffers pointer out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ie474557db7cb360f2d9a0f11600a68f5a3d46f07
    Removed unused fields in AudioRecord::Buffer
    
    Change-Id: I89fc6d8f695b48516d956b0a9a4a43d408f369f9
    Removed unused fields in AudioRecord::Buffer
    
    Change-Id: I89fc6d8f695b48516d956b0a9a4a43d408f369f9
    AudioRecord comments
    
    Change-Id: Ibec910608948d778dc655d900255a80384e9b06f
    AudioRecord comments
    
    Change-Id: Ibec910608948d778dc655d900255a80384e9b06f
    AudioRecord locking
    
    Fix race conditions for EVENT_MARKER and EVENT_NEW_POS callbacks.
    Marker and new position update fields are protected by lock.
    
    getSampleRate() doesn't need a lock because it reads from shared memory
    control block.
    
    Enforce that the parameter passed with EVENT_MARKER and EVENT_NEW_POS
    cannot not be changed by the callback handler, and will not change during
    the call by another thread.
    
    Session ID should never change; log if it does.
    
    Change-Id: Ia2c63cf1a71b10bb06c37981bd76437f83fffa91
    AudioRecord::stop() return void
    
    like AudioTrack::stop()
    
    Change-Id: Iab62f4665151345f1ad5874c97a21d1a331f0154
    AudioRecord client threading cleanup
    
    Rename ClientRecordThread to AudioRecordThread to be more similar to
    AudioTrack naming.
    
    Only create the thread once, and use resume() and pause() for start()
    and stop().  This will allow us to have a known client callback thread
    tid that we can pass to AudioFlinger before start().
    
    mActive:
    Made mActive a bool not int.
    mActive is protected by mLock; volatile is meaningless.
    Fixed a few places where mActive was accessed without a lock:
     - stopped()
     - processAudioBuffer()
    These aren't used internally, so no need for _l() versions.
    
    Change-Id: I4b8a5c90f3a22d3894b344564cb1c5aef4f1fda2
    Remove dead code in libmedia
    
    Change-Id: I7d8201590cda29c9fa99662a4fdba222091febfe
    Use audio_channel_mask_t more consistently
    
    In IAudioFlinger::createTrack() and IAudioFlinger::openRecord(),
    declare input parameter to use correct type audio_channel_mask_t.
    
    In IAudioFlinger::getInputBufferSize(), input parameter is now channel mask
    instead of channel count.
    
    Remove unused IAudioFlinger::channelCount(audio_io_handle_t).
    
    In AudioRecord::getMinFrameCount() and AudioSystem::getInputBufferSize(),
    input parameter is channel mask instead of channel count.
    
    Change-Id: Ib2f1c29bea70f016b3cfce83942ba292190ac965
    AudioRecord comments
    
    Group the private fields according to how they are used
    
    Change-Id: I7ce3d0939510c10f34bd91a55f6e03afc8e7d43c
    Use audio_channel_mask_t in AudioRecord
    
    Change-Id: I9e1b918b2635d961604a4a9d88eb1c7179a167a7
    Remove unused AudioRecord::channels()
    
    It was declared but never implemented or called.
    
    Change-Id: If5846147fcbd7f6d4187971e2044dd6fd3252b42
    Include what you use
    
    Change-Id: I12ef9367d05dbe069c037b1b4acd6347a8cf3ece
    Remove AudioRecord record_flags
    
    Change-Id: I021ddcc1bcb63132a4597d13e3d09db2a5f2c628
    Use C APIs instead of C++ APIs for policy
    
    The C++ APIs are going away.
    
    Note: we use tid == 0 which is not supported yet by the C APIs,
    do not submit this until that is added.
    
    Change-Id: I0e90789e6c81c69f2544e899c52421ea5d1342be
    Made AudioRecord a subclasss of RefBase
    
    Made AudioRecord a subclass of RefBase to allow using strong
    references and solve concurrency issues.
    
    Issue 6254582.
    
    Change-Id: Ic1f3845958f477e8b2d23d3d25bf0f666addcb3b
    implemented synchronous audio capture
    
    Added the infrastructure to support the synchronization of playback and
    capture actions on specific events.
    The first requirement for this feature is to synchronize the audio capture
    start with the full rendering of a given audio content.
    The applications can further be extended to other use cases
    (synchronized playback start...) by adding new synchronization events and
    new synchronous control methods on player or recorders.
    
    Also added a method to query the audio session from a ToneGenerator.
    
    Change-Id: I51f1167290d9cafdf2fbcdf9e4785156973af44c
    IAudioFlinger::createTrack and openRecord flags
    
    createTrack and openRecord don't need the "old" flags parameter,
    which was either audio_policy_output_t or audio_in_acoustics_t
    shifted left by 16 bits.  But they do need "new" flags, which
    are defined by the application use case.  Initially, the only
    application use case flag is timed output, but others are planned.
    
    For output, the audio_policy_output_t flags are passed to
    AudioSystem::getOutput, which returns an audio_io_handle_t, and that
    handle is then passed to createTrack. So createTrack doesn't need the
    old flags parameter.
    
    For input, the audio_in_acoustics_t flags are passed to
    AudioSystem::getInput, which returns an audio_io_handle_t, and that
    handle is then passed to openRecord. So openRecord doesn't need the
    old flags parameter.
    
    Change-Id: I18a9870911846cca69d420c19fe6a9face2fe8c4
    Use AudioRecord::record_flags consistently
    
    Change-Id: I6f369a2b99eb515603bc7d5629a07db2b96783fe
    AudioRecord const methods
    
    Change-Id: Ifae4fd7820b650aaca2b13c8658c292db1c46c0f
    Fix typos and line length in AudioRecord comments
    
    Change-Id: I85cfb9a2b9b3ade098161aa7687b4d4f7eb226ea
    AudioRecord and AudioTrack client tid
    
    Inform AudioFlinger of the tid of the callback thread.
    
    Change-Id: I670df92dd06749b057238b48ed1094b13aab720b
    Use NULL not 0 for raw pointers
    
    Use if (p != NULL) instead of if (ptr)
    
    Change-Id: Iaec3413a59ccbf233c98fcd918cc7d70ac5da9fa
    Remove dead mutex in AudioTrack/AudioRecord thread
    
    The client callback threads had mutexes called AudioTrackThread::mLock
    and ClientRecordThread::mLock.  These mutexes were only used by start()
    and stop(), and were unused by the thread itself.  But start() and
    stop() already have their own protection provided by AudioTrack::mLock
    and AudioRecord::mLock.  So the thread mutexes can be removed.
    
    Change-Id: I098406d381645d77fba06a15511e179a327848ef
    Use audio_source_t consistently
    
    Was a mix of audio_source_t, uint8_t, and int.
    
    Related fixes:
     - fix comments in MediaRecorder.java
     - AudioPolicyService server side was not checking source parameter at
       all, so if the client wrapper was bypassed, invalid values could be
       passed into audio HAL
     - JNI android_media_AudioRecord_setup was checking source for positive
       values, but not negative values. This test is redundant, since already
       checked at Java and now checked by AudioPolicyService also, but might
       as well make it correct.
    
    Change-Id: Ie5e25d646dcd59a86d7985aa46cfcb4a1ba64a4a
    Use audio_format_t consistently, continued
    
    Was int or uint32_t.
    
    When AudioFlinger::format can't determine the correct format,
    return INVALID rather than DEFAULT.
    
    Init mFormat to INVALID rather than DEFAULT in the constructor.
    Subclass constructors will set mFormat to the correct value.
    
    Change-Id: I9b62640aa107d24d2d27925f5563d0d7407d1b73
    Fix incorrect includes of AudioTrack.h
    
    Remove unnecessary includes of AudioTrack.h.
    Use forward declaration of class names in preference to #include when possible.
    
    Change-Id: I12982811fa75c2c7695d8bbfa595a7aaec047dc0
    Use size_t for frame size
    
    except in the control block, where we don't have room.
    
    In AudioFlinger::ThreadBase::TrackBase::getBuffer,
    read the frame size from control block only once.
    
    Change-Id: Id6c4bccd4ed3e07d91df6bbea43bae45524f9f4e
    Bug 4903178 Restore priority and cgroup on stop
    
    On AudioTrack and AudioRecord stop or failed start, restore the priority
    and cgroup of the caller to their previous values, rather than forcing
    to NORMAL.  Dependent on new thread APIs.
    
    Also fixes bug where priority was set to AUDIO but cgroup not set.
    
    Change-Id: Ib83893918fb4fdf57c6b87884b51038997a631d8
    Use channel mask instead of channel count for track creation
    
    Record and playback objects (resp AudioRecord and AudioTrack)
    are created using a channel mask, but this information is lost
    in the mixer because only the channel count is known to
    AudioFlinger. A channel count can always be derived from a
    channel mask.
    
    The change consists in:
    - disambiguiting variable names for channel masks and counts
    - passing the mask information from the client to AudioFlinger
     and the mixer.
    - when using the DIRECT ouput, only verifying the format of
     the track is compatible with the output's for PCM.
    
    Change-Id: I50d87bfb7d7afcabdf5f12d4ab75ef3a54132c0e
    update for new audio.h header location
    
    Change-Id: Ic4c62c4037800802427eb7d3c7f5eb8b25d18876
    Signed-off-by: Dima Zavin <dima@android.com>
    audio/media: convert to using the audio HAL and new audio defs
    
    Change-Id: Ibc637918637329e4f2b62f4ac7781102fbc269f5
    Signed-off-by: Dima Zavin <dima@android.com>
    Fix issue 3439872: video chat and bluetooth SCO
    
    This change fixes the stability problems experienced when using
    a bluetooth headset supporting both A2DP and SCO. Problems occur
    when starting the video chat at which time the A2DP output is being
    stopped to start SCO. At that time, active AudioTracks are invalidated
    by AudioFlinger so that a new AudioTrack binder interface can be
    recreated by the client process on the new mixer thread with correct parameters.
    The problem was that the process to restore the binder interface was not
    protected against concurrent requests which caused 2 binder interfaces
    to be created sometimes. This could lead to permanent client deadlock
    if one of the client threads was waiting for a condition of the first
    created binder interface while the second one was created (as the AudioFlinger
    would only signal conditions on the last one created).
    This concurrent request situation is more likely to happen when a client
    uses the JAVA AudioTrack as the JNI implementation uses simultaneously the
    native AudioTrack callback and write push mechanisms. By doing so, the code
    that checks if the binder interface should be restored (in obtainBuffer()) is
    much more likely to be called concurrently from two different threads.
    
    The fix consists in protecting the critical binder interface restore phase
    with a flag in the AudioTrack control block. The first thread acting upon the binder
    interface restore request will raise the flag and the second thread will just wait for
    a condition to be signaled when the restore process is complete.
    
    Also protected all accesses to the AudioTrack control block by a mutex to prevent
    access while the track is being destroyed and restored. If a mutex cannot be held
    (e.g because we call a callback function), acquire a strong reference on the IAudioTrack
    to prevent its destruction while the cblk is being accessed.
    
    Modified AudioTrack JNI to use GetByteArrayElements() instead of
    GetPrimitiveArrayCritical() when writing audio buffers. Entering a critical section would
    cause the JNI to abort if a mediaserver crash occurs during a write due to the AudioSystem
    callback being called during the critical section when media server process restarts.
    Anyway with current JNI implementation, either versions do not copy data most of the times
    and the criticial version does not guaranty no data copy.
    
    The same modifications have been made to AudioRecord.
    
    Change-Id: Idc5aa711a04c3eee180cdd03f44fe17f3c4dcb52
    Fix issue 3157123.
    
    Use a Mutex wherever atomic operations were used in AudioTrack,
    AudioRecord, AudioFlinger and AudioEffect classes.
    
    Change-Id: I6f55b2cabdcd93d64ef19446735b8f33720f8dbc
    media: add AudioRecord::getMinFrameCount().
    
    Change-Id: I952071ab10aa49aa96b727d157b68470d69fff3d
    Issue 2667801: [Audio Effect Framework] AudioFlinger, AudioMixer AudioTrack modifications.
    
    First drop of audio framework modifications for audio effects support.
    
    - AudioTrack/AudioRecord:
    Added support for auxiliary effects in AudioTrack
    Added support for audio sessions
    Fixed left right channel inversion in setVolume()
    
    - IAudioFlinger:
    Added interface methods for effect enumeraiton and instantiation
    Added support for audio sessions.
    
    - IAudioTrack:
    Added method to attach auxiliary effect.
    
    - AudioFlinger
    Created new classes to control effect engines in effect library and manage effect connections to tracks or
    output mix:
      EffectModule: wrapper object controlling the effect engine implementation in the effect library. There
            is one EffectModule per instance of an effect in a given audio session
      EffectChain: group of effects associated to one audio session. There is one EffectChain per audio session.
            EffectChain for session 0 is for output mix effects, other chains are attached to audio tracks
            with same session ID. Each chain contains a variable number of EffectModules
      EffectHandle: implements the IEffect interface. There is one EffectHandle object for each application
            controlling (or using) an effect module. THe EffectModule maintians a list of EffectHandles.
    
    Added support for effect modules and effect chains creation in PlaybackThread.
    modified mixer thread loop to allow track volume control by effect modules and call effect processing.
    
    -AudioMixer
    Each track now specifies its output buffer used by mixer for accumulation
    Modified mixer process functions to process tracks by groups of tracks with same buffer
    Modified track process functions to support accumulation to auxiliary channel
    
    Change-Id: I26d5f7c9e070a89bdd383e1a659f8b7ca150379c
    Issue 2071329: audio track is shorter than video track for video capture on sholes
    
    Add API to retrieve number of frames dropped by audio input kernel driver.
    
    Submitted on behalf of Masaki Sato <masaki.sato@motorola.com>
    android-2.1_r1 snapshot
    Issue 2265163: Audio still reported routed through earpiece on sholes
    
    This is a second attempt to fix the audio routed to earpiece syndrom.
    The root cause identified this time is the crash of an application having an active AudioTrack playing on the VOICE_CALL stream type.
    When this happens, the AudioTrack destructor is not called and the audio policy manager is not notified of the track stop.
    Results a situation where the VOICE_CALL stream is considered as always in use by audio policy manager which makes that audio is routed to earpiece.
    
    The fix consists in moving the track start/stop/close notification to audio policiy manager from AudioTrack to AudioFlinger Track objet.
    The net result is that in the case of a client application crash, the AudioFlinger TrackHandle object (which implements the remote side of the IAudioTrack binder interface) destructor is called which in turn destroys the Track object and we can notify the audio policy manager of the track stop and removal.
    
    The same modification is made for AudioRecord although no bug related to record has been reported yet.
    Also fixed a potential problem if record stop is called while the record thread is exiting.
    eclair snapshot
    Fix issue 2203561: Sholes: audio playing out of earpiece.
    
    Create a new IAudioTrack interface to AudioFlinger when start() fails due to a broken pipe error.
    Do the same if start fails due to the same error after time out in obtainBuffer().
    Do not indicate that the AudioTrack is started to AudioPolicyManager if IAudioTrack start fails.
    This avoids that an AudioTrack keeps a dead IAudioTrack after a media server crash.
    
    Same modifications for AudioRecord.
    
    Add a flag to ToneGenerator indicating that the callback thread can call Java. Without it, when the media server crashes and restarts, the AudioSystem error callback will crash in JNI if the IAudiotrack is created from AudioTrack callback thread.
    Fix issue 1795088       Improve audio routing code
    
    Initial commit for review.
    Integrated comments after patch set 1 review.
    Fixed lockup in AudioFlinger::ThreadBase::exit()
    Fixed lockup when playing tone with AudioPlocyService startTone()
    donut snapshot
    Fix issue 1743700: AudioTrack: setPlaybackRate can not set the playback rate to twice of the ouputSR
    
    Store sample rate on 32 bits instead of 16 bits in audio_track_cblk_t.
    Removed sampleRate() methods from AudioTrack and AudioRecord: replaced by getSampleRate().
    AudioTrack::setSampleRate() no returns a status.
    Fix issue 1846343 - part 1
    
    This change is the first part of a fix for issue 1846343, :
    - Added new enum values for input sources in AudioRecord and MediaRecorder for voice uplink, downlink and uplink+downlink sources.
    - renamed streamType to inputSource in all native functions handling audio record.
    
    A second change is required in opencore author driver and android audio input to completely fix the issue.
    move libbinder's header files under includes/binder
    donut snapshot
    Fix issue 1745312: Various cleanups in media framework
    
    AudioTrack, AudioRecord:
      - remove useless mAudioFlinger member of AudioTrack and AudioRecord.
      - signal cblk.cv condition in stop() method to speed up stop completion.
      - extend wait condition timeout in obtainBuffer() when waitCount is -1 to avoid waking up callback thread unnecessarily
    
    AudioFlinger:
      - remove some warnings in AudioFlinger.cpp.
      - remove function AudioFlinger::MixerThread::removetrack_l()  as its content is never executed.
      - remove useless call to setMasterVolume in AudioFlinger::handleForcedSpeakerRoute().
      - Offset VOICE_CALL stream volume to reflect actual volume that is never 0 in hardware (this fix has been made in the open source): 0.01 + v * 0.99.
    
    AudioSystem.java:
      - correct typo in comment
    
    IAudioflinger, IAudioFlingerClient:
      - make AudioFlinger binder interfaces used for callbacks ONEWAY.
    
    AudioHardwareInterface:
      - correct routeStrings[] table in AudioHardwareInteface.cpp
    Automated import from //branches/donutburger/...@141200,141200
    Automated import from //branches/master/...@141201,141201
    auto import from //branches/cupcake_rel/...@141571
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@132589
    auto import from //depot/cupcake/@137055
    auto import from //branches/cupcake/...@127101
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    IAudioFlingerClient::ioConfigChanged param2 const
    
    The 3rd parameter (param2) to AudioFlingerClient::ioConfigChanged
    is used as an input.  So changed it from void * to const void *.
    It is then cast to const OutputDescriptor *
    or const audio_stream_type_t * depending on the event.
    
    Change-Id: Ieec0d284f139b74b3389b5ef69c7935a8e5650ee
    Use audio_io_handle_t consistently instead of int
    
    Other:
     - add a comment to nextUniqueId
     - made ThreadBase::mId const, since it is only assigned in constructor.
    
    Change-Id: I4e8b7bec4e45badcde6274d574b8a9aabd046837
    eclair snapshot
    Fix issue 2001214: AudioFlinger and AudioPolicyService interfaces should not use pointers as handles to inputs and outputs.
    
    Use integers instead of void* as input/output handles at IAudioFlinger and IAudioPolicyService interfaces.
    AudioFlinger maintains an always increasing count of opened inputs or outputs as unique ID.
    Fix issue 1795088       Improve audio routing code
    
    Initial commit for review.
    Integrated comments after patch set 1 review.
    Fixed lockup in AudioFlinger::ThreadBase::exit()
    Fixed lockup when playing tone with AudioPlocyService startTone()
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@131421
    auto import from //branches/cupcake/...@130745
    Initial Contribution
    Whitespace and indentation
    
    Fix indentation to be multiple of 4.
    Make it easier to search:
      sp< not sp < to
      "switch (...)" instead of "switch(...)" (also "if" and "while")
    Remove redundant blank line at start or EOF.
    Remove whitespace at end of line.
    Remove extra blank lines where they don't add value.
    
    Use git diff -b or -w to verify.
    
    Change-Id: I966b7ba852faa5474be6907fb212f5e267c2874e
    Support passing headers to MediaMetadataRetriever's setDataSource API
    
    Change-Id: Ib1a5c08fc5034cac05034db27007a35c9b660b26
    related-to-bug: 3506316
    Squash commits of the following patches, cherry-picked from other branch - do not merge.
    
    o Prepare for publishing MediaMetadataRetriever as public API
      step one:
      o replaced captureFrame with getFrameAtTime
      o removed getMode
    
    o Replace MediaMetadataRetriever.captureFrame() with MediaMetadataRetriever.getFrameAtTime()
      as part of the preparation for publishing MediaMetadataRetriever as public Java API
    
    o Remove captureFrame from MediaMetadataRetriever.java class
      It has been replaced by getFrameAtTime() method
    
    o Replace extractAlbumArt() with getEmbeddedPicture() in MediaMetadataRetriever.java
    
    o Publish MediaMetadataRetriever.java as public API
      o Removed setMode() methods and related mode constants
      o Removed some of the unused the metadata keys
      o Updated the javadoc
      o part of a multi-project change.
    
    bug - 3309041
    
    Change-Id: I2efb6e8b8d52897186b016cb4efda6862f5584c4
    Publish MediaMetadataRetriever.java as public API
    
    o Removed setMode() methods and related mode constants
    o Removed some of the unused the metadata keys
    o Updated the javadoc
    
    o part of a multi-project change.
    
    bug - 2433195
    
    Change-Id: I5ed167f1fd6a53cb143b7dc385b149431d434438
    Prepare for publishing MediaMetadataRetriever as public API
    
    step one:
    o replaced captureFrame with getFrameAtTime
    o removed getMode
    
    bug - 2433195
    
    Change-Id: I38a8cecef29014692f0b08b8818326e3ebb40a12
    Fix the media metadata retriever (tests). The native constants must match those published at the java layer.
    
    Change-Id: Ic1efed709e4d93c61913b231a8cd3ef1074f8ca0
    eclair snapshot
    Add basic metadata retrieval support for midi, ogg, etc.
    Bug 2050320
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Assign blame for playback wakelocks.
    
    Set a work source for the playback wakelock, so that playback is
    counted against the requesting app instead of the media server.
    
    Cherrypicked from master.
    
    b/9464621
    
    Change-Id: I7329f88a288a95a582a78005a1c3d16a5a611e31
    Cleanup openRecord error handling
    
    Bug: 10888816
    Change-Id: I84897dd7d30b370640b54e928f230604b873cb68
    Cleanup openRecord error handling
    
    Bug: 10888816
    Change-Id: I84897dd7d30b370640b54e928f230604b873cb68
    IAudioFlinger::openRecord track_flags_t flags is in/out
    
    This will allow AudioFlinger to tell client it is denying a request.
    
    Change-Id: Iff2be3ad6636371bbda9c9899a283c94620c1f06
    Move control block mName to createTrack() output
    
    This is part of a series of CLs to clean up the shared memory
    control block, by removing any fields that don't have to be there.
    
    Change-Id: I6e51003a1293b6800258c31b22cff2eba42162e7
    Use AudioSystem::setLowRamDevice() to configure memory
    
    Bug: 9798886
    Change-Id: I9321e3f369f1ed9429ae222e3926ebdeb012b8b0
    Add comments
    
    Change-Id: Ifbf3a46a4183c8abc0feee1c588953ab10303cc1
    Public API changes for audio offload support.
    
    NOTE: this does _not_ include all private member variables added
    to classes as part of offload support. Only public/protected functions
    and stubs functions/variables needed to make the changes buildable.
    
    - isOffloadSupported() added to audio policy service
        A stub implementation is required to build, this always returns false
    - setParameters() added to IAudioTrack
        A stub implementation is required to build, this always returns
        INVALID_OPERATION
    
    - CBlk flag for stream end
    
    - Change AudioSystem::getRenderPosition() to take an audio_output_t
        so caller can specify which output to query
    
    - Add AudioSystem::isOffloadSupported()
        This is fully implemented down to the AudioFlinger function
        AudioPolicyServer::isOffloadSupported() which is just a stub
        that always returns false.
    
    - Add EVENT_STREAM_END to AudioTrack interface.
        STREAM_END is used to signal when the hardware has actually finished
        playing all the data it was sent.
    
    - Add event type enumeration to media player interface AudioSink callbacks
        so that the same callback can be used to handle multiple types of
        event. For offloaded tracks we also have to handle STREAM_END and
        TEAR_DOWN events
    
    - Pass audio_offload_info_t to various functions used for opening outputs,
        tracks and audio players. This passes additional information about the
        compressed stream down to the HAL when using offload.
        For publicly-available APIs this is an optional parameter (for some of
        the internal and low-level APIs around the HAL interface it is mandatory)
    
    - Add getParameters() and setParameters() API to AudioTrack
        Currently dummy implementations.
    
    - Change AudioPlayer contructor so that it takes a set of bitflags defining what
        options are required. This replaces the original bool which only specified
        whether to use deep buffering.
    
    - Changes to StageFright class definition related to handling tearing-down of
        an offloaded track when we need to switch back to software decode
    
    - Define new StageFright utility functions used for offloaded tracks
        Currently dummy implementations.
    
    - AudioFlinger changes to use extended audio_config_t.
        Fills in audio_offload_info_t member if this info is passed in when
        opening an output.
    
    - libvideoeditor changes required to add the new event type parameter
        to AudioSink callback functions
    
    - libmediaplayerservice changes required to add the new event type parameter
        to AudioSink callback functions
    
    Change-Id: I3ab41138aa1083d81fe83b886a9b1021ec7320f1
    Signed-off-by: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
    Signed-off-by: Eric Laurent <elaurent@google.com>
    Remove unnecessary parameter
    
    Just get the parameter on server side
    
    Change-Id: I433a63104dbb257e0d862be2ab61847cb36d1c15
    Remove unnecessary parameter
    
    Just get the parameter on server side
    
    Change-Id: I433a63104dbb257e0d862be2ab61847cb36d1c15
    Use size_t for frame counts
    
    Also fix typo: bufferCount should be frameCount.
    
    Change-Id: Ibed539504db75ef99dc21c8ff1bf2987122063a5
    Use size_t for frame counts
    
    Also fix typo: bufferCount should be frameCount.
    
    Change-Id: Ibed539504db75ef99dc21c8ff1bf2987122063a5
    Use uint32_t for sample rate
    
    Change-Id: Ie240b48fb54b08359f69ecd4e5f8bda3d15cbe80
    Use uint32_t for sample rate
    
    Change-Id: Ie240b48fb54b08359f69ecd4e5f8bda3d15cbe80
    Remove CBLK_FAST from control block flags
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ic881a3560d9547cb63fcc0cefec87aa3da480e0d
    Remove CBLK_FAST from control block flags
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ic881a3560d9547cb63fcc0cefec87aa3da480e0d
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Implement android.media.AudioManager.getProperty()
    
    Bug: 6635041
    Change-Id: I3386a4a6c226bc4eceaf65556119e4fb15f73224
    Implement android.media.AudioManager.getProperty()
    
    Bug: 6635041
    Change-Id: I3386a4a6c226bc4eceaf65556119e4fb15f73224
    Add tid parameter to IAudioFlinger::openRecord
    
    Not yet implemented
    
    Change-Id: I35523fb15ad71727ecc9f4bb870f07e4b7397dc4
    Use audio_channel_mask_t more consistently
    
    In IAudioFlinger::createTrack() and IAudioFlinger::openRecord(),
    declare input parameter to use correct type audio_channel_mask_t.
    
    In IAudioFlinger::getInputBufferSize(), input parameter is now channel mask
    instead of channel count.
    
    Remove unused IAudioFlinger::channelCount(audio_io_handle_t).
    
    In AudioRecord::getMinFrameCount() and AudioSystem::getInputBufferSize(),
    input parameter is channel mask instead of channel count.
    
    Change-Id: Ib2f1c29bea70f016b3cfce83942ba292190ac965
    Configure policy of mediaserver threads
    
    Change-Id: Ifd825590ba36996064a458f64453a94b84722cb0
    rename audio policy output flags
    
    Change-Id: I27c46bd1d1b2b5f96b87af7d05b951fef18a1312
    audio policy: load audio hw modules.
    
    Audio HW modules are now loaded upon request from audio policy manager
    according to the configuration in audio_policy.conf.
    Removed hard coded HW module loading by AudioFlinger at init time.
    Added methods to IAudioFlinger and AudioPolicyInterface
    to control the loading of audio HW modules.
    Added methods to open an output or input stream on a specific hw module.
    
    Change-Id: I361b294ece1a9b56b2fb39cc64259dbb73b804f4
    Add TRACK_FAST for IAudioFlinger::createTrack
    
    Currently not implemented by client or server
    
    Change-Id: Ib11dda57db3eeb871bcc7b546e340078776875f5
    IAudioFlinger::createTrack and openRecord flags
    
    createTrack and openRecord don't need the "old" flags parameter,
    which was either audio_policy_output_t or audio_in_acoustics_t
    shifted left by 16 bits.  But they do need "new" flags, which
    are defined by the application use case.  Initially, the only
    application use case flag is timed output, but others are planned.
    
    For output, the audio_policy_output_t flags are passed to
    AudioSystem::getOutput, which returns an audio_io_handle_t, and that
    handle is then passed to createTrack. So createTrack doesn't need the
    old flags parameter.
    
    For input, the audio_in_acoustics_t flags are passed to
    AudioSystem::getInput, which returns an audio_io_handle_t, and that
    handle is then passed to openRecord. So openRecord doesn't need the
    old flags parameter.
    
    Change-Id: I18a9870911846cca69d420c19fe6a9face2fe8c4
    Use audio_policy_output_flags_t consistently
    
    This affects:
     - IAudioFlinger::openOutput
     - AudioTrack::AudioTrack
     - AudioTrack::set
     - apps that call these
    
    Change-Id: I26fb281bac6cb87593d17697bc9cb37a835af205
    Remove virtual from methods that don't need it
    
    Change-Id: I30e17e61aae25b036436c0e270313c80c43e5f06
    Upintegrate Audio Flinger changes from ICS_AAH
    
    Bring in changes to audio flinger made to support timed audio tracks
    and HW master volume control.
    
    Change-Id: Ide52d48809bdbed13acf35fd59b24637e35064ae
    Signed-off-by: John Grossman <johngro@google.com>
    Use audio_io_handle_t consistently instead of int
    
    Other:
     - add a comment to nextUniqueId
     - made ThreadBase::mId const, since it is only assigned in constructor.
    
    Change-Id: I4e8b7bec4e45badcde6274d574b8a9aabd046837
    Effect UUID inputs passed by pointer are const
    
    Change-Id: I1f5c338bcb7368e3dd8cd5f804b2e6d9fbe087f8
    Declare more IAudioFlinger methods const
    
    This is just documentation, as C++ method const-ness doesn't mean anything
    for a binder API.  Instead, here const means "no side effects".
    
    Change-Id: Iaa9cd2fe477db10ae9a40cac4f79f0faa9b4e5e6
    Use audio_in_acoustics_t consistently
    
    Change-Id: I0a9dd668fb2e57b1c3ece3190588194974b99062
    Use audio_format_t consistently, continued
    
    Was int or uint32_t.
    
    When AudioFlinger::format can't determine the correct format,
    return INVALID rather than DEFAULT.
    
    Init mFormat to INVALID rather than DEFAULT in the constructor.
    Subclass constructors will set mFormat to the correct value.
    
    Change-Id: I9b62640aa107d24d2d27925f5563d0d7407d1b73
    Use audio_stream_type_t consistently
    
    At native level it was a mixture of audio_stream_type_t, int, uint32_t,
    and uint8_t.  Java is still int.  Also fixed a couple of hard-coded -1
    instead of AUDIO_STREAM_DEFAULT, and in startToneCommand a hard-coded 0
    instead of AUDIO_STREAM_VOICE_CALL.
    
    Change-Id: Ia33bfd70edca8c2daec9052984b369cd8eee2a83
    Use audio_mode_t consistently
    
    It was int or uint32_t.
    Also make getMode() const.
    
    Change-Id: Ibe45aadbf413b9158e4dd17f2b3bcc6355288d37
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: I6ec5d2bca9b8ebc0acd395a7dd92e1a48fcdfa9b
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    undo reset to ics-mr1 until we have a better method
    reset to ics-mr1, but keep history
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: Id78bba8c002131d8b52b4170259a87fd94e63c73
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    Keep effects sessions active when the caller dies.
    
    Don't remove effects until the session they are in goes away or all
    AudioEffects have been explicitly released. This allows the control
    panel process to die without stopping the effects.
    
    Change-Id: I4496e5df080230ca1af149dec95c1309ab8ea888
    Use channel mask instead of channel count for track creation
    
    Record and playback objects (resp AudioRecord and AudioTrack)
    are created using a channel mask, but this information is lost
    in the mixer because only the channel count is known to
    AudioFlinger. A channel count can always be derived from a
    channel mask.
    
    The change consists in:
    - disambiguiting variable names for channel masks and counts
    - passing the mask information from the client to AudioFlinger
     and the mixer.
    - when using the DIRECT ouput, only verifying the format of
     the track is compatible with the output's for PCM.
    
    Change-Id: I50d87bfb7d7afcabdf5f12d4ab75ef3a54132c0e
    Removed interface to load audio effects libraries
    
    Removed unused functions allowing dynamic loading of audio effects libraries
    from effects factory API.
    
    Change-Id: I06cc5a51dc10aca87c7a8687bbb874babd711eca
    New effect library API
    
    Moved and renamed media/EffectApi.h to hardware/audio_effect.h
    Modified the effect library API to expose a library info structure
    containing an interface functions table.
    Also removed enums for audio channels, audio format and devices
    from effect API and use values from system/audio.h instead.
    
    Modified effects factory to support new library interface format and
    load libraries and efffects listed in audio_effects.conf file.
    The file audio_effects.conf is first loaded from /vendor/etc and
    then from /system/etc/audio_effects.conf if not found.
    
    Modified existing effect libraries to implement the new library interface.
    
    Change-Id: Ie52351e071b6d352fa2fbc06c3846686f8c45df9
    Fix issue 3371080
    
    Modified default volume control logic in AudioService:
    1 IN_CALL volume if in video/audio chat
    2 NOTIFICATION if notification is playing or was playing less than 5s ago.
    3 MUSIC
    
    Modified silent mode:
    - now also affect MUSIC stream type
    - entering silent mode when VOL- hard key is pressed once while selected
    stream volume is already at 0 (except for VOICE_CALL stream).
    - exiting silent mode when pressing VOL+ hard key while in silent mode
    
    Play sound FX (audible selections, keyboard clicks) at a fixed volume.
    
    Modified audio framework:
    - isStreamActive() method now implemented in AudioPolicyManagerBase (previously AudioFlinger)
    - iStreamActive() now specifies a time window during which the stream is considered
    active after it actually stopped.
    
    Change-Id: I7e5a0724099450b9fc90825224180ac97322785f
    Audio policy manager changes for audio effects
    
    Added methods for audio effects management by audio policy manager.
    - control of total CPU load and memory used by effect engines
    - selection of output stream for global effects
    - added audio session id in parameter list for startOutput() and stopOutput().
    this is not used in default audio policy manager implementation.
    
    Modifications of audio effect framework in AudioFlinger to allow moving and reconfiguring
    effect engines from one output mixer thread to another when audio tracks in the same session
    are moved or when requested by audio policy manager.
    Also fixed mutex deadlock problem with effect chains locks.
    
    Change-Id: Ida43484b06e9b890d6b9e53c13958d042720ebdb
    Various fixes and improvements in audio effects implementation
    
    Effect API:
    - Use different definitions for audio device, channels, formats... in AudioSystem and EffectApi:
      Removed media/AudioCommon.h file created for initial version of EffectApi
    - Indicate audio session and output ID to effect library when calling EffectCreate(). Session ID can be useful to optimize
    the implementation of effect chains in the same audio session. Output ID can be used for effects implemented in audio hardware.
    - Renamed EffectQueryNext() function to EffectQueryEffect() and changed operating mode:
      now an index is passed for the queried effect instead of implicitly querying the next one.
    - Added CPU load and memory usage indication in effects descriptor
    - Added flags and commands to indicate changes in audio mode (ring tone, in call...) to effect engine
    - Added flag to indicate hardware accelerated effect implementation.
    - Renamed EffectFactoryApi.h to EffectsFactoryApi.h for consistency with EffectsFactory.c/h
    
    Effect libraries:
    - Reflected changes in Effect API
    - Several fixes in reverb implementation
    - Added build option TEST_EFFECT_LIBRARIES in makefile to prepare integration of actual effect library.
    - Replaced pointer by integer identifier for library handle returned by effects factory
    
    Audio effect framework:
    - Added support for audio session -1 in preparation of output stage effects configuration.
    - Reflected changes in Effect API
    - Removed volume ramp up/down when effect is inserted/removed: this has to be taken care of by effect engines.
    - Added some overflow verification on indexes used for deferred parameter updates via shared memory
    - Added hardcoded CPU and memory limit check when creating a new effect instance
    
    Change-Id: I43fee5182ee201384ea3479af6d0acb95092901d
    Issue 2667801: [Audio Effect Framework] AudioFlinger, AudioMixer AudioTrack modifications.
    
    First drop of audio framework modifications for audio effects support.
    
    - AudioTrack/AudioRecord:
    Added support for auxiliary effects in AudioTrack
    Added support for audio sessions
    Fixed left right channel inversion in setVolume()
    
    - IAudioFlinger:
    Added interface methods for effect enumeraiton and instantiation
    Added support for audio sessions.
    
    - IAudioTrack:
    Added method to attach auxiliary effect.
    
    - AudioFlinger
    Created new classes to control effect engines in effect library and manage effect connections to tracks or
    output mix:
      EffectModule: wrapper object controlling the effect engine implementation in the effect library. There
            is one EffectModule per instance of an effect in a given audio session
      EffectChain: group of effects associated to one audio session. There is one EffectChain per audio session.
            EffectChain for session 0 is for output mix effects, other chains are attached to audio tracks
            with same session ID. Each chain contains a variable number of EffectModules
      EffectHandle: implements the IEffect interface. There is one EffectHandle object for each application
            controlling (or using) an effect module. THe EffectModule maintians a list of EffectHandles.
    
    Added support for effect modules and effect chains creation in PlaybackThread.
    modified mixer thread loop to allow track volume control by effect modules and call effect processing.
    
    -AudioMixer
    Each track now specifies its output buffer used by mixer for accumulation
    Modified mixer process functions to process tracks by groups of tracks with same buffer
    Modified track process functions to support accumulation to auxiliary channel
    
    Change-Id: I26d5f7c9e070a89bdd383e1a659f8b7ca150379c
    Issue 2071329: audio track is shorter than video track for video capture on sholes
    
    Add API to retrieve number of frames dropped by audio input kernel driver.
    
    Submitted on behalf of Masaki Sato <masaki.sato@motorola.com>
    Fix issue 2285561: New AudioFlinger and audio driver API needed for A/V sync
    
    Added getRenderPosition() API to IAudioFlinger to retreive number of audio frames
    written by AudioFlinger to audio HAL and by DSP to DAC.
    
    Added getRenderPosition() API to AudioHardwareInterface to retreive number of audio frames
    written by DSP to DAC.
    
    Exposed AudioTrack::getPosition() to AudioSink() to make it available to media player.
    
    Removed excessive log in AudioHardwareGeneric.
    Fix issue 2378022: AudioService should direct volume control to STREAM_VOICE_CALL stream when STREAM_VOICE_CALL stream is active.
    
    Modified AudioService.getActiveStreamType() so that STREAM_VOICE_CALL is selected when a track using this stream
    type is playing.
    
    Chanded isMusicActive() for a more generic isStreamActive(stream) method in AudioSystem, IAudioFlinger and AudioFlinger.
    eclair snapshot
    Fix issue 2192181: AudioFlinger must provide separated methods to set VOICE_CALL stream volume and down link audio volume.
    
    Added setVoiceVolume() method to AudioSystem, AudioFlinger, IAudioFlinger, AudioPolicyService.
    Removed call to AudioHardwareInterface::setVoiceVolume() from AudioFlinger::setStreamVolume().
    Fix issue 2001214: AudioFlinger and AudioPolicyService interfaces should not use pointers as handles to inputs and outputs.
    
    Use integers instead of void* as input/output handles at IAudioFlinger and IAudioPolicyService interfaces.
    AudioFlinger maintains an always increasing count of opened inputs or outputs as unique ID.
    Fix issue 1795088       Improve audio routing code
    
    Initial commit for review.
    Integrated comments after patch set 1 review.
    Fixed lockup in AudioFlinger::ThreadBase::exit()
    Fixed lockup when playing tone with AudioPlocyService startTone()
    donut snapshot
    Fix issue 1846343 - part 1
    
    This change is the first part of a fix for issue 1846343, :
    - Added new enum values for input sources in AudioRecord and MediaRecorder for voice uplink, downlink and uplink+downlink sources.
    - renamed streamType to inputSource in all native functions handling audio record.
    
    A second change is required in opencore author driver and android audio input to completely fix the issue.
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@131421
    auto import from //branches/cupcake/...@130745
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Public API changes for audio offload support.
    
    NOTE: this does _not_ include all private member variables added
    to classes as part of offload support. Only public/protected functions
    and stubs functions/variables needed to make the changes buildable.
    
    - isOffloadSupported() added to audio policy service
        A stub implementation is required to build, this always returns false
    - setParameters() added to IAudioTrack
        A stub implementation is required to build, this always returns
        INVALID_OPERATION
    
    - CBlk flag for stream end
    
    - Change AudioSystem::getRenderPosition() to take an audio_output_t
        so caller can specify which output to query
    
    - Add AudioSystem::isOffloadSupported()
        This is fully implemented down to the AudioFlinger function
        AudioPolicyServer::isOffloadSupported() which is just a stub
        that always returns false.
    
    - Add EVENT_STREAM_END to AudioTrack interface.
        STREAM_END is used to signal when the hardware has actually finished
        playing all the data it was sent.
    
    - Add event type enumeration to media player interface AudioSink callbacks
        so that the same callback can be used to handle multiple types of
        event. For offloaded tracks we also have to handle STREAM_END and
        TEAR_DOWN events
    
    - Pass audio_offload_info_t to various functions used for opening outputs,
        tracks and audio players. This passes additional information about the
        compressed stream down to the HAL when using offload.
        For publicly-available APIs this is an optional parameter (for some of
        the internal and low-level APIs around the HAL interface it is mandatory)
    
    - Add getParameters() and setParameters() API to AudioTrack
        Currently dummy implementations.
    
    - Change AudioPlayer contructor so that it takes a set of bitflags defining what
        options are required. This replaces the original bool which only specified
        whether to use deep buffering.
    
    - Changes to StageFright class definition related to handling tearing-down of
        an offloaded track when we need to switch back to software decode
    
    - Define new StageFright utility functions used for offloaded tracks
        Currently dummy implementations.
    
    - AudioFlinger changes to use extended audio_config_t.
        Fills in audio_offload_info_t member if this info is passed in when
        opening an output.
    
    - libvideoeditor changes required to add the new event type parameter
        to AudioSink callback functions
    
    - libmediaplayerservice changes required to add the new event type parameter
        to AudioSink callback functions
    
    Change-Id: I3ab41138aa1083d81fe83b886a9b1021ec7320f1
    Signed-off-by: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
    Signed-off-by: Eric Laurent <elaurent@google.com>
    Add support for querying if a stream is active remotely
    
    Bug 7485803
    
    Change-Id: I0744374f130fd2dd0714102354cffed2fa915361
    Add support for querying if a stream is active remotely
    
    Bug 7485803
    
    Change-Id: I0744374f130fd2dd0714102354cffed2fa915361
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Support querying active record sources
    
    Add support for querying whether there is currently a recording
     underway from the specified audio source.
    
    Bug 7314859
    
    Change-Id: I986b231a10ffd368b08ec2f9c7f348d28eaeb892
    Support querying active record sources
    
    Add support for querying whether there is currently a recording
     underway from the specified audio source.
    
    Bug 7314859
    
    Change-Id: I986b231a10ffd368b08ec2f9c7f348d28eaeb892
    effect_descriptor_t const correctness
    
    Change-Id: Iad008f20d35a18acf500f773900164552fd0c19e
    Use audio_channel_mask_t more places
    
    Use it in AudioSystem::getOutput(), AudioSystem::getInput(),
    IAudioPolicyService::getOutput(), IAudioPolicyService::getInput(),
    and various other places in AudioFlinger.
    
    Not done: AudioTrack and OutputDescriptor.
    
    Change-Id: I70e83455820bd8f05dafd30c63d636c6a47cd172
    Remove acoustics from AudioSystem::getInput()
    
    Change-Id: I29fb3ee5664c1f0ee0409c1bb2be087ecca637db
    rename audio policy output flags
    
    Change-Id: I27c46bd1d1b2b5f96b87af7d05b951fef18a1312
    audio policy: use audio_devices_t when appropriate
    
    Change-Id: I1b3a5879e81c789fb53d356af3d3a1ee2dca955f
    renamed audio policy output flag.
    
    Renamed AUDIO_POLICY_OUTPUT_FLAG_INDIRECT to AUDIO_POLICY_OUTPUT_FLAG_NONE
    which is more appropriate.
    
    Change-Id: Ia14d60397df0f2dcd9bea0186400a09da35bc104
    Use audio_source_t consistently
    
    Was a mix of audio_source_t, uint8_t, and int.
    
    Related fixes:
     - fix comments in MediaRecorder.java
     - AudioPolicyService server side was not checking source parameter at
       all, so if the client wrapper was bypassed, invalid values could be
       passed into audio HAL
     - JNI android_media_AudioRecord_setup was checking source for positive
       values, but not negative values. This test is redundant, since already
       checked at Java and now checked by AudioPolicyService also, but might
       as well make it correct.
    
    Change-Id: Ie5e25d646dcd59a86d7985aa46cfcb4a1ba64a4a
    Use audio_format_t consistently, continued
    
    Was int or uint32_t.
    
    When AudioFlinger::format can't determine the correct format,
    return INVALID rather than DEFAULT.
    
    Init mFormat to INVALID rather than DEFAULT in the constructor.
    Subclass constructors will set mFormat to the correct value.
    
    Change-Id: I9b62640aa107d24d2d27925f5563d0d7407d1b73
    Remove dead setRingerMode(mode, mask)
    
    Change-Id: Ia4cc8be8424a40b3dcb7ebd0264fdff4e5247f7f
    audio framework: manage stream volume per device
    
    Improve volume management by keeping track of volume for each type
    of device independently.
    Volume for each stream (MUSIC, RINGTONE, VOICE_CALL...) is now maintained
    per device.
    
    The main changes are:
    - AudioService now keeps tracks of stream volumes per device:
     volume indexes are kept in a HashMap < device , index>.
     active device is queried from policy manager when a volume change request
     is received
     initalization, mute and unmute happen on all device simultaneously
    - Settings: suffixes is added to volume keys to store each device
    volume independently.
    - AudioSystem/AudioPolicyService/AudioPolicyInterface: added a device argument
    to setStreamVolumeIndex() and getStreamVolumeIndex() to address each
    device independently.
    - AudioPolicyManagerBase: keep track of stream volumes for each device
    and apply volume according to current device selection.
    
    Change-Id: I61ef1c45caadca04d16363bca4140e0f81901b3f
    Use audio_stream_type_t consistently
    
    At native level it was a mixture of audio_stream_type_t, int, uint32_t,
    and uint8_t.  Java is still int.  Also fixed a couple of hard-coded -1
    instead of AUDIO_STREAM_DEFAULT, and in startToneCommand a hard-coded 0
    instead of AUDIO_STREAM_VOICE_CALL.
    
    Change-Id: Ia33bfd70edca8c2daec9052984b369cd8eee2a83
    Use audio_mode_t consistently
    
    It was int or uint32_t.
    Also make getMode() const.
    
    Change-Id: Ibe45aadbf413b9158e4dd17f2b3bcc6355288d37
    Audio effects: track CPU and memory use separately
    
    Before this change, CPU and memory usage for an audio effect were
    registered and checked against the limit by audio policy manager
    upon effect instantiation. Even if an effect was not enabled
    it would prevent another effect to be created if the CPU load budget
    was exceeded, which was too restrictive.
    
    This change adds a method to register/unregister CPU load only when
    an effect is enabled or disabled.
    It also adds a mechanism to place all effects on the global output mix
    in suspend state (disabled) when an effect is enabled on a specific session.
    This will allow applications using session effects to have the priority
    over others using global effects.
    
    Also fixes some issues with suspend/restore mechanism:
    - avoid taking actions when an effect is disconnected and was not enabled.
    - do not remove a session from the suspended sessions list when corresponding
    effect chain is destroyed.
    
    Change-Id: I5225278aba1ae13d0d0997bfe26a0c9fb46b17d3
    Added APIs for audio preprocessing
    
    Added APIs to control pre processes applied on captured audio.
    Those APIs are still hidden until reviewed by API council.
    
    Three types of standard pre processes are supported:
    - Automatic Gain Control (AGC) by AutomaticGainControl class
    - Acoustic Echo Cancellation (AEC) by AcousticEchoCanceler class
    - Noise Suppression (NS) by NoiseSuppressor class
    
    A method is added to AudioEffect class to query audio pre processings
    applied by default by the platform on a given AudioRecord session ID.
    
    Change-Id: I0b9fceeb8c704dd06319c3b52b85c96fe871d51d
    Audio framework: support for audio pre processing
    
    Audio effect framework is extended to suport effects on
    output and input audio path.
    
    AudioFlinger: Support for audio effects and effect chains is
    moved from PlaybackThread class to ThreadBase class so that
    RecordThread can manage effects.
    Effects of type pre processing are allowed on record thread
    only. When a pre processing is enabled, the effect interface handle is
    passed down to the input stream so that the audio HAL can call the
    process function. The record thread loop calls the effect chain process
    function that will only manage the effect state and commands and skip the
    process function.
    
    AudioRecord: The audio session is allocated before calling getInput() into
    audio policy serice so that the session is known before the input theead is
    created and pre processings can be created on the correct session.
    
    AudioPolicyService: default pre processing for a given input source are
    loaded from audio_effects.conf file.
    When an input is created, corresponding effects are created and enabled.
    
    Change-Id: Id17119e0979b4dcf189b5c7957fec30dc3478790
    audio: update for audio/audio_policy header names/locations
    
    Change-Id: I36c49352eee57559403cd1597f56a8485a360289
    Signed-off-by: Dima Zavin <dima@android.com>
    audio/media: convert to using the audio HAL and new audio defs
    
    Change-Id: Ibc637918637329e4f2b62f4ac7781102fbc269f5
    Signed-off-by: Dima Zavin <dima@android.com>
    Bug 3352047 Wrong message when adjusting volume
    
    Add hidden AudioManager.getDevicesForStream and output device codes.
    
    Change-Id: I4d1c1d3b6a077cd117720817d1f733dda557b947
    Fix issue 3371080
    
    Modified default volume control logic in AudioService:
    1 IN_CALL volume if in video/audio chat
    2 NOTIFICATION if notification is playing or was playing less than 5s ago.
    3 MUSIC
    
    Modified silent mode:
    - now also affect MUSIC stream type
    - entering silent mode when VOL- hard key is pressed once while selected
    stream volume is already at 0 (except for VOICE_CALL stream).
    - exiting silent mode when pressing VOL+ hard key while in silent mode
    
    Play sound FX (audible selections, keyboard clicks) at a fixed volume.
    
    Modified audio framework:
    - isStreamActive() method now implemented in AudioPolicyManagerBase (previously AudioFlinger)
    - iStreamActive() now specifies a time window during which the stream is considered
    active after it actually stopped.
    
    Change-Id: I7e5a0724099450b9fc90825224180ac97322785f
    Audio policy manager changes for audio effects
    
    Added methods for audio effects management by audio policy manager.
    - control of total CPU load and memory used by effect engines
    - selection of output stream for global effects
    - added audio session id in parameter list for startOutput() and stopOutput().
    this is not used in default audio policy manager implementation.
    
    Modifications of audio effect framework in AudioFlinger to allow moving and reconfiguring
    effect engines from one output mixer thread to another when audio tracks in the same session
    are moved or when requested by audio policy manager.
    Also fixed mutex deadlock problem with effect chains locks.
    
    Change-Id: Ida43484b06e9b890d6b9e53c13958d042720ebdb
    eclair snapshot
    Fix issue 1795088       Improve audio routing code
    
    Initial commit for review.
    Integrated comments after patch set 1 review.
    Fixed lockup in AudioFlinger::ThreadBase::exit()
    Fixed lockup when playing tone with AudioPlocyService startTone()
    wifi-display: do not use HDCP's encryptNative method if its unsupported
    
    Bug: 10609422
    Change-Id: I005f1d04a4191b1503b5f3e895a98b8d6560c402
    wifi-display: add support for metadata mode on encoder output
    
    pass buffer_handle_t from encoder output to HDCP encryptor input
    
    Bug: 8968123
    
    Change-Id: Iea8007ce568641e213fd2e3cf6947a6f7a95746c
    Plumbing to reflect minor changes in the HDCP module API that allow for
    
    support of _decryption_ modules in addition to what we already supported.
    
    Change-Id: Ic37b87dc170ba8def3817991d25df798f21e950b
    Plumbing to reflect minor changes in the HDCP module API that allow for
    
    support of _decryption_ modules in addition to what we already supported.
    
    Change-Id: Ic37b87dc170ba8def3817991d25df798f21e950b
    Preliminary support for HDCP as a binder service for wifi display support.
    
    Change-Id: Ie0de1c086c629a668d1c7863992eef56fb94157c
    Preliminary support for HDCP as a binder service for wifi display support.
    
    Change-Id: Ie0de1c086c629a668d1c7863992eef56fb94157c
    soundpool: allocate shared memory heap by client
    
    Current SoundPool implementation allocates the shared memory heap
    containing decoded PCM samples in mediaserver process.
    When mediaserver process crashes, the shared memory heaps allocated by
    AudioCache cannot be mapped anymore in the new instance of mediaserver.
    This causes a silent failure to end playback of new sounds because
    AudioFlinger believes the new AudioTracks are opened in streaming mode
    and not static mode: it sees a NULL shared memory pointer when the track
    is created.
    
    The fix consists in allocating the memory heap in the client process. Thus
    the heap is not lost when mediaserver restarts. The global memory usage is
    the same as this is shared memory.
    
    Also added a way to detect that a shared memory is passed when the track is
    created but cannot be mapped on mediaserver side.
    
    Also fix a crash in SoundPool when ALOGV is enabled.
    
    Bug: 10894793.
    Change-Id: Ice6c66ec3b2a409d75dc903a508b6c6fbfb2e8a7
    Use sp<AudioTrack> instead of raw AudioTrack *
    
    This change prepares for the new implementation of AudioTrack client, which
    will require clients to use only sp<AudioTrack>, not raw AudioTrack *.
    A raw delete will cause a race condition during AudioTrack destruction.
    
    AudioTrack was made a RefBase by commit b68a91a70bc8d0d18e7404e14443d4e4020b3635
    on 2011/11/15, when it was needed by OpenSL ES (for the callback protector).
    At that time, the only other client that was also converted from
    AudioTrack * to sp<AudioTrack> was android.media.AudioTrack JNI in
    project frameworks/base (file android_media_AudioTrack.cpp).
    
    Details:
     * Use .clear() instead of delete followed by = NULL.
     * ALOG %p need .get().
     * sp<> don't need to be listed in constructor initializer, if initially 0.
     * Use == 0 for sp<> vs == NULL for raw pointers.
     * Use if (sp != 0) instead of if (raw).
    
    Change-Id: Ic7cad25795d6e862e112abdc227b6d33afdfce17
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    AV Android make files changes
    
    o plus a few file relocation: ActivityManager.cpp/h, SoundPool.h, etc
    o remove some runtime dependencies to libandroid, libandroid_runtime, etc
    
    Change-Id: I047a47c5fb361dd5cf85cd98798c39f629a75d10
    reorganize SoundPool and JetPlayer code.
    
    Reorganize SoundPool and JetPlayer code to be ready for the
    creation of libmedia_native.
    
    Split SoundPool between libsoundpool (JNI) and libmedia(sound pool implementation).
    Remove dependencies on nativehelper/jni.h from JetPlayer.
    
    Change-Id: I130c6014173b714329929dd82c5dfb70b757a610
    soundpool: allocate shared memory heap by client
    
    Current SoundPool implementation allocates the shared memory heap
    containing decoded PCM samples in mediaserver process.
    When mediaserver process crashes, the shared memory heaps allocated by
    AudioCache cannot be mapped anymore in the new instance of mediaserver.
    This causes a silent failure to end playback of new sounds because
    AudioFlinger believes the new AudioTracks are opened in streaming mode
    and not static mode: it sees a NULL shared memory pointer when the track
    is created.
    
    The fix consists in allocating the memory heap in the client process. Thus
    the heap is not lost when mediaserver restarts. The global memory usage is
    the same as this is shared memory.
    
    Also added a way to detect that a shared memory is passed when the track is
    created but cannot be mapped on mediaserver side.
    
    Also fix a crash in SoundPool when ALOGV is enabled.
    
    Bug: 10894793.
    Change-Id: Ice6c66ec3b2a409d75dc903a508b6c6fbfb2e8a7
    Update HTTP proxy configuration for all media playback inside stagefright.
    
    Change-Id: Ie0dd00045aba668d8b49da73224e7a7c9c04f69b
    related-to-bug: 8873723
    (cherry picked from commit 2704965b8a1ff3b7450ff58ccecf86d8ec688c40)
    Update HTTP proxy configuration for all media playback inside stagefright.
    
    Change-Id: Ie0dd00045aba668d8b49da73224e7a7c9c04f69b
    related-to-bug: 8873723
    (cherry picked from commit 2704965b8a1ff3b7450ff58ccecf86d8ec688c40)
    Implementing MediaDrm APIs
    
    Change-Id: I9ff8eeb7d0c383b5c0c68cd54eb54ce7d2d22fe6
    Implementing MediaDrm APIs
    
    Change-Id: I9ff8eeb7d0c383b5c0c68cd54eb54ce7d2d22fe6
    Plumbing to reflect minor changes in the HDCP module API that allow for
    
    support of _decryption_ modules in addition to what we already supported.
    
    Change-Id: Ic37b87dc170ba8def3817991d25df798f21e950b
    Plumbing to reflect minor changes in the HDCP module API that allow for
    
    support of _decryption_ modules in addition to what we already supported.
    
    Change-Id: Ic37b87dc170ba8def3817991d25df798f21e950b
    Remove unnecessary parameter
    
    Just get the parameter on server side
    
    Change-Id: I433a63104dbb257e0d862be2ab61847cb36d1c15
    Remove unnecessary parameter
    
    Just get the parameter on server side
    
    Change-Id: I433a63104dbb257e0d862be2ab61847cb36d1c15
    Remove legacy code and APIs in wifi display related code.
    
    Change-Id: Ia010e7a00534f9356b3247369d0ffd65591d91aa
    Remove legacy code and APIs in wifi display related code.
    
    Change-Id: Ia010e7a00534f9356b3247369d0ffd65591d91aa
    HDCP module binderized
    
    Change-Id: I866768b1e3f3b232f1934a35b65f66befc12f3f6
    HDCP module binderized
    
    Change-Id: I866768b1e3f3b232f1934a35b65f66befc12f3f6
    Implement remote display service stubs.
    
    Change-Id: I582ed000026bba6d116db8304e15a3c52f8a9a01
    Implement remote display service stubs.
    
    Change-Id: I582ed000026bba6d116db8304e15a3c52f8a9a01
    Only run the wifi display RTSP server on demand, and only on the wifi direct
    
    interface.
    
    Change-Id: I7d3c44cb79cd40e73499f2d7ccf35c69b628e6d7
    Only run the wifi display RTSP server on demand, and only on the wifi direct
    
    interface.
    
    Change-Id: I7d3c44cb79cd40e73499f2d7ccf35c69b628e6d7
    Initial checkin of support for acting as a wifi display source
    
    Change-Id: I08f17efa0c7d007e17408feb7d4fbef0a19f531a
    Initial checkin of support for acting as a wifi display source
    
    Change-Id: I08f17efa0c7d007e17408feb7d4fbef0a19f531a
    Provisional support for secure decryption of media streams.
    
    Change-Id: Ib3982a9c960bfdb0cb7e1b174440b141b194cfbe
    Use audio_format_t consistently
    
    Was int, uint32_t, uint16_t, and uint8_t with 2-bit bitfield.
    Also replace 0 by AUDIO_FORMAT_DEFAULT and replace 1 by
    AUDIO_FORMAT_PCM_16_BIT.
    
    Change-Id: Ia8804f53f1725669e368857d5bb2044917e17975
    Require INTERNET permission for network-based content.
    Bug #1870981
    
    Change-Id: Ia3ad166390c4d60cea19c3783895b078a2c4c15f
    - To track the usage of all audio output devices
    - To track the currently used audio device
    - The devices are separated as speaker and other audio devices
    - Provide the collected data to battery application through pullBatteryData()
    
    Change-Id: I374c755266b5ac6b1c6c630400f4daf901ea8acc
    - Add method in MediaPlayerService to collect and pull
      codec usage (duration) for the battery app
    - Collect MediaPlayer decoding usage data
    
    Change-Id: I0ef4e32b6a041ba1fe73c19f9c67185c61d03965
    Support streaming data across binder boundaries.
    
    Change-Id: Ifbac61406dcb81343765f99ccba08bd90f9274cc
    Added Visualizer effect.
    
    The visualizer enables application to retrieve part of the currently playing audio for visualization purpose.
    It is not an audio recording interface and only returns partial and low quality audio content as a waveform or
    a frequency representation (FFT).
    
    Removed temporary hack made in MediaPlayer for animated wall papers based on audio visualization (snoop() method.
    
    This commit also includes a change in AudioEffect class:
     - the enable()/disable() methods have been replaced bya more standard setEnabled() method.
     - some fixes in javadoc
    
    Change-Id: Id092a1340e9e38dae68646ade7be054e3a36980e
    Added support for audio sessions in MediaPlayer and AudioTrack.
    
    Audio sessions are used to associate audio effects to particular instances (or groups) of MediaPlayers or AudioTracks.
    
    Change-Id: Ib94eec43241cfcb416590f435ddce7ab39a07640
    API Extension: Support for optionally specifying a map of extra request headers when specifying the uri of media data to be played.
    
    related-to-bug: 2393577
    
    Original change by Andrei Popescu <andreip@google.com>
    eclair snapshot
    DO NOT MERGE: Squashed commit of the following:
    
    commit 08259dd3dc9026887f9bbfedaf45866eb56ea9bc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 5 12:02:31 2009 -0800
    
        DO NOT MERGE: Use PV for metadata extraction even if stagefright is used for playback.
    
    commit 991832fe4dc012e51d3d9ed8d647c7f09991858f
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 5 11:24:11 2009 -0800
    
        DO NOT MERGE: Do not assert if we encounter OMX_StateInvalid. All bets are off though.
    
    commit cec45cf302d9218fe79956cbe8a462d7ca3a10bb
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Oct 26 16:11:54 2009 -0700
    
        DO NOT MERGE: When freeing an OMX node, attempt to transition it from its current state all the way to "Loaded" in order to properly free any allocated buffers.
    
    commit 34a1e885ef9113d68acbc26d36fcc47fdebbed84
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 5 11:10:49 2009 -0800
    
        DO NOT MERGE: Fix heap corruptin in OMXNodeInstance.
    
    commit 5a47f7439a1298b330541a7e4e647a8b44487388
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 5 11:08:19 2009 -0800
    
        DO NOT MERGE: Fix seek-on-initial-read behaviour of OMXCodec.
    
    commit 45bed64722501b9f411a2940aff5aff4cc4d2e98
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 5 11:02:23 2009 -0800
    
        DO NOT MERGE: Renaming string.h to stagefright_string.h to avoid conflicts.
    
    commit 6738e306a50196f31a73d4fc7b7c45faff639903
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Oct 15 13:46:54 2009 -0700
    
        DO NOT MERGE: Reimplement the OMX backend for stagefright.
    
        Besides a major cleanup and refactoring, OMX is now a singleton living in the media server, it listens for death notifications of node observers/clients that allocated OMX nodes and performs/attempts cleanup.
    
        Changed APIs to conform to the rest of the system.
    Reimplement the OMX backend for stagefright.
    
    Besides a major cleanup and refactoring, OMX is now a singleton living in the media server, it listens for death notifications of node observers/clients that allocated OMX nodes and performs/attempts cleanup.
    
    Changed APIs to conform to the rest of the system.
    Music visualizer support hack.
    This currently assumes 44k stereo (won't crash on other formats, but won't give the correct results either), and links statically with libspeex to get FFT data, increasing the size of libmedia by about 45kb.
    donut snapshot
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    Direct api to the native media player.
    
    MediaPlayer.java has 3 new methods:
    * newRequest creates a Parcel that can be used to send data to the
      native player using invoke.
    * invoke issues synchronous calls to the native player using opaque
      parcels for the request and reply.
    
    IMediaPlayer.h has 1 new abstract method:
    * invoke
    
    The Midi and Vorbis players have a stub for these. So far only PV
    makes use of that new feature.
    
    To avoid any copy overhead, the JNI interface uses Parcel as a java
    object (no serialization/copy happens at the JNI layer).
    
    The remote interface token is inserted when the Parcel is constructed
    in java. That way the parcel is already routable when it reaches
     IMediaPlayer.cpp (proxy). No extra copy is needed there.
    Removed trailing whitespaces.
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Implement async event callout from drm plugin to Java app
    
    Change-Id: I007f147d693664e777b8758be2bb8a4c7ec0236b
    Whitespace and indentation
    
    Fix indentation to be multiple of 4.
    Make it easier to search:
      sp< not sp < to
      "switch (...)" instead of "switch(...)" (also "if" and "while")
    Remove redundant blank line at start or EOF.
    Remove whitespace at end of line.
    Remove extra blank lines where they don't add value.
    
    Use git diff -b or -w to verify.
    
    Change-Id: I966b7ba852faa5474be6907fb212f5e267c2874e
    Separate MediaRecorderClient with MediaPlayerClient
    
    - An alternative would be to define a common base class that
      both MediaRecorderClient and MediaPlayerClient can derive.
      But since the common code, onTransact() and notify() uses
      some Binder code, having a common base class may not gain
      us too much in terms of code reuse.
    
    Change-Id: Ibc06720278ad173fceacff3d267b7060856c6316
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Declare methods in binder opcode order
    
    Change-Id: I5f624b7a51ffe1a17a67c056cf984f74e4c56eac
    Clean up start() parameters
    
    Document where int is used instead of AudioSystem::sync_event_t
      (probably because of a header file dependency).
    TrackBase::start() and RecordTrack::start() don't need default parameters.
    
    Change-Id: I82f4a4d078be900f3aa4bd926697e32f5ed68ec8
    Configure policy of mediaserver threads
    
    Change-Id: Ifd825590ba36996064a458f64453a94b84722cb0
    implemented synchronous audio capture
    
    Added the infrastructure to support the synchronization of playback and
    capture actions on specific events.
    The first requirement for this feature is to synchronize the audio capture
    start with the full rendering of a given audio content.
    The applications can further be extended to other use cases
    (synchronized playback start...) by adding new synchronization events and
    new synchronous control methods on player or recorders.
    
    Also added a method to query the audio session from a ToneGenerator.
    
    Change-Id: I51f1167290d9cafdf2fbcdf9e4785156973af44c
    Whitespace and indentation
    
    Fix indentation to be multiple of 4.
    Make it easier to search:
      sp< not sp < to
      "switch (...)" instead of "switch(...)" (also "if" and "while")
    Remove redundant blank line at start or EOF.
    Remove whitespace at end of line.
    Remove extra blank lines where they don't add value.
    
    Use git diff -b or -w to verify.
    
    Change-Id: I966b7ba852faa5474be6907fb212f5e267c2874e
    AudioRecord and AudioTrack client tid
    
    Inform AudioFlinger of the tid of the callback thread.
    
    Change-Id: I670df92dd06749b057238b48ed1094b13aab720b
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Whitespace and indentation
    
    Fix indentation to be multiple of 4.
    Make it easier to search:
      sp< not sp < to
      "switch (...)" instead of "switch(...)" (also "if" and "while")
    Remove redundant blank line at start or EOF.
    Remove whitespace at end of line.
    Remove extra blank lines where they don't add value.
    
    Use git diff -b or -w to verify.
    
    Change-Id: I966b7ba852faa5474be6907fb212f5e267c2874e
    Support passing headers to MediaMetadataRetriever's setDataSource API
    
    Change-Id: Ib1a5c08fc5034cac05034db27007a35c9b660b26
    related-to-bug: 3506316
    Squash commits of the following patches, cherry-picked from other branch - do not merge.
    
    o Prepare for publishing MediaMetadataRetriever as public API
      step one:
      o replaced captureFrame with getFrameAtTime
      o removed getMode
    
    o Replace MediaMetadataRetriever.captureFrame() with MediaMetadataRetriever.getFrameAtTime()
      as part of the preparation for publishing MediaMetadataRetriever as public Java API
    
    o Remove captureFrame from MediaMetadataRetriever.java class
      It has been replaced by getFrameAtTime() method
    
    o Replace extractAlbumArt() with getEmbeddedPicture() in MediaMetadataRetriever.java
    
    o Publish MediaMetadataRetriever.java as public API
      o Removed setMode() methods and related mode constants
      o Removed some of the unused the metadata keys
      o Updated the javadoc
      o part of a multi-project change.
    
    bug - 3309041
    
    Change-Id: I2efb6e8b8d52897186b016cb4efda6862f5584c4
    Publish MediaMetadataRetriever.java as public API
    
    o Removed setMode() methods and related mode constants
    o Removed some of the unused the metadata keys
    o Updated the javadoc
    
    o part of a multi-project change.
    
    bug - 2433195
    
    Change-Id: I5ed167f1fd6a53cb143b7dc385b149431d434438
    Prepare for publishing MediaMetadataRetriever as public API
    
    step one:
    o replaced captureFrame with getFrameAtTime
    o removed getMode
    
    bug - 2433195
    
    Change-Id: I38a8cecef29014692f0b08b8818326e3ebb40a12
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    MediaTimeProvider support fixes
    
    Add MEDIA_SKIPPED event when resuming at a different time than
    seeked to.
    
    Send MEDIA_STARTED/PAUSED events only when playing (vs. when doing seek
    previews)
    
    Change-Id: I243ebf054303755ea8863229c3211694f2c204a7
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Bug: 10954008
    soundpool: allocate shared memory heap by client
    
    Current SoundPool implementation allocates the shared memory heap
    containing decoded PCM samples in mediaserver process.
    When mediaserver process crashes, the shared memory heaps allocated by
    AudioCache cannot be mapped anymore in the new instance of mediaserver.
    This causes a silent failure to end playback of new sounds because
    AudioFlinger believes the new AudioTracks are opened in streaming mode
    and not static mode: it sees a NULL shared memory pointer when the track
    is created.
    
    The fix consists in allocating the memory heap in the client process. Thus
    the heap is not lost when mediaserver restarts. The global memory usage is
    the same as this is shared memory.
    
    Also added a way to detect that a shared memory is passed when the track is
    created but cannot be mapped on mediaserver side.
    
    Also fix a crash in SoundPool when ALOGV is enabled.
    
    Bug: 10894793.
    Change-Id: Ice6c66ec3b2a409d75dc903a508b6c6fbfb2e8a7
    MediaPlayer: add listener for raw track data
    
    Bug: 10326117
    
    Change-Id: I2c0bdf8adc67b11f8dc633423bee66897548f181
    Add MEDIA_STARTED/PAUSED/STOPPED events to media players
    
    This is needed for the MediaTimeProvider java interface, so it does not
    continually poll for current media time.
    
    Note: NuPlayer and AwesomePlayer do not correctly handle stop (pause
    instead), so for those we will signal PAUSED.
    
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Change-Id: I3c61e1bda475f131323f475c18a42e3ec66c9ae1
    Bug: 10326117
    Update HTTP proxy configuration for all media playback inside stagefright.
    
    Change-Id: Ie0dd00045aba668d8b49da73224e7a7c9c04f69b
    related-to-bug: 8873723
    (cherry picked from commit 2704965b8a1ff3b7450ff58ccecf86d8ec688c40)
    Update HTTP proxy configuration for all media playback inside stagefright.
    
    Change-Id: Ie0dd00045aba668d8b49da73224e7a7c9c04f69b
    related-to-bug: 8873723
    (cherry picked from commit 2704965b8a1ff3b7450ff58ccecf86d8ec688c40)
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Add support for HLS playlists of type 'event'.
    
    related-to-bug: 6870049
    
    Squashed commit of the following:
    
    commit eee2f3ba6bb7335f4e285632726db85645669929
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 15:02:01 2012 -0800
    
        Make everything a lot less verbose by default.
    
        Change-Id: I884d7a7901aa1e7d4ff590f065ca57a79d2af8b3
    
    commit 6bbdb837ed5bd88008e45efb8faf595e4051ba26
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 14:34:46 2012 -0800
    
        HLS now properly signals media time changes at discontinuities including
    
        the start of playback (which may not necessarily be at time 0 if the playlist
        is of type 'event' and hasn't completed yet).
    
        Change-Id: I5ab747d024f9b8d0df72a4e06a12ebb29f62802e
    
    commit 1555589832b1878a144a976a643e1af4d61f877c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 14:32:28 2012 -0800
    
        As part of a time discontinuity, clients of IStreamListener can now
    
        signal the corresponding media time after the discontinuity, i.e. the first PTS
        timestamp following the discontinuity will be considered equivalent to the
        specified media time and media buffers timestamped accordingly.
    
        Change-Id: Id7db7679b7faa6efd6270620ff52e34e884f3e92
    
    commit 5c24c605c073a11c426d025b1e7478fc1ad8365a
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 13:00:56 2012 -0800
    
        NuPlayer sources now expose flags() and can announce
    
        that duration may change (increase) dynamically, in which case duration
        will be polled at 1 second intervals and communicated to the upper layers.
    
        Change-Id: I45102909b7a19eed0dda576747e3814d742a0eea
    
    commit ecb71de8e281e61971a2cd73e7161a97540bc357
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 12:57:47 2012 -0800
    
        Stop caching duration in MediaPlayer, duration could increase dynamically.
    
        Change-Id: I7bb2f16c0abe49debdf45c776d2266aa069d7791
    
    commit 544aec5823e6d7a3e97e15b6b23546616bcd343e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 08:46:28 2012 -0800
    
        An attempt to add support for "event" style HLS playlists.
    
        Change-Id: I3dfb2e801ecaff8f5d8bdb3a4fca1b18aeeb2c60
    
    Change-Id: I48cf7f65a654d33f2f49ded74f8be22aed9e3b98
    Add support for HLS playlists of type 'event'.
    
    related-to-bug: 6870049
    
    Squashed commit of the following:
    
    commit eee2f3ba6bb7335f4e285632726db85645669929
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 15:02:01 2012 -0800
    
        Make everything a lot less verbose by default.
    
        Change-Id: I884d7a7901aa1e7d4ff590f065ca57a79d2af8b3
    
    commit 6bbdb837ed5bd88008e45efb8faf595e4051ba26
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 14:34:46 2012 -0800
    
        HLS now properly signals media time changes at discontinuities including
    
        the start of playback (which may not necessarily be at time 0 if the playlist
        is of type 'event' and hasn't completed yet).
    
        Change-Id: I5ab747d024f9b8d0df72a4e06a12ebb29f62802e
    
    commit 1555589832b1878a144a976a643e1af4d61f877c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 14:32:28 2012 -0800
    
        As part of a time discontinuity, clients of IStreamListener can now
    
        signal the corresponding media time after the discontinuity, i.e. the first PTS
        timestamp following the discontinuity will be considered equivalent to the
        specified media time and media buffers timestamped accordingly.
    
        Change-Id: Id7db7679b7faa6efd6270620ff52e34e884f3e92
    
    commit 5c24c605c073a11c426d025b1e7478fc1ad8365a
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 13:00:56 2012 -0800
    
        NuPlayer sources now expose flags() and can announce
    
        that duration may change (increase) dynamically, in which case duration
        will be polled at 1 second intervals and communicated to the upper layers.
    
        Change-Id: I45102909b7a19eed0dda576747e3814d742a0eea
    
    commit ecb71de8e281e61971a2cd73e7161a97540bc357
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 12:57:47 2012 -0800
    
        Stop caching duration in MediaPlayer, duration could increase dynamically.
    
        Change-Id: I7bb2f16c0abe49debdf45c776d2266aa069d7791
    
    commit 544aec5823e6d7a3e97e15b6b23546616bcd343e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 08:46:28 2012 -0800
    
        An attempt to add support for "event" style HLS playlists.
    
        Change-Id: I3dfb2e801ecaff8f5d8bdb3a4fca1b18aeeb2c60
    
    Change-Id: I48cf7f65a654d33f2f49ded74f8be22aed9e3b98
    Added a callback to signal when the rendering of the video frame just occurred
    
    Change-Id: Ifbd78606ffc33483aecebf02cb18e0e52af9624d
    related-to-bug: 6851811
    Impl for supporting two video scaling modes
    
    o allows the video scaling mode to change at any time
    o also remove the scaling mode logic in OMXCodec.cpp
    
    o related-to-bug: 5454345
    
    Change-Id: I6f1714eb0c2774591ce650d56c1e779b8afd085f
    Defines MediaPlayer APIs to support multiple audio/video/timedtext
    tracks.
    
    o Newly introduced APIs are (MediaPlayer):
      getTrackInfo() / addExternalSource() / enableTrack() / disableTrack().
    
    o Timed text tracks are supported only, for now.
    
    o TODOs:
     - Define the audio/video behavior for enableTrack and disableTrack.
     - Refactoring AwesomePlayer / TimedTextDriver so that all types of
       track index can be managed in the correct order and be ready for
       supporting audio/video tracks.
       (MediaExtractor and MediaSource for text file might be necessary.)
    
    Change-Id: Idb85e1b3f2ed49a64f377d05472dd6663ce94e07
    Gapless playback, step 1.
    
    Currently able to play Ogg Vorbis, PCM WAV and other lossless files seamlessly
    by reusing the initial AudioTrack for subsequent players.
    
    Change-Id: Ie7cf6b9076bdf4f9211574456d192c02c04fecc7
    Switch the way we configure for MediaPlayer retransmission.
    
    This is a cherry-pick of I6ab07d89b2eeb0650e634b8c3b7a0b36aba4e7dd
    with merge conflicts addressed by hand and additional changes made in
    response to code review feedback.
    
    Move in the direction of a more publishable API for configuring a
    media player for retransmission.  It used to be that we used a custom
    invoke and a modified URL (prefixed with aahTX://).  There are many
    issues with this technique and it was never meant to stand the test of
    time.
    
    This CL gets rid of all that.  A new (but currently hidden) method was
    introduced to the java level MediaPlayer API, called
    setRetransmitTarget(InetSocketAddress), which allows an app writer to
    set the retransmit target.  For now, this method needs to be called
    before a call to setDataSource (which is pretty unusual for the
    MediaPlayer API) because this mid level code uses this as a cue to
    instantiate an aahTX player instead of relying on the data source to
    select a player.  When retranmit functionality becomes part of the
    existing android player implemenation, this
    set-retrans-before-set-data-source behavior can go away, along with
    the aahTX player itself.
    
    Change-Id: I3b46c5227bbf69acb2f3cc4f93cfccad9777be98
    Signed-off-by: John Grossman <johngro@google.com>
    Switch the way we configure for MediaPlayer retransmission.
    
    Move in the direction of a more publishable API for configuring a
    media player for retransmission.  It used to be that we used a custom
    invoke and a modified URL (prefixed with aahTX://).  There are many
    issues with this technique and it was never meant to stand the test of
    time.
    
    This CL gets rid of all that.  A new (but currently hidden) method was
    introduced to the java level MediaPlayer API, called
    setRetransmitTarget(InetSocketAddress), which allows an app writer to
    set the retransmit target.  For now, this method needs to be called
    before a call to setDataSource (which is pretty unusual for the
    MediaPlayer API) because this mid level code uses this as a cue to
    instantiate an aahTX player instead of relying on the data source to
    select a player.  When retranmit functionality becomes part of the
    existing android player implemenation, this
    set-retrans-before-set-data-source behavior can go away, along with
    the aahTX player itself.
    
    Change-Id: I6ab07d89b2eeb0650e634b8c3b7a0b36aba4e7dd
    Revert "Add a way to play file descriptor data sources using the A@H transmitter media player."
    
    This reverts commit 64006cb1642b2ec0ee74c66007d869b884391fd1.
    
    Back out this change in order to get ready to implement a longer term,
    more media-team approved way of selecting a retransmit player.
    
    Change-Id: I97b68b9859a174eab858598cb00d4445a14fbc17
    Playback rate on MediaPlayer
    
    Add support for modifying the playback rate of a MediaPlayer
     by altering the sample rate of its AudioTrack.
    The playback rate is expressed in permille, where 1000 is the
     playback at normal speed.
    
    Change-Id: I981d060ab32f7bae7a767e82c60c88ae635dceed
    Add a way to play file descriptor data sources using the A@H transmitter media player.
    
    * Added a MediaPlayer.setMediaPlayerType API that be called to specify the
      desired media player implementation before calling setDataSource
    * Implemented setDataSource(fd) in the AAH_TxPlayer
    
    Change-Id: I359075d9c7d6fd699dda14eb85ec50da19307639
    Use audio_stream_type_t consistently
    
    At native level it was a mixture of audio_stream_type_t, int, uint32_t,
    and uint8_t.  Java is still int.  Also fixed a couple of hard-coded -1
    instead of AUDIO_STREAM_DEFAULT, and in startToneCommand a hard-coded 0
    instead of AUDIO_STREAM_VOICE_CALL.
    
    Change-Id: Ia33bfd70edca8c2daec9052984b369cd8eee2a83
    Use audio_format_t consistently
    
    Was int, uint32_t, uint16_t, and uint8_t with 2-bit bitfield.
    Also replace 0 by AUDIO_FORMAT_DEFAULT and replace 1 by
    AUDIO_FORMAT_PCM_16_BIT.
    
    Change-Id: Ia8804f53f1725669e368857d5bb2044917e17975
    Remove surface legacy APIs and code.
    
    All surfaces are now supported through surface textures.
    
    Change-Id: I95dd823e7099c0c32a48a1121624149dcc29d9c6
    Stagefright: ANW::connect in MediaPlayerService
    
    This change moves the ANativeWindow connect and disconnect logic from
    MediaPlayer to MediaPlayerService::Client.
    
    Bug: 5502654
    Change-Id: Ifc43b98b01ad8f35d62d7ece43110724ec7fda3d
    Require INTERNET permission for network-based content.
    Bug #1870981
    
    Change-Id: Ia3ad166390c4d60cea19c3783895b078a2c4c15f
    Bug 4599730 Get audio channel count on MediaPlayer
    
    Related changes:
     - Fix bug in get/setParameter* to recycle Parcels when done with them.
    
    Change-Id: Iaff05e91bbd99a14fccb79d816dd873359b6ae65
    MediaPlayer: add ANativeWindow (dis)connect calls
    
    This change makes MediaPlayer connect to the ANativeWindow to which it
    is going to render video frames and disconnect when it is done.
    
    Change-Id: I88ab5c2fe62493aabdc84a283ff31634f795d415
    Send estimated bandwidth value as informational event when cache fetcher pauses
    
    o Application can make informed decision about the available network bandwidth
      when cache fetcher pauses.
    
    o Application can also adjust how frequently the bandwidth is estimated within
      a range from one second to one minute.
    
    Change-Id: I90068001343e79da1886de03c565537787e1580b
    For out of band timed text support (timed text in a separate file).
    
    Change-Id: I9e024a63eb9bf6f839deee3c7766a66e63126c96
    Initial CL for the timed text support:
    - Add support for MP4 timed text
    - Add API for app to turn on/off a text track
    - Add timed text metadata(language) in the MediaMetadataRetriever
    
    Change-Id: I0055beba38ac761627dbcc6d581ae9582d68bb94
    Add setParameter/getParameter to MediaPlayer API.
    for bug 1982947
    
    Change-Id: If3f40e4f18cbba155af29944af38bdc627f8cd53
    - Add another parameter in notify() to be able to send timed text sample
    through listener during video playback.
    - Add OnTimedTextListener in the MediaPlayer
    For feature request 800939.
    
    Change-Id: I65072c27acb4c0037109a72be38c73e9f667420f
    Bug 3438258 Add SurfaceTexture as MediaPlayer sink
    
    This change enables the use of a SurfaceTexture in place of a Surface
    as the video sink for an android.media.MediaPlayer. The new API
    MediaPlayer.setTexture is currently hidden.
    
    This includes:
     - New Java and C++ interfaces
     - C++ plumbing and implementation (JNI, Binder)
     - Stagefright AwesomePlayer and NuPlayer use ANativeWindow
       (either Surface or SurfaceTextureClient)
    
    Change-Id: I2b568bee143d9eaf3dfc6cc4533c1bebbd5afc51
    Seek/Duration support for completed http live streams in NuPlayer.
    
    Change-Id: I55bbe75d87140c07b1927d14ad24130fce803463
    related-to-bug: 3321475
    Properly shutdown the decoders on a reset() in NuPlayer's implementation.
    
    related-to-bug: 3321470
    Change-Id: Ida6d2171c5a3a407188d4633602b764f8fe7086a
    Squashed commit of the following:
    
    commit 0d5694ba2d399dd0869532a4d6256448185a1be0
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Oct 29 11:59:23 2010 -0700
    
        suspend() and resume() methods on VideoView are back but don't do anything.
    
        They need to be back because they were public before.
    
        Change-Id: Iddfd1021ffcf341f26e8d55ba761fd33701e2425
    
    commit 16192891ed7d349ee97e47d1729d20a2d0d247b8
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Oct 29 11:47:05 2010 -0700
    
        Revert "New API on VideoView widget to suspend/resume a session. Do not release the MediaPlayer client for video suspending/resuming."
    
        This reverts commit 2e1818a4d16c3309660f27286c77d8d1eee95a25.
    
        Conflicts:
    
            api/current.xml
    
        Change-Id: I68dd1d05871044faf3f832d0838aa40bc7f890e5
    
    commit 8f934dc1a3ae4e60f0790fcf97671e063fa20fad
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Oct 29 11:44:16 2010 -0700
    
        Revert "Release mediaplayer if the current state is not suspending. Fix for bug 2480093."
    
        This reverts commit efb882cf75eef39ecaf9f8920ed302a019fa629f.
    
    commit f2ed03550887986f39d36b5dabcd9e919949c7cf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Oct 29 11:44:08 2010 -0700
    
        Revert "Release MediaPlayer if suspend() returns false."
    
        This reverts commit 047212fd4ea360675e94d3ce83c7f5544f65b268.
    
    commit 441ecce678bd24e9660a72c8627b5bd94433ff8b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Oct 29 11:40:46 2010 -0700
    
        manually.
    
        Change-Id: I4fdd43c9f7c8b3eedddb31a196da4984e1c58e87
    
    Change-Id: I60d4b10e7a9e4ed8d9a796f1711618f557eb6e89
    Added support for auxiliary audio effects to AudioTrack and MediaPlayer.
    
    Added methods to AudioTrack and MediaPlayer java classes to enable use of
    auxiliary audio effects. The effect can be attached and detached by specifying its
    ID and the send level controlled.
    
    Change-Id: Ie74ff54a453096a742688476f612ce355543b6f3
    Added Visualizer effect.
    
    The visualizer enables application to retrieve part of the currently playing audio for visualization purpose.
    It is not an audio recording interface and only returns partial and low quality audio content as a waveform or
    a frequency representation (FFT).
    
    Removed temporary hack made in MediaPlayer for animated wall papers based on audio visualization (snoop() method.
    
    This commit also includes a change in AudioEffect class:
     - the enable()/disable() methods have been replaced bya more standard setEnabled() method.
     - some fixes in javadoc
    
    Change-Id: Id092a1340e9e38dae68646ade7be054e3a36980e
    Added support for audio sessions in MediaPlayer and AudioTrack.
    
    Audio sessions are used to associate audio effects to particular instances (or groups) of MediaPlayers or AudioTracks.
    
    Change-Id: Ib94eec43241cfcb416590f435ddce7ab39a07640
    Switch stagefright's approach to prefetching to the new model. The java MediaPlayer is now notified about rebuffering start/end via info messages.
    
    Change-Id: If8185ba329ce8b6663b1ad39a4efb0ad3be81df2
    New API on java's MediaPlayer to suspend/resume a session.
    
    related-to-bug: 2231576
    split libsurfaceflinger_client and libcamera_client out of libui
    API Extension: Support for optionally specifying a map of extra request headers when specifying the uri of media data to be played.
    
    related-to-bug: 2393577
    
    Original change by Andrei Popescu <andreip@google.com>
    Media server death nodification
    eclair snapshot
    Music visualizer support hack.
    This currently assumes 44k stereo (won't crash on other formats, but won't give the correct results either), and links statically with libspeex to get FFT data, increasing the size of libmedia by about 45kb.
    Update comment in mediaplayer.h.
    
    When sending a MEDIA_INFO message, the second integer is supposed
    to be an "info" code instead of an "error" code.
    donut snapshot
    Basic plumbing to retrieve metadata from the native player.
    
    IMediaPlayer.h
    Added a getMetadata method that mirrors the on in MediaPlayer.java.
    
    MediaPlayer.java
    Added a native method to get the metadata from the native player.
    Parse the parcel into a Metadata object.
    
    Metadata.java
    Added a stub to parse the Parcel returned by the native player into
    a set of metadata.
    
    android_media_MediaPlayer.cpp
    JNI call to forward the getMetadata call.
    
    MediaPlayerService.cpp
    MediaPlayerService::Client implements the new getMetadata method added in IMediaPlayer.h
    Implemented the metadata changed notification filters.
    
    IMediaPlayer:
    new setMetadataFilter method so set a filter (2 lists of allowed and blocked metadata type)
    serialized in a Parcel.
    
    MediaPlayer.java/android_media_MediaPlayer.cpp/mediaplayer.cpp
    new setMetadataFilter that passes the filter down to the MediaPlayerService's binder interface.
    
    MediaPlayerService.cpp
    The Client inner class holds the allowed and blocked metadata types.
    These are in 2 vectors that get populated in the setMetadataFilter.
    
    A new shourldDropMetadata method returns true if a type of metadata should be dropped according
    to the filters.
    
    The notify method in run the metadata update notifications thru the filter and possibly drop them.
    Direct api to the native media player.
    
    MediaPlayer.java has 3 new methods:
    * newRequest creates a Parcel that can be used to send data to the
      native player using invoke.
    * invoke issues synchronous calls to the native player using opaque
      parcels for the request and reply.
    
    IMediaPlayer.h has 1 new abstract method:
    * invoke
    
    The Midi and Vorbis players have a stub for these. So far only PV
    makes use of that new feature.
    
    To avoid any copy overhead, the JNI interface uses Parcel as a java
    object (no serialization/copy happens at the JNI layer).
    
    The remote interface token is inserted when the Parcel is constructed
    in java. That way the parcel is already routable when it reaches
     IMediaPlayer.cpp (proxy). No extra copy is needed there.
    Removed trailing whitespaces.
    move libbinder's header files under includes/binder
    Automated import from //branches/master/...@140868,140868
    Automated import from //branches/donutburger/...@140866,140866
    auto import from //branches/cupcake_rel/...@141571
    auto import from //branches/cupcake/...@137873
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add media.log service based on NBLog
    
    Change-Id: Ie45093df6ac9a739d05c8d408fab52a9a8a27e7f
    Add media.log service based on NBLog
    
    Change-Id: Ie45093df6ac9a739d05c8d408fab52a9a8a27e7f
    Add ability to test supported content types to MediaDrm
    
    bug: 10244066
    Change-Id: I317f05b146db962c271893f6208890a5a6c396f1
    Implement async event callout from drm plugin to Java app
    
    Change-Id: I007f147d693664e777b8758be2bb8a4c7ec0236b
    Implement async event callout from drm plugin to Java app
    
    Change-Id: I007f147d693664e777b8758be2bb8a4c7ec0236b
    MediaDrm API update
    
    Clarify offline usage of sessions and keys and implement
    implement CryptoSession to support additional crypto use
    cases.
    
    Change-Id: I5d8000ce7e1dd7eba08969fc50296c9e1456c4fc
    MediaDrm API update
    
    Clarify offline usage of sessions and keys and implement
    implement CryptoSession to support additional crypto use
    cases.
    
    Change-Id: I5d8000ce7e1dd7eba08969fc50296c9e1456c4fc
    Implementing MediaDrm APIs
    
    Change-Id: I9ff8eeb7d0c383b5c0c68cd54eb54ce7d2d22fe6
    Implementing MediaDrm APIs
    
    Change-Id: I9ff8eeb7d0c383b5c0c68cd54eb54ce7d2d22fe6
    Add support for level measurements in Visualizer
    
    New commands to set a measurement mode and perform peak + RMS
     measurements.
    
    Bug 8413913
    
    Change-Id: Ib25254065c79d365ebb34f9dc9caa0490e2d300d
    Include what is needed
    
    Remove old includes.
    Header files only include other header files that they directly need themselves.
    
    Change-Id: Ic471386808d9f42ea19ccbd59cb50a5f83a89dd0
    Remove dead code in libmedia
    
    Change-Id: I7d8201590cda29c9fa99662a4fdba222091febfe
    Add support for scaling mode parameter
    
    Support VISUALIZER_PARAM__SCALING_MODE parameter.
    
    Modify process() function to use new volume scaling parameter,
     used to set whether captured values are maximized by current
     headroom in the buffer (default existing behaviora) or left
     as is and thus affected by volume.
    
    Modify AudioEffect to allow subclasses to override the following
     events: control status changed, enable status changed, command
     executed.
    In Visualizer class (a subclass of AudioEffect), reset the
     scaling mode and capture size on the actual effect
     as cached when control is regained.
     This will allow the effect to be properly
     configured whenever Visualizers with different scaling
     modes or capture sizes are released (e.g. from java
     release() method).
    
    Change-Id: I05cb9f925a296dceca91bafa9fe294ef2b2c2bd5
    Use NULL not 0 for raw pointers
    
    Use if (p != NULL) instead of if (ptr)
    
    Change-Id: Iaec3413a59ccbf233c98fcd918cc7d70ac5da9fa
    Rename Visualizer::mLock
    
    This avoids confusion with parent class AudioEffect's mLock which is
    protected.
    
    Change-Id: I2ae0b0869fe3c606f682252973795b34477951d0
    Moved and renamed effect API header files
    
    Moved specific effect header files to
    system/media/audio_effects/include/audio_effects
    and renamed to lower case (effect_xxx.h).
    
    Change-Id: Icfc2264bfd013cab0395d7e310ada636b9fe3621
    Visualizer: replace the FFT implementation with a faster one.
    
    This implementation uses fixed points instead of floating points. It
    is slightly inaccurate compared to the old one but still perfect for
    visualization purpose. It runs 40% faster on passion, 5 times faster
    on sholes, and of course 14 times faster on sapphire.
    
    Change-Id: I1e868417bcffda091becf106a7b941d02813faec
    Added Visualizer effect.
    
    The visualizer enables application to retrieve part of the currently playing audio for visualization purpose.
    It is not an audio recording interface and only returns partial and low quality audio content as a waveform or
    a frequency representation (FFT).
    
    Removed temporary hack made in MediaPlayer for animated wall papers based on audio visualization (snoop() method.
    
    This commit also includes a change in AudioEffect class:
     - the enable()/disable() methods have been replaced bya more standard setEnabled() method.
     - some fixes in javadoc
    
    Change-Id: Id092a1340e9e38dae68646ade7be054e3a36980e
    * Gut the use of AudioFlinger for recording and replace it with custom RecordThread, RecordTrack and RecordHandle implementations
    * Make sure addBatteryData is disabled so that MediaService isn't called
    * Disable AudioFlinger call to get number of frame lost
    * Audio recording works, also clean up the code to remove many of the unnecessary commented out AudioFlinger calls
    * Clean up code more, removed commented out lines of code that will never be used, added some comments
    
    Change-Id: I875bc90223369d9a5653c5aeeb2d49175f65e08b
    Signed-off-by: Jim Hodapp <jim.hodapp@canonical.com>
    AudioSystem: new audioflinger restart detection
    
    Add a specific method to AudioSystem for AudioService to poll
    for AudioFlinger service restart instead of relying on current
    callback mechanism which is flaky.
    
    Bug: 9693068.
    Change-Id: Ie88bc9d25033503bc5cd2fa9d8c754d0f8045b8f
    Use correct type for OutputDescriptor::format
    
    Change-Id: Ide608ef452d57da29b708180d90470361c123d1d
    Use standard name and type for channel mask
    
    Former name 'channels' was ambiguous with respect to channel count.
    
    Change-Id: I716f792d95a7e0c787d27514ad6e93dbcef8a415
    Use AudioSystem::setLowRamDevice() to configure memory
    
    Bug: 9798886
    Change-Id: I9321e3f369f1ed9429ae222e3926ebdeb012b8b0
    Include what is needed
    
    Remove old includes.
    Header files only include other header files that they directly need themselves.
    
    Change-Id: Ic471386808d9f42ea19ccbd59cb50a5f83a89dd0
    Public API changes for audio offload support.
    
    NOTE: this does _not_ include all private member variables added
    to classes as part of offload support. Only public/protected functions
    and stubs functions/variables needed to make the changes buildable.
    
    - isOffloadSupported() added to audio policy service
        A stub implementation is required to build, this always returns false
    - setParameters() added to IAudioTrack
        A stub implementation is required to build, this always returns
        INVALID_OPERATION
    
    - CBlk flag for stream end
    
    - Change AudioSystem::getRenderPosition() to take an audio_output_t
        so caller can specify which output to query
    
    - Add AudioSystem::isOffloadSupported()
        This is fully implemented down to the AudioFlinger function
        AudioPolicyServer::isOffloadSupported() which is just a stub
        that always returns false.
    
    - Add EVENT_STREAM_END to AudioTrack interface.
        STREAM_END is used to signal when the hardware has actually finished
        playing all the data it was sent.
    
    - Add event type enumeration to media player interface AudioSink callbacks
        so that the same callback can be used to handle multiple types of
        event. For offloaded tracks we also have to handle STREAM_END and
        TEAR_DOWN events
    
    - Pass audio_offload_info_t to various functions used for opening outputs,
        tracks and audio players. This passes additional information about the
        compressed stream down to the HAL when using offload.
        For publicly-available APIs this is an optional parameter (for some of
        the internal and low-level APIs around the HAL interface it is mandatory)
    
    - Add getParameters() and setParameters() API to AudioTrack
        Currently dummy implementations.
    
    - Change AudioPlayer contructor so that it takes a set of bitflags defining what
        options are required. This replaces the original bool which only specified
        whether to use deep buffering.
    
    - Changes to StageFright class definition related to handling tearing-down of
        an offloaded track when we need to switch back to software decode
    
    - Define new StageFright utility functions used for offloaded tracks
        Currently dummy implementations.
    
    - AudioFlinger changes to use extended audio_config_t.
        Fills in audio_offload_info_t member if this info is passed in when
        opening an output.
    
    - libvideoeditor changes required to add the new event type parameter
        to AudioSink callback functions
    
    - libmediaplayerservice changes required to add the new event type parameter
        to AudioSink callback functions
    
    Change-Id: I3ab41138aa1083d81fe83b886a9b1021ec7320f1
    Signed-off-by: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
    Signed-off-by: Eric Laurent <elaurent@google.com>
    Add support for querying if a stream is active remotely
    
    Bug 7485803
    
    Change-Id: I0744374f130fd2dd0714102354cffed2fa915361
    Add support for querying if a stream is active remotely
    
    Bug 7485803
    
    Change-Id: I0744374f130fd2dd0714102354cffed2fa915361
    Use size_t for frame counts
    
    Also fix typo: bufferCount should be frameCount.
    
    Change-Id: Ibed539504db75ef99dc21c8ff1bf2987122063a5
    Use size_t for frame counts
    
    Also fix typo: bufferCount should be frameCount.
    
    Change-Id: Ibed539504db75ef99dc21c8ff1bf2987122063a5
    Use uint32_t for sample rate
    
    Change-Id: Ie240b48fb54b08359f69ecd4e5f8bda3d15cbe80
    Use uint32_t for sample rate
    
    Change-Id: Ie240b48fb54b08359f69ecd4e5f8bda3d15cbe80
    Remove deprecated AudioSystem methods
    
    Change-Id: I952d504e03af9a1d3e1e0aa379c82dfb00197d9f
    Remove deprecated AudioSystem methods
    
    Change-Id: I952d504e03af9a1d3e1e0aa379c82dfb00197d9f
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Support querying active record sources
    
    Add support for querying whether there is currently a recording
     underway from the specified audio source.
    
    Bug 7314859
    
    Change-Id: I986b231a10ffd368b08ec2f9c7f348d28eaeb892
    Support querying active record sources
    
    Add support for querying whether there is currently a recording
     underway from the specified audio source.
    
    Bug 7314859
    
    Change-Id: I986b231a10ffd368b08ec2f9c7f348d28eaeb892
    Implement android.media.AudioManager.getProperty()
    
    Bug: 6635041
    Change-Id: I3386a4a6c226bc4eceaf65556119e4fb15f73224
    Implement android.media.AudioManager.getProperty()
    
    Bug: 6635041
    Change-Id: I3386a4a6c226bc4eceaf65556119e4fb15f73224
    effect_descriptor_t const correctness
    
    Change-Id: Iad008f20d35a18acf500f773900164552fd0c19e
    Simplify AudioRecord::getInputFramesLost()
    
    This also fixes a benign race in reading mActive without a lock.
    
    Change-Id: I19e953d4f275e5c266ca1ca3fece7b6c02ad1707
    Use audio_channel_mask_t more places
    
    Use it in AudioSystem::getOutput(), AudioSystem::getInput(),
    IAudioPolicyService::getOutput(), IAudioPolicyService::getInput(),
    and various other places in AudioFlinger.
    
    Not done: AudioTrack and OutputDescriptor.
    
    Change-Id: I70e83455820bd8f05dafd30c63d636c6a47cd172
    Use audio_channel_mask_t more consistently
    
    In IAudioFlinger::createTrack() and IAudioFlinger::openRecord(),
    declare input parameter to use correct type audio_channel_mask_t.
    
    In IAudioFlinger::getInputBufferSize(), input parameter is now channel mask
    instead of channel count.
    
    Remove unused IAudioFlinger::channelCount(audio_io_handle_t).
    
    In AudioRecord::getMinFrameCount() and AudioSystem::getInputBufferSize(),
    input parameter is channel mask instead of channel count.
    
    Change-Id: Ib2f1c29bea70f016b3cfce83942ba292190ac965
    Remove acoustics from AudioSystem::getInput()
    
    Change-Id: I29fb3ee5664c1f0ee0409c1bb2be087ecca637db
    Fix issues with synchronous record start.
    
    - Added a timeout in case the trigger event is never fired.
    - Extend AudioRecord obtainBuffer() timeout in case of
    synchronous start to avoid spurious warning.
    - Make sure that the event is triggered if the track is
    destroyed.
    - Reject event if the triggering track is in an incompatible state.
    
    Also fix a problem when restoring a static AudioTrack after
    a mediaserver crash.
    
    Bug 6449468.
    
    Change-Id: Ib36e11111fb88f73caa31dcb0622792737d57a4b
    rename audio policy output flags
    
    Change-Id: I27c46bd1d1b2b5f96b87af7d05b951fef18a1312
    audio policy: add configuration file
    
    removed outputs to stream mapping cache in audio system: the output for a
    given stream type must always be queried from audio policy manager as the cache
    is not always updated fast enough by audioflinger callback.
    
    removed AudioFlinger::PlaybackThread::setStreamValid() not used anymore if
    stream to output mapping is not cached.
    
    Change-Id: Ieca720c0b292181f81247259c8a44359bc74c66b
    implemented synchronous audio capture
    
    Added the infrastructure to support the synchronization of playback and
    capture actions on specific events.
    The first requirement for this feature is to synchronize the audio capture
    start with the full rendering of a given audio content.
    The applications can further be extended to other use cases
    (synchronized playback start...) by adding new synchronization events and
    new synchronous control methods on player or recorders.
    
    Also added a method to query the audio session from a ToneGenerator.
    
    Change-Id: I51f1167290d9cafdf2fbcdf9e4785156973af44c
    audio policy: use audio_devices_t when appropriate
    
    Change-Id: I1b3a5879e81c789fb53d356af3d3a1ee2dca955f
    IAudioFlingerClient::ioConfigChanged param2 const
    
    The 3rd parameter (param2) to AudioFlingerClient::ioConfigChanged
    is used as an input.  So changed it from void * to const void *.
    It is then cast to const OutputDescriptor *
    or const audio_stream_type_t * depending on the event.
    
    Change-Id: Ieec0d284f139b74b3389b5ef69c7935a8e5650ee
    renamed audio policy output flag.
    
    Renamed AUDIO_POLICY_OUTPUT_FLAG_INDIRECT to AUDIO_POLICY_OUTPUT_FLAG_NONE
    which is more appropriate.
    
    Change-Id: Ia14d60397df0f2dcd9bea0186400a09da35bc104
    Update comments
    
    We no longer put the filename at start of file.
    
    Change-Id: Ic435b159a23105681e3d4a6cb1ac097bc853302e
    Use audio_io_handle_t consistently instead of int
    
    Other:
     - add a comment to nextUniqueId
     - made ThreadBase::mId const, since it is only assigned in constructor.
    
    Change-Id: I4e8b7bec4e45badcde6274d574b8a9aabd046837
    More audio_stream_type_t
    
    Change-Id: I1260259efe0aa3fc1ef13de69758aaa592e1f815
    Use audio_source_t consistently
    
    Was a mix of audio_source_t, uint8_t, and int.
    
    Related fixes:
     - fix comments in MediaRecorder.java
     - AudioPolicyService server side was not checking source parameter at
       all, so if the client wrapper was bypassed, invalid values could be
       passed into audio HAL
     - JNI android_media_AudioRecord_setup was checking source for positive
       values, but not negative values. This test is redundant, since already
       checked at Java and now checked by AudioPolicyService also, but might
       as well make it correct.
    
    Change-Id: Ie5e25d646dcd59a86d7985aa46cfcb4a1ba64a4a
    Use audio_format_t consistently, continued
    
    Was int or uint32_t.
    
    When AudioFlinger::format can't determine the correct format,
    return INVALID rather than DEFAULT.
    
    Init mFormat to INVALID rather than DEFAULT in the constructor.
    Subclass constructors will set mFormat to the correct value.
    
    Change-Id: I9b62640aa107d24d2d27925f5563d0d7407d1b73
    Remove dead setRingerMode(mode, mask)
    
    Change-Id: Ia4cc8be8424a40b3dcb7ebd0264fdff4e5247f7f
    Temporarily restore AudioSystem/AudioTrack APIs with their former signatures
    
    until we get updated prebuilts from vendor.
    
    Change-Id: I8aae81d2513edca0ab268053a11c8c4206879e61
    audio framework: manage stream volume per device
    
    Improve volume management by keeping track of volume for each type
    of device independently.
    Volume for each stream (MUSIC, RINGTONE, VOICE_CALL...) is now maintained
    per device.
    
    The main changes are:
    - AudioService now keeps tracks of stream volumes per device:
     volume indexes are kept in a HashMap < device , index>.
     active device is queried from policy manager when a volume change request
     is received
     initalization, mute and unmute happen on all device simultaneously
    - Settings: suffixes is added to volume keys to store each device
    volume independently.
    - AudioSystem/AudioPolicyService/AudioPolicyInterface: added a device argument
    to setStreamVolumeIndex() and getStreamVolumeIndex() to address each
    device independently.
    - AudioPolicyManagerBase: keep track of stream volumes for each device
    and apply volume according to current device selection.
    
    Change-Id: I61ef1c45caadca04d16363bca4140e0f81901b3f
    Use audio_stream_type_t consistently
    
    At native level it was a mixture of audio_stream_type_t, int, uint32_t,
    and uint8_t.  Java is still int.  Also fixed a couple of hard-coded -1
    instead of AUDIO_STREAM_DEFAULT, and in startToneCommand a hard-coded 0
    instead of AUDIO_STREAM_VOICE_CALL.
    
    Change-Id: Ia33bfd70edca8c2daec9052984b369cd8eee2a83
    Use audio_mode_t consistently
    
    It was int or uint32_t.
    Also make getMode() const.
    
    Change-Id: Ibe45aadbf413b9158e4dd17f2b3bcc6355288d37
    226483: A2DP connected, but music out to speaker
    
    When the A2DP headset is connected, there is a possible
    race condition when the audio tracks are moved from
    the mixer thread attached to the speaker output to the thread
    attached to A2DP output.
    As the request to clear the stream type to output mapping cache in
    the client process is asynchronous, it is possible that the flag
    indicating to the client audio track to re-create the IAudioTrack
    on the new thread is processed before the cache is invalidated.
    In this case, the track will be attached to the old thread and
    music will continue playing over the device speaker instead of being
    redirected to A2DP headset.
    
    Change-Id: Ib2ce1eb5320eaff83287b93779061bf4e7a330df
    Audio effects: track CPU and memory use separately
    
    Before this change, CPU and memory usage for an audio effect were
    registered and checked against the limit by audio policy manager
    upon effect instantiation. Even if an effect was not enabled
    it would prevent another effect to be created if the CPU load budget
    was exceeded, which was too restrictive.
    
    This change adds a method to register/unregister CPU load only when
    an effect is enabled or disabled.
    It also adds a mechanism to place all effects on the global output mix
    in suspend state (disabled) when an effect is enabled on a specific session.
    This will allow applications using session effects to have the priority
    over others using global effects.
    
    Also fixes some issues with suspend/restore mechanism:
    - avoid taking actions when an effect is disconnected and was not enabled.
    - do not remove a session from the suspended sessions list when corresponding
    effect chain is destroyed.
    
    Change-Id: I5225278aba1ae13d0d0997bfe26a0c9fb46b17d3
    Keep effects sessions active when the caller dies.
    
    Don't remove effects until the session they are in goes away or all
    AudioEffects have been explicitly released. This allows the control
    panel process to die without stopping the effects.
    
    Change-Id: I4496e5df080230ca1af149dec95c1309ab8ea888
    Audio framework: support for audio pre processing
    
    Audio effect framework is extended to suport effects on
    output and input audio path.
    
    AudioFlinger: Support for audio effects and effect chains is
    moved from PlaybackThread class to ThreadBase class so that
    RecordThread can manage effects.
    Effects of type pre processing are allowed on record thread
    only. When a pre processing is enabled, the effect interface handle is
    passed down to the input stream so that the audio HAL can call the
    process function. The record thread loop calls the effect chain process
    function that will only manage the effect state and commands and skip the
    process function.
    
    AudioRecord: The audio session is allocated before calling getInput() into
    audio policy serice so that the session is known before the input theead is
    created and pre processings can be created on the correct session.
    
    AudioPolicyService: default pre processing for a given input source are
    loaded from audio_effects.conf file.
    When an input is created, corresponding effects are created and enabled.
    
    Change-Id: Id17119e0979b4dcf189b5c7957fec30dc3478790
    audio: update for audio/audio_policy header names/locations
    
    Change-Id: I36c49352eee57559403cd1597f56a8485a360289
    Signed-off-by: Dima Zavin <dima@android.com>
    update for new audio.h header location
    
    Change-Id: Ic4c62c4037800802427eb7d3c7f5eb8b25d18876
    Signed-off-by: Dima Zavin <dima@android.com>
    audio/media: convert to using the audio HAL and new audio defs
    
    Change-Id: Ibc637918637329e4f2b62f4ac7781102fbc269f5
    Signed-off-by: Dima Zavin <dima@android.com>
    libmedia: move AudioParameter out of AudioSystem
    
    Change-Id: I9eb7e002d141936258050d4fa4f0ccd8202bfc54
    Signed-off-by: Dima Zavin <dima@android.com>
    Miscellaneous code cleanup in audio framework
    
    Changes:
     - Move declaration of kClassPathName to top of file so it can be used
       in more than one place, instead of "android/media/AudioSystem".
     - Make private methods static.
     - Add comment to stream_type, audio_mode, force_use types that they must match
       values in AudioSystem.java.
     - Add comment about unused types mp3_sub_format and vorbis_sub_format.
     - Fix typos.
     - Use @ in javadoc comments.
     - Delete dead APIs setMode, getMode, setRouting, getRouting in AudioSystem.java
       (they are all hidden, deprecated, and unused by rest of framework)
     - Delete unused private log method.
     - Fix pathname for android_media_AudioSystem.cpp.
     - Improve code formatting for space after == and !=.
     - Add logging of delta for changing audio policy manager ref count.
    
    Change-Id: I18037c7beb8ab76d1fda08c11e589f6e591d36e1
    Bug 3352047 Wrong message when adjusting volume
    
    Add hidden AudioManager.getDevicesForStream and output device codes.
    
    Change-Id: I4d1c1d3b6a077cd117720817d1f733dda557b947
    Fix issue 3371080
    
    Modified default volume control logic in AudioService:
    1 IN_CALL volume if in video/audio chat
    2 NOTIFICATION if notification is playing or was playing less than 5s ago.
    3 MUSIC
    
    Modified silent mode:
    - now also affect MUSIC stream type
    - entering silent mode when VOL- hard key is pressed once while selected
    stream volume is already at 0 (except for VOICE_CALL stream).
    - exiting silent mode when pressing VOL+ hard key while in silent mode
    
    Play sound FX (audible selections, keyboard clicks) at a fixed volume.
    
    Modified audio framework:
    - isStreamActive() method now implemented in AudioPolicyManagerBase (previously AudioFlinger)
    - iStreamActive() now specifies a time window during which the stream is considered
    active after it actually stopped.
    
    Change-Id: I7e5a0724099450b9fc90825224180ac97322785f
    do not merge bug 3370834 Cherrypick from master
    
    Cherripick from master CL 79833, 79417, 78864, 80332, 87500
    
    Add new audio mode and recording source for audio communications
     other than telelphony.
    
    The audio mode MODE_IN_CALL signals the system the device a phone
     call is currently underway. There was no way for audio video
     chat or VoIP applications to signal a call is underway, but not
     using the telephony resources. This change introduces a new mode
     to address this. Changes in other parts of the system (java
     and native) are required to take this new mode into account.
    The generic AudioPolicyManager is updated to not use its phone
     state variable directly, but to use two new convenience methods,
     isInCall() and isStateInCall(int) instead.
    
    Add a recording source used to designate a recording stream for
    voice communications such as VoIP.
    
    Update the platform-independent audio policy manager to pass the
     nature of the audio recording source to the audio policy client
     interface through the AudioPolicyClientInterface::setParameters()
     method.
    
    SIP calls should set the audio mode to MODE_IN_COMMUNICATION,
     Audio mode MODE_IN_CALL is reserved for telephony.
    
    SIP: Enable built-in echo canceler if available.
    1. Always initialize AudioRecord with VOICE_COMMUNICATION.
    2. If echo canceler is available, disable our echo suppressor.
    
    Note that this CL is intentionally not correcting the
     getAudioSourceMax() return value in MediaRecorder.java as the
     new source is hidden here.
    
    Change-Id: Ie68cd03c50553101aa2ad838fe9459b2cf151bc8
    Add new audio mode for audio communications other than telelphony.
    
    The audio mode MODE_IN_CALL signals the system the device a phone
     call is currently underway. There was no way for audio video
     chat or VoIP applications to signal a call is underway, but not
     using the telephony resources. This change introduces a new mode
     to address this. Changes in other parts of the system (java
     and native) are required to take this new mode into account.
    The generic AudioPolicyManager is updated to not use its phone
     state variable directly, but to use two new convenience methods,
     isInCall() and isStateInCall(int) instead.
    
    Change-Id: Id744cd26520ea1d1a4795eabe6a1f0c58789af76
    Add support for audio recording source in generic audio policy mgr.
    
    Update the platform-independent audio policy manager to pass the
     nature of the audio recording source to the audio policy client
     interface through the AudioPolicyClientInterface::setParameters()
     method.
    
    Change-Id: I6b4fd0f8a3acea0d7d30bbad98edd1977dc012bf
    Added support for dock headset observer
    
    Change-Id: I06b2e65e3bfa10735e6c7fd3349afa9ae7d45292
    Signed-off-by: Praveen Bharathi <pbharathi@motorola.com>
    Audio policy manager changes for audio effects
    
    Added methods for audio effects management by audio policy manager.
    - control of total CPU load and memory used by effect engines
    - selection of output stream for global effects
    - added audio session id in parameter list for startOutput() and stopOutput().
    this is not used in default audio policy manager implementation.
    
    Modifications of audio effect framework in AudioFlinger to allow moving and reconfiguring
    effect engines from one output mixer thread to another when audio tracks in the same session
    are moved or when requested by audio policy manager.
    Also fixed mutex deadlock problem with effect chains locks.
    
    Change-Id: Ida43484b06e9b890d6b9e53c13958d042720ebdb
    Various fixes and improvements in audio effects implementation
    
    Effect API:
    - Use different definitions for audio device, channels, formats... in AudioSystem and EffectApi:
      Removed media/AudioCommon.h file created for initial version of EffectApi
    - Indicate audio session and output ID to effect library when calling EffectCreate(). Session ID can be useful to optimize
    the implementation of effect chains in the same audio session. Output ID can be used for effects implemented in audio hardware.
    - Renamed EffectQueryNext() function to EffectQueryEffect() and changed operating mode:
      now an index is passed for the queried effect instead of implicitly querying the next one.
    - Added CPU load and memory usage indication in effects descriptor
    - Added flags and commands to indicate changes in audio mode (ring tone, in call...) to effect engine
    - Added flag to indicate hardware accelerated effect implementation.
    - Renamed EffectFactoryApi.h to EffectsFactoryApi.h for consistency with EffectsFactory.c/h
    
    Effect libraries:
    - Reflected changes in Effect API
    - Several fixes in reverb implementation
    - Added build option TEST_EFFECT_LIBRARIES in makefile to prepare integration of actual effect library.
    - Replaced pointer by integer identifier for library handle returned by effects factory
    
    Audio effect framework:
    - Added support for audio session -1 in preparation of output stage effects configuration.
    - Reflected changes in Effect API
    - Removed volume ramp up/down when effect is inserted/removed: this has to be taken care of by effect engines.
    - Added some overflow verification on indexes used for deferred parameter updates via shared memory
    - Added hardcoded CPU and memory limit check when creating a new effect instance
    
    Change-Id: I43fee5182ee201384ea3479af6d0acb95092901d
    Issue 2667801: [Audio Effect Framework] AudioFlinger, AudioMixer AudioTrack modifications.
    
    First drop of audio framework modifications for audio effects support.
    
    - AudioTrack/AudioRecord:
    Added support for auxiliary effects in AudioTrack
    Added support for audio sessions
    Fixed left right channel inversion in setVolume()
    
    - IAudioFlinger:
    Added interface methods for effect enumeraiton and instantiation
    Added support for audio sessions.
    
    - IAudioTrack:
    Added method to attach auxiliary effect.
    
    - AudioFlinger
    Created new classes to control effect engines in effect library and manage effect connections to tracks or
    output mix:
      EffectModule: wrapper object controlling the effect engine implementation in the effect library. There
            is one EffectModule per instance of an effect in a given audio session
      EffectChain: group of effects associated to one audio session. There is one EffectChain per audio session.
            EffectChain for session 0 is for output mix effects, other chains are attached to audio tracks
            with same session ID. Each chain contains a variable number of EffectModules
      EffectHandle: implements the IEffect interface. There is one EffectHandle object for each application
            controlling (or using) an effect module. THe EffectModule maintians a list of EffectHandles.
    
    Added support for effect modules and effect chains creation in PlaybackThread.
    modified mixer thread loop to allow track volume control by effect modules and call effect processing.
    
    -AudioMixer
    Each track now specifies its output buffer used by mixer for accumulation
    Modified mixer process functions to process tracks by groups of tracks with same buffer
    Modified track process functions to support accumulation to auxiliary channel
    
    Change-Id: I26d5f7c9e070a89bdd383e1a659f8b7ca150379c
    Fix issue 2667796: [Audio Effect Framework] Effect factory and libraries.
    
    First effect factory and effect library API implementation.
    Also added default effect libraries for reverb and equalizer effects.
    These libraries are for functional test only and are not fine tuned with
    regard to audio quality. They will probably be replaced by other implementations
    before the release.
    
    Change-Id: I6868f8612146ae282c64052765c61a52ec789ec8
    Issue 2071329: audio track is shorter than video track for video capture on sholes
    
    Add API to retrieve number of frames dropped by audio input kernel driver.
    
    Submitted on behalf of Masaki Sato <masaki.sato@motorola.com>
    Fix issue 2285561: New AudioFlinger and audio driver API needed for A/V sync
    
    Added getRenderPosition() API to IAudioFlinger to retreive number of audio frames
    written by AudioFlinger to audio HAL and by DSP to DAC.
    
    Added getRenderPosition() API to AudioHardwareInterface to retreive number of audio frames
    written by DSP to DAC.
    
    Exposed AudioTrack::getPosition() to AudioSink() to make it available to media player.
    
    Removed excessive log in AudioHardwareGeneric.
    Fix issue 2378022: AudioService should direct volume control to STREAM_VOICE_CALL stream when STREAM_VOICE_CALL stream is active.
    
    Modified AudioService.getActiveStreamType() so that STREAM_VOICE_CALL is selected when a track using this stream
    type is playing.
    
    Chanded isMusicActive() for a more generic isStreamActive(stream) method in AudioSystem, IAudioFlinger and AudioFlinger.
    Create base class for audio policy manager.
    
    First implementations of audio policy manager in Eclair branch have shown that most code is common to all platforms.
    Creating AudioPolicyManagerBase base class will improve code maintainability and readability.
    
    Audio policy manager code for platforms using generic audio previously in AudioPolicyManagerGeneric is replaced by AudioPolicyManagerBase.
    Audio policy manager test code previously in AudioPolicyManagerGeneric is moved to AudioPolicyManagerBase.
    
    Also added a wake lock for delayed commands in AudioPolicyService.
    android-2.1_r1 snapshot
    Fix issues 2333450 and 2333559:
    
    Add new config values to AudioSystem::FOR_DOCK force usage to differenciate car and desk docks.
    Use a receiver for the sticky Intent.ACTION_DOCK_EVENT in AudioService to detect the type
    of dock and select force usage accordingly.
    Partially fix bug 2111240 Detect docking / undocking event by reporting
    to the AudioPolicyManager a new forced usage AudioSystem::FOR_DOCK
    which can take the FORCE_NONE, FORCE_BT_DOCK or FORCE_WIRED_ACCESSORY
    values. This CL is complemented by an update of the APM to take into
    account the FOR_DOCK usage.
    eclair snapshot
    Fix issue 2242614: Wired headset not recognized: bogus "state" in ACTION_HEADSET_PLUG broadcast.
    
    The headset state indicated by HeadsetObserver in the broadcast intent ACTION_HEADSET_PLUG was not 0 or 1 as specified in the java doc but contained a bit field indicating the type of headset connected.
    
    Modified HeadsetObserver to broacast a state conforming to java doc.
    Added an extra to intent ACTION_HEADSET_PLUG to indicate if headset has a microphone or not.
    Removed handling of non standard headset indications from HeadsetObserver.
    Removed platform specific devices from output devices defined in AudioSystem.
    Modified AudioService to use new ACTION_HEADSET_PLUG intent extra instead of bitfield in state.
    Fix 2194140: [Passion] Support Audience chip.
    
    Added new input device DEVICE_IN_BACK_MIC.
    Added new audio source AUDIO_SOURCE_CAMCORDER.
    Fix issue 2192181: AudioFlinger must provide separated methods to set VOICE_CALL stream volume and down link audio volume.
    
    Added setVoiceVolume() method to AudioSystem, AudioFlinger, IAudioFlinger, AudioPolicyService.
    Removed call to AudioHardwareInterface::setVoiceVolume() from AudioFlinger::setStreamVolume().
    Fix issue 2045911: Camera Shutter tone does not play correctly while listening to music.
    
    Add the possibility to delay routing and volume commands in AudioPolicyClientInterface. The delay is not blocking for the caller.
    Fix issue 2001214: AudioFlinger and AudioPolicyService interfaces should not use pointers as handles to inputs and outputs.
    
    Use integers instead of void* as input/output handles at IAudioFlinger and IAudioPolicyService interfaces.
    AudioFlinger maintains an always increasing count of opened inputs or outputs as unique ID.
    Fix issue 2001517: AudioTrack compatibility issue.
    
    Modified enum values in AudioFormat.java and AudioSystem.h.
    Added code for backward compatibility in AudioTrack.java and AudioRecord.java.
    Fix issue 1795088       Improve audio routing code
    
    Initial commit for review.
    Integrated comments after patch set 1 review.
    Fixed lockup in AudioFlinger::ThreadBase::exit()
    Fixed lockup when playing tone with AudioPlocyService startTone()
    AI 143327: am: CL 143177 am: CL 142889 Fix issue #1736153       Camera shutter sound can be muted by new AlarmClock setting.
      Current implementation of Camera service plays the camera shutter sound over the ALARM stream so that it cannot be muted by silent mode in order to comply to some country specific requirement. A recent change made it possible for the user to mute the ALARM stream thus making this stream not suitable any more for the camera shutter sound.
      The fix consists in creating a new stream type only accessible by native code and that cannot be muted and use it to play camera sounds.
      Original author: elaurent
      Merged from: //branches/cupcake/...
      Original author: android-build
      Merged from: //branches/donutburger/...
    
    Automated import of CL 143327
    AI 143177: am: CL 142889 Fix issue #1736153     Camera shutter sound can be muted by new AlarmClock setting.
      Current implementation of Camera service plays the camera shutter sound over the ALARM stream so that it cannot be muted by silent mode in order to comply to some country specific requirement. A recent change made it possible for the user to mute the ALARM stream thus making this stream not suitable any more for the camera shutter sound.
      The fix consists in creating a new stream type only accessible by native code and that cannot be muted and use it to play camera sounds.
      Original author: elaurent
      Merged from: //branches/cupcake/...
    
    Automated import of CL 143177
    Automated import from //branches/cupcake/...@142889,142889
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@132276
    auto import from //branches/cupcake/...@131421
    auto import from //branches/cupcake/...@130745
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add support for scaling mode parameter
    
    Support VISUALIZER_PARAM__SCALING_MODE parameter.
    
    Modify process() function to use new volume scaling parameter,
     used to set whether captured values are maximized by current
     headroom in the buffer (default existing behaviora) or left
     as is and thus affected by volume.
    
    Modify AudioEffect to allow subclasses to override the following
     events: control status changed, enable status changed, command
     executed.
    In Visualizer class (a subclass of AudioEffect), reset the
     scaling mode and capture size on the actual effect
     as cached when control is regained.
     This will allow the effect to be properly
     configured whenever Visualizers with different scaling
     modes or capture sizes are released (e.g. from java
     release() method).
    
    Change-Id: I05cb9f925a296dceca91bafa9fe294ef2b2c2bd5
    Effect UUID inputs passed by pointer are const
    
    Change-Id: I1f5c338bcb7368e3dd8cd5f804b2e6d9fbe087f8
    Declare more IAudioFlinger methods const
    
    This is just documentation, as C++ method const-ness doesn't mean anything
    for a binder API.  Instead, here const means "no side effects".
    
    Change-Id: Iaa9cd2fe477db10ae9a40cac4f79f0faa9b4e5e6
    Use NULL not 0 for raw pointers
    
    Use if (p != NULL) instead of if (ptr)
    
    Change-Id: Iaec3413a59ccbf233c98fcd918cc7d70ac5da9fa
    Added APIs for audio preprocessing
    
    Added APIs to control pre processes applied on captured audio.
    Those APIs are still hidden until reviewed by API council.
    
    Three types of standard pre processes are supported:
    - Automatic Gain Control (AGC) by AutomaticGainControl class
    - Acoustic Echo Cancellation (AEC) by AcousticEchoCanceler class
    - Noise Suppression (NS) by NoiseSuppressor class
    
    A method is added to AudioEffect class to query audio pre processings
    applied by default by the platform on a given AudioRecord session ID.
    
    Change-Id: I0b9fceeb8c704dd06319c3b52b85c96fe871d51d
    Audio framework: support for audio pre processing
    
    Audio effect framework is extended to suport effects on
    output and input audio path.
    
    AudioFlinger: Support for audio effects and effect chains is
    moved from PlaybackThread class to ThreadBase class so that
    RecordThread can manage effects.
    Effects of type pre processing are allowed on record thread
    only. When a pre processing is enabled, the effect interface handle is
    passed down to the input stream so that the audio HAL can call the
    process function. The record thread loop calls the effect chain process
    function that will only manage the effect state and commands and skip the
    process function.
    
    AudioRecord: The audio session is allocated before calling getInput() into
    audio policy serice so that the session is known before the input theead is
    created and pre processings can be created on the correct session.
    
    AudioPolicyService: default pre processing for a given input source are
    loaded from audio_effects.conf file.
    When an input is created, corresponding effects are created and enabled.
    
    Change-Id: Id17119e0979b4dcf189b5c7957fec30dc3478790
    Removed interface to load audio effects libraries
    
    Removed unused functions allowing dynamic loading of audio effects libraries
    from effects factory API.
    
    Change-Id: I06cc5a51dc10aca87c7a8687bbb874babd711eca
    New effect library API
    
    Moved and renamed media/EffectApi.h to hardware/audio_effect.h
    Modified the effect library API to expose a library info structure
    containing an interface functions table.
    Also removed enums for audio channels, audio format and devices
    from effect API and use values from system/audio.h instead.
    
    Modified effects factory to support new library interface format and
    load libraries and efffects listed in audio_effects.conf file.
    The file audio_effects.conf is first loaded from /vendor/etc and
    then from /system/etc/audio_effects.conf if not found.
    
    Modified existing effect libraries to implement the new library interface.
    
    Change-Id: Ie52351e071b6d352fa2fbc06c3846686f8c45df9
    Fix issue 3157123.
    
    Use a Mutex wherever atomic operations were used in AudioTrack,
    AudioRecord, AudioFlinger and AudioEffect classes.
    
    Change-Id: I6f55b2cabdcd93d64ef19446735b8f33720f8dbc
    Audio effects: modified command() parameter types.
    
    The type of the cmd, cmdSize and *pReplySize parameters of the effect control interface command()
    function have been modified from int to uint32_t. This is more consistent with their role.
    
    Change-Id: I84d289fc262d6753747910f06f485597dfee6591
    Added Visualizer effect.
    
    The visualizer enables application to retrieve part of the currently playing audio for visualization purpose.
    It is not an audio recording interface and only returns partial and low quality audio content as a waveform or
    a frequency representation (FFT).
    
    Removed temporary hack made in MediaPlayer for animated wall papers based on audio visualization (snoop() method.
    
    This commit also includes a change in AudioEffect class:
     - the enable()/disable() methods have been replaced bya more standard setEnabled() method.
     - some fixes in javadoc
    
    Change-Id: Id092a1340e9e38dae68646ade7be054e3a36980e
    Various fixes and improvements in audio effects implementation
    
    Effect API:
    - Use different definitions for audio device, channels, formats... in AudioSystem and EffectApi:
      Removed media/AudioCommon.h file created for initial version of EffectApi
    - Indicate audio session and output ID to effect library when calling EffectCreate(). Session ID can be useful to optimize
    the implementation of effect chains in the same audio session. Output ID can be used for effects implemented in audio hardware.
    - Renamed EffectQueryNext() function to EffectQueryEffect() and changed operating mode:
      now an index is passed for the queried effect instead of implicitly querying the next one.
    - Added CPU load and memory usage indication in effects descriptor
    - Added flags and commands to indicate changes in audio mode (ring tone, in call...) to effect engine
    - Added flag to indicate hardware accelerated effect implementation.
    - Renamed EffectFactoryApi.h to EffectsFactoryApi.h for consistency with EffectsFactory.c/h
    
    Effect libraries:
    - Reflected changes in Effect API
    - Several fixes in reverb implementation
    - Added build option TEST_EFFECT_LIBRARIES in makefile to prepare integration of actual effect library.
    - Replaced pointer by integer identifier for library handle returned by effects factory
    
    Audio effect framework:
    - Added support for audio session -1 in preparation of output stage effects configuration.
    - Reflected changes in Effect API
    - Removed volume ramp up/down when effect is inserted/removed: this has to be taken care of by effect engines.
    - Added some overflow verification on indexes used for deferred parameter updates via shared memory
    - Added hardcoded CPU and memory limit check when creating a new effect instance
    
    Change-Id: I43fee5182ee201384ea3479af6d0acb95092901d
    Issue 2667802: [Audio Effect Framework] AudioEffect base class and JNI.
    
    Added AudioEffect C++ class. AudioEffect is the base class for effect specific implementations,
    OpenSL ES effect interfaces and audio effect JNI.
    
    Added the AudioEffect JNI and AudioEffect JAVA class. AudioEffect is the base class
    to implement more specific JAVA classes to control audio effects from JAVA applications.
    
    Change-Id: If300a1b708f2e6605891261e67bfb4f8330a4624
    [wfd] Support a low(er) power state by triggering PAUSE/RESUME.
    
    Change-Id: Ibe42bfa73816bbfeb7e652d435254d0171b89727
    related-to-bug: 7638150
    [wfd] Support a low(er) power state by triggering PAUSE/RESUME.
    
    Change-Id: Ibe42bfa73816bbfeb7e652d435254d0171b89727
    related-to-bug: 7638150
    Update remote display API.
    
    Renamed disconnect() to dispose() to emphasize the fact that
    this method is intended to clean up the IRemoteDisplay
    completely, not just temporarily disconnect the current client
    (which might be useful someday).
    
    Other minor tweaks.
    
    Change-Id: I1209639eb0cd8af09c724206642d7e52aab48257
    Update remote display API.
    
    Renamed disconnect() to dispose() to emphasize the fact that
    this method is intended to clean up the IRemoteDisplay
    completely, not just temporarily disconnect the current client
    (which might be useful someday).
    
    Other minor tweaks.
    
    Change-Id: I1209639eb0cd8af09c724206642d7e52aab48257
    Implement remote display service stubs.
    
    Change-Id: I582ed000026bba6d116db8304e15a3c52f8a9a01
    Remove new camera connect API.
    
    Applications are not resumed under the lock screen now.
    This API is not needed anymore.
    
    bug:5584464
    Change-Id: I115daf6b647348617ec0fc05b626878c945b9b29
    Add a new camera open API that allows taking the ownership.
    
    The purpose is to let face unlock always get the camera
    successfully. What happened was the camera applications may
    have opened the camera in onResume under the lock screen.
    This API lets face unlock take the camera from the camera
    application. A new permission will be added, so other
    applicatoins won't be able to take the camera from the face
    unlock.
    
    bug:5584464
    
    Change-Id: Ib3d9dcbc2161815b68db42327dc01148453704c6
    Change camera interface to support multiple cameras.
    
    Change-Id: Ie88fe706d2278acf762eca87780de349434778a4
    Support multiple cameras in framework.
    
    Change-Id: I081f0fbdca4b633715ea7c3b3d42f8662d27598a
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Audio effects: modified command() parameter types.
    
    The type of the cmd, cmdSize and *pReplySize parameters of the effect control interface command()
    function have been modified from int to uint32_t. This is more consistent with their role.
    
    Change-Id: I84d289fc262d6753747910f06f485597dfee6591
    Fix issue 2667797: [Audio Effect Framework] new base class and binder interfaces for effect control.
    
    Added IEffect and IEffectClient binder interfaces to exchange effect module control
    and status information between application and media server processes.
    
    Change-Id: I10e8e894898e52ed9956a765d0ef7075eb2593af
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    New AudioTrack C++ API for audio timestamps
    
    This new API is intended to replace latency(), especially for A/V sync.
    The application will receive periodic timestamp notifications.  The period
    is unspecified, but will likely be more frequent after a pause or stop,
    set position, underrun, display on/off change, route change, or when audio
    framework notices drift.  It will be up to the higher level application
    (e.g.  Stagefright) to reconstruct a clock that updates more frequently.
    
    The current latency() method doesn't indicate when latency changes
    due to screen on/off state, route changes, etc.
    
    Includes squahsed change-Id: I2082f8752040be0c234b1a6f1be2e269abf2ce7c
     Dummy implementation of AudioTrack:getTimestamp()
     Rename AudioTrack::Timestamp to AudioTimestamp.
     Renaming and pulling up to a higher level allows more modules to use it.
    
    Change-Id: Ibf7f6a207c3f8d8697f25ede2cd5200697fadb86
    (cherry picked from commit dd69eb893867634fd169c03204a6ad7c74b351e7)
    Camera: Add unit test infrastructure for libcameraclient
    
    Change-Id: I957538663ae8332d26f3640c63a75efc79f4ac5c
    Permit conditional registry of mediaserver extensions
    
    Change-Id: I94dc0d038e702dfe1779a50a1de0fae9bad15057
    Factor out and speed up permission-checking code
    
    Use the caching permission check for dump to save IPC.
    
    Cache getpid() to save kernel call for other permission checks.
    
    The C runtime library getpid() can't cache due to a fork
    race condition, but we know that mediaserver doesn't fork.
    
    Don't construct String16 on the stack.
    
    Change-Id: I6be6161dae5155d39ba6ed6228e7683e67be34ed
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    [libstagefright] : camcorder pause-resume implementation
    
    - Added pause resume feature in camcorder app.so that
      user pause recording and resume later which results
      in a single recorded clip.
    CRs-Fixed: 587051
    
    Change-Id: Ib82a93009348d997a4b8343b8b417b433be4c9df
    
    (cherry picked from commit 1f348eb12a631bbe6c3288c797354da6d425e64d
    from CM repository, with some of manual code removal. You know,
    CM tree tends to have QCOM-specific code all around. - peat-psuwit)
    
    Conflicts:
            media/libmediaplayerservice/StagefrightRecorder.cpp
            media/libstagefright/AudioSource.cpp
            media/libstagefright/OMXCodec.cpp
    remove uses of Surface in favor or IGraphicBufferProducer
    
    Change-Id: I13d7a9553aa335bca790a3a59d389d7533c83d57
    remove uses of Surface in favor or IGraphicBufferProducer
    
    Change-Id: I13d7a9553aa335bca790a3a59d389d7533c83d57
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Added support for HE-AAC recording
    
    Fixed bug in decoder related to sample rates / channel counts
    Made decoder follow Fraunhofer pattern
    Log if bitrate not available
    Bug: 6275957
    
    Change-Id: I47a8e29358fa4a88ebc73fe02d46a2bfb96c64fe
    Add Fraunhofer AAC encoder with AAC-ELD support.
    
    Change-Id: I6cd499d257d72f50a5b508bed97796a591a51506
    Do not support still image capture mode for timelapse video recording
    
    related-to-bug: 4973779
    
    Change-Id: Ica665217ab10247b2242acc4e93d4fe9f83e3f45
    Connect MediaRecorder Native to SurfaceMediaSource
    
    Making a connection from MediaRecorder Native layer to the
    SurfaceMediaSource for the purpose of encoding GL Frames. This will be
    called from the java side inside the Mobile Filter Framework.
    
    The mediarecorder native layer (client), when set the videosource to
    option VIDEO_SOURCE_FRAMES, asks the StageFrightRecorder on the mediaserver
    side to create a SurfaceMediaSource object and pass it back as a
    sp<ISurfaceTexture> object. Using that, the client side will dequeue and
    queue buffers. Connecting the GL Frames to the obtained
    sp<ISurfaceTexture> is not part of this CL.
    
    Related to bug id: 4529323
    
    Change-Id: I651bec718dd5b935779e7d7a050b841c2d0b0fcd
    Add framework support for camcorder zoom.
    
    The purpose of ICameraRecordingProxy and ICameraRecordingProxyListener is to
    allow applications using the camera during recording.
    
    Camera service allows only one client at a time. Since camcorder application
    needs to own the camera to do things like zoom, the media recorder cannot
    access the camera directly during recording. So ICameraRecordingProxy is a proxy
    of ICamera, which allows the media recorder to start/stop the recording and
    release recording frames. ICameraRecordingProxyListener is an interface that
    allows the recorder to receive video frames during recording.
    
    ICameraRecordingProxy
      startRecording()
      stopRecording()
      releaseRecordingFrame()
    
    ICameraRecordingProxyListener
      dataCallbackTimestamp()
    
    The camcorder app opens the camera and starts the preview. The app passes
    ICamera and ICameraRecordingProxy to the media recorder by
    MediaRecorder::setCamera(). The recorder uses ICamera to setup the camera in
    MediaRecorder::start(). After setup, the recorder disconnects from camera
    service. The recorder calls ICameraRecordingProxy::startRecording() and
    passes a ICameraRecordingProxyListener to the app. The app connects back to
    camera service and starts the recording. The app owns the camera and can do
    things like zoom. The media recorder receives the video frames from the
    listener and releases them by ICameraRecordingProxy::releaseRecordingFrame.
    The recorder calls ICameraRecordingProxy::stopRecording() to stop the
    recording.
    
    The call sequences are as follows:
    1. The app: Camera.unlock().
    2. The app: MediaRecorder.setCamera().
    3. Start recording
       (1) The app: MediaRecorder.start().
       (2) The recorder: ICamera.unlock() and ICamera.disconnect().
       (3) The recorder: ICameraRecordingProxy.startRecording().
       (4) The app: ICamera.reconnect().
       (5) The app: ICamera.startRecording().
    4. During recording
       (1) The recorder: receive frames from ICameraRecordingProxyListener.dataCallbackTimestamp()
       (2) The recorder: release frames by ICameraRecordingProxy.releaseRecordingFrame().
    5. Stop recording
       (1) The app: MediaRecorder.stop()
       (2) The recorder: ICameraRecordingProxy.stopRecording().
       (3) The app: ICamera.stopRecording().
    
    bug:2644213
    
    Change-Id: I15269397defc25cbbcae16abc071c8349c123122
    Make track informational event optional, depending on system property
    
    o also add a track informational event to return the encoded data in kilo-bytes
    
    Change-Id: I7c383360d57048c8a3606d0b8141ba53e4f4b224
    Add send session recording summary report to application
    
    Change-Id: I9c63ddae432f0c93486c39776ed0a058a8649602
    Add end of recording summary track info
    
    Change-Id: I2fcf589e70db225776ef7c8d0f28505ceb824c45
    related-to-bug: 1854633
    audio/media: convert to using the audio HAL and new audio defs
    
    Change-Id: Ibc637918637329e4f2b62f4ac7781102fbc269f5
    Signed-off-by: Dima Zavin <dima@android.com>
    Better organize media recorder error and information event and types
    
    Change-Id: I45f1f953596985494725525c1fabf57eccc19175
    do not merge bug 3370834 Cherrypick from master
    
    Cherripick from master CL 79833, 79417, 78864, 80332, 87500
    
    Add new audio mode and recording source for audio communications
     other than telelphony.
    
    The audio mode MODE_IN_CALL signals the system the device a phone
     call is currently underway. There was no way for audio video
     chat or VoIP applications to signal a call is underway, but not
     using the telephony resources. This change introduces a new mode
     to address this. Changes in other parts of the system (java
     and native) are required to take this new mode into account.
    The generic AudioPolicyManager is updated to not use its phone
     state variable directly, but to use two new convenience methods,
     isInCall() and isStateInCall(int) instead.
    
    Add a recording source used to designate a recording stream for
    voice communications such as VoIP.
    
    Update the platform-independent audio policy manager to pass the
     nature of the audio recording source to the audio policy client
     interface through the AudioPolicyClientInterface::setParameters()
     method.
    
    SIP calls should set the audio mode to MODE_IN_COMMUNICATION,
     Audio mode MODE_IN_CALL is reserved for telephony.
    
    SIP: Enable built-in echo canceler if available.
    1. Always initialize AudioRecord with VOICE_COMMUNICATION.
    2. If echo canceler is available, disable our echo suppressor.
    
    Note that this CL is intentionally not correcting the
     getAudioSourceMax() return value in MediaRecorder.java as the
     new source is hidden here.
    
    Change-Id: Ie68cd03c50553101aa2ad838fe9459b2cf151bc8
    Add recording source for voice communication
    
    Add a recording source used to designate a recording stream for
    voice communications such as VoIP.
    
    Change-Id: I4091d67069b1a0170c1a5ca5e6acd51eb0aa08f9
    Support for writing to MPEG2 transport stream files.
    
    Change-Id: If3b7a807bc224a4b1cb2236537c3ebdc5aee0d97
    Added setAuxiliaryOutputFile to MediaRecorder and JNI
    
    added setAuxiliaryOutputFile to allow setting of an auxiliary output file.
    Also added the JNI support.
    
    Change-Id: I8c3335192bd6f7fcbfdfc8552cfd0848f2ad2a5d
    Support for Gtalk video, includes AMR/H.263 assembler and packetization support, extensions to MediaRecorder to stream via RTP over a pair of UDP sockets as well as various fixes to the RTP implementation.
    
    Change-Id: I95b8dd487061add9bade15749e563b01cd99d9a6
    Separate MediaRecorderClient with MediaPlayerClient
    
    - An alternative would be to define a common base class that
      both MediaRecorderClient and MediaPlayerClient can derive.
      But since the common code, onTransact() and notify() uses
      some Binder code, having a common base class may not gain
      us too much in terms of code reuse.
    
    Change-Id: Ibc06720278ad173fceacff3d267b7060856c6316
    Provide progress status report during authoring
    
    - Track either the number of A/V frames authored, or the time elapsed
    - Track the completion of the authoring
    - Add multiple camera support for authoring by accepting a camera id parameter
    - Set file type based on the OUTPUT_FORMAT requested
    
    Change-Id: I0f9d31b3b7a8fa43eb53f572410fb0ebd4fa0bb7
    Detect and handle premature termination of a recording session
    
    Change-Id: Ifb83b19f3e68580345b23efed5d5956fb81baeb8
    Media server death nodification
    eclair snapshot
    Add new audio sources to support the A1026 recording configurations.
    Fix 2194140: [Passion] Support Audience chip.
    
    Added new input device DEVICE_IN_BACK_MIC.
    Added new audio source AUDIO_SOURCE_CAMCORDER.
    Remove hardcoded maximum frame rate limit from the framework
    bug 1993400
    donut snapshot
    NJ-1409: (frameworks/base) Support new audio encoding types(AMR and AAC).
    get rid of utils.h
    Fix issue 1846343 - part 1
    
    This change is the first part of a fix for issue 1846343, :
    - Added new enum values for input sources in AudioRecord and MediaRecorder for voice uplink, downlink and uplink+downlink sources.
    - renamed streamType to inputSource in all native functions handling audio record.
    
    A second change is required in opencore author driver and android audio input to completely fix the issue.
    auto import from //branches/cupcake_rel/...@140373
    auto import from //branches/cupcake_rel/...@138607
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@132589
    auto import from //depot/cupcake/@137055
    auto import from //branches/cupcake/...@131421
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add ExtendedAudioBufferProvider::framesReleased and onTimestamp
    
    and implement them in SourceAudioBufferProvider using the associated NBAIO_Source,
    and in Track using the associated AudioTrackServerProxy.
    
    Change-Id: I60dc4adba63fc1dc452ff16caf347e4a7c8242c2
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Fix race condition for non-started fast tracks
    
    This required re-implementing how fast tracks are considered active.
    Now, they use the same logic as normal tracks, except underrun is ignored.
    
    Other changes:
     - add framesReady() to AudioBufferProvider interface
     - rebased
     - add track underrun counter state to fast mixer dump state
     - move dumpsys header to Track::appendDumpHeader()
       so it closer to where tracks are dumped
     - display track state in dumpsys as a character code
     - measure and display warmup time and cycles in dumpsys
     - copy in the presentation complete code
     - add ExtendedAudioBufferProvider for framesReady() which returns size_t
     - simplify underrun tracking
     - deferred reset track after stop()
     - add comments
    
    Change-Id: I7db8821bc565230ec76da1f9380fe3fb09735e5b
    Use scheduling policy service
    
    Change-Id: I3c09da1dc0de5039d0c15ce7fb2bc373fa398712
    Factor out and speed up permission-checking code
    
    Use the caching permission check for dump to save IPC.
    
    Cache getpid() to save kernel call for other permission checks.
    
    The C runtime library getpid() can't cache due to a fork
    race condition, but we know that mediaserver doesn't fork.
    
    Don't construct String16 on the stack.
    
    Change-Id: I6be6161dae5155d39ba6ed6228e7683e67be34ed
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Whitespace and indentation
    
    Fix indentation to be multiple of 4.
    Make it easier to search:
      sp< not sp < to
      "switch (...)" instead of "switch(...)" (also "if" and "while")
    Remove redundant blank line at start or EOF.
    Remove whitespace at end of line.
    Remove extra blank lines where they don't add value.
    
    Use git diff -b or -w to verify.
    
    Change-Id: I966b7ba852faa5474be6907fb212f5e267c2874e
    Update comments
    
    We no longer put the filename at start of file.
    
    Change-Id: Ic435b159a23105681e3d4a6cb1ac097bc853302e
    Add memory leak tracking/debugging code to drm server
    
    bug - 4099038
    
    Change-Id: I6c048eaf3d7f34bc144b8daaa5fdef1ed474af66
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    fix volume and effect enable delay on offloaded tracks
    
    Volume: add a method to wake up the mediaserver playback
    thread when a volume command is received on an offloaded track.
    
    Effects: call effect chain process on offloaded playback threads
    asynchronously from writes to allow effect state updates while
    waiting for async write callback.
    
    Bug: 10796540.
    
    Change-Id: Id2747ae88783575d1d7ffd6fc86fbd054ab2c739
    Add IAudioTrack::getTimestamp()
    
    with dummy implementation in AudioFlinger::TrackHandle, and
    implement AudioTrack::getTimestamp() using IAudioTrack.
    
    Also document invariant that mAudioTrack and control block are always
    non-0 after successful initialization.
    
    Change-Id: I9861d1454cff7decf795d5d5898ac7999a9f3b7e
    Public API changes for audio offload support.
    
    NOTE: this does _not_ include all private member variables added
    to classes as part of offload support. Only public/protected functions
    and stubs functions/variables needed to make the changes buildable.
    
    - isOffloadSupported() added to audio policy service
        A stub implementation is required to build, this always returns false
    - setParameters() added to IAudioTrack
        A stub implementation is required to build, this always returns
        INVALID_OPERATION
    
    - CBlk flag for stream end
    
    - Change AudioSystem::getRenderPosition() to take an audio_output_t
        so caller can specify which output to query
    
    - Add AudioSystem::isOffloadSupported()
        This is fully implemented down to the AudioFlinger function
        AudioPolicyServer::isOffloadSupported() which is just a stub
        that always returns false.
    
    - Add EVENT_STREAM_END to AudioTrack interface.
        STREAM_END is used to signal when the hardware has actually finished
        playing all the data it was sent.
    
    - Add event type enumeration to media player interface AudioSink callbacks
        so that the same callback can be used to handle multiple types of
        event. For offloaded tracks we also have to handle STREAM_END and
        TEAR_DOWN events
    
    - Pass audio_offload_info_t to various functions used for opening outputs,
        tracks and audio players. This passes additional information about the
        compressed stream down to the HAL when using offload.
        For publicly-available APIs this is an optional parameter (for some of
        the internal and low-level APIs around the HAL interface it is mandatory)
    
    - Add getParameters() and setParameters() API to AudioTrack
        Currently dummy implementations.
    
    - Change AudioPlayer contructor so that it takes a set of bitflags defining what
        options are required. This replaces the original bool which only specified
        whether to use deep buffering.
    
    - Changes to StageFright class definition related to handling tearing-down of
        an offloaded track when we need to switch back to software decode
    
    - Define new StageFright utility functions used for offloaded tracks
        Currently dummy implementations.
    
    - AudioFlinger changes to use extended audio_config_t.
        Fills in audio_offload_info_t member if this info is passed in when
        opening an output.
    
    - libvideoeditor changes required to add the new event type parameter
        to AudioSink callback functions
    
    - libmediaplayerservice changes required to add the new event type parameter
        to AudioSink callback functions
    
    Change-Id: I3ab41138aa1083d81fe83b886a9b1021ec7320f1
    Signed-off-by: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
    Signed-off-by: Eric Laurent <elaurent@google.com>
    AudioTrack::mute() is unused so remove it
    
    If ever needed again, it could be implemented on client side by forcing
    a track volume of 0.
    
    Change-Id: I88a9b4f675b6dca2948549414f9ec2c192d29269
    AudioTrack::mute() is unused so remove it
    
    If ever needed again, it could be implemented on client side by forcing
    a track volume of 0.
    
    Change-Id: I88a9b4f675b6dca2948549414f9ec2c192d29269
    Configure policy of mediaserver threads
    
    Change-Id: Ifd825590ba36996064a458f64453a94b84722cb0
    Whitespace and indentation
    
    Fix indentation to be multiple of 4.
    Make it easier to search:
      sp< not sp < to
      "switch (...)" instead of "switch(...)" (also "if" and "while")
    Remove redundant blank line at start or EOF.
    Remove whitespace at end of line.
    Remove extra blank lines where they don't add value.
    
    Use git diff -b or -w to verify.
    
    Change-Id: I966b7ba852faa5474be6907fb212f5e267c2874e
    Upintegrate Audio Flinger changes from ICS_AAH
    
    Bring in changes to audio flinger made to support timed audio tracks
    and HW master volume control.
    
    Change-Id: Ide52d48809bdbed13acf35fd59b24637e35064ae
    Signed-off-by: John Grossman <johngro@google.com>
    Update comments
    
    We no longer put the filename at start of file.
    
    Change-Id: Ic435b159a23105681e3d4a6cb1ac097bc853302e
    AudioRecord and AudioTrack client tid
    
    Inform AudioFlinger of the tid of the callback thread.
    
    Change-Id: I670df92dd06749b057238b48ed1094b13aab720b
    Declare IAudioTrack methods in binder opcode order
    
    This makes it easier to match up the declarations.
    
    Change-Id: I0996c20b2903b778b356dfe52b07b0ec634855dd
    Audio C++ comments
    
    Change-Id: I84906ebb9dfcfa5b96b287d18364b407f02a30c1
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: I6ec5d2bca9b8ebc0acd395a7dd92e1a48fcdfa9b
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    undo reset to ics-mr1 until we have a better method
    reset to ics-mr1, but keep history
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: Id78bba8c002131d8b52b4170259a87fd94e63c73
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    Issue 2667801: [Audio Effect Framework] AudioFlinger, AudioMixer AudioTrack modifications.
    
    First drop of audio framework modifications for audio effects support.
    
    - AudioTrack/AudioRecord:
    Added support for auxiliary effects in AudioTrack
    Added support for audio sessions
    Fixed left right channel inversion in setVolume()
    
    - IAudioFlinger:
    Added interface methods for effect enumeraiton and instantiation
    Added support for audio sessions.
    
    - IAudioTrack:
    Added method to attach auxiliary effect.
    
    - AudioFlinger
    Created new classes to control effect engines in effect library and manage effect connections to tracks or
    output mix:
      EffectModule: wrapper object controlling the effect engine implementation in the effect library. There
            is one EffectModule per instance of an effect in a given audio session
      EffectChain: group of effects associated to one audio session. There is one EffectChain per audio session.
            EffectChain for session 0 is for output mix effects, other chains are attached to audio tracks
            with same session ID. Each chain contains a variable number of EffectModules
      EffectHandle: implements the IEffect interface. There is one EffectHandle object for each application
            controlling (or using) an effect module. THe EffectModule maintians a list of EffectHandles.
    
    Added support for effect modules and effect chains creation in PlaybackThread.
    modified mixer thread loop to allow track volume control by effect modules and call effect processing.
    
    -AudioMixer
    Each track now specifies its output buffer used by mixer for accumulation
    Modified mixer process functions to process tracks by groups of tracks with same buffer
    Modified track process functions to support accumulation to auxiliary channel
    
    Change-Id: I26d5f7c9e070a89bdd383e1a659f8b7ca150379c
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Load crypto plugins from additional shared libraries
    
    Currently crypto plugins are expected to be in libdrmdecrypt.so.
    When there are multiple plugins supporting different schemes,
    this approach requires source code integration across
    vendors which is unmanagable.  Also, for integration with
    MediaDrm where the crypto keys are obtained from a drm server,
    the MediaCrypto plugin needs to interoperate with the MediaDrm
    plugin. This change allows {MediaCrypto, MediaDrm} pairs that
    are logically related to be implemented in a common shared
    library.
    
    Change-Id: I7f6638f29171f91609fc2d944396365568630b56
    Load crypto plugins from additional shared libraries
    
    Currently crypto plugins are expected to be in libdrmdecrypt.so.
    When there are multiple plugins supporting different schemes,
    this approach requires source code integration across
    vendors which is unmanagable.  Also, for integration with
    MediaDrm where the crypto keys are obtained from a drm server,
    the MediaCrypto plugin needs to interoperate with the MediaDrm
    plugin. This change allows {MediaCrypto, MediaDrm} pairs that
    are logically related to be implemented in a common shared
    library.
    
    Change-Id: I7f6638f29171f91609fc2d944396365568630b56
    Merge from jb-dev for "sample video corruption in MediaCodec mode." DO NOT MERGE
    
    jb-dev commit: fa2b8f243eb048fb2b8e5a14356190f69eb31a36
    
    Change-Id: I4f08b9c8e9682a998db01c509a390e51bae60c2d
    related-to-bug: 6732061
    Fixed sample video corrupted in MediaCodec mode.
    
    Change-Id: I50c5660072d40f6e297e58fd026ea04c89d6a70a
    related-to-bug: 6732061
    Allow propagation of error information and description from the CryptoPlugin to
    
    the higher layers.
    
    Change-Id: I9f434ad55cdf575803c208bedf47b607baff2330
    related-to-bug: 6365261
    New Crypto services talking to the new crypto "HAL".
    
    Change-Id: I69ed31e7a8b4d69d1209d2d516f94d258f072566
    related-to-bug: 6275919
    Provisional support for secure decryption of media streams.
    
    Change-Id: Ib3982a9c960bfdb0cb7e1b174440b141b194cfbe
    [libstagefright] : camcorder pause-resume implementation
    
    - Added pause resume feature in camcorder app.so that
      user pause recording and resume later which results
      in a single recorded clip.
    CRs-Fixed: 587051
    
    Change-Id: Ib82a93009348d997a4b8343b8b417b433be4c9df
    
    (cherry picked from commit 1f348eb12a631bbe6c3288c797354da6d425e64d
    from CM repository, with some of manual code removal. You know,
    CM tree tends to have QCOM-specific code all around. - peat-psuwit)
    
    Conflicts:
            media/libmediaplayerservice/StagefrightRecorder.cpp
            media/libstagefright/AudioSource.cpp
            media/libstagefright/OMXCodec.cpp
    remove uses of Surface in favor or IGraphicBufferProducer
    
    Change-Id: I13d7a9553aa335bca790a3a59d389d7533c83d57
    remove uses of Surface in favor or IGraphicBufferProducer
    
    Change-Id: I13d7a9553aa335bca790a3a59d389d7533c83d57
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Do not support still image capture mode for timelapse video recording
    
    related-to-bug: 4973779
    
    Change-Id: Ica665217ab10247b2242acc4e93d4fe9f83e3f45
    Connect MediaRecorder Native to SurfaceMediaSource
    
    Making a connection from MediaRecorder Native layer to the
    SurfaceMediaSource for the purpose of encoding GL Frames. This will be
    called from the java side inside the Mobile Filter Framework.
    
    The mediarecorder native layer (client), when set the videosource to
    option VIDEO_SOURCE_FRAMES, asks the StageFrightRecorder on the mediaserver
    side to create a SurfaceMediaSource object and pass it back as a
    sp<ISurfaceTexture> object. Using that, the client side will dequeue and
    queue buffers. Connecting the GL Frames to the obtained
    sp<ISurfaceTexture> is not part of this CL.
    
    Related to bug id: 4529323
    
    Change-Id: I651bec718dd5b935779e7d7a050b841c2d0b0fcd
    Add framework support for camcorder zoom.
    
    The purpose of ICameraRecordingProxy and ICameraRecordingProxyListener is to
    allow applications using the camera during recording.
    
    Camera service allows only one client at a time. Since camcorder application
    needs to own the camera to do things like zoom, the media recorder cannot
    access the camera directly during recording. So ICameraRecordingProxy is a proxy
    of ICamera, which allows the media recorder to start/stop the recording and
    release recording frames. ICameraRecordingProxyListener is an interface that
    allows the recorder to receive video frames during recording.
    
    ICameraRecordingProxy
      startRecording()
      stopRecording()
      releaseRecordingFrame()
    
    ICameraRecordingProxyListener
      dataCallbackTimestamp()
    
    The camcorder app opens the camera and starts the preview. The app passes
    ICamera and ICameraRecordingProxy to the media recorder by
    MediaRecorder::setCamera(). The recorder uses ICamera to setup the camera in
    MediaRecorder::start(). After setup, the recorder disconnects from camera
    service. The recorder calls ICameraRecordingProxy::startRecording() and
    passes a ICameraRecordingProxyListener to the app. The app connects back to
    camera service and starts the recording. The app owns the camera and can do
    things like zoom. The media recorder receives the video frames from the
    listener and releases them by ICameraRecordingProxy::releaseRecordingFrame.
    The recorder calls ICameraRecordingProxy::stopRecording() to stop the
    recording.
    
    The call sequences are as follows:
    1. The app: Camera.unlock().
    2. The app: MediaRecorder.setCamera().
    3. Start recording
       (1) The app: MediaRecorder.start().
       (2) The recorder: ICamera.unlock() and ICamera.disconnect().
       (3) The recorder: ICameraRecordingProxy.startRecording().
       (4) The app: ICamera.reconnect().
       (5) The app: ICamera.startRecording().
    4. During recording
       (1) The recorder: receive frames from ICameraRecordingProxyListener.dataCallbackTimestamp()
       (2) The recorder: release frames by ICameraRecordingProxy.releaseRecordingFrame().
    5. Stop recording
       (1) The app: MediaRecorder.stop()
       (2) The recorder: ICameraRecordingProxy.stopRecording().
       (3) The app: ICamera.stopRecording().
    
    bug:2644213
    
    Change-Id: I15269397defc25cbbcae16abc071c8349c123122
    Added setAuxiliaryOutputFile to MediaRecorder and JNI
    
    added setAuxiliaryOutputFile to allow setting of an auxiliary output file.
    Also added the JNI support.
    
    Change-Id: I8c3335192bd6f7fcbfdfc8552cfd0848f2ad2a5d
    Change the framework to use the new camera preview path.
    
    This change makes the camera HAL interface take an ANativeWindow interface from
    which all the camera preview buffers will be allocated.  The framework code
    running in application processes now passes a Surface object rather than an
    ISurface to the camera server via Binder when setting the preview surface.  The
    camera server then forwards that Surface object (which implements the
    ANativeWindow interface) to the camera HAL, which uses it to communicate with
    SurfaceFlinger to allocate the camera preview buffers.
    
    Change-Id: Ie438f721559cd7de5e4f848a26d96360dda07b5f
    fix inaccurate copyrights
    
    Change-Id: I33b0f68f2da34ca4728211d83159cf32a127f6dd
    fix inaccurate copyrights
    
    Change-Id: I33b0f68f2da34ca4728211d83159cf32a127f6dd
    Separate MediaRecorderClient with MediaPlayerClient
    
    - An alternative would be to define a common base class that
      both MediaRecorderClient and MediaPlayerClient can derive.
      But since the common code, onTransact() and notify() uses
      some Binder code, having a common base class may not gain
      us too much in terms of code reuse.
    
    Change-Id: Ibc06720278ad173fceacff3d267b7060856c6316
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //branches/cupcake_rel/...@138607
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@132589
    auto import from //depot/cupcake/@137055
    auto import from //branches/cupcake/...@131421
    Code drop from //branches/cupcake/...@124589
    Effects Factory changes for effects offload
    
    audio_effects.conf - commented changes to illustrate the
    addition of Proxy and sub effects to the conf file
    
    Added an effectFactoryApi - EffectGetSubEffects for querying the
    sub effect descriptors from the factory. This api is used by the Proxy
    to get the sub effects
    
    Added functions and data structures in factory code for
    loading the sub effects
    
    gSubEffectList - has the Proxies and their corresponding sub effects
    
    - addSubEffect() - reads a sub effect node and adds to the gSubEffectList
    - findSubEffect() - searches through the gSubEffectList to find a SubEffect
    
    Bug: 8174034.
    
    Change-Id: Id7f6aa67c41db370d32beaf43a979ba4ac925928
    Signed-off-by: jpadmana <jayashree.r.padmanaban@intel.com>
    Revert "Effects Factory changes for effects offload"
    
    This reverts commit 284c17e73bbff51cb5b1adcee98386d47733757a.
    
    Change-Id: I31db21e1ad4758b21356bfe4c4c64f15b2da8737
    Effects Factory changes for effects offload
    
    audio_effects.conf - commented changes to illustrate the
    addition of Proxy and sub effects to the conf file
    
    Added an effectFactoryApi - EffectGetSubEffects for querying the
    sub effect descriptors from the factory. This api is used by the Proxy
    to get the sub effects
    
    Added functions and data structures in factory code for
    loading the sub effects
    
    gSubEffectList - has the Proxies and their corresponding sub effects
    
    - addSubEffect() - reads a sub effect node and adds to the gSubEffectList
    - findSubEffect() - searches through the gSubEffectList to find a SubEffect
    
    Bug: 8174034.
    
    Change-Id: I25b0c62b2ad523a52337128b51469e628209ea3e
    Signed-off-by: jpadmana <rpadmanaban.jayashree@gmail.com>
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Update comments
    
    We no longer put the filename at start of file.
    
    Change-Id: Ic435b159a23105681e3d4a6cb1ac097bc853302e
    Effect UUID inputs passed by pointer are const
    
    Change-Id: I1f5c338bcb7368e3dd8cd5f804b2e6d9fbe087f8
    Removed interface to load audio effects libraries
    
    Removed unused functions allowing dynamic loading of audio effects libraries
    from effects factory API.
    
    Change-Id: I06cc5a51dc10aca87c7a8687bbb874babd711eca
    New effect library API
    
    Moved and renamed media/EffectApi.h to hardware/audio_effect.h
    Modified the effect library API to expose a library info structure
    containing an interface functions table.
    Also removed enums for audio channels, audio format and devices
    from effect API and use values from system/audio.h instead.
    
    Modified effects factory to support new library interface format and
    load libraries and efffects listed in audio_effects.conf file.
    The file audio_effects.conf is first loaded from /vendor/etc and
    then from /system/etc/audio_effects.conf if not found.
    
    Modified existing effect libraries to implement the new library interface.
    
    Change-Id: Ie52351e071b6d352fa2fbc06c3846686f8c45df9
    Various fixes and improvements in audio effects implementation
    
    Effect API:
    - Use different definitions for audio device, channels, formats... in AudioSystem and EffectApi:
      Removed media/AudioCommon.h file created for initial version of EffectApi
    - Indicate audio session and output ID to effect library when calling EffectCreate(). Session ID can be useful to optimize
    the implementation of effect chains in the same audio session. Output ID can be used for effects implemented in audio hardware.
    - Renamed EffectQueryNext() function to EffectQueryEffect() and changed operating mode:
      now an index is passed for the queried effect instead of implicitly querying the next one.
    - Added CPU load and memory usage indication in effects descriptor
    - Added flags and commands to indicate changes in audio mode (ring tone, in call...) to effect engine
    - Added flag to indicate hardware accelerated effect implementation.
    - Renamed EffectFactoryApi.h to EffectsFactoryApi.h for consistency with EffectsFactory.c/h
    
    Effect libraries:
    - Reflected changes in Effect API
    - Several fixes in reverb implementation
    - Added build option TEST_EFFECT_LIBRARIES in makefile to prepare integration of actual effect library.
    - Replaced pointer by integer identifier for library handle returned by effects factory
    
    Audio effect framework:
    - Added support for audio session -1 in preparation of output stage effects configuration.
    - Reflected changes in Effect API
    - Removed volume ramp up/down when effect is inserted/removed: this has to be taken care of by effect engines.
    - Added some overflow verification on indexes used for deferred parameter updates via shared memory
    - Added hardcoded CPU and memory limit check when creating a new effect instance
    
    Change-Id: I43fee5182ee201384ea3479af6d0acb95092901d
    Issue 2667801: [Audio Effect Framework] AudioFlinger, AudioMixer AudioTrack modifications.
    
    First drop of audio framework modifications for audio effects support.
    
    - AudioTrack/AudioRecord:
    Added support for auxiliary effects in AudioTrack
    Added support for audio sessions
    Fixed left right channel inversion in setVolume()
    
    - IAudioFlinger:
    Added interface methods for effect enumeraiton and instantiation
    Added support for audio sessions.
    
    - IAudioTrack:
    Added method to attach auxiliary effect.
    
    - AudioFlinger
    Created new classes to control effect engines in effect library and manage effect connections to tracks or
    output mix:
      EffectModule: wrapper object controlling the effect engine implementation in the effect library. There
            is one EffectModule per instance of an effect in a given audio session
      EffectChain: group of effects associated to one audio session. There is one EffectChain per audio session.
            EffectChain for session 0 is for output mix effects, other chains are attached to audio tracks
            with same session ID. Each chain contains a variable number of EffectModules
      EffectHandle: implements the IEffect interface. There is one EffectHandle object for each application
            controlling (or using) an effect module. THe EffectModule maintians a list of EffectHandles.
    
    Added support for effect modules and effect chains creation in PlaybackThread.
    modified mixer thread loop to allow track volume control by effect modules and call effect processing.
    
    -AudioMixer
    Each track now specifies its output buffer used by mixer for accumulation
    Modified mixer process functions to process tracks by groups of tracks with same buffer
    Modified track process functions to support accumulation to auxiliary channel
    
    Change-Id: I26d5f7c9e070a89bdd383e1a659f8b7ca150379c
    Fix issue 2667796: [Audio Effect Framework] Effect factory and libraries.
    
    First effect factory and effect library API implementation.
    Also added default effect libraries for reverb and equalizer effects.
    These libraries are for functional test only and are not fine tuned with
    regard to audio quality. They will probably be replaced by other implementations
    before the release.
    
    Change-Id: I6868f8612146ae282c64052765c61a52ec789ec8
    Audio effects: modified command() parameter types.
    
    The type of the cmd, cmdSize and *pReplySize parameters of the effect control interface command()
    function have been modified from int to uint32_t. This is more consistent with their role.
    
    Change-Id: I84d289fc262d6753747910f06f485597dfee6591
    Fix issue 2667797: [Audio Effect Framework] new base class and binder interfaces for effect control.
    
    Added IEffect and IEffectClient binder interfaces to exchange effect module control
    and status information between application and media server processes.
    
    Change-Id: I10e8e894898e52ed9956a765d0ef7075eb2593af
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Assign blame for playback wakelocks.
    
    Set a work source for the playback wakelock, so that playback is
    counted against the requesting app instead of the media server.
    
    Cherrypicked from master.
    
    b/9464621
    
    Change-Id: I7329f88a288a95a582a78005a1c3d16a5a611e31
    Fix race condition in AudioTrack::pause followed by start
    
    Bug: 11148722
    Change-Id: Iec88f00c8510363d4418e4b8d5b34feb06ecf04d
    Fix slow AudioTrack and AudioRecord destruction
    
    There were two causes for the slowness:
    
    When thread was paused, it used nanosleep and sleep.  These usually
    run to completion (except for POSIX signal, which we avoid because it
    is low-level).  Instead, replace the nanosleep and sleep by condition
    timed wait, as that can be made to return early by a condition signal.
    Another advantage of condition timed wait is that a condition wait was
    already being used at top of thread loop, so it is a simpler change.
    
    The AudioRecord destructor was missing a proxy interrupt that was correct
    in AudioTrack.  This proxy interrupt is needed in case another thread
    is blocked in proxy obtainBuffer.
    
    Does not address the 1 second polling for NS_WHENEVER.
    
    Bug: 10822765
    Change-Id: Id665994551e87e4d7da9c7b015f424fd7a0b5560
    Add IAudioTrack::getTimestamp()
    
    with dummy implementation in AudioFlinger::TrackHandle, and
    implement AudioTrack::getTimestamp() using IAudioTrack.
    
    Also document invariant that mAudioTrack and control block are always
    non-0 after successful initialization.
    
    Change-Id: I9861d1454cff7decf795d5d5898ac7999a9f3b7e
    New AudioTrack C++ API for audio timestamps
    
    This new API is intended to replace latency(), especially for A/V sync.
    The application will receive periodic timestamp notifications.  The period
    is unspecified, but will likely be more frequent after a pause or stop,
    set position, underrun, display on/off change, route change, or when audio
    framework notices drift.  It will be up to the higher level application
    (e.g.  Stagefright) to reconstruct a clock that updates more frequently.
    
    The current latency() method doesn't indicate when latency changes
    due to screen on/off state, route changes, etc.
    
    Includes squahsed change-Id: I2082f8752040be0c234b1a6f1be2e269abf2ce7c
     Dummy implementation of AudioTrack:getTimestamp()
     Rename AudioTrack::Timestamp to AudioTimestamp.
     Renaming and pulling up to a higher level allows more modules to use it.
    
    Change-Id: Ibf7f6a207c3f8d8697f25ede2cd5200697fadb86
    (cherry picked from commit dd69eb893867634fd169c03204a6ad7c74b351e7)
    Cleanup comments for the new control block implementation
    
    There was some obsolete and incomplete text left over
    after the new control block code was submitted.
    This cleans up all those comments to be accurate again.
    
    Change-Id: Ic52f5869cb723cde25d709514d6deea6aa6f20aa
    Remove default parameters for AudioTrack
    
    The defaults aren't needed; all users must know these values.
    
    Change-Id: I0c1c97cb80bfea8e69a7cfa53ec85a91a8d48bb5
    Make AudioRecord and AudioTrack comments more similar
    
    Change-Id: I122a7cf7bfc162090cb27f37c325db7a23985bc7
    Move control block mName to createTrack() output
    
    This is part of a series of CLs to clean up the shared memory
    control block, by removing any fields that don't have to be there.
    
    Change-Id: I6e51003a1293b6800258c31b22cff2eba42162e7
    libmedia: offloaded playback support
    
    - start() returns a status so that upper layers can
    recreate a non offloaded track in case of error.
    
    - Added states to handle offloaded tracks specific:
      - waiting for stream end (drain) notification by
    audio flinger
      - allow pause while waiting for stream end notification
    
    - getPosition() queries the render position directly from
    audio HAL.
    
    - disable APIs not applicable to offloaded tracks
    
    - Modified track restoring behavior for invalidated
    offloaded tracks: just send the callback and wait for
    upper layers to create a new track.
    
    - Added wait for stream end management in audio track client
    proxy. Similar to obtainBuffer and should be factored in.
    
    Change-Id: I0fc48117946364cb255afd653195498891f622bd
    Signed-off-by: Eric Laurent <elaurent@google.com>
    Add comments
    
    Change-Id: Ifbf3a46a4183c8abc0feee1c588953ab10303cc1
    Public API changes for audio offload support.
    
    NOTE: this does _not_ include all private member variables added
    to classes as part of offload support. Only public/protected functions
    and stubs functions/variables needed to make the changes buildable.
    
    - isOffloadSupported() added to audio policy service
        A stub implementation is required to build, this always returns false
    - setParameters() added to IAudioTrack
        A stub implementation is required to build, this always returns
        INVALID_OPERATION
    
    - CBlk flag for stream end
    
    - Change AudioSystem::getRenderPosition() to take an audio_output_t
        so caller can specify which output to query
    
    - Add AudioSystem::isOffloadSupported()
        This is fully implemented down to the AudioFlinger function
        AudioPolicyServer::isOffloadSupported() which is just a stub
        that always returns false.
    
    - Add EVENT_STREAM_END to AudioTrack interface.
        STREAM_END is used to signal when the hardware has actually finished
        playing all the data it was sent.
    
    - Add event type enumeration to media player interface AudioSink callbacks
        so that the same callback can be used to handle multiple types of
        event. For offloaded tracks we also have to handle STREAM_END and
        TEAR_DOWN events
    
    - Pass audio_offload_info_t to various functions used for opening outputs,
        tracks and audio players. This passes additional information about the
        compressed stream down to the HAL when using offload.
        For publicly-available APIs this is an optional parameter (for some of
        the internal and low-level APIs around the HAL interface it is mandatory)
    
    - Add getParameters() and setParameters() API to AudioTrack
        Currently dummy implementations.
    
    - Change AudioPlayer contructor so that it takes a set of bitflags defining what
        options are required. This replaces the original bool which only specified
        whether to use deep buffering.
    
    - Changes to StageFright class definition related to handling tearing-down of
        an offloaded track when we need to switch back to software decode
    
    - Define new StageFright utility functions used for offloaded tracks
        Currently dummy implementations.
    
    - AudioFlinger changes to use extended audio_config_t.
        Fills in audio_offload_info_t member if this info is passed in when
        opening an output.
    
    - libvideoeditor changes required to add the new event type parameter
        to AudioSink callback functions
    
    - libmediaplayerservice changes required to add the new event type parameter
        to AudioSink callback functions
    
    Change-Id: I3ab41138aa1083d81fe83b886a9b1021ec7320f1
    Signed-off-by: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
    Signed-off-by: Eric Laurent <elaurent@google.com>
    New control block for AudioTrack and AudioRecord
    
    Main differences between old and new control block:
     - removes the mutex, which was a potential source of priority inversion
     - circular indices into shared buffer, which is now always a power-of-2 size
    
    Change-Id: I4e9b7fa99858b488ac98a441fa70e31dbba1b865
    Use sp<AudioTrack> instead of raw AudioTrack *
    
    This change prepares for the new implementation of AudioTrack client, which
    will require clients to use only sp<AudioTrack>, not raw AudioTrack *.
    A raw delete will cause a race condition during AudioTrack destruction.
    
    AudioTrack was made a RefBase by commit b68a91a70bc8d0d18e7404e14443d4e4020b3635
    on 2011/11/15, when it was needed by OpenSL ES (for the callback protector).
    At that time, the only other client that was also converted from
    AudioTrack * to sp<AudioTrack> was android.media.AudioTrack JNI in
    project frameworks/base (file android_media_AudioTrack.cpp).
    
    Details:
     * Use .clear() instead of delete followed by = NULL.
     * ALOG %p need .get().
     * sp<> don't need to be listed in constructor initializer, if initially 0.
     * Use == 0 for sp<> vs == NULL for raw pointers.
     * Use if (sp != 0) instead of if (raw).
    
    Change-Id: Ic7cad25795d6e862e112abdc227b6d33afdfce17
    Remove timing jitter during startup of audio
    
    This fixes a regression introduced recently, that increased timing jitter
    during the startup of the FastMixer and AudioTrack callback threads.
    
    The regression was to make requestPriority() asynchronous as a way to
    avoid an apparent priority inversion in system_server.  This means that
    the target thread could run briefly with the initial priority, before
    the new priority takes effect.
    
    This change removes the startup jitter for FastMixer, by making the
    requestPriority() synchronous again for that case.  It doesn't matter
    that this restores the priority inversion involving normal mixer thread,
    because it happens during startup of both threads.
    
    The change also removes the startup jitter for the AudioTrack callback
    thread, by having the target thread check whether the requestPriority()
    has completed yet.  If not, the target thread blocks with a timeout
    until the priority boost finishes.
    
    Finally, we now log an error message if the expected priority boost
    doesn't happen.
    
    Bug: 8698989
    Change-Id: Id590e9a274b70ec1ba85b44a585ee37a22e41cbc
    Remove timing jitter during startup of audio
    
    This fixes a regression introduced recently, that increased timing jitter
    during the startup of the FastMixer and AudioTrack callback threads.
    
    The regression was to make requestPriority() asynchronous as a way to
    avoid an apparent priority inversion in system_server.  This means that
    the target thread could run briefly with the initial priority, before
    the new priority takes effect.
    
    This change removes the startup jitter for FastMixer, by making the
    requestPriority() synchronous again for that case.  It doesn't matter
    that this restores the priority inversion involving normal mixer thread,
    because it happens during startup of both threads.
    
    The change also removes the startup jitter for the AudioTrack callback
    thread, by having the target thread check whether the requestPriority()
    has completed yet.  If not, the target thread blocks with a timeout
    until the priority boost finishes.
    
    Finally, we now log an error message if the expected priority boost
    doesn't happen.
    
    Bug: 8698989
    Change-Id: Id590e9a274b70ec1ba85b44a585ee37a22e41cbc
    Miscellaneous cleanup
    
    Abbreviation framesReady to fRdy for new systrace.
    Put inline const on one line.
    Use local copy of mState in state.
    Improve logging.
    Line length 100.
    
    Change-Id: I8201c3ce0e53fd464fd33d02544e52c342d40b68
    Miscellaneous cleanup
    
    Abbreviation framesReady to fRdy for new systrace.
    Put inline const on one line.
    Use local copy of mState in state.
    Improve logging.
    Line length 100.
    
    Change-Id: I8201c3ce0e53fd464fd33d02544e52c342d40b68
    Propose new interpretation for setPosition and setLoop
    
    Add new API getBufferPosition to return position relative
    to start of fixed buffer.
    
    Change-Id: I7aca8e392d45b988545f07b36b5032691057b03e
    Start isolating control block accesses in a proxy
    
    The proxy object will eventually be the only code that understands the
    details of the control block.  This should make it easier to change the
    control block in the future.
    
    Initial set of control block fields that are isolated:
     - sample rate
     - send level
     - volume
    
    Prepare for streaming/static separation by adding a union to the control
    block for the new fields.
    
    Fix bug in handling of max sample rate on a track.  It was only checking
    at re-configuration, not at each mix.
    
    Simplify OutputTrack::obtainBuffer.
    
    Change-Id: I2249f9d04f73a911a922ad1d7f6197292c74cd92
    Start isolating control block accesses in a proxy
    
    The proxy object will eventually be the only code that understands the
    details of the control block.  This should make it easier to change the
    control block in the future.
    
    Initial set of control block fields that are isolated:
     - sample rate
     - send level
     - volume
    
    Prepare for streaming/static separation by adding a union to the control
    block for the new fields.
    
    Fix bug in handling of max sample rate on a track.  It was only checking
    at re-configuration, not at each mix.
    
    Simplify OutputTrack::obtainBuffer.
    
    Change-Id: I2249f9d04f73a911a922ad1d7f6197292c74cd92
    Emphasize distinction between streaming and static
    
    Update comments and improve error checks to match
    
    Change-Id: I7370d6e59a7ef26dfb284a8b058d5ab2e0a42ccf
    Emphasize distinction between streaming and static
    
    Update comments and improve error checks to match
    
    Change-Id: I7370d6e59a7ef26dfb284a8b058d5ab2e0a42ccf
    flush() comments and checks
    
    flush() is only useful for streaming mode.
    It is a no-op if track is active or uses a static buffer.
    
    Change-Id: I918ac181ffae3d16a0d67d8a7208f4aec61b5bd6
    flush() comments and checks
    
    flush() is only useful for streaming mode.
    It is a no-op if track is active or uses a static buffer.
    
    Change-Id: I918ac181ffae3d16a0d67d8a7208f4aec61b5bd6
    AudioTrack::mute() is unused so remove it
    
    If ever needed again, it could be implemented on client side by forcing
    a track volume of 0.
    
    Change-Id: I88a9b4f675b6dca2948549414f9ec2c192d29269
    AudioTrack::mute() is unused so remove it
    
    If ever needed again, it could be implemented on client side by forcing
    a track volume of 0.
    
    Change-Id: I88a9b4f675b6dca2948549414f9ec2c192d29269
    AudioTrack inline short const methods
    
    Change-Id: I142917edb454d510bbe545e94e6eaea30b650fae
    AudioTrack inline short const methods
    
    Change-Id: I142917edb454d510bbe545e94e6eaea30b650fae
    Clean up channel count and channel mask
    
    Channel count is uint32_t.
    Remove redundant mask parameter to AudioTrack::createTrack_l()
        and AudioRecord::openRecord_l().
    
    Change-Id: I5dc2b18eb609b2c0dc3091994cbaa4628062c17f
    Clean up channel count and channel mask
    
    Channel count is uint32_t.
    Remove redundant mask parameter to AudioTrack::createTrack_l()
        and AudioRecord::openRecord_l().
    
    Change-Id: I5dc2b18eb609b2c0dc3091994cbaa4628062c17f
    Don't use control block frame count after create
    
    This is part of a series to clean up the control block.
    
    Change-Id: I7f4cb05aef63053f8e2ab05b286d302260ef4758
    Don't use control block frame count after create
    
    This is part of a series to clean up the control block.
    
    Change-Id: I7f4cb05aef63053f8e2ab05b286d302260ef4758
    Use size_t for frame counts
    
    Also fix typo: bufferCount should be frameCount.
    
    Change-Id: Ibed539504db75ef99dc21c8ff1bf2987122063a5
    Use size_t for frame counts
    
    Also fix typo: bufferCount should be frameCount.
    
    Change-Id: Ibed539504db75ef99dc21c8ff1bf2987122063a5
    Clean up frame size in AudioTrack and AudioFlinger
    
    TrackBase::mFrameSize, mChannelMask, and mChannelCount are now const.
    Use TrackBase::mFrameSize instead of re-calculating frame size.
    AudioFlinger only sees 16-bit PCM format, conversion from 8-bit is
      now entirely on the client side.  Previously a small part of the
      responsibility was on server side also.
    size_t is unsigned, so use %u in logs.
    Fix theoretical bug where TrackBase constructor was over-allocating space
      for non-linear AudioTrack or 8-bit PCM AudioRecord (probably benign).
    
    Change-Id: I7cbbba0bf4dba29ea751d8af341ab8e5cbbdc206
    Clean up frame size in AudioTrack and AudioFlinger
    
    TrackBase::mFrameSize, mChannelMask, and mChannelCount are now const.
    Use TrackBase::mFrameSize instead of re-calculating frame size.
    AudioFlinger only sees 16-bit PCM format, conversion from 8-bit is
      now entirely on the client side.  Previously a small part of the
      responsibility was on server side also.
    size_t is unsigned, so use %u in logs.
    Fix theoretical bug where TrackBase constructor was over-allocating space
      for non-linear AudioTrack or 8-bit PCM AudioRecord (probably benign).
    
    Change-Id: I7cbbba0bf4dba29ea751d8af341ab8e5cbbdc206
    Use uint32_t for sample rate
    
    Change-Id: Ie240b48fb54b08359f69ecd4e5f8bda3d15cbe80
    Use uint32_t for sample rate
    
    Change-Id: Ie240b48fb54b08359f69ecd4e5f8bda3d15cbe80
    Update audio comments
    
    Change-Id: I85d7d2f6381b251db5695202fec75128883a8662
    Update audio comments
    
    Change-Id: I85d7d2f6381b251db5695202fec75128883a8662
    Move frame size out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ifab1c42ac0f8be704e571b292713cd2250d12a3f
    Move frame size out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ifab1c42ac0f8be704e571b292713cd2250d12a3f
    Move buffers pointer out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ie474557db7cb360f2d9a0f11600a68f5a3d46f07
    Move buffers pointer out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ie474557db7cb360f2d9a0f11600a68f5a3d46f07
    Simplify AudioTrack::restoreTrack_l()
    
    Remove CBLK_RESTORING and CBLK_RESTORED from control block flags,
    for AudioTrack only.  They are still used by AudioRecord.
    
    This is part of a series to clean up the control block.
    
    Change-Id: Iae4798f5b527c492bdaf789987ff3a1dadd0cb37
    Simplify AudioTrack::restoreTrack_l()
    
    Remove CBLK_RESTORING and CBLK_RESTORED from control block flags,
    for AudioTrack only.  They are still used by AudioRecord.
    
    This is part of a series to clean up the control block.
    
    Change-Id: Iae4798f5b527c492bdaf789987ff3a1dadd0cb37
    Fix call to restoreTrack_l() without lock held
    
    Also document lock order
    
    Change-Id: I2c1f273a0a51fa79ee3dd766de8d23083e270051
    Fix call to restoreTrack_l() without lock held
    
    Also document lock order
    
    Change-Id: I2c1f273a0a51fa79ee3dd766de8d23083e270051
    Remove unused fields in AudioTrack::Buffer
    
    Change-Id: Iab75f6e2348d8b6d1f3cec95aeb3fcd5135dfb50
    Remove unused fields in AudioTrack::Buffer
    
    Change-Id: Iab75f6e2348d8b6d1f3cec95aeb3fcd5135dfb50
    Add all-channel AudioTrack::setVolume() API
    
    Add combined channel APIs setVolume to AudioTrack,
    and remove obsolete getVolume.
    
    Change-Id: I0c87bfdbff4f4292259fa33e65f67badbafd270b
    Add all-channel AudioTrack::setVolume() API
    
    Add combined channel APIs setVolume to AudioTrack,
    and remove obsolete getVolume.
    
    Change-Id: I0c87bfdbff4f4292259fa33e65f67badbafd270b
    Remove deprecated AudioTrack APIs
    
    Change-Id: I88be6525f3e33df529c0c3cb701d12a484809477
    Remove deprecated AudioTrack APIs
    
    Change-Id: I88be6525f3e33df529c0c3cb701d12a484809477
    AudioTrack comments
    
    Change-Id: I08988f635c5bc6f4c35e9c4188f3d6fa557bc4c2
    AudioTrack comments
    
    Change-Id: I08988f635c5bc6f4c35e9c4188f3d6fa557bc4c2
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Update audio comments
    
    Change-Id: Ie7504d0ddb252f7e4d4f99ed0b44cfc7b1049816
    Update audio comments
    
    Change-Id: Ie7504d0ddb252f7e4d4f99ed0b44cfc7b1049816
    Revert "Swap the order of creating IAudioTrack and thread"
    
    This reverts commit 5d464eb0b8cffb994a754ff108795e858a882414.
    It caused the wrong thread ID -1 to be passed to IAudioFlinger::createTrack().
    
    Change-Id: Ic221d2bb4af572d3d2d752af19238c52f6728e3a
    Swap the order of creating IAudioTrack and thread
    
    Simplifies the error recovery in case IAudioTrack fails.
    
    Change-Id: I6aee41a2ac747a5689fb4836b04174e6107bf32f
    Use audio_channel_mask_t for channel mask
    
    Change-Id: I1c1896da48983aa9f1462a4b471f910498816f60
    Remove dead code in libmedia
    
    Change-Id: I7d8201590cda29c9fa99662a4fdba222091febfe
    Use C APIs instead of C++ APIs for policy
    
    The C++ APIs are going away.
    
    Note: we use tid == 0 which is not supported yet by the C APIs,
    do not submit this until that is added.
    
    Change-Id: I0e90789e6c81c69f2544e899c52421ea5d1342be
    Configure policy of mediaserver threads
    
    Change-Id: Ifd825590ba36996064a458f64453a94b84722cb0
    rename audio policy output flags
    
    Change-Id: I27c46bd1d1b2b5f96b87af7d05b951fef18a1312
    AudioTrack client fast policy
    
    Change-Id: I42ce691df3f586ac061b62237f35a263a0116f1f
    Remove enforceFrameCount
    
    It was only used to decide whether to issue a warning.
    The warning was issued the first time track was created but
    not at re-creation.  Now it is a verbose message every time,
    not a warning since it happens all the time with key clicks on A2DP.
    
    Change-Id: I9d39f53c0a7eb84b666e55b1b76ff830cf8f37ba
    Whitespace
    
    Fix indentation, and add blank lines in key places for clarity
    
    Change-Id: I57a0a8142394f83203161aa9b8aa9276abf3ed7c
    AudioTrack: relax check on minimum buffer size
    
    Current AudioTrack implementation enforces that the requested audio
    buffer size is at least corresponding the audio latency.
    This requirement is too strong and leads to problems with current
    stagefright and AudioSink implementations when playing over output
    streams with long latency.
    
    Ultimately, the AudioSink design should be changed to specify a minimum
    buffer size in time or frames units but not in buffer count units.
    
    Change-Id: I8ba603956f92ac49143a8249572665aa548f2f0f
    
    Conflicts:
    
            media/libmedia/AudioTrack.cpp
    Use audio_policy_output_flags_t consistently
    
    This affects:
     - IAudioFlinger::openOutput
     - AudioTrack::AudioTrack
     - AudioTrack::set
     - apps that call these
    
    Change-Id: I26fb281bac6cb87593d17697bc9cb37a835af205
    AudioTrack: relax check on minimum buffer size
    
    Current AudioTrack implementation enforces that the requested audio
    buffer size is at least corresponding the audio latency.
    This requirement is too strong and leads to problems with current
    stagefright and AudioSink implementations when playing over output
    streams with long latency.
    
    Ultimately, the AudioSink design should be changed to specify a minimum
    buffer size in time or frames units but not in buffer count units.
    
    Change-Id: I8ba603956f92ac49143a8249572665aa548f2f0f
    Upintegrate Audio Flinger changes from ICS_AAH
    
    Bring in changes to audio flinger made to support timed audio tracks
    and HW master volume control.
    
    Change-Id: Ide52d48809bdbed13acf35fd59b24637e35064ae
    Signed-off-by: John Grossman <johngro@google.com>
    Update comments
    
    We no longer put the filename at start of file.
    
    Change-Id: Ic435b159a23105681e3d4a6cb1ac097bc853302e
    Remove dead code AudioTrack::getLoop
    
    Change-Id: I868329c52f31bc20125f068500d8f892b4ec9796
    AudioTrack declare more methods const
    
    Change-Id: I4999e984460893961d0d8092cff17f3cf07d7214
    Use NULL not 0 for raw pointers
    
    Use if (p != NULL) instead of if (ptr)
    
    Change-Id: Iaec3413a59ccbf233c98fcd918cc7d70ac5da9fa
    Remove dead mutex in AudioTrack/AudioRecord thread
    
    The client callback threads had mutexes called AudioTrackThread::mLock
    and ClientRecordThread::mLock.  These mutexes were only used by start()
    and stop(), and were unused by the thread itself.  But start() and
    stop() already have their own protection provided by AudioTrack::mLock
    and AudioRecord::mLock.  So the thread mutexes can be removed.
    
    Change-Id: I098406d381645d77fba06a15511e179a327848ef
    Remove AudioFlinger dependencies on client
    
    Change-Id: Ibb591e41a3ca5d7015e2b66b98b8fef5f415fb37
    Temporarily restore AudioSystem/AudioTrack APIs with their former signatures
    
    until we get updated prebuilts from vendor.
    
    Change-Id: I8aae81d2513edca0ab268053a11c8c4206879e61
    Use size_t for frame size
    
    except in the control block, where we don't have room.
    
    In AudioFlinger::ThreadBase::TrackBase::getBuffer,
    read the frame size from control block only once.
    
    Change-Id: Id6c4bccd4ed3e07d91df6bbea43bae45524f9f4e
    Use audio_stream_type_t consistently
    
    At native level it was a mixture of audio_stream_type_t, int, uint32_t,
    and uint8_t.  Java is still int.  Also fixed a couple of hard-coded -1
    instead of AUDIO_STREAM_DEFAULT, and in startToneCommand a hard-coded 0
    instead of AUDIO_STREAM_VOICE_CALL.
    
    Change-Id: Ia33bfd70edca8c2daec9052984b369cd8eee2a83
    Use audio_format_t consistently
    
    Was int, uint32_t, uint16_t, and uint8_t with 2-bit bitfield.
    Also replace 0 by AUDIO_FORMAT_DEFAULT and replace 1 by
    AUDIO_FORMAT_PCM_16_BIT.
    
    Change-Id: Ia8804f53f1725669e368857d5bb2044917e17975
    Clean up AudioTrack::mActive and stopped()
    
    mActive is protected by mLock; volatile is meaningless on SMP.
    
    Fixed a couple of places where mActive was accessed without a lock:
     - stopped()
     - processAudioBuffer()
    
    Added stopped_l() for cases where we already hold the lock.
    
    Made mActive a bool not int.
    
    Moved down a lock in setPosition that was being acquired too early.
    
    Change-Id: I73ff368e991c0db9f9472df0b3f96fd33fcc7311
    Audio C++ comments
    
    Change-Id: I84906ebb9dfcfa5b96b287d18364b407f02a30c1
    Bug 4903178 Restore priority and cgroup on stop
    
    On AudioTrack and AudioRecord stop or failed start, restore the priority
    and cgroup of the caller to their previous values, rather than forcing
    to NORMAL.  Dependent on new thread APIs.
    
    Also fixes bug where priority was set to AUDIO but cgroup not set.
    
    Change-Id: Ib83893918fb4fdf57c6b87884b51038997a631d8
    Make AudioTrack a RefBase so wrappers not needed
    
    Change-Id: I2305abe586ac41251af04a194bc818c110a1b293
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: I6ec5d2bca9b8ebc0acd395a7dd92e1a48fcdfa9b
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    undo reset to ics-mr1 until we have a better method
    reset to ics-mr1, but keep history
    Issue 5298399: Lost speech after a crash in gTalk.
    
    Fixed problem in AudioTrack::restoreTrack_l() causing a permanent
    failure if the IAudioTrack interface to AudioFlinger could not be
    restored at the first attempt.
    
    Change-Id: I039d4fe2dca8d3baf71f1a6c51119f27a67b6611
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: Id78bba8c002131d8b52b4170259a87fd94e63c73
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    Bug 4364249 Play position is 0 after flushing AudioTrack
    
    AudioTrack::stop() is not synchronous, so a stop() followed
     by flush(), which is synchronous, will not always report
     a playhead position of 0 after being called.
    This CL adds a flag to mark a track as flushed, and report the
     correct playhead position in this state.
    Bug 5217011 has been created to address the real issue in the
     future, where flush could be made synchronous, to properly
     address bug 4364249.
    
    Change-Id: Icf989d41a6bcd5985bb87764c287f3edb7e26d12
    Revert "Use AudioTrack::event_type not int in callback"
    
    This reverts commit 2225e4b7049fa3fb9d39a068b8268b63c952d7c1
    Use AudioTrack::event_type not int in callback
    
    Change-Id: Ifefc708d46874e04fd0d01cb6e2d43b987ee796c
    Use channel mask instead of channel count for track creation
    
    Record and playback objects (resp AudioRecord and AudioTrack)
    are created using a channel mask, but this information is lost
    in the mixer because only the channel count is known to
    AudioFlinger. A channel count can always be derived from a
    channel mask.
    
    The change consists in:
    - disambiguiting variable names for channel masks and counts
    - passing the mask information from the client to AudioFlinger
     and the mixer.
    - when using the DIRECT ouput, only verifying the format of
     the track is compatible with the output's for PCM.
    
    Change-Id: I50d87bfb7d7afcabdf5f12d4ab75ef3a54132c0e
    audio/media: convert to using the audio HAL and new audio defs
    
    Change-Id: Ibc637918637329e4f2b62f4ac7781102fbc269f5
    Signed-off-by: Dima Zavin <dima@android.com>
    Fix issue 3439872: video chat and bluetooth SCO
    
    This change fixes the stability problems experienced when using
    a bluetooth headset supporting both A2DP and SCO. Problems occur
    when starting the video chat at which time the A2DP output is being
    stopped to start SCO. At that time, active AudioTracks are invalidated
    by AudioFlinger so that a new AudioTrack binder interface can be
    recreated by the client process on the new mixer thread with correct parameters.
    The problem was that the process to restore the binder interface was not
    protected against concurrent requests which caused 2 binder interfaces
    to be created sometimes. This could lead to permanent client deadlock
    if one of the client threads was waiting for a condition of the first
    created binder interface while the second one was created (as the AudioFlinger
    would only signal conditions on the last one created).
    This concurrent request situation is more likely to happen when a client
    uses the JAVA AudioTrack as the JNI implementation uses simultaneously the
    native AudioTrack callback and write push mechanisms. By doing so, the code
    that checks if the binder interface should be restored (in obtainBuffer()) is
    much more likely to be called concurrently from two different threads.
    
    The fix consists in protecting the critical binder interface restore phase
    with a flag in the AudioTrack control block. The first thread acting upon the binder
    interface restore request will raise the flag and the second thread will just wait for
    a condition to be signaled when the restore process is complete.
    
    Also protected all accesses to the AudioTrack control block by a mutex to prevent
    access while the track is being destroyed and restored. If a mutex cannot be held
    (e.g because we call a callback function), acquire a strong reference on the IAudioTrack
    to prevent its destruction while the cblk is being accessed.
    
    Modified AudioTrack JNI to use GetByteArrayElements() instead of
    GetPrimitiveArrayCritical() when writing audio buffers. Entering a critical section would
    cause the JNI to abort if a mediaserver crash occurs during a write due to the AudioSystem
    callback being called during the critical section when media server process restarts.
    Anyway with current JNI implementation, either versions do not copy data most of the times
    and the criticial version does not guaranty no data copy.
    
    The same modifications have been made to AudioRecord.
    
    Change-Id: Idc5aa711a04c3eee180cdd03f44fe17f3c4dcb52
    Fix issue 3157123.
    
    Use a Mutex wherever atomic operations were used in AudioTrack,
    AudioRecord, AudioFlinger and AudioEffect classes.
    
    Change-Id: I6f55b2cabdcd93d64ef19446735b8f33720f8dbc
    Added support for auxiliary audio effects to AudioTrack and MediaPlayer.
    
    Added methods to AudioTrack and MediaPlayer java classes to enable use of
    auxiliary audio effects. The effect can be attached and detached by specifying its
    ID and the send level controlled.
    
    Change-Id: Ie74ff54a453096a742688476f612ce355543b6f3
    media: add AudioTrack::getMinFrameCount().
    
    Change-Id: If15162583d1d16d89f59be0793106afe77417f35
    Issue 2667801: [Audio Effect Framework] AudioFlinger, AudioMixer AudioTrack modifications.
    
    First drop of audio framework modifications for audio effects support.
    
    - AudioTrack/AudioRecord:
    Added support for auxiliary effects in AudioTrack
    Added support for audio sessions
    Fixed left right channel inversion in setVolume()
    
    - IAudioFlinger:
    Added interface methods for effect enumeraiton and instantiation
    Added support for audio sessions.
    
    - IAudioTrack:
    Added method to attach auxiliary effect.
    
    - AudioFlinger
    Created new classes to control effect engines in effect library and manage effect connections to tracks or
    output mix:
      EffectModule: wrapper object controlling the effect engine implementation in the effect library. There
            is one EffectModule per instance of an effect in a given audio session
      EffectChain: group of effects associated to one audio session. There is one EffectChain per audio session.
            EffectChain for session 0 is for output mix effects, other chains are attached to audio tracks
            with same session ID. Each chain contains a variable number of EffectModules
      EffectHandle: implements the IEffect interface. There is one EffectHandle object for each application
            controlling (or using) an effect module. THe EffectModule maintians a list of EffectHandles.
    
    Added support for effect modules and effect chains creation in PlaybackThread.
    modified mixer thread loop to allow track volume control by effect modules and call effect processing.
    
    -AudioMixer
    Each track now specifies its output buffer used by mixer for accumulation
    Modified mixer process functions to process tracks by groups of tracks with same buffer
    Modified track process functions to support accumulation to auxiliary channel
    
    Change-Id: I26d5f7c9e070a89bdd383e1a659f8b7ca150379c
    Fix issue 2553359: Pandora does not work well with Passion deskdock / Cardock.
    
    The problem is due to a too big difference between the buffer size used at the hardware interface and at the A2DP interface.
    When no resampling occurs we don't notice problems but the timing is very tight. As soon as resampling is activated, the AudioTrack underruns.
    This is because the AudioTrack buffers are not resized when moving the AudioTrack from hardware to A2DP output.
    The AudioTrack buffers are calculated based on a hardware output buffer size of 3072 bytes. Which is much less than the A2DP output buffer size (10240).
    
    The solution consists in creating new tracks with new buffers in AudioFlinger when the A2DP output is opened
    instead of just transfering active tracks from hardware output mixer thread to the new A2DP output mixer thread.
    To avoid synchronization issues between mixer threads and client processes, this is done by invalidating tracks
    by setting a flag in their control block and having AudioTrack release the handle on this track (IAudioTrack)
    and create a new IAudioTrack when this flag is detected next time obtainBuffer() or start() is executed.
    
    AudioFlinger modifications:
    - invalidate the tracks when setStreamOutput() is called
    - make sure that notifications of output opening/closing and change of stream type to output mapping are sent synchronously to client process.
    This is necessary so that AudioSystem has the new stream to output mapping when the AudioTrack detects the invalidate flag in the client process.
    Previously their were sent when the corresponding thread loop was executed.
    
    AudioTrack modifications:
    - move frame count calculation and verification from set() to createTrack() so that is is updated every time a new IAudioTrack is created.
    - detect track invalidate flag in obtainBuffer() and start() and create a new IAudioTrack.
    
    AudioTrackShared modifications
    - group all flags (out, flowControlFlag, forceReady...) into a single bit filed to save space.
    
    Change-Id: I9ac26b6192230627d35084e1449640caaf7d56ee
    eclair snapshot
    Fix issue 2203561: Sholes: audio playing out of earpiece.
    
    Create a new IAudioTrack interface to AudioFlinger when start() fails due to a broken pipe error.
    Do the same if start fails due to the same error after time out in obtainBuffer().
    Do not indicate that the AudioTrack is started to AudioPolicyManager if IAudioTrack start fails.
    This avoids that an AudioTrack keeps a dead IAudioTrack after a media server crash.
    
    Same modifications for AudioRecord.
    
    Add a flag to ToneGenerator indicating that the callback thread can call Java. Without it, when the media server crashes and restarts, the AudioSystem error callback will crash in JNI if the IAudiotrack is created from AudioTrack callback thread.
    Fix issue 1795088       Improve audio routing code
    
    Initial commit for review.
    Integrated comments after patch set 1 review.
    Fixed lockup in AudioFlinger::ThreadBase::exit()
    Fixed lockup when playing tone with AudioPlocyService startTone()
    donut snapshot
    Fix issue 1743700: AudioTrack: setPlaybackRate can not set the playback rate to twice of the ouputSR
    
    Store sample rate on 32 bits instead of 16 bits in audio_track_cblk_t.
    Removed sampleRate() methods from AudioTrack and AudioRecord: replaced by getSampleRate().
    AudioTrack::setSampleRate() no returns a status.
    move libbinder's header files under includes/binder
    donut snapshot
    Fix issue 1745312: Various cleanups in media framework
    
    AudioTrack, AudioRecord:
      - remove useless mAudioFlinger member of AudioTrack and AudioRecord.
      - signal cblk.cv condition in stop() method to speed up stop completion.
      - extend wait condition timeout in obtainBuffer() when waitCount is -1 to avoid waking up callback thread unnecessarily
    
    AudioFlinger:
      - remove some warnings in AudioFlinger.cpp.
      - remove function AudioFlinger::MixerThread::removetrack_l()  as its content is never executed.
      - remove useless call to setMasterVolume in AudioFlinger::handleForcedSpeakerRoute().
      - Offset VOICE_CALL stream volume to reflect actual volume that is never 0 in hardware (this fix has been made in the open source): 0.01 + v * 0.99.
    
    AudioSystem.java:
      - correct typo in comment
    
    IAudioflinger, IAudioFlingerClient:
      - make AudioFlinger binder interfaces used for callbacks ONEWAY.
    
    AudioHardwareInterface:
      - correct routeStrings[] table in AudioHardwareInteface.cpp
    Automated import from //branches/master/...@140665,140665
    Automated import from //branches/donutburger/...@140663,140663
    auto import from //branches/cupcake_rel/...@141571
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@131421
    auto import from //branches/cupcake/...@130745
    auto import from //branches/cupcake/...@127101
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    - Public part of the Metadata API.
    - Modify the media framework test for Metadata.
    
    Change-Id: Ib8fa4991f114e1bb88a17ca662844b9b8e1d0faf
    Disable 10secs forward/backward seeking for rtsp as seek is a very expensive operation there. Decouple the 10sec forward/backward button functionality from seekbar functionality.
    
    Change-Id: I016e79b688774f8ee91ac53216197b5fb9cb41b2
    related-to-bug: 3073955
    eclair snapshot
    Added native metadata support.
    
    Metadata.java:
    Fixed typo 8k != 8092. The comment was correct though.
    
    In Metadata.h, the new Metadata class is declared in the ns android::media
    to limit the chances of conflict with other packages.
    
    The MetadataType in MediaPlayerInterface is gone and moved to Metadata as
    an inner typedef.
    
    Similarly the SortedVector<MetadataType> instance have been replace by a
    new type Metadata::Filter.
    
    All the keys declared in the java counterpart are also in Metadata.h.
    
    Metadata.cpp:
    Contains the implementation of the native metadata packing.
    
    There an associated change in the opencore package that should go in
    at the same time as this one.
    New control block for AudioTrack and AudioRecord
    
    Main differences between old and new control block:
     - removes the mutex, which was a potential source of priority inversion
     - circular indices into shared buffer, which is now always a power-of-2 size
    
    Change-Id: I4e9b7fa99858b488ac98a441fa70e31dbba1b865
    Revert "Logging to investigate a crash"
    
    This reverts commit f0ff908da019a44115109f1b4d1b6864b35a8a29.
    Revert "Logging to investigate a crash"
    
    This reverts commit f0ff908da019a44115109f1b4d1b6864b35a8a29.
    Logging to investigate a crash
    
    Bug: 6490974
    Change-Id: Ib926a9258bde4ee05ed42eea662dff68e426a997
    Logging to investigate a crash
    
    Bug: 6490974
    Change-Id: Ib926a9258bde4ee05ed42eea662dff68e426a997
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    AudioBufferProvider comments and cleanup
    
    Add comments about which methods implement the AudioBufferProvider interface.
    
    Simplified the definition of kInvalidPts.  <stdint.h> is very hard to work
    with, there seems to be no way to use it reliably to get INT64_MAX without
    having a separate source file, which is ugly because it means kInvalidPts
    is not a compile-time constant.  So I just deleted AudioBufferProvider.cpp
    and used a hard-coded constant instead.
    
    Added a default constructor for Buffer so that the fields aren't random
    (especially .raw which is used to determine if the buffer is valid).
    
    Make the pts for getNextBuffer default to kInvalidPTS so code that
    doesn't need a pts doesn't have to specify a value.
    
    Rename the parameter to AudioMixer::setBufferProvider to make it clearer.
    
    Change-Id: I87e7290884d4ed975b019f62d1ab6ae2bc5065a5
    Upintegrate Audio Flinger changes from ICS_AAH
    
    Bring in changes to audio flinger made to support timed audio tracks
    and HW master volume control.
    
    Change-Id: Ide52d48809bdbed13acf35fd59b24637e35064ae
    Signed-off-by: John Grossman <johngro@google.com>
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: I6ec5d2bca9b8ebc0acd395a7dd92e1a48fcdfa9b
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    undo reset to ics-mr1 until we have a better method
    reset to ics-mr1, but keep history
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: Id78bba8c002131d8b52b4170259a87fd94e63c73
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Reduce underruns in screen off, esp. with EQ
    
    Add MonoPipe APIs to specify setpoint.
    Use screen state to configure pipe setpoint.
    Fix a long-standing bug where pipe sleep time was excessive,
      which interacted poorly with governor and low clock frequencies.
      Now it deducts the elapsed time since last write(),
      which was significant when there was EQ and low clock frequency.
    
    Bug: 6618373
    Change-Id: I6f3b0072c2244aeb033ef0795ad164491a164ff5
    Reduce underruns in screen off, esp. with EQ
    
    Add MonoPipe APIs to specify setpoint.
    Use screen state to configure pipe setpoint.
    Fix a long-standing bug where pipe sleep time was excessive,
      which interacted poorly with governor and low clock frequencies.
      Now it deducts the elapsed time since last write(),
      which was significant when there was EQ and low clock frequency.
    
    Bug: 6618373
    Change-Id: I6f3b0072c2244aeb033ef0795ad164491a164ff5
    Update AudioParameter
    
    Use definitions for AUDIO_PARAMETER_STREAM_* from <hardware/audio.h>
    instead of repeating these constants.
    
    String constants are const char * const.
    
    Change-Id: I1c9ebe0bc9c827d719d3181aea55251c6db28ec4
    audio/media: convert to using the audio HAL and new audio defs
    
    Change-Id: Ibc637918637329e4f2b62f4ac7781102fbc269f5
    Signed-off-by: Dima Zavin <dima@android.com>
    libmedia: move AudioParameter out of AudioSystem
    
    Change-Id: I9eb7e002d141936258050d4fa4f0ccd8202bfc54
    Signed-off-by: Dima Zavin <dima@android.com>
    Use sp<AudioTrack> instead of raw AudioTrack *
    
    This change prepares for the new implementation of AudioTrack client, which
    will require clients to use only sp<AudioTrack>, not raw AudioTrack *.
    A raw delete will cause a race condition during AudioTrack destruction.
    
    AudioTrack was made a RefBase by commit b68a91a70bc8d0d18e7404e14443d4e4020b3635
    on 2011/11/15, when it was needed by OpenSL ES (for the callback protector).
    At that time, the only other client that was also converted from
    AudioTrack * to sp<AudioTrack> was android.media.AudioTrack JNI in
    project frameworks/base (file android_media_AudioTrack.cpp).
    
    Details:
     * Use .clear() instead of delete followed by = NULL.
     * ALOG %p need .get().
     * sp<> don't need to be listed in constructor initializer, if initially 0.
     * Use == 0 for sp<> vs == NULL for raw pointers.
     * Use if (sp != 0) instead of if (raw).
    
    Change-Id: Ic7cad25795d6e862e112abdc227b6d33afdfce17
    ToneGenerator: fix truncated tones
    
    The first DTMF tone after a silent period is truncated.
    This is because the phone app starts and stops the tone
    when the user presses and releases the key.
    This combined to the fact that the tones use the low latency path
    and that when the output stream exists standby there is a period
    of several milliseconds during which no audio is mixed until the
    stream is "warmed up".
    The result is that much less audio is generated than the actual
    key press duration.
    
    The fix consists in storing the tone start time and making sure that
    the number of samples generated corresponds at least to the time difference
    between the tone start and stop commands.
    
    Bug 6607077
    
    Change-Id: I070d20dd8600c25a9e5d5a60c1d3313b7917b00d
    ToneGenerator: fix truncated tones
    
    The first DTMF tone after a silent period is truncated.
    This is because the phone app starts and stops the tone
    when the user presses and releases the key.
    This combined to the fact that the tones use the low latency path
    and that when the output stream exists standby there is a period
    of several milliseconds during which no audio is mixed until the
    stream is "warmed up".
    The result is that much less audio is generated than the actual
    key press duration.
    
    The fix consists in storing the tone start time and making sure that
    the number of samples generated corresponds at least to the time difference
    between the tone start and stop commands.
    
    Bug 6607077
    
    Change-Id: I070d20dd8600c25a9e5d5a60c1d3313b7917b00d
    Use uint32_t for sample rate
    
    Change-Id: Ie240b48fb54b08359f69ecd4e5f8bda3d15cbe80
    Use uint32_t for sample rate
    
    Change-Id: Ie240b48fb54b08359f69ecd4e5f8bda3d15cbe80
    implemented synchronous audio capture
    
    Added the infrastructure to support the synchronization of playback and
    capture actions on specific events.
    The first requirement for this feature is to synchronize the audio capture
    start with the full rendering of a given audio content.
    The applications can further be extended to other use cases
    (synchronized playback start...) by adding new synchronization events and
    new synchronous control methods on player or recorders.
    
    Also added a method to query the audio session from a ToneGenerator.
    
    Change-Id: I51f1167290d9cafdf2fbcdf9e4785156973af44c
    Use ToneGenerator::tone_type consistently
    
    Also remove defaults in startToneCommand(), they're not needed and the
    default for tone type was nonsense.
    
    Change-Id: I70fa8cee4f3dbb8c66ceb3719c8d3d2f447f05b9
    Use audio_stream_type_t consistently
    
    At native level it was a mixture of audio_stream_type_t, int, uint32_t,
    and uint8_t.  Java is still int.  Also fixed a couple of hard-coded -1
    instead of AUDIO_STREAM_DEFAULT, and in startToneCommand a hard-coded 0
    instead of AUDIO_STREAM_VOICE_CALL.
    
    Change-Id: Ia33bfd70edca8c2daec9052984b369cd8eee2a83
    Revert "Use AudioTrack::event_type not int in callback"
    
    This reverts commit 2225e4b7049fa3fb9d39a068b8268b63c952d7c1
    Use AudioTrack::event_type not int in callback
    
    Change-Id: Ifefc708d46874e04fd0d01cb6e2d43b987ee796c
    eclair snapshot
    Fix issue 2203561: Sholes: audio playing out of earpiece.
    
    Create a new IAudioTrack interface to AudioFlinger when start() fails due to a broken pipe error.
    Do the same if start fails due to the same error after time out in obtainBuffer().
    Do not indicate that the AudioTrack is started to AudioPolicyManager if IAudioTrack start fails.
    This avoids that an AudioTrack keeps a dead IAudioTrack after a media server crash.
    
    Same modifications for AudioRecord.
    
    Add a flag to ToneGenerator indicating that the callback thread can call Java. Without it, when the media server crashes and restarts, the AudioSystem error callback will crash in JNI if the IAudiotrack is created from AudioTrack callback thread.
    Fix issue 2139634: DTMF tones on Sholes popping, hissing (audio latency too high).
    
    This change is a complement to the main fix in kernel driver for the same issue (partner change #1250).
    It removes clicks sometimes heard after the end of the tones while audio flinger is sending 0s to the audio output stream.
    The problem was that the sleep time between two writes was more than the duration of one audio output stream buffer which could cause some underrun.
    
    Also fixed a recent regression in ToneGenerator that made that the end of previous tone was repeated at the beginning of current one under certain timing circumstances when the maximum tone duration was specified.
    Fix issue 2142613: ToneGenerator: short tones sometimes don't play on sholes or over A2DP.
    
    When the AudioTrack callback notification size is relatively high (Which is the case on Sholes and over A2DP), it is likely that the end of tone is reached during the first callback. In this case, the AudioTrack is stopped before exiting the callback which causes 2 problems:
    - 1: If the AudioFlinger thread is scheduled before we exit the ToneGenerator callback, the track can be stopped and reset before the data is actually marked as present in the buffer by the AudioTrack callback => no audio will be processed by AudioFlinger.
    - 2: In this case, the data write index in the AudioTrack buffer is incremented after the track was reset by the AudioFlinger which leaves unplayed data in the buffer. This data will be played the next time the AudioTrack is started if not flushed in between.
    
    The fix consists in adding an intermediate state to ToneGenerator state machine so that we exit the callback function when the stop condition is reached and stop the AudioTrack the next time we execute the callback.
    Fix issue 1992233: DTMF tones on Sholes is really long.
    
    Add a parameter to ToneGenerator.startTone() allowing the caller to specify the tone duration. This is used by the phone application to have a precise control on the DTMF tone duration which was not possible with the use of delayed messaged.
    Also modified AudioFlinger output threads so that 0s are written to the audio output stream when no more tracks are ready to mix instead of just sleeping. This avoids an issue where the end of a previous DTMF tone could stay in audio hardware buffers and be played just before the beginning of the next DTMF tone.
    donut snapshot
    Fill in CDMA gaps and clean up ToneGenerator code
    donut snapshot
    Fixed issue 1709450: Requirements for CDMA Tone Generator
    
    Added new tone types for CDMA IS-95 specific tones.
    Automatic selection between IS-95, CEPT and JAPAN version base on operator
    country code for call supervisory tones.
    Also improved tone generator capabilities:
    - Each tone segment can now generate its own set of frequencies
    - A tone does not have to be a succession of alternating ON/OFF segments
    - The sequence repetition does not have to start from first segment
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    auto import from //branches/cupcake/...@127101
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    wifi-display: pass session info to wifi display settings
    
    Bug: 9371882
    
    Change-Id: I9e4b8c2154b03ce8ff3e14c465a5224bb6e8db9a
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Now we only support a single client connection
    
    and it cannot be initiated from the local interface address for security
    reasons.
    Also, there's at most one playback session active at any time, and when
    it dies we shutdown the client connection altogether and signal an error
    to the listener.
    
    related-to-bug: 7139784
    Change-Id: Ia8d02bc994ce9986936947ddda1f2a3dddbf5714
    Now we only support a single client connection
    
    and it cannot be initiated from the local interface address for security
    reasons.
    Also, there's at most one playback session active at any time, and when
    it dies we shutdown the client connection altogether and signal an error
    to the listener.
    
    related-to-bug: 7139784
    Change-Id: Ia8d02bc994ce9986936947ddda1f2a3dddbf5714
    Update remote display API.
    
    Renamed disconnect() to dispose() to emphasize the fact that
    this method is intended to clean up the IRemoteDisplay
    completely, not just temporarily disconnect the current client
    (which might be useful someday).
    
    Other minor tweaks.
    
    Change-Id: I1209639eb0cd8af09c724206642d7e52aab48257
    Update remote display API.
    
    Renamed disconnect() to dispose() to emphasize the fact that
    this method is intended to clean up the IRemoteDisplay
    completely, not just temporarily disconnect the current client
    (which might be useful someday).
    
    Other minor tweaks.
    
    Change-Id: I1209639eb0cd8af09c724206642d7e52aab48257
    Implement remote display service stubs.
    
    Change-Id: I582ed000026bba6d116db8304e15a3c52f8a9a01
    Implement remote display service stubs.
    
    Change-Id: I582ed000026bba6d116db8304e15a3c52f8a9a01
    AwesomePlayer: correct stream type for offload
    
    canOffloadStream() function in stagefright utils forces the
    stream type to AUDIO_STREAM_MUSIC when querying the audio policy
    manager if a particular track is offloadable or not.
    This causes MP3 ringtones to be offloaded which is not a validated use case.
    
    The fix consists in using the actual stream type read from the AudioSink.
    
    Bug: 11410937.
    Change-Id: I44b8e033a8e785a79cdc291b142f80b5580bdc4d
    libmediaplayerservice: offload playback support
    
    Main change is to how recycled tracks are used for gapless
    playback. If we are playing offloaded tracks that can't be
    recycled we don't open a new offloaded output until we have
    closed the previous one. This is because offloaded tracks
    are a limited resource so we don't want to spuriously create
    unnecessary instances. If the tracks cannot be recycled
    this means that the formats are incompatible and so the
    hardware most likely will also be unable to use the existing
    output channel for the new track. If we already have the
    maximum number of hardware offload channels open (which could
    be only one) then creation of the next output would fail if
    we attempted it while the previous output was still open.
    
    Change-Id: I4f5958074e7ffd2e17108157fee86329506730ea
    Signed-off-by: Eric Laurent <elaurent@google.com>
    Update HTTP proxy configuration for all media playback inside stagefright.
    
    Change-Id: Ie0dd00045aba668d8b49da73224e7a7c9c04f69b
    related-to-bug: 8873723
    (cherry picked from commit 2704965b8a1ff3b7450ff58ccecf86d8ec688c40)
    Public API changes for audio offload support.
    
    NOTE: this does _not_ include all private member variables added
    to classes as part of offload support. Only public/protected functions
    and stubs functions/variables needed to make the changes buildable.
    
    - isOffloadSupported() added to audio policy service
        A stub implementation is required to build, this always returns false
    - setParameters() added to IAudioTrack
        A stub implementation is required to build, this always returns
        INVALID_OPERATION
    
    - CBlk flag for stream end
    
    - Change AudioSystem::getRenderPosition() to take an audio_output_t
        so caller can specify which output to query
    
    - Add AudioSystem::isOffloadSupported()
        This is fully implemented down to the AudioFlinger function
        AudioPolicyServer::isOffloadSupported() which is just a stub
        that always returns false.
    
    - Add EVENT_STREAM_END to AudioTrack interface.
        STREAM_END is used to signal when the hardware has actually finished
        playing all the data it was sent.
    
    - Add event type enumeration to media player interface AudioSink callbacks
        so that the same callback can be used to handle multiple types of
        event. For offloaded tracks we also have to handle STREAM_END and
        TEAR_DOWN events
    
    - Pass audio_offload_info_t to various functions used for opening outputs,
        tracks and audio players. This passes additional information about the
        compressed stream down to the HAL when using offload.
        For publicly-available APIs this is an optional parameter (for some of
        the internal and low-level APIs around the HAL interface it is mandatory)
    
    - Add getParameters() and setParameters() API to AudioTrack
        Currently dummy implementations.
    
    - Change AudioPlayer contructor so that it takes a set of bitflags defining what
        options are required. This replaces the original bool which only specified
        whether to use deep buffering.
    
    - Changes to StageFright class definition related to handling tearing-down of
        an offloaded track when we need to switch back to software decode
    
    - Define new StageFright utility functions used for offloaded tracks
        Currently dummy implementations.
    
    - AudioFlinger changes to use extended audio_config_t.
        Fills in audio_offload_info_t member if this info is passed in when
        opening an output.
    
    - libvideoeditor changes required to add the new event type parameter
        to AudioSink callback functions
    
    - libmediaplayerservice changes required to add the new event type parameter
        to AudioSink callback functions
    
    Change-Id: I3ab41138aa1083d81fe83b886a9b1021ec7320f1
    Signed-off-by: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
    Signed-off-by: Eric Laurent <elaurent@google.com>
    Update HTTP proxy configuration for all media playback inside stagefright.
    
    Change-Id: Ie0dd00045aba668d8b49da73224e7a7c9c04f69b
    related-to-bug: 8873723
    (cherry picked from commit 2704965b8a1ff3b7450ff58ccecf86d8ec688c40)
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Add a small hook to support gapless in AAH.
    
    Change-Id: Ie07eca6b45142bdd83412ee0e38d732a4c355630
    Add a small hook to support gapless in AAH.
    
    Change-Id: Ie07eca6b45142bdd83412ee0e38d732a4c355630
    Move the AAH RTP code out of framework and into vendor.
    
    Relocate the AAH RTP code from framework/av into
    vendor/google_devices/phantasm.  This change is the deletion, there
    will be a separate CL which re-introduces on the vendor side of
    things.
    
    Change-Id: Ibe7e6d4b633a3886b87a615691a2692f2382af6c
    Signed-off-by: John Grossman <johngro@google.com>
    Add the ability to dynamicaly register MediaPlayer types.
    
    Add the ability to dynamically register low level MediaPlayer
    factories which will be probed at setDataSource time to determine the
    proper MediaPlayerBase to instantiate.
    
    This change is in preparation for moving libaah_rtp out of
    frameworks/base and into phantasm platform directory.
    
    Change-Id: Icf8904db3ab9e3c85df6e780d5546d9988cb9076
    Signed-off-by: John Grossman <johngro@google.com>
    Add support for deep audio buffers
    
    Allow AudioSink to use deep audio buffering when the
    source is audio only and its duration is more than
    a certain threshold.
    This helps improve battery life but implies higher
    audio latency.
    
    Change-Id: Ie79915b61c370292f05aabda9779356570e03cbb
    Add gapless playback support for NuPlayer
    
    This makes NuPlayer use a SkipCutBuffer when needed, and adds a new
    AudioSink method to retrieve the number of frames written so far, so
    NuPlayerRenderer can calculate how much data it can write without blocking.
    Also make some more methods const.
    
    Change-Id: Id7d253ad8a7b85e9a84ca2baafbe32817b16c744
    Gapless playback, step 1.
    
    Currently able to play Ogg Vorbis, PCM WAV and other lossless files seamlessly
    by reusing the initial AudioTrack for subsequent players.
    
    Change-Id: Ie7cf6b9076bdf4f9211574456d192c02c04fecc7
    Add channel mask in AudioSink
    
    Add support for specifying a channel mask when opening an AudioSink.
      This parameter does not replace the channel count parameter in order
      to not have to duplicate the logic to derive a mask from the
      channel count everywhere an AudioSink is used without a known mask.
    
    A mask of 0 (CHANNEL_MASK_USE_CHANNEL_ORDER) means a mask will
      be automatically derived from the number of channels.
    
    Update existing AudioSink implementations to use the channel mask,
      and users of AudioSink to specify the mask if available, and
      CHANNEL_MASK_USE_CHANNEL_ORDER otherwise.
    
    Change-Id: Ifa9bd259874816dbc25ead2b03ea52e873cff474
    Switch the way we configure for MediaPlayer retransmission.
    
    This is a cherry-pick of I6ab07d89b2eeb0650e634b8c3b7a0b36aba4e7dd
    with merge conflicts addressed by hand and additional changes made in
    response to code review feedback.
    
    Move in the direction of a more publishable API for configuring a
    media player for retransmission.  It used to be that we used a custom
    invoke and a modified URL (prefixed with aahTX://).  There are many
    issues with this technique and it was never meant to stand the test of
    time.
    
    This CL gets rid of all that.  A new (but currently hidden) method was
    introduced to the java level MediaPlayer API, called
    setRetransmitTarget(InetSocketAddress), which allows an app writer to
    set the retransmit target.  For now, this method needs to be called
    before a call to setDataSource (which is pretty unusual for the
    MediaPlayer API) because this mid level code uses this as a cue to
    instantiate an aahTX player instead of relying on the data source to
    select a player.  When retranmit functionality becomes part of the
    existing android player implemenation, this
    set-retrans-before-set-data-source behavior can go away, along with
    the aahTX player itself.
    
    Change-Id: I3b46c5227bbf69acb2f3cc4f93cfccad9777be98
    Signed-off-by: John Grossman <johngro@google.com>
    Switch the way we configure for MediaPlayer retransmission.
    
    Move in the direction of a more publishable API for configuring a
    media player for retransmission.  It used to be that we used a custom
    invoke and a modified URL (prefixed with aahTX://).  There are many
    issues with this technique and it was never meant to stand the test of
    time.
    
    This CL gets rid of all that.  A new (but currently hidden) method was
    introduced to the java level MediaPlayer API, called
    setRetransmitTarget(InetSocketAddress), which allows an app writer to
    set the retransmit target.  For now, this method needs to be called
    before a call to setDataSource (which is pretty unusual for the
    MediaPlayer API) because this mid level code uses this as a cue to
    instantiate an aahTX player instead of relying on the data source to
    select a player.  When retranmit functionality becomes part of the
    existing android player implemenation, this
    set-retrans-before-set-data-source behavior can go away, along with
    the aahTX player itself.
    
    Change-Id: I6ab07d89b2eeb0650e634b8c3b7a0b36aba4e7dd
    Upintegreate AAH TX and RX players from ICS_AAH
    
    Upintegrate the android at home TX and RX players developed in the
    ICS_AAH branch.
    
    Change-Id: I8247d3702e30d8b0e215b31a92675d8ab28dccbb
    Signed-off-by: John Grossman <johngro@google.com>
    Playback rate on MediaPlayer
    
    Add support for modifying the playback rate of a MediaPlayer
     by altering the sample rate of its AudioTrack.
    The playback rate is expressed in permille, where 1000 is the
     playback at normal speed.
    
    Change-Id: I981d060ab32f7bae7a767e82c60c88ae635dceed
    Use audio_stream_type_t consistently
    
    At native level it was a mixture of audio_stream_type_t, int, uint32_t,
    and uint8_t.  Java is still int.  Also fixed a couple of hard-coded -1
    instead of AUDIO_STREAM_DEFAULT, and in startToneCommand a hard-coded 0
    instead of AUDIO_STREAM_VOICE_CALL.
    
    Change-Id: Ia33bfd70edca8c2daec9052984b369cd8eee2a83
    Use audio_format_t consistently
    
    Was int, uint32_t, uint16_t, and uint8_t with 2-bit bitfield.
    Also replace 0 by AUDIO_FORMAT_DEFAULT and replace 1 by
    AUDIO_FORMAT_PCM_16_BIT.
    
    Change-Id: Ia8804f53f1725669e368857d5bb2044917e17975
    Remove surface legacy APIs and code.
    
    All surfaces are now supported through surface textures.
    
    Change-Id: I95dd823e7099c0c32a48a1121624149dcc29d9c6
    Add media/libaah_rtp
    
    RTP library used to broadcast media from one device to a collection
    of listeners.  Handles failures/retries/etc.
    
    This is a squashed merge from master-tungsten of the following changes:
    
    commit e1a5101fe627d71739a7c4263bb3a65c7bc44385
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Fri Aug 12 13:24:21 2011 -0700
    
        Hold ThreadWrapper in a ref-counting pointer
    
        Change-Id: Iaf3343182e37bcc0ca99fbaf8f9bbb8c4984072a
    
    commit 89b90d62e164ff3db27c9cba85255fc476d2dd96
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Aug 10 13:08:25 2011 -0700
    
        Update the Tungsten TX player to use HTTPBase
    
        Change-Id: I9f7ecf1b4b496cec1815284dbcdb958a43284169
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    Change-Id: I5fe1ea941c09204d7b33f15f4e2b2ab320dc468b
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    undo reset to ics-mr1 until we have a better method
    reset to ics-mr1, but keep history
    Add media/libaah_rtp
    
    RTP library used to broadcast media from one device to a collection
    of listeners.  Handles failures/retries/etc.
    
    This is a squashed merge from master-tungsten of the following changes:
    
    commit e1a5101fe627d71739a7c4263bb3a65c7bc44385
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Fri Aug 12 13:24:21 2011 -0700
    
        Hold ThreadWrapper in a ref-counting pointer
    
        Change-Id: Iaf3343182e37bcc0ca99fbaf8f9bbb8c4984072a
    
    commit 89b90d62e164ff3db27c9cba85255fc476d2dd96
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Aug 10 13:08:25 2011 -0700
    
        Update the Tungsten TX player to use HTTPBase
    
        Change-Id: I9f7ecf1b4b496cec1815284dbcdb958a43284169
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    Change-Id: I190ecddf1dc919761c2e4ec740c2f3b2c9541156
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    Charge network traffic to the uid of the process using the MediaPlayer.
    
    Change-Id: I2bcb54b8232afd3fc7ee16289f37c7a7b3f23067
    related-to-bug: 4517282
    Make dumpsys(media.player) more useful by having AwesomePlayer populate it.
    
    Change-Id: I12ba7d542331a8293d67a0d47378b8be4f777759
    Add setParameter/getParameter to MediaPlayer API.
    for bug 1982947
    
    Change-Id: If3f40e4f18cbba155af29944af38bdc627f8cd53
    audio/media: convert to using the audio HAL and new audio defs
    
    Change-Id: Ibc637918637329e4f2b62f4ac7781102fbc269f5
    Signed-off-by: Dima Zavin <dima@android.com>
    - Add another parameter in notify() to be able to send timed text sample
    through listener during video playback.
    - Add OnTimedTextListener in the MediaPlayer
    For feature request 800939.
    
    Change-Id: I65072c27acb4c0037109a72be38c73e9f667420f
    Remove unused references to ISurface
    
    Change-Id: I542806b5c91c525ed7cde821f6963f1e020ddf1a
    Bug 3438258 Add SurfaceTexture as MediaPlayer sink
    
    This change enables the use of a SurfaceTexture in place of a Surface
    as the video sink for an android.media.MediaPlayer. The new API
    MediaPlayer.setTexture is currently hidden.
    
    This includes:
     - New Java and C++ interfaces
     - C++ plumbing and implementation (JNI, Binder)
     - Stagefright AwesomePlayer and NuPlayer use ANativeWindow
       (either Surface or SurfaceTextureClient)
    
    Change-Id: I2b568bee143d9eaf3dfc6cc4533c1bebbd5afc51
    Protect notification callback parameters with a mutex.
    
    This avoids the race condition where notifications are dispatched to a NULL receiver
    after notifications have been disabled.
    
    Change-Id: I6d351ffbee97616e2c35559c132a6c5e6a66948a
    related-to-bug: 3394139
    Initial support for a true streaming player for mpeg2 transport streams.
    
    Change-Id: I153eec439d260a5524b21270e16d36940ec3161a
    Support streaming data across binder boundaries.
    
    Change-Id: Ifbac61406dcb81343765f99ccba08bd90f9274cc
    Remove all traces of legacy renderer support in stagefright.
    
    Change-Id: I17b8e0dbf53fca37c96830c41131b4bc0c24ca6d
    Squashed commit of the following:
    
    commit 0d5694ba2d399dd0869532a4d6256448185a1be0
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Oct 29 11:59:23 2010 -0700
    
        suspend() and resume() methods on VideoView are back but don't do anything.
    
        They need to be back because they were public before.
    
        Change-Id: Iddfd1021ffcf341f26e8d55ba761fd33701e2425
    
    commit 16192891ed7d349ee97e47d1729d20a2d0d247b8
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Oct 29 11:47:05 2010 -0700
    
        Revert "New API on VideoView widget to suspend/resume a session. Do not release the MediaPlayer client for video suspending/resuming."
    
        This reverts commit 2e1818a4d16c3309660f27286c77d8d1eee95a25.
    
        Conflicts:
    
            api/current.xml
    
        Change-Id: I68dd1d05871044faf3f832d0838aa40bc7f890e5
    
    commit 8f934dc1a3ae4e60f0790fcf97671e063fa20fad
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Oct 29 11:44:16 2010 -0700
    
        Revert "Release mediaplayer if the current state is not suspending. Fix for bug 2480093."
    
        This reverts commit efb882cf75eef39ecaf9f8920ed302a019fa629f.
    
    commit f2ed03550887986f39d36b5dabcd9e919949c7cf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Oct 29 11:44:08 2010 -0700
    
        Revert "Release MediaPlayer if suspend() returns false."
    
        This reverts commit 047212fd4ea360675e94d3ce83c7f5544f65b268.
    
    commit 441ecce678bd24e9660a72c8627b5bd94433ff8b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Oct 29 11:40:46 2010 -0700
    
        manually.
    
        Change-Id: I4fdd43c9f7c8b3eedddb31a196da4984e1c58e87
    
    Change-Id: I60d4b10e7a9e4ed8d9a796f1711618f557eb6e89
    Added getter for session Id to AudioSink
    
    Added a method to expose the audio session id at AudioSink interface
    so that the AudioPlayer in stagefright can retrieve it.
    
    Also:
    - Fixed audio effect send level not being initialized in mediaplayer.
    - Fixed compilation error when LOGV is enabled in mediaplayer JNI
    
    Change-Id: I4bb55454fd63d646e0e677692d737c4843fb05fb
    Squashed commit of the following:
    
    commit 35cc68814a9537c31fde146e171e7b0bbdfe211e
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Aug 16 08:48:42 2010 -0700
    
        Only enable support for yuv to yuv conversion on passion, where it's available, use the slower yuv->rgb565 path everywhere else.
    
    commit d8ac5a8814103e60d11d2acf61997fc31a1dc58d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 13 13:56:44 2010 -0700
    
        The software renderer takes over all rendering, converting from yuv to yuv if possible and rgb565 otherwise.
    
    commit 684972074b74318bdcb826ed9b5b0864d2d2e273
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 13 09:34:35 2010 -0700
    
        A first shot at supporting the new rendering APIs.
    
    Change-Id: Iea9b32856da46950501f1a700f616b5feac710fd
    Remove most stagefright property overrides, remove VorbisPlayer and VorbisMetadataRetriever as this functionality is now provided by stagefright.
    
    Change-Id: Ieafe75a4550c273ad59b4518d7cd4c0fce0f7cce
    related-to-bug: 2370115
    New API on java's MediaPlayer to suspend/resume a session.
    
    related-to-bug: 2231576
    split libsurfaceflinger_client and libcamera_client out of libui
    Implementation of stagefright-enabled MediaPlayerService::decode functionality
    
    related-to-bug: 2359268
    API Extension: Support for optionally specifying a map of extra request headers when specifying the uri of media data to be played.
    
    related-to-bug: 2393577
    
    Original change by Andrei Popescu <andreip@google.com>
    Fix issue 2285561: New AudioFlinger and audio driver API needed for A/V sync
    
    Added getRenderPosition() API to IAudioFlinger to retreive number of audio frames
    written by AudioFlinger to audio HAL and by DSP to DAC.
    
    Added getRenderPosition() API to AudioHardwareInterface to retreive number of audio frames
    written by DSP to DAC.
    
    Exposed AudioTrack::getPosition() to AudioSink() to make it available to media player.
    
    Removed excessive log in AudioHardwareGeneric.
    Squashed commit of the following:
    
    commit 1efc38dc3c33fef57b759002db3965ed07a28cb0
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 19 14:36:14 2009 -0800
    
        Sending the SEEK-COMPLETE notification temporarily broke seeking backwards in time behaviour. This is now fixed.
    
        Also, get rid of the semi-random delay after posting buffers to surface flinger in favour of delaying the buffer release until the next frame is displayed.
    
    commit 51973062eb5ee63fd64b845d72bac517cc3369cf
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 14:01:43 2009 -0800
    
        Fix one more unit test, properly send seek-complete notification only after seek actually completed.
    
    commit cb22250b34b1fcfe1bf459723a761fd003950229
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 12:31:36 2009 -0800
    
        Fix seek-while-paused in AwesomePlayer, revert to using FileSource if MmapSource fails.
    
    commit 25eb9241138ddf7bb27ce90657116c5f8a94d880
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 12:30:40 2009 -0800
    
        Support seeking and duration in AMRExtractor, assuming all frames are the same size.
    
    commit 44192f2ebb7ea3bbd3ba5910025692dbc6a08faa
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 10:21:44 2009 -0800
    
        MediaPlayerImpl is dead, long live AwesomePlayer.
    
    commit c5b52d3c0674f5dc94db506afbce52401cceddac
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 09:42:23 2009 -0800
    
        New implementation of the stagefright mediaplayer.
    eclair snapshot
    Added native metadata support.
    
    Metadata.java:
    Fixed typo 8k != 8092. The comment was correct though.
    
    In Metadata.h, the new Metadata class is declared in the ns android::media
    to limit the chances of conflict with other packages.
    
    The MetadataType in MediaPlayerInterface is gone and moved to Metadata as
    an inner typedef.
    
    Similarly the SortedVector<MetadataType> instance have been replace by a
    new type Metadata::Filter.
    
    All the keys declared in the java counterpart are also in Metadata.h.
    
    Metadata.cpp:
    Contains the implementation of the native metadata packing.
    
    There an associated change in the opencore package that should go in
    at the same time as this one.
    donut snapshot
    Added method to get metadata out of the player.
    
    The method passes a list of metadata ids to be retrieved and
    a parcel where the metadata records should be appended.
    
    If the list of ids is empty, all the metadata should be returned.
    New test player stub to load mock native players.
    
    Added a new class TestPlayerStub that takes a magic url in the setDataSource call.
    Based on the value of the url, the stub is going to load a DL and create the concrete
    player used during the test.
    After these initialization steps TestPlayerStub is just a wrapper.
    
    Added a new functional test MediaPlayerInvokeTest to demonstrate how a new
    mock player to test the invoke method can be loaded.
    
    Added a new mock player for the invoke test: invoke_mock_media_player.cpp.
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    Direct api to the native media player.
    
    MediaPlayer.java has 3 new methods:
    * newRequest creates a Parcel that can be used to send data to the
      native player using invoke.
    * invoke issues synchronous calls to the native player using opaque
      parcels for the request and reply.
    
    IMediaPlayer.h has 1 new abstract method:
    * invoke
    
    The Midi and Vorbis players have a stub for these. So far only PV
    makes use of that new feature.
    
    To avoid any copy overhead, the JNI interface uses Parcel as a java
    object (no serialization/copy happens at the JNI layer).
    
    The remote interface token is inserted when the Parcel is constructed
    in java. That way the parcel is already routable when it reaches
     IMediaPlayer.cpp (proxy). No extra copy is needed there.
    Removed trailing whitespaces.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Use sp<AudioTrack> instead of raw AudioTrack *
    
    This change prepares for the new implementation of AudioTrack client, which
    will require clients to use only sp<AudioTrack>, not raw AudioTrack *.
    A raw delete will cause a race condition during AudioTrack destruction.
    
    AudioTrack was made a RefBase by commit b68a91a70bc8d0d18e7404e14443d4e4020b3635
    on 2011/11/15, when it was needed by OpenSL ES (for the callback protector).
    At that time, the only other client that was also converted from
    AudioTrack * to sp<AudioTrack> was android.media.AudioTrack JNI in
    project frameworks/base (file android_media_AudioTrack.cpp).
    
    Details:
     * Use .clear() instead of delete followed by = NULL.
     * ALOG %p need .get().
     * sp<> don't need to be listed in constructor initializer, if initially 0.
     * Use == 0 for sp<> vs == NULL for raw pointers.
     * Use if (sp != 0) instead of if (raw).
    
    Change-Id: Ic7cad25795d6e862e112abdc227b6d33afdfce17
    reorganize SoundPool and JetPlayer code.
    
    Reorganize SoundPool and JetPlayer code to be ready for the
    creation of libmedia_native.
    
    Split SoundPool between libsoundpool (JNI) and libmedia(sound pool implementation).
    Remove dependencies on nativehelper/jni.h from JetPlayer.
    
    Change-Id: I130c6014173b714329929dd82c5dfb70b757a610
    Use correct syntax for #include <> ""
    
    Change-Id: I943137108668ae66f8eba18dafe069a7951bcd8f
    Whitespace and indentation
    
    Fix indentation to be multiple of 4.
    Make it easier to search:
      sp< not sp < to
      "switch (...)" instead of "switch(...)" (also "if" and "while")
    Remove redundant blank line at start or EOF.
    Remove whitespace at end of line.
    Remove extra blank lines where they don't add value.
    
    Use git diff -b or -w to verify.
    
    Change-Id: I966b7ba852faa5474be6907fb212f5e267c2874e
    Fix bug in JetPlayer::loadFromFile
    
    A long pathname would corrupt the heap due to incorrect use of strncpy.
    
    Also was using hard-coded constant 256 instead of PATH_MAX.
    
    Change-Id: Iba382bbb38624fbc41fec91449f9814f77d4ac0d
    JetPlayer uses C++ Thread not createThreadEtc
    
    This permits leveraging future improvements to Thread.
    
    Change-Id: I60deed8565ed54f13d9f770c76504e411b154276
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    auto import from //branches/cupcake/...@125939
    * Gut the use of AudioFlinger for recording and replace it with custom RecordThread, RecordTrack and RecordHandle implementations
    * Make sure addBatteryData is disabled so that MediaService isn't called
    * Disable AudioFlinger call to get number of frame lost
    * Audio recording works, also clean up the code to remove many of the unnecessary commented out AudioFlinger calls
    * Clean up code more, removed commented out lines of code that will never be used, added some comments
    
    Change-Id: I875bc90223369d9a5653c5aeeb2d49175f65e08b
    Signed-off-by: Jim Hodapp <jim.hodapp@canonical.com>
    Fix slow AudioTrack and AudioRecord destruction
    
    There were two causes for the slowness:
    
    When thread was paused, it used nanosleep and sleep.  These usually
    run to completion (except for POSIX signal, which we avoid because it
    is low-level).  Instead, replace the nanosleep and sleep by condition
    timed wait, as that can be made to return early by a condition signal.
    Another advantage of condition timed wait is that a condition wait was
    already being used at top of thread loop, so it is a simpler change.
    
    The AudioRecord destructor was missing a proxy interrupt that was correct
    in AudioTrack.  This proxy interrupt is needed in case another thread
    is blocked in proxy obtainBuffer.
    
    Does not address the 1 second polling for NS_WHENEVER.
    
    Bug: 10822765
    Change-Id: Id665994551e87e4d7da9c7b015f424fd7a0b5560
    Fix potential leak of audio input handle.
    
    The audio input handle is ultimately owned by the audio recorder
    object but it could be dropped on the floor if an error occurred
    before that object was fully initialized.
    
    Rearranged some of the argument validation and merged getInput_l
    with openRecord_l to simplify the code and prevent such a leak
    from occurring.
    
    Bug: 10265163
    Change-Id: I124dce344b1d11c2dd66ca5e2c9aec0c52c230e2
    AudioRecord notification frames
    
    Change-Id: I76ec536d1504eb9a558178b62bf225aace4b40d1
    AudioRecord::openRecord_l now take flags
    
    The new parameter 'flags' of type audio_input_flags_t will be used for
    requesting a fast track, but is currently ignored.
    
    Change-Id: If68dfda8b2d4eaaca42927d721b4630c47f71f3b
    AudioRecord::set and constructor now take flags
    
    The new optional parameter 'flags' of type audio_input_flags_t will be
    used for requesting a fast track.
    
    Change-Id: Ia7e070cb57c833e608352da354fb30dc26df6918
    AudioRecord callback thread waits for priority boost
    
    Change-Id: Iae38fa4ac20a45751566169213a08a15deb0a2f6
    Cleanup comments for the new control block implementation
    
    There was some obsolete and incomplete text left over
    after the new control block code was submitted.
    This cleans up all those comments to be accurate again.
    
    Change-Id: Ic52f5869cb723cde25d709514d6deea6aa6f20aa
    AudioRecord has no default sample rate
    
    Change-Id: I72feefdd6f3a623fd3669b80d4b264518fdc0929
    Make AudioRecord and AudioTrack comments more similar
    
    Change-Id: I122a7cf7bfc162090cb27f37c325db7a23985bc7
    Remove default channel mask in AudioRecord constructor and set()
    
    Change-Id: I22ad4ba8777842bf6705e79c6ad796fdb9a4104c
    AudioRecord must be used as sp<> only
    
    Bug: 9423855
    Change-Id: I78ba8228c60dff11fb466156bb632c5dda45cdaf
    New control block for AudioTrack and AudioRecord
    
    Main differences between old and new control block:
     - removes the mutex, which was a potential source of priority inversion
     - circular indices into shared buffer, which is now always a power-of-2 size
    
    Change-Id: I4e9b7fa99858b488ac98a441fa70e31dbba1b865
    Start isolating control block accesses in a proxy
    
    The proxy object will eventually be the only code that understands the
    details of the control block.  This should make it easier to change the
    control block in the future.
    
    Initial set of control block fields that are isolated:
     - sample rate
     - send level
     - volume
    
    Prepare for streaming/static separation by adding a union to the control
    block for the new fields.
    
    Fix bug in handling of max sample rate on a track.  It was only checking
    at re-configuration, not at each mix.
    
    Simplify OutputTrack::obtainBuffer.
    
    Change-Id: I2249f9d04f73a911a922ad1d7f6197292c74cd92
    Start isolating control block accesses in a proxy
    
    The proxy object will eventually be the only code that understands the
    details of the control block.  This should make it easier to change the
    control block in the future.
    
    Initial set of control block fields that are isolated:
     - sample rate
     - send level
     - volume
    
    Prepare for streaming/static separation by adding a union to the control
    block for the new fields.
    
    Fix bug in handling of max sample rate on a track.  It was only checking
    at re-configuration, not at each mix.
    
    Simplify OutputTrack::obtainBuffer.
    
    Change-Id: I2249f9d04f73a911a922ad1d7f6197292c74cd92
    Clean up channel count and channel mask
    
    Channel count is uint32_t.
    Remove redundant mask parameter to AudioTrack::createTrack_l()
        and AudioRecord::openRecord_l().
    
    Change-Id: I5dc2b18eb609b2c0dc3091994cbaa4628062c17f
    Clean up channel count and channel mask
    
    Channel count is uint32_t.
    Remove redundant mask parameter to AudioTrack::createTrack_l()
        and AudioRecord::openRecord_l().
    
    Change-Id: I5dc2b18eb609b2c0dc3091994cbaa4628062c17f
    Use size_t for frame counts
    
    Also fix typo: bufferCount should be frameCount.
    
    Change-Id: Ibed539504db75ef99dc21c8ff1bf2987122063a5
    Use size_t for frame counts
    
    Also fix typo: bufferCount should be frameCount.
    
    Change-Id: Ibed539504db75ef99dc21c8ff1bf2987122063a5
    Move frame size out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ifab1c42ac0f8be704e571b292713cd2250d12a3f
    Move frame size out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ifab1c42ac0f8be704e571b292713cd2250d12a3f
    Move buffers pointer out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ie474557db7cb360f2d9a0f11600a68f5a3d46f07
    Move buffers pointer out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ie474557db7cb360f2d9a0f11600a68f5a3d46f07
    Removed unused fields in AudioRecord::Buffer
    
    Change-Id: I89fc6d8f695b48516d956b0a9a4a43d408f369f9
    Removed unused fields in AudioRecord::Buffer
    
    Change-Id: I89fc6d8f695b48516d956b0a9a4a43d408f369f9
    AudioRecord comments
    
    Change-Id: Ibec910608948d778dc655d900255a80384e9b06f
    AudioRecord comments
    
    Change-Id: Ibec910608948d778dc655d900255a80384e9b06f
    AudioRecord locking
    
    Fix race conditions for EVENT_MARKER and EVENT_NEW_POS callbacks.
    Marker and new position update fields are protected by lock.
    
    getSampleRate() doesn't need a lock because it reads from shared memory
    control block.
    
    Enforce that the parameter passed with EVENT_MARKER and EVENT_NEW_POS
    cannot not be changed by the callback handler, and will not change during
    the call by another thread.
    
    Session ID should never change; log if it does.
    
    Change-Id: Ia2c63cf1a71b10bb06c37981bd76437f83fffa91
    AudioRecord::stop() return void
    
    like AudioTrack::stop()
    
    Change-Id: Iab62f4665151345f1ad5874c97a21d1a331f0154
    AudioRecord client threading cleanup
    
    Rename ClientRecordThread to AudioRecordThread to be more similar to
    AudioTrack naming.
    
    Only create the thread once, and use resume() and pause() for start()
    and stop().  This will allow us to have a known client callback thread
    tid that we can pass to AudioFlinger before start().
    
    mActive:
    Made mActive a bool not int.
    mActive is protected by mLock; volatile is meaningless.
    Fixed a few places where mActive was accessed without a lock:
     - stopped()
     - processAudioBuffer()
    These aren't used internally, so no need for _l() versions.
    
    Change-Id: I4b8a5c90f3a22d3894b344564cb1c5aef4f1fda2
    Remove dead code in libmedia
    
    Change-Id: I7d8201590cda29c9fa99662a4fdba222091febfe
    Use audio_channel_mask_t more consistently
    
    In IAudioFlinger::createTrack() and IAudioFlinger::openRecord(),
    declare input parameter to use correct type audio_channel_mask_t.
    
    In IAudioFlinger::getInputBufferSize(), input parameter is now channel mask
    instead of channel count.
    
    Remove unused IAudioFlinger::channelCount(audio_io_handle_t).
    
    In AudioRecord::getMinFrameCount() and AudioSystem::getInputBufferSize(),
    input parameter is channel mask instead of channel count.
    
    Change-Id: Ib2f1c29bea70f016b3cfce83942ba292190ac965
    AudioRecord comments
    
    Group the private fields according to how they are used
    
    Change-Id: I7ce3d0939510c10f34bd91a55f6e03afc8e7d43c
    Use audio_channel_mask_t in AudioRecord
    
    Change-Id: I9e1b918b2635d961604a4a9d88eb1c7179a167a7
    Remove unused AudioRecord::channels()
    
    It was declared but never implemented or called.
    
    Change-Id: If5846147fcbd7f6d4187971e2044dd6fd3252b42
    Include what you use
    
    Change-Id: I12ef9367d05dbe069c037b1b4acd6347a8cf3ece
    Remove AudioRecord record_flags
    
    Change-Id: I021ddcc1bcb63132a4597d13e3d09db2a5f2c628
    Use C APIs instead of C++ APIs for policy
    
    The C++ APIs are going away.
    
    Note: we use tid == 0 which is not supported yet by the C APIs,
    do not submit this until that is added.
    
    Change-Id: I0e90789e6c81c69f2544e899c52421ea5d1342be
    Made AudioRecord a subclasss of RefBase
    
    Made AudioRecord a subclass of RefBase to allow using strong
    references and solve concurrency issues.
    
    Issue 6254582.
    
    Change-Id: Ic1f3845958f477e8b2d23d3d25bf0f666addcb3b
    implemented synchronous audio capture
    
    Added the infrastructure to support the synchronization of playback and
    capture actions on specific events.
    The first requirement for this feature is to synchronize the audio capture
    start with the full rendering of a given audio content.
    The applications can further be extended to other use cases
    (synchronized playback start...) by adding new synchronization events and
    new synchronous control methods on player or recorders.
    
    Also added a method to query the audio session from a ToneGenerator.
    
    Change-Id: I51f1167290d9cafdf2fbcdf9e4785156973af44c
    IAudioFlinger::createTrack and openRecord flags
    
    createTrack and openRecord don't need the "old" flags parameter,
    which was either audio_policy_output_t or audio_in_acoustics_t
    shifted left by 16 bits.  But they do need "new" flags, which
    are defined by the application use case.  Initially, the only
    application use case flag is timed output, but others are planned.
    
    For output, the audio_policy_output_t flags are passed to
    AudioSystem::getOutput, which returns an audio_io_handle_t, and that
    handle is then passed to createTrack. So createTrack doesn't need the
    old flags parameter.
    
    For input, the audio_in_acoustics_t flags are passed to
    AudioSystem::getInput, which returns an audio_io_handle_t, and that
    handle is then passed to openRecord. So openRecord doesn't need the
    old flags parameter.
    
    Change-Id: I18a9870911846cca69d420c19fe6a9face2fe8c4
    Use AudioRecord::record_flags consistently
    
    Change-Id: I6f369a2b99eb515603bc7d5629a07db2b96783fe
    AudioRecord const methods
    
    Change-Id: Ifae4fd7820b650aaca2b13c8658c292db1c46c0f
    Fix typos and line length in AudioRecord comments
    
    Change-Id: I85cfb9a2b9b3ade098161aa7687b4d4f7eb226ea
    AudioRecord and AudioTrack client tid
    
    Inform AudioFlinger of the tid of the callback thread.
    
    Change-Id: I670df92dd06749b057238b48ed1094b13aab720b
    Use NULL not 0 for raw pointers
    
    Use if (p != NULL) instead of if (ptr)
    
    Change-Id: Iaec3413a59ccbf233c98fcd918cc7d70ac5da9fa
    Remove dead mutex in AudioTrack/AudioRecord thread
    
    The client callback threads had mutexes called AudioTrackThread::mLock
    and ClientRecordThread::mLock.  These mutexes were only used by start()
    and stop(), and were unused by the thread itself.  But start() and
    stop() already have their own protection provided by AudioTrack::mLock
    and AudioRecord::mLock.  So the thread mutexes can be removed.
    
    Change-Id: I098406d381645d77fba06a15511e179a327848ef
    Use audio_source_t consistently
    
    Was a mix of audio_source_t, uint8_t, and int.
    
    Related fixes:
     - fix comments in MediaRecorder.java
     - AudioPolicyService server side was not checking source parameter at
       all, so if the client wrapper was bypassed, invalid values could be
       passed into audio HAL
     - JNI android_media_AudioRecord_setup was checking source for positive
       values, but not negative values. This test is redundant, since already
       checked at Java and now checked by AudioPolicyService also, but might
       as well make it correct.
    
    Change-Id: Ie5e25d646dcd59a86d7985aa46cfcb4a1ba64a4a
    Use audio_format_t consistently, continued
    
    Was int or uint32_t.
    
    When AudioFlinger::format can't determine the correct format,
    return INVALID rather than DEFAULT.
    
    Init mFormat to INVALID rather than DEFAULT in the constructor.
    Subclass constructors will set mFormat to the correct value.
    
    Change-Id: I9b62640aa107d24d2d27925f5563d0d7407d1b73
    Fix incorrect includes of AudioTrack.h
    
    Remove unnecessary includes of AudioTrack.h.
    Use forward declaration of class names in preference to #include when possible.
    
    Change-Id: I12982811fa75c2c7695d8bbfa595a7aaec047dc0
    Use size_t for frame size
    
    except in the control block, where we don't have room.
    
    In AudioFlinger::ThreadBase::TrackBase::getBuffer,
    read the frame size from control block only once.
    
    Change-Id: Id6c4bccd4ed3e07d91df6bbea43bae45524f9f4e
    Bug 4903178 Restore priority and cgroup on stop
    
    On AudioTrack and AudioRecord stop or failed start, restore the priority
    and cgroup of the caller to their previous values, rather than forcing
    to NORMAL.  Dependent on new thread APIs.
    
    Also fixes bug where priority was set to AUDIO but cgroup not set.
    
    Change-Id: Ib83893918fb4fdf57c6b87884b51038997a631d8
    Use channel mask instead of channel count for track creation
    
    Record and playback objects (resp AudioRecord and AudioTrack)
    are created using a channel mask, but this information is lost
    in the mixer because only the channel count is known to
    AudioFlinger. A channel count can always be derived from a
    channel mask.
    
    The change consists in:
    - disambiguiting variable names for channel masks and counts
    - passing the mask information from the client to AudioFlinger
     and the mixer.
    - when using the DIRECT ouput, only verifying the format of
     the track is compatible with the output's for PCM.
    
    Change-Id: I50d87bfb7d7afcabdf5f12d4ab75ef3a54132c0e
    update for new audio.h header location
    
    Change-Id: Ic4c62c4037800802427eb7d3c7f5eb8b25d18876
    Signed-off-by: Dima Zavin <dima@android.com>
    audio/media: convert to using the audio HAL and new audio defs
    
    Change-Id: Ibc637918637329e4f2b62f4ac7781102fbc269f5
    Signed-off-by: Dima Zavin <dima@android.com>
    Fix issue 3439872: video chat and bluetooth SCO
    
    This change fixes the stability problems experienced when using
    a bluetooth headset supporting both A2DP and SCO. Problems occur
    when starting the video chat at which time the A2DP output is being
    stopped to start SCO. At that time, active AudioTracks are invalidated
    by AudioFlinger so that a new AudioTrack binder interface can be
    recreated by the client process on the new mixer thread with correct parameters.
    The problem was that the process to restore the binder interface was not
    protected against concurrent requests which caused 2 binder interfaces
    to be created sometimes. This could lead to permanent client deadlock
    if one of the client threads was waiting for a condition of the first
    created binder interface while the second one was created (as the AudioFlinger
    would only signal conditions on the last one created).
    This concurrent request situation is more likely to happen when a client
    uses the JAVA AudioTrack as the JNI implementation uses simultaneously the
    native AudioTrack callback and write push mechanisms. By doing so, the code
    that checks if the binder interface should be restored (in obtainBuffer()) is
    much more likely to be called concurrently from two different threads.
    
    The fix consists in protecting the critical binder interface restore phase
    with a flag in the AudioTrack control block. The first thread acting upon the binder
    interface restore request will raise the flag and the second thread will just wait for
    a condition to be signaled when the restore process is complete.
    
    Also protected all accesses to the AudioTrack control block by a mutex to prevent
    access while the track is being destroyed and restored. If a mutex cannot be held
    (e.g because we call a callback function), acquire a strong reference on the IAudioTrack
    to prevent its destruction while the cblk is being accessed.
    
    Modified AudioTrack JNI to use GetByteArrayElements() instead of
    GetPrimitiveArrayCritical() when writing audio buffers. Entering a critical section would
    cause the JNI to abort if a mediaserver crash occurs during a write due to the AudioSystem
    callback being called during the critical section when media server process restarts.
    Anyway with current JNI implementation, either versions do not copy data most of the times
    and the criticial version does not guaranty no data copy.
    
    The same modifications have been made to AudioRecord.
    
    Change-Id: Idc5aa711a04c3eee180cdd03f44fe17f3c4dcb52
    Fix issue 3157123.
    
    Use a Mutex wherever atomic operations were used in AudioTrack,
    AudioRecord, AudioFlinger and AudioEffect classes.
    
    Change-Id: I6f55b2cabdcd93d64ef19446735b8f33720f8dbc
    media: add AudioRecord::getMinFrameCount().
    
    Change-Id: I952071ab10aa49aa96b727d157b68470d69fff3d
    Issue 2667801: [Audio Effect Framework] AudioFlinger, AudioMixer AudioTrack modifications.
    
    First drop of audio framework modifications for audio effects support.
    
    - AudioTrack/AudioRecord:
    Added support for auxiliary effects in AudioTrack
    Added support for audio sessions
    Fixed left right channel inversion in setVolume()
    
    - IAudioFlinger:
    Added interface methods for effect enumeraiton and instantiation
    Added support for audio sessions.
    
    - IAudioTrack:
    Added method to attach auxiliary effect.
    
    - AudioFlinger
    Created new classes to control effect engines in effect library and manage effect connections to tracks or
    output mix:
      EffectModule: wrapper object controlling the effect engine implementation in the effect library. There
            is one EffectModule per instance of an effect in a given audio session
      EffectChain: group of effects associated to one audio session. There is one EffectChain per audio session.
            EffectChain for session 0 is for output mix effects, other chains are attached to audio tracks
            with same session ID. Each chain contains a variable number of EffectModules
      EffectHandle: implements the IEffect interface. There is one EffectHandle object for each application
            controlling (or using) an effect module. THe EffectModule maintians a list of EffectHandles.
    
    Added support for effect modules and effect chains creation in PlaybackThread.
    modified mixer thread loop to allow track volume control by effect modules and call effect processing.
    
    -AudioMixer
    Each track now specifies its output buffer used by mixer for accumulation
    Modified mixer process functions to process tracks by groups of tracks with same buffer
    Modified track process functions to support accumulation to auxiliary channel
    
    Change-Id: I26d5f7c9e070a89bdd383e1a659f8b7ca150379c
    Issue 2071329: audio track is shorter than video track for video capture on sholes
    
    Add API to retrieve number of frames dropped by audio input kernel driver.
    
    Submitted on behalf of Masaki Sato <masaki.sato@motorola.com>
    android-2.1_r1 snapshot
    Issue 2265163: Audio still reported routed through earpiece on sholes
    
    This is a second attempt to fix the audio routed to earpiece syndrom.
    The root cause identified this time is the crash of an application having an active AudioTrack playing on the VOICE_CALL stream type.
    When this happens, the AudioTrack destructor is not called and the audio policy manager is not notified of the track stop.
    Results a situation where the VOICE_CALL stream is considered as always in use by audio policy manager which makes that audio is routed to earpiece.
    
    The fix consists in moving the track start/stop/close notification to audio policiy manager from AudioTrack to AudioFlinger Track objet.
    The net result is that in the case of a client application crash, the AudioFlinger TrackHandle object (which implements the remote side of the IAudioTrack binder interface) destructor is called which in turn destroys the Track object and we can notify the audio policy manager of the track stop and removal.
    
    The same modification is made for AudioRecord although no bug related to record has been reported yet.
    Also fixed a potential problem if record stop is called while the record thread is exiting.
    eclair snapshot
    Fix issue 2203561: Sholes: audio playing out of earpiece.
    
    Create a new IAudioTrack interface to AudioFlinger when start() fails due to a broken pipe error.
    Do the same if start fails due to the same error after time out in obtainBuffer().
    Do not indicate that the AudioTrack is started to AudioPolicyManager if IAudioTrack start fails.
    This avoids that an AudioTrack keeps a dead IAudioTrack after a media server crash.
    
    Same modifications for AudioRecord.
    
    Add a flag to ToneGenerator indicating that the callback thread can call Java. Without it, when the media server crashes and restarts, the AudioSystem error callback will crash in JNI if the IAudiotrack is created from AudioTrack callback thread.
    Fix issue 1795088       Improve audio routing code
    
    Initial commit for review.
    Integrated comments after patch set 1 review.
    Fixed lockup in AudioFlinger::ThreadBase::exit()
    Fixed lockup when playing tone with AudioPlocyService startTone()
    donut snapshot
    Fix issue 1743700: AudioTrack: setPlaybackRate can not set the playback rate to twice of the ouputSR
    
    Store sample rate on 32 bits instead of 16 bits in audio_track_cblk_t.
    Removed sampleRate() methods from AudioTrack and AudioRecord: replaced by getSampleRate().
    AudioTrack::setSampleRate() no returns a status.
    Fix issue 1846343 - part 1
    
    This change is the first part of a fix for issue 1846343, :
    - Added new enum values for input sources in AudioRecord and MediaRecorder for voice uplink, downlink and uplink+downlink sources.
    - renamed streamType to inputSource in all native functions handling audio record.
    
    A second change is required in opencore author driver and android audio input to completely fix the issue.
    move libbinder's header files under includes/binder
    donut snapshot
    Fix issue 1745312: Various cleanups in media framework
    
    AudioTrack, AudioRecord:
      - remove useless mAudioFlinger member of AudioTrack and AudioRecord.
      - signal cblk.cv condition in stop() method to speed up stop completion.
      - extend wait condition timeout in obtainBuffer() when waitCount is -1 to avoid waking up callback thread unnecessarily
    
    AudioFlinger:
      - remove some warnings in AudioFlinger.cpp.
      - remove function AudioFlinger::MixerThread::removetrack_l()  as its content is never executed.
      - remove useless call to setMasterVolume in AudioFlinger::handleForcedSpeakerRoute().
      - Offset VOICE_CALL stream volume to reflect actual volume that is never 0 in hardware (this fix has been made in the open source): 0.01 + v * 0.99.
    
    AudioSystem.java:
      - correct typo in comment
    
    IAudioflinger, IAudioFlingerClient:
      - make AudioFlinger binder interfaces used for callbacks ONEWAY.
    
    AudioHardwareInterface:
      - correct routeStrings[] table in AudioHardwareInteface.cpp
    Automated import from //branches/donutburger/...@141200,141200
    Automated import from //branches/master/...@141201,141201
    auto import from //branches/cupcake_rel/...@141571
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@132589
    auto import from //depot/cupcake/@137055
    auto import from //branches/cupcake/...@127101
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Squashed commit of the following:
    
    commit f4edf442741886cdbe071e2d15f6e6247269f7c5
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Mar 12 09:09:18 2013 -0700
    
        Pass additional flags to the sink, use TCP by default in wolfiecast mode.
    
        Change-Id: I41e11a2375d4199656e45c4f149d8441d0016092
    
    commit 6302602ed280a38287f507159abfb40a1da38c5a
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Mar 12 08:51:58 2013 -0700
    
        tweaks
    
        Change-Id: Ie29e422d7258be522f4bb1f6c5afcf74c937e547
    
    commit a38a860e4979ba563cadbaafa21b084439449d26
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Mar 11 16:57:43 2013 -0700
    
        Report average lateness all the way from NuPlayerRenderer...
    
        Change-Id: I2e7700703ae656515e44b9c25610d26c75778111
    
    commit a7d49b11675ea88be4029dd8451d1649db94571d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Mar 11 14:54:19 2013 -0700
    
        Make TimeSyncer smarter, enable TunnelRenderer
    
        Change-Id: I27377a60cd8feb01589da456967fddd34532c20e
    
    commit 0f214c8ef68179f7b61512c37040939554013151
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Mar 7 15:57:56 2013 -0800
    
        convert source timestamps to sink timestamps, report lateness.
    
        Change-Id: I051a60fbbceca2f7b508ae3dac6e01e402bae39e
    
    commit 04a4f8e16bad09157b5615a5fa45310438955832
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Mar 7 09:00:28 2013 -0800
    
        Sync time between sink and source.
    
        Change-Id: Ie8b4d75c957aa48310e7c81d1279761b9f821efe
    
    commit aebe20e6184e3636a99082f8ece08e708015cb8d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Mar 6 09:03:12 2013 -0800
    
        play with back pressure
    
        Change-Id: I51eb69257e6a79e76f5f9c75ff99d8adbd083947
    
    Change-Id: Ifdf57228667fed7fc71c5090a2c3f7cea1037c5c
    Squashed commit of the following:
    
    commit f4edf442741886cdbe071e2d15f6e6247269f7c5
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Mar 12 09:09:18 2013 -0700
    
        Pass additional flags to the sink, use TCP by default in wolfiecast mode.
    
        Change-Id: I41e11a2375d4199656e45c4f149d8441d0016092
    
    commit 6302602ed280a38287f507159abfb40a1da38c5a
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Mar 12 08:51:58 2013 -0700
    
        tweaks
    
        Change-Id: Ie29e422d7258be522f4bb1f6c5afcf74c937e547
    
    commit a38a860e4979ba563cadbaafa21b084439449d26
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Mar 11 16:57:43 2013 -0700
    
        Report average lateness all the way from NuPlayerRenderer...
    
        Change-Id: I2e7700703ae656515e44b9c25610d26c75778111
    
    commit a7d49b11675ea88be4029dd8451d1649db94571d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Mar 11 14:54:19 2013 -0700
    
        Make TimeSyncer smarter, enable TunnelRenderer
    
        Change-Id: I27377a60cd8feb01589da456967fddd34532c20e
    
    commit 0f214c8ef68179f7b61512c37040939554013151
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Mar 7 15:57:56 2013 -0800
    
        convert source timestamps to sink timestamps, report lateness.
    
        Change-Id: I051a60fbbceca2f7b508ae3dac6e01e402bae39e
    
    commit 04a4f8e16bad09157b5615a5fa45310438955832
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Mar 7 09:00:28 2013 -0800
    
        Sync time between sink and source.
    
        Change-Id: Ie8b4d75c957aa48310e7c81d1279761b9f821efe
    
    commit aebe20e6184e3636a99082f8ece08e708015cb8d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Mar 6 09:03:12 2013 -0800
    
        play with back pressure
    
        Change-Id: I51eb69257e6a79e76f5f9c75ff99d8adbd083947
    
    Change-Id: Ifdf57228667fed7fc71c5090a2c3f7cea1037c5c
    Add support for HLS playlists of type 'event'.
    
    related-to-bug: 6870049
    
    Squashed commit of the following:
    
    commit eee2f3ba6bb7335f4e285632726db85645669929
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 15:02:01 2012 -0800
    
        Make everything a lot less verbose by default.
    
        Change-Id: I884d7a7901aa1e7d4ff590f065ca57a79d2af8b3
    
    commit 6bbdb837ed5bd88008e45efb8faf595e4051ba26
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 14:34:46 2012 -0800
    
        HLS now properly signals media time changes at discontinuities including
    
        the start of playback (which may not necessarily be at time 0 if the playlist
        is of type 'event' and hasn't completed yet).
    
        Change-Id: I5ab747d024f9b8d0df72a4e06a12ebb29f62802e
    
    commit 1555589832b1878a144a976a643e1af4d61f877c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 14:32:28 2012 -0800
    
        As part of a time discontinuity, clients of IStreamListener can now
    
        signal the corresponding media time after the discontinuity, i.e. the first PTS
        timestamp following the discontinuity will be considered equivalent to the
        specified media time and media buffers timestamped accordingly.
    
        Change-Id: Id7db7679b7faa6efd6270620ff52e34e884f3e92
    
    commit 5c24c605c073a11c426d025b1e7478fc1ad8365a
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 13:00:56 2012 -0800
    
        NuPlayer sources now expose flags() and can announce
    
        that duration may change (increase) dynamically, in which case duration
        will be polled at 1 second intervals and communicated to the upper layers.
    
        Change-Id: I45102909b7a19eed0dda576747e3814d742a0eea
    
    commit ecb71de8e281e61971a2cd73e7161a97540bc357
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 12:57:47 2012 -0800
    
        Stop caching duration in MediaPlayer, duration could increase dynamically.
    
        Change-Id: I7bb2f16c0abe49debdf45c776d2266aa069d7791
    
    commit 544aec5823e6d7a3e97e15b6b23546616bcd343e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 08:46:28 2012 -0800
    
        An attempt to add support for "event" style HLS playlists.
    
        Change-Id: I3dfb2e801ecaff8f5d8bdb3a4fca1b18aeeb2c60
    
    Change-Id: I48cf7f65a654d33f2f49ded74f8be22aed9e3b98
    Add support for HLS playlists of type 'event'.
    
    related-to-bug: 6870049
    
    Squashed commit of the following:
    
    commit eee2f3ba6bb7335f4e285632726db85645669929
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 15:02:01 2012 -0800
    
        Make everything a lot less verbose by default.
    
        Change-Id: I884d7a7901aa1e7d4ff590f065ca57a79d2af8b3
    
    commit 6bbdb837ed5bd88008e45efb8faf595e4051ba26
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 14:34:46 2012 -0800
    
        HLS now properly signals media time changes at discontinuities including
    
        the start of playback (which may not necessarily be at time 0 if the playlist
        is of type 'event' and hasn't completed yet).
    
        Change-Id: I5ab747d024f9b8d0df72a4e06a12ebb29f62802e
    
    commit 1555589832b1878a144a976a643e1af4d61f877c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 14:32:28 2012 -0800
    
        As part of a time discontinuity, clients of IStreamListener can now
    
        signal the corresponding media time after the discontinuity, i.e. the first PTS
        timestamp following the discontinuity will be considered equivalent to the
        specified media time and media buffers timestamped accordingly.
    
        Change-Id: Id7db7679b7faa6efd6270620ff52e34e884f3e92
    
    commit 5c24c605c073a11c426d025b1e7478fc1ad8365a
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 13:00:56 2012 -0800
    
        NuPlayer sources now expose flags() and can announce
    
        that duration may change (increase) dynamically, in which case duration
        will be polled at 1 second intervals and communicated to the upper layers.
    
        Change-Id: I45102909b7a19eed0dda576747e3814d742a0eea
    
    commit ecb71de8e281e61971a2cd73e7161a97540bc357
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 12:57:47 2012 -0800
    
        Stop caching duration in MediaPlayer, duration could increase dynamically.
    
        Change-Id: I7bb2f16c0abe49debdf45c776d2266aa069d7791
    
    commit 544aec5823e6d7a3e97e15b6b23546616bcd343e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 27 08:46:28 2012 -0800
    
        An attempt to add support for "event" style HLS playlists.
    
        Change-Id: I3dfb2e801ecaff8f5d8bdb3a4fca1b18aeeb2c60
    
    Change-Id: I48cf7f65a654d33f2f49ded74f8be22aed9e3b98
    Added an additional virtual method IStreamSource::flags().
    
    Change-Id: I89e62d84328e12f08c8f73cbfd53cfb42569de97
    Added an additional virtual method IStreamSource::flags().
    
    Change-Id: I89e62d84328e12f08c8f73cbfd53cfb42569de97
    Updated (internal) API for IStreamSource to signal discontinuities
    
    Change-Id: Idd4b9d8e7cec16b3e3c91c70e75144d42be30f96
    related-to-bug: 5553055
    Enable signalling of a stream discontinuity involving a format-change
    
    through IStreamListener.
    
    Change-Id: Ic0409cdc4891ad26b61f2f98bdda3c7fb2e2de6a
    related-to-bug: 5022434
    Allow optional specification of a PTS timestamp when signalling a discontinuity.
    
    If present, rendering will be suppressed until reaching the timestamp.
    
    Change-Id: Ic64bdf4225063c5a4d042ea9809960b843a46d19
    related-to-bug: 3489454
    API Support for both synchronous and queued commands, optionally associated metadata.
    
    Change-Id: Idb90d64cb638942210c5822b3cba2f05b087d601
    Support streaming data across binder boundaries.
    
    Change-Id: Ifbac61406dcb81343765f99ccba08bd90f9274cc
    IOMX: Add prepareForAdaptivePlayback method
    
    prepareForAdaptivePlayback is the fallback mechanism to support
    seamless resolution change for devices that do not support dynamic
    output buffers.  It is up to the codecs to handle this appropriately,
    but codecs that do not handle dynamic output buffers would
    request enough buffers up to the requested size in this method
    to avoid port reconfiguration on resolution changes.
    
    Change-Id: I58d4aa8ef1359ea3472735bbe9140c3132039b3d
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Bug: 10192531
    Related-to-bug: 7093648
    Optionally repeat the previously submitted frame to the encoder
    
    if no new frame has been delivered by surface flinger within the timeout
    interval.
    
    Change-Id: I282f1b726dfe5646b178d7858d6f5d4f5a264fde
    IOMX: add updateGraphicBufferInMeta method for metadata mode
    
    This is used to set the handle in the metadata buffer that is
    valid in the mediaserver process, as well as to keep a reference
    for the graphic buffers in BufferMeta.
    
    Change-Id: I46bb68d8bed894f357eeeb25368360d11b276634
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Support "suspension" of a video encoder in "surface-input" mode.
    
    i.e. feed no more input frames to the encoder while suspended.
    
    Change-Id: I51391e18c1517548e869f8ddece19f4af37e78f9
    Implement Surface input to MediaCodec.
    
    Also, renamed a CHECK_INTERFACE macro that was clashing with the
    Binder version.
    
    Bug 7991062
    
    Change-Id: If5e6ed0a06d9f67975497676e4b05abe3aa3d6c0
    Implement Surface input to MediaCodec.
    
    Also, renamed a CHECK_INTERFACE macro that was clashing with the
    Binder version.
    
    Bug 7991062
    
    Change-Id: If5e6ed0a06d9f67975497676e4b05abe3aa3d6c0
    remove jni.h include from IOMX.h
    
    jni.h is not used in IOMX.h and is not available in pdk builds,
    remove it.
    
    Change-Id: I9bc8fd70f617942712d9f684c6fc927bf18be753
    Slighly improve the API to discover if the OMX stack is running in the local
    
    process.
    
    Change-Id: Idd3c2f0d4a9542af01a3fdfd3b0bfab90e083505
    Stagefright: idle OMX after ANW errors
    
    This change fixes an issue in Stagefright where the state of an OMXCodec
    object can get out of sync with the state of the OMX component.  In
    particular, if one of the ANativeWindow functions failed and put the
    OMXCodec into the ERROR state, this would cause Stagefright to skip
    doing the Executing -> Idle transition.  Without this transition the
    freeBuffersOnPort call would never be made, and the MediaBuffers would
    end up being leaked (which would also leak the Gralloc buffers they
    reference).
    
    Bug: 5333695
    Change-Id: I85ea0cf92d18e7ef6d35c7d1e2a7b4e2c9745d34
    Support profile and level query for SW video decoders
    
    Change-Id: I9c20db128be96cd36cf2083e08e8c21f5e6d1fdf
    Remove unused references to ISurface
    
    Change-Id: I542806b5c91c525ed7cde821f6963f1e020ddf1a
    Add an OMX IL API for querying buffer usage flags.
    
    This change defines an OpenMAX IL API for querying from the IL component
    the gralloc buffer usage flags that should be used to allocate the
    buffers.  It also adds the Stagefright plumbing for using the new OMX IL
    API.
    
    Change-Id: I046b5e7be70ce61e2a921dcdc6e3aa9324d19ea6
    Related-Bug: 3479027
    Remove all traces of legacy renderer support in stagefright.
    
    Change-Id: I17b8e0dbf53fca37c96830c41131b4bc0c24ca6d
    Support post-decode video rotation.
    
    Change-Id: Ia371316e73a57e44610de86adce3eaa560afbf84
    OMX extension to support storing meta data in video input buffers during recording
    
    bug - 3042125
    
    Change-Id: I7543809fa4ff61d48da35eec6c2bd5eaa7e8cead
    Add the new Stagefright ANativeWindow OMX codec API.
    
    This change defines the two OMX_SetParameter calls that enable OMX codecs to
    interact with ANativeWindows.  It also adds the plumbing to the IOMX, OMX, and
    OMXNodeInstance classes to use these new APIs.
    
    This is try 2 for this change, after reverting the first one because it broke
    the build.
    
    Change-Id: I94249b72bdb5d5719360f03d7935fcca4ece5028
    Revert "Merge "Add the new Stagefright ANativeWindow OMX codec API.""
    
    This reverts commit 8a643b411e1802977f742709113ce01b06a18e12, reversing
    changes made to 73ea9beaf8eb3d0027e78cbc0ac5e626c3f8deb4.
    Add the new Stagefright ANativeWindow OMX codec API.
    
    This change defines the two OMX_SetParameter calls that enable OMX codecs to
    interact with ANativeWindows.  It also adds the plumbing to the IOMX, OMX, and
    OMXNodeInstance classes to use these new APIs.
    
    Change-Id: Ibfbf893dc3513db0b3d3221bec5708c77287cddc
    The qcom OMX video decoders do not allocate output buffer memory at the time OMX_AllocateBuffer is called, wait until we received the first FILL_BUFFER_DONE notification until we rely on the buffer data ptr.
    Fix no-copy-overhead OMXCodec implementation to actually work.
    Avoid unnecessary buffer copying if at all possible, detect if running in the mediaserver process.
    Squashed commit of the following:
    
    commit 144b1c40e9cf08a584c50e1bef7ba3f287e81a4f
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Dec 16 09:28:23 2009 -0800
    
        This H264 file shows a certain problem even better.
    
    commit 3245f1f3b7471975aeeb824a756c987abd610f55
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Dec 16 09:20:08 2009 -0800
    
        Using only the QA testfiles now.
    
    commit 074817eb3816c5dd70858a3594e3b92d799d873b
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Dec 15 16:17:39 2009 -0800
    
        Yay, roles are back again now that the API is in place.
    
    commit 6d847e4932cc38301ae27cb7283b7f1553a95457
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Dec 15 13:01:20 2009 -0800
    
        Added commandline option for specifying the random seed for reproducable tests.
    
    commit 62ab37b26336eaa67e49791c41c996acb6acee3f
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Dec 14 10:53:27 2009 -0800
    
        When issuing a seek it is important that only the first MediaSource::read call has the seek option.
    
    commit e77c46644b2fb6862bafa3569f7d304252074f1e
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Dec 7 16:39:07 2009 -0800
    
        Make sure the tests are actually built, sp<OMXCodec> becomes sp<MediaSource>
    
    commit 6df56915bd55a9445b3c6f953d3cc251d81579b8
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Dec 3 14:25:36 2009 -0800
    
        Temporarily disable support for querying the roles of OMX components.
    
    commit 31bb26930df9e3658dea684cedb4b0f1a06a4a88
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Dec 1 13:36:52 2009 -0800
    
        Disregard EOS events, slightly change the way the EOS flag on output buffers is handled.
    
    commit 4c382fbc9aebee8197d5988d04378062809e7c48
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Dec 1 09:37:24 2009 -0800
    
        New random seek test for the codec tests. Fixed "sticky" end-of-output-buffers flag behaviour in OMXCodec.
    
    commit c762eac3e44309592b61a168d66e091cf609fa03
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 3 14:13:43 2009 -0800
    
        Fix a typo.
    
    commit 50540a59b65c7d476b0193c7494cd75895e6ca6d
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 3 09:48:35 2009 -0800
    
        Some more fine tuning of the unit tests, make MPEG4Extractor less verbose.
    
    commit 1157a7e52a0636706caa235abe16d2ff8a0b8140
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Oct 28 12:01:01 2009 -0700
    
        Changes to the IOMX::listNodes API, this now returns the component's roles as well, unit tests now test all components in all supported roles by default.
    
    commit 30fbf2d8c6cb927689f7ba75eb550a81e9df488a
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Oct 26 09:45:26 2009 -0700
    
        Initial check-in of unit tests for OMX components.
    eclair snapshot
    DO NOT MERGE: Squashed commit of the following:
    
    commit 08259dd3dc9026887f9bbfedaf45866eb56ea9bc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 5 12:02:31 2009 -0800
    
        DO NOT MERGE: Use PV for metadata extraction even if stagefright is used for playback.
    
    commit 991832fe4dc012e51d3d9ed8d647c7f09991858f
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 5 11:24:11 2009 -0800
    
        DO NOT MERGE: Do not assert if we encounter OMX_StateInvalid. All bets are off though.
    
    commit cec45cf302d9218fe79956cbe8a462d7ca3a10bb
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Oct 26 16:11:54 2009 -0700
    
        DO NOT MERGE: When freeing an OMX node, attempt to transition it from its current state all the way to "Loaded" in order to properly free any allocated buffers.
    
    commit 34a1e885ef9113d68acbc26d36fcc47fdebbed84
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 5 11:10:49 2009 -0800
    
        DO NOT MERGE: Fix heap corruptin in OMXNodeInstance.
    
    commit 5a47f7439a1298b330541a7e4e647a8b44487388
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 5 11:08:19 2009 -0800
    
        DO NOT MERGE: Fix seek-on-initial-read behaviour of OMXCodec.
    
    commit 45bed64722501b9f411a2940aff5aff4cc4d2e98
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 5 11:02:23 2009 -0800
    
        DO NOT MERGE: Renaming string.h to stagefright_string.h to avoid conflicts.
    
    commit 6738e306a50196f31a73d4fc7b7c45faff639903
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Oct 15 13:46:54 2009 -0700
    
        DO NOT MERGE: Reimplement the OMX backend for stagefright.
    
        Besides a major cleanup and refactoring, OMX is now a singleton living in the media server, it listens for death notifications of node observers/clients that allocated OMX nodes and performs/attempts cleanup.
    
        Changed APIs to conform to the rest of the system.
    Reimplement the OMX backend for stagefright.
    
    Besides a major cleanup and refactoring, OMX is now a singleton living in the media server, it listens for death notifications of node observers/clients that allocated OMX nodes and performs/attempts cleanup.
    
    Changed APIs to conform to the rest of the system.
    Some decoders will return an error on OMX_EmptyThisBuffer to indicate that they don't support the media format, deal with this.
    Added an API IOMX::createRendererFromJavaSurface.
    
    This api allows to instantiate a renderer by specifying the hosting java Surface object. This hides the implementation details of (java-)Surface, (native-)Surface and friends.
    Squashed commit of the following:
    
    commit 3fa5f3ce910f34da0cedb8bcce1bd593db7eb740
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 27 14:48:54 2009 -0700
    
        Getting rid of more code now obsolete with the departure of OMXDecoder.
    
    commit e0d923ec0c7bb60bec8eb97739036a4c70c0feef
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 27 14:33:06 2009 -0700
    
        Remove obsoleted OMXDecoder class. OMXDecoder is dead, long live OMXCodec.
    Squashed commit of the following:
    
    commit 5bb012f0065f7ffaaeb4f569d71f0e3a8d6b19c3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 10:40:08 2009 -0700
    
        An attempt at fixing export using the qcom encoders. More quirks.
    
    commit 0690e76bfa48118a68287ccf1bbfa82febaa620c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 09:08:28 2009 -0700
    
        Callbacks are now dispatched from a separate thread in OMX.
    
    commit c6571a039526df29b6343f9a1971dbc019088c61
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 15:42:25 2009 -0700
    
        Massive API changes throughout stagefright, smart pointers everywhere.
    
    commit 900612af6a0555664d9ba195112cd859491265f4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 13:33:12 2009 -0700
    
        OMXCodecs now properly shutdown.
    
    commit 96732f05e1b0603dcd1b11f16a23512592eeb4f5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 12:04:04 2009 -0700
    
        More work on JPEG decoding using the hardware OMX component.
    
    commit 63839a073ac393e3a130434ba467969053b694ad
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 12 13:13:31 2009 -0700
    
        An attempt to drive the JPEG decoder OMX node.
    
    commit 3ac2fe5ab2926eda81b2123610b2434c645294ff
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:38:21 2009 -0700
    
        Renamed StateMachine to OMXCodec and put it in its proper place.
    
    commit 247da75a96bf8881956413023dd49a84d5b4f5b2
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:06:19 2009 -0700
    
        Statemachine is now a full-fledged MediaSource.
    
    commit 045244f6771fa0b9b329495c953afda900a84b71
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 7 09:16:54 2009 -0700
    
        Properly setup the input format when exporting to AMR audio.
    
    commit 271b984cb32c5cd9e46e3f90ae121f334e4b8da9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 6 09:59:38 2009 -0700
    
        Added some code to test audio encoding to the OMX harness.
    
    commit 79af4748e4af33bd66d3fbac606e332a69741cf4
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 5 14:36:22 2009 -0700
    
        Merge the old OMXDecoder and the new, shiny, StateMachine code.
    
    commit 91cf5dd77a8762bc10a0b2ffce35e3bbeb262231
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 4 17:41:43 2009 -0700
    
        A new harness to test OMX node compliance (and quirks).
    Expose a variation of the createRenderer API that works on a plain Surface.
    Deprecate/remove now unused socketpair ipc communication in favour of exclusive binder use.
    The IOMX interface now instantiates IOMXRenderers to hide the details of hardware accelerated blitting.
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Add the ability to dynamicaly register MediaPlayer types.
    
    Add the ability to dynamically register low level MediaPlayer
    factories which will be probed at setDataSource time to determine the
    proper MediaPlayerBase to instantiate.
    
    This change is in preparation for moving libaah_rtp out of
    frameworks/base and into phantasm platform directory.
    
    Change-Id: Icf8904db3ab9e3c85df6e780d5546d9988cb9076
    Signed-off-by: John Grossman <johngro@google.com>
    Gapless playback, step 1.
    
    Currently able to play Ogg Vorbis, PCM WAV and other lossless files seamlessly
    by reusing the initial AudioTrack for subsequent players.
    
    Change-Id: Ie7cf6b9076bdf4f9211574456d192c02c04fecc7
    Switch the way we configure for MediaPlayer retransmission.
    
    This is a cherry-pick of I6ab07d89b2eeb0650e634b8c3b7a0b36aba4e7dd
    with merge conflicts addressed by hand and additional changes made in
    response to code review feedback.
    
    Move in the direction of a more publishable API for configuring a
    media player for retransmission.  It used to be that we used a custom
    invoke and a modified URL (prefixed with aahTX://).  There are many
    issues with this technique and it was never meant to stand the test of
    time.
    
    This CL gets rid of all that.  A new (but currently hidden) method was
    introduced to the java level MediaPlayer API, called
    setRetransmitTarget(InetSocketAddress), which allows an app writer to
    set the retransmit target.  For now, this method needs to be called
    before a call to setDataSource (which is pretty unusual for the
    MediaPlayer API) because this mid level code uses this as a cue to
    instantiate an aahTX player instead of relying on the data source to
    select a player.  When retranmit functionality becomes part of the
    existing android player implemenation, this
    set-retrans-before-set-data-source behavior can go away, along with
    the aahTX player itself.
    
    Change-Id: I3b46c5227bbf69acb2f3cc4f93cfccad9777be98
    Signed-off-by: John Grossman <johngro@google.com>
    Switch the way we configure for MediaPlayer retransmission.
    
    Move in the direction of a more publishable API for configuring a
    media player for retransmission.  It used to be that we used a custom
    invoke and a modified URL (prefixed with aahTX://).  There are many
    issues with this technique and it was never meant to stand the test of
    time.
    
    This CL gets rid of all that.  A new (but currently hidden) method was
    introduced to the java level MediaPlayer API, called
    setRetransmitTarget(InetSocketAddress), which allows an app writer to
    set the retransmit target.  For now, this method needs to be called
    before a call to setDataSource (which is pretty unusual for the
    MediaPlayer API) because this mid level code uses this as a cue to
    instantiate an aahTX player instead of relying on the data source to
    select a player.  When retranmit functionality becomes part of the
    existing android player implemenation, this
    set-retrans-before-set-data-source behavior can go away, along with
    the aahTX player itself.
    
    Change-Id: I6ab07d89b2eeb0650e634b8c3b7a0b36aba4e7dd
    Revert "Add a way to play file descriptor data sources using the A@H transmitter media player."
    
    This reverts commit 64006cb1642b2ec0ee74c66007d869b884391fd1.
    
    Back out this change in order to get ready to implement a longer term,
    more media-team approved way of selecting a retransmit player.
    
    Change-Id: I97b68b9859a174eab858598cb00d4445a14fbc17
    Add a way to play file descriptor data sources using the A@H transmitter media player.
    
    * Added a MediaPlayer.setMediaPlayerType API that be called to specify the
      desired media player implementation before calling setDataSource
    * Implemented setDataSource(fd) in the AAH_TxPlayer
    
    Change-Id: I359075d9c7d6fd699dda14eb85ec50da19307639
    Use audio_stream_type_t consistently
    
    At native level it was a mixture of audio_stream_type_t, int, uint32_t,
    and uint8_t.  Java is still int.  Also fixed a couple of hard-coded -1
    instead of AUDIO_STREAM_DEFAULT, and in startToneCommand a hard-coded 0
    instead of AUDIO_STREAM_VOICE_CALL.
    
    Change-Id: Ia33bfd70edca8c2daec9052984b369cd8eee2a83
    Remove surface legacy APIs and code.
    
    All surfaces are now supported through surface textures.
    
    Change-Id: I95dd823e7099c0c32a48a1121624149dcc29d9c6
    Require INTERNET permission for network-based content.
    Bug #1870981
    
    Change-Id: Ia3ad166390c4d60cea19c3783895b078a2c4c15f
    Add setParameter/getParameter to MediaPlayer API.
    for bug 1982947
    
    Change-Id: If3f40e4f18cbba155af29944af38bdc627f8cd53
    Remove unused references to ISurface
    
    Change-Id: I542806b5c91c525ed7cde821f6963f1e020ddf1a
    Bug 3438258 Add SurfaceTexture as MediaPlayer sink
    
    This change enables the use of a SurfaceTexture in place of a Surface
    as the video sink for an android.media.MediaPlayer. The new API
    MediaPlayer.setTexture is currently hidden.
    
    This includes:
     - New Java and C++ interfaces
     - C++ plumbing and implementation (JNI, Binder)
     - Stagefright AwesomePlayer and NuPlayer use ANativeWindow
       (either Surface or SurfaceTextureClient)
    
    Change-Id: I2b568bee143d9eaf3dfc6cc4533c1bebbd5afc51
    Remove all traces of legacy renderer support in stagefright.
    
    Change-Id: I17b8e0dbf53fca37c96830c41131b4bc0c24ca6d
    Squashed commit of the following:
    
    commit 0d5694ba2d399dd0869532a4d6256448185a1be0
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Oct 29 11:59:23 2010 -0700
    
        suspend() and resume() methods on VideoView are back but don't do anything.
    
        They need to be back because they were public before.
    
        Change-Id: Iddfd1021ffcf341f26e8d55ba761fd33701e2425
    
    commit 16192891ed7d349ee97e47d1729d20a2d0d247b8
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Oct 29 11:47:05 2010 -0700
    
        Revert "New API on VideoView widget to suspend/resume a session. Do not release the MediaPlayer client for video suspending/resuming."
    
        This reverts commit 2e1818a4d16c3309660f27286c77d8d1eee95a25.
    
        Conflicts:
    
            api/current.xml
    
        Change-Id: I68dd1d05871044faf3f832d0838aa40bc7f890e5
    
    commit 8f934dc1a3ae4e60f0790fcf97671e063fa20fad
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Oct 29 11:44:16 2010 -0700
    
        Revert "Release mediaplayer if the current state is not suspending. Fix for bug 2480093."
    
        This reverts commit efb882cf75eef39ecaf9f8920ed302a019fa629f.
    
    commit f2ed03550887986f39d36b5dabcd9e919949c7cf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Oct 29 11:44:08 2010 -0700
    
        Revert "Release MediaPlayer if suspend() returns false."
    
        This reverts commit 047212fd4ea360675e94d3ce83c7f5544f65b268.
    
    commit 441ecce678bd24e9660a72c8627b5bd94433ff8b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Oct 29 11:40:46 2010 -0700
    
        manually.
    
        Change-Id: I4fdd43c9f7c8b3eedddb31a196da4984e1c58e87
    
    Change-Id: I60d4b10e7a9e4ed8d9a796f1711618f557eb6e89
    Squashed commit of the following:
    
    commit 35cc68814a9537c31fde146e171e7b0bbdfe211e
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Aug 16 08:48:42 2010 -0700
    
        Only enable support for yuv to yuv conversion on passion, where it's available, use the slower yuv->rgb565 path everywhere else.
    
    commit d8ac5a8814103e60d11d2acf61997fc31a1dc58d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 13 13:56:44 2010 -0700
    
        The software renderer takes over all rendering, converting from yuv to yuv if possible and rgb565 otherwise.
    
    commit 684972074b74318bdcb826ed9b5b0864d2d2e273
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 13 09:34:35 2010 -0700
    
        A first shot at supporting the new rendering APIs.
    
    Change-Id: Iea9b32856da46950501f1a700f616b5feac710fd
    Added support for auxiliary audio effects to AudioTrack and MediaPlayer.
    
    Added methods to AudioTrack and MediaPlayer java classes to enable use of
    auxiliary audio effects. The effect can be attached and detached by specifying its
    ID and the send level controlled.
    
    Change-Id: Ie74ff54a453096a742688476f612ce355543b6f3
    New API on java's MediaPlayer to suspend/resume a session.
    
    related-to-bug: 2231576
    eclair snapshot
    Basic plumbing to retrieve metadata from the native player.
    
    IMediaPlayer.h
    Added a getMetadata method that mirrors the on in MediaPlayer.java.
    
    MediaPlayer.java
    Added a native method to get the metadata from the native player.
    Parse the parcel into a Metadata object.
    
    Metadata.java
    Added a stub to parse the Parcel returned by the native player into
    a set of metadata.
    
    android_media_MediaPlayer.cpp
    JNI call to forward the getMetadata call.
    
    MediaPlayerService.cpp
    MediaPlayerService::Client implements the new getMetadata method added in IMediaPlayer.h
    Implemented the metadata changed notification filters.
    
    IMediaPlayer:
    new setMetadataFilter method so set a filter (2 lists of allowed and blocked metadata type)
    serialized in a Parcel.
    
    MediaPlayer.java/android_media_MediaPlayer.cpp/mediaplayer.cpp
    new setMetadataFilter that passes the filter down to the MediaPlayerService's binder interface.
    
    MediaPlayerService.cpp
    The Client inner class holds the allowed and blocked metadata types.
    These are in 2 vectors that get populated in the setMetadataFilter.
    
    A new shourldDropMetadata method returns true if a type of metadata should be dropped according
    to the filters.
    
    The notify method in run the metadata update notifications thru the filter and possibly drop them.
    Direct api to the native media player.
    
    MediaPlayer.java has 3 new methods:
    * newRequest creates a Parcel that can be used to send data to the
      native player using invoke.
    * invoke issues synchronous calls to the native player using opaque
      parcels for the request and reply.
    
    IMediaPlayer.h has 1 new abstract method:
    * invoke
    
    The Midi and Vorbis players have a stub for these. So far only PV
    makes use of that new feature.
    
    To avoid any copy overhead, the JNI interface uses Parcel as a java
    object (no serialization/copy happens at the JNI layer).
    
    The remote interface token is inserted when the Parcel is constructed
    in java. That way the parcel is already routable when it reaches
     IMediaPlayer.cpp (proxy). No extra copy is needed there.
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add template class SingleStateQueue
    
    Change-Id: If7e2bc9b2a216524ee9cbb68682e2634933b4973
    Add template class SingleStateQueue
    
    Change-Id: If7e2bc9b2a216524ee9cbb68682e2634933b4973
    Whitespace and indentation
    
    Fix indentation to be multiple of 4.
    Make it easier to search:
      sp< not sp < to
      "switch (...)" instead of "switch(...)" (also "if" and "while")
    Remove redundant blank line at start or EOF.
    Remove whitespace at end of line.
    Remove extra blank lines where they don't add value.
    
    Use git diff -b or -w to verify.
    
    Change-Id: I966b7ba852faa5474be6907fb212f5e267c2874e
    - Add another parameter in notify() to be able to send timed text sample
    through listener during video playback.
    - Add OnTimedTextListener in the MediaPlayer
    For feature request 800939.
    
    Change-Id: I65072c27acb4c0037109a72be38c73e9f667420f
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Make tee sink compile OK again
    
    Change-Id: Ie865ceeabaeb698a62c11eac9f96e303c44c28ae
    Non-blocking audio I/O interface, WIP
    
    Yet another abstraction similar to AudioTrack::Buffer and AudioBufferProvider,
    but with support for streaming, non-blocking, and eventually PTS.
    
    This is intended to be used as follows:
     - primary HAL output stream implements a Sink
     - primary HAL input stream implements a Source
     - Pipe implements a Sink
     - PipeReader implements a Source or TimedSource (not shown yet),
       which supports "read at PTS"
     - fast AudioTrack on server side will implement a Source using cblk
     - normal AudioTrack on server side will not be changed initially
     - fast AudioRecord on server side will implement a Sink using cblk
     - normal AudioRecord on server side will not be changed initially
     - fast mixer thread will read from Sources and write to a Sink,
       or (unlikely) implement a Source and multiple Sinks
     - Visualization and PCM logger will read from Source or TimedSource
     - A2DP normal mixer will be connected directly to its output stream
       and there will be a kind of OutputTrack for duplication that will
       read from a Sink with non-blocking write fed by the fast mixer.
    
    Patch set 3 changes:
     - Add more implementations of NBAIO interfaces:
       added SourceAudioBufferProvider, MonoPipe, MonoPipeReader.
     - Added Format_sampleRate and Format_channelCount.
     - Extract out the roundUp() method.
     - Respond to most comments from previous code review.
     - The new classes are untested.
    
    Patch set 4 changes:
     - Fix bugs in MonoPipe::write() and MonoPipeReader::read()
     - Fix bug initializing mFrameBitShift too early
     - renamed roundUp() to roundup()
     - Fix Android.mk
     - Add LOG_TAG an LOG_NDEBUG, use ALOG_ASSERT and utils/Log.h instead of assert
     - Fix build warnings
     - Move constructor and destructor bodies from .h to .cpp
     - Line length 100
     - Following naming conventions for #include double-include protector macros
     - Include what you use
     - More NBAIO logging
     - MonoPipe write can be blocking
    
    Patch set 5 changes:
     - Address code review comments
     - Use a static library so unused implementations don't take memory
     - Comment out libsndfile dependency
     - Remove debugging LOGV and LOG_NDEBUG
    
    Patch set 6 changes (would be 6 at old location, actually 2 at new location):
     - Address code review comments on patchset 5
     - For MonoPipe, allow the full pipe to be used, no need to omit one slot
     - Don't do atomic releasing stores unless needed
    
    Still to do:
     - I'm not happy with the Pipe class names
     - Update build/ for new static library?
    
    Change-Id: Ie6c61f05ce06b676b033be448a8ef9025a2ffcfd
    Add ExtendedAudioBufferProvider::framesReleased and onTimestamp
    
    and implement them in SourceAudioBufferProvider using the associated NBAIO_Source,
    and in Track using the associated AudioTrackServerProxy.
    
    Change-Id: I60dc4adba63fc1dc452ff16caf347e4a7c8242c2
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Fix race condition for non-started fast tracks
    
    This required re-implementing how fast tracks are considered active.
    Now, they use the same logic as normal tracks, except underrun is ignored.
    
    Other changes:
     - add framesReady() to AudioBufferProvider interface
     - rebased
     - add track underrun counter state to fast mixer dump state
     - move dumpsys header to Track::appendDumpHeader()
       so it closer to where tracks are dumped
     - display track state in dumpsys as a character code
     - measure and display warmup time and cycles in dumpsys
     - copy in the presentation complete code
     - add ExtendedAudioBufferProvider for framesReady() which returns size_t
     - simplify underrun tracking
     - deferred reset track after stop()
     - add comments
    
    Change-Id: I7db8821bc565230ec76da1f9380fe3fb09735e5b
    Non-blocking audio I/O interface, WIP
    
    Yet another abstraction similar to AudioTrack::Buffer and AudioBufferProvider,
    but with support for streaming, non-blocking, and eventually PTS.
    
    This is intended to be used as follows:
     - primary HAL output stream implements a Sink
     - primary HAL input stream implements a Source
     - Pipe implements a Sink
     - PipeReader implements a Source or TimedSource (not shown yet),
       which supports "read at PTS"
     - fast AudioTrack on server side will implement a Source using cblk
     - normal AudioTrack on server side will not be changed initially
     - fast AudioRecord on server side will implement a Sink using cblk
     - normal AudioRecord on server side will not be changed initially
     - fast mixer thread will read from Sources and write to a Sink,
       or (unlikely) implement a Source and multiple Sinks
     - Visualization and PCM logger will read from Source or TimedSource
     - A2DP normal mixer will be connected directly to its output stream
       and there will be a kind of OutputTrack for duplication that will
       read from a Sink with non-blocking write fed by the fast mixer.
    
    Patch set 3 changes:
     - Add more implementations of NBAIO interfaces:
       added SourceAudioBufferProvider, MonoPipe, MonoPipeReader.
     - Added Format_sampleRate and Format_channelCount.
     - Extract out the roundUp() method.
     - Respond to most comments from previous code review.
     - The new classes are untested.
    
    Patch set 4 changes:
     - Fix bugs in MonoPipe::write() and MonoPipeReader::read()
     - Fix bug initializing mFrameBitShift too early
     - renamed roundUp() to roundup()
     - Fix Android.mk
     - Add LOG_TAG an LOG_NDEBUG, use ALOG_ASSERT and utils/Log.h instead of assert
     - Fix build warnings
     - Move constructor and destructor bodies from .h to .cpp
     - Line length 100
     - Following naming conventions for #include double-include protector macros
     - Include what you use
     - More NBAIO logging
     - MonoPipe write can be blocking
    
    Patch set 5 changes:
     - Address code review comments
     - Use a static library so unused implementations don't take memory
     - Comment out libsndfile dependency
     - Remove debugging LOGV and LOG_NDEBUG
    
    Patch set 6 changes (would be 6 at old location, actually 2 at new location):
     - Address code review comments on patchset 5
     - For MonoPipe, allow the full pipe to be used, no need to omit one slot
     - Don't do atomic releasing stores unless needed
    
    Still to do:
     - I'm not happy with the Pipe class names
     - Update build/ for new static library?
    
    Change-Id: Ie6c61f05ce06b676b033be448a8ef9025a2ffcfd
    Add NBAIO_Source::onTimestamp()
    
    with dummy default implementation, and implement in MonoPipeReader.
    onTimestamp is meant to be called by the corresponding sink when it has
    a new timestamp available.
    
    Change-Id: I8a90d24d1061e4a592ce5bd8ee1c9fce6bdd8a84
    Add NBAIO_Sink::getTimestamp()
    
    with a real implementation in AudioStreamOutSink
    for dummy implementation initially in MonoPipe.
    
    Use in AudioFlinger::PlaybackThread::threadLoop_write()
    to keep the input to the timestamp latch up-to-date.
    
    Change-Id: I10ef277991b63bb43d55d6f3df75116ef32246cd
    Add NBAIO support for more sample rates
    
    This will be used for audio capture but it is not scalable,
    and we need a better approach in the long term.
    
    Change-Id: I8b12f6b64a3fd8e8a8c425c82574260fe8ffbed6
    Add NBAIO support for more sample rates
    
    This will be used for audio capture but it is not scalable,
    and we need a better approach in the long term.
    
    Change-Id: I8b12f6b64a3fd8e8a8c425c82574260fe8ffbed6
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    AudioFlinger: fix timed audio
    
    (cherry picked from commit e20ac92c564a2f4e8123885807abdf0a78de0dd7)
    
    > AudioFlinger: fix timed audio
    >
    > Addresses Bug 6900517.
    >
    > Finish up support for timed audio in the new FastMixer world.  Pay special
    > attention to remaining lock-less and voluntary yield free on the FastMixer
    > thread.  This fixes audio playback for Q on JB.
    >
    > Change-Id: Iaf815e58a1b1d0a0190051794bec8dc5c9231785
    > Signed-off-by: John Grossman <johngro@google.com>
    
    Change-Id: I9bd687acc345a05867af48e71116690fdb0ce1b5
    Signed-off-by: John Grossman <johngro@google.com>
    Non-blocking audio I/O interface, WIP
    
    Yet another abstraction similar to AudioTrack::Buffer and AudioBufferProvider,
    but with support for streaming, non-blocking, and eventually PTS.
    
    This is intended to be used as follows:
     - primary HAL output stream implements a Sink
     - primary HAL input stream implements a Source
     - Pipe implements a Sink
     - PipeReader implements a Source or TimedSource (not shown yet),
       which supports "read at PTS"
     - fast AudioTrack on server side will implement a Source using cblk
     - normal AudioTrack on server side will not be changed initially
     - fast AudioRecord on server side will implement a Sink using cblk
     - normal AudioRecord on server side will not be changed initially
     - fast mixer thread will read from Sources and write to a Sink,
       or (unlikely) implement a Source and multiple Sinks
     - Visualization and PCM logger will read from Source or TimedSource
     - A2DP normal mixer will be connected directly to its output stream
       and there will be a kind of OutputTrack for duplication that will
       read from a Sink with non-blocking write fed by the fast mixer.
    
    Patch set 3 changes:
     - Add more implementations of NBAIO interfaces:
       added SourceAudioBufferProvider, MonoPipe, MonoPipeReader.
     - Added Format_sampleRate and Format_channelCount.
     - Extract out the roundUp() method.
     - Respond to most comments from previous code review.
     - The new classes are untested.
    
    Patch set 4 changes:
     - Fix bugs in MonoPipe::write() and MonoPipeReader::read()
     - Fix bug initializing mFrameBitShift too early
     - renamed roundUp() to roundup()
     - Fix Android.mk
     - Add LOG_TAG an LOG_NDEBUG, use ALOG_ASSERT and utils/Log.h instead of assert
     - Fix build warnings
     - Move constructor and destructor bodies from .h to .cpp
     - Line length 100
     - Following naming conventions for #include double-include protector macros
     - Include what you use
     - More NBAIO logging
     - MonoPipe write can be blocking
    
    Patch set 5 changes:
     - Address code review comments
     - Use a static library so unused implementations don't take memory
     - Comment out libsndfile dependency
     - Remove debugging LOGV and LOG_NDEBUG
    
    Patch set 6 changes (would be 6 at old location, actually 2 at new location):
     - Address code review comments on patchset 5
     - For MonoPipe, allow the full pipe to be used, no need to omit one slot
     - Don't do atomic releasing stores unless needed
    
    Still to do:
     - I'm not happy with the Pipe class names
     - Update build/ for new static library?
    
    Change-Id: Ie6c61f05ce06b676b033be448a8ef9025a2ffcfd
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Non-blocking audio I/O interface, WIP
    
    Yet another abstraction similar to AudioTrack::Buffer and AudioBufferProvider,
    but with support for streaming, non-blocking, and eventually PTS.
    
    This is intended to be used as follows:
     - primary HAL output stream implements a Sink
     - primary HAL input stream implements a Source
     - Pipe implements a Sink
     - PipeReader implements a Source or TimedSource (not shown yet),
       which supports "read at PTS"
     - fast AudioTrack on server side will implement a Source using cblk
     - normal AudioTrack on server side will not be changed initially
     - fast AudioRecord on server side will implement a Sink using cblk
     - normal AudioRecord on server side will not be changed initially
     - fast mixer thread will read from Sources and write to a Sink,
       or (unlikely) implement a Source and multiple Sinks
     - Visualization and PCM logger will read from Source or TimedSource
     - A2DP normal mixer will be connected directly to its output stream
       and there will be a kind of OutputTrack for duplication that will
       read from a Sink with non-blocking write fed by the fast mixer.
    
    Patch set 3 changes:
     - Add more implementations of NBAIO interfaces:
       added SourceAudioBufferProvider, MonoPipe, MonoPipeReader.
     - Added Format_sampleRate and Format_channelCount.
     - Extract out the roundUp() method.
     - Respond to most comments from previous code review.
     - The new classes are untested.
    
    Patch set 4 changes:
     - Fix bugs in MonoPipe::write() and MonoPipeReader::read()
     - Fix bug initializing mFrameBitShift too early
     - renamed roundUp() to roundup()
     - Fix Android.mk
     - Add LOG_TAG an LOG_NDEBUG, use ALOG_ASSERT and utils/Log.h instead of assert
     - Fix build warnings
     - Move constructor and destructor bodies from .h to .cpp
     - Line length 100
     - Following naming conventions for #include double-include protector macros
     - Include what you use
     - More NBAIO logging
     - MonoPipe write can be blocking
    
    Patch set 5 changes:
     - Address code review comments
     - Use a static library so unused implementations don't take memory
     - Comment out libsndfile dependency
     - Remove debugging LOGV and LOG_NDEBUG
    
    Patch set 6 changes (would be 6 at old location, actually 2 at new location):
     - Address code review comments on patchset 5
     - For MonoPipe, allow the full pipe to be used, no need to omit one slot
     - Don't do atomic releasing stores unless needed
    
    Still to do:
     - I'm not happy with the Pipe class names
     - Update build/ for new static library?
    
    Change-Id: Ie6c61f05ce06b676b033be448a8ef9025a2ffcfd
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Non-blocking audio I/O interface, WIP
    
    Yet another abstraction similar to AudioTrack::Buffer and AudioBufferProvider,
    but with support for streaming, non-blocking, and eventually PTS.
    
    This is intended to be used as follows:
     - primary HAL output stream implements a Sink
     - primary HAL input stream implements a Source
     - Pipe implements a Sink
     - PipeReader implements a Source or TimedSource (not shown yet),
       which supports "read at PTS"
     - fast AudioTrack on server side will implement a Source using cblk
     - normal AudioTrack on server side will not be changed initially
     - fast AudioRecord on server side will implement a Sink using cblk
     - normal AudioRecord on server side will not be changed initially
     - fast mixer thread will read from Sources and write to a Sink,
       or (unlikely) implement a Source and multiple Sinks
     - Visualization and PCM logger will read from Source or TimedSource
     - A2DP normal mixer will be connected directly to its output stream
       and there will be a kind of OutputTrack for duplication that will
       read from a Sink with non-blocking write fed by the fast mixer.
    
    Patch set 3 changes:
     - Add more implementations of NBAIO interfaces:
       added SourceAudioBufferProvider, MonoPipe, MonoPipeReader.
     - Added Format_sampleRate and Format_channelCount.
     - Extract out the roundUp() method.
     - Respond to most comments from previous code review.
     - The new classes are untested.
    
    Patch set 4 changes:
     - Fix bugs in MonoPipe::write() and MonoPipeReader::read()
     - Fix bug initializing mFrameBitShift too early
     - renamed roundUp() to roundup()
     - Fix Android.mk
     - Add LOG_TAG an LOG_NDEBUG, use ALOG_ASSERT and utils/Log.h instead of assert
     - Fix build warnings
     - Move constructor and destructor bodies from .h to .cpp
     - Line length 100
     - Following naming conventions for #include double-include protector macros
     - Include what you use
     - More NBAIO logging
     - MonoPipe write can be blocking
    
    Patch set 5 changes:
     - Address code review comments
     - Use a static library so unused implementations don't take memory
     - Comment out libsndfile dependency
     - Remove debugging LOGV and LOG_NDEBUG
    
    Patch set 6 changes (would be 6 at old location, actually 2 at new location):
     - Address code review comments on patchset 5
     - For MonoPipe, allow the full pipe to be used, no need to omit one slot
     - Don't do atomic releasing stores unless needed
    
    Still to do:
     - I'm not happy with the Pipe class names
     - Update build/ for new static library?
    
    Change-Id: Ie6c61f05ce06b676b033be448a8ef9025a2ffcfd
    Factor out and speed up permission-checking code
    
    Use the caching permission check for dump to save IPC.
    
    Cache getpid() to save kernel call for other permission checks.
    
    The C runtime library getpid() can't cache due to a fork
    race condition, but we know that mediaserver doesn't fork.
    
    Don't construct String16 on the stack.
    
    Change-Id: I6be6161dae5155d39ba6ed6228e7683e67be34ed
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Instantiate SingleStateQueue<AudioTimestamp>
    
    as typedef AudioTimestampSingleStateQueue and use it in MonoPipe.
    
    Change-Id: Idaebb362bd9d0a81a7ed83792ab9369dc37c0e74
    Add NBAIO_Sink::getTimestamp()
    
    with a real implementation in AudioStreamOutSink
    for dummy implementation initially in MonoPipe.
    
    Use in AudioFlinger::PlaybackThread::threadLoop_write()
    to keep the input to the timestamp latch up-to-date.
    
    Change-Id: I10ef277991b63bb43d55d6f3df75116ef32246cd
    Enable write side of MonoPipe to be shutdown
    
    Bug: 7253033
    Change-Id: Iea8390763b59ffa7a8e2a6b77dd04ea23442698f
    Enable write side of MonoPipe to be shutdown
    
    Bug: 7253033
    Change-Id: Iea8390763b59ffa7a8e2a6b77dd04ea23442698f
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    AudioFlinger: fix timed audio
    
    (cherry picked from commit e20ac92c564a2f4e8123885807abdf0a78de0dd7)
    
    > AudioFlinger: fix timed audio
    >
    > Addresses Bug 6900517.
    >
    > Finish up support for timed audio in the new FastMixer world.  Pay special
    > attention to remaining lock-less and voluntary yield free on the FastMixer
    > thread.  This fixes audio playback for Q on JB.
    >
    > Change-Id: Iaf815e58a1b1d0a0190051794bec8dc5c9231785
    > Signed-off-by: John Grossman <johngro@google.com>
    
    Change-Id: I9bd687acc345a05867af48e71116690fdb0ce1b5
    Signed-off-by: John Grossman <johngro@google.com>
    Reduce underruns in screen off, esp. with EQ
    
    Add MonoPipe APIs to specify setpoint.
    Use screen state to configure pipe setpoint.
    Fix a long-standing bug where pipe sleep time was excessive,
      which interacted poorly with governor and low clock frequencies.
      Now it deducts the elapsed time since last write(),
      which was significant when there was EQ and low clock frequency.
    
    Bug: 6618373
    Change-Id: I6f3b0072c2244aeb033ef0795ad164491a164ff5
    Reduce underruns in screen off, esp. with EQ
    
    Add MonoPipe APIs to specify setpoint.
    Use screen state to configure pipe setpoint.
    Fix a long-standing bug where pipe sleep time was excessive,
      which interacted poorly with governor and low clock frequencies.
      Now it deducts the elapsed time since last write(),
      which was significant when there was EQ and low clock frequency.
    
    Bug: 6618373
    Change-Id: I6f3b0072c2244aeb033ef0795ad164491a164ff5
    Pipe throttle based on requested frame count
    
    Now does throttling based on the requested frame count, but
    still permits overfilling pipe up to the rounded-up frame count.
    Also still uses the larger frame count for non-blocking arithmetic.
    
    Bug: 6585323
    Change-Id: Ic2420a071419905524a14c22ebe1ce0e32d70a9d
    audioflinger: refine latency latency calculation.
    
    There is an audio pipe between the normal mixer output and the fast
    mixer to cope for scheduling delays and buffer size difference.
    This pipe depth was not taken into account in latency calculation.
    
    Adding the pipe contribution to the latency significantly improves A/V sync.
    
    Bug 6520569.
    
    Change-Id: I5584908e8aa8a02170eb38b22b4370eea800a235
    Add throttle to have pipe fill at more stable rate
    
    Change-Id: Ibff9ab62764e2acd04518a4a00e25f19e28aff4a
    Non-blocking audio I/O interface, WIP
    
    Yet another abstraction similar to AudioTrack::Buffer and AudioBufferProvider,
    but with support for streaming, non-blocking, and eventually PTS.
    
    This is intended to be used as follows:
     - primary HAL output stream implements a Sink
     - primary HAL input stream implements a Source
     - Pipe implements a Sink
     - PipeReader implements a Source or TimedSource (not shown yet),
       which supports "read at PTS"
     - fast AudioTrack on server side will implement a Source using cblk
     - normal AudioTrack on server side will not be changed initially
     - fast AudioRecord on server side will implement a Sink using cblk
     - normal AudioRecord on server side will not be changed initially
     - fast mixer thread will read from Sources and write to a Sink,
       or (unlikely) implement a Source and multiple Sinks
     - Visualization and PCM logger will read from Source or TimedSource
     - A2DP normal mixer will be connected directly to its output stream
       and there will be a kind of OutputTrack for duplication that will
       read from a Sink with non-blocking write fed by the fast mixer.
    
    Patch set 3 changes:
     - Add more implementations of NBAIO interfaces:
       added SourceAudioBufferProvider, MonoPipe, MonoPipeReader.
     - Added Format_sampleRate and Format_channelCount.
     - Extract out the roundUp() method.
     - Respond to most comments from previous code review.
     - The new classes are untested.
    
    Patch set 4 changes:
     - Fix bugs in MonoPipe::write() and MonoPipeReader::read()
     - Fix bug initializing mFrameBitShift too early
     - renamed roundUp() to roundup()
     - Fix Android.mk
     - Add LOG_TAG an LOG_NDEBUG, use ALOG_ASSERT and utils/Log.h instead of assert
     - Fix build warnings
     - Move constructor and destructor bodies from .h to .cpp
     - Line length 100
     - Following naming conventions for #include double-include protector macros
     - Include what you use
     - More NBAIO logging
     - MonoPipe write can be blocking
    
    Patch set 5 changes:
     - Address code review comments
     - Use a static library so unused implementations don't take memory
     - Comment out libsndfile dependency
     - Remove debugging LOGV and LOG_NDEBUG
    
    Patch set 6 changes (would be 6 at old location, actually 2 at new location):
     - Address code review comments on patchset 5
     - For MonoPipe, allow the full pipe to be used, no need to omit one slot
     - Don't do atomic releasing stores unless needed
    
    Still to do:
     - I'm not happy with the Pipe class names
     - Update build/ for new static library?
    
    Change-Id: Ie6c61f05ce06b676b033be448a8ef9025a2ffcfd
    Add NBAIO_Source::onTimestamp()
    
    with dummy default implementation, and implement in MonoPipeReader.
    onTimestamp is meant to be called by the corresponding sink when it has
    a new timestamp available.
    
    Change-Id: I8a90d24d1061e4a592ce5bd8ee1c9fce6bdd8a84
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    AudioFlinger: fix timed audio
    
    (cherry picked from commit e20ac92c564a2f4e8123885807abdf0a78de0dd7)
    
    > AudioFlinger: fix timed audio
    >
    > Addresses Bug 6900517.
    >
    > Finish up support for timed audio in the new FastMixer world.  Pay special
    > attention to remaining lock-less and voluntary yield free on the FastMixer
    > thread.  This fixes audio playback for Q on JB.
    >
    > Change-Id: Iaf815e58a1b1d0a0190051794bec8dc5c9231785
    > Signed-off-by: John Grossman <johngro@google.com>
    
    Change-Id: I9bd687acc345a05867af48e71116690fdb0ce1b5
    Signed-off-by: John Grossman <johngro@google.com>
    Non-blocking audio I/O interface, WIP
    
    Yet another abstraction similar to AudioTrack::Buffer and AudioBufferProvider,
    but with support for streaming, non-blocking, and eventually PTS.
    
    This is intended to be used as follows:
     - primary HAL output stream implements a Sink
     - primary HAL input stream implements a Source
     - Pipe implements a Sink
     - PipeReader implements a Source or TimedSource (not shown yet),
       which supports "read at PTS"
     - fast AudioTrack on server side will implement a Source using cblk
     - normal AudioTrack on server side will not be changed initially
     - fast AudioRecord on server side will implement a Sink using cblk
     - normal AudioRecord on server side will not be changed initially
     - fast mixer thread will read from Sources and write to a Sink,
       or (unlikely) implement a Source and multiple Sinks
     - Visualization and PCM logger will read from Source or TimedSource
     - A2DP normal mixer will be connected directly to its output stream
       and there will be a kind of OutputTrack for duplication that will
       read from a Sink with non-blocking write fed by the fast mixer.
    
    Patch set 3 changes:
     - Add more implementations of NBAIO interfaces:
       added SourceAudioBufferProvider, MonoPipe, MonoPipeReader.
     - Added Format_sampleRate and Format_channelCount.
     - Extract out the roundUp() method.
     - Respond to most comments from previous code review.
     - The new classes are untested.
    
    Patch set 4 changes:
     - Fix bugs in MonoPipe::write() and MonoPipeReader::read()
     - Fix bug initializing mFrameBitShift too early
     - renamed roundUp() to roundup()
     - Fix Android.mk
     - Add LOG_TAG an LOG_NDEBUG, use ALOG_ASSERT and utils/Log.h instead of assert
     - Fix build warnings
     - Move constructor and destructor bodies from .h to .cpp
     - Line length 100
     - Following naming conventions for #include double-include protector macros
     - Include what you use
     - More NBAIO logging
     - MonoPipe write can be blocking
    
    Patch set 5 changes:
     - Address code review comments
     - Use a static library so unused implementations don't take memory
     - Comment out libsndfile dependency
     - Remove debugging LOGV and LOG_NDEBUG
    
    Patch set 6 changes (would be 6 at old location, actually 2 at new location):
     - Address code review comments on patchset 5
     - For MonoPipe, allow the full pipe to be used, no need to omit one slot
     - Don't do atomic releasing stores unless needed
    
    Still to do:
     - I'm not happy with the Pipe class names
     - Update build/ for new static library?
    
    Change-Id: Ie6c61f05ce06b676b033be448a8ef9025a2ffcfd
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Non-blocking audio I/O interface, WIP
    
    Yet another abstraction similar to AudioTrack::Buffer and AudioBufferProvider,
    but with support for streaming, non-blocking, and eventually PTS.
    
    This is intended to be used as follows:
     - primary HAL output stream implements a Sink
     - primary HAL input stream implements a Source
     - Pipe implements a Sink
     - PipeReader implements a Source or TimedSource (not shown yet),
       which supports "read at PTS"
     - fast AudioTrack on server side will implement a Source using cblk
     - normal AudioTrack on server side will not be changed initially
     - fast AudioRecord on server side will implement a Sink using cblk
     - normal AudioRecord on server side will not be changed initially
     - fast mixer thread will read from Sources and write to a Sink,
       or (unlikely) implement a Source and multiple Sinks
     - Visualization and PCM logger will read from Source or TimedSource
     - A2DP normal mixer will be connected directly to its output stream
       and there will be a kind of OutputTrack for duplication that will
       read from a Sink with non-blocking write fed by the fast mixer.
    
    Patch set 3 changes:
     - Add more implementations of NBAIO interfaces:
       added SourceAudioBufferProvider, MonoPipe, MonoPipeReader.
     - Added Format_sampleRate and Format_channelCount.
     - Extract out the roundUp() method.
     - Respond to most comments from previous code review.
     - The new classes are untested.
    
    Patch set 4 changes:
     - Fix bugs in MonoPipe::write() and MonoPipeReader::read()
     - Fix bug initializing mFrameBitShift too early
     - renamed roundUp() to roundup()
     - Fix Android.mk
     - Add LOG_TAG an LOG_NDEBUG, use ALOG_ASSERT and utils/Log.h instead of assert
     - Fix build warnings
     - Move constructor and destructor bodies from .h to .cpp
     - Line length 100
     - Following naming conventions for #include double-include protector macros
     - Include what you use
     - More NBAIO logging
     - MonoPipe write can be blocking
    
    Patch set 5 changes:
     - Address code review comments
     - Use a static library so unused implementations don't take memory
     - Comment out libsndfile dependency
     - Remove debugging LOGV and LOG_NDEBUG
    
    Patch set 6 changes (would be 6 at old location, actually 2 at new location):
     - Address code review comments on patchset 5
     - For MonoPipe, allow the full pipe to be used, no need to omit one slot
     - Don't do atomic releasing stores unless needed
    
    Still to do:
     - I'm not happy with the Pipe class names
     - Update build/ for new static library?
    
    Change-Id: Ie6c61f05ce06b676b033be448a8ef9025a2ffcfd
    Add comments
    
    Change-Id: Ifbf3a46a4183c8abc0feee1c588953ab10303cc1
    media.log cleanup
    
    Remove almost all of the specific logs, but leave the media.log
    logging infrastructure in place for the next time we need it.
    
    Re-apply a few good changes that were reverted earlier:
     - check logf format vs. argument list compatibility
     - distinguish potentially modified and actually modified tracks in FastMixer
     - fix benign bug where sq->end() was called more than once
     - fix a build warning
    
    Bug: 6490974
    Change-Id: I02d3e83646c738acaebb415bd0d6b548638b4ef5
    media.log cleanup
    
    Remove almost all of the specific logs, but leave the media.log
    logging infrastructure in place for the next time we need it.
    
    Re-apply a few good changes that were reverted earlier:
     - check logf format vs. argument list compatibility
     - distinguish potentially modified and actually modified tracks in FastMixer
     - fix benign bug where sq->end() was called more than once
     - fix a build warning
    
    Bug: 6490974
    Change-Id: I02d3e83646c738acaebb415bd0d6b548638b4ef5
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 32584a7d672864b20ab8b83a3cb23c1858e908b7
    
    Change-Id: I9dc680578b955b1af462eeb7a49d61a0d45eb81b
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 32584a7d672864b20ab8b83a3cb23c1858e908b7
    
    Change-Id: I9dc680578b955b1af462eeb7a49d61a0d45eb81b
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
     - increase log buffer sizes yet again
     - enable assertion checking without ALOGV
     - improve a few log messages
     - check for corruption in more places
     - log in all the process hooks
     - add new mixer APIs so we can check for corruption of mixer state
     - fix a build warning
    
    Bug: 6490974
    Change-Id: Ib0c4a73dcf606ef9bd898313b3b40ef61ab42f51
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
     - increase log buffer sizes yet again
     - enable assertion checking without ALOGV
     - improve a few log messages
     - check for corruption in more places
     - log in all the process hooks
     - add new mixer APIs so we can check for corruption of mixer state
     - fix a build warning
    
    Bug: 6490974
    Change-Id: Ib0c4a73dcf606ef9bd898313b3b40ef61ab42f51
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 639482c24c911b125398b31883ba6d55faebe28b
    
    Change-Id: I11f2829072ab11e18b0663024f27bf31192f1d39
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 639482c24c911b125398b31883ba6d55faebe28b
    
    Change-Id: I11f2829072ab11e18b0663024f27bf31192f1d39
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Add non-blocking event logger NBLog
    
    Change-Id: I6c136cf3d7f46a8af84c69ecfc199dab394c10dc
    Add non-blocking event logger NBLog
    
    Change-Id: I6c136cf3d7f46a8af84c69ecfc199dab394c10dc
    Add NBAIO_Sink::getTimestamp()
    
    with a real implementation in AudioStreamOutSink
    for dummy implementation initially in MonoPipe.
    
    Use in AudioFlinger::PlaybackThread::threadLoop_write()
    to keep the input to the timestamp latch up-to-date.
    
    Change-Id: I10ef277991b63bb43d55d6f3df75116ef32246cd
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    AudioFlinger: fix timed audio
    
    (cherry picked from commit e20ac92c564a2f4e8123885807abdf0a78de0dd7)
    
    > AudioFlinger: fix timed audio
    >
    > Addresses Bug 6900517.
    >
    > Finish up support for timed audio in the new FastMixer world.  Pay special
    > attention to remaining lock-less and voluntary yield free on the FastMixer
    > thread.  This fixes audio playback for Q on JB.
    >
    > Change-Id: Iaf815e58a1b1d0a0190051794bec8dc5c9231785
    > Signed-off-by: John Grossman <johngro@google.com>
    
    Change-Id: I9bd687acc345a05867af48e71116690fdb0ce1b5
    Signed-off-by: John Grossman <johngro@google.com>
    Non-blocking audio I/O interface, WIP
    
    Yet another abstraction similar to AudioTrack::Buffer and AudioBufferProvider,
    but with support for streaming, non-blocking, and eventually PTS.
    
    This is intended to be used as follows:
     - primary HAL output stream implements a Sink
     - primary HAL input stream implements a Source
     - Pipe implements a Sink
     - PipeReader implements a Source or TimedSource (not shown yet),
       which supports "read at PTS"
     - fast AudioTrack on server side will implement a Source using cblk
     - normal AudioTrack on server side will not be changed initially
     - fast AudioRecord on server side will implement a Sink using cblk
     - normal AudioRecord on server side will not be changed initially
     - fast mixer thread will read from Sources and write to a Sink,
       or (unlikely) implement a Source and multiple Sinks
     - Visualization and PCM logger will read from Source or TimedSource
     - A2DP normal mixer will be connected directly to its output stream
       and there will be a kind of OutputTrack for duplication that will
       read from a Sink with non-blocking write fed by the fast mixer.
    
    Patch set 3 changes:
     - Add more implementations of NBAIO interfaces:
       added SourceAudioBufferProvider, MonoPipe, MonoPipeReader.
     - Added Format_sampleRate and Format_channelCount.
     - Extract out the roundUp() method.
     - Respond to most comments from previous code review.
     - The new classes are untested.
    
    Patch set 4 changes:
     - Fix bugs in MonoPipe::write() and MonoPipeReader::read()
     - Fix bug initializing mFrameBitShift too early
     - renamed roundUp() to roundup()
     - Fix Android.mk
     - Add LOG_TAG an LOG_NDEBUG, use ALOG_ASSERT and utils/Log.h instead of assert
     - Fix build warnings
     - Move constructor and destructor bodies from .h to .cpp
     - Line length 100
     - Following naming conventions for #include double-include protector macros
     - Include what you use
     - More NBAIO logging
     - MonoPipe write can be blocking
    
    Patch set 5 changes:
     - Address code review comments
     - Use a static library so unused implementations don't take memory
     - Comment out libsndfile dependency
     - Remove debugging LOGV and LOG_NDEBUG
    
    Patch set 6 changes (would be 6 at old location, actually 2 at new location):
     - Address code review comments on patchset 5
     - For MonoPipe, allow the full pipe to be used, no need to omit one slot
     - Don't do atomic releasing stores unless needed
    
    Still to do:
     - I'm not happy with the Pipe class names
     - Update build/ for new static library?
    
    Change-Id: Ie6c61f05ce06b676b033be448a8ef9025a2ffcfd
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Non-blocking audio I/O interface, WIP
    
    Yet another abstraction similar to AudioTrack::Buffer and AudioBufferProvider,
    but with support for streaming, non-blocking, and eventually PTS.
    
    This is intended to be used as follows:
     - primary HAL output stream implements a Sink
     - primary HAL input stream implements a Source
     - Pipe implements a Sink
     - PipeReader implements a Source or TimedSource (not shown yet),
       which supports "read at PTS"
     - fast AudioTrack on server side will implement a Source using cblk
     - normal AudioTrack on server side will not be changed initially
     - fast AudioRecord on server side will implement a Sink using cblk
     - normal AudioRecord on server side will not be changed initially
     - fast mixer thread will read from Sources and write to a Sink,
       or (unlikely) implement a Source and multiple Sinks
     - Visualization and PCM logger will read from Source or TimedSource
     - A2DP normal mixer will be connected directly to its output stream
       and there will be a kind of OutputTrack for duplication that will
       read from a Sink with non-blocking write fed by the fast mixer.
    
    Patch set 3 changes:
     - Add more implementations of NBAIO interfaces:
       added SourceAudioBufferProvider, MonoPipe, MonoPipeReader.
     - Added Format_sampleRate and Format_channelCount.
     - Extract out the roundUp() method.
     - Respond to most comments from previous code review.
     - The new classes are untested.
    
    Patch set 4 changes:
     - Fix bugs in MonoPipe::write() and MonoPipeReader::read()
     - Fix bug initializing mFrameBitShift too early
     - renamed roundUp() to roundup()
     - Fix Android.mk
     - Add LOG_TAG an LOG_NDEBUG, use ALOG_ASSERT and utils/Log.h instead of assert
     - Fix build warnings
     - Move constructor and destructor bodies from .h to .cpp
     - Line length 100
     - Following naming conventions for #include double-include protector macros
     - Include what you use
     - More NBAIO logging
     - MonoPipe write can be blocking
    
    Patch set 5 changes:
     - Address code review comments
     - Use a static library so unused implementations don't take memory
     - Comment out libsndfile dependency
     - Remove debugging LOGV and LOG_NDEBUG
    
    Patch set 6 changes (would be 6 at old location, actually 2 at new location):
     - Address code review comments on patchset 5
     - For MonoPipe, allow the full pipe to be used, no need to omit one slot
     - Don't do atomic releasing stores unless needed
    
    Still to do:
     - I'm not happy with the Pipe class names
     - Update build/ for new static library?
    
    Change-Id: Ie6c61f05ce06b676b033be448a8ef9025a2ffcfd
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    AudioFlinger: fix timed audio
    
    (cherry picked from commit e20ac92c564a2f4e8123885807abdf0a78de0dd7)
    
    > AudioFlinger: fix timed audio
    >
    > Addresses Bug 6900517.
    >
    > Finish up support for timed audio in the new FastMixer world.  Pay special
    > attention to remaining lock-less and voluntary yield free on the FastMixer
    > thread.  This fixes audio playback for Q on JB.
    >
    > Change-Id: Iaf815e58a1b1d0a0190051794bec8dc5c9231785
    > Signed-off-by: John Grossman <johngro@google.com>
    
    Change-Id: I9bd687acc345a05867af48e71116690fdb0ce1b5
    Signed-off-by: John Grossman <johngro@google.com>
    Non-blocking audio I/O interface, WIP
    
    Yet another abstraction similar to AudioTrack::Buffer and AudioBufferProvider,
    but with support for streaming, non-blocking, and eventually PTS.
    
    This is intended to be used as follows:
     - primary HAL output stream implements a Sink
     - primary HAL input stream implements a Source
     - Pipe implements a Sink
     - PipeReader implements a Source or TimedSource (not shown yet),
       which supports "read at PTS"
     - fast AudioTrack on server side will implement a Source using cblk
     - normal AudioTrack on server side will not be changed initially
     - fast AudioRecord on server side will implement a Sink using cblk
     - normal AudioRecord on server side will not be changed initially
     - fast mixer thread will read from Sources and write to a Sink,
       or (unlikely) implement a Source and multiple Sinks
     - Visualization and PCM logger will read from Source or TimedSource
     - A2DP normal mixer will be connected directly to its output stream
       and there will be a kind of OutputTrack for duplication that will
       read from a Sink with non-blocking write fed by the fast mixer.
    
    Patch set 3 changes:
     - Add more implementations of NBAIO interfaces:
       added SourceAudioBufferProvider, MonoPipe, MonoPipeReader.
     - Added Format_sampleRate and Format_channelCount.
     - Extract out the roundUp() method.
     - Respond to most comments from previous code review.
     - The new classes are untested.
    
    Patch set 4 changes:
     - Fix bugs in MonoPipe::write() and MonoPipeReader::read()
     - Fix bug initializing mFrameBitShift too early
     - renamed roundUp() to roundup()
     - Fix Android.mk
     - Add LOG_TAG an LOG_NDEBUG, use ALOG_ASSERT and utils/Log.h instead of assert
     - Fix build warnings
     - Move constructor and destructor bodies from .h to .cpp
     - Line length 100
     - Following naming conventions for #include double-include protector macros
     - Include what you use
     - More NBAIO logging
     - MonoPipe write can be blocking
    
    Patch set 5 changes:
     - Address code review comments
     - Use a static library so unused implementations don't take memory
     - Comment out libsndfile dependency
     - Remove debugging LOGV and LOG_NDEBUG
    
    Patch set 6 changes (would be 6 at old location, actually 2 at new location):
     - Address code review comments on patchset 5
     - For MonoPipe, allow the full pipe to be used, no need to omit one slot
     - Don't do atomic releasing stores unless needed
    
    Still to do:
     - I'm not happy with the Pipe class names
     - Update build/ for new static library?
    
    Change-Id: Ie6c61f05ce06b676b033be448a8ef9025a2ffcfd
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Non-blocking audio I/O interface, WIP
    
    Yet another abstraction similar to AudioTrack::Buffer and AudioBufferProvider,
    but with support for streaming, non-blocking, and eventually PTS.
    
    This is intended to be used as follows:
     - primary HAL output stream implements a Sink
     - primary HAL input stream implements a Source
     - Pipe implements a Sink
     - PipeReader implements a Source or TimedSource (not shown yet),
       which supports "read at PTS"
     - fast AudioTrack on server side will implement a Source using cblk
     - normal AudioTrack on server side will not be changed initially
     - fast AudioRecord on server side will implement a Sink using cblk
     - normal AudioRecord on server side will not be changed initially
     - fast mixer thread will read from Sources and write to a Sink,
       or (unlikely) implement a Source and multiple Sinks
     - Visualization and PCM logger will read from Source or TimedSource
     - A2DP normal mixer will be connected directly to its output stream
       and there will be a kind of OutputTrack for duplication that will
       read from a Sink with non-blocking write fed by the fast mixer.
    
    Patch set 3 changes:
     - Add more implementations of NBAIO interfaces:
       added SourceAudioBufferProvider, MonoPipe, MonoPipeReader.
     - Added Format_sampleRate and Format_channelCount.
     - Extract out the roundUp() method.
     - Respond to most comments from previous code review.
     - The new classes are untested.
    
    Patch set 4 changes:
     - Fix bugs in MonoPipe::write() and MonoPipeReader::read()
     - Fix bug initializing mFrameBitShift too early
     - renamed roundUp() to roundup()
     - Fix Android.mk
     - Add LOG_TAG an LOG_NDEBUG, use ALOG_ASSERT and utils/Log.h instead of assert
     - Fix build warnings
     - Move constructor and destructor bodies from .h to .cpp
     - Line length 100
     - Following naming conventions for #include double-include protector macros
     - Include what you use
     - More NBAIO logging
     - MonoPipe write can be blocking
    
    Patch set 5 changes:
     - Address code review comments
     - Use a static library so unused implementations don't take memory
     - Comment out libsndfile dependency
     - Remove debugging LOGV and LOG_NDEBUG
    
    Patch set 6 changes (would be 6 at old location, actually 2 at new location):
     - Address code review comments on patchset 5
     - For MonoPipe, allow the full pipe to be used, no need to omit one slot
     - Don't do atomic releasing stores unless needed
    
    Still to do:
     - I'm not happy with the Pipe class names
     - Update build/ for new static library?
    
    Change-Id: Ie6c61f05ce06b676b033be448a8ef9025a2ffcfd
    MediaMuxer prefer not to use the MPEG4Writer in real time recording mode.
    
    By default, MPEG4Write will keep running in real time recording mode.
    
    bug:8598944
    
    Change-Id: Idf7fbd4e0feb7763660a74279ba8817b79098aaf
    MediaMuxer prefer not to use the MPEG4Writer in real time recording mode.
    
    By default, MPEG4Write will keep running in real time recording mode.
    
    bug:8598944
    
    Change-Id: Idf7fbd4e0feb7763660a74279ba8817b79098aaf
    Add support for common encryption
    
    b/7465749
    
    Change-Id: I5403b74a5ae428ad28b382863a09daafc400b137
    Add support for common encryption
    
    b/7465749
    
    Change-Id: I5403b74a5ae428ad28b382863a09daafc400b137
    Respect sample aspect ratio in NuPlayer.
    
    related-to-bug: 7569402
    Change-Id: I302de95d83b180bd2dc72ddd0c69a665dbce2527
    Respect sample aspect ratio in NuPlayer.
    
    related-to-bug: 7569402
    Change-Id: I302de95d83b180bd2dc72ddd0c69a665dbce2527
    Allocate buffers before calling start on its source in OMXCodec::start() for encoder case
    
    o This makes it possible to configure the source to use the same number of input buffers
      as requested by the video encoder, before the source starts. As a result, hardcoded
      number of video buffers for camera source, for instance, can be avoided.
    
    o related-to-bug: 6920805
    
    Change-Id: I13d2c308dce34967768cd407f02988e92ef10a89
    Add Fraunhofer AAC encoder with AAC-ELD support.
    
    Change-Id: I6cd499d257d72f50a5b508bed97796a591a51506
    Some refactoring and cleanup of now obsolete crypto fields.
    
    codec commandline tool no longer supports decryption.
    
    Change-Id: I7b10be6524631b20ac5d361d47949b00addf4a93
    Add metadata keys to communicate encrypted fragments and associated info.
    
    Change-Id: I90a27c9bbe649328b88144b161c420916673846f
    related-to-bug: 6275919
    Provisional support for secure decryption of media streams.
    
    Change-Id: Ib3982a9c960bfdb0cb7e1b174440b141b194cfbe
    Add MetaData::dumpToLog
    
    Utility method for dumping the content of a MetaData object to the log.
    
    Change-Id: I2d91b991e1d9fed2215e8995a73c2b1854205074
    Parse mp3 encoder padding/delay
    
    Get the mp3 encoder padding and delay from a XING frame or iTunSMPB tag.
    
    Change-Id: Icde598c8857d7e7c187a718f478ee9799d6a1b8a
    Add channel mask in AudioSink
    
    Add support for specifying a channel mask when opening an AudioSink.
      This parameter does not replace the channel count parameter in order
      to not have to duplicate the logic to derive a mask from the
      channel count everywhere an AudioSink is used without a known mask.
    
    A mask of 0 (CHANNEL_MASK_USE_CHANNEL_ORDER) means a mask will
      be automatically derived from the number of channels.
    
    Update existing AudioSink implementations to use the channel mask,
      and users of AudioSink to specify the mask if available, and
      CHANNEL_MASK_USE_CHANNEL_ORDER otherwise.
    
    Change-Id: Ifa9bd259874816dbc25ead2b03ea52e873cff474
    Add support for retrieving location information in mp4/3gpp files
    
    Change-Id: Ib8427704ef9ee5a4fa8fe1818c8a62d77b4ea687
    related-to-bug: 5560253
    Support a "secure input buffer" mode for use by Widevine DRM in OMXCodec.
    
    Change-Id: Ie03b285265099dbac9b12f3f41d9ad758d0b50ad
    Timed text display format support:
    1. Extract 3GPP global format descriptions
    2. Extract 3GPP local format descriptions
    3. Define data structure (TimedText) for applications to
    retrieve the format metadata
    
    Change-Id: I6eac2a78df29ee15beee456656331fdd83b24e8e
    Add B frame support for MPEG4Writer
    
    o requires the support of negative ctts duration values (ctts version 1)
    
    Change-Id: Ib14130c9359c3bff3c76f20a7380d468a065dcaf
    Revert "Add const to the finders method in MetaData.cpp"
    
    This reverts commit 78fed171d9d62b25aa846d7373a7040e3fd2241e.
    
    Conflicts:
    
            include/media/stagefright/MPEG4Writer.h
    
    Change-Id: Ie6f497f67a473ad95b50bb949c1aa49e1804bac3
    Add const to the finders method in MetaData.cpp
    
    o also fixed the MPEG4Writer writeFtypBox() to take a const pointer to MetaData
    
    Change-Id: Iaecdbe6aeab345f6dc72aac0d19f9704b6e0d28a
    Initial CL for the timed text support:
    - Add support for MP4 timed text
    - Add API for app to turn on/off a text track
    - Add timed text metadata(language) in the MediaMetadataRetriever
    
    Change-Id: I0055beba38ac761627dbcc6d581ae9582d68bb94
    Make available h263 DSI information from MPEG4Extractor
    
    bug - 3446863
    
    Change-Id: Idbaf7a564d544784fdbc36ed0339c98a519adc88
    Fix the presentation video resolution when it is different from the actual image resolution of the video.
    
    bug - 3352413
    
    Change-Id: I8f08f3896e9fb90f09119dccdb88b82af60f79f2
    Add support for the "compilation" tag in mp3, mp4 and ogg, and also add
    support for two common ways of specifying album artist in ogg files.
    b/3311831
    
    (cherry-picked from GB because of weird automerger failure)
    
    Change-Id: Ibf12a3d6bc8bbc2ac5ea815de6b33414b8f53f0f
    Add support for the "compilation" tag in mp3, mp4 and ogg, and also add
    support for two common ways of specifying album artist in ogg files.
    b/3311831
    
    Change-Id: Iba1152013b7577168af71f947d7249560419fa05
    Squashed commit of the following:
    
    commit 0870f7bdd10a7cd36087d723d1957d8e1b967ca7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Nov 22 12:57:04 2010 -0800
    
        set_surface_crop doesn't seem to work right yet, stop using it in the SoftwareRenderer.
    
        Change-Id: If0a24f78b7810a6cecaa82eb4f23d0f90c22cc42
    
    commit 4767b52bee3a54ae117a8708d6832276a44e6a6a
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Nov 22 11:14:57 2010 -0800
    
        info->mMediaBuffer may still be NULL at this point...
    
        Change-Id: I25a71569015b1bb87f1ea7efff7588958774426f
    
    commit 0cef79874e1f1ddb10b7402177a87d3cffc7de92
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Nov 22 10:55:12 2010 -0800
    
        QCOM's YVU420 color format conversion has now been tested.
    
        Change-Id: I7fef4b642a928af15d42f006f7cdc107d5ff1d67
    
    commit 84fe05a6c969ede0ce8a85a530e110afca07c7a7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Nov 22 09:59:50 2010 -0800
    
        Removed remaining traces of suspend/resume. Proper reporting of video dimensions based on cropping rectangle.
    
        Change-Id: Ib238b80cbc1f19e7d312f2422eb5e9ab6b06b1bc
    
    commit 50970cdc837c5c498bcf0cb61b436196ca9e2ef7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 16:11:06 2010 -0800
    
        Revamped Software Renderer respects the crop rectangle.
    
        Removed obsolete ADRENO support code.
    
        Change-Id: I984cbc8a99c4d97e09e7d1b1292099c88b9ae535
    
    commit 8abbc6a5608bff650f968540f24a2eab75f254ed
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 16:10:41 2010 -0800
    
        The metadata retriever now respects the crop rectangle while capturing a video frame.
    
        Change-Id: Id3377176060086d16717f62c77ce26fabe899050
    
    commit 2d42e4466609d304e88bd2cdd6eb7b297340cc21
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 16:09:50 2010 -0800
    
        Changed ColorConverter APIs to be more general.
    
        Clients can now refer to crop rectangles in both source and destination.
    
        Change-Id: Ief151d736818396d0389ec04e7df5650e3ad7c04
    
    commit 273184303d54a54febd3e9c3dd4df30507ea78b5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 15:04:06 2010 -0800
    
        The stagefright commandline tool now writes the extracted video frame to /sdcard/out.jpg
    
        Change-Id: Ieb2ab3fda7a7cd9294beccb8db0eed75096eeef4
    
    commit 2d43390328cadf4ba94c1c3c02e4fb30baa29690
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 14:36:55 2010 -0800
    
        The AVC software decoder now properly advertises the cropping rectangle.
    
        Change-Id: Idb7a8a7e2fde5740f0fc34b7e8c92eca2577104b
    
    commit 9a7ed23c2fac8ce19dce7a34a603acee945a89f6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 13:40:39 2010 -0800
    
        OMXCodec now signals a format change if the cropping rectangle changes.
    
        ...and puts the cropping info into its output format.
    
        Change-Id: I3ffbd8e877ba286fe06a82c536ef20d92548d2e2
    
    commit efe0323947029df1c502599ccc288c8d676dfd31
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 11:29:39 2010 -0800
    
        Stagefright's MetaData object now supports rectangle items.
    
        Change-Id: I5667bb5ee6622c76104b99fb57f60abb802a8504
    
    Change-Id: I27cb78f2c5e0353f95fdfc5cb53991949ed75b70
    Separate the key for audio sampling rate and video frame rate in MetaData.h
    
    Change-Id: Ia33befaa7e6df8762703002d01aa79c04f15f040
    Fix a build break due to the missing kKeyRotation
    
    Change-Id: I6bf030c946abe7a95f8f7bc464e6507fb02cf39c
    Support post-decode video rotation.
    
    Change-Id: Ia371316e73a57e44610de86adce3eaa560afbf84
    Rotation support
    
    - We only support 0, 90, 180, and 270 degree clockwise rotation
    
    - Some players are known to ignore composition matrix in the MP4 file,
      although this is part of the MP4 file standard.
      Both QT and YT are supporting the rotation
    
    Change-Id: I1b7f66a801e9d9c49d889c9b06dd6173fa7e76c4
    DRM framework support:
    - add a sniffer for DRM files
    - add DRMSource and DRMExtractor for es_based DRM
    - add pread in FileSource.cpp for container_based DRM
    - add native DRM framework API calls in the player for
      DRM audio/video playback
    
    Change-Id: I4b9ef19165c9b4f44ff40eeededb9a665e78a90f
    Add decode-to-ANativeWindow support to Stagefright.
    
    This change adds support to Stagefright for doing OMX video decoding directly
    into buffers dequeued from an ANativeWindow.  It does this by registering the
    dequeued buffers with the OMX component using an Android-specific OMX
    extension, and then exchanging buffers between the OMX component and the
    ANativeWindow.
    
    Change-Id: Ida66f836503255a68d378c6903d96dfe9747ce87
    On this particular device the hardware video decoder spits out buffers that don't actually contain our video data, so we cannot use them to restore the video frame after suspend/resume.
    
    Change-Id: I1b8fe68c1766299844fe84ebbff49cb8b3e4cc7c
    related-to-bug: 3070094
    Vorbis files may have more samples encoded that should be used, i.e. we have to trim samples at the end of the stream. This is crucial for proper looping of some audio files.
    
    related-to-bug: 3036592
    Change-Id: Ib142b171c829ed74156c0281d9d4543fcc96c802
    HW audio encoder expects timestamp via kKeyTime from each input buffer
    
    - This fixes media server crashes on droid
    
    Change-Id: I7191cadc5275107425ec3ee3d437b2c5295858dc
    Ogg files can be tagged to be automatically looping, this setting always overrides the MediaPlayer's setLooping setting.
    
    Change-Id: Ifb564c6cdf6137eac14869f9ca7d471f05a5556a
    related-to-bug: 2974691
    Remove unused/debugging code from MP4 file writer
    
    o also makes nal length in the recorded file modifiable at runtime
    
    Change-Id: I731b4dde7070d8d9628b36b523a5b2c011c7c2cf
    Calculate audio media drift time from AudioSource
    
    The problem was that the time to receive an output buffer
    from an audio encoder is different because the encoder does not
    need to read from the source for all output buffers. This leads
    to large fluctuation in terms of wall clock duration between two
    neighboring audio sample outputs from the audio encoder. As a
    result, the media time for the video track after adjustment using
    the drifting changes wildly sometimes.
    
    This patch addresses this issue by only updating the media drift
    time when an audio source input buffer is read. the wall clock
    for the audio track is also calculated at the same time when
    the input audio buffer is read at AudioSource.
    
    bug - 2959800
    
    Change-Id: I3174aa182f744784b540f0a7198524d4eee8bd7b
    Use audio clock as the reference media clock
    
    o Only do this for realtime applications
    o Adjust other track clock based on audio clock
    o Assume other track uses wall clock as the media clock
    o Use some heuristics to reduce the size of stts box by 2/3.
    
    - also
    o Remove one unused key from MetaData.h
    
    Change-Id: Ib9432842627b61795b533508158c25258a527332
    Support for Gtalk video, includes AMR/H.263 assembler and packetization support, extensions to MediaRecorder to stream via RTP over a pair of UDP sockets as well as various fixes to the RTP implementation.
    
    Change-Id: I95b8dd487061add9bade15749e563b01cd99d9a6
    Support finer seek control on MediaSources.
    
    related-to-bug: 2858448
    
    Change-Id: Ifb4b13b990fd5889113e47e2c62249ac43391fa1
    Support user-supplied timescales for authoring
    
    - also, change all the real time unit to microseconds in MPEG4Writer
    
    Change-Id: I260f512f2eb670ade7b8858a56335a5d639de756
    Allow application to set two more encoding paramters: video profile and level
    
    Change-Id: I673e681cefe184d5c556c612c54600a24a2143e5
    Provide progress status report during authoring
    
    - Track either the number of A/V frames authored, or the time elapsed
    - Track the completion of the authoring
    - Add multiple camera support for authoring by accepting a camera id parameter
    - Set file type based on the OUTPUT_FORMAT requested
    
    Change-Id: I0f9d31b3b7a8fa43eb53f572410fb0ebd4fa0bb7
    Enable passing parameters to the MediaWriter at runtime (at start() call).
    
    - estimate the moov box size for mp4 file writer based on the file
      size/duration limit and target bit rate.
    - can switch to use 64 bit file offset at runtime
    
    rebased
    
    Change-Id: Ibbe1f57e91ab2605820d5d96e8048d11e5559c53
    Remove some hard-coded encoding parameters
    
    Change-Id: I7a8ccd5d57891a6a585c8da2ee53acb094955913
    A new OggExtractor/VorbisDecoder combo to support approximate seeking.
    
    Change-Id: Id5d0c1c8b1adc62896bb5ed951f7b5cfda811e95
    related-to-bug: 2654400
    Add support for "album artist" tag.
    Add support for the TPOS/TPA (disc number) id3 tag.
    Support for 'iTunes-style' metadata in .mp4 and .3gp files.
    
    related-to-bug: 2368967
    More metadata support.
    Squashed commit of the following:
    
    commit f81bb1dac5ef107bb0d7d5d756fb1ffa532ba2cc
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jan 11 14:55:56 2010 -0800
    
        Support for duration metadata, midi and ogg-vorbis files (in mediascanner)
    
    commit 0b1385a0dc156ce27985a1ff757c4c142fd7ec39
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jan 11 14:20:45 2010 -0800
    
        Refactor meta data logic. Container specific metadata is now also returned by the MediaExtractor.
    
    commit f9818dfac39c96e5fefe8c8295e60580692d5990
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jan 8 14:26:09 2010 -0800
    
        A first pass at supporting metadata through ID3 tags.
    
    commit 476e9e253633336ab790f943e2d6c0cd8991d76a
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jan 7 15:48:44 2010 -0800
    
        Initial checkin of ID3 (V2.2 and V2.3) parser for use in stagefright.
    
    related-to-bug: 2295456
    Initial checkin of software AMR NB encoder based on PV source code.
    Squashed commit of the following:
    
    commit 333057b355f8c260c549553b9a0634755c838b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 13 15:35:48 2009 -0800
    
        Some more tweaks to AVC encoding on sholes.
    
    commit 9981d0ee52ec5b8b0182aae733d1571e3ebb8390
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 12 16:36:57 2009 -0800
    
        Support for avc encoding, including sholes specific tweaks to pick the right colorspace for the camera to not require transcoding.
    
    commit 5ba0ebbbd4efca51f3ae1f60e2ca31e7d2cf136d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 11 09:50:03 2009 -0800
    
        Enable actual (camera) video-only recording using h.263 or mpeg4 encoding.
    
    commit 3fd59c3526a37fe7c696f4a978925d1831c09313
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 10 14:57:48 2009 -0800
    
        Allow switching between the PV recorder implementation and one supported by stagefright.
    
        This is controlled through the property "media.stagefright.enable-record".
    eclair snapshot
    Extract video thumbnails from the largest sync sample among the first 20.
    
    Also fixes OMXCodec seek behaviour on the very first call to OMXCodec::read()
    Change to a int64_t usecs representation for timestamps and duration throughout stagefright.
    Some work to make audio encoding work.
    Dynamically allocate a pair of MemoryHeaps according buffer count/sizes required by the OMX component, respect JPEG compressed size.
    The PV AVC software decoder expects each fragment of a NAL unit to be handed to the decoder unframed.
    The IOMX interface now instantiates IOMXRenderers to hide the details of hardware accelerated blitting.
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    MPEG2TSWriter: Write a proper CRC in PAT and PMT
    
    Change-Id: I6ec8039b176878da6f02691194d96b0a1e894055
    MPEG2TSWriter: Write proper continuity counters for PAT and PMT
    
    Change-Id: If94e31e51c563867db6d2376ad771f9751416084
    Don't call virtual functions in destructors for the writer classes
    
    Have not found any concrete bugs related to these calls yet, but we should avoid
    calling virtual functions in destructors, regardless.
    
    Change-Id: I2d47b79d3fb2d29f418619bee83aa147d232a5d4
    Support for writing output data to a provided callback function instead of a file
    
    in MPEG2TSWriter
    
    Change-Id: Ie54a5677c7b789a973aa50b7f197c6db238425bc
    Support for writing to MPEG2 transport stream files.
    
    Change-Id: If3b7a807bc224a4b1cb2236537c3ebdc5aee0d97
    Squashed commit of the following:
    
    commit 29a4d3effb05a2e074cb0693316ab1977baeb0b6
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Sep 27 12:01:32 2010 -0700
    
        Fully working implementation of MPEG2TSWriter (for AAC and AVC sources).
    
        Change-Id: I8a32a47565b647bf6c078c520e39565e08ea0d84
    
    commit f4dec4c3899f3be393508e180d6c07e249d3335e
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Sep 27 10:36:31 2010 -0700
    
        More reliable identification of MPEG2 transport streams. Don't keep scanning forever in case the stream does not have both audio and video tracks.
    
        Change-Id: Icc5b4e8be145b2805e8776559546a6818342aea7
    
    commit 4fe3cc942f9b3d3cf54138b828c41214aa916dd2
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Sep 27 08:23:39 2010 -0700
    
        test code
    
        Change-Id: I16560a17661407d06497f99ff88230724bb898af
    
    commit 64d988b24f49f179a90fa677be11c823959e734b
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Sep 23 14:42:52 2010 -0700
    
        First shot at supporting writing to an MPEG2 transport stream.
    
        Change-Id: Ie537939a99fa3ddc0c7661c47c18277584817c74
    
    Change-Id: If78fd034af8f6e8ceac8dbeff96d5ecb3f6b96dc
    64-bit file size/offset support for media framework
    
    Change-Id: I3452bc2c0f1d990cc67285df2fce1f9f86ff8e10
    eclair snapshot
    Move JPEGSource.{cpp,h} into libstagefright.
    Refactored "stagefright" commandline app, split off JPEGSource.
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    Implement Surface input to MediaCodec.
    
    Also, renamed a CHECK_INTERFACE macro that was clashing with the
    Binder version.
    
    Bug 7991062
    
    Change-Id: If5e6ed0a06d9f67975497676e4b05abe3aa3d6c0
    Implement Surface input to MediaCodec.
    
    Also, renamed a CHECK_INTERFACE macro that was clashing with the
    Binder version.
    
    Bug 7991062
    
    Change-Id: If5e6ed0a06d9f67975497676e4b05abe3aa3d6c0
    separte producer and consumer interfaces
    
    Bug: 9265647
    Change-Id: Iefabc11e4bd2e2e8ffd31160476c450affe6629c
    stagefright: BufferProducer updates
    
    Update BufferQueue and ConsumerBase users to new BufferQueue
    API, to allow BufferQueue slots to be reused.  Buffer consumers
    generally now need to track the unique frameNumber belonging to
    each frame acquired if they are using BufferQueue directly.
    Otherwise, they can simply track the graphicBuffer.
    
    Change-Id: I30ee3158cf40fb10bbd085241646d5f1128ee480
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Related-to-bug: 7093648
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Remove double negatives from SurfaceMediaSource
    
    ensure mStarted actually reflects the state of SurfaceMediaSource
    
    Change-Id: I92557896993ad8da23fe6940e997402ad63b8cbc
    related-to-bug: 7258622
    Remove double negatives from SurfaceMediaSource
    
    ensure mStarted actually reflects the state of SurfaceMediaSource
    
    Change-Id: I92557896993ad8da23fe6940e997402ad63b8cbc
    related-to-bug: 7258622
    Optionally have SurfaceMediaSource return absolute timestamps
    
    based on systemTime().
    
    Change-Id: I2eff15dd149a4b737d6e7473d1907cf0c80b6b38
    related-to-bug: 7266706
    Optionally have SurfaceMediaSource return absolute timestamps
    
    based on systemTime().
    
    Change-Id: I2eff15dd149a4b737d6e7473d1907cf0c80b6b38
    related-to-bug: 7266706
    Remove double negatives from SurfaceMediaSource
    
    ensure mStarted actually reflects the state of SurfaceMediaSource
    
    Change-Id: I92557896993ad8da23fe6940e997402ad63b8cbc
    related-to-bug: 7258622
    Remove double negatives from SurfaceMediaSource
    
    ensure mStarted actually reflects the state of SurfaceMediaSource
    
    Change-Id: I92557896993ad8da23fe6940e997402ad63b8cbc
    related-to-bug: 7258622
    Various improvements to a cleaner shutdown of the wifi display connection.
    
    Change-Id: Id029a89939e53c2bd1d20e572d3975ec2795c239
    related-to-bug: 7247918
    Various improvements to a cleaner shutdown of the wifi display connection.
    
    Change-Id: Id029a89939e53c2bd1d20e572d3975ec2795c239
    related-to-bug: 7247918
    Throttle SurfaceMediaSource.
    
    Change-Id: I214ce60f8d94df9c07041577e34ed1ad5e199fdb
    Throttle SurfaceMediaSource.
    
    Change-Id: I214ce60f8d94df9c07041577e34ed1ad5e199fdb
    Throttle SurfaceMediaSource.
    
    Change-Id: I214ce60f8d94df9c07041577e34ed1ad5e199fdb
    Throttle SurfaceMediaSource.
    
    Change-Id: I214ce60f8d94df9c07041577e34ed1ad5e199fdb
    Configure the SurfaceMediaSource to emit the same number of buffers
    
    as the video encoder allocates for its input. Do this before connecting
    the bufferqueue through surface flinger.
    
    Change-Id: Ibc81db1359afe2d88fdb75b23fadae65c8a6f7cc
    Configure the SurfaceMediaSource to emit the same number of buffers
    
    as the video encoder allocates for its input. Do this before connecting
    the bufferqueue through surface flinger.
    
    Change-Id: Ibc81db1359afe2d88fdb75b23fadae65c8a6f7cc
    SurfaceMediaSource: a few fixes / cleanups
    
    - Remove the setting of mStopped to true in onBuffersReleased
    - Cleaned up a few function call logs
    - Removed the 'reset' method.
    
    Change-Id: I56bab1d5cb2f3e6d59d54698c2e045d796d1849f
    SurfaceMediaSource: keep refs to current buffers
    
    This change fixes a bug in SurfaceMediaSource where it would not keep a
    reference to all of the Gralloc buffers that the video encoder is currently
    using.
    
    Bug: 6655597
    Change-Id: Ifd99976cc7ae57ed724bbf2bbcff357a39497391
    Refactored SurfaceMediaSource
    
    SurfaceMediaSource takes advantage of BufferQueue to avoid
    duplicated code.
    
    Change-Id: I5e60b8eca21e6c3cf728d363cd8f3786125182d1
    reduce IPCs in BufferQueue
    
    Change-Id: I1f8c32a771a411476d225adc62d1f07c24f39a3e
    Fixed missing return value from a method should have returned status_t
    
    Change-Id: I83ad2735eaf8a8dfa5f8f29f30aec1311b3222de
    Don't call virtual function in destructor of SurfaceMediaSource
    
    Change-Id: I3cbc2b1222335b61c814b5cdcfaefa495148b0ec
    Incr. MIN_UNDEQUEUED_BUFFERS in SurfaceMediaSource
    
    The buffers in SurfaceMediaSource were 4 earlier, whereas
    we need 5 for one of the devices.
    
    Change-Id: I87bf5e28bbb0f7c9661dc01b040baa903d95d2c2
    Fix SurfaceMediaSource timestamp handling.
    
    Was not basing timestamps on startTimeUs.
    Now synchronizes properly with audio.
    
    Bug: 4510826
    Change-Id: I613db0aa91e51fc75d120e65540e742d8ab2ae43
    Testing the GL/ CPU encoding w/ Gralloc buffers
    
    This is the test for Gralloc buffers based encoding.
    contains a combination of two main changes:
    
    1. GL based encoding tests added to SurfaceMediaSource_test
    
    2. SurfaceMediaSource ::read() colorformat
    
    The SurfaceMediaSource::getformat() sets it to OMX_COLOR_FormatAndroidOpaque.
    The omx encoder needs to interpret that colorformat and reads the format
    from the Gralloc buffers directly
    
    Change-Id: Iee2fe8901384109a4952e1d6c528c59eb01eb5b1
    return correct value from query after connecting a surface
    
    the first time a surface was connected, the values returned
    by query NATIVE_WINDOW_DEFAULT_{WIDTH|HEIGHT} and
    NATIVE_WINDOW_TRANSFORM_HINT were wrong until a call
    to queueBuffer was performed.
    
    Bug: 5137366, 5121607
    Change-Id: I7ac6b5b0daa876638f6bed7c20f286a6e6d984f6
    Adding Metadata mode to SurfaceMediaSource
    
    SurfaceMediaSource operates in metadata mode only, i.e. just the
    metadata is stored in videobuffers. SurfaceMediaSource passes the Gralloc
    buffer handle along with a 4 byte 'type' (indicating that the metadata
    is of type GrallocSource) to the encoder as opposed to the
    GrallocBuffer itself.
    
    Related to bug id: 4529323
    
    Change-Id: I83aebc0dd10f317658cdf70be5802dfc35a1e72d
    SurfaceTexture: add the abandon method.
    
    This change adds the 'abandon' method to the SurfaceTexture C++ class.
    This method may be used to put the SurfaceTexture in an abandoned state,
    causing all ISurfaceTexture methods to fail.
    
    Change-Id: Ibd261f7b73f44e2bec36a8508bf92113cfb7cf95
    Connect MediaRecorder Native to SurfaceMediaSource
    
    Making a connection from MediaRecorder Native layer to the
    SurfaceMediaSource for the purpose of encoding GL Frames. This will be
    called from the java side inside the Mobile Filter Framework.
    
    The mediarecorder native layer (client), when set the videosource to
    option VIDEO_SOURCE_FRAMES, asks the StageFrightRecorder on the mediaserver
    side to create a SurfaceMediaSource object and pass it back as a
    sp<ISurfaceTexture> object. Using that, the client side will dequeue and
    queue buffers. Connecting the GL Frames to the obtained
    sp<ISurfaceTexture> is not part of this CL.
    
    Related to bug id: 4529323
    
    Change-Id: I651bec718dd5b935779e7d7a050b841c2d0b0fcd
    SurfaceMediaSource: remove getAllocator method
    
    This change removes the getAllocator method from SurfaceMediaSource
    because that method is no longer a part of the ISurfaceTexture
    interface.
    
    Change-Id: I0e2f0bc3bc1c8cd3c1b4b14246f07b9b4e3066c3
    Renaming SurfaceEncoder to SurfaceMediaSource
    
    Related to bug id: 4529323
    
    Change-Id: Id820d45a536bd2c65e0a59def564eb5b3ea4a71c
    Adding SurfaceEncoder for encoding FilterFrames
    
    Adding SurfaceEncoder which can be used to encode
    custom frame data. In a sense, it is reverse
    of what SurfaceTexture does.
    
    SurfaceEncoder takes in frames from a native window and
    passes them to an encoder, thus acting like a MediaSource.
    It uses GRAlloc buffers underneath for passing data.
    The client side sets the geometry, format in the beginning,
    which cannot be changed while the recording is going on.
    
    Currently, there is no common pixel format that both
    GRAlloc and HAL understand.
    Also, the encoder cannot encode using the data from the GRAlloc
    buffers.
    
    The SurfaceEncoder_test examines mainly the buffer passage
    since true encoding cannot be done at this point.
    SimpleDummyRecorder 'reads' the frames in the same thread
    as the start(), whereas DummyRecorder 'reads' in a separate
    thread much like the MPEG4Writer. The test with DummyRecorder
    is much closer to the real encoding implementation.
    
    Related to bug id: 4529323
    
    Change-Id: I58ec19a150f8fe4d6195196dc44f55002b46c7c8
    Runtime dump support for MediaWriter
    
    Change-Id: I10b2c474de612ee4cef4b7c9eae2ee1dd8c2e895
    Make MediaWriter stop and pause return errors if necessary
    
    o Make the API consistent with SF framework, which the MediaSource
      provides a return status for stop
    
    o Also, helps to convey errors that occurred right when a
      premature stop() is called, leading to a potentially
      mal-formed output file.
    
    Change-Id: I52a932345f38570fdf8ea04d67d73dd94ccd30ef
    Support for writing the extracted data to an .mp4 file in the stagefright commandline tool.
    
    Change-Id: I972324a8fc9757e6e8116b0270ec0882106f8733
    Separate MediaRecorderClient with MediaPlayerClient
    
    - An alternative would be to define a common base class that
      both MediaRecorderClient and MediaPlayerClient can derive.
      But since the common code, onTransact() and notify() uses
      some Binder code, having a common base class may not gain
      us too much in terms of code reuse.
    
    Change-Id: Ibc06720278ad173fceacff3d267b7060856c6316
    Enable passing parameters to the MediaWriter at runtime (at start() call).
    
    - estimate the moov box size for mp4 file writer based on the file
      size/duration limit and target bit rate.
    - can switch to use 64 bit file offset at runtime
    
    rebased
    
    Change-Id: Ibbe1f57e91ab2605820d5d96e8048d11e5559c53
    Initial checkin for pause and resume control
    
    Change-Id: Ibdcf7bea5fb66baa81878704ba4091dfcfe382ee
    Handle recording file size and/or duration limit
    
    Change-Id: Ib9ed1f3ebd8fef550cc130a7ef11f2905fa9aedc
    Support for audio recording into AMR NB/WB files as well as audio tracks in MPEG4 files.
    
    related-to-bug: 2295449
    eclair snapshot
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Check adaptive playback support via CodecCapabilities
    
    Added flags field to CodecCapabilities, so that applications
    can query whether codecs support various features.  For now
    added one video-decoder feature:
    
    kFlagSupportsAdaptivePlayback
    
    Media playback applications can query it to see if a codec
    supports seamless resolution changes, such as by supporting
    dynamic output buffers.
    
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Change-Id: I09da46e8ab6b8645fa2749e33128e49eda2e865b
    Related-to-bug: 7093648
    Allow OMXCodec to specify an output color format for OMX decoder component
    
    The output color format is specified via the meta argument in OMXCodec::Create()
    
    o related-to-bug: 7122195
    
    Change-Id: Id3247686b893af25cc190685201e53ad34b0399c
    Allow OMXCodec to specify an output color format for OMX decoder component
    
    The output color format is specified via the meta argument in OMXCodec::Create()
    
    o related-to-bug: 7122195
    
    Change-Id: Id3247686b893af25cc190685201e53ad34b0399c
    Fixed a native crash due to unexpected state at destroy time when encoder component's source fails to start
    
    o Encoder component initializes to be in the state of EXECUTING before its source gets started, because we wanted to be able
      to configure the source to use the advertised number of input buffers. However, if the source fails to start, then the encoder
      ends up in the state of EXECUTING when OMXCodec object gets destroyed. As a result, the assertion on the expected state in
      OMXCodec's constructor fails. The fix is to stop the video encoder component right way when its source fails to start so to
      bring the state of the encoder component back to the expected state.
    
    o related-to-bug: 7045494
    
    Change-Id: I6d4a221eb809d7137f53e58098a04816998f7a25
    Make sure codec names and corresponding quirks are returned together.
    
    Previously they were returned in separate vectors and only one of them was sorted if
    software codecs were preferred, leaving the quirks no longer matching the codec name
    at the same index.
    
    Change-Id: Id3f1e6f9f7f8c9cc4b6ebfb86a203b4d59de8604
    related-to-bug: 6737884
    Remove obsolete hack for TI specific code
    
    o related-to-bug: 6566886
    
    Change-Id: I39aad214cbf7b748a95a9d22db50cd8f421931e6
    Fix mono gapless playback for decoders that output stereo
    
    The old AAC decoder always outputs stereo, even for mono source material, so we
    need to use the number of channels of the output when calculating the number of
    bytes to skip, not the number of channels in the source.
    This makes OMXCodec skip the right amount of data, and prevents NuPlayer from
    writing half a frame and then asserting when the AudioSink doesn't accept it.
    Also move use of the SkipCutBuffer from NuPlayer to ACodec, so that it also
    works when using the new Java APIs, and make SkipCutBuffer derive from RefBase.
    b/774846
    
    Change-Id: I34df9fea3e6730617eae559afaa556f4085ef0a0
    Add Fraunhofer AAC encoder with AAC-ELD support.
    
    Change-Id: I6cd499d257d72f50a5b508bed97796a591a51506
    Make sure OMXCodec and ACodec both accept more than 2 channels of audio
    
    and fill in the OMX channel mask properly.
    
    Change-Id: I915950a0b252142b9eb3277cf7c6e0d9f5875305
    Add a few more APIs to MediaCodecList.
    
    Change-Id: I5ac193cd40c82bbcd87c1e55003b78102e8d4674
    Provisional support for secure decryption of media streams.
    
    Change-Id: Ib3982a9c960bfdb0cb7e1b174440b141b194cfbe
    Support gapless playback for mp3 and m4a
    
    Gapless playback for appropriately tagged mp3 and m4a files.
    Currently this is implemented in OMXCodec, which most players
    use, but should be easy to support in other players as well by
    using the SkipCutBuffer utility class.
    
    Change-Id: I748c669adc1cfbe5ee9a7dea2fad945d48882551
    Instead of hardcoding OMX component names in our code, support
    
    a config file instead.
    
    Change-Id: I5835903ab9f1c4a22ccc605ca99ed966767adf57
    Enable B frame support in MPEG4Writer
    
    This patch allows us to automatically detect whether ctts box is needed in MPEG4Writer.
    MPEG4Writer uses ctts version 0 (non-negative offset value) store the composition time
    offset on a needed basis.
    
    Currently, the size of the ctts box is not optimized. Optimization will be addressed
    in a subsequent patch.
    
    o also changed the private method retrieveDecodingTime(bool) in OMXCodec
      to getDecodingTime()
    
    o related-to-bug: 4232183
    
    Change-Id: Ic6dc7b25ecd258c2506ca4b9c25156e922456e51
    The software AAC encoder is now an OMX component.
    
    Yay.
    
    Change-Id: I74938a20b4e0a622836ea5184d3761180eb0f5de
    Report a runtime error instead of asserting on malformed avc configuration data.
    
    Change-Id: Ibcd9c3fb5b6532eba843ed80ecdcdacaf50d8845
    related-to-bug: 5641069
    Stagefright: push blank buffers when tearing down
    
    This change makes OMXCodec push RGB 565 buffers filled with black to an
    ANativeWindow when tearing down after decoding to protected gralloc
    buffers.  This allows the OMX tear down to zero out any protected
    buffers that were used without the possibility that the buffer is still
    being used by SurfaceFlinger or HWComposer.
    
    Bug: 5483222
    Change-Id: I8acedd81a7bb67dfdc2fd15733e3375b6ce8d560
    Set crop params to ANative Window during Initialization.
    
    The native_window_set_crop() is called when port reconfig event callback comes from decoder's and
    crop parameters are changed from default getconfig() OMX_IndexConfigCommonOutputCrop values.
    Since the default crop params are same as port reconfig crop params, the native_window_set_crop()
    is not called, hence resulting in displaying the whole frame(paddedWidth x paddedHeight).
    By calling native_window_set_crop() during initilaization of output port of decoder ensures
    in setting up ANative window to crop region.
    
    Change-Id: I68926464a1f5c7e6053804615c8b9bd32ea85688
    Signed-off-by: Lakshman Gowda <lakshman79@ti.com>
    Gracefuly return on detecting wrong AAC format from corrupted files
    
    Return BAD_VALUE error upon detection of wrongly formatted files.
    The client should abort the initialization upon error detection.
    
    The current CHECK() interrupts the configurecodec() preventing a graceful
    exit.
    
    Change-Id: Ic79313fa76a63284897df5d91635de87d06f3100
    Signed-off-by: Gilles-Arnaud Bleu-Laine <gilles@ti.com>
    Change an assert failure due to unsupported level by HW AVC decoder and report the error to applications
    
    Change-Id: I522a994981d86329ccc86c3b536b561dc6e40eeb
    related-to-bug: 5300618
    Revert "Notify the OMX component that it's going to be used in "secure" mode."
    
    This reverts commit 7616178271e95f009452a21ea45e7225997dc27a.
    Notify the OMX component that it's going to be used in "secure" mode.
    
    Change-Id: Id87c4b295eb38f7d24045918e73df298d7b842f9
    related-to-bug: 5137212
    QueryCodecs() signature change
    
    Restore QueryCodecs() signature exactly as used by third-party libs.
    Add an alternative function to select HW only codecs.
    
    Change-Id: Ibb2cb4dd36fc0c6599eb93aa5751c216397e3b6f
    Add option to query hardware decoders only
    
    Add an option to OMXCodec::QueryCodecs() to filter out
     software codecs.
    
    Update stagefright command line tool to list the roles of codecs.
    
    Change-Id: Icddb79118c30fe13cc3aea20f340174cc082c4e0
    Do not wait forever for output buffers in OMXCodec.cpp and error out in case time out happens
    
    o Deal with vendor codec hang bug
    
    Change-Id: Ic8449afd43045f09a9e0bd3d1be9a320e59ccabe
    Support profile and level query for SW video decoders
    
    Change-Id: I9c20db128be96cd36cf2083e08e8c21f5e6d1fdf
    Support a "secure input buffer" mode for use by Widevine DRM in OMXCodec.
    
    Change-Id: Ie03b285265099dbac9b12f3f41d9ad758d0b50ad
    Multiple changes to ACodec/codec tools:
    
    Make sure sf2 does not coalesce input buffers, generalize ACodec's codec
    instantiation based on OMXCodec's list of eligible component names.
    
    Some changes/additions to the "sf2" commandline tool
    
    Make surface options consistent with stagefright tool, i.e. use '-S' instead of '-s'
    New option '-R' renders surface-allocated buffers.
    
    Also fixes a longstanding bug introduced when generalizing from surfaces to native windows that never used surface-allocated buffers in sf2 even when the option was specified.
    
    Change-Id: I59fd533f0f6ef0337ebe2806ddc81a46878eb3ae
    Add B frame support for MPEG4Writer
    
    o requires the support of negative ctts duration values (ctts version 1)
    
    Change-Id: Ib14130c9359c3bff3c76f20a7380d468a065dcaf
    Squashed commit of the following:
    
    commit c80992e419ed567abef451042f09c4958534b90d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 11 14:00:07 2011 -0700
    
        Support for the mp3 audio decoder as a software OMX component.
    
        Change-Id: I66e10c4d0be4c3aecdef1c21b15a2c7359ceb807
    
    commit a358d0e1bf2a88897887445f42ccdda0f5f2f528
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 11 13:11:23 2011 -0700
    
        Support for G.711 alaw and mulaw decoders as software OMX components
    
        Change-Id: Ia5c76c02cb83a9f94ce39a27b2251e5880218f03
    
    commit 79088b9c9a5c8b8c97ea66cb4f90a2b0f0d34553
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 5 15:43:32 2011 -0700
    
        Instead of using an RGB surface and conversion yuv420->rgb565
    
        convert from OMX_COLOR_FormatYUV420Planar to HAL_PIXEL_FORMAT_YV12 instead.
    
        Change-Id: I8c4fc3c54c963f0d4ba6377f3c4ab4e0013152e5
        related-to-bug: 4394005
    
    commit 69469d3bd84425777b11b9fc938c5e0c61af26a7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 10 15:46:42 2011 -0700
    
        voip mustn't link against libstagefright.so
    
        Change-Id: I4d0ba9a8b9dc9380b792a1bd04bcda231964862c
    
    commit 2a9a9eeeeeb36ae3a9e680469c3016d509ff08c3
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 10 14:37:10 2011 -0700
    
        Remove most non-OMX software decoders by default
    
        Change-Id: Ic56514bc1b56b8fa952e8c4a164ea7379ecb69d0
    
    commit a4de62c37b335c318217765403a9fb282b20a216
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 9 16:50:02 2011 -0700
    
        Conditionally build the old-style software decoders.
    
        Change-Id: I5de609e1d76c92d26d6eb81d1551462258f3f15f
    
    commit 5d8b039f9449dc3dad1e77c42c80cc0b54b0c846
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 9 16:13:12 2011 -0700
    
        Support for MPEG4 and H.263 video decoders as soft OMX components.
    
        Change-Id: I5e3a4835afab89f98e3aa128d013628f5830eafe
    
    commit b25a1bfbeb0ff6e62e1cc694ce2599c91489c7d0
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 9 11:49:10 2011 -0700
    
        Boost Soft OMX thread priority, fix timestamp handling in vorbis Soft OMX decoder.
    
        Change-Id: I68d26d4999f06fcc451d69e5303663fab0cba9e8
    
    commit c0574362f8dc3319ce84d981097867062a698527
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 9 11:28:53 2011 -0700
    
        Support for the AMR decoders (NB and WB) as Soft OMX components.
    
        Change-Id: Ia565f59833fb52653e23f26536e7e41fc329a754
    
    commit 3e5575a8f0e27a490cb7bde77bd9456087837f08
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 4 13:41:25 2011 -0700
    
        Signal an error if the aac decoder failed to initialize from codec specific data.
    
        Change-Id: I01da7831bdf722edd7d6dc5974486daa2cf2b209
        related-to-bug: 4272179
    
    commit f94aeaa9886e772ff4823e671ed237096649f4af
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 3 13:07:38 2011 -0700
    
        Software OMX nodes don't (yet?) support native_window mode.
    
        Change-Id: I7d9ca9164ef4abf66b573ca21dba12d672f8b12d
    
    commit eefdfabac8dc659e00daa56da69aea705c49cb67
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 3 12:57:16 2011 -0700
    
        Fixing the OMX tests to refer to appropriate files from test content.
    
        Change-Id: I5b61c3498749bfb876abbd3946a5132356e3f6ff
    
    commit f31b7326aef14b6a1b7946520a9688f092e844d5
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 3 11:08:38 2011 -0700
    
        Soft OMX components are now dynamiclly loaded/unloaded, not directly linked against.
    
        Change-Id: I1e2ecfbfab67a8869886f738eaf0c7b3c948b6d9
    
    commit b7f0343879e4df06f0a1c9bfece24df557954e2f
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 2 15:58:36 2011 -0700
    
        Support for the AVC software decoder as an OMX component.
    
        Change-Id: I13c12df435ba4afbd968a9fc659f66b91c818bc2
    
    commit 5bb9e616d6c8e1b13d531fe996b9a9affdfb2977
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Apr 29 12:05:37 2011 -0700
    
        Fix Vorbis OMX decoder's component role.
    
        Change-Id: I5e871e5e11b3f951c93590210e63fd7987c467b5
    
    commit 089c91f2333062e196c7afd5fb0ca914878aa474
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Apr 29 12:05:18 2011 -0700
    
        Support vorbis_decoder OMX testing.
    
        Change-Id: I1985be178a12ae3f8768bc72067d9236238be170
    
    commit 56e241fa36fc37219bc536b823bdc2ab82dc1fad
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Apr 29 12:01:46 2011 -0700
    
        SoftVorbis OMX component now respects the number of valid frames per page.
    
        Change-Id: I82a117a064d9b083fc58a54ad900a987a763ef03
    
    commit fcd618ec520c376fdb78f4cbb44b8d9f5d213e2b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Apr 29 10:59:38 2011 -0700
    
        Support for the vorbis audio decoder as a soft OMX component.
    
        Change-Id: Iaeb057e58ca306d3dce205c0445b74d5aefef492
    
    commit d1fcc3203fc8003ad79c6e96b3a1fc4261743f16
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Apr 29 10:07:50 2011 -0700
    
        VPX decoder now properly resizes buffers after a port settings change.
    
        Change-Id: I110749a31b6cba087891d8e5dfe420830bdbf831
    
    commit 35c7168243cb69849d88911144a2c7fdfed5c54e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 28 13:23:34 2011 -0700
    
        Support for the VPX video decoder as a Software OMX component.
    
        Change-Id: Ic345add2d6d768d4af631160153f2e9b97fcea71
    
    commit 923b2534b4211fc5405377b5190bfa6f2dd27f32
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 28 11:34:40 2011 -0700
    
        Table-based registration of soft omx components.
    
        Change-Id: I7f45f0fa5b3a7950776e69c66349731f7674e937
    
    commit 04a88f3edb2266a463da9c4481b80178be460902
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 28 11:22:31 2011 -0700
    
        Apparently OMX_GetParameter is valid in any state other than OMX_StateInvalid
    
        OMX_SetParameter is still constrained to OMX_StateLoaded or a disabled port.
    
        Change-Id: I1032d7cf4011982d306aa369d4158a82830d26fb
    
    commit 9d70ca68445e7c40f5c9b2d12466e468f514de88
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 27 15:03:18 2011 -0700
    
        Use the new soft OMX aac decoder for HTTP live playback.
    
        Change-Id: Ifbcfb732a9edb855cb46b49f6d0ac942170ee28f
    
    commit 213fe4a10ea93cce08e8622dc3908053f29878a1
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Apr 12 16:39:45 2011 -0700
    
        Foundation for supporting software decoders as OMX components
    
        Change-Id: I7fdab256563b35d1d090617abaea9a26b198d816
    
    Change-Id: I83e9236beed4af985d10333c203f065df9e09a42
    Bug 3012968 DRM output control
    
    Modifies Stagefright to verify that there is a hardware-protected path
    to video sink for DRM content.
    
    Change-Id: I18b8741390e803a05a88c7f180b860a24ba88a10
    Handle some edge cases when seeking while starting up OMXCodec
    
    These were exposed by the new preview-seekframe while paused code.
    In particular, the codec may have been in state RECONFIGURING when attempting
    to seek, or we may have initiated flushing of the output port and this may not
    have completed yet by the time we want to reconfigure the output port.
    
    Change-Id: Id7640ade11dbc7205a22f648ea0b5e3e9b49cf4b
    related-to-bug: 3392259
    Make sure that key frame is generated for timelapse video recording if there are at least two input video frames from camera source.
    
    This will fix the stop failure issue where we have to wait n * time_interval before a key frame can be received by the file writer, where
     o n is the actual number of buffers advertised by the video encoder
     o time_interval is the interval settings for timelapse video recording
       specifying the time distance between neighboring input video frames
    
    The fix includes two parts:
    o OMXCodec will not submit all n buffers at one time, but instead submit one input
      frame at one time if it become available.
    
    o Timelapse camera source made available the first two input frames and do not skip
      them so that the first compressed output frame data can be received regardless
      the specified time_interval
    
    bug - 3367659
    
    Change-Id: Ia68cc2cb0d71aa7dc54540e9ad82fae911ad530b
    Properly rotate video that's marked as such and decoded to a surface.
    
    Change-Id: I1e9144db3447e58c99aac3f47702ad471678789c
    related-to-bug: 3378148
    Avoid deadlock in OMX::freeNode by making sure OMXCodecObserver does not hold the last reference of OMXCodec object - do not merge
    
    cherry-picked from: I4c79b66a900c527e3ae6a833f76d5da1b75c5a89
    
    bug - 3336424
    
    Change-Id: I2d8ecb79a5422342988c195c012c9e6327ac457a
    Avoid deadlock in OMX::freeNode by making sure OMXCodecObserver does not hold the last reference of OMXCodec object
    
    bug - 3336424
    
    Change-Id: I4c79b66a900c527e3ae6a833f76d5da1b75c5a89
    Revert "Allows the authoring engine to skip frame."
    
    o Skipping frames could lead to a lot of issues such as I frames is lost etc.
      It is not being used anyway.
    
    This reverts commit 53d4e0d58e2d5c18f6e026c705af833b9bdd7aba.
    
    Conflicts:
    
            media/libstagefright/AudioSource.cpp
            media/libstagefright/CameraSource.cpp
    
    Change-Id: I3abba1647de48db25bdc369066eb2a7ae4dedec2
    Better buffer status management and verification in OMXCodec.
    
    Change-Id: I90410f2ac0d8ff86076a239dc6e281b1bc4d8643
    Add color format query support to QueryCodecs()
    
    Change-Id: Ic8589649cd09392a1b969a30082b4c9c4e6cc6a7
    Fix memory leak when 0-memcpy quirk is used
    
    o minor change to the original patch by Andreas:
      call restorePatchedDataPointer() method only if kAvoidMemcopyInputRecordingFrames is turned on
    
    Change-Id: Idf3710e6f759d37d28e866613f98d39215722cb9
    Use meta data in the media recording framework
    
    o This patch allows us to do 720p video recording
    
    Change-Id: I2ea37e80a59630145396b08ebcdc6ee71df53333
    Fix a MediaBuffer leak in Stagefright.
    
    Change-Id: I548e60b07cf1676476874b156cfbc4ffefdfa2b9
    DO NOT MERGE
    
    Fix premature release of recording frames when physical address or metadata is stored in input video buffers
    
    - bug 3158459
    
    Change-Id: If297189d2a87fc3abfda68c29ac75b490b30a902
    Add two creation flags to OMXCodec::Create()
    
    o This allows to force to use software codecs or hardware codecs
    o If request cannot be fullfilled, Create() returns NULL.
    
    Change-Id: I02b56a9229abb56d49703fe80ac18571d33f3748
    Add decode-to-ANativeWindow support to Stagefright.
    
    This change adds support to Stagefright for doing OMX video decoding directly
    into buffers dequeued from an ANativeWindow.  It does this by registering the
    dequeued buffers with the OMX component using an Android-specific OMX
    extension, and then exchanging buffers between the OMX component and the
    ANativeWindow.
    
    Change-Id: Ida66f836503255a68d378c6903d96dfe9747ce87
    For thumbnail extraction make sure we instantiate a decoder that allows access to the framebuffer. Implement the samsung workaround to support this by reconfiguring the decoder.
    
    related-to-bug: 3106534
    Change-Id: Ie28d72af2f9e93818d1840ac83aa7bc11fa57b3b
    Work to support switching transport streams mid-stream and signalling discontinuities to the decoder.
    
    Change-Id: I7150e5e7342e1117c524856b204aadcb763e06ed
    related-to-bug: 2368598
    On this particular device the hardware video decoder spits out buffers that don't actually contain our video data, so we cannot use them to restore the video frame after suspend/resume.
    
    Change-Id: I1b8fe68c1766299844fe84ebbff49cb8b3e4cc7c
    related-to-bug: 3070094
    Workaround for a QCOM issue where the output buffer size advertised by the AVC encoder
    is occasionally too small.
    
    bug - 2882917
    
    Change-Id: Id59d8529084c5689a26f272e0cd3b1e955fd8a30
    Use the target color format from the camera source if possible
    
    - If the target color format is unavailable, the default
      platform-dependent color format will be used.
    
    - Also add some logic to prevent looping forever if the
      omx component is buggy supporting color format enumeration.
    
    Change-Id: I119a78f0d6201b4c3621235cca2f523ec14e24e3
    Allows the authoring engine to skip frame.
    
    This is 1st part of the work to allow audio and video resync if
    we found out that audio and video are out of sync during authoring
    
    - also fixed a problem in AACEncoder::read() where the buffer acquired
      from the buffer group does not release when error out at
      reading from source.
    
    Change-Id: I8a2740097fcfdf85e6178869afeb9f3687a99118
    Support finer seek control on MediaSources.
    
    related-to-bug: 2858448
    
    Change-Id: Ifb4b13b990fd5889113e47e2c62249ac43391fa1
    Allow application to set two more encoding paramters: video profile and level
    
    Change-Id: I673e681cefe184d5c556c612c54600a24a2143e5
    Added encoding parameters set up for H263 video encoder
    
    Also:
    - Allowed start() call when encoder already starts and stop() call when encoder has not started yet
    - Handled default value for audio/video sources/encoders and file output format
    
    Change-Id: I03b2f7d3cf570baa0fd011a8c0ad200f2f2a5da1
    Support "pausing" of MediaSources with the effect that they no longer pull on their upstream source until a subsequent read-with-seek.
    
    Change-Id: Ie4153a10ab36c1135f5fcfb572958129d886bcc3
    Remove some hard-coded encoding parameters
    
    Change-Id: I7a8ccd5d57891a6a585c8da2ee53acb094955913
    Second part of speeding up video recording frame rate
    
    1. Avoid copying the input recording frames to the encoder via OMX interface
       for TI video encoder
       This is a missing change for part one which help reduces the CPU load.
    
    2. Release output buffers as early as possible. This is a little bit helpful, but not critical.
    
    TODO:
    We should save the underlying pointers allocated by the OMX component before we replace them
    and restore them before we call OMX_FreeBuffer()!
    
    Change-Id: Ib3a88978f4c3b1153808872eaa7ac4c265a811ff
    Initial software encoder checkins
    
    Change-Id: I27f387db23594e46384c4eb3a0093ce220bb6b60
    Coalesce multiple encoded AAC frames into a single input buffer on this particular OMX codec to increase throughput significantly.
    
    Change-Id: I90c7db6656a53339c5d454336548c4f00d0d9064
    related-to-bug: 2548426
    Properly handle errors during the codec configuration phase, attempt to revert to next available (likely software-) codec if configuration fails.
    
    Change-Id: Id1c699711e30139c9cc29df972254b5ba026e6fb
    related-to-bug: 2517098
    Propagate errors all the way through the MediaSources and send either MEDIA_PLAYBACK_COMPLETE or MEDIA_ERROR depending on the final reason for running out of buffers to play back.
    
    related-to-bug: 2463749
    This hardware video decoder lies about its required input buffer sizes allocating 2.7 MB of memory instead of the required 176 KB... Added another quirk.
    
    related-to-bug: 2281327
    The TI MP3 decoder lies about the number of channels it outputs, add a quirk for that.
    The qcom OMX video decoders do not allocate output buffer memory at the time OMX_AllocateBuffer is called, wait until we received the first FILL_BUFFER_DONE notification until we rely on the buffer data ptr.
    Fix no-copy-overhead OMXCodec implementation to actually work.
    Avoid unnecessary buffer copying if at all possible, detect if running in the mediaserver process.
    Change OMXCodec::Create to return an sp<MediaSource> instead of an sp<OMXCodec>, this is more general and does not sacrifice any functionality as the remaining OMXCodec APIs are not meant to be public anyway.
    A small sample tool to encode pcm audio data to amr, decode it again and play it. Some changes to OMXCodec to properly configure the AMR decoder(s).
    Squashed commit of the following:
    
    commit 333057b355f8c260c549553b9a0634755c838b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 13 15:35:48 2009 -0800
    
        Some more tweaks to AVC encoding on sholes.
    
    commit 9981d0ee52ec5b8b0182aae733d1571e3ebb8390
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 12 16:36:57 2009 -0800
    
        Support for avc encoding, including sholes specific tweaks to pick the right colorspace for the camera to not require transcoding.
    
    commit 5ba0ebbbd4efca51f3ae1f60e2ca31e7d2cf136d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 11 09:50:03 2009 -0800
    
        Enable actual (camera) video-only recording using h.263 or mpeg4 encoding.
    
    commit 3fd59c3526a37fe7c696f4a978925d1831c09313
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 10 14:57:48 2009 -0800
    
        Allow switching between the PV recorder implementation and one supported by stagefright.
    
        This is controlled through the property "media.stagefright.enable-record".
    eclair snapshot
    Revive support for video encoding in OMXCodec.
    Prefer software decoders over hardware for thumbnail extraction.
    
    While our hardware decoders clearly outperform the software decoders in terms
    of raw throughput, their startup latency makes them less suitable for thumbnail
    extraction.
    Some cleanup of OMXCodec code, make sure to ignore 0-length output buffers in the metadata retriever.
    do not merge: The qcom video decoders always output yuv data after adjusting dimensions to be a multiple of 16.
    
    Add a quirk mode to OMXCodec that makes it aware of this fact for proper display. Also integrate back a change from eclair-mr2 that delays releasing an output buffer briefly after posting it to surface flinger, as we don't know how long it'll take it to actually display the buffer's content.
    OMXCodec now notifies the reader of changes in the output format by returning a special result/error code.
    The vendor is about to check in a fix for this issue, the workaround is no longer needed
    Workaround for avc decoder misreporting output buffer size requirements if the content is not a multiple-16 width/height.
    Media MIME types now have corresponding constants in MediaDefs.h, new codec enumeration API.
    Support encoding amr-wb content in stagefright.
    Setting the component role appears to be mandatory now for all mime types.
    
    Also using CODEC_LOGV instead of vanilla LOGV to include the component name the message related to.
    Some work to make audio encoding work.
    Squashed commit of the following:
    
    commit c45bfbb97ccd05982008df47181f9c73abaf0497
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Sep 1 15:58:12 2009 -0700
    
        This quirk should not be enabled by default in order to make the bug reproducible by the vendor.
    
    commit 21d72e80e795fcae53d9c3bcc8ba6312b081e420
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Sep 1 15:55:45 2009 -0700
    
        Undoing the hack to temporarily give up the lock to facilitate reading from the buffer source.
    
        This simply causes too many issues, there need to be independent threads providing input buffers and dequeuing output buffers.
    
    commit 84d507def8999c146ce124cc8edfe106c9ca70c2
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Sep 1 15:16:23 2009 -0700
    
        The AAC components appear to output stereo data even if the input data is mono...
    An attempt to fix a deadlock between OMXCodec::start and upstream ::read
    Another quirk, some OMX components fail to properly flush before shutdown and we must do it for them...
    Keep up with latest changes to overlay handling on that unnamable platform.
    Make sure not to ask for more buffers when we know that there won't be any, added a quirk for the aac decoder.
    Dynamically allocate a pair of MemoryHeaps according buffer count/sizes required by the OMX component, respect JPEG compressed size.
    The PV AVC software decoder expects each fragment of a NAL unit to be handed to the decoder unframed.
    Squashed commit of the following:
    
    commit 5bb012f0065f7ffaaeb4f569d71f0e3a8d6b19c3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 10:40:08 2009 -0700
    
        An attempt at fixing export using the qcom encoders. More quirks.
    
    commit 0690e76bfa48118a68287ccf1bbfa82febaa620c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 09:08:28 2009 -0700
    
        Callbacks are now dispatched from a separate thread in OMX.
    
    commit c6571a039526df29b6343f9a1971dbc019088c61
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 15:42:25 2009 -0700
    
        Massive API changes throughout stagefright, smart pointers everywhere.
    
    commit 900612af6a0555664d9ba195112cd859491265f4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 13:33:12 2009 -0700
    
        OMXCodecs now properly shutdown.
    
    commit 96732f05e1b0603dcd1b11f16a23512592eeb4f5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 12:04:04 2009 -0700
    
        More work on JPEG decoding using the hardware OMX component.
    
    commit 63839a073ac393e3a130434ba467969053b694ad
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 12 13:13:31 2009 -0700
    
        An attempt to drive the JPEG decoder OMX node.
    
    commit 3ac2fe5ab2926eda81b2123610b2434c645294ff
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:38:21 2009 -0700
    
        Renamed StateMachine to OMXCodec and put it in its proper place.
    
    commit 247da75a96bf8881956413023dd49a84d5b4f5b2
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:06:19 2009 -0700
    
        Statemachine is now a full-fledged MediaSource.
    
    commit 045244f6771fa0b9b329495c953afda900a84b71
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 7 09:16:54 2009 -0700
    
        Properly setup the input format when exporting to AMR audio.
    
    commit 271b984cb32c5cd9e46e3f90ae121f334e4b8da9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 6 09:59:38 2009 -0700
    
        Added some code to test audio encoding to the OMX harness.
    
    commit 79af4748e4af33bd66d3fbac606e332a69741cf4
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 5 14:36:22 2009 -0700
    
        Merge the old OMXDecoder and the new, shiny, StateMachine code.
    
    commit 91cf5dd77a8762bc10a0b2ffce35e3bbeb262231
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 4 17:41:43 2009 -0700
    
        A new harness to test OMX node compliance (and quirks).
    [libstagefright] : camcorder pause-resume implementation
    
    - Added pause resume feature in camcorder app.so that
      user pause recording and resume later which results
      in a single recorded clip.
    CRs-Fixed: 587051
    
    Change-Id: Ib82a93009348d997a4b8343b8b417b433be4c9df
    
    (cherry picked from commit 1f348eb12a631bbe6c3288c797354da6d425e64d
    from CM repository, with some of manual code removal. You know,
    CM tree tends to have QCOM-specific code all around. - peat-psuwit)
    
    Conflicts:
            media/libmediaplayerservice/StagefrightRecorder.cpp
            media/libstagefright/AudioSource.cpp
            media/libstagefright/OMXCodec.cpp
    remove uses of Surface in favor or IGraphicBufferProducer
    
    Change-Id: I13d7a9553aa335bca790a3a59d389d7533c83d57
    remove uses of Surface in favor or IGraphicBufferProducer
    
    Change-Id: I13d7a9553aa335bca790a3a59d389d7533c83d57
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    Dynamically configure the number of video buffers used by camera source, if supported
    
    o related-to-bug: 6920805
    
    Change-Id: I413bb50954cc84e32ed40bcb713842dc7b58e2b6
    Don't call virtual functions in the destructor for audio and camera source classes
    
    Change-Id: Ia74ffc1c0cbd7971697f5e3c476e340ec5c7727a
    Fix log spamming during time lapse video recording
    
    Change-Id: I4fc0809203684ebb02eaf217d7abad00aefc898f
    
    related-to-bug: 5626569
    Release camera if CameraSource::start() has not been called
    
    Change-Id: I2f7e4b8501db3d80b9aa6f99d896d778bec29e8c
    Add framework support for camcorder zoom.
    
    The purpose of ICameraRecordingProxy and ICameraRecordingProxyListener is to
    allow applications using the camera during recording.
    
    Camera service allows only one client at a time. Since camcorder application
    needs to own the camera to do things like zoom, the media recorder cannot
    access the camera directly during recording. So ICameraRecordingProxy is a proxy
    of ICamera, which allows the media recorder to start/stop the recording and
    release recording frames. ICameraRecordingProxyListener is an interface that
    allows the recorder to receive video frames during recording.
    
    ICameraRecordingProxy
      startRecording()
      stopRecording()
      releaseRecordingFrame()
    
    ICameraRecordingProxyListener
      dataCallbackTimestamp()
    
    The camcorder app opens the camera and starts the preview. The app passes
    ICamera and ICameraRecordingProxy to the media recorder by
    MediaRecorder::setCamera(). The recorder uses ICamera to setup the camera in
    MediaRecorder::start(). After setup, the recorder disconnects from camera
    service. The recorder calls ICameraRecordingProxy::startRecording() and
    passes a ICameraRecordingProxyListener to the app. The app connects back to
    camera service and starts the recording. The app owns the camera and can do
    things like zoom. The media recorder receives the video frames from the
    listener and releases them by ICameraRecordingProxy::releaseRecordingFrame.
    The recorder calls ICameraRecordingProxy::stopRecording() to stop the
    recording.
    
    The call sequences are as follows:
    1. The app: Camera.unlock().
    2. The app: MediaRecorder.setCamera().
    3. Start recording
       (1) The app: MediaRecorder.start().
       (2) The recorder: ICamera.unlock() and ICamera.disconnect().
       (3) The recorder: ICameraRecordingProxy.startRecording().
       (4) The app: ICamera.reconnect().
       (5) The app: ICamera.startRecording().
    4. During recording
       (1) The recorder: receive frames from ICameraRecordingProxyListener.dataCallbackTimestamp()
       (2) The recorder: release frames by ICameraRecordingProxy.releaseRecordingFrame().
    5. Stop recording
       (1) The app: MediaRecorder.stop()
       (2) The recorder: ICameraRecordingProxy.stopRecording().
       (3) The app: ICamera.stopRecording().
    
    bug:2644213
    
    Change-Id: I15269397defc25cbbcae16abc071c8349c123122
    frameworks/base: some camera-interface cleanup
    
    Methods getNumberOfVideoBuffers() and getVideoBuffer() as well as struct
    image_rect_struct are no longer used (instead, the necessary information is
    passed through ANativeWindow.)
    
    Change-Id: If4b11446fc9ccbde1f6b45bc70c0d0b8e54376eb
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Make sure that key frame is generated for timelapse video recording if there are at least two input video frames from camera source.
    
    This will fix the stop failure issue where we have to wait n * time_interval before a key frame can be received by the file writer, where
     o n is the actual number of buffers advertised by the video encoder
     o time_interval is the interval settings for timelapse video recording
       specifying the time distance between neighboring input video frames
    
    The fix includes two parts:
    o OMXCodec will not submit all n buffers at one time, but instead submit one input
      frame at one time if it become available.
    
    o Timelapse camera source made available the first two input frames and do not skip
      them so that the first compressed output frame data can be received regardless
      the specified time_interval
    
    bug - 3367659
    
    Change-Id: Ia68cc2cb0d71aa7dc54540e9ad82fae911ad530b
    Remove check if the target video resolution is not supported by CameraSource
    and clean up Camera is CameraSource could not created.
    
    bug - 3254411
    
    Change-Id: I43497c450e7007de5ce027e2912b1421119e8887
    Make camera source ready for handling meta-data video buffers.
    
    bug - 3042125
    
    Change-Id: I877b265c6bf8e0593121c8d5a95ae5599cdc6fb9
    0-memcpy video recording framework
    
    Part III: Move startRecording() call earlier, asking camera hal
    to allocate video buffers before CameraSource.start() is called.
    
    Change-Id: I3f1d7d5636ca2644fe52af61f297d48c6b1ce89d
    Move Camera specific logic out from StagefrightRecorder to CameraSource
    
    o updated comments and streamlined the logic in
      checkVideoSize() and checkFrameRate() as suggested
    
    Change-Id: I49d04ac7998d4a215997aa63555dfb6e814e38d3
    Adding support for timelapse capture using still camera's takepicture.
    Also moving entire implementation into a new class CameraSourceTimeLapse
    which inherits from CameraSource.
    
    For timelapse capture using still camera, we start a thread which runs a
    loop in which it calls Camera::takePicture() and then sleeps until the next
    frame should be captured.
    The function dataCallback() handles the callback from the camera with the
    raw image data. This function copies the data and creates an artificial
    timestamp corresponding to one frame time ahead of the last encoded frame's
    time stamp. It then calls dataCallbackTimestamp() of the base class which
    will think that it recieved the frame from a video camera and proceed as usual.
    
    For moving the implementation to the subclass CameraSourceTimeLapse, added a
    few virtual functions to CameraSource, which do the current thing for the base
    class, but specialized things for CameraSourceTimeLapse.
    E.g. startCameraRecording() in the base class just calls mCamera->startRecording(),
    while in CameraSourceTimeLapse it may start a thread for the still camera case.
    
    Change-Id: Ib787f24bd2e1f41681513f0257e1c4ca10a2b4de
    Adding timelapse capture from videocamera.
    
    Current implementation looks at the timestamps of all incoming frames in
    CameraSource::dataCallbackTimestamp().
    It drops all frames until enough time has elapsed to get the next time lapse frame.
    When enough time has passed to capture the next time lapse frame, the frame is no longer dropped
    and the timestamp of this frame is modified to be one frame time (1/framerate) ahead of the
    last encoded frame's time stamp.
    
    Change-Id: I82b9d5e96113dffa6901aac3b8a8ef999ffc1d0b
    Audio/video sync during recording (second part)
    
    Change-Id: Iba0b35f57fdeac7ee1da16899406bf4b957a2c8c
    Initial check-in for collecting stats from authoring engine at runtime
    
    Change-Id: I93a9d8bd260efc5e7fc135b726e3f1307c6df794
    Remove hard-coded pixel format for recording frames in CameraSource.
    Retrieve the pixel format from Camera HAL at runtime.
    
    Change-Id: I63f820f54c59c2019dfd195320b9928da3362536
    Avoid copying for input recording frames in CameraSource
    
    This is the part one.
    
    - Let CameraSource be a MediaBufferObserver. It releases the recording frame when the ref count of a MediaBuffer containing
      the recording frame drops to 0.
    
      This reduces the CPU load from 90+% down to 50-60%.
    
    Part two is related to the avoidance of copying the input video frames to the video encoder.
    However, we are not able to use OMX_UseBuffer directly. Still work on the second part.
    
    Change-Id: I906f1d054ae8bdcf82e1617f1fc120152f2eb2eb
    Avoid repeatedly allocating and freeing memory in CameraSource
    
    Change-Id: Ia3760820da0559e4e908dedae1f1df05f9a6a242
    Remove dummy surface in CameraSource
    
    bug - 2680919
    
    Change-Id: Ia0308cf57fd67058b4dd0e042b3ce97f13df475f
    Support audio and video track interleaving in the recorded mp4 file
    
    Change-Id: Ifa27eb23ee265f84fe06773b29b0eb2b0b075b60
    Use timestamp from camera driver for CameraSource
    
    Change-Id: I09ddec69997c43b8f17fdd21304c76cb4c5ab8cf
    Squashed commit of the following:
    
    commit 333057b355f8c260c549553b9a0634755c838b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 13 15:35:48 2009 -0800
    
        Some more tweaks to AVC encoding on sholes.
    
    commit 9981d0ee52ec5b8b0182aae733d1571e3ebb8390
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 12 16:36:57 2009 -0800
    
        Support for avc encoding, including sholes specific tweaks to pick the right colorspace for the camera to not require transcoding.
    
    commit 5ba0ebbbd4efca51f3ae1f60e2ca31e7d2cf136d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 11 09:50:03 2009 -0800
    
        Enable actual (camera) video-only recording using h.263 or mpeg4 encoding.
    
    commit 3fd59c3526a37fe7c696f4a978925d1831c09313
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 10 14:57:48 2009 -0800
    
        Allow switching between the PV recorder implementation and one supported by stagefright.
    
        This is controlled through the property "media.stagefright.enable-record".
    eclair snapshot
    Re-enable CameraSource.
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    Only initialize sniffers once, don't hold mutex while sniffing
    
    b/11482896
    
    Change-Id: Ie036554b4c9e7e8863cb07901d414ea457f1b2f1
    (cherry picked from commit 377fce69297a0e5b7c3b266a7602b17146785635)
    Add support for common encryption
    
    b/7465749
    
    Change-Id: I5403b74a5ae428ad28b382863a09daafc400b137
    Add support for common encryption
    
    b/7465749
    
    Change-Id: I5403b74a5ae428ad28b382863a09daafc400b137
    Add support for fragmented mp4 to MPEG4Extractor
    
    This makes FragmentedMP4Extractor obsolete. It will be removed in a
    separate change.
    
    Change-Id: Ida74c07ccf84983e20a1320ee24ffc7a5c083859
    Add support for fragmented mp4 to MPEG4Extractor
    
    This makes FragmentedMP4Extractor obsolete. It will be removed in a
    separate change.
    
    Change-Id: Ida74c07ccf84983e20a1320ee24ffc7a5c083859
    Separate sniffing from session initialization
    
    This avoid lengthy/duplicate sniffing for drm plugins when a decrypt session is opened
    
    o The change is backward compatibile in that no update is required
      for existing drm plug-ins if they do not plan to provide separate
      sniffer/extractor
    
    related-to-bug: 5725548
    
    Change-Id: I7fc4caf82d77472da4e2bc7b5d31060fb54fd84c
    Retry datasource fetches a few times before giving up (NuCachedSource2).
    
    Change-Id: I147fc18ef55bc89d2e2fee69b7869c45abbfdd6b
    related-to-bug: 3405354
    Do not call getEstimatedBandwidth if the streaming is not HTTP-based
    
    Change-Id: I4ab6c57e5b2b989676b8dfbb98402d10a5752261
    Stagefright DataSources now expose the underlying content mime type.
    
    Use that mime type to determine if we should do upfront buffering at the start of
    playback and don't for audio streams to ensure playback starts fairly instantly.
    
    Change-Id: If21e36d1b024f0e5c723911bceadaa2e0307ab42
    related-to-bug: 4090916
    Fix for bug 3477330
    This patch fixs a crash bug caused by using a NULL DecryptHandle pointer.
    Fix by using sp<DecryptHandle> instead.
    
    Change-Id: Icbd59858385e8256125a615a3c82656b25319d44
    - Do not use global DrmManagerClient
    - Release the DrmManagerClient and DecryptHandle in DataSource
    Fix for bug 3429811
    
    Change-Id: I549f72b75225751877eb0e630ce8098f8ec6316f
    64-bit file size/offset support for media framework
    
    Change-Id: I3452bc2c0f1d990cc67285df2fce1f9f86ff8e10
    Add getUri() for streaming
    
    Change-Id: I56e15e67cc5f4d0f41c9e2985404a4d89d757e7e
    DRM framework support:
    - add a sniffer for DRM files
    - add DRMSource and DRMExtractor for es_based DRM
    - add pread in FileSource.cpp for container_based DRM
    - add native DRM framework API calls in the player for
      DRM audio/video playback
    
    Change-Id: I4b9ef19165c9b4f44ff40eeededb9a665e78a90f
    HTTP Live content that are tagged as complete are now seekable.
    
    Change-Id: I9d0d2f009f883e5baf3e9de8c5c0aa05760e4bde
    related-to-bug: 2368598
    Allow sniffers to return a packet of opaque data that the corresponding extractor can take advantage of to not duplicate work already done sniffing. The mp3 extractor takes advantage of this now.
    
    Change-Id: Icb77ae3ee95a69c7da25b4d3b8696c0a2d33028a
    related-to-bug: 2948754
    Disable vorbis seek when streaming from localhost.
    
    Change-Id: Icda523ae1c89e26482f1c1767fe3a8b9222bb30f
    related-to-bug: 2654400
    Support the specification of additional HTTP headers in the creation of a DataSource.
    
    related-to-bug: 2393577
    Better support for HTTP streaming media content, fixes to the way HTTPDataSource streams the data, prefetcher implementation.
    
    related-to-bug: 2295438
    Squashed commit of the following:
    
    commit f81bb1dac5ef107bb0d7d5d756fb1ffa532ba2cc
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jan 11 14:55:56 2010 -0800
    
        Support for duration metadata, midi and ogg-vorbis files (in mediascanner)
    
    commit 0b1385a0dc156ce27985a1ff757c4c142fd7ec39
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jan 11 14:20:45 2010 -0800
    
        Refactor meta data logic. Container specific metadata is now also returned by the MediaExtractor.
    
    commit f9818dfac39c96e5fefe8c8295e60580692d5990
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jan 8 14:26:09 2010 -0800
    
        A first pass at supporting metadata through ID3 tags.
    
    commit 476e9e253633336ab790f943e2d6c0cd8991d76a
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jan 7 15:48:44 2010 -0800
    
        Initial checkin of ID3 (V2.2 and V2.3) parser for use in stagefright.
    
    related-to-bug: 2295456
    eclair snapshot
    New API to instantiate a MediaExtractor given a URI and optional MIME type.
    
    Also DataSources now must provide a method initCheck()
    and DataSource::reat_at has been renamed to readAt to conform to
    standard API naming guidelines.
    Squashed commit of the following:
    
    commit 5bb012f0065f7ffaaeb4f569d71f0e3a8d6b19c3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 10:40:08 2009 -0700
    
        An attempt at fixing export using the qcom encoders. More quirks.
    
    commit 0690e76bfa48118a68287ccf1bbfa82febaa620c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 09:08:28 2009 -0700
    
        Callbacks are now dispatched from a separate thread in OMX.
    
    commit c6571a039526df29b6343f9a1971dbc019088c61
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 15:42:25 2009 -0700
    
        Massive API changes throughout stagefright, smart pointers everywhere.
    
    commit 900612af6a0555664d9ba195112cd859491265f4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 13:33:12 2009 -0700
    
        OMXCodecs now properly shutdown.
    
    commit 96732f05e1b0603dcd1b11f16a23512592eeb4f5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 12:04:04 2009 -0700
    
        More work on JPEG decoding using the hardware OMX component.
    
    commit 63839a073ac393e3a130434ba467969053b694ad
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 12 13:13:31 2009 -0700
    
        An attempt to drive the JPEG decoder OMX node.
    
    commit 3ac2fe5ab2926eda81b2123610b2434c645294ff
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:38:21 2009 -0700
    
        Renamed StateMachine to OMXCodec and put it in its proper place.
    
    commit 247da75a96bf8881956413023dd49a84d5b4f5b2
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:06:19 2009 -0700
    
        Statemachine is now a full-fledged MediaSource.
    
    commit 045244f6771fa0b9b329495c953afda900a84b71
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 7 09:16:54 2009 -0700
    
        Properly setup the input format when exporting to AMR audio.
    
    commit 271b984cb32c5cd9e46e3f90ae121f334e4b8da9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 6 09:59:38 2009 -0700
    
        Added some code to test audio encoding to the OMX harness.
    
    commit 79af4748e4af33bd66d3fbac606e332a69741cf4
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 5 14:36:22 2009 -0700
    
        Merge the old OMXDecoder and the new, shiny, StateMachine code.
    
    commit 91cf5dd77a8762bc10a0b2ffce35e3bbeb262231
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 4 17:41:43 2009 -0700
    
        A new harness to test OMX node compliance (and quirks).
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    Integrating TI OMAP4 Video Decoder
    
    Added the video decoder component name to kDecoderInfo.
    Set the quirks for the video decoder.
    Add a new color format to OMX_IVCommon.h to denote TI OMAP4 NV12 color format.
    Added a color conversion routine [ from NV12 to RGB ] for thumbnail generation.
    
    Change-Id: I6b23c36441645ef65ec7406ba262d19f89cf64fd
    Signed-off-by: Devaraj Rangasamy <dev@ti.com>
    Signed-off-by: Sreenidhi Koti <sreenidhi@ti.com>
    Signed-off-by: Anu Sundararajan <sanuradha@ti.com>
    Colorconverter may not support some src/dst bitmap configurations.
    
    Let it return an appropriate error code instead of asserting.
    
    Change-Id: I7fe0dfa169e1cbdecb04c5fcbe8501e73362d05e
    related-to-bug: 3328212
    Colorconverter may not support some src/dst bitmap configurations.
    
    Let it return an appropriate error code instead of asserting.
    
    Change-Id: I801131610ad9801b935f7b700d61f9b62733fbca
    related-to-bug: 3328212
    Squashed commit of the following:
    
    commit 0870f7bdd10a7cd36087d723d1957d8e1b967ca7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Nov 22 12:57:04 2010 -0800
    
        set_surface_crop doesn't seem to work right yet, stop using it in the SoftwareRenderer.
    
        Change-Id: If0a24f78b7810a6cecaa82eb4f23d0f90c22cc42
    
    commit 4767b52bee3a54ae117a8708d6832276a44e6a6a
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Nov 22 11:14:57 2010 -0800
    
        info->mMediaBuffer may still be NULL at this point...
    
        Change-Id: I25a71569015b1bb87f1ea7efff7588958774426f
    
    commit 0cef79874e1f1ddb10b7402177a87d3cffc7de92
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Nov 22 10:55:12 2010 -0800
    
        QCOM's YVU420 color format conversion has now been tested.
    
        Change-Id: I7fef4b642a928af15d42f006f7cdc107d5ff1d67
    
    commit 84fe05a6c969ede0ce8a85a530e110afca07c7a7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Nov 22 09:59:50 2010 -0800
    
        Removed remaining traces of suspend/resume. Proper reporting of video dimensions based on cropping rectangle.
    
        Change-Id: Ib238b80cbc1f19e7d312f2422eb5e9ab6b06b1bc
    
    commit 50970cdc837c5c498bcf0cb61b436196ca9e2ef7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 16:11:06 2010 -0800
    
        Revamped Software Renderer respects the crop rectangle.
    
        Removed obsolete ADRENO support code.
    
        Change-Id: I984cbc8a99c4d97e09e7d1b1292099c88b9ae535
    
    commit 8abbc6a5608bff650f968540f24a2eab75f254ed
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 16:10:41 2010 -0800
    
        The metadata retriever now respects the crop rectangle while capturing a video frame.
    
        Change-Id: Id3377176060086d16717f62c77ce26fabe899050
    
    commit 2d42e4466609d304e88bd2cdd6eb7b297340cc21
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 16:09:50 2010 -0800
    
        Changed ColorConverter APIs to be more general.
    
        Clients can now refer to crop rectangles in both source and destination.
    
        Change-Id: Ief151d736818396d0389ec04e7df5650e3ad7c04
    
    commit 273184303d54a54febd3e9c3dd4df30507ea78b5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 15:04:06 2010 -0800
    
        The stagefright commandline tool now writes the extracted video frame to /sdcard/out.jpg
    
        Change-Id: Ieb2ab3fda7a7cd9294beccb8db0eed75096eeef4
    
    commit 2d43390328cadf4ba94c1c3c02e4fb30baa29690
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 14:36:55 2010 -0800
    
        The AVC software decoder now properly advertises the cropping rectangle.
    
        Change-Id: Idb7a8a7e2fde5740f0fc34b7e8c92eca2577104b
    
    commit 9a7ed23c2fac8ce19dce7a34a603acee945a89f6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 13:40:39 2010 -0800
    
        OMXCodec now signals a format change if the cropping rectangle changes.
    
        ...and puts the cropping info into its output format.
    
        Change-Id: I3ffbd8e877ba286fe06a82c536ef20d92548d2e2
    
    commit efe0323947029df1c502599ccc288c8d676dfd31
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 11:29:39 2010 -0800
    
        Stagefright's MetaData object now supports rectangle items.
    
        Change-Id: I5667bb5ee6622c76104b99fb57f60abb802a8504
    
    Change-Id: I27cb78f2c5e0353f95fdfc5cb53991949ed75b70
    Support for vanilla YUV420sp => RGB565 color conversion.
    
    Change-Id: I22e5b554909e169eaf153d1f25b636f6f04a1871
    Fixing the build.
    Split the ColorConverter off SoftwareRenderer, metadata support in stagefright.
    Separate sniffing from session initialization
    
    This avoid lengthy/duplicate sniffing for drm plugins when a decrypt session is opened
    
    o The change is backward compatibile in that no update is required
      for existing drm plug-ins if they do not plan to provide separate
      sniffer/extractor
    
    related-to-bug: 5725548
    
    Change-Id: I7fc4caf82d77472da4e2bc7b5d31060fb54fd84c
    Fix for bug 3477330
    This patch fixs a crash bug caused by using a NULL DecryptHandle pointer.
    Fix by using sp<DecryptHandle> instead.
    
    Change-Id: Icbd59858385e8256125a615a3c82656b25319d44
    - Do not use global DrmManagerClient
    - Release the DrmManagerClient and DecryptHandle in DataSource
    Fix for bug 3429811
    
    Change-Id: I549f72b75225751877eb0e630ce8098f8ec6316f
    Removed uncessary FILE structure pointer for I/O
    
    o also move the fd owner from caller to callee in the Writers
    
    Change-Id: I510ccfdd0fcc58f1777fea4ed1349fd251852c65
    64-bit file size/offset support for media framework
    
    Change-Id: I3452bc2c0f1d990cc67285df2fce1f9f86ff8e10
    DRM framework support:
    - add a sniffer for DRM files
    - add DRMSource and DRMExtractor for es_based DRM
    - add pread in FileSource.cpp for container_based DRM
    - add native DRM framework API calls in the player for
      DRM audio/video playback
    
    Change-Id: I4b9ef19165c9b4f44ff40eeededb9a665e78a90f
    Update FileSource to also accept a file descriptor and a range.
    eclair snapshot
    New API to instantiate a MediaExtractor given a URI and optional MIME type.
    
    Also DataSources now must provide a method initCheck()
    and DataSource::reat_at has been renamed to readAt to conform to
    standard API naming guidelines.
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    move libbinder's header files under includes/binder
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Added downsample()
    
    Added a downsample function which downsamples the source image
    starting at an offset and skipping every few pixels. Currently
    no low pass filtering is done, but it should be added later.
    
    Change-Id: Iec34092c536bfc661a15521e6a1ef2ef3f815c61
    Adding YUVImage and YUVCanvas.
    
    YUVImage is a container class to hold YUV data and provide
    various utilities, e.g. to set/get pixel values for different
    YUV formats, fast copying routines, etc.
    Currently supported YUV420 Planar and YUV420 Semi Planar.
    
    YUVCanvas holds a reference to a YUVImage on which it can do various
    drawing operations.
    
    Change-Id: I052a57b7fbc834efe1626914f76c04c091996cac
    Fix mono gapless playback for decoders that output stereo
    
    The old AAC decoder always outputs stereo, even for mono source material, so we
    need to use the number of channels of the output when calculating the number of
    bytes to skip, not the number of channels in the source.
    This makes OMXCodec skip the right amount of data, and prevents NuPlayer from
    writing half a frame and then asserting when the AudioSink doesn't accept it.
    Also move use of the SkipCutBuffer from NuPlayer to ACodec, so that it also
    works when using the new Java APIs, and make SkipCutBuffer derive from RefBase.
    b/774846
    
    Change-Id: I34df9fea3e6730617eae559afaa556f4085ef0a0
    Add ABuffer support to SkipCutBuffer
    
    Add support for ABuffer to SkipCutBuffer, and make it (re)allocate an
    appropriately sized buffer when needed, rather then relying on the
    caller to tell it ahead of time how big the buffers are going to be.
    
    Change-Id: I8b5c9ba5dd2fc13ef8870b7d4fe93a1bfdc7a626
    Support gapless playback for mp3 and m4a
    
    Gapless playback for appropriately tagged mp3 and m4a files.
    Currently this is implemented in OMXCodec, which most players
    use, but should be easy to support in other players as well by
    using the SkipCutBuffer utility class.
    
    Change-Id: I748c669adc1cfbe5ee9a7dea2fad945d48882551
    ALooper::GetNowUs() now relies on systemTime instead of gettimeofday.
    
    Change-Id: Ia31eb0940b02581327a8bf51af6df135f9ab6de3
    related-to-bug: 7266324
    ALooper::GetNowUs() now relies on systemTime instead of gettimeofday.
    
    Change-Id: Ia31eb0940b02581327a8bf51af6df135f9ab6de3
    related-to-bug: 7266324
    eclair snapshot
    Fixes to make libstagefright build for the simulator.
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    move libbinder's header files under includes/binder
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add Fraunhofer AAC encoder with AAC-ELD support.
    
    Change-Id: I6cd499d257d72f50a5b508bed97796a591a51506
    Don't call virtual functions in destructors for the writer classes
    
    Have not found any concrete bugs related to these calls yet, but we should avoid
    calling virtual functions in destructors, regardless.
    
    Change-Id: I2d47b79d3fb2d29f418619bee83aa147d232a5d4
    Initial check-in for AACWriter
    
    Change-Id: Ia21ca39a404484b2dda25c6101780d2ff11c4623
    
    related-to-bug: 4211046
    Removed uncessary FILE structure pointer for I/O
    
    o also move the fd owner from caller to callee in the Writers
    
    Change-Id: I510ccfdd0fcc58f1777fea4ed1349fd251852c65
    64-bit file size/offset support for media framework
    
    Change-Id: I3452bc2c0f1d990cc67285df2fce1f9f86ff8e10
    Make MediaWriter stop and pause return errors if necessary
    
    o Make the API consistent with SF framework, which the MediaSource
      provides a return status for stop
    
    o Also, helps to convey errors that occurred right when a
      premature stop() is called, leading to a potentially
      mal-formed output file.
    
    Change-Id: I52a932345f38570fdf8ea04d67d73dd94ccd30ef
    Enable passing parameters to the MediaWriter at runtime (at start() call).
    
    - estimate the moov box size for mp4 file writer based on the file
      size/duration limit and target bit rate.
    - can switch to use 64 bit file offset at runtime
    
    rebased
    
    Change-Id: Ibbe1f57e91ab2605820d5d96e8048d11e5559c53
    Initial checkin for pause and resume control
    
    Change-Id: Ibdcf7bea5fb66baa81878704ba4091dfcfe382ee
    Handle recording file size and/or duration limit
    
    Change-Id: Ib9ed1f3ebd8fef550cc130a7ef11f2905fa9aedc
    Remove unnecessary lock from AMRWriter.
    
    Change-Id: Ia02966d936dd8cbb31e92051578a3fa816885710
    Support for audio recording into AMR NB/WB files as well as audio tracks in MPEG4 files.
    
    related-to-bug: 2295449
    Initial checkin of AudioSource and AMRWriter, a pair of classes supporting pure-audio recording in stagefright.
    
    related-to-bug: 2295449
    Update FileSource to also accept a file descriptor and a range.
    eclair snapshot
    New API to instantiate a MediaExtractor given a URI and optional MIME type.
    
    Also DataSources now must provide a method initCheck()
    and DataSource::reat_at has been renamed to readAt to conform to
    standard API naming guidelines.
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    move libbinder's header files under includes/binder
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    const correctness, validPixel test.
    
    - made width(), height() const member functions.
    - added validPixel() which returns true if pixel is in the allowed range.
    - now testing validPixel in get/setPixelValue
    
    Change-Id: I1dee5060bd4f8dcbdcd542ec4647ea328f0185c3
    Adding YUVImage and YUVCanvas.
    
    YUVImage is a container class to hold YUV data and provide
    various utilities, e.g. to set/get pixel values for different
    YUV formats, fast copying routines, etc.
    Currently supported YUV420 Planar and YUV420 Semi Planar.
    
    YUVCanvas holds a reference to a YUVImage on which it can do various
    drawing operations.
    
    Change-Id: I052a57b7fbc834efe1626914f76c04c091996cac
    Adding SurfaceEncoder for encoding FilterFrames
    
    Adding SurfaceEncoder which can be used to encode
    custom frame data. In a sense, it is reverse
    of what SurfaceTexture does.
    
    SurfaceEncoder takes in frames from a native window and
    passes them to an encoder, thus acting like a MediaSource.
    It uses GRAlloc buffers underneath for passing data.
    The client side sets the geometry, format in the beginning,
    which cannot be changed while the recording is going on.
    
    Currently, there is no common pixel format that both
    GRAlloc and HAL understand.
    Also, the encoder cannot encode using the data from the GRAlloc
    buffers.
    
    The SurfaceEncoder_test examines mainly the buffer passage
    since true encoding cannot be done at this point.
    SimpleDummyRecorder 'reads' the frames in the same thread
    as the start(), whereas DummyRecorder 'reads' in a separate
    thread much like the MPEG4Writer. The test with DummyRecorder
    is much closer to the real encoding implementation.
    
    Related to bug id: 4529323
    
    Change-Id: I58ec19a150f8fe4d6195196dc44f55002b46c7c8
    Support a "secure input buffer" mode for use by Widevine DRM in OMXCodec.
    
    Change-Id: Ie03b285265099dbac9b12f3f41d9ad758d0b50ad
    Revert "Allows the authoring engine to skip frame."
    
    o Skipping frames could lead to a lot of issues such as I frames is lost etc.
      It is not being used anyway.
    
    This reverts commit 53d4e0d58e2d5c18f6e026c705af833b9bdd7aba.
    
    Conflicts:
    
            media/libstagefright/AudioSource.cpp
            media/libstagefright/CameraSource.cpp
    
    Change-Id: I3abba1647de48db25bdc369066eb2a7ae4dedec2
    Allows the authoring engine to skip frame.
    
    This is 1st part of the work to allow audio and video resync if
    we found out that audio and video are out of sync during authoring
    
    - also fixed a problem in AACEncoder::read() where the buffer acquired
      from the buffer group does not release when error out at
      reading from source.
    
    Change-Id: I8a2740097fcfdf85e6178869afeb9f3687a99118
    Support finer seek control on MediaSources.
    
    related-to-bug: 2858448
    
    Change-Id: Ifb4b13b990fd5889113e47e2c62249ac43391fa1
    Support "pausing" of MediaSources with the effect that they no longer pull on their upstream source until a subsequent read-with-seek.
    
    Change-Id: Ie4153a10ab36c1135f5fcfb572958129d886bcc3
    eclair snapshot
    OMXCodec now notifies the reader of changes in the output format by returning a special result/error code.
    Squashed commit of the following:
    
    commit 5bb012f0065f7ffaaeb4f569d71f0e3a8d6b19c3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 10:40:08 2009 -0700
    
        An attempt at fixing export using the qcom encoders. More quirks.
    
    commit 0690e76bfa48118a68287ccf1bbfa82febaa620c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 09:08:28 2009 -0700
    
        Callbacks are now dispatched from a separate thread in OMX.
    
    commit c6571a039526df29b6343f9a1971dbc019088c61
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 15:42:25 2009 -0700
    
        Massive API changes throughout stagefright, smart pointers everywhere.
    
    commit 900612af6a0555664d9ba195112cd859491265f4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 13:33:12 2009 -0700
    
        OMXCodecs now properly shutdown.
    
    commit 96732f05e1b0603dcd1b11f16a23512592eeb4f5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 12:04:04 2009 -0700
    
        More work on JPEG decoding using the hardware OMX component.
    
    commit 63839a073ac393e3a130434ba467969053b694ad
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 12 13:13:31 2009 -0700
    
        An attempt to drive the JPEG decoder OMX node.
    
    commit 3ac2fe5ab2926eda81b2123610b2434c645294ff
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:38:21 2009 -0700
    
        Renamed StateMachine to OMXCodec and put it in its proper place.
    
    commit 247da75a96bf8881956413023dd49a84d5b4f5b2
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:06:19 2009 -0700
    
        Statemachine is now a full-fledged MediaSource.
    
    commit 045244f6771fa0b9b329495c953afda900a84b71
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 7 09:16:54 2009 -0700
    
        Properly setup the input format when exporting to AMR audio.
    
    commit 271b984cb32c5cd9e46e3f90ae121f334e4b8da9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 6 09:59:38 2009 -0700
    
        Added some code to test audio encoding to the OMX harness.
    
    commit 79af4748e4af33bd66d3fbac606e332a69741cf4
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 5 14:36:22 2009 -0700
    
        Merge the old OMXDecoder and the new, shiny, StateMachine code.
    
    commit 91cf5dd77a8762bc10a0b2ffce35e3bbeb262231
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 4 17:41:43 2009 -0700
    
        A new harness to test OMX node compliance (and quirks).
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    Untangle MediaScanner error handling.
    Bug: 5056917
    
    Change-Id: I1a7a73579e3ba4e9709459329fc1901a28b0f4b1
    StagefrightMediaScanner: Close metadata retriever after we are done scanning
    
    This prevents the mediaserver from leaking a file descriptor after
    the media scanner runs
    
    BUG: 3373546
    
    Change-Id: I82a8bae82306de3da56a5c7da5b03ecf106a4efc
    Signed-off-by: Mike Lockwood <lockwood@android.com>
    Instead of instantiating StagefrightMetadataRetriever directly, instantiate a MediaMetadataRetriever which will do-the-right-thing(tm) even for .wma/.wmv/.asf files.
    
    Change-Id: Ibda4b5268514934f14a3d49a564902bc670f4384
    related-to-bug: 2074137
    Reorganize some of the stagefright implementation related to metadata.
    Refactor MediaScanner. Some steps on the way towards being able to build the tree without OpenCore.
    eclair snapshot
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    WA: Queue extra buffers on output port during reconfig if input EOS-ed
    
    Some codecs may return input buffers before having them processed.
    This causes a halt if we already signaled an EOS on the input
    port.  For now keep submitting output meta buffers one at a time if
    the input EOS-ed, but the output not yet.
    
    Normally, we submit an output buffer for each input buffer that is
    with the component (waiting to be processed).
    
    Change-Id: I8a1251bfb504f40f1e4085a1e220bf9a4d0b05d9
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Bug: 11433909
    configure bitrate and bitrate mode at encoder initialization for VP8/9
    
    Change-Id: I0389264db4102cabb0c6fcb4ca223d85cc9e86fb
    related-to-bug: 11536167
    You can now opt-in to having the video decoder push blank buffers to the
    
    surface on the transition from executing->idle by specifying the key
    "push-blank-buffers-on-shutdown" with a value of 1 in the call to configure.
    
    Change-Id: I1155fccf89f18e717728c985e590651597595515
    Optionally repeat the previously submitted frame to the encoder
    
    if no new frame has been delivered by surface flinger within the timeout
    interval.
    
    Change-Id: I282f1b726dfe5646b178d7858d6f5d4f5a264fde
    stagefright: support for video decoder metadata mode
    
    Change-Id: Id360f29236798163f9f3a82135f601083a8a5058
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Bug: 7093648
    stagefright: synchronously change nativewindow crop
    
    Only change the nativewindow crop before queuing frames
    with the new crop.
    
    Change-Id: Icd8a84c82e66a8be3d6bc1675c777b1de8dc39b9
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Bug: 9395753
    wifi-display: add support for metadata mode on encoder output
    
    pass buffer_handle_t from encoder output to HDCP encryptor input
    
    Bug: 8968123
    
    Change-Id: Iea8007ce568641e213fd2e3cf6947a6f7a95746c
    A flush of a video decoder connected to a native window must reclaim
    
    output buffers already queued for rendering before considering a flush
    completed. Otherwise the decoder may not have enough output buffers to
    continue decoding after the discontinuity and we'll never dequeue more
    from the native window.
    
    Change-Id: I42e275dc336568e180081c6d7c0dc05fc9637c79
    related-to-bug: 8578467
    A flush of a video decoder connected to a native window must reclaim
    
    output buffers already queued for rendering before considering a flush
    completed. Otherwise the decoder may not have enough output buffers to
    continue decoding after the discontinuity and we'll never dequeue more
    from the native window.
    
    Change-Id: I42e275dc336568e180081c6d7c0dc05fc9637c79
    related-to-bug: 8578467
    ACodec now signals an error if the mediaserver died while it is in
    
    anything other than "uninitialized" state.
    
    Change-Id: Id133d897ac65b455b34e5de17ff9c39b47285630
    related-to-bug: 8397711
    ACodec now signals an error if the mediaserver died while it is in
    
    anything other than "uninitialized" state.
    
    Change-Id: Id133d897ac65b455b34e5de17ff9c39b47285630
    related-to-bug: 8397711
    Correct MediaCodec + Surface behavior
    
    Assorted tweaks:
    - Allow signalEndOfInputStream() before ACodec is in Executing
      state (added message to two more states).
    - Return an error if signalEndOfInputStream() is called a second
      time on the same stream.
    - Require AndroidOpaque color format in createInputSurface().
    - Disallow dequeueInputBuffer() after an input surface has been
      created (boolean flag in MediaCodec tracks it).
    - Discard input surface when encoder is re-configure()ed (drop
      OMXNodeInstance's ref when we go back to Loaded).
    
    Bug 7991062
    
    Change-Id: Iff30f3036e14eb5a2f6536910dcf11aba33031ee
    Correct MediaCodec + Surface behavior
    
    Assorted tweaks:
    - Allow signalEndOfInputStream() before ACodec is in Executing
      state (added message to two more states).
    - Return an error if signalEndOfInputStream() is called a second
      time on the same stream.
    - Require AndroidOpaque color format in createInputSurface().
    - Disallow dequeueInputBuffer() after an input surface has been
      created (boolean flag in MediaCodec tracks it).
    - Discard input surface when encoder is re-configure()ed (drop
      OMXNodeInstance's ref when we go back to Loaded).
    
    Bug 7991062
    
    Change-Id: Iff30f3036e14eb5a2f6536910dcf11aba33031ee
    Implement Surface input to MediaCodec.
    
    Also, renamed a CHECK_INTERFACE macro that was clashing with the
    Binder version.
    
    Bug 7991062
    
    Change-Id: If5e6ed0a06d9f67975497676e4b05abe3aa3d6c0
    Implement Surface input to MediaCodec.
    
    Also, renamed a CHECK_INTERFACE macro that was clashing with the
    Binder version.
    
    Bug 7991062
    
    Change-Id: If5e6ed0a06d9f67975497676e4b05abe3aa3d6c0
    Allow for dynamic reconfiguration of the video bitrate used
    
    to encode video while running as a wfd source.
    
    Change-Id: I44f7b2350c88fc5807047c61bfe594ef8fa79275
    Allow for dynamic reconfiguration of the video bitrate used
    
    to encode video while running as a wfd source.
    
    Change-Id: I44f7b2350c88fc5807047c61bfe594ef8fa79275
    Added optional intra macroblock refresh support for encoding
    
    o related-to-bug: 7524791
    
    Change-Id: I95ac4ee925e2dbeb00b3cfb2e29c611698c5cc9f
    Added optional intra macroblock refresh support for encoding
    
    o related-to-bug: 7524791
    
    Change-Id: I95ac4ee925e2dbeb00b3cfb2e29c611698c5cc9f
    Make video encoders' bitrate mode (constant, variable, ...) configurable
    
    through the desired output format. Configure the video encoder to use
    constant bitrate mode for WFD.
    
    Change-Id: Id7bd619598153c13448a9c5acd69d80f8a01f333
    related-to-bug: 7459597
    Make video encoders' bitrate mode (constant, variable, ...) configurable
    
    through the desired output format. Configure the video encoder to use
    constant bitrate mode for WFD.
    
    Change-Id: Id7bd619598153c13448a9c5acd69d80f8a01f333
    related-to-bug: 7459597
    Support IDR requests in wifi display, MediaCodec and ACodec.
    
    Change-Id: I596cf8dd61b63465437f78413186fad2be287244
    Support IDR requests in wifi display, MediaCodec and ACodec.
    
    Change-Id: I596cf8dd61b63465437f78413186fad2be287244
    Initial checkin of support for acting as a wifi display source
    
    Change-Id: I08f17efa0c7d007e17408feb7d4fbef0a19f531a
    Initial checkin of support for acting as a wifi display source
    
    Change-Id: I08f17efa0c7d007e17408feb7d4fbef0a19f531a
    Tell surface flinger that we want to protect output buffers from being
    
    sent to HDMI (without HDCP) and push a few black frames on IDLE->LOADED
    similar to OMXCodec's behaviour.
    
    Change-Id: Iea6055a115151ca881220a70a31af6ade2c58cb3
    related-to-bug: 6537187
    Increase AAC software decoder's buffer count. Refactor how clients
    
    of ACodec get notified about codec buffers and buffer ids.
    
    Change-Id: I962f873262dae7aa7b43f5f68a6d60268282f91e
    related-to-bug: 6478823
    OMX IL wrapper for FLAC encoder
    
    Add wrapper around libFLAC for FLAC encoding in OpenMAX IL.
    
    Declare FLAC encoder in OMX component roles.
    
    Bug 5525503
    
    Change-Id: I19bbce41c216870669d09365693f4ea89f8bc0f7
    Respect channel mask in ACodec and NuPlayer.
    
    Refactor conversion from MetaData into AMessage while we're at it.
    
    Change-Id: I5479129836ea4316e8de28cf1b472bf19e3ac4ab
    related-to-bug: 6439076
    Fix mono gapless playback for decoders that output stereo
    
    The old AAC decoder always outputs stereo, even for mono source material, so we
    need to use the number of channels of the output when calculating the number of
    bytes to skip, not the number of channels in the source.
    This makes OMXCodec skip the right amount of data, and prevents NuPlayer from
    writing half a frame and then asserting when the AudioSink doesn't accept it.
    Also move use of the SkipCutBuffer from NuPlayer to ACodec, so that it also
    works when using the new Java APIs, and make SkipCutBuffer derive from RefBase.
    b/774846
    
    Change-Id: I34df9fea3e6730617eae559afaa556f4085ef0a0
    Add Fraunhofer AAC encoder with AAC-ELD support.
    
    Change-Id: I6cd499d257d72f50a5b508bed97796a591a51506
    Provisional support for secure decryption of media streams.
    
    Change-Id: Ib3982a9c960bfdb0cb7e1b174440b141b194cfbe
    Instead of hardcoding OMX component names in our code, support
    
    a config file instead.
    
    Change-Id: I5835903ab9f1c4a22ccc605ca99ed966767adf57
    Separate the notion of "stop" from that of "release", i.e.
    
    stop - means transition back to LOADED state and keeping the component
    instance allocated.
    
    release - means we get rid of the component completely.
    
    Change-Id: I40ad01ce70821faaad43f57999249904f9144924
    Implementation of a java media codec interface and associated tools.
    
    Change-Id: I13e54062d4de584355c5d82bb027a68aeaf2923b
    If an error occurs that prevents us from reallocating buffers during a format change
    
    we need to transition to executing state anyway to be able to properly flush/shutdown
    in the future.
    
    Change-Id: Ie48bc09ea31942009ae3a5a45aabc9ffad9fb91f
    related-to-bug: 5655016
    Support AMR, G.711 and vorbis audio in ACodec and friends.
    
    Change-Id: I08c03219bf2d60fc5c6e89957bd4b4c615570983
    Propagate error signalled by the source all the way to the output EOS notification.
    
    Change-Id: I30e959a6d669f09745c59fbdebee08f869511cf7
    related-to-bug: 5372901
    Turn an another assertion into a runtime error in ACodec's implementation
    
    Change-Id: I6779b29f200b90d088273ab3204724ef3d8d59bd
    related-to-bug: 5284760
    Error handling in ACodec and Nuplayer.
    
    Codec errors (and codec not found errors) now trigger a controlled shutdown
    of playback and signal errors to the MediaPlayer client.
    
    Change-Id: I2ee23ff2a1422d05a1a21e50ecb87d7c7ab958cc
    Fix missing AOSP copyright headers for a bunch of media framework files
    
    bug - 4119349
    
    Change-Id: If5924e16a5f596d5d73d9beb66eaf5ac9a6f0e50
    Improvements/fixes to ACodec.
    
    - Make sure ACodec reverts its state when it's shutdown
    - Defer "resume" to after handling the OutputPortSettingsChange
    
    - If the OMX_EventPortSettingsChanged event comes in while we're flushing, defer it
      and make sure the output port can be disabled by deleting all buffers not already
      owned by the component.
    
    Change-Id: I1f8cdffa71237b57d4275a48b834647a7b263e8b
    NuPlayer now properly sends MEDIA_SET_VIDEOSIZE notifications.
    
    Change-Id: I99b4223ad6ecfd8839a3c0e737fef3165565d76d
    related-to-bug: 3336496
    Properly announce decoder output format changes, make sure AMessage::dup does.
    
    Change-Id: Ia77f6b6d5e5c5055583740dfe876b8a3c22be9b6
    Initial support for a true streaming player for mpeg2 transport streams.
    
    Change-Id: I153eec439d260a5524b21270e16d36940ec3161a
    Add support for common encryption
    
    b/7465749
    
    Change-Id: I5403b74a5ae428ad28b382863a09daafc400b137
    Add support for common encryption
    
    b/7465749
    
    Change-Id: I5403b74a5ae428ad28b382863a09daafc400b137
    Allow directly setting a DataSource for NuMediaExtractor
    
    This adds NuMediaExtractor::setDataSource(const sp<DataSource> &source),
    which some new code under frameworks/av will use to let applications
    provide a custom data source for extractors.
    
    Change-Id: I8fb743441d04b4eadbda3c2d76858c3d60e2a3b2
    NuMediaExtractor API to unselect tracks and finer control over seeking.
    
    Change-Id: I44d5a2b01d34b771bb0ff48b12829e33314c2374
    related-to-bug: 6276111
    Make sure NuMediaExtractor is thread safe.
    
    Change-Id: If261c4d87d5569a0d7cfd75afe311803a6ce0109
    Add the ability to query the amount of cached data to NuMediaExtractor.
    
    Change-Id: I0966270a2bd36698330beaa03f47d02fc6a40c44
    related-to-bug: 6364341
    Some refactoring and cleanup of now obsolete crypto fields.
    
    codec commandline tool no longer supports decryption.
    
    Change-Id: I7b10be6524631b20ac5d361d47949b00addf4a93
    Change NuMediaExtractor's API to support different kinds of data sources.
    
    Change-Id: I080aa2ce28300a72a85751509334dbdc491936c6
    related-to-bug: 6276111
    Provisional support for secure decryption of media streams.
    
    Change-Id: Ib3982a9c960bfdb0cb7e1b174440b141b194cfbe
    Implementation of a java media codec interface and associated tools.
    
    Change-Id: I13e54062d4de584355c5d82bb027a68aeaf2923b
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Implementation of a java media codec interface and associated tools.
    
    Change-Id: I13e54062d4de584355c5d82bb027a68aeaf2923b
    Bug 3438258 Add SurfaceTexture as MediaPlayer sink
    
    This change enables the use of a SurfaceTexture in place of a Surface
    as the video sink for an android.media.MediaPlayer. The new API
    MediaPlayer.setTexture is currently hidden.
    
    This includes:
     - New Java and C++ interfaces
     - C++ plumbing and implementation (JNI, Binder)
     - Stagefright AwesomePlayer and NuPlayer use ANativeWindow
       (either Surface or SurfaceTextureClient)
    
    Change-Id: I2b568bee143d9eaf3dfc6cc4533c1bebbd5afc51
    eclair snapshot
    Refactored "stagefright" commandline app, split off JPEGSource.
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    MediaMuxer: Hook up setLocation method
    
    This method is needed when mediamuxer is used for camera video recording.
    
    Bug: 10594784
    Change-Id: I9bd006a07e5e2ac7019849e3f4f7cf7b8356d669
    MediaMuxer: Remove SAMPLE_FLAG_SYNC flag
    
    MediaMuxer.writeSampleData() uses MediaCodec.BufferInfo
    objects to specify the flags, so use directly the MediaCodec
    flags.  This is more intuitive and avoids users of the
    MediaMuxer API having to create translations between
    MediaMuxer's and MediaCodec's flag constants.
    
    Change-Id: I18e12a6839ffb2c63da62516a4dc4c94e8bb3d17
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Bug: 9169479
    Add the presentation rotation support
    
    bug:7991013
    
    Change-Id: I10cb034b432876c724baa4974efcb3d67b8a99b6
    Add the presentation rotation support
    
    bug:7991013
    
    Change-Id: I10cb034b432876c724baa4974efcb3d67b8a99b6
    Clean up the native code to match Java update
    
    1. Add flags to match the java side change.
    2. Update the interface.
    
    bug:7991013
    
    Change-Id: I8ffe84c466b2a68e2e1e48b35b78db9e44640265
    Clean up the native code to match Java update
    
    1. Add flags to match the java side change.
    2. Update the interface.
    
    bug:7991013
    
    Change-Id: I8ffe84c466b2a68e2e1e48b35b78db9e44640265
    Add the native MediaMuxer support.
    
    MediaAdapter: a helper class to convert the push model to pull model.
    MediaMuxer: the real muxer.
    
    bug:7991013
    
    Change-Id: If3b79551bc6332bc81f5c2740885e579a5c4abf9
    Add the native MediaMuxer support.
    
    MediaAdapter: a helper class to convert the push model to pull model.
    MediaMuxer: the real muxer.
    
    bug:7991013
    
    Change-Id: If3b79551bc6332bc81f5c2740885e579a5c4abf9
    Fix of uninitialized mIsDrm variable.
    
    The mIsDrm is a bool that isn't initialized.
    This causes it to be true in most default cases.
    
    Change-Id: I41b534514bf6a3ca88a9f0994b814d55fcd7453b
    Fix of uninitialized mIsDrm variable.
    
    The mIsDrm is a bool that isn't initialized.
    This causes it to be true in most default cases.
    
    Change-Id: I41b534514bf6a3ca88a9f0994b814d55fcd7453b
    Separate sniffing from session initialization
    
    This avoid lengthy/duplicate sniffing for drm plugins when a decrypt session is opened
    
    o The change is backward compatibile in that no update is required
      for existing drm plug-ins if they do not plan to provide separate
      sniffer/extractor
    
    related-to-bug: 5725548
    
    Change-Id: I7fc4caf82d77472da4e2bc7b5d31060fb54fd84c
    - Retrieve is_drm in MediaMetadataRetriever.
    - Add one more column in MediaStore to indicate whether a
      media file is drm-protected.
    - Remove old DRM code from Ringtone
    - Use the new DRM code in RingtoneManager
    
    Change-Id: I1311fd1c04841c2cd47df6c901589966cf55a692
    DRM framework support:
    - add a sniffer for DRM files
    - add DRMSource and DRMExtractor for es_based DRM
    - add pread in FileSource.cpp for container_based DRM
    - add native DRM framework API calls in the player for
      DRM audio/video playback
    
    Change-Id: I4b9ef19165c9b4f44ff40eeededb9a665e78a90f
    Disable 10secs forward/backward seeking for rtsp as seek is a very expensive operation there. Decouple the 10sec forward/backward button functionality from seekbar functionality.
    
    Change-Id: I016e79b688774f8ee91ac53216197b5fb9cb41b2
    related-to-bug: 3073955
    Disable vorbis seek when streaming from localhost.
    
    Change-Id: Icda523ae1c89e26482f1c1767fe3a8b9222bb30f
    related-to-bug: 2654400
    Support the specification of additional HTTP headers in the creation of a DataSource.
    
    related-to-bug: 2393577
    Squashed commit of the following:
    
    commit f81bb1dac5ef107bb0d7d5d756fb1ffa532ba2cc
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jan 11 14:55:56 2010 -0800
    
        Support for duration metadata, midi and ogg-vorbis files (in mediascanner)
    
    commit 0b1385a0dc156ce27985a1ff757c4c142fd7ec39
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jan 11 14:20:45 2010 -0800
    
        Refactor meta data logic. Container specific metadata is now also returned by the MediaExtractor.
    
    commit f9818dfac39c96e5fefe8c8295e60580692d5990
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jan 8 14:26:09 2010 -0800
    
        A first pass at supporting metadata through ID3 tags.
    
    commit 476e9e253633336ab790f943e2d6c0cd8991d76a
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jan 7 15:48:44 2010 -0800
    
        Initial checkin of ID3 (V2.2 and V2.3) parser for use in stagefright.
    
    related-to-bug: 2295456
    eclair snapshot
    New API to instantiate a MediaExtractor given a URI and optional MIME type.
    
    Also DataSources now must provide a method initCheck()
    and DataSource::reat_at has been renamed to readAt to conform to
    standard API naming guidelines.
    Extract video thumbnails from the largest sync sample among the first 20.
    
    Also fixes OMXCodec seek behaviour on the very first call to OMXCodec::read()
    Squashed commit of the following:
    
    commit 5bb012f0065f7ffaaeb4f569d71f0e3a8d6b19c3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 10:40:08 2009 -0700
    
        An attempt at fixing export using the qcom encoders. More quirks.
    
    commit 0690e76bfa48118a68287ccf1bbfa82febaa620c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 09:08:28 2009 -0700
    
        Callbacks are now dispatched from a separate thread in OMX.
    
    commit c6571a039526df29b6343f9a1971dbc019088c61
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 15:42:25 2009 -0700
    
        Massive API changes throughout stagefright, smart pointers everywhere.
    
    commit 900612af6a0555664d9ba195112cd859491265f4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 13:33:12 2009 -0700
    
        OMXCodecs now properly shutdown.
    
    commit 96732f05e1b0603dcd1b11f16a23512592eeb4f5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 12:04:04 2009 -0700
    
        More work on JPEG decoding using the hardware OMX component.
    
    commit 63839a073ac393e3a130434ba467969053b694ad
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 12 13:13:31 2009 -0700
    
        An attempt to drive the JPEG decoder OMX node.
    
    commit 3ac2fe5ab2926eda81b2123610b2434c645294ff
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:38:21 2009 -0700
    
        Renamed StateMachine to OMXCodec and put it in its proper place.
    
    commit 247da75a96bf8881956413023dd49a84d5b4f5b2
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:06:19 2009 -0700
    
        Statemachine is now a full-fledged MediaSource.
    
    commit 045244f6771fa0b9b329495c953afda900a84b71
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 7 09:16:54 2009 -0700
    
        Properly setup the input format when exporting to AMR audio.
    
    commit 271b984cb32c5cd9e46e3f90ae121f334e4b8da9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 6 09:59:38 2009 -0700
    
        Added some code to test audio encoding to the OMX harness.
    
    commit 79af4748e4af33bd66d3fbac606e332a69741cf4
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 5 14:36:22 2009 -0700
    
        Merge the old OMXDecoder and the new, shiny, StateMachine code.
    
    commit 91cf5dd77a8762bc10a0b2ffce35e3bbeb262231
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 4 17:41:43 2009 -0700
    
        A new harness to test OMX node compliance (and quirks).
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    Adds a drm resource busy error, removes some deprecated errors
    
    Change-Id: Id719fb6df9c9d955ac24803082d08f2a4a5bc766
    related-to-bug: 9695816
    Add new error codes for DRM to improve error reporting
    
    bug: 8621516
    Change-Id: I9a06c9ea5bfde924906d3876a417b9451b6abde8
    Add new error codes for DRM to improve error reporting
    
    bug: 8621516
    Change-Id: I9a06c9ea5bfde924906d3876a417b9451b6abde8
    Allow propagation of error information and description from the CryptoPlugin to
    
    the higher layers.
    
    Change-Id: I9f434ad55cdf575803c208bedf47b607baff2330
    related-to-bug: 6365261
    frameworks/av/media portion of removing YouTube specific error codes
    
    Change-Id: Id0d84d3aaaf340cd5287611c9dc7cb8d11466772
    related-to-bug: 5883949
    Implementation of a java media codec interface and associated tools.
    
    Change-Id: I13e54062d4de584355c5d82bb027a68aeaf2923b
    DO NOT MERGE
    For bug 4422428
    Squashed commit of the following:
    
    commit ae2e13783db2284f40d3891e70e152dab941edfc
    Author: Gloria Wang <gwang@google.com>
    Date:   Fri May 13 11:43:11 2011 -0700
    
        Add one more DRM error code. For bug 4422428.
    
        Change-Id: I4e333f474c96c0e0f162dde4013ad32b336bebd6
    
    commit 0f88249d0cb5221f622cf1d1ac3cdccefb8f58a2
    Author: Gloria Wang <gwang@google.com>
    Date:   Fri Apr 29 10:44:46 2011 -0700
    
        Add DRM errors in the DRM frameworks to MediaErrors also.
        For bug 4350156.
    
        Change-Id: Ib5711ec642178a49203a448b7f5114e675d49394
    
    Change-Id: Ia02de462159400eef8c015d28531bf1dd6796a18
    Add one more DRM error code. For bug 4422428.
    
    Change-Id: I4e333f474c96c0e0f162dde4013ad32b336bebd6
    Add DRM errors in the DRM frameworks to MediaErrors also.
    For bug 4350156.
    
    Change-Id: Ib5711ec642178a49203a448b7f5114e675d49394
    Add heartbeat error codes into MediaErrors.h
    
    related-to-bug: 4322415
    
    Change-Id: I78137c61e3a8ce9afcb9fb38cb77a83561b9b72d
    DRM framework support:
    - add a sniffer for DRM files
    - add DRMSource and DRMExtractor for es_based DRM
    - add pread in FileSource.cpp for container_based DRM
    - add native DRM framework API calls in the player for
      DRM audio/video playback
    
    Change-Id: I4b9ef19165c9b4f44ff40eeededb9a665e78a90f
    Work to support switching transport streams mid-stream and signalling discontinuities to the decoder.
    
    Change-Id: I7150e5e7342e1117c524856b204aadcb763e06ed
    related-to-bug: 2368598
    eclair snapshot
    OMXCodec now notifies the reader of changes in the output format by returning a special result/error code.
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    Add the native MediaMuxer support.
    
    MediaAdapter: a helper class to convert the push model to pull model.
    MediaMuxer: the real muxer.
    
    bug:7991013
    
    Change-Id: If3b79551bc6332bc81f5c2740885e579a5c4abf9
    Add the native MediaMuxer support.
    
    MediaAdapter: a helper class to convert the push model to pull model.
    MediaMuxer: the real muxer.
    
    bug:7991013
    
    Change-Id: If3b79551bc6332bc81f5c2740885e579a5c4abf9
    eclair snapshot
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    StageFrightRecorder: do not use meta-data mode for software encoders
    
    Camera HAL v1 uses vendor-specific camera-source meta-data mode, but
    software encoders use generic gralloc-source mode, so they are not
    compatible.
    
    Change-Id: I0d1bab8eada26dcb70c97b1eec83f06d1f331239
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Bug: 11446505
    remove uses of Surface in favor or IGraphicBufferProducer
    
    Change-Id: I13d7a9553aa335bca790a3a59d389d7533c83d57
    remove uses of Surface in favor or IGraphicBufferProducer
    
    Change-Id: I13d7a9553aa335bca790a3a59d389d7533c83d57
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    Don't call virtual functions in the destructor for audio and camera source classes
    
    Change-Id: Ia74ffc1c0cbd7971697f5e3c476e340ec5c7727a
    Fix log spamming during time lapse video recording
    
    Change-Id: I4fc0809203684ebb02eaf217d7abad00aefc898f
    
    related-to-bug: 5626569
    Do not support still image capture mode for timelapse video recording
    
    related-to-bug: 4973779
    
    Change-Id: Ica665217ab10247b2242acc4e93d4fe9f83e3f45
    Add framework support for camcorder zoom.
    
    The purpose of ICameraRecordingProxy and ICameraRecordingProxyListener is to
    allow applications using the camera during recording.
    
    Camera service allows only one client at a time. Since camcorder application
    needs to own the camera to do things like zoom, the media recorder cannot
    access the camera directly during recording. So ICameraRecordingProxy is a proxy
    of ICamera, which allows the media recorder to start/stop the recording and
    release recording frames. ICameraRecordingProxyListener is an interface that
    allows the recorder to receive video frames during recording.
    
    ICameraRecordingProxy
      startRecording()
      stopRecording()
      releaseRecordingFrame()
    
    ICameraRecordingProxyListener
      dataCallbackTimestamp()
    
    The camcorder app opens the camera and starts the preview. The app passes
    ICamera and ICameraRecordingProxy to the media recorder by
    MediaRecorder::setCamera(). The recorder uses ICamera to setup the camera in
    MediaRecorder::start(). After setup, the recorder disconnects from camera
    service. The recorder calls ICameraRecordingProxy::startRecording() and
    passes a ICameraRecordingProxyListener to the app. The app connects back to
    camera service and starts the recording. The app owns the camera and can do
    things like zoom. The media recorder receives the video frames from the
    listener and releases them by ICameraRecordingProxy::releaseRecordingFrame.
    The recorder calls ICameraRecordingProxy::stopRecording() to stop the
    recording.
    
    The call sequences are as follows:
    1. The app: Camera.unlock().
    2. The app: MediaRecorder.setCamera().
    3. Start recording
       (1) The app: MediaRecorder.start().
       (2) The recorder: ICamera.unlock() and ICamera.disconnect().
       (3) The recorder: ICameraRecordingProxy.startRecording().
       (4) The app: ICamera.reconnect().
       (5) The app: ICamera.startRecording().
    4. During recording
       (1) The recorder: receive frames from ICameraRecordingProxyListener.dataCallbackTimestamp()
       (2) The recorder: release frames by ICameraRecordingProxy.releaseRecordingFrame().
    5. Stop recording
       (1) The app: MediaRecorder.stop()
       (2) The recorder: ICameraRecordingProxy.stopRecording().
       (3) The app: ICamera.stopRecording().
    
    bug:2644213
    
    Change-Id: I15269397defc25cbbcae16abc071c8349c123122
    Use video output if necessary for timelapse video recording
    
    Change-Id: I88d0cc824f0fbf8b2f392fbc23c69b5bfefda1b8
    Move Camera specific logic out from StagefrightRecorder to CameraSource
    
    o updated comments and streamlined the logic in
      checkVideoSize() and checkFrameRate() as suggested
    
    Change-Id: I49d04ac7998d4a215997aa63555dfb6e814e38d3
    Implemented frequent read returns for quick stop in time lapse.
    
    If the frame capture interval is large, read will block for a long time.
    Due to the way the mediaRecorder framework works, a stop() call from
    mediaRecorder waits until the read returns, causing a long wait for
    stop() to return. To avoid this, we return a copy of the last read
    frame with the same time stamp if a frame is not available quickly.
    This keeps the read() call from blocking too long. This method is
    triggered when startQuickReadReturns() is called on
    CameraSourceTimeLapse.
    
    In the still camera case, also using waitRelative on Condition
    instaed of sleeping, so that we can wake it up.
    Also for the idle check instead of sleeping, we now wait on a
    condition variable, which is woken up when the last takePicture
    callback gets called.
    
    Change-Id: Ia74386e175536aee0f44ae2f8b114c353d3d72f5
    Moving decision to use still camera to CameraSourceTimeLapse
    
    CameraSourceTimeLapse now decides whether to use still or video
    camera automatically. It checks if the passed in size is a valid
    preview size and if it is, then uses the video camera else uses
    the still camera.
    
    Removed from StagefrightRecorder the support to set parameter
    useStillCameraForTimeLapse.
    
    Change-Id: I71f5b0fc7080ca524792381efe918d22e41a7f36
    Implementing getSupportedPictureSizes
    
    Go through all the supported picture sizes and choose the smallest one with
    both dimensions higher than the passed in video width and height.
    
    Change-Id: I4e9fe7a6384a0feeb9e069239ec68c70fb5f3033
    Support for video size to be different from captured picture size.
    
    Adding support to allow video size to be different than the supported
    picture sizes. A picture size larger than the demanded video size is
    chosen. Captured pictures are then cropped to the size of the desired
    video size. Cropping is done from the the center portion of the picture.
    
    Change-Id: I6bcbe16f94b6ecbcf28b7f46826a81b4b6b8cbc3
    Allowing setting of time lapse parameters through MediaRecorder.java
    
    added setTimeLapseParameters() to MediaRecorder.java and SetParameter support
    in StagefrightRecorder to allow enabling time lapse and setting the corresponding
    parameters.
    
    Change-Id: I509040aa71f8d3fc37337b0894a81d9c0fd7a40a
    Restart preview after each takePicture is done.
    
    Preview is called when CAMERA_MSG_COMPRESSED_IMAGE is recieved by
    dataCallback(). It needs to be started as a new thread so that the
    callback can return, and the camera can know that takePicture() is
    done.
    
    Change-Id: I4d0febbc993aac43b37f9f4a824e9c7b8785f19e
    Adding support for timelapse capture using still camera's takepicture.
    Also moving entire implementation into a new class CameraSourceTimeLapse
    which inherits from CameraSource.
    
    For timelapse capture using still camera, we start a thread which runs a
    loop in which it calls Camera::takePicture() and then sleeps until the next
    frame should be captured.
    The function dataCallback() handles the callback from the camera with the
    raw image data. This function copies the data and creates an artificial
    timestamp corresponding to one frame time ahead of the last encoded frame's
    time stamp. It then calls dataCallbackTimestamp() of the base class which
    will think that it recieved the frame from a video camera and proceed as usual.
    
    For moving the implementation to the subclass CameraSourceTimeLapse, added a
    few virtual functions to CameraSource, which do the current thing for the base
    class, but specialized things for CameraSourceTimeLapse.
    E.g. startCameraRecording() in the base class just calls mCamera->startRecording(),
    while in CameraSourceTimeLapse it may start a thread for the still camera case.
    
    Change-Id: Ib787f24bd2e1f41681513f0257e1c4ca10a2b4de
    stagefright: offload playback support
    
    Offloading of compressed audio decoding to audio DSP
    is implemented for audio only, non streamed content.
    when the datasource is
    
    AudioPlayer:
    - Create an offloaded sink when playing a compressed
    source
    - Send metadata to audio HAL
    - Return sink start error to AwesomePlayer so that a
    new player for PCM audio can be created in case of problem.
    - Forward stream end and tear down callback events to AwesomePlayer
    - Stop the sink and wait for stream end callback when EOS is reached.
    - Pause and restart the sink if needed before flushing when seeking
    (otherwise flush is a no op).
    - For current media time, directly query the render position from the
    sink and offset by the start position (seek to time)
    
    AwesomePlayer:
    
    - When initializing the audio decoder, check with audio policy manager
    if offloading is supported. If yes, create the software decoder in
    case a reconfiguration is needed but connect the audio track directly
    to the AudioPlayer.
    - In case of error when starting the AudioPlayer, reconnect the software
    decoder (OMXSource) and recreate a PCM AudioPlayer.
    - Handle AudioPlayer tear down event by detroying and recreating the
    AudioPlayer to allow transitions between situations were offloading
    is supported or not.
    - Force tear down of offloaded AudioPlayer when paused for a certain time:
    This will close the sink and allow the DSP to power down.
    
    Utils:
    - Added helper methods:
        - send meta data to audio ia sink setParameters
        - query audio policy manager if offloading is supported for a
    given audio content
    
    Change-Id: I115842ce424f947b966d45e253a74d3fd5df9aae
    Signed-off-by: Eric Laurent <elaurent@google.com>
    Public API changes for audio offload support.
    
    NOTE: this does _not_ include all private member variables added
    to classes as part of offload support. Only public/protected functions
    and stubs functions/variables needed to make the changes buildable.
    
    - isOffloadSupported() added to audio policy service
        A stub implementation is required to build, this always returns false
    - setParameters() added to IAudioTrack
        A stub implementation is required to build, this always returns
        INVALID_OPERATION
    
    - CBlk flag for stream end
    
    - Change AudioSystem::getRenderPosition() to take an audio_output_t
        so caller can specify which output to query
    
    - Add AudioSystem::isOffloadSupported()
        This is fully implemented down to the AudioFlinger function
        AudioPolicyServer::isOffloadSupported() which is just a stub
        that always returns false.
    
    - Add EVENT_STREAM_END to AudioTrack interface.
        STREAM_END is used to signal when the hardware has actually finished
        playing all the data it was sent.
    
    - Add event type enumeration to media player interface AudioSink callbacks
        so that the same callback can be used to handle multiple types of
        event. For offloaded tracks we also have to handle STREAM_END and
        TEAR_DOWN events
    
    - Pass audio_offload_info_t to various functions used for opening outputs,
        tracks and audio players. This passes additional information about the
        compressed stream down to the HAL when using offload.
        For publicly-available APIs this is an optional parameter (for some of
        the internal and low-level APIs around the HAL interface it is mandatory)
    
    - Add getParameters() and setParameters() API to AudioTrack
        Currently dummy implementations.
    
    - Change AudioPlayer contructor so that it takes a set of bitflags defining what
        options are required. This replaces the original bool which only specified
        whether to use deep buffering.
    
    - Changes to StageFright class definition related to handling tearing-down of
        an offloaded track when we need to switch back to software decode
    
    - Define new StageFright utility functions used for offloaded tracks
        Currently dummy implementations.
    
    - AudioFlinger changes to use extended audio_config_t.
        Fills in audio_offload_info_t member if this info is passed in when
        opening an output.
    
    - libvideoeditor changes required to add the new event type parameter
        to AudioSink callback functions
    
    - libmediaplayerservice changes required to add the new event type parameter
        to AudioSink callback functions
    
    Change-Id: I3ab41138aa1083d81fe83b886a9b1021ec7320f1
    Signed-off-by: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
    Signed-off-by: Eric Laurent <elaurent@google.com>
    Use sp<AudioTrack> instead of raw AudioTrack *
    
    This change prepares for the new implementation of AudioTrack client, which
    will require clients to use only sp<AudioTrack>, not raw AudioTrack *.
    A raw delete will cause a race condition during AudioTrack destruction.
    
    AudioTrack was made a RefBase by commit b68a91a70bc8d0d18e7404e14443d4e4020b3635
    on 2011/11/15, when it was needed by OpenSL ES (for the callback protector).
    At that time, the only other client that was also converted from
    AudioTrack * to sp<AudioTrack> was android.media.AudioTrack JNI in
    project frameworks/base (file android_media_AudioTrack.cpp).
    
    Details:
     * Use .clear() instead of delete followed by = NULL.
     * ALOG %p need .get().
     * sp<> don't need to be listed in constructor initializer, if initially 0.
     * Use == 0 for sp<> vs == NULL for raw pointers.
     * Use if (sp != 0) instead of if (raw).
    
    Change-Id: Ic7cad25795d6e862e112abdc227b6d33afdfce17
    Stop extrapolating audio time from the anchor if we're paused or reached eos.
    
    Change-Id: I55903ba625d9c075a9a6e7bcd5ff95d450b915b2
    related-to-bug: 6479613
    Smoothen audio "real" time by compensating with system_time()
    
    for the delay since the last buffer submission to the audio sink.
    
    Change-Id: Ib1a8672f96ba8bbef07d23372f1076fbb1f0bdcc
    related-to-bug: 6479613
    Add support for deep audio buffers
    
    Allow AudioSink to use deep audio buffering when the
    source is audio only and its duration is more than
    a certain threshold.
    This helps improve battery life but implies higher
    audio latency.
    
    Change-Id: Ie79915b61c370292f05aabda9779356570e03cbb
    Playback rate on MediaPlayer
    
    Add support for modifying the playback rate of a MediaPlayer
     by altering the sample rate of its AudioTrack.
    The playback rate is expressed in permille, where 1000 is the
     playback at normal speed.
    
    Change-Id: I981d060ab32f7bae7a767e82c60c88ae635dceed
    Revert "Use AudioTrack::event_type not int in callback"
    
    This reverts commit 2225e4b7049fa3fb9d39a068b8268b63c952d7c1
    Use AudioTrack::event_type not int in callback
    
    Change-Id: Ifefc708d46874e04fd0d01cb6e2d43b987ee796c
    Delay signaling the end of audio playback until all frames have actually played.
    
    Change-Id: I1fa07358a885a818fd0a5d7da425740f86095e10
    related-to-bug: 3404000
    integrate videoeditor preview player.
    
    Change-Id: I83084f494605c8e6f4d198afa8c36f9e29579667
    Make sure to call AudioTrack::stop() instead of AudioTrack::pause() after submitting all samples to AudioTrack to make sure those remaining samples are actually played out.
    
    Change-Id: Id574a0203efcb5e565f1b0fe77869fc33b9a9d56
    Instead of constantly polling the AudioPlayer to see if it reached EOS or finished seeking, initiate the notification from the AudioPlayer when the event happens.
    
    Change-Id: I43875b6adaf96d4e982ef3dfc3d6c8f7034ac51d
    related-to-bug: 3036592
    Squashed commit of the following:
    
    commit 4abf16bb04dc9695fedf4007a84f903074312ccd
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 20 09:21:17 2010 -0700
    
        Support a single format change at the beginning of audio playback. This way the AAC+ decoder may change its output format from what is originally encoded in the audio stream and we'll still play it back correctly.
    
        Change-Id: Icc790122744745e9a88099788d4818ca1e265a82
        related-to-bug: 2826841
    
    commit 09c74da63e6ad5cb5dafb70f62696d75d2978967
    Author: James Dong <jdong@google.com>
    Date:   Sun Jul 18 17:57:01 2010 -0700
    
        Fix MPEG4Extractor to extract sampling frequency correctly when SBR is enabled.
    
        Change-Id: I883c81dad3ea465e71cb5590e89d763671a90ff8
    
    commit f672bf2a782dc7d5fb6325d611a7fe17045dfe9a
    Author: James Dong <jdong@google.com>
    Date:   Thu Jul 8 20:56:13 2010 -0700
    
        Enable the support for decoding audio with AAC+ and eAAC+ features
    
        bug - 282684
    
        Change-Id: I73c8377af3cc4edd3ee7cea86dc3b1c369fbd78b
    
    Change-Id: I012f1179e933b6d1345d2368f357576c722485f7
    Squashed commit of the following:
    
    commit 4abf16bb04dc9695fedf4007a84f903074312ccd
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 20 09:21:17 2010 -0700
    
        Support a single format change at the beginning of audio playback. This way the AAC+ decoder may change its output format from what is originally encoded in the audio stream and we'll still play it back correctly.
    
        Change-Id: Icc790122744745e9a88099788d4818ca1e265a82
        related-to-bug: 2826841
    
    commit 09c74da63e6ad5cb5dafb70f62696d75d2978967
    Author: James Dong <jdong@google.com>
    Date:   Sun Jul 18 17:57:01 2010 -0700
    
        Fix MPEG4Extractor to extract sampling frequency correctly when SBR is enabled.
    
        Change-Id: I883c81dad3ea465e71cb5590e89d763671a90ff8
    
    commit f672bf2a782dc7d5fb6325d611a7fe17045dfe9a
    Author: James Dong <jdong@google.com>
    Date:   Thu Jul 8 20:56:13 2010 -0700
    
        Enable the support for decoding audio with AAC+ and eAAC+ features
    
        bug - 282684
    
        Change-Id: I73c8377af3cc4edd3ee7cea86dc3b1c369fbd78b
    
    Change-Id: I012f1179e933b6d1345d2368f357576c722485f7
    Support a single format change at the beginning of audio playback. This way the AAC+ decoder may change its output format from what is originally encoded in the audio stream and we'll still play it back correctly.
    
    Change-Id: Icc790122744745e9a88099788d4818ca1e265a82
    related-to-bug: 2826841
    The audio track was accidentally not participating in the prefetch since it wasn't started at the time prepare() was called. Also, properly report the cached duration even near the end when the source has no more data to fetch.
    
    Change-Id: I66a92fec24c9bfb25f1c186f1c877127bae2b4f9
    related-to-bug: 2444425
    Propagate errors all the way through the MediaSources and send either MEDIA_PLAYBACK_COMPLETE or MEDIA_ERROR depending on the final reason for running out of buffers to play back.
    
    related-to-bug: 2463749
    Implementation of stagefright-enabled MediaPlayerService::decode functionality
    
    related-to-bug: 2359268
    Fix a deadlock caused by the AudioPlayer notifying the observer that the stream had ended at the same time the observer was shutting down the AudioPlayer.
    
    related-to-bug: 2414536
    Properly forward errors returned by AudioTrack up to the player.
    
    related-to-bug: 2300197
    Squashed commit of the following:
    
    commit 1efc38dc3c33fef57b759002db3965ed07a28cb0
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 19 14:36:14 2009 -0800
    
        Sending the SEEK-COMPLETE notification temporarily broke seeking backwards in time behaviour. This is now fixed.
    
        Also, get rid of the semi-random delay after posting buffers to surface flinger in favour of delaying the buffer release until the next frame is displayed.
    
    commit 51973062eb5ee63fd64b845d72bac517cc3369cf
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 14:01:43 2009 -0800
    
        Fix one more unit test, properly send seek-complete notification only after seek actually completed.
    
    commit cb22250b34b1fcfe1bf459723a761fd003950229
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 12:31:36 2009 -0800
    
        Fix seek-while-paused in AwesomePlayer, revert to using FileSource if MmapSource fails.
    
    commit 25eb9241138ddf7bb27ce90657116c5f8a94d880
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 12:30:40 2009 -0800
    
        Support seeking and duration in AMRExtractor, assuming all frames are the same size.
    
    commit 44192f2ebb7ea3bbd3ba5910025692dbc6a08faa
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 10:21:44 2009 -0800
    
        MediaPlayerImpl is dead, long live AwesomePlayer.
    
    commit c5b52d3c0674f5dc94db506afbce52401cceddac
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 09:42:23 2009 -0800
    
        New implementation of the stagefright mediaplayer.
    eclair snapshot
    Squashed commit of the following:
    
    commit 5bb012f0065f7ffaaeb4f569d71f0e3a8d6b19c3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 10:40:08 2009 -0700
    
        An attempt at fixing export using the qcom encoders. More quirks.
    
    commit 0690e76bfa48118a68287ccf1bbfa82febaa620c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 09:08:28 2009 -0700
    
        Callbacks are now dispatched from a separate thread in OMX.
    
    commit c6571a039526df29b6343f9a1971dbc019088c61
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 15:42:25 2009 -0700
    
        Massive API changes throughout stagefright, smart pointers everywhere.
    
    commit 900612af6a0555664d9ba195112cd859491265f4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 13:33:12 2009 -0700
    
        OMXCodecs now properly shutdown.
    
    commit 96732f05e1b0603dcd1b11f16a23512592eeb4f5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 12:04:04 2009 -0700
    
        More work on JPEG decoding using the hardware OMX component.
    
    commit 63839a073ac393e3a130434ba467969053b694ad
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 12 13:13:31 2009 -0700
    
        An attempt to drive the JPEG decoder OMX node.
    
    commit 3ac2fe5ab2926eda81b2123610b2434c645294ff
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:38:21 2009 -0700
    
        Renamed StateMachine to OMXCodec and put it in its proper place.
    
    commit 247da75a96bf8881956413023dd49a84d5b4f5b2
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:06:19 2009 -0700
    
        Statemachine is now a full-fledged MediaSource.
    
    commit 045244f6771fa0b9b329495c953afda900a84b71
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 7 09:16:54 2009 -0700
    
        Properly setup the input format when exporting to AMR audio.
    
    commit 271b984cb32c5cd9e46e3f90ae121f334e4b8da9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 6 09:59:38 2009 -0700
    
        Added some code to test audio encoding to the OMX harness.
    
    commit 79af4748e4af33bd66d3fbac606e332a69741cf4
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 5 14:36:22 2009 -0700
    
        Merge the old OMXDecoder and the new, shiny, StateMachine code.
    
    commit 91cf5dd77a8762bc10a0b2ffce35e3bbeb262231
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 4 17:41:43 2009 -0700
    
        A new harness to test OMX node compliance (and quirks).
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    [libstagefright] : camcorder pause-resume implementation
    
    - Added pause resume feature in camcorder app.so that
      user pause recording and resume later which results
      in a single recorded clip.
    CRs-Fixed: 587051
    
    Change-Id: Ib82a93009348d997a4b8343b8b417b433be4c9df
    
    (cherry picked from commit 1f348eb12a631bbe6c3288c797354da6d425e64d
    from CM repository, with some of manual code removal. You know,
    CM tree tends to have QCOM-specific code all around. - peat-psuwit)
    
    Conflicts:
            media/libmediaplayerservice/StagefrightRecorder.cpp
            media/libstagefright/AudioSource.cpp
            media/libstagefright/OMXCodec.cpp
    * Gut the use of AudioFlinger for recording and replace it with custom RecordThread, RecordTrack and RecordHandle implementations
    * Make sure addBatteryData is disabled so that MediaService isn't called
    * Disable AudioFlinger call to get number of frame lost
    * Audio recording works, also clean up the code to remove many of the unnecessary commented out AudioFlinger calls
    * Clean up code more, removed commented out lines of code that will never be used, added some comments
    
    Change-Id: I875bc90223369d9a5653c5aeeb2d49175f65e08b
    Signed-off-by: Jim Hodapp <jim.hodapp@canonical.com>
    AudioRecord must be used as sp<> only
    
    Bug: 9423855
    Change-Id: I78ba8228c60dff11fb466156bb632c5dda45cdaf
    ALooper::GetNowUs() now relies on systemTime instead of gettimeofday.
    
    Change-Id: Ia31eb0940b02581327a8bf51af6df135f9ab6de3
    related-to-bug: 7266324
    ALooper::GetNowUs() now relies on systemTime instead of gettimeofday.
    
    Change-Id: Ia31eb0940b02581327a8bf51af6df135f9ab6de3
    related-to-bug: 7266324
    Prepare for transmitting audio through AudioSource.
    
    AudioSource can now be configured to output buffers timestamped based
    on looper time (absolute) instead of based on systemTime() relative to
    start time.
    
    Change-Id: I8eca42648eb50033ac4aafbe5daac64a98a40690
    Prepare for transmitting audio through AudioSource.
    
    AudioSource can now be configured to output buffers timestamped based
    on looper time (absolute) instead of based on systemTime() relative to
    start time.
    
    Change-Id: I8eca42648eb50033ac4aafbe5daac64a98a40690
    Limit the amount of audio record data in each buffer
    
    o The size of each input buffer should be less than or equal to kMaxBufferSize
    o related-to-bug: 5977032
    
    Change-Id: I04343169aac3df56694aad4ba7967ec45337ad7e
    Don't call virtual functions in the destructor for audio and camera source classes
    
    Change-Id: Ia74ffc1c0cbd7971697f5e3c476e340ec5c7727a
    Use audio_source_t consistently
    
    Was a mix of audio_source_t, uint8_t, and int.
    
    Related fixes:
     - fix comments in MediaRecorder.java
     - AudioPolicyService server side was not checking source parameter at
       all, so if the client wrapper was bypassed, invalid values could be
       passed into audio HAL
     - JNI android_media_AudioRecord_setup was checking source for positive
       values, but not negative values. This test is redundant, since already
       checked at Java and now checked by AudioPolicyService also, but might
       as well make it correct.
    
    Change-Id: Ie5e25d646dcd59a86d7985aa46cfcb4a1ba64a4a
    update for new audio.h header location
    
    Change-Id: Ic4c62c4037800802427eb7d3c7f5eb8b25d18876
    Signed-off-by: Dima Zavin <dima@android.com>
    audio/media: convert to using the audio HAL and new audio defs
    
    Change-Id: Ibc637918637329e4f2b62f4ac7781102fbc269f5
    Signed-off-by: Dima Zavin <dima@android.com>
    A/V synchronization at the beginning of a recording session
    
    o do not use edts/elst boxes since these optional boxes are ignored
    o manipulate the first video/audio frame duration to make sure that the rest
      of the audio/video is in sync (ideally, we should only manipulate
      the vidoe frame duration, not the audio)
    o reduce the initial audio mute/suppression period, which is used to
      eliminate the "recording" sound.
    
    bug - 3405882 and 3362703
    
    Change-Id: Ib0acfb4f3843b365157288951dc122b006299c18
    Decouple AudioRecord read and audio encoding
    
    bug - 3313754
    
    Change-Id: I951dd0e21e34aa1412c391f003bc32103d0424b0
    Suppress the recording sound in the recorded video
    
    bug - 3309194
    
    Change-Id: Ib8fb248943bc22f963d67537bfdbc6056c5a159b
    Calculate audio media drift time from AudioSource
    
    The problem was that the time to receive an output buffer
    from an audio encoder is different because the encoder does not
    need to read from the source for all output buffers. This leads
    to large fluctuation in terms of wall clock duration between two
    neighboring audio sample outputs from the audio encoder. As a
    result, the media time for the video track after adjustment using
    the drifting changes wildly sometimes.
    
    This patch addresses this issue by only updating the media drift
    time when an audio source input buffer is read. the wall clock
    for the audio track is also calculated at the same time when
    the input audio buffer is read at AudioSource.
    
    bug - 2959800
    
    Change-Id: I3174aa182f744784b540f0a7198524d4eee8bd7b
    Suppress the video recording start signal
    - bug 2950297
    
    Change-Id: I0044d07178691feb904cf81e87c1b6d4b714dc1a
    Handle large audio lost
    
    Change-Id: I2687ad855aac758946954d0b3fe7aff9f7b5ae7c
    Add lost frame handling in AudioSource
    
    - Also collect stats on lost audio frames instead of time spent on reading
    
    Change-Id: I6380b143e4fbdcd894491aaae523331e90d0f04f
    Track maximum amplitude and fix getMaxAmplitude()
    
    - only start to track the max amplitude after the first call to getMaxAmplitude()
    
    Change-Id: I64d3d9ca0542202a8535a211425e8bccceca50fc
    Audio/video sync during recording (second part)
    
    Change-Id: Iba0b35f57fdeac7ee1da16899406bf4b957a2c8c
    Initial check-in for collecting stats from authoring engine at runtime
    
    Change-Id: I93a9d8bd260efc5e7fc135b726e3f1307c6df794
    Initial software encoder checkins
    
    Change-Id: I27f387db23594e46384c4eb3a0093ce220bb6b60
    Initial checkin of AudioSource and AMRWriter, a pair of classes supporting pure-audio recording in stagefright.
    
    related-to-bug: 2295449
    eclair snapshot
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    Check adaptive playback support via CodecCapabilities
    
    Added flags field to CodecCapabilities, so that applications
    can query whether codecs support various features.  For now
    added one video-decoder feature:
    
    kFlagSupportsAdaptivePlayback
    
    Media playback applications can query it to see if a codec
    supports seamless resolution changes, such as by supporting
    dynamic output buffers.
    
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Change-Id: I09da46e8ab6b8645fa2749e33128e49eda2e865b
    Related-to-bug: 7093648
    Add a few more APIs to MediaCodecList.
    
    Change-Id: I5ac193cd40c82bbcd87c1e55003b78102e8d4674
    Instead of hardcoding OMX component names in our code, support
    
    a config file instead.
    
    Change-Id: I5835903ab9f1c4a22ccc605ca99ed966767adf57
    Eliminate superfluous memcpys by wrapping an ABuffer in a MediaBuffer
    
    Change-Id: I1313f117cd7cdfaf7d6ec25413a0b4b8ea495037
    related-to-bug: 5122973
    Add decode-to-ANativeWindow support to Stagefright.
    
    This change adds support to Stagefright for doing OMX video decoding directly
    into buffers dequeued from an ANativeWindow.  It does this by registering the
    dequeued buffers with the OMX component using an Android-specific OMX
    extension, and then exchanging buffers between the OMX component and the
    ANativeWindow.
    
    Change-Id: Ida66f836503255a68d378c6903d96dfe9747ce87
    eclair snapshot
    Squashed commit of the following:
    
    commit 5bb012f0065f7ffaaeb4f569d71f0e3a8d6b19c3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 10:40:08 2009 -0700
    
        An attempt at fixing export using the qcom encoders. More quirks.
    
    commit 0690e76bfa48118a68287ccf1bbfa82febaa620c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 09:08:28 2009 -0700
    
        Callbacks are now dispatched from a separate thread in OMX.
    
    commit c6571a039526df29b6343f9a1971dbc019088c61
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 15:42:25 2009 -0700
    
        Massive API changes throughout stagefright, smart pointers everywhere.
    
    commit 900612af6a0555664d9ba195112cd859491265f4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 13:33:12 2009 -0700
    
        OMXCodecs now properly shutdown.
    
    commit 96732f05e1b0603dcd1b11f16a23512592eeb4f5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 12:04:04 2009 -0700
    
        More work on JPEG decoding using the hardware OMX component.
    
    commit 63839a073ac393e3a130434ba467969053b694ad
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 12 13:13:31 2009 -0700
    
        An attempt to drive the JPEG decoder OMX node.
    
    commit 3ac2fe5ab2926eda81b2123610b2434c645294ff
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:38:21 2009 -0700
    
        Renamed StateMachine to OMXCodec and put it in its proper place.
    
    commit 247da75a96bf8881956413023dd49a84d5b4f5b2
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:06:19 2009 -0700
    
        Statemachine is now a full-fledged MediaSource.
    
    commit 045244f6771fa0b9b329495c953afda900a84b71
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 7 09:16:54 2009 -0700
    
        Properly setup the input format when exporting to AMR audio.
    
    commit 271b984cb32c5cd9e46e3f90ae121f334e4b8da9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 6 09:59:38 2009 -0700
    
        Added some code to test audio encoding to the OMX harness.
    
    commit 79af4748e4af33bd66d3fbac606e332a69741cf4
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 5 14:36:22 2009 -0700
    
        Merge the old OMXDecoder and the new, shiny, StateMachine code.
    
    commit 91cf5dd77a8762bc10a0b2ffce35e3bbeb262231
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 4 17:41:43 2009 -0700
    
        A new harness to test OMX node compliance (and quirks).
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    Don't call virtual functions in destructors for the writer classes
    
    Have not found any concrete bugs related to these calls yet, but we should avoid
    calling virtual functions in destructors, regardless.
    
    Change-Id: I2d47b79d3fb2d29f418619bee83aa147d232a5d4
    Removed uncessary FILE structure pointer for I/O
    
    o also move the fd owner from caller to callee in the Writers
    
    Change-Id: I510ccfdd0fcc58f1777fea4ed1349fd251852c65
    64-bit file size/offset support for media framework
    
    Change-Id: I3452bc2c0f1d990cc67285df2fce1f9f86ff8e10
    Make MediaWriter stop and pause return errors if necessary
    
    o Make the API consistent with SF framework, which the MediaSource
      provides a return status for stop
    
    o Also, helps to convey errors that occurred right when a
      premature stop() is called, leading to a potentially
      mal-formed output file.
    
    Change-Id: I52a932345f38570fdf8ea04d67d73dd94ccd30ef
    Enable passing parameters to the MediaWriter at runtime (at start() call).
    
    - estimate the moov box size for mp4 file writer based on the file
      size/duration limit and target bit rate.
    - can switch to use 64 bit file offset at runtime
    
    rebased
    
    Change-Id: Ibbe1f57e91ab2605820d5d96e8048d11e5559c53
    Initial checkin for pause and resume control
    
    Change-Id: Ibdcf7bea5fb66baa81878704ba4091dfcfe382ee
    Handle recording file size and/or duration limit
    
    Change-Id: Ib9ed1f3ebd8fef550cc130a7ef11f2905fa9aedc
    Remove unnecessary lock from AMRWriter.
    
    Change-Id: Ia02966d936dd8cbb31e92051578a3fa816885710
    Support for audio recording into AMR NB/WB files as well as audio tracks in MPEG4 files.
    
    related-to-bug: 2295449
    Initial checkin of AudioSource and AMRWriter, a pair of classes supporting pure-audio recording in stagefright.
    
    related-to-bug: 2295449
    Update FileSource to also accept a file descriptor and a range.
    eclair snapshot
    New API to instantiate a MediaExtractor given a URI and optional MIME type.
    
    Also DataSources now must provide a method initCheck()
    and DataSource::reat_at has been renamed to readAt to conform to
    standard API naming guidelines.
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    move libbinder's header files under includes/binder
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MediaMuxer prefer not to use the MPEG4Writer in real time recording mode.
    
    By default, MPEG4Write will keep running in real time recording mode.
    
    bug:8598944
    
    Change-Id: Idf7fbd4e0feb7763660a74279ba8817b79098aaf
    MediaMuxer prefer not to use the MPEG4Writer in real time recording mode.
    
    By default, MPEG4Write will keep running in real time recording mode.
    
    bug:8598944
    
    Change-Id: Idf7fbd4e0feb7763660a74279ba8817b79098aaf
    Make limitations of MPEG4Writer explicit
    
    o No more than 2 tracks will be supported
    o No more than one video and/or one audio tracks will be supported
    o Only take video and/or audio track (for instance, no text tracks)
    o If there is no track before start() is called, bail out.
    
    At the same time, make sure the errors from addSource() report to
    addTrack(), not to start().
    
    Bug: 7991013
    
    Change-Id: I1ca35aaeb75b5448d75ed2c6c10dd12ecea720ab
    Make limitations of MPEG4Writer explicit
    
    o No more than 2 tracks will be supported
    o No more than one video and/or one audio tracks will be supported
    o Only take video and/or audio track (for instance, no text tracks)
    o If there is no track before start() is called, bail out.
    
    At the same time, make sure the errors from addSource() report to
    addTrack(), not to start().
    
    Bug: 7991013
    
    Change-Id: I1ca35aaeb75b5448d75ed2c6c10dd12ecea720ab
    Store correct time stamps in recorded mp4 files
    
    According to the specification (ISO_IEC_14496-12_2008 page 17, 19 and
    21) the time is "in seconds since midnight, Jan. 1, 1904, in UTC time"
    which is not the same as Unix epoch time. This is already correctly
    handled in MPEG4Extractor.cpp when reading files.
    
    The specification also supports 64 bit timestamps which would make
    it a bit more future proof, but unfortunately it seems like support
    for this in players are poor (tested both Windows media player and
    Quicktime player).
    
    Change-Id: I102d728f098b8b0a21013956f017b0c4f2d69112
    Speed up stsz box write in MPEG4Writer
    
    With this patch, the write time for 30+ minutes recording session is reduced from 10+ seconds down to around 2-3 seconds.
    
    related-to-bug: 6435176
    
    Change-Id: I83b705cea42d8de798e7032c770c5c7b033e267e
    Don't call virtual functions in destructors for the writer classes
    
    Have not found any concrete bugs related to these calls yet, but we should avoid
    calling virtual functions in destructors, regardless.
    
    Change-Id: I2d47b79d3fb2d29f418619bee83aa147d232a5d4
    Do not wait for unlaunched threads in stop()
    
    Change-Id: If681749753bb96ee98c1539658cfd919eeb0cb65
    Revert "Add const to the finders method in MetaData.cpp"
    
    This reverts commit 78fed171d9d62b25aa846d7373a7040e3fd2241e.
    
    Conflicts:
    
            include/media/stagefright/MPEG4Writer.h
    
    Change-Id: Ie6f497f67a473ad95b50bb949c1aa49e1804bac3
    Support platform and camera dependent recording start time offset
    
    related-to-bug: 4390777
    
    Change-Id: Icb52973ad4ac716f04fb103ef527915a966d06d5
    Support for storing geo information in the recorded mp4/3gpp file.
    
    o Geo data (latitude and longitude) is stored in udta box
    
    Change-Id: I76e4aeb741c4b339f3753d3d28190151f3ea4919
    related-to-bug: 4260295
    Add send session recording summary report to application
    
    Change-Id: I9c63ddae432f0c93486c39776ed0a058a8649602
    Add const to the finders method in MetaData.cpp
    
    o also fixed the MPEG4Writer writeFtypBox() to take a const pointer to MetaData
    
    Change-Id: Iaecdbe6aeab345f6dc72aac0d19f9704b6e0d28a
    Refactor MPEG4Writer::writeTrackHeader() method
    
    o most of the mp4 file boxes has its own method now
    TODO: remove some of the duplicated code for esds box, for instance.
    
    Change-Id: Iae3dbb2410b79bc79aaee081b80569d339993c47
    Better organize media recorder error and information event and types
    
    Change-Id: I45f1f953596985494725525c1fabf57eccc19175
    Reduce blocking time in file write
    
    bug - 3418787
    
    Change-Id: I4723662bf46ed07271be8468f84ae5d93cb793fa
    Removed uncessary FILE structure pointer for I/O
    
    o also move the fd owner from caller to callee in the Writers
    
    Change-Id: I510ccfdd0fcc58f1777fea4ed1349fd251852c65
    64-bit file size/offset support for media framework
    
    Change-Id: I3452bc2c0f1d990cc67285df2fce1f9f86ff8e10
    Rotation support
    
    - We only support 0, 90, 180, and 270 degree clockwise rotation
    
    - Some players are known to ignore composition matrix in the MP4 file,
      although this is part of the MP4 file standard.
      Both QT and YT are supporting the rotation
    
    The original patch (65a73f4e8c79d05c0d9001b660325748d4ecf37b) was not merged.
    The only change I made is to reuse the same kKeyRotation in MetaData.h;
    and thus do not neeed to use kKeyRotationDegree.
    
    Change-Id: Ib328716d4842201c4adf57e4ddfe1f1ac1ae4d8a
    Rotation support
    
    - We only support 0, 90, 180, and 270 degree clockwise rotation
    
    - Some players are known to ignore composition matrix in the MP4 file,
      although this is part of the MP4 file standard.
      Both QT and YT are supporting the rotation
    
    Change-Id: I1b7f66a801e9d9c49d889c9b06dd6173fa7e76c4
    File writer size estimation improvement
    
    o Do not count the reserved space for moov if the meta data size is small
    o Do not count the extra 1KB disturbing small file estimation.
    o Reduce the default minimum reserved space from 4 KB to 3 KB.
    o Estimate the moov size based on both duration AND file size limit is set
      and set it to the smaller estimated value.
    
    low risk change
    
    bug - 3111983
    
    Change-Id: I6ac2adb979d8cc12d6b4f1813d000c989add0199
    Fixed an issue where the reserved free space in the file writer was larger than intended
    
    The problem was that even though user does not explicitly request the max file size
    limit via MediaRecorder.setMaxFileSize(), the file writer sets an implicit file
    size limit if 32-bit file offset is used on user's behalf. The reserved free space
    is estimated based on the file size, if the file size limit is set by the user.
    
    The fix is to add an extra bool to tell the difference between an
    explit requested file size and an implicit file limit and use that
    to set the estimated moov box size accordingly.
    
    Change-Id: I731aca6c7833aa764ed7b905edb77721577471b3
    Remove unused/debugging code from MP4 file writer
    
    o also makes nal length in the recorded file modifiable at runtime
    
    Change-Id: I731b4dde7070d8d9628b36b523a5b2c011c7c2cf
    Better file size estimate
    
    When the recorded file becomes large, the metadata size can
    no longer be ignored. This makes it possible to save the
    recorded file when the storage becomes almost full at the
    end of the recording session.
    
    Change-Id: Ief038080f825c9946ce550949c03e914aec1e31a
    Calculate audio media drift time from AudioSource
    
    The problem was that the time to receive an output buffer
    from an audio encoder is different because the encoder does not
    need to read from the source for all output buffers. This leads
    to large fluctuation in terms of wall clock duration between two
    neighboring audio sample outputs from the audio encoder. As a
    result, the media time for the video track after adjustment using
    the drifting changes wildly sometimes.
    
    This patch addresses this issue by only updating the media drift
    time when an audio source input buffer is read. the wall clock
    for the audio track is also calculated at the same time when
    the input audio buffer is read at AudioSource.
    
    bug - 2959800
    
    Change-Id: I3174aa182f744784b540f0a7198524d4eee8bd7b
    Runtime dump support for MediaWriter
    
    Change-Id: I10b2c474de612ee4cef4b7c9eae2ee1dd8c2e895
    Make MediaWriter stop and pause return errors if necessary
    
    o Make the API consistent with SF framework, which the MediaSource
      provides a return status for stop
    
    o Also, helps to convey errors that occurred right when a
      premature stop() is called, leading to a potentially
      mal-formed output file.
    
    Change-Id: I52a932345f38570fdf8ea04d67d73dd94ccd30ef
    Use audio clock as the reference media clock
    
    o Only do this for realtime applications
    o Adjust other track clock based on audio clock
    o Assume other track uses wall clock as the media clock
    o Use some heuristics to reduce the size of stts box by 2/3.
    
    - also
    o Remove one unused key from MetaData.h
    
    Change-Id: Ib9432842627b61795b533508158c25258a527332
    File writer has a designated writer thread now
    
    + This reduces the file I/O block time for audio/video track processing
    - Since the file writer is buffering some output samples, the memory
      usage would go up, depending on how many output samples are buffered.
    
    Change-Id: I780cc5b26f4b53a5efbd643fcf9505dfc19cd4cd
    Progress status notification
    
    - Keep track of per-track progress
    
    Change-Id: Ibd36f0e8c78581928c8aa2f5e23c5e7e0615c2cc
    Support user-supplied timescales for authoring
    
    - also, change all the real time unit to microseconds in MPEG4Writer
    
    Change-Id: I260f512f2eb670ade7b8858a56335a5d639de756
    Provide progress status report during authoring
    
    - Track either the number of A/V frames authored, or the time elapsed
    - Track the completion of the authoring
    - Add multiple camera support for authoring by accepting a camera id parameter
    - Set file type based on the OUTPUT_FORMAT requested
    
    Change-Id: I0f9d31b3b7a8fa43eb53f572410fb0ebd4fa0bb7
    Enable passing parameters to the MediaWriter at runtime (at start() call).
    
    - estimate the moov box size for mp4 file writer based on the file
      size/duration limit and target bit rate.
    - can switch to use 64 bit file offset at runtime
    
    rebased
    
    Change-Id: Ibbe1f57e91ab2605820d5d96e8048d11e5559c53
    Fixed some meta data issues in the recorded mp4 file
    
    - Mainly correcting the location of stbl box which should be a child of minf box.
      This resolved the issue where the mis-muxed encoded file could not be played by QT/VLC.
    
    - Enabled the the recorded tracks by setting the flags to 0x07 by default
    
    - Allows for encoding either 32-bit or 64-bit offsets. By default encoding
      32-bit offsets to reduce the metadata overhead
    
    - Fixed a edts box issue where an empty elst box was used at the end
    
    Change-Id: I570621a26714a81dc9400271aa5d3a07b483172f
    Single track optimization
    
    We don't need to do interleave when the total number of tracks to be recorded is one.
    Metadata-wise, we only need to have one chunk in chunk offset table, and a
    single entry in the stsc table.
    
    Change-Id: I46f0e4b3860620311e7a91b68a9067acaa137bb2
    Audio/video sync during recording (second part)
    
    Change-Id: Iba0b35f57fdeac7ee1da16899406bf4b957a2c8c
    Initial checkin for pause and resume control
    
    Change-Id: Ibdcf7bea5fb66baa81878704ba4091dfcfe382ee
    Audio/video initial recording time synchronization
    
    Change-Id: Iac58b63d474fe09c1d36ba6ecde91dafbb7fef9a
    Handle recording file size and/or duration limit
    
    Change-Id: Ib9ed1f3ebd8fef550cc130a7ef11f2905fa9aedc
    Output streamable MP4 file during MP4 file recording
    
    When the reserved moov box space is not big enough,
    fall back to non-streamable MP4 file.
    
    Change-Id: I93382d037d657a3f3fe2af31e4ea26e1898b4d95
    Support audio and video track interleaving in the recorded mp4 file
    
    Change-Id: Ifa27eb23ee265f84fe06773b29b0eb2b0b075b60
    Support for audio recording into AMR NB/WB files as well as audio tracks in MPEG4 files.
    
    related-to-bug: 2295449
    Squashed commit of the following:
    
    commit 333057b355f8c260c549553b9a0634755c838b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 13 15:35:48 2009 -0800
    
        Some more tweaks to AVC encoding on sholes.
    
    commit 9981d0ee52ec5b8b0182aae733d1571e3ebb8390
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 12 16:36:57 2009 -0800
    
        Support for avc encoding, including sholes specific tweaks to pick the right colorspace for the camera to not require transcoding.
    
    commit 5ba0ebbbd4efca51f3ae1f60e2ca31e7d2cf136d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 11 09:50:03 2009 -0800
    
        Enable actual (camera) video-only recording using h.263 or mpeg4 encoding.
    
    commit 3fd59c3526a37fe7c696f4a978925d1831c09313
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 10 14:57:48 2009 -0800
    
        Allow switching between the PV recorder implementation and one supported by stagefright.
    
        This is controlled through the property "media.stagefright.enable-record".
    eclair snapshot
    Minor API change in MPEG4Writer, support for amr output into MPEG4 containers.
    Squashed commit of the following:
    
    commit 5bb012f0065f7ffaaeb4f569d71f0e3a8d6b19c3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 10:40:08 2009 -0700
    
        An attempt at fixing export using the qcom encoders. More quirks.
    
    commit 0690e76bfa48118a68287ccf1bbfa82febaa620c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 09:08:28 2009 -0700
    
        Callbacks are now dispatched from a separate thread in OMX.
    
    commit c6571a039526df29b6343f9a1971dbc019088c61
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 15:42:25 2009 -0700
    
        Massive API changes throughout stagefright, smart pointers everywhere.
    
    commit 900612af6a0555664d9ba195112cd859491265f4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 13:33:12 2009 -0700
    
        OMXCodecs now properly shutdown.
    
    commit 96732f05e1b0603dcd1b11f16a23512592eeb4f5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 12:04:04 2009 -0700
    
        More work on JPEG decoding using the hardware OMX component.
    
    commit 63839a073ac393e3a130434ba467969053b694ad
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 12 13:13:31 2009 -0700
    
        An attempt to drive the JPEG decoder OMX node.
    
    commit 3ac2fe5ab2926eda81b2123610b2434c645294ff
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:38:21 2009 -0700
    
        Renamed StateMachine to OMXCodec and put it in its proper place.
    
    commit 247da75a96bf8881956413023dd49a84d5b4f5b2
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:06:19 2009 -0700
    
        Statemachine is now a full-fledged MediaSource.
    
    commit 045244f6771fa0b9b329495c953afda900a84b71
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 7 09:16:54 2009 -0700
    
        Properly setup the input format when exporting to AMR audio.
    
    commit 271b984cb32c5cd9e46e3f90ae121f334e4b8da9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 6 09:59:38 2009 -0700
    
        Added some code to test audio encoding to the OMX harness.
    
    commit 79af4748e4af33bd66d3fbac606e332a69741cf4
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 5 14:36:22 2009 -0700
    
        Merge the old OMXDecoder and the new, shiny, StateMachine code.
    
    commit 91cf5dd77a8762bc10a0b2ffce35e3bbeb262231
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 4 17:41:43 2009 -0700
    
        A new harness to test OMX node compliance (and quirks).
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    Support MediaCodec::getOutputFormat for encoders
    
    codec specific data is provided as part of the MediaFormat if available.
    
    Change-Id: I5a79c936e2411fe66ebc694791071faefc33941e
    related-to-bug: 8616651
    Support MediaCodec::getOutputFormat for encoders
    
    codec specific data is provided as part of the MediaFormat if available.
    
    Change-Id: I5a79c936e2411fe66ebc694791071faefc33941e
    related-to-bug: 8616651
    3rd time's the charm, right? Fix another instance where MediaCodec would
    
    not return from a stop() or release() call if mediaserver dies at just the right
    moment.
    
    Change-Id: I7728f8df82d62602d4d272f8023aa88678dd7d95
    related-to-bug: 8397711
    3rd time's the charm, right? Fix another instance where MediaCodec would
    
    not return from a stop() or release() call if mediaserver dies at just the right
    moment.
    
    Change-Id: I7728f8df82d62602d4d272f8023aa88678dd7d95
    related-to-bug: 8397711
    Correct MediaCodec + Surface behavior
    
    Assorted tweaks:
    - Allow signalEndOfInputStream() before ACodec is in Executing
      state (added message to two more states).
    - Return an error if signalEndOfInputStream() is called a second
      time on the same stream.
    - Require AndroidOpaque color format in createInputSurface().
    - Disallow dequeueInputBuffer() after an input surface has been
      created (boolean flag in MediaCodec tracks it).
    - Discard input surface when encoder is re-configure()ed (drop
      OMXNodeInstance's ref when we go back to Loaded).
    
    Bug 7991062
    
    Change-Id: Iff30f3036e14eb5a2f6536910dcf11aba33031ee
    Correct MediaCodec + Surface behavior
    
    Assorted tweaks:
    - Allow signalEndOfInputStream() before ACodec is in Executing
      state (added message to two more states).
    - Return an error if signalEndOfInputStream() is called a second
      time on the same stream.
    - Require AndroidOpaque color format in createInputSurface().
    - Disallow dequeueInputBuffer() after an input surface has been
      created (boolean flag in MediaCodec tracks it).
    - Discard input surface when encoder is re-configure()ed (drop
      OMXNodeInstance's ref when we go back to Loaded).
    
    Bug 7991062
    
    Change-Id: Iff30f3036e14eb5a2f6536910dcf11aba33031ee
    Implement Surface input to MediaCodec.
    
    Also, renamed a CHECK_INTERFACE macro that was clashing with the
    Binder version.
    
    Bug 7991062
    
    Change-Id: If5e6ed0a06d9f67975497676e4b05abe3aa3d6c0
    Implement Surface input to MediaCodec.
    
    Also, renamed a CHECK_INTERFACE macro that was clashing with the
    Binder version.
    
    Bug 7991062
    
    Change-Id: If5e6ed0a06d9f67975497676e4b05abe3aa3d6c0
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Allow for dynamic reconfiguration of the video bitrate used
    
    to encode video while running as a wfd source.
    
    Change-Id: I44f7b2350c88fc5807047c61bfe594ef8fa79275
    Allow for dynamic reconfiguration of the video bitrate used
    
    to encode video while running as a wfd source.
    
    Change-Id: I44f7b2350c88fc5807047c61bfe594ef8fa79275
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    MediaCodec: Add a method for getting the component name
    
    If the codec was chosen based on mime type, the caller does
    not know what component actually was chosen. This allows
    getting essential information (such as supported color formats,
    for a video encoder) for this component.
    
    Change-Id: Ie471f40f8104b37d27ced3dba5a54facc6504b1b
    MediaCodec: Add a method for getting the component name
    
    If the codec was chosen based on mime type, the caller does
    not know what component actually was chosen. This allows
    getting essential information (such as supported color formats,
    for a video encoder) for this component.
    
    Change-Id: Ie471f40f8104b37d27ced3dba5a54facc6504b1b
    Better power savings with wifi display code.
    
    No more polling the encoder for work to do, the encoder instead notifies
    if there's activity.
    
    Change-Id: Ia707211b4f5c5a6e6b70d750233d204a2d6bb778
    related-to-bug: 7248248
    Better power savings with wifi display code.
    
    No more polling the encoder for work to do, the encoder instead notifies
    if there's activity.
    
    Change-Id: Ia707211b4f5c5a6e6b70d750233d204a2d6bb778
    related-to-bug: 7248248
    Better power savings with wifi display code.
    
    No more polling the encoder for work to do, the encoder instead notifies
    if there's activity.
    
    Change-Id: Ia707211b4f5c5a6e6b70d750233d204a2d6bb778
    related-to-bug: 7248248
    Better power savings with wifi display code.
    
    No more polling the encoder for work to do, the encoder instead notifies
    if there's activity.
    
    Change-Id: Ia707211b4f5c5a6e6b70d750233d204a2d6bb778
    related-to-bug: 7248248
    Support IDR requests in wifi display, MediaCodec and ACodec.
    
    Change-Id: I596cf8dd61b63465437f78413186fad2be287244
    Support IDR requests in wifi display, MediaCodec and ACodec.
    
    Change-Id: I596cf8dd61b63465437f78413186fad2be287244
    Properly connect/disconnect to/from the native window in MediaCodec.
    
    Change-Id: Ib5bf90a3b81fca8ff2346235bc28a2bd0bc7bfb1
    related-to-bug: 6472161
    Submit codec specific data automatically
    
    if it is contained in the format passed to MediaCodec::configure.
    
    Change-Id: I8ef6755e8389ec47b44a9c70904ea6c03a00f4f2
    related-to-bug: 6364139
    Allow propagation of error information and description from the CryptoPlugin to
    
    the higher layers.
    
    Change-Id: I9f434ad55cdf575803c208bedf47b607baff2330
    related-to-bug: 6365261
    New API to support submitting encrypted buffers to the decoder.
    
    Change-Id: I69dd60e43078c4211c6123cf6e0ce90e676bf873
    related-to-bug: 6275919
    New Crypto services talking to the new crypto "HAL".
    
    Change-Id: I69ed31e7a8b4d69d1209d2d516f94d258f072566
    related-to-bug: 6275919
    Provisional support for secure decryption of media streams.
    
    Change-Id: Ib3982a9c960bfdb0cb7e1b174440b141b194cfbe
    Separate the notion of "stop" from that of "release", i.e.
    
    stop - means transition back to LOADED state and keeping the component
    instance allocated.
    
    release - means we get rid of the component completely.
    
    Change-Id: I40ad01ce70821faaad43f57999249904f9144924
    Implementation of a java media codec interface and associated tools.
    
    Change-Id: I13e54062d4de584355c5d82bb027a68aeaf2923b
    AwesomePlayer: correct stream type for offload
    
    canOffloadStream() function in stagefright utils forces the
    stream type to AUDIO_STREAM_MUSIC when querying the audio policy
    manager if a particular track is offloadable or not.
    This causes MP3 ringtones to be offloaded which is not a validated use case.
    
    The fix consists in using the actual stream type read from the AudioSink.
    
    Bug: 11410937.
    Change-Id: I44b8e033a8e785a79cdc291b142f80b5580bdc4d
    Public API changes for audio offload support.
    
    NOTE: this does _not_ include all private member variables added
    to classes as part of offload support. Only public/protected functions
    and stubs functions/variables needed to make the changes buildable.
    
    - isOffloadSupported() added to audio policy service
        A stub implementation is required to build, this always returns false
    - setParameters() added to IAudioTrack
        A stub implementation is required to build, this always returns
        INVALID_OPERATION
    
    - CBlk flag for stream end
    
    - Change AudioSystem::getRenderPosition() to take an audio_output_t
        so caller can specify which output to query
    
    - Add AudioSystem::isOffloadSupported()
        This is fully implemented down to the AudioFlinger function
        AudioPolicyServer::isOffloadSupported() which is just a stub
        that always returns false.
    
    - Add EVENT_STREAM_END to AudioTrack interface.
        STREAM_END is used to signal when the hardware has actually finished
        playing all the data it was sent.
    
    - Add event type enumeration to media player interface AudioSink callbacks
        so that the same callback can be used to handle multiple types of
        event. For offloaded tracks we also have to handle STREAM_END and
        TEAR_DOWN events
    
    - Pass audio_offload_info_t to various functions used for opening outputs,
        tracks and audio players. This passes additional information about the
        compressed stream down to the HAL when using offload.
        For publicly-available APIs this is an optional parameter (for some of
        the internal and low-level APIs around the HAL interface it is mandatory)
    
    - Add getParameters() and setParameters() API to AudioTrack
        Currently dummy implementations.
    
    - Change AudioPlayer contructor so that it takes a set of bitflags defining what
        options are required. This replaces the original bool which only specified
        whether to use deep buffering.
    
    - Changes to StageFright class definition related to handling tearing-down of
        an offloaded track when we need to switch back to software decode
    
    - Define new StageFright utility functions used for offloaded tracks
        Currently dummy implementations.
    
    - AudioFlinger changes to use extended audio_config_t.
        Fills in audio_offload_info_t member if this info is passed in when
        opening an output.
    
    - libvideoeditor changes required to add the new event type parameter
        to AudioSink callback functions
    
    - libmediaplayerservice changes required to add the new event type parameter
        to AudioSink callback functions
    
    Change-Id: I3ab41138aa1083d81fe83b886a9b1021ec7320f1
    Signed-off-by: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
    Signed-off-by: Eric Laurent <elaurent@google.com>
    Identify network servers and clients with a OS version related string
    
    and put the logic to create that string in one location instead of many...
    
    Change-Id: I1f729f2e7376cd3b45eea0e48f7bd10084b41b39
    Identify network servers and clients with a OS version related string
    
    and put the logic to create that string in one location instead of many...
    
    Change-Id: I1f729f2e7376cd3b45eea0e48f7bd10084b41b39
    Fragmented mp4 extractor
    
    Still experimental. Set property "media.stagefright.use-fragmp4" to true to
    enable.
    
    Change-Id: I210b9c5b5164b5c5eefc31309845ee881ac7db8e
    Fragmented mp4 extractor
    
    Still experimental. Set property "media.stagefright.use-fragmp4" to true to
    enable.
    
    Change-Id: I210b9c5b5164b5c5eefc31309845ee881ac7db8e
    Respect channel mask in ACodec and NuPlayer.
    
    Refactor conversion from MetaData into AMessage while we're at it.
    
    Change-Id: I5479129836ea4316e8de28cf1b472bf19e3ac4ab
    related-to-bug: 6439076
    A new OggExtractor/VorbisDecoder combo to support approximate seeking.
    
    Change-Id: Id5d0c1c8b1adc62896bb5ed951f7b5cfda811e95
    related-to-bug: 2654400
    eclair snapshot
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Adds VP9 decoding support for stagefright.
    
    Also change the VP8 encoder role name from
    video_encoder.vpx to video_encoder.vp8 for
    future VP9 encoder support.
    
    
    Requires the change in frameworks/native and media_codecs.xml
    corresponding to the device.
    
    
    VP9 decoding test will be added to cts repo later.
    Add GSM 6.10 decoder
    
    Supports Microsoft frame packing only, since that's what the sample
    file used.
    b/6620569
    
    Change-Id: Ia89d95bcbf0f8dcbaad42148a7401728f60e079d
    Add GSM 6.10 decoder
    
    Supports Microsoft frame packing only, since that's what the sample
    file used.
    b/6620569
    
    Change-Id: Ia89d95bcbf0f8dcbaad42148a7401728f60e079d
    Defines MediaPlayer APIs to support multiple audio/video/timedtext
    tracks.
    
    o Newly introduced APIs are (MediaPlayer):
      getTrackInfo() / addExternalSource() / enableTrack() / disableTrack().
    
    o Timed text tracks are supported only, for now.
    
    o TODOs:
     - Define the audio/video behavior for enableTrack and disableTrack.
     - Refactoring AwesomePlayer / TimedTextDriver so that all types of
       track index can be managed in the correct order and be ready for
       supporting audio/video tracks.
       (MediaExtractor and MediaSource for text file might be necessary.)
    
    Change-Id: Idb85e1b3f2ed49a64f377d05472dd6663ce94e07
    Support for an MPEG2 Program Stream extractor.
    
    Change-Id: I606d87c278f72b22a5b6d7ee57bce6b02e280d41
    Support mpeg1,2 audio and mpeg1,2,4 video content extraction from .ts streams.
    
    Change-Id: I9d2ee63495f161e30daba7c3aab16cb9d8ced6a5
    Initial CL for the timed text support:
    - Add support for MP4 timed text
    - Add API for app to turn on/off a text track
    - Add timed text metadata(language) in the MediaMetadataRetriever
    
    Change-Id: I0055beba38ac761627dbcc6d581ae9582d68bb94
    Support for divx files, i.e. mpeg 4 video + mpeg audio layer III in .avi files
    
    Change-Id: I6e1e989c43300ddb0d341e3e9183cdccd69eeae6
    related-to-bug: 4192562
    Add AAC extractor
    
    Change-Id: Iedb08525ac72e65ba98e5c791734da0720a0e3f6
    Bug 1804058 FLAC extractor
    
    Note: dependent on external/flac for libFLAC
    
    Implemented and tested:
     * FLAC container
     * mono and stereo
     * standard sample rates
     * standard bit depths
     * sniffer
     * media scanner
     * Vorbis comment metadata including album art
     * random access seeking with "torture test"
     * web browser integration for audio/flac (not audio/x-flac), but
       note that most web servers don't correctly report the MIME type
    
    Not implemented:
     * 24-bit to 16-bit dither or noise shaping in AudioFlinger
     * 96 kHz to 44.1 or 48 kHz downsampling low pass filter in AudioFlinger
     * replay gain is better done in AudioFlinger
     * multi-channel, would need AudioFlinger support
     * Ogg container, does not seem to be very popular yet
    
    Change-Id: I300873e8c0cfc2e95403d9adb5064d16a2923f17
    Add support for WV DRM
    
    Change-Id: I0408c5e0a488f112a84337b21b0cd4613a4da461
    Support for extracting G.711 a-law and mu-law audio from WAV files and a corresponding software decoder.
    
    Change-Id: I92685d09456c220b8c09842defb721bd55b0b9f6
    related-to-bug: 2900021
    Initial checkin of mpeg2 transport stream parser for stagefright.
    
    Change-Id: I328ce77404daf7127933b48c9d58ed504fb8fc6f
    Support for media extraction from .mkv/.mka Matroska files in stagefright.
    
    Change-Id: I4c26579828ad575523ccf58b0b5cb144046c04ca
    related-to-bug: 2483739
    A new OggExtractor/VorbisDecoder combo to support approximate seeking.
    
    Change-Id: Id5d0c1c8b1adc62896bb5ed951f7b5cfda811e95
    related-to-bug: 2654400
    Support for Ogg Vorbis decoding in stagefright.
    
    Set the magic property media.stagefright.enable-vorbis to true to use the new implementation instead of the standalon vorbis player for file-based playback. HTTP streaming of vorbis content will always go through stagefright.
    
    Change-Id: Ie3843a99fadb22372f89540d0f8d65196e0c2af8
    related-to-bug: 2654400
    Distinguish QCELP audio from mpeg4 audio, ignore QCELP audio tracks since we don't have a decoder for it, ignore potentially malformed metadata for AMR NB and WB tracks.
    
    Change-Id: Ic9a9198413431db4ea40bb63b9de91aa8a7183af
    related-to-bug: 2587341
    eclair snapshot
    Adds a WAVExtractor for 16-bit signed PCM audio wave files.
    Media MIME types now have corresponding constants in MediaDefs.h, new codec enumeration API.
    Squashed commit of the following:
    
    commit 3fa5f3ce910f34da0cedb8bcce1bd593db7eb740
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 27 14:48:54 2009 -0700
    
        Getting rid of more code now obsolete with the departure of OMXDecoder.
    
    commit e0d923ec0c7bb60bec8eb97739036a4c70c0feef
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 27 14:33:06 2009 -0700
    
        Remove obsoleted OMXDecoder class. OMXDecoder is dead, long live OMXCodec.
    Deprecate/remove now unused socketpair ipc communication in favour of exclusive binder use.
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    eclair snapshot
    Fixes to make libstagefright build for the simulator.
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    move libbinder's header files under includes/binder
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Support more MPEG4-LATM audio functionality.
    
    related-to-bug: 3474610
    
    Change-Id: I6dab40e8b465922c62be9ee7f168718822c6caac
    Now skipping extra header that the spec claimed shouldn't be present in LATM...
    In the absence of width/height information in the sdp, extract the dimensions from the avc codec specific data.
    
    Change-Id: I98c4194593c7e6e24f6fc339c862245111800293
    Initial checkin of mpeg2 transport stream parser for stagefright.
    
    Change-Id: I328ce77404daf7127933b48c9d58ed504fb8fc6f
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    eclair snapshot
    Fixes to make libstagefright build for the simulator.
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    move libbinder's header files under includes/binder
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    ANetworkSession and ParsedMessage are now part of stagefright foundation.
    
    Also fixes some bugs in ParseMessage and adds "WebSocket" mode to
    ANetworkSession, something that's opt-in and should not affect existing clients
    of the API.
    
    Change-Id: I86d5748e0d818231d85d3590d86c2b41d4f8b1f1
    Change ANetworkSession implementation to optionally attach timestamps
    
    to fragments of data to be transferred and to log statistics when data
    is finally submitted to the POSIX layer.
    
    Change-Id: Icbfcac203cdc5c9eac1634e84d34bb380b316a01
    Change ANetworkSession implementation to optionally attach timestamps
    
    to fragments of data to be transferred and to log statistics when data
    is finally submitted to the POSIX layer.
    
    Change-Id: Icbfcac203cdc5c9eac1634e84d34bb380b316a01
    Attempt to recover from network stalls by dropping frames on the source side.
    
    Change-Id: I5f9eb4f5acb624a9e5bc0087801fb5a4a9ade35c
    Attempt to recover from network stalls by dropping frames on the source side.
    
    Change-Id: I5f9eb4f5acb624a9e5bc0087801fb5a4a9ade35c
    Support for RTP/RTCP traffic over TCP sockets in wifi display code.
    
    This is opt-in through
    
    adb shell setprop media.wfd.enable-tcp true
    
    Change-Id: I49ab22a8c8d62690065631e781a7f0057e5ce557
    Support for RTP/RTCP traffic over TCP sockets in wifi display code.
    
    This is opt-in through
    
    adb shell setprop media.wfd.enable-tcp true
    
    Change-Id: I49ab22a8c8d62690065631e781a7f0057e5ce557
    Only run the wifi display RTSP server on demand, and only on the wifi direct
    
    interface.
    
    Change-Id: I7d3c44cb79cd40e73499f2d7ccf35c69b628e6d7
    Only run the wifi display RTSP server on demand, and only on the wifi direct
    
    interface.
    
    Change-Id: I7d3c44cb79cd40e73499f2d7ccf35c69b628e6d7
    Initial checkin of support for acting as a wifi display source
    
    Change-Id: I08f17efa0c7d007e17408feb7d4fbef0a19f531a
    Initial checkin of support for acting as a wifi display source
    
    Change-Id: I08f17efa0c7d007e17408feb7d4fbef0a19f531a
    Test to measure UDP roundtrip time between two devices on the same network.
    
    Change-Id: I4c9a5190efe18da8b6be7d68bda91df878c4118c
    Test to measure UDP roundtrip time between two devices on the same network.
    
    Change-Id: I4c9a5190efe18da8b6be7d68bda91df878c4118c
    Fix missing AOSP copyright headers for a bunch of media framework files
    
    bug - 4119349
    
    Change-Id: If5924e16a5f596d5d73d9beb66eaf5ac9a6f0e50
    Initial support for a true streaming player for mpeg2 transport streams.
    
    Change-Id: I153eec439d260a5524b21270e16d36940ec3161a
    An AHandler can now find its associated ALooper.
    
    Change-Id: Ic7087b8dcbc0d9abda272df0cb01b04b006f82ad
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    eclair snapshot
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    ALoopers can now be named (useful to distinguish threads).
    
    Change-Id: Ieabaddb2e3a9e3a7a5bc36e55cd0721b60dbd50e
    Various changes to improve rtsp networking, reduce packet loss and adapt to ALooper API changes.
    
    Change-Id: I110e19d5ce33e597add3ffbd3e3ff3815862396d
    Add an option to ALooper::start that allows it to call back into java or not.
    
    Change-Id: Iec172901a04a575d8d350bd162565f04677c3f26
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    ANetworkSession and ParsedMessage are now part of stagefright foundation.
    
    Also fixes some bugs in ParseMessage and adds "WebSocket" mode to
    ANetworkSession, something that's opt-in and should not affect existing clients
    of the API.
    
    Change-Id: I86d5748e0d818231d85d3590d86c2b41d4f8b1f1
    Initial checkin of support for acting as a wifi display source
    
    Change-Id: I08f17efa0c7d007e17408feb7d4fbef0a19f531a
    Initial checkin of support for acting as a wifi display source
    
    Change-Id: I08f17efa0c7d007e17408feb7d4fbef0a19f531a
    Test to measure UDP roundtrip time between two devices on the same network.
    
    Change-Id: I4c9a5190efe18da8b6be7d68bda91df878c4118c
    Test to measure UDP roundtrip time between two devices on the same network.
    
    Change-Id: I4c9a5190efe18da8b6be7d68bda91df878c4118c
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Provisional support for secure decryption of media streams.
    
    Change-Id: Ib3982a9c960bfdb0cb7e1b174440b141b194cfbe
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    Fix missing AOSP copyright headers for a bunch of media framework files
    
    bug - 4119349
    
    Change-Id: If5924e16a5f596d5d73d9beb66eaf5ac9a6f0e50
    Initial check-in of new caching/prefetching data source implementation.
    
    Change-Id: I97a6e3f03c69c9b1219f1f06bd109c0102f2c504
    experimental support for fragmented mp4 playback in nuplayer
    
    cherry picked from change 170999
    
    Change-Id: I407775f0290154ad4961134839a15c9f296424c0
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Unregister any handlers still registered on now "dead" ALoopers
    
    upon the death of an ALooper.
    
    Change-Id: I64c0835b8db04486204f3d0fa7173ee53708a116
    related-to-bug: 10106648
    Support for posting messages and synchronously waiting for a response.
    
    Change-Id: Id6c7a08c34fd5cb6c4632f78ece9e7898b29e52c
    ALooperRoster no longer holds strong references to handlers and loopers.
    
    Change-Id: I038d69b0a34eda1bfc5216d92c837a5ddf4fb802
    An AHandler can now find its associated ALooper.
    
    Change-Id: Ic7087b8dcbc0d9abda272df0cb01b04b006f82ad
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    Bump up the max number of items in an AMessage, remove overly stringent
    
    CHECK() limiting us to just audio/* or video/* tracks.
    
    related-to-bug: 6399405
    Change-Id: I9bdaf7e709665ecc22da8839c8b16c081dbf4535
    Add new APIs AMessage::(set|find)Buffer to make it safer to pass
    
    ABuffer objects through messages.
    
    Change-Id: I9f8b4e4c4767d0d70a0105e0c0813b754379b49d
    Implementation of a java media codec interface and associated tools.
    
    Change-Id: I13e54062d4de584355c5d82bb027a68aeaf2923b
    Support for posting messages and synchronously waiting for a response.
    
    Change-Id: Id6c7a08c34fd5cb6c4632f78ece9e7898b29e52c
    NuPlayer now properly sends MEDIA_SET_VIDEOSIZE notifications.
    
    Change-Id: I99b4223ad6ecfd8839a3c0e737fef3165565d76d
    related-to-bug: 3336496
    Properly announce decoder output format changes, make sure AMessage::dup does.
    
    Change-Id: Ia77f6b6d5e5c5055583740dfe876b8a3c22be9b6
    Initial support for a true streaming player for mpeg2 transport streams.
    
    Change-Id: I153eec439d260a5524b21270e16d36940ec3161a
    API Support for both synchronous and queued commands, optionally associated metadata.
    
    Change-Id: Idb90d64cb638942210c5822b3cba2f05b087d601
    Added AMessage::debugString() for debugging purposes.
    
    Change-Id: Id43ffd2c56d659dc29f37e277f8c7b38f11c1591
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    Some tweaks to HTTP live / nuplayer behaviour
    
    - play audio-only streams again
    - workaround for malformed streams that switch PIDs across bandwidths
    - attempt to pick a different bandwidth stream if the previously chosen one appears
      to be malformed/unsupported.
    
    Change-Id: I426d0a40dc725aa242f619d4c9d048b69aca55c9
    related-to-bug: 2368598
    Initial support for a true streaming player for mpeg2 transport streams.
    
    Change-Id: I153eec439d260a5524b21270e16d36940ec3161a
    Remove stagefright foundation's incompatible logging interface and update callsites.
    
    Change-Id: I45fba7d60530ea0f233ac3695a97306b6dc1795c
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    Unifying TimedTextDriver's resume() and start().
    
    (cherry picked from gtv bb23a2b7e06c59f56e353fd4a2a66a9b8179d425)
    
    Change-Id: If5f14549fa315c34e32d6fed7c1ea09deabceb63
    Adds resume() function
    
    o Revived resume() function to fix pause/resume bug. (Bug: 6663740)
    o Mannually cherry-picked from GTV change.
    (commit: ad1197226d1c6745959f0e469f510ca06f99489f)
    
    Change-Id: I77ac90085fb1f1d2e7eb706642978a4fa4d28b49
    Make timed text source type explicit in TimedTextDriver
    
    o related-to-bug: 5542712
    
    Change-Id: Ifdc730e616336e8b16783e8a5766f27df62a0592
    Fix for multiple audio/timed track feature implementation - part one
    
    o getTrackInfo now returns all tracks, rather than just the timed text tracks.
    o the index of the track info is kept to the same as the track index if the
      track is not from an external source
    o correctly maps the selectTrack() and unselectTrack() calls to the right
      track index
    
    o TODO:
      1) note that the selectTrack() and unselectTrack() only works for timed text
      track at present; 2) the lock is timed text specific
    
    o related-to-bug: 6110705
    
    Change-Id: Ib1feeef2184bc992930ace0d1197b6c00a2636d7
    Add external timed text source using a passed file descriptor
    
    o Also fixed a minor issue where the file length should be of type off64_t rather than size_t
    
    o related-to-bug: 5542712
    
    Change-Id: I35fd8ceea0bc75e553b7f4a99932cf58ea560c4e
    Defines MediaPlayer APIs to support multiple audio/video/timedtext
    tracks.
    
    o Newly introduced APIs are (MediaPlayer):
      getTrackInfo() / addExternalSource() / enableTrack() / disableTrack().
    
    o Timed text tracks are supported only, for now.
    
    o TODOs:
     - Define the audio/video behavior for enableTrack and disableTrack.
     - Refactoring AwesomePlayer / TimedTextDriver so that all types of
       track index can be managed in the correct order and be ready for
       supporting audio/video tracks.
       (MediaExtractor and MediaSource for text file might be necessary.)
    
    Change-Id: Idb85e1b3f2ed49a64f377d05472dd6663ce94e07
    Moves TimedTextDriver.h into include/media/stagefright/timedtext.
    
    So that other players can include TimedTextDriver.h properly.
    
    Change-Id: I15e72bf655de8555eef6244a6c853c27a0828a1d
    First step of refactoring 'timedtext' code.
    
    Goal
    1. Removed dependency of TimedTextPlayer on AwsomePlayer.
    2. Generalized TimedTextParser to TimedTextSource and its subclasses.
    
    Summary
    1. Introduced TimedTextDriver, TimedTextPlayer (new implementation),
    TimedTextSource (and its subclasses).
    2. Removed TimedTextParser.
    
    Remaining TODOs
    1. Revise VideoVidew, Gallery3D app, AwesomePlayer to check if
    'pause' and 'resume' works well.
    2. Consider revising MediaPlayer APIs such as setParameter() ->
    addTextSource(). Need more thoughts.
    
    Change-Id: Ie0c4f15b9690102de755cef6940f8c31ccf78e27
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Added permission check for all sensitive drm API calls
    
    o all drm calls using a DecryptHandle now check the permission before proceeding
    
    Change-Id: Ic992a991357876c6e4bfbfab4f5eec1fa0634a13
    DO NOT MERGE
    For bug 4422428
    Squashed commit of the following:
    
    commit ae2e13783db2284f40d3891e70e152dab941edfc
    Author: Gloria Wang <gwang@google.com>
    Date:   Fri May 13 11:43:11 2011 -0700
    
        Add one more DRM error code. For bug 4422428.
    
        Change-Id: I4e333f474c96c0e0f162dde4013ad32b336bebd6
    
    commit 0f88249d0cb5221f622cf1d1ac3cdccefb8f58a2
    Author: Gloria Wang <gwang@google.com>
    Date:   Fri Apr 29 10:44:46 2011 -0700
    
        Add DRM errors in the DRM frameworks to MediaErrors also.
        For bug 4350156.
    
        Change-Id: Ib5711ec642178a49203a448b7f5114e675d49394
    
    Change-Id: Ia02de462159400eef8c015d28531bf1dd6796a18
    Add one more DRM error code. For bug 4422428.
    
    Change-Id: I4e333f474c96c0e0f162dde4013ad32b336bebd6
    Add DRM errors in the DRM frameworks to MediaErrors also.
    For bug 4350156.
    
    Change-Id: Ib5711ec642178a49203a448b7f5114e675d49394
    Add one more field in DecryptHandle to support bug 4126624
    
    Change-Id: Ic7ea5fd211c4f8283de8fdf722f89b6a94e5750b
    do not merge: Cherry pick change I6529695c from master to partially fix bug 4126624.
    
    Change-Id: If724de60bd6da1becdffc815d5358ffe78629469
    Fix for 4084554.
    DRM framework support for enabling/disabling copy control settings from a DRM plugin
    
    Change-Id: I6529695cc4adbab2b9a63708bb459e3b77e07564
    Fix for bug 3477330
    This patch fixs a crash bug caused by using a NULL DecryptHandle pointer.
    Fix by using sp<DecryptHandle> instead.
    
    Change-Id: Icbd59858385e8256125a615a3c82656b25319d44
    Add support for WV plugin
    
    Change-Id: I0b9d0488f123c05ad2d94315236458f479e00b78
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Revert "Enhancement for OnInfo callback on DRM Framework"
    
    This reverts commit 5ff7836da0220b3097f36c8a5e82111816ebca62.
    
    Fixes Fatal signal 6 (SIGABRT)" when playing or downloading a video
    bug: 10542864
    
    Change-Id: I7f81a41c3acdbeb571a514b3f65e7ba37d403cca
    Enhancement for OnInfo callback on DRM Framework
    
    In DRM framework, plugins can transmit DrmInfoEvent to Java layer.
    Although DrmInfoEvent has several entries, current implementation
    can only convey integer and String. This change enables plugins
    uto propagate a hashmap to Java layer. The hashmap can have
    one or more Strings and one byte array as value.
    
    Changes are made by Sony Corporation.
    
    bug: 10459159
    
    Change-Id: Ic19265d4ad3db4eda66a3c27e1e08873a8f2a4d7
    (cherry picked from commit 4f782bf0cb69929ebf03de239e2c9bf8e82adf5e)
    Fix for bug 4126103.
    mMessage in DrmInfoEvent is a reference to the message string, so the
    temporary message created in the plugin was going out of scope and
    being destructed while the message was being sent. Changed DrmInfoEvent's
    mMessage to be const String8 instead of const String8&
    
    Change-Id: I174197ad24f3df997d3bc1f897658cfc53862636
    For issue 4082089
    Add more info and error events into the DRM framework
    
    Change-Id: I0bb3251c5947fc8e977d478e1ba46b242cb97e9d
    Update of DRM framework
    
     - Overload openDecryptSession() with uri parameter
       in order to accept URI of DRM content,
       Following API is added,
           DecryptHandle*openDecryptSession(const char* uri);.
     - Unify texisting three event types of processDrmInfo()
       so that caller of DRM framework does not have to handle many event types.
     - Let DrmManagerService call load/unload plugins API so that
       client of DRM framework does not have to manage plug-in load/unload.
     - Trivial fix in DrmManagerClient.java is also incorporated.
    
    Changes are made by Sony Corporation.
    
    Change-Id: If62b47fa0360718fdc943e6e6143671d7db26adc
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Update of DRM framework
    
     - Overload openDecryptSession() with uri parameter
       in order to accept URI of DRM content,
       Following API is added,
           DecryptHandle*openDecryptSession(const char* uri);.
     - Unify texisting three event types of processDrmInfo()
       so that caller of DRM framework does not have to handle many event types.
     - Let DrmManagerService call load/unload plugins API so that
       client of DRM framework does not have to manage plug-in load/unload.
     - Trivial fix in DrmManagerClient.java is also incorporated.
    
    Changes are made by Sony Corporation.
    
    Change-Id: If62b47fa0360718fdc943e6e6143671d7db26adc
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Let getOriginalMimeType() take a fd passed from drm java applications
    
    This patch enables the drm framework to avoid opening files directly.
    As a result, the drm framework no longer needs the sdcard read permision.
    
    o related-to-bug: 6426185
    
    Change-Id: Ib176c35ef4b1a1a405e8e954f19a7985266f2510
    Add a new API on DRM Framework for streaming
    
    In case of DRM streaming, decrypt session can start just after
    receiving the header, and it doesn't need to wait for the entire
    content. However, current API of DRM framework only accepts file
    handle or URI. With this new API, DRM session can start
    without waiting for the entire content.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I74375fe127df636067f1c300ea91654ba3d1aa3c
    Separate sniffing from session initialization
    
    This avoid lengthy/duplicate sniffing for drm plugins when a decrypt session is opened
    
    o The change is backward compatibile in that no update is required
      for existing drm plug-ins if they do not plan to provide separate
      sniffer/extractor
    
    related-to-bug: 5725548
    
    Change-Id: I7fc4caf82d77472da4e2bc7b5d31060fb54fd84c
    Fix for bug 4126624.
    Change the mDrmManagerClientImpl to sp to avoid double delete the pointer.
    
    Change-Id: I7aacea1bc58ab6425ef6f6f09472c6f2970ebb4d
    - Some change on the DrmManager in order to support feature request 4082089.
        In DrmManager, we currently lock both processDrmInfo() and onInfo() which is
        ok for now since processDrmInfo() is async call, and it will return without
        waiting for onInfo() call. However, if we send an event in processDrmInfo(),
        we will got deadlock here because we need to invoke onInf() which will wait
        for processDrmInfo() to release the lock. Use different lock for onInfo().
    - Remove some redundent mutex lock.
    
    Change-Id: I59c794f95ba1693425723224114fa975cf9b235f
    Fix for bug 3477330
    This patch fixs a crash bug caused by using a NULL DecryptHandle pointer.
    Fix by using sp<DecryptHandle> instead.
    
    Change-Id: Icbd59858385e8256125a615a3c82656b25319d44
    DRM Framework bug fixes.
    
    - Make sure to clean-up obsolete listeners.
    - Close cursor after using it.
    - Add virtual destructor to the base class of OnInfoListener.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: Ibb6dd625ef48e3597188f0d7c90f9d4c780b6139
    64-bit file size/offset support for DRM framework
    
    Change-Id: I0ba7147607825234df9fa28732e1bba344e82e79
    Update of DRM Framework.
    
    -Access permission handling
      Introduce an internal function which allows the desired process to
      access decryption flow. This new function is just for reference and
      each OEM manufacturer should implement/replace with their solutions.
    -New API, getMetadata()
      This API is for retrieving media metadata from container-based DRM,
      such as OMA forward-lock content. This API asks DRM agent to retrieve
      media metadata hiddein inside of DRM special container.
    -New API, acquireRights()
      This API wraps acquireDrmInfo() and processDrmInfo().
      If DRM agent has valid implementation of both APIs,
      Application can acquire DrmRights only by calling this API.
    -Bug fix in event loop of OnInfoListener.
      Separate OnInfo event loop from mail thread loop so as to avoid
      the issue that message is not dispatched when mail thread is busy.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I04ee3e0988152a71e221f2256d83253749a29da0
    Update of DRM framework
    
     - Overload openDecryptSession() with uri parameter
       in order to accept URI of DRM content,
       Following API is added,
           DecryptHandle*openDecryptSession(const char* uri);.
     - Unify texisting three event types of processDrmInfo()
       so that caller of DRM framework does not have to handle many event types.
     - Let DrmManagerService call load/unload plugins API so that
       client of DRM framework does not have to manage plug-in load/unload.
     - Trivial fix in DrmManagerClient.java is also incorporated.
    
    Changes are made by Sony Corporation.
    
    Change-Id: If62b47fa0360718fdc943e6e6143671d7db26adc
    Update of DRM framework.
    
      - Change "void" type of return value to "int" for returning status.
      - Add some of overloaded Java APIs which accept database Uri as input.
      - Add asynchronous APIs
      - Add OnEventListener and OnErrorListener for asynchronous APIs
      - Disable debug log
      - Change decrypt() API to accept an optional buffer needed by some of DRM schemes
    
    Changes are incorporated by Sony Corporation.
    
    Change-Id: I414a165e22cc79be6ea7cd28041788aa2b6b8f7c
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Update of DRM Framework.
    
    -Access permission handling
      Introduce an internal function which allows the desired process to
      access decryption flow. This new function is just for reference and
      each OEM manufacturer should implement/replace with their solutions.
    -New API, getMetadata()
      This API is for retrieving media metadata from container-based DRM,
      such as OMA forward-lock content. This API asks DRM agent to retrieve
      media metadata hiddein inside of DRM special container.
    -New API, acquireRights()
      This API wraps acquireDrmInfo() and processDrmInfo().
      If DRM agent has valid implementation of both APIs,
      Application can acquire DrmRights only by calling this API.
    -Bug fix in event loop of OnInfoListener.
      Separate OnInfo event loop from mail thread loop so as to avoid
      the issue that message is not dispatched when mail thread is busy.
    
    Changes are made by SEMC and Sony.
    
    Change-Id: I04ee3e0988152a71e221f2256d83253749a29da0
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Upintegrate the common_time service from ics-aah.
    
    Move the common_time service developed in the ics-aah branch back into
    master.
    
    The common_time service is a small service build to synchronize an
    arbitrary timeline amongst peers on a local sub-net.  While running
    and configured, the service will elect a master from the set of
    available devices within the subnet, define a relationship between the
    common_time timeline the local time timeline (provided by the local
    time HAL), and then attempt to maintain synchronization between common
    and local time by controlling the frequency of the local time clock
    via the HAL, or by disciplining local time in the digital domain if
    the local time HAL implementation does not support HW slewing.
    
    On its own, the native common time service will do nothing until it is
    configured.  The CommonTimeManagementService (running out of the
    system server process) is responsible for implementing policy
    regarding configuration and operation of the common_time service and
    will be added in a subsequent CL.
    
    Change-Id: I71292f9b9b1797665865689c4572c9d3a0552f64
    Signed-off-by: John Grossman <johngro@google.com>
    Add native common time config service.
    
    Define a native service interface for configuring and controlling the
    common time service.  Implement the native marshallers and stub the
    implementation of the new interface.
    
    Change-Id: Ia6a6a20ef3d221e8829c55be1dd5f98ed996c610
    Upintegrate the common_time service from ics-aah.
    
    Move the common_time service developed in the ics-aah branch back into
    master.
    
    The common_time service is a small service build to synchronize an
    arbitrary timeline amongst peers on a local sub-net.  While running
    and configured, the service will elect a master from the set of
    available devices within the subnet, define a relationship between the
    common_time timeline the local time timeline (provided by the local
    time HAL), and then attempt to maintain synchronization between common
    and local time by controlling the frequency of the local time clock
    via the HAL, or by disciplining local time in the digital domain if
    the local time HAL implementation does not support HW slewing.
    
    On its own, the native common time service will do nothing until it is
    configured.  The CommonTimeManagementService (running out of the
    system server process) is responsible for implementing policy
    regarding configuration and operation of the common_time service and
    will be added in a subsequent CL.
    
    Change-Id: I71292f9b9b1797665865689c4572c9d3a0552f64
    Signed-off-by: John Grossman <johngro@google.com>
    Add marshallers for the new common clock methods.
    
    Add marshallers and stub implementations for new methods in the common
    clock interface to support new functionality being added in the
    process of integrating the common time service more closely with the
    Java level of Android.
    
    Change-Id: Iac2d3fb405d1b64cea1d8e13f988160afb76a06d
    Move the definition of time server state.
    
    Move the State enum up to the ICommonClock interface so it can be
    returned for status/debugging up to clients.
    
    Change-Id: I81fef5b96ffc69a4f2e9801b3744feea099ccd47
    De-AAH-ify the common time service.
    
    Bulk name change to remove references to Android@Home from the common time
    service in preparation for cleanup and up-integration into the master
    branch.  Basically, aah_timesrv is now common_time.
    
    Change-Id: I3d3db212f96e8ba171aa36b9c58e27e4a336cb0a
    Whitespace
    
    Fix indentation, and add blank lines in key places for clarity
    
    Change-Id: I57a0a8142394f83203161aa9b8aa9276abf3ed7c
    Upintegrate the common_time service from ics-aah.
    
    Move the common_time service developed in the ics-aah branch back into
    master.
    
    The common_time service is a small service build to synchronize an
    arbitrary timeline amongst peers on a local sub-net.  While running
    and configured, the service will elect a master from the set of
    available devices within the subnet, define a relationship between the
    common_time timeline the local time timeline (provided by the local
    time HAL), and then attempt to maintain synchronization between common
    and local time by controlling the frequency of the local time clock
    via the HAL, or by disciplining local time in the digital domain if
    the local time HAL implementation does not support HW slewing.
    
    On its own, the native common time service will do nothing until it is
    configured.  The CommonTimeManagementService (running out of the
    system server process) is responsible for implementing policy
    regarding configuration and operation of the common_time service and
    will be added in a subsequent CL.
    
    Change-Id: I71292f9b9b1797665865689c4572c9d3a0552f64
    Signed-off-by: John Grossman <johngro@google.com>
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    eclair snapshot
    Fixes to make libstagefright build for the simulator.
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    move libbinder's header files under includes/binder
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Upintegrate the common_time service from ics-aah.
    
    Move the common_time service developed in the ics-aah branch back into
    master.
    
    The common_time service is a small service build to synchronize an
    arbitrary timeline amongst peers on a local sub-net.  While running
    and configured, the service will elect a master from the set of
    available devices within the subnet, define a relationship between the
    common_time timeline the local time timeline (provided by the local
    time HAL), and then attempt to maintain synchronization between common
    and local time by controlling the frequency of the local time clock
    via the HAL, or by disciplining local time in the digital domain if
    the local time HAL implementation does not support HW slewing.
    
    On its own, the native common time service will do nothing until it is
    configured.  The CommonTimeManagementService (running out of the
    system server process) is responsible for implementing policy
    regarding configuration and operation of the common_time service and
    will be added in a subsequent CL.
    
    Change-Id: I71292f9b9b1797665865689c4572c9d3a0552f64
    Signed-off-by: John Grossman <johngro@google.com>
    Explicitly manage common clock client lifetimes.
    
    Change the CCHelper class to be an instanced instead of a static
    pattern.  The CCHelper instances all share an interface to the common
    clock service and register/unregister a callback handler in response
    to there being CCHelper instance in the system or not.  This brings
    usage of the CCHelper into like with the new auto-disable
    functionality of the common time service.  For any given process,
    whenever there are CCHelper instances active, the process will
    maintain a callback target to the common clock service and will be
    considered to be an active client.
    
    Also change all of the users of the CCHelper interface to manage the
    lifecycle of their new CCHelper instances.
    
    Change-Id: I7c28c5d70d9b07ba7407b4ac706e7e7d7253001b
    De-AAH-ify the common time service.
    
    Bulk name change to remove references to Android@Home from the common time
    service in preparation for cleanup and up-integration into the master
    branch.  Basically, aah_timesrv is now common_time.
    
    Change-Id: I3d3db212f96e8ba171aa36b9c58e27e4a336cb0a
    mv libcpustats from frameworks/native to frameworks/av
    
    OK to lose history
    
    Change-Id: Ieca78edc5dfe479dd7ea48fe7e0f3c164356cee3
    mv libcpustats from frameworks/native to frameworks/av
    
    OK to lose history
    
    Change-Id: Ieca78edc5dfe479dd7ea48fe7e0f3c164356cee3
    mv libcpustats from frameworks/native to frameworks/av
    
    OK to lose history
    
    Change-Id: Ieca78edc5dfe479dd7ea48fe7e0f3c164356cee3
    Camera: Implement getCameraCharacteristics
    
    Bug: 10904541
    Bug: 10360518
    Change-Id: Ie9ca6b3b0b5f2fe529e6b0decc193096e770a017
    Refactor CameraService to handle errors properly.
    
    Bug: 10361136
    
    -Connect calls now return status_t error flags.
    
    Change-Id: Idca453b111e5df31327f6c99ebe853bb2e332b95
    Initial implementation of android.hardware.photography.CameraDevice (service)
    
    * Verified preview streaming requests
    * Other things *should* work but unverified / unimplemented in client side
    
    Missing:
    * CameraService needs to return static camera info metadata
    
    Bug: 9213377
    Change-Id: I71568560fcf18d0e2b408ed1c4d0066647314868
    camera: Make some binder interfaces compatible with AIDL
    
    Done:
    * ICameraService
    * ICameraServiceListener
    
    Partial:
    * ICamera (disconnect only)
    * IProCameraUser (disconnect only)
    
    Bug: 9213377
    Change-Id: I8e2e6e05cfd02ec36be1d5b2c551f10ffb43b5b4
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Remove new camera connect API.
    
    Applications are not resumed under the lock screen now.
    This API is not needed anymore.
    
    bug:5584464
    Change-Id: I115daf6b647348617ec0fc05b626878c945b9b29
    Add a new camera open API that allows taking the ownership.
    
    The purpose is to let face unlock always get the camera
    successfully. What happened was the camera applications may
    have opened the camera in onResume under the lock screen.
    This API lets face unlock take the camera from the camera
    application. A new permission will be added, so other
    applicatoins won't be able to take the camera from the face
    unlock.
    
    bug:5584464
    
    Change-Id: Ib3d9dcbc2161815b68db42327dc01148453704c6
    Change camera interface to support multiple cameras.
    
    Change-Id: Ie88fe706d2278acf762eca87780de349434778a4
    Support multiple cameras in framework.
    
    Change-Id: I081f0fbdca4b633715ea7c3b3d42f8662d27598a
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Refactor CameraService to handle errors properly.
    
    Bug: 10361136
    
    -Connect calls now return status_t error flags.
    
    Change-Id: Idca453b111e5df31327f6c99ebe853bb2e332b95
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    camera: Make some binder interfaces compatible with AIDL
    
    Done:
    * ICameraService
    * ICameraServiceListener
    
    Partial:
    * ICamera (disconnect only)
    * IProCameraUser (disconnect only)
    
    Bug: 9213377
    Change-Id: I8e2e6e05cfd02ec36be1d5b2c551f10ffb43b5b4
    Pass camera frame metadata from camera service to Java.
    
    bug:4460717
    Change-Id: I2fae6e1dfca6b8f3a5ee5716fc7817f5417bf657
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    camera: Make some binder interfaces compatible with AIDL
    
    Done:
    * ICameraService
    * ICameraServiceListener
    
    Partial:
    * ICamera (disconnect only)
    * IProCameraUser (disconnect only)
    
    Bug: 9213377
    Change-Id: I8e2e6e05cfd02ec36be1d5b2c551f10ffb43b5b4
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    ProCamera: Add getInfo for getting static metadata (and a test)
    
    Change-Id: I3b87dfbc621d98bf41f37a892a1012baf85b5166
    ProCamera: Add getInfo for getting static metadata (and a test)
    
    Change-Id: I3b87dfbc621d98bf41f37a892a1012baf85b5166
    Camera: Change ProCamera to take IGraphicBufferProducer
    
    Change-Id: Iec62eead6d179aa5486f7719143340976bb76e7d
    Camera: Change ProCamera to take IGraphicBufferProducer
    
    Change-Id: Iec62eead6d179aa5486f7719143340976bb76e7d
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Add framework support for camcorder zoom.
    
    The purpose of ICameraRecordingProxy and ICameraRecordingProxyListener is to
    allow applications using the camera during recording.
    
    Camera service allows only one client at a time. Since camcorder application
    needs to own the camera to do things like zoom, the media recorder cannot
    access the camera directly during recording. So ICameraRecordingProxy is a proxy
    of ICamera, which allows the media recorder to start/stop the recording and
    release recording frames. ICameraRecordingProxyListener is an interface that
    allows the recorder to receive video frames during recording.
    
    ICameraRecordingProxy
      startRecording()
      stopRecording()
      releaseRecordingFrame()
    
    ICameraRecordingProxyListener
      dataCallbackTimestamp()
    
    The camcorder app opens the camera and starts the preview. The app passes
    ICamera and ICameraRecordingProxy to the media recorder by
    MediaRecorder::setCamera(). The recorder uses ICamera to setup the camera in
    MediaRecorder::start(). After setup, the recorder disconnects from camera
    service. The recorder calls ICameraRecordingProxy::startRecording() and
    passes a ICameraRecordingProxyListener to the app. The app connects back to
    camera service and starts the recording. The app owns the camera and can do
    things like zoom. The media recorder receives the video frames from the
    listener and releases them by ICameraRecordingProxy::releaseRecordingFrame.
    The recorder calls ICameraRecordingProxy::stopRecording() to stop the
    recording.
    
    The call sequences are as follows:
    1. The app: Camera.unlock().
    2. The app: MediaRecorder.setCamera().
    3. Start recording
       (1) The app: MediaRecorder.start().
       (2) The recorder: ICamera.unlock() and ICamera.disconnect().
       (3) The recorder: ICameraRecordingProxy.startRecording().
       (4) The app: ICamera.reconnect().
       (5) The app: ICamera.startRecording().
    4. During recording
       (1) The recorder: receive frames from ICameraRecordingProxyListener.dataCallbackTimestamp()
       (2) The recorder: release frames by ICameraRecordingProxy.releaseRecordingFrame().
    5. Stop recording
       (1) The app: MediaRecorder.stop()
       (2) The recorder: ICameraRecordingProxy.stopRecording().
       (3) The app: ICamera.stopRecording().
    
    bug:2644213
    
    Change-Id: I15269397defc25cbbcae16abc071c8349c123122
    Camera HAL3/API1: Add support for the partial result quirk.
    
    - Camera2Client:
     - Detect partial result quirk
    - Camera3Device:
     - Accumulate all partial results together
     - Fire off 3A-only result once all 3A states are available
    - FrameProcessorBase:
     - Filter out partials, don't send to listeners
    - FrameProcessor:
     - Skip face detect on partials
     - Make sure to only handle a 3A update for a given frame once
     - Trigger AF notifications when AF mode or trigger changes, to
       properly detect all AF transitions.
    
    Bug: 11115603
    Change-Id: Iea8aa73c568701562a46071f7ea100624251d10b
    Initial implementation of android.hardware.photography.CameraDevice (service)
    
    * Verified preview streaming requests
    * Other things *should* work but unverified / unimplemented in client side
    
    Missing:
    * CameraService needs to return static camera info metadata
    
    Bug: 9213377
    Change-Id: I71568560fcf18d0e2b408ed1c4d0066647314868
    Camera: Add input side to camera3 HAL device
    
    - Stream creation/deletion
    - Request submission
    - Request thread loop
    - Add get() to CameraMetadata to allow HAL submission while retaining
      ownership.
    
    Change-Id: I271f72bcbe9557eded43cbcbfe789109857f8144
    Camera: Add input side to camera3 HAL device
    
    - Stream creation/deletion
    - Request submission
    - Request thread loop
    - Add get() to CameraMetadata to allow HAL submission while retaining
      ownership.
    
    Change-Id: I271f72bcbe9557eded43cbcbfe789109857f8144
    Camera: Add exists function to CameraMetadata
    
    Change-Id: I081f61417fca7c8408e9e767129647ddce5364ab
    Camera: Add exists function to CameraMetadata
    
    Change-Id: I081f61417fca7c8408e9e767129647ddce5364ab
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Factor out Camera2Client::Parameters
    
    Move the parameter structure and the various utility methods using it
    to its own class. Rename LockedParameters to SharedParameters to match
    the Mutex naming convention.
    
    Also move CameraMetadata to camera2 directory for organization.
    
    No functional changes.
    
    Bug: 6243944
    Change-Id: Ie60b535936ecfda9bf23361d52604abf515c83d0
    Camera2: Use CameraMetadata wrapper class.
    
    Wrap the use of the camera_metadata library inside a CameraMetadata
    class to avoid memory leaks, improve code clarity, and increase type
    safety.
    
    Bug: 6243944
    Change-Id: I90ca592b5875e27e4c58ea1ca680582dc3c3b56a
    Camera1: Set preview to be asynchronous, and remove dead code
    
    - Use the controlledByApp flag to make sure application-bound
      preview buffer queue is asynchronous as before
    - Remove setPreviewDisplay in service, since it is no longer in
      the binder interface
    - Rename setPreviewTexture to setPreviewTarget, to make it clear it's
      the only game in town now. Rename only on the binder level and service
      for now.
    
    Bug: 10312644
    Change-Id: Icd33a462022f9729a63dc65c69b755cb7969857e
    camera: Make some binder interfaces compatible with AIDL
    
    Done:
    * ICameraService
    * ICameraServiceListener
    
    Partial:
    * ICamera (disconnect only)
    * IProCameraUser (disconnect only)
    
    Bug: 9213377
    Change-Id: I8e2e6e05cfd02ec36be1d5b2c551f10ffb43b5b4
    Camera: Add preview callback surface support
    
    - Add call to set a preview callback surface
    - Implement support for HAL2/3 devices
    - Still need HAL1 implementation
    
    Change-Id: I0dc0bd72e43d871aa487858d1665c1efca633ffe
    remove uses of Surface in favor or IGraphicBufferProducer
    
    Change-Id: I13d7a9553aa335bca790a3a59d389d7533c83d57
    remove uses of Surface in favor or IGraphicBufferProducer
    
    Change-Id: I13d7a9553aa335bca790a3a59d389d7533c83d57
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    frameworks/base: some camera-interface cleanup
    
    Methods getNumberOfVideoBuffers() and getVideoBuffer() as well as struct
    image_rect_struct are no longer used (instead, the necessary information is
    passed through ANativeWindow.)
    
    Change-Id: If4b11446fc9ccbde1f6b45bc70c0d0b8e54376eb
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Application-managed callback buffer support for raw image
    
    bug - 3292153
    
    Change-Id: I9789f7c5cde3a3889d7375e881181e9152d95fc2
    Add camera service support for SurfaceTexture.
    
    This change enables the use of a SurfaceTexture in place of a Surface as
    the destination of camera preview frames.
    
    Change-Id: Ic70d404c8fe261e9d5da6f1de93d6babb5b191cb
    Camera framework change required for 0-memcpy recording
    
    bug - 3042125
    
    Change-Id: I46eb7a10b5394086b353fd73e4503beceeed76f1
    Change the framework to use the new camera preview path.
    
    This change makes the camera HAL interface take an ANativeWindow interface from
    which all the camera preview buffers will be allocated.  The framework code
    running in application processes now passes a Surface object rather than an
    ISurface to the camera server via Binder when setting the preview surface.  The
    camera server then forwards that Surface object (which implements the
    ANativeWindow interface) to the camera HAL, which uses it to communicate with
    SurfaceFlinger to allocate the camera preview buffers.
    
    Change-Id: Ie438f721559cd7de5e4f848a26d96360dda07b5f
    split libsurfaceflinger_client and libcamera_client out of libui
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    camera: Make some binder interfaces compatible with AIDL
    
    Done:
    * ICameraService
    * ICameraServiceListener
    
    Partial:
    * ICamera (disconnect only)
    * IProCameraUser (disconnect only)
    
    Bug: 9213377
    Change-Id: I8e2e6e05cfd02ec36be1d5b2c551f10ffb43b5b4
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: ProClient add asynchronous locks and such
    
    Change-Id: I551e5e5e76d9be733fab5224beaa7309268c0f38
    Camera: ProClient add asynchronous locks and such
    
    Change-Id: I551e5e5e76d9be733fab5224beaa7309268c0f38
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Pass camera frame metadata from camera service to Java.
    
    bug:4460717
    Change-Id: I2fae6e1dfca6b8f3a5ee5716fc7817f5417bf657
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add framework support for camcorder zoom.
    
    The purpose of ICameraRecordingProxy and ICameraRecordingProxyListener is to
    allow applications using the camera during recording.
    
    Camera service allows only one client at a time. Since camcorder application
    needs to own the camera to do things like zoom, the media recorder cannot
    access the camera directly during recording. So ICameraRecordingProxy is a proxy
    of ICamera, which allows the media recorder to start/stop the recording and
    release recording frames. ICameraRecordingProxyListener is an interface that
    allows the recorder to receive video frames during recording.
    
    ICameraRecordingProxy
      startRecording()
      stopRecording()
      releaseRecordingFrame()
    
    ICameraRecordingProxyListener
      dataCallbackTimestamp()
    
    The camcorder app opens the camera and starts the preview. The app passes
    ICamera and ICameraRecordingProxy to the media recorder by
    MediaRecorder::setCamera(). The recorder uses ICamera to setup the camera in
    MediaRecorder::start(). After setup, the recorder disconnects from camera
    service. The recorder calls ICameraRecordingProxy::startRecording() and
    passes a ICameraRecordingProxyListener to the app. The app connects back to
    camera service and starts the recording. The app owns the camera and can do
    things like zoom. The media recorder receives the video frames from the
    listener and releases them by ICameraRecordingProxy::releaseRecordingFrame.
    The recorder calls ICameraRecordingProxy::stopRecording() to stop the
    recording.
    
    The call sequences are as follows:
    1. The app: Camera.unlock().
    2. The app: MediaRecorder.setCamera().
    3. Start recording
       (1) The app: MediaRecorder.start().
       (2) The recorder: ICamera.unlock() and ICamera.disconnect().
       (3) The recorder: ICameraRecordingProxy.startRecording().
       (4) The app: ICamera.reconnect().
       (5) The app: ICamera.startRecording().
    4. During recording
       (1) The recorder: receive frames from ICameraRecordingProxyListener.dataCallbackTimestamp()
       (2) The recorder: release frames by ICameraRecordingProxy.releaseRecordingFrame().
    5. Stop recording
       (1) The app: MediaRecorder.stop()
       (2) The recorder: ICameraRecordingProxy.stopRecording().
       (3) The app: ICamera.stopRecording().
    
    bug:2644213
    
    Change-Id: I15269397defc25cbbcae16abc071c8349c123122
    - Add another parameter in notify() to be able to send timed text sample
    through listener during video playback.
    - Add OnTimedTextListener in the MediaPlayer
    For feature request 800939.
    
    Change-Id: I65072c27acb4c0037109a72be38c73e9f667420f
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add LG camera HAL parameters (Cherry-picked from CM's 584132f)
    
    Conflicts:
            include/camera/CameraParameters.h
    DO NOT MERGE: Remove experimental parameters for burst mode
    
    Bug: 7248756
    Change-Id: I3aaf2da4791b2a13e1e788b2914e4c51c529a75d
    DO NOT MERGE: Remove experimental parameters for burst mode
    
    Bug: 7248756
    Change-Id: I3aaf2da4791b2a13e1e788b2914e4c51c529a75d
    Camera: Add HDR scene mode constants.
    
    Change-Id: I78b1f8ca3c1a03222ed363db26d9a09cf0b13528
    Camera: Add HDR scene mode constants.
    
    Change-Id: I78b1f8ca3c1a03222ed363db26d9a09cf0b13528
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera: Add OPAQUE pixel format to CameraParameters
    
    This is only used to support recording with HAL 2 in the
    KEY_VIDEO_FRAME_FORMAT parameter, and is not exposed to applications.
    
    Bug: 6243944
    Change-Id: I5976a748d199ae98189bd03af5bbd9e18cbd6bf0
    Move CameraParameters header to join rest of camera library.
    
    CameraParameters was moved over to frameworks/native before
    frameworks/av was created, since it is referenced by HAL
    implementations. Move it to frameworks/av to keep it together with its
    implementation.
    
    Bug: 6500863
    Change-Id: If1a3b7768bedeb825729c3cdd55e8fcea04b7369
    Move CameraParameters.h to frameworks/native.
    
    CameraParameters.h is indirectly required to implement the Camera
    HAL. Move it to frameworks/native.
    
    Bug: 6171735
    Change-Id: I1bf4db228333be16fc7caa3c51280a9495293011
    Revert "Merge "Update camera continuous autofocus javadoc." into ics-mr0"
    
    This reverts commit 4b6353ea0265bfed52d0637abd1b17596ce25ff0, reversing
    changes made to af675222f6340a8a9edbe9e8635014a18521e5e0.
    merge in ics-factoryrom-2-release history after reset to ics-mr0
    Revert "Merge "Update camera continuous autofocus javadoc." into ics-mr0"
    
    This reverts commit 4b6353ea0265bfed52d0637abd1b17596ce25ff0, reversing
    changes made to af675222f6340a8a9edbe9e8635014a18521e5e0.
    Update camera continuous autofocus javadoc.
    
    Suppose applications call autoFocus in CAF picture mode. If
    CAF is in the middle of scanning, the picture is very likely to
    be blurry. Change focus callback to return when the scanning
    finishes.
    
    bug:5514415
    Change-Id: Ibcb8f92a5263d7dbd7cce54df3617fb21c6255d4
    Improve camera javadoc and fix some errors.
    
    bug:5169599
    Change-Id: Ic2205770753ff462135f884fee0a888ca8ec832d
    Add video stabilization control to Camera parameters.
    
    Hardware video stabilization reduces camera shake in preview
    and in recorded videos. It has no effect on still image capture.
    
    Convenience accessor methods hidden for now.
    
    Change-Id: Ie18450bff662b2ef98b85d19719beefc180975fc
    Update camera javadoc about AE and AWB lock.
    
    - Autofocus does not lock AE and AWB.
    - stopPreview and takePicture do not clear AE and AWB locks.
    
    bug:5356404
    
    Change-Id: I55d9b35f4ff746ecd2bff112c2674f1aa2543aca
    Add video snapshot camera parameter.
    
    The API is still hidden.
    
    bug:5187868
    
    Change-Id: I59e1b5774ca32be049723d1a0887faa90d8884bb
    Add new camera focus mode FOCUS_MODE_CONTINUOUS_PICTURE.
    
    The API is still hidden.
    
    bug:5086125
    Change-Id: I69268a95ad6aae249771d3a8dfb423ffe2d87081
    Add camera bayer image format.
    
    The API are hidden.
    
    bug:5086073
    
    Change-Id: Ic9a53e5d5007ad3f12a28406ee25098227f14cbc
    Add camera recording hint parameter.
    
    The API is still hidden.
    
    bug:4266229
    Change-Id: I5e4c24e9e2808582aecb55ac4f1d5be3ed7e36a2
    Add camera face detection API.
    
    API are still hidden.
    
    bug:4460717
    Change-Id: I1a515061f141a89bd61c875257712789fb15d2d4
    Improve android.hardware.Camera.Area javadoc.
    
    bug:4553469
    Change-Id: Iae88af354fee4925cb7978572c27f6dd5595ca59
    CameraParameters: add PIXEL_FORMAT_RGBA8888
    
    Change-Id: I2780e936f5b4628d506ac4e6947b78ef831fbde8
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Add auto-white balance locking to the Camera API.
    
    Adds a new camera parameter for locking auto-white balance to its
    current value. Also adds a function for checking if auto-white balance
    lock is supported by the current platform. Lock semantics match that
    of the auto-exposure lock.
    
    Hidden for now.
    
    Change-Id: Id59339a4be84d55c1b0b8473d765b6aa765999b2
    Add an auto-exposure lock feature to the Camera API.
    
    Adds a new camera parameter for locking auto-exposure to its current
    value. Also adds a function for checking if auto-exposure lock is
    supported by the current platform.
    
    Hidden for now.
    
    Change-Id: Id452371191ab220318ce2cb98b8ee91bdde9aab6
    Clarify the meaning of weight in the focus and metering area HAL.
    
    Weigh values must be less than 1000, but have no restriction on their
    sum. Weights should be interpreted as per-pixel values, meaning larger
    areas will have more influence over focus/metering than smaller areas
    of the same weight.
    
    Change-Id: I988b74f988ddba2ff0c49d078ff3174b47cbae18
    Add camera metering area API.
    
    The API are still hidden.
    
    bug:3475893
    Change-Id: Id4147528def5e0fe067e1a3ed315fa34c14a0640
    Add camera focus area API.
    
    The API are still hidden.
    
    bug:3475893
    
    Change-Id: I92405c9e332b7fb141788cda7ebc9705dd666c67
    Add YV12 preview format to camera parameter constants.
    
    bug:3463624
    Change-Id: I8f2992dadfd3fb9e3c9d67743e52da7f3212827e
    Add preferred preview size support in the camera framework
    
    bug - 3237021
    
    Change-Id: Ica8a3ae5cfbee462b74de98770e33277186c9a2b
    Improve camera documentation.
    
    bug:3212606
    Change-Id: Iee7106e4665c08a4c75471114010b75d63ac74ce
    Video size retrieval/configuration support in camera hal
    
    This is the first part of the camera hal change required for
    0-memcpy of input video frames for video recording.
    
    o removed check in setVideoSize()/getVideoSize() for impl consistency
    
    Change-Id: I01274a62b9f9eaf32154d98f8d0bfedacf645698
    Rename FOCUS_MODE_CONTINUOUS to FOCUS_MODE_CONTINUOUS_VIDEO.
    
    This constant is not public yet. Continuous autofocus should
    behave differently in still camera and camcorder. In camcorder,
    lens movement may be more smooth. And the triggers to start a
    new focus search may be different. If there is a need,
    FOCUS_MODE_CONTINUOUS_PHOTO can be added in the future.
    
    Change-Id: I05df9e491aca37829be3df92a73b952f26c86a4a
    Add YUV420P color format support for video output from camera hal
    
    Change-Id: I5c8266348d0840361c8095ce351ac85c44d4068f
    Remove camera metering mode API.
    
    Metering mode is not supported yet.
    
    Change-Id: Id6906d6ab0cd1a9dcbc5c303d8d5081b2cda699e
    Add camera fps range API.
    
    Original preview frame rate API assumes the frame rate
    is fixed. It does not not work with auto frame rate camera.
    
    Change-Id: I38f7122ac8ec844ffd63558dc0763ffa17b0926a
    Adding getSupportedPreviewSizes to CameraParameters.DO NOT MERGE
    
    Moved functionality to parse string of sizes from getSupportedPictureSizes
    to parseSizesList.
    Added getSupportedPreviewSizes which returns a list of supported preview sizes.
    
    Change-Id: I41d4f62f9f1641e9e9258aa2ebaeda13ba846c02
    Adding getSupportedPictureSizes to CameraParameters.DO NOT MERGE
    
    Also added a struct 'Size' containing a width and a height field.
    Modified parse_size to optionally set an end pointer pointing to the
    character after the found size.
    
    Change-Id: I0c95ebf1ad4684721b32165f363db7d4d15a1b19
    Document that autoFocus must be called in auto and macro mode.
    
    Change-Id: Ia52f8bc8a75a7473edff50326a4a0467f4295e6a
    Improve camera documentation.
    
    Change-Id: I3c9e5e6de5ce64b8d7d892483930238fa9cc247c
    Adding parseSizesList, getSupportedPreviewSizes to CameraParameters.
    
    Moved functionality to parse string of sizes from getSupportedPictureSizes
    to parseSizesList.
    Added getSupportedPreviewSizes which returns a list of supported preview sizes.
    
    Change-Id: I435317427c1ee9623caef435f93e95d4476b7285
    Adding getSupportedPictureSizes which returns a Vector of supported Sizes.
    
    Also added a struct 'Size' containing a width and a height field.
    Modified parse_size to optionally set an end pointer pointing to the
    character after the found size.
    
    Change-Id: I51a56bbf2cb7c91d7b80a28e6bd6a559f40a1333
    Add KEY_SUPPORTED_METERING_MODES and fix some typos.
    
    bug:2737111
    Change-Id: I108ae7057786921bf99385ad66dbc1f02d6a1448
    Add camera metering mode API.
    
    bug:2737111
    Change-Id: Ie986fee56ebeaaed2d2efb757701dfe3ffdec8d8
    Add video frame parameter.
    
    The image format of preview frames and video frames may be different.
    We need another parameter for video frame format.
    
    bug:2720893
    Change-Id: I966a31b0ce8cab25cdde65db65a18c8cbe9c7bd6
    Improve GPS EXIF parameters comments.
    
    Change-Id: I33f7487821b283fe746baa09a71a703ae763d66d
    Fix build error.
    
    Original name INFINITY conflicts with the macro in math.h.
    
    Change-Id: I9845ed84fca17813dd971239a902cc1e0bad1e3e
    Add camera focus distances API.
    
    Applications can use this API to estimate the distance
    between the subject and the camera.
    
    bug:1955650
    Change-Id: Ie6c8ea4971759cab6c9bcdda2c5ceb5925791c27
    Add remove method in CameraParameters class.
    
    bug:2672651
    Change-Id: I537c817b5ca6a3d925f22febe9a5769156354d00
    Add continuous focus mode constant.
    
    bug:2612447
    Change-Id: I9bc3f5a47ad50722a265d50b1d28fb82a2253dc9
    Add SCENE_MODE_BARCODE and FOCUS_MODE_EDOF.
    
    bug:2544367
    Change-Id: If122a7745e080f9e4bffb15dc4930d71f0421867
    Add camera parameter string constant for "true".
    
    bug:2458926
    Change-Id: I11eaae8ff031765e23f2627ded5873eabc09cead
    Add location provider name to gps-processing-method in EXIF header.
    Unhide zoom API.
    
    bug:2458926
    Unhide exposure compensation API.
    
    bug:2375993
    split libsurfaceflinger_client and libcamera_client out of libui
    Camera1: Rename setPreviewTexture to ...Target for clarity
    
    Bug: 10312644
    Change-Id: I19976188f0359bfd177209fb40145defdae9c740
    Camera1: Set preview to be asynchronous, and remove dead code
    
    - Use the controlledByApp flag to make sure application-bound
      preview buffer queue is asynchronous as before
    - Remove setPreviewDisplay in service, since it is no longer in
      the binder interface
    - Rename setPreviewTexture to setPreviewTarget, to make it clear it's
      the only game in town now. Rename only on the binder level and service
      for now.
    
    Bug: 10312644
    Change-Id: Icd33a462022f9729a63dc65c69b755cb7969857e
    Refactor CameraService to handle errors properly.
    
    Bug: 10361136
    
    -Connect calls now return status_t error flags.
    
    Change-Id: Idca453b111e5df31327f6c99ebe853bb2e332b95
    Camera: Add preview callback surface support
    
    - Add call to set a preview callback surface
    - Implement support for HAL2/3 devices
    - Still need HAL1 implementation
    
    Change-Id: I0dc0bd72e43d871aa487858d1665c1efca633ffe
    remove uses of Surface in favor or IGraphicBufferProducer
    
    Change-Id: I13d7a9553aa335bca790a3a59d389d7533c83d57
    remove uses of Surface in favor or IGraphicBufferProducer
    
    Change-Id: I13d7a9553aa335bca790a3a59d389d7533c83d57
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    Camera: Add unit test infrastructure for libcameraclient
    
    Change-Id: I957538663ae8332d26f3640c63a75efc79f4ac5c
    Camera: Add unit test infrastructure for libcameraclient
    
    Change-Id: I957538663ae8332d26f3640c63a75efc79f4ac5c
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Remove new camera connect API.
    
    Applications are not resumed under the lock screen now.
    This API is not needed anymore.
    
    bug:5584464
    Change-Id: I115daf6b647348617ec0fc05b626878c945b9b29
    Add a new camera open API that allows taking the ownership.
    
    The purpose is to let face unlock always get the camera
    successfully. What happened was the camera applications may
    have opened the camera in onResume under the lock screen.
    This API lets face unlock take the camera from the camera
    application. A new permission will be added, so other
    applicatoins won't be able to take the camera from the face
    unlock.
    
    bug:5584464
    
    Change-Id: Ib3d9dcbc2161815b68db42327dc01148453704c6
    Pass camera frame metadata from camera service to Java.
    
    bug:4460717
    Change-Id: I2fae6e1dfca6b8f3a5ee5716fc7817f5417bf657
    Add framework support for camcorder zoom.
    
    The purpose of ICameraRecordingProxy and ICameraRecordingProxyListener is to
    allow applications using the camera during recording.
    
    Camera service allows only one client at a time. Since camcorder application
    needs to own the camera to do things like zoom, the media recorder cannot
    access the camera directly during recording. So ICameraRecordingProxy is a proxy
    of ICamera, which allows the media recorder to start/stop the recording and
    release recording frames. ICameraRecordingProxyListener is an interface that
    allows the recorder to receive video frames during recording.
    
    ICameraRecordingProxy
      startRecording()
      stopRecording()
      releaseRecordingFrame()
    
    ICameraRecordingProxyListener
      dataCallbackTimestamp()
    
    The camcorder app opens the camera and starts the preview. The app passes
    ICamera and ICameraRecordingProxy to the media recorder by
    MediaRecorder::setCamera(). The recorder uses ICamera to setup the camera in
    MediaRecorder::start(). After setup, the recorder disconnects from camera
    service. The recorder calls ICameraRecordingProxy::startRecording() and
    passes a ICameraRecordingProxyListener to the app. The app connects back to
    camera service and starts the recording. The app owns the camera and can do
    things like zoom. The media recorder receives the video frames from the
    listener and releases them by ICameraRecordingProxy::releaseRecordingFrame.
    The recorder calls ICameraRecordingProxy::stopRecording() to stop the
    recording.
    
    The call sequences are as follows:
    1. The app: Camera.unlock().
    2. The app: MediaRecorder.setCamera().
    3. Start recording
       (1) The app: MediaRecorder.start().
       (2) The recorder: ICamera.unlock() and ICamera.disconnect().
       (3) The recorder: ICameraRecordingProxy.startRecording().
       (4) The app: ICamera.reconnect().
       (5) The app: ICamera.startRecording().
    4. During recording
       (1) The recorder: receive frames from ICameraRecordingProxyListener.dataCallbackTimestamp()
       (2) The recorder: release frames by ICameraRecordingProxy.releaseRecordingFrame().
    5. Stop recording
       (1) The app: MediaRecorder.stop()
       (2) The recorder: ICameraRecordingProxy.stopRecording().
       (3) The app: ICamera.stopRecording().
    
    bug:2644213
    
    Change-Id: I15269397defc25cbbcae16abc071c8349c123122
    frameworks/base: include system/core header camera.h in Camera.h
    
    We define struct CameraInfo in this camera/Camera.h, even though an identical
    struct camera_info is defined in hardware/camera.h (but not in
    hardware/camera_defs.h).  We may not export struct definitions from the HAL
    into headers which may find their way into the NDK.
    
    This commit also renames FRAME_CALLBACK_FLAG_xxx to CAMERA_FRAME_CALLBACK_xxx.
    
    Change-Id: I3e2ddd01d61bf5371ff2fc1a397995e0f1ee11f8
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    frameworks/base: some camera-interface cleanup
    
    Methods getNumberOfVideoBuffers() and getVideoBuffer() as well as struct
    image_rect_struct are no longer used (instead, the necessary information is
    passed through ANativeWindow.)
    
    Change-Id: If4b11446fc9ccbde1f6b45bc70c0d0b8e54376eb
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Application-managed callback buffer support for raw image
    
    bug - 3292153
    
    Change-Id: I9789f7c5cde3a3889d7375e881181e9152d95fc2
    Add camera service support for SurfaceTexture.
    
    This change enables the use of a SurfaceTexture in place of a Surface as
    the destination of camera preview frames.
    
    Change-Id: Ic70d404c8fe261e9d5da6f1de93d6babb5b191cb
    Fixed a typo in the enum for unknown camera error message
    
    Change-Id: Id9f8432e2ba8e1474ee020438d6456f1f450398a
    Improve camera documentation.
    
    bug:3212606
    Change-Id: Iee7106e4665c08a4c75471114010b75d63ac74ce
    Mirror the camera preview if the camera is front-facing.
    
    bug:3095272
    Change-Id: Ib1c1d1edc06a33e9d4d2dcb42bc1dd2c25b1310c
    Mirror the preview for front-facing cameras. do not merge
    
    Now overlay does ROT_90 before FLIP_V or FLIP_H. It should be FLIP_V
    or FLIP_H first. The formula should be changed after overlay is fixed.
    
    bug:3059865
    Change-Id: Ie4366bf7f1fcac7383e8dfc74b1b865997bbbcc6
    Camera framework change required for 0-memcpy recording
    
    bug - 3042125
    
    Change-Id: I46eb7a10b5394086b353fd73e4503beceeed76f1
    Added command type to play recording sound.
    
    Added CAMERA_CMD_PLAY_RECORDING_SOUND command type to play recording
    sound through sendCommand. This is currently needed by time lapse
    recording using still mode capture, which disables the shutter sound
    but needs to play the recording sound.
    
    Change-Id: I376aa40f45b6064fd862abc065456b06fc338020
    Adding enable/disable option for sendCommand()
    
    - Added enum CAMERA_CMD_ENABLE_SHUTTER_SOUND which corresponds to
      command type for enabling/disabling shutter sound.
    - The implementation checks if it is legal to disable shutter sound.
      If it is, then any process can disable the sound. If not, then only
      the mediaserver process is allowed to do this. Currently time lapse
      capture needs this functionality to disable shutter sound when still
      mode is used to capture time lapse video.
    
    Change-Id: Id147a3bcc6a345c2c6a6d52bf98fd8292386bb19
    Change the framework to use the new camera preview path.
    
    This change makes the camera HAL interface take an ANativeWindow interface from
    which all the camera preview buffers will be allocated.  The framework code
    running in application processes now passes a Surface object rather than an
    ISurface to the camera server via Binder when setting the preview surface.  The
    camera server then forwards that Surface object (which implements the
    ANativeWindow interface) to the camera HAL, which uses it to communicate with
    SurfaceFlinger to allocate the camera preview buffers.
    
    Change-Id: Ie438f721559cd7de5e4f848a26d96360dda07b5f
    fix inaccurate copyrights
    
    Change-Id: I33b0f68f2da34ca4728211d83159cf32a127f6dd
    fix inaccurate copyrights
    
    Change-Id: I33b0f68f2da34ca4728211d83159cf32a127f6dd
    Change camera interface to support multiple cameras.
    
    Change-Id: Ie88fe706d2278acf762eca87780de349434778a4
    Support multiple cameras in framework.
    
    Change-Id: I081f0fbdca4b633715ea7c3b3d42f8662d27598a
    split libsurfaceflinger_client and libcamera_client out of libui
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Refactor CameraService to handle errors properly.
    
    Bug: 10361136
    
    -Connect calls now return status_t error flags.
    
    Change-Id: Idca453b111e5df31327f6c99ebe853bb2e332b95
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    ProCamera: Add CpuConsumer asynchronous mode support
    
    Bug: 8290146
    Bug: 8291751
    Change-Id: I25423a2b8a70ac7169911b1c7b482aa17190fe0f
    ProCamera: Add CpuConsumer asynchronous mode support
    
    Bug: 8290146
    Bug: 8291751
    Change-Id: I25423a2b8a70ac7169911b1c7b482aa17190fe0f
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    ProCamera: Fix waitForFrameBuffer not handling multiple outstanding frames
    
    If the CpuConsumer triggered multiple onFrameAvailable callbacks in between
    a single waitForFrameBuffer call, the old code would only handle 1 callback.
    
    This meant on two subsequent waitForFrameBuffer calls the second would always
    timeout when two buffers were already available to be unlocked.
    
    Bug: 8238112
    Change-Id: Ibefca35005ac5c408e5ada97ec4a4344a9e3e497
    ProCamera: Fix waitForFrameBuffer not handling multiple outstanding frames
    
    If the CpuConsumer triggered multiple onFrameAvailable callbacks in between
    a single waitForFrameBuffer call, the old code would only handle 1 callback.
    
    This meant on two subsequent waitForFrameBuffer calls the second would always
    timeout when two buffers were already available to be unlocked.
    
    Bug: 8238112
    Change-Id: Ibefca35005ac5c408e5ada97ec4a4344a9e3e497
    ProCamera: add waitForFrameBuffer/waitForFrameResult blocking calls
    
    Change-Id: I851d41aeecaa15245d5b9d622132e8706d6e292c
    ProCamera: add waitForFrameBuffer/waitForFrameResult blocking calls
    
    Change-Id: I851d41aeecaa15245d5b9d622132e8706d6e292c
    ProCamera: Add getInfo for getting static metadata (and a test)
    
    Change-Id: I3b87dfbc621d98bf41f37a892a1012baf85b5166
    ProCamera: Add getInfo for getting static metadata (and a test)
    
    Change-Id: I3b87dfbc621d98bf41f37a892a1012baf85b5166
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: ProCamera - add createStreamCpu and unit test
    
    Change-Id: I468172dbfdd78510b273bf9d119c950cbeda7ea3
    Camera: ProCamera - add createStreamCpu and unit test
    
    Change-Id: I468172dbfdd78510b273bf9d119c950cbeda7ea3
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    Camera: ProCamera - add createStream stub and unit test for it
    
    Change-Id: Ic05130e63f4f2c0c3278ba348b192992169f105f
    Camera: ProCamera - add createStream stub and unit test for it
    
    Change-Id: Ic05130e63f4f2c0c3278ba348b192992169f105f
    Camera: ProClient add asynchronous locks and such
    
    Change-Id: I551e5e5e76d9be733fab5224beaa7309268c0f38
    Camera: ProClient add asynchronous locks and such
    
    Change-Id: I551e5e5e76d9be733fab5224beaa7309268c0f38
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    camera: Make some binder interfaces compatible with AIDL
    
    Done:
    * ICameraService
    * ICameraServiceListener
    
    Partial:
    * ICamera (disconnect only)
    * IProCameraUser (disconnect only)
    
    Bug: 9213377
    Change-Id: I8e2e6e05cfd02ec36be1d5b2c551f10ffb43b5b4
    Camera: Add hotplug support (for fixed # of cameras)
    
    * Minor: also change addListener to fire the current status upon subscription
    * Minor: STATUS_AVAILABLE is now an alias for STATUS_PRESENT and deprecated
    
    Change-Id: I254608a7332095e3ef201ffea64cff156cfc1b3e
    Camera: Add hotplug support (for fixed # of cameras)
    
    * Minor: also change addListener to fire the current status upon subscription
    * Minor: STATUS_AVAILABLE is now an alias for STATUS_PRESENT and deprecated
    
    Change-Id: I254608a7332095e3ef201ffea64cff156cfc1b3e
    ICameraServiceListener.h: Add STATUS_ENUMERATING enum
    
    Change-Id: I41a9f358f63a19e7b746a9ccf24722001e5e7475
    ICameraServiceListener.h: Add STATUS_ENUMERATING enum
    
    Change-Id: I41a9f358f63a19e7b746a9ccf24722001e5e7475
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    Pass camera frame metadata from camera service to Java.
    
    bug:4460717
    Change-Id: I2fae6e1dfca6b8f3a5ee5716fc7817f5417bf657
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Initial implementation of android.hardware.photography.CameraDevice (service)
    
    * Verified preview streaming requests
    * Other things *should* work but unverified / unimplemented in client side
    
    Missing:
    * CameraService needs to return static camera info metadata
    
    Bug: 9213377
    Change-Id: I71568560fcf18d0e2b408ed1c4d0066647314868
    camera: Make some binder interfaces compatible with AIDL
    
    Done:
    * ICameraService
    * ICameraServiceListener
    
    Partial:
    * ICamera (disconnect only)
    * IProCameraUser (disconnect only)
    
    Bug: 9213377
    Change-Id: I8e2e6e05cfd02ec36be1d5b2c551f10ffb43b5b4
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: ProClient add asynchronous locks and such
    
    Change-Id: I551e5e5e76d9be733fab5224beaa7309268c0f38
    Camera: ProClient add asynchronous locks and such
    
    Change-Id: I551e5e5e76d9be733fab5224beaa7309268c0f38
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Pass camera frame metadata from camera service to Java.
    
    bug:4460717
    Change-Id: I2fae6e1dfca6b8f3a5ee5716fc7817f5417bf657
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Initial implementation of android.hardware.photography.CameraDevice (service)
    
    * Verified preview streaming requests
    * Other things *should* work but unverified / unimplemented in client side
    
    Missing:
    * CameraService needs to return static camera info metadata
    
    Bug: 9213377
    Change-Id: I71568560fcf18d0e2b408ed1c4d0066647314868
    Implementing MediaDrm APIs
    
    Change-Id: I9ff8eeb7d0c383b5c0c68cd54eb54ce7d2d22fe6
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Add unit test infrastructure for libcameraclient
    
    Change-Id: I957538663ae8332d26f3640c63a75efc79f4ac5c
    Permit conditional registry of mediaserver extensions
    
    Change-Id: I94dc0d038e702dfe1779a50a1de0fae9bad15057
    Factor out and speed up permission-checking code
    
    Use the caching permission check for dump to save IPC.
    
    Cache getpid() to save kernel call for other permission checks.
    
    The C runtime library getpid() can't cache due to a fork
    race condition, but we know that mediaserver doesn't fork.
    
    Don't construct String16 on the stack.
    
    Change-Id: I6be6161dae5155d39ba6ed6228e7683e67be34ed
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Camera2: Add flush support
    
    - On HAL2 devices, fall back to wait until idle
    - On HAL3 devices, call HAL flush method
    
    Bug: 9758581
    Change-Id: Ie1c570a15f6590a1ee6c271e3b989c48079b468a
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    camera2: Implement ICameraDeviceUser::waitUntilIdle
    
    Also fixed some logging typo
    
    Change-Id: Ib254bdb137dca10b12595c23aeb1c53097423425
    camera2: Implement ICameraDeviceUser::getCameraInfo
    
    Bug: 9529161
    Change-Id: I927e39c124cd5fb19e38423506f4463acc381cb0
    Initial implementation of android.hardware.photography.CameraDevice (service)
    
    * Verified preview streaming requests
    * Other things *should* work but unverified / unimplemented in client side
    
    Missing:
    * CameraService needs to return static camera info metadata
    
    Bug: 9213377
    Change-Id: I71568560fcf18d0e2b408ed1c4d0066647314868
    camera: Make some binder interfaces compatible with AIDL
    
    Done:
    * ICameraService
    * ICameraServiceListener
    
    Partial:
    * ICamera (disconnect only)
    * IProCameraUser (disconnect only)
    
    Bug: 9213377
    Change-Id: I8e2e6e05cfd02ec36be1d5b2c551f10ffb43b5b4
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    ProCamera: Add getInfo for getting static metadata (and a test)
    
    Change-Id: I3b87dfbc621d98bf41f37a892a1012baf85b5166
    ProCamera: Add getInfo for getting static metadata (and a test)
    
    Change-Id: I3b87dfbc621d98bf41f37a892a1012baf85b5166
    Camera: Change ProCamera to take IGraphicBufferProducer
    
    Change-Id: Iec62eead6d179aa5486f7719143340976bb76e7d
    Camera: Change ProCamera to take IGraphicBufferProducer
    
    Change-Id: Iec62eead6d179aa5486f7719143340976bb76e7d
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Initial implementation of android.hardware.photography.CameraDevice (service)
    
    * Verified preview streaming requests
    * Other things *should* work but unverified / unimplemented in client side
    
    Missing:
    * CameraService needs to return static camera info metadata
    
    Bug: 9213377
    Change-Id: I71568560fcf18d0e2b408ed1c4d0066647314868
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Camera: Add unit test infrastructure for libcameraclient
    
    Change-Id: I957538663ae8332d26f3640c63a75efc79f4ac5c
    Camera: Add unit test infrastructure for libcameraclient
    
    Change-Id: I957538663ae8332d26f3640c63a75efc79f4ac5c
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    Add framework support for camcorder zoom.
    
    The purpose of ICameraRecordingProxy and ICameraRecordingProxyListener is to
    allow applications using the camera during recording.
    
    Camera service allows only one client at a time. Since camcorder application
    needs to own the camera to do things like zoom, the media recorder cannot
    access the camera directly during recording. So ICameraRecordingProxy is a proxy
    of ICamera, which allows the media recorder to start/stop the recording and
    release recording frames. ICameraRecordingProxyListener is an interface that
    allows the recorder to receive video frames during recording.
    
    ICameraRecordingProxy
      startRecording()
      stopRecording()
      releaseRecordingFrame()
    
    ICameraRecordingProxyListener
      dataCallbackTimestamp()
    
    The camcorder app opens the camera and starts the preview. The app passes
    ICamera and ICameraRecordingProxy to the media recorder by
    MediaRecorder::setCamera(). The recorder uses ICamera to setup the camera in
    MediaRecorder::start(). After setup, the recorder disconnects from camera
    service. The recorder calls ICameraRecordingProxy::startRecording() and
    passes a ICameraRecordingProxyListener to the app. The app connects back to
    camera service and starts the recording. The app owns the camera and can do
    things like zoom. The media recorder receives the video frames from the
    listener and releases them by ICameraRecordingProxy::releaseRecordingFrame.
    The recorder calls ICameraRecordingProxy::stopRecording() to stop the
    recording.
    
    The call sequences are as follows:
    1. The app: Camera.unlock().
    2. The app: MediaRecorder.setCamera().
    3. Start recording
       (1) The app: MediaRecorder.start().
       (2) The recorder: ICamera.unlock() and ICamera.disconnect().
       (3) The recorder: ICameraRecordingProxy.startRecording().
       (4) The app: ICamera.reconnect().
       (5) The app: ICamera.startRecording().
    4. During recording
       (1) The recorder: receive frames from ICameraRecordingProxyListener.dataCallbackTimestamp()
       (2) The recorder: release frames by ICameraRecordingProxy.releaseRecordingFrame().
    5. Stop recording
       (1) The app: MediaRecorder.stop()
       (2) The recorder: ICameraRecordingProxy.stopRecording().
       (3) The app: ICamera.stopRecording().
    
    bug:2644213
    
    Change-Id: I15269397defc25cbbcae16abc071c8349c123122
    merge libsurfaceflinger_client into libgui
    
    this is the first step in unifying surfacetexture and surface.
    for this reason the header files were not moved, as most of them
    will eventually go away.
    
    NOTE: currently we keep libsurfaceflinger_client.so as an empty
    library to workaround prebuilt binaries wrongly linking against
    it.
    
    Change-Id: I130f0de2428e8579033dc41394d093f4e1431a00
    Add camera service support for SurfaceTexture.
    
    This change enables the use of a SurfaceTexture in place of a Surface as
    the destination of camera preview frames.
    
    Change-Id: Ic70d404c8fe261e9d5da6f1de93d6babb5b191cb
    split libsurfaceflinger_client and libcamera_client out of libui
    Add NOTICE and MODULE_LICENSE_APACH2 to libs build under /frameworks/av/
    
    Change-Id: I0a3af3e2abdedebd5934f3d941d01c32cfc75e26
    related-to-bug: 6647465
    Copied MODULE_LICENSE_APACH2 and NOTICE from frameworks/base to frameworks/av
    
    Change-Id: I48c927b9690bf902ab167d60171c0ee7995687e0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Initial implementation of android.hardware.photography.CameraDevice (service)
    
    * Verified preview streaming requests
    * Other things *should* work but unverified / unimplemented in client side
    
    Missing:
    * CameraService needs to return static camera info metadata
    
    Bug: 9213377
    Change-Id: I71568560fcf18d0e2b408ed1c4d0066647314868
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: ProClient add asynchronous locks and such
    
    Change-Id: I551e5e5e76d9be733fab5224beaa7309268c0f38
    Camera: ProClient add asynchronous locks and such
    
    Change-Id: I551e5e5e76d9be733fab5224beaa7309268c0f38
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Pass camera frame metadata from camera service to Java.
    
    bug:4460717
    Change-Id: I2fae6e1dfca6b8f3a5ee5716fc7817f5417bf657
    split libsurfaceflinger_client and libcamera_client out of libui
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Add framework support for camcorder zoom.
    
    The purpose of ICameraRecordingProxy and ICameraRecordingProxyListener is to
    allow applications using the camera during recording.
    
    Camera service allows only one client at a time. Since camcorder application
    needs to own the camera to do things like zoom, the media recorder cannot
    access the camera directly during recording. So ICameraRecordingProxy is a proxy
    of ICamera, which allows the media recorder to start/stop the recording and
    release recording frames. ICameraRecordingProxyListener is an interface that
    allows the recorder to receive video frames during recording.
    
    ICameraRecordingProxy
      startRecording()
      stopRecording()
      releaseRecordingFrame()
    
    ICameraRecordingProxyListener
      dataCallbackTimestamp()
    
    The camcorder app opens the camera and starts the preview. The app passes
    ICamera and ICameraRecordingProxy to the media recorder by
    MediaRecorder::setCamera(). The recorder uses ICamera to setup the camera in
    MediaRecorder::start(). After setup, the recorder disconnects from camera
    service. The recorder calls ICameraRecordingProxy::startRecording() and
    passes a ICameraRecordingProxyListener to the app. The app connects back to
    camera service and starts the recording. The app owns the camera and can do
    things like zoom. The media recorder receives the video frames from the
    listener and releases them by ICameraRecordingProxy::releaseRecordingFrame.
    The recorder calls ICameraRecordingProxy::stopRecording() to stop the
    recording.
    
    The call sequences are as follows:
    1. The app: Camera.unlock().
    2. The app: MediaRecorder.setCamera().
    3. Start recording
       (1) The app: MediaRecorder.start().
       (2) The recorder: ICamera.unlock() and ICamera.disconnect().
       (3) The recorder: ICameraRecordingProxy.startRecording().
       (4) The app: ICamera.reconnect().
       (5) The app: ICamera.startRecording().
    4. During recording
       (1) The recorder: receive frames from ICameraRecordingProxyListener.dataCallbackTimestamp()
       (2) The recorder: release frames by ICameraRecordingProxy.releaseRecordingFrame().
    5. Stop recording
       (1) The app: MediaRecorder.stop()
       (2) The recorder: ICameraRecordingProxy.stopRecording().
       (3) The app: ICamera.stopRecording().
    
    bug:2644213
    
    Change-Id: I15269397defc25cbbcae16abc071c8349c123122
    Camera1: Set preview to be asynchronous, and remove dead code
    
    - Use the controlledByApp flag to make sure application-bound
      preview buffer queue is asynchronous as before
    - Remove setPreviewDisplay in service, since it is no longer in
      the binder interface
    - Rename setPreviewTexture to setPreviewTarget, to make it clear it's
      the only game in town now. Rename only on the binder level and service
      for now.
    
    Bug: 10312644
    Change-Id: Icd33a462022f9729a63dc65c69b755cb7969857e
    camera: Make some binder interfaces compatible with AIDL
    
    Done:
    * ICameraService
    * ICameraServiceListener
    
    Partial:
    * ICamera (disconnect only)
    * IProCameraUser (disconnect only)
    
    Bug: 9213377
    Change-Id: I8e2e6e05cfd02ec36be1d5b2c551f10ffb43b5b4
    Camera: Add preview callback surface support
    
    - Add call to set a preview callback surface
    - Implement support for HAL2/3 devices
    - Still need HAL1 implementation
    
    Change-Id: I0dc0bd72e43d871aa487858d1665c1efca633ffe
    remove uses of Surface in favor or IGraphicBufferProducer
    
    Change-Id: I13d7a9553aa335bca790a3a59d389d7533c83d57
    remove uses of Surface in favor or IGraphicBufferProducer
    
    Change-Id: I13d7a9553aa335bca790a3a59d389d7533c83d57
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    frameworks/base: some camera-interface cleanup
    
    Methods getNumberOfVideoBuffers() and getVideoBuffer() as well as struct
    image_rect_struct are no longer used (instead, the necessary information is
    passed through ANativeWindow.)
    
    Change-Id: If4b11446fc9ccbde1f6b45bc70c0d0b8e54376eb
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Application-managed callback buffer support for raw image
    
    bug - 3292153
    
    Change-Id: I9789f7c5cde3a3889d7375e881181e9152d95fc2
    Add camera service support for SurfaceTexture.
    
    This change enables the use of a SurfaceTexture in place of a Surface as
    the destination of camera preview frames.
    
    Change-Id: Ic70d404c8fe261e9d5da6f1de93d6babb5b191cb
    Camera framework change required for 0-memcpy recording
    
    bug - 3042125
    
    Change-Id: I46eb7a10b5394086b353fd73e4503beceeed76f1
    Change the framework to use the new camera preview path.
    
    This change makes the camera HAL interface take an ANativeWindow interface from
    which all the camera preview buffers will be allocated.  The framework code
    running in application processes now passes a Surface object rather than an
    ISurface to the camera server via Binder when setting the preview surface.  The
    camera server then forwards that Surface object (which implements the
    ANativeWindow interface) to the camera HAL, which uses it to communicate with
    SurfaceFlinger to allocate the camera preview buffers.
    
    Change-Id: Ie438f721559cd7de5e4f848a26d96360dda07b5f
    Add some comments for zoom methods.
    
    Also change RuntimeException to IllegalArgumentException.
    bug:2458926
    
    Change-Id: I87af31f5f3f10244131a1117bd1725c2d292b587
    split libsurfaceflinger_client and libcamera_client out of libui
    Camera1: Rename setPreviewTexture to ...Target for clarity
    
    Bug: 10312644
    Change-Id: I19976188f0359bfd177209fb40145defdae9c740
    Camera1: Set preview to be asynchronous, and remove dead code
    
    - Use the controlledByApp flag to make sure application-bound
      preview buffer queue is asynchronous as before
    - Remove setPreviewDisplay in service, since it is no longer in
      the binder interface
    - Rename setPreviewTexture to setPreviewTarget, to make it clear it's
      the only game in town now. Rename only on the binder level and service
      for now.
    
    Bug: 10312644
    Change-Id: Icd33a462022f9729a63dc65c69b755cb7969857e
    Refactor CameraService to handle errors properly.
    
    Bug: 10361136
    
    -Connect calls now return status_t error flags.
    
    Change-Id: Idca453b111e5df31327f6c99ebe853bb2e332b95
    Camera: Add preview callback surface support
    
    - Add call to set a preview callback surface
    - Implement support for HAL2/3 devices
    - Still need HAL1 implementation
    
    Change-Id: I0dc0bd72e43d871aa487858d1665c1efca633ffe
    remove uses of Surface in favor or IGraphicBufferProducer
    
    Change-Id: I13d7a9553aa335bca790a3a59d389d7533c83d57
    remove uses of Surface in favor or IGraphicBufferProducer
    
    Change-Id: I13d7a9553aa335bca790a3a59d389d7533c83d57
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Remove new camera connect API.
    
    Applications are not resumed under the lock screen now.
    This API is not needed anymore.
    
    bug:5584464
    Change-Id: I115daf6b647348617ec0fc05b626878c945b9b29
    Add a new camera open API that allows taking the ownership.
    
    The purpose is to let face unlock always get the camera
    successfully. What happened was the camera applications may
    have opened the camera in onResume under the lock screen.
    This API lets face unlock take the camera from the camera
    application. A new permission will be added, so other
    applicatoins won't be able to take the camera from the face
    unlock.
    
    bug:5584464
    
    Change-Id: Ib3d9dcbc2161815b68db42327dc01148453704c6
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Pass camera frame metadata from camera service to Java.
    
    bug:4460717
    Change-Id: I2fae6e1dfca6b8f3a5ee5716fc7817f5417bf657
    Add framework support for camcorder zoom.
    
    The purpose of ICameraRecordingProxy and ICameraRecordingProxyListener is to
    allow applications using the camera during recording.
    
    Camera service allows only one client at a time. Since camcorder application
    needs to own the camera to do things like zoom, the media recorder cannot
    access the camera directly during recording. So ICameraRecordingProxy is a proxy
    of ICamera, which allows the media recorder to start/stop the recording and
    release recording frames. ICameraRecordingProxyListener is an interface that
    allows the recorder to receive video frames during recording.
    
    ICameraRecordingProxy
      startRecording()
      stopRecording()
      releaseRecordingFrame()
    
    ICameraRecordingProxyListener
      dataCallbackTimestamp()
    
    The camcorder app opens the camera and starts the preview. The app passes
    ICamera and ICameraRecordingProxy to the media recorder by
    MediaRecorder::setCamera(). The recorder uses ICamera to setup the camera in
    MediaRecorder::start(). After setup, the recorder disconnects from camera
    service. The recorder calls ICameraRecordingProxy::startRecording() and
    passes a ICameraRecordingProxyListener to the app. The app connects back to
    camera service and starts the recording. The app owns the camera and can do
    things like zoom. The media recorder receives the video frames from the
    listener and releases them by ICameraRecordingProxy::releaseRecordingFrame.
    The recorder calls ICameraRecordingProxy::stopRecording() to stop the
    recording.
    
    The call sequences are as follows:
    1. The app: Camera.unlock().
    2. The app: MediaRecorder.setCamera().
    3. Start recording
       (1) The app: MediaRecorder.start().
       (2) The recorder: ICamera.unlock() and ICamera.disconnect().
       (3) The recorder: ICameraRecordingProxy.startRecording().
       (4) The app: ICamera.reconnect().
       (5) The app: ICamera.startRecording().
    4. During recording
       (1) The recorder: receive frames from ICameraRecordingProxyListener.dataCallbackTimestamp()
       (2) The recorder: release frames by ICameraRecordingProxy.releaseRecordingFrame().
    5. Stop recording
       (1) The app: MediaRecorder.stop()
       (2) The recorder: ICameraRecordingProxy.stopRecording().
       (3) The app: ICamera.stopRecording().
    
    bug:2644213
    
    Change-Id: I15269397defc25cbbcae16abc071c8349c123122
    frameworks/base: some camera-interface cleanup
    
    Methods getNumberOfVideoBuffers() and getVideoBuffer() as well as struct
    image_rect_struct are no longer used (instead, the necessary information is
    passed through ANativeWindow.)
    
    Change-Id: If4b11446fc9ccbde1f6b45bc70c0d0b8e54376eb
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Application-managed callback buffer support for raw image
    
    bug - 3292153
    
    Change-Id: I9789f7c5cde3a3889d7375e881181e9152d95fc2
    Add camera service support for SurfaceTexture.
    
    This change enables the use of a SurfaceTexture in place of a Surface as
    the destination of camera preview frames.
    
    Change-Id: Ic70d404c8fe261e9d5da6f1de93d6babb5b191cb
    Camera::create should fail when it fails to connect the camera.
    
    bug:3197565
    
    Change-Id: I3439a25c06b00615e8257e6b3db85df081643643
    Fixed a race condition where some recording frames may not be released
    
    bug - 3258924
    
    Change-Id: I4f30d04a713676f5da40e6a7dd861510cc041f9b
    Fixed a race condition where some recording frames may not be released.
    
    When startRecording() is called before setListener(), recording frames
    are sent right after startRecording(), but there is no listener to
    release the recording frames. This causes the hang in media server.
    
    bug - 3166356
    
    Change-Id: I19366ca682ef9f6b847590c190c30a15ed32b8e4
    Camera framework change required for 0-memcpy recording
    
    bug - 3042125
    
    Change-Id: I46eb7a10b5394086b353fd73e4503beceeed76f1
    Change the framework to use the new camera preview path.
    
    This change makes the camera HAL interface take an ANativeWindow interface from
    which all the camera preview buffers will be allocated.  The framework code
    running in application processes now passes a Surface object rather than an
    ISurface to the camera server via Binder when setting the preview surface.  The
    camera server then forwards that Surface object (which implements the
    ANativeWindow interface) to the camera HAL, which uses it to communicate with
    SurfaceFlinger to allocate the camera preview buffers.
    
    Change-Id: Ie438f721559cd7de5e4f848a26d96360dda07b5f
    fix inaccurate copyrights
    
    Change-Id: I33b0f68f2da34ca4728211d83159cf32a127f6dd
    fix inaccurate copyrights
    
    Change-Id: I33b0f68f2da34ca4728211d83159cf32a127f6dd
    Change camera interface to support multiple cameras.
    
    Change-Id: Ie88fe706d2278acf762eca87780de349434778a4
    Fix deadlock if the last reference of ICameraClient is removed in
    ICamera::connect()
    
    Change-Id: I34ab3e4f07435c62168175e9bb159022c8fb99f4
    Support multiple cameras in framework.
    
    Change-Id: I081f0fbdca4b633715ea7c3b3d42f8662d27598a
    Call unlinkToDeath() when we disconnect the Camera,
    so we don't hold the (weak) reference to it, which caused
    (small) memory leaks.
    
    Change-Id: If7d58a354fd38c8bc380946bf227b52988ac5118
    split libsurfaceflinger_client and libcamera_client out of libui
    Initial implementation of android.hardware.photography.CameraDevice (service)
    
    * Verified preview streaming requests
    * Other things *should* work but unverified / unimplemented in client side
    
    Missing:
    * CameraService needs to return static camera info metadata
    
    Bug: 9213377
    Change-Id: I71568560fcf18d0e2b408ed1c4d0066647314868
    camera: Make some binder interfaces compatible with AIDL
    
    Done:
    * ICameraService
    * ICameraServiceListener
    
    Partial:
    * ICamera (disconnect only)
    * IProCameraUser (disconnect only)
    
    Bug: 9213377
    Change-Id: I8e2e6e05cfd02ec36be1d5b2c551f10ffb43b5b4
    camera: Use new camera_metadata structure validation functions
    
    * Reject unvalidated metadata across binder boundaries
    * Sanity check in-process CameraMetadata when mutating data
    
    Bug: 8713951
    Change-Id: I121d8e15f8fdc9cdbbaf27dfd947813e11831e1c
    camera: Use new camera_metadata structure validation functions
    
    * Reject unvalidated metadata across binder boundaries
    * Sanity check in-process CameraMetadata when mutating data
    
    Bug: 8713951
    Change-Id: I121d8e15f8fdc9cdbbaf27dfd947813e11831e1c
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    ProCamera: Add getInfo for getting static metadata (and a test)
    
    Change-Id: I3b87dfbc621d98bf41f37a892a1012baf85b5166
    ProCamera: Add getInfo for getting static metadata (and a test)
    
    Change-Id: I3b87dfbc621d98bf41f37a892a1012baf85b5166
    Camera: Change ProCamera to take IGraphicBufferProducer
    
    Change-Id: Iec62eead6d179aa5486f7719143340976bb76e7d
    Camera: Change ProCamera to take IGraphicBufferProducer
    
    Change-Id: Iec62eead6d179aa5486f7719143340976bb76e7d
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Refactor CameraService to handle errors properly.
    
    Bug: 10361136
    
    -Connect calls now return status_t error flags.
    
    Change-Id: Idca453b111e5df31327f6c99ebe853bb2e332b95
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    Add LG camera HAL parameters (Cherry-picked from CM's 584132f)
    
    Conflicts:
            include/camera/CameraParameters.h
    Typo in CameraParameters::set
    
    Typo: 'key' --> 'value'
    
    Change-Id: Idd0426263cf2125a796406abaf6f29f04f425fe4
    DO NOT MERGE: Remove experimental parameters for burst mode
    
    Bug: 7248756
    Change-Id: I3aaf2da4791b2a13e1e788b2914e4c51c529a75d
    DO NOT MERGE: Remove experimental parameters for burst mode
    
    Bug: 7248756
    Change-Id: I3aaf2da4791b2a13e1e788b2914e4c51c529a75d
    Camera: Add HDR scene mode constants.
    
    Change-Id: I78b1f8ca3c1a03222ed363db26d9a09cf0b13528
    Camera: Add HDR scene mode constants.
    
    Change-Id: I78b1f8ca3c1a03222ed363db26d9a09cf0b13528
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera: Add OPAQUE pixel format to CameraParameters
    
    This is only used to support recording with HAL 2 in the
    KEY_VIDEO_FRAME_FORMAT parameter, and is not exposed to applications.
    
    Bug: 6243944
    Change-Id: I5976a748d199ae98189bd03af5bbd9e18cbd6bf0
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Add video stabilization control to Camera parameters.
    
    Hardware video stabilization reduces camera shake in preview
    and in recorded videos. It has no effect on still image capture.
    
    Convenience accessor methods hidden for now.
    
    Change-Id: Ie18450bff662b2ef98b85d19719beefc180975fc
    Add video snapshot camera parameter.
    
    The API is still hidden.
    
    bug:5187868
    
    Change-Id: I59e1b5774ca32be049723d1a0887faa90d8884bb
    Add new camera focus mode FOCUS_MODE_CONTINUOUS_PICTURE.
    
    The API is still hidden.
    
    bug:5086125
    Change-Id: I69268a95ad6aae249771d3a8dfb423ffe2d87081
    Add camera bayer image format.
    
    The API are hidden.
    
    bug:5086073
    
    Change-Id: Ic9a53e5d5007ad3f12a28406ee25098227f14cbc
    Add camera recording hint parameter.
    
    The API is still hidden.
    
    bug:4266229
    Change-Id: I5e4c24e9e2808582aecb55ac4f1d5be3ed7e36a2
    Add camera face detection API.
    
    API are still hidden.
    
    bug:4460717
    Change-Id: I1a515061f141a89bd61c875257712789fb15d2d4
    CameraParameters: add PIXEL_FORMAT_RGBA8888
    
    Change-Id: I2780e936f5b4628d506ac4e6947b78ef831fbde8
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Add auto-white balance locking to the Camera API.
    
    Adds a new camera parameter for locking auto-white balance to its
    current value. Also adds a function for checking if auto-white balance
    lock is supported by the current platform. Lock semantics match that
    of the auto-exposure lock.
    
    Hidden for now.
    
    Change-Id: Id59339a4be84d55c1b0b8473d765b6aa765999b2
    Add an auto-exposure lock feature to the Camera API.
    
    Adds a new camera parameter for locking auto-exposure to its current
    value. Also adds a function for checking if auto-exposure lock is
    supported by the current platform.
    
    Hidden for now.
    
    Change-Id: Id452371191ab220318ce2cb98b8ee91bdde9aab6
    Add camera metering area API.
    
    The API are still hidden.
    
    bug:3475893
    Change-Id: Id4147528def5e0fe067e1a3ed315fa34c14a0640
    Add camera focus area API.
    
    The API are still hidden.
    
    bug:3475893
    
    Change-Id: I92405c9e332b7fb141788cda7ebc9705dd666c67
    Add YV12 preview format to camera parameter constants.
    
    bug:3463624
    Change-Id: I8f2992dadfd3fb9e3c9d67743e52da7f3212827e
    Add preferred preview size support in the camera framework
    
    bug - 3237021
    
    Change-Id: Ica8a3ae5cfbee462b74de98770e33277186c9a2b
    Video size retrieval/configuration support in camera hal
    
    This is the first part of the camera hal change required for
    0-memcpy of input video frames for video recording.
    
    o removed check in setVideoSize()/getVideoSize() for impl consistency
    
    Change-Id: I01274a62b9f9eaf32154d98f8d0bfedacf645698
    Rename FOCUS_MODE_CONTINUOUS to FOCUS_MODE_CONTINUOUS_VIDEO.
    
    This constant is not public yet. Continuous autofocus should
    behave differently in still camera and camcorder. In camcorder,
    lens movement may be more smooth. And the triggers to start a
    new focus search may be different. If there is a need,
    FOCUS_MODE_CONTINUOUS_PHOTO can be added in the future.
    
    Change-Id: I05df9e491aca37829be3df92a73b952f26c86a4a
    Add YUV420P color format support for video output from camera hal
    
    Change-Id: I5c8266348d0840361c8095ce351ac85c44d4068f
    Remove camera metering mode API.
    
    Metering mode is not supported yet.
    
    Change-Id: Id6906d6ab0cd1a9dcbc5c303d8d5081b2cda699e
    Add camera fps range API.
    
    Original preview frame rate API assumes the frame rate
    is fixed. It does not not work with auto frame rate camera.
    
    Change-Id: I38f7122ac8ec844ffd63558dc0763ffa17b0926a
    Adding getSupportedPreviewSizes to CameraParameters.DO NOT MERGE
    
    Moved functionality to parse string of sizes from getSupportedPictureSizes
    to parseSizesList.
    Added getSupportedPreviewSizes which returns a list of supported preview sizes.
    
    Change-Id: I41d4f62f9f1641e9e9258aa2ebaeda13ba846c02
    Adding getSupportedPictureSizes to CameraParameters.DO NOT MERGE
    
    Also added a struct 'Size' containing a width and a height field.
    Modified parse_size to optionally set an end pointer pointing to the
    character after the found size.
    
    Change-Id: I0c95ebf1ad4684721b32165f363db7d4d15a1b19
    Adding parseSizesList, getSupportedPreviewSizes to CameraParameters.
    
    Moved functionality to parse string of sizes from getSupportedPictureSizes
    to parseSizesList.
    Added getSupportedPreviewSizes which returns a list of supported preview sizes.
    
    Change-Id: I435317427c1ee9623caef435f93e95d4476b7285
    Adding getSupportedPictureSizes which returns a Vector of supported Sizes.
    
    Also added a struct 'Size' containing a width and a height field.
    Modified parse_size to optionally set an end pointer pointing to the
    character after the found size.
    
    Change-Id: I51a56bbf2cb7c91d7b80a28e6bd6a559f40a1333
    Add KEY_SUPPORTED_METERING_MODES and fix some typos.
    
    bug:2737111
    Change-Id: I108ae7057786921bf99385ad66dbc1f02d6a1448
    Add camera metering mode API.
    
    bug:2737111
    Change-Id: Ie986fee56ebeaaed2d2efb757701dfe3ffdec8d8
    Add video frame parameter.
    
    The image format of preview frames and video frames may be different.
    We need another parameter for video frame format.
    
    bug:2720893
    Change-Id: I966a31b0ce8cab25cdde65db65a18c8cbe9c7bd6
    Fix build error.
    
    Original name INFINITY conflicts with the macro in math.h.
    
    Change-Id: I9845ed84fca17813dd971239a902cc1e0bad1e3e
    Add camera focus distances API.
    
    Applications can use this API to estimate the distance
    between the subject and the camera.
    
    bug:1955650
    Change-Id: Ie6c8ea4971759cab6c9bcdda2c5ceb5925791c27
    Add remove method in CameraParameters class.
    
    bug:2672651
    Change-Id: I537c817b5ca6a3d925f22febe9a5769156354d00
    Add continuous focus mode constant.
    
    bug:2612447
    Change-Id: I9bc3f5a47ad50722a265d50b1d28fb82a2253dc9
    Add SCENE_MODE_BARCODE and FOCUS_MODE_EDOF.
    
    bug:2544367
    Change-Id: If122a7745e080f9e4bffb15dc4930d71f0421867
    Add camera parameter string constant for "true".
    
    bug:2458926
    Change-Id: I11eaae8ff031765e23f2627ded5873eabc09cead
    Add location provider name to gps-processing-method in EXIF header.
    Unhide zoom API.
    
    bug:2458926
    Unhide exposure compensation API.
    
    bug:2375993
    split libsurfaceflinger_client and libcamera_client out of libui
    camera: Make some binder interfaces compatible with AIDL
    
    Done:
    * ICameraService
    * ICameraServiceListener
    
    Partial:
    * ICamera (disconnect only)
    * IProCameraUser (disconnect only)
    
    Bug: 9213377
    Change-Id: I8e2e6e05cfd02ec36be1d5b2c551f10ffb43b5b4
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Refactor CameraService to handle errors properly.
    
    Bug: 10361136
    
    -Connect calls now return status_t error flags.
    
    Change-Id: Idca453b111e5df31327f6c99ebe853bb2e332b95
    separte producer and consumer interfaces
    
    Bug: 9265647
    Change-Id: Iefabc11e4bd2e2e8ffd31160476c450affe6629c
    update to new Consumer APIs
    
    Change-Id: I3c5d4be2a2e8783fbf98b3e268fd02658f71dc7d
    always pass the BufferQueue explicitely to consumers
    
    Change-Id: Ic2d9a9cf184a482b3c78a481ed693ee32df5ca13
    ProCamera: Fix memory leak in consumeFrameMetadata
    
    Bug: 8402301
    Change-Id: I975990185f45bb8552712271b9ac457af08a170c
    ProCamera: Fix memory leak in consumeFrameMetadata
    
    Bug: 8402301
    Change-Id: I975990185f45bb8552712271b9ac457af08a170c
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    ProCamera: Add CpuConsumer asynchronous mode support
    
    Bug: 8290146
    Bug: 8291751
    Change-Id: I25423a2b8a70ac7169911b1c7b482aa17190fe0f
    ProCamera: Add CpuConsumer asynchronous mode support
    
    Bug: 8290146
    Bug: 8291751
    Change-Id: I25423a2b8a70ac7169911b1c7b482aa17190fe0f
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    ProCamera: Fix waitForFrameBuffer not handling multiple outstanding frames
    
    If the CpuConsumer triggered multiple onFrameAvailable callbacks in between
    a single waitForFrameBuffer call, the old code would only handle 1 callback.
    
    This meant on two subsequent waitForFrameBuffer calls the second would always
    timeout when two buffers were already available to be unlocked.
    
    Bug: 8238112
    Change-Id: Ibefca35005ac5c408e5ada97ec4a4344a9e3e497
    ProCamera: Fix waitForFrameBuffer not handling multiple outstanding frames
    
    If the CpuConsumer triggered multiple onFrameAvailable callbacks in between
    a single waitForFrameBuffer call, the old code would only handle 1 callback.
    
    This meant on two subsequent waitForFrameBuffer calls the second would always
    timeout when two buffers were already available to be unlocked.
    
    Bug: 8238112
    Change-Id: Ibefca35005ac5c408e5ada97ec4a4344a9e3e497
    ProCamera: add waitForFrameBuffer/waitForFrameResult blocking calls
    
    Change-Id: I851d41aeecaa15245d5b9d622132e8706d6e292c
    ProCamera: add waitForFrameBuffer/waitForFrameResult blocking calls
    
    Change-Id: I851d41aeecaa15245d5b9d622132e8706d6e292c
    ProCamera: Add getInfo for getting static metadata (and a test)
    
    Change-Id: I3b87dfbc621d98bf41f37a892a1012baf85b5166
    ProCamera: Add getInfo for getting static metadata (and a test)
    
    Change-Id: I3b87dfbc621d98bf41f37a892a1012baf85b5166
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: ProCamera - add createStreamCpu and unit test
    
    Change-Id: I468172dbfdd78510b273bf9d119c950cbeda7ea3
    Camera: ProCamera - add createStreamCpu and unit test
    
    Change-Id: I468172dbfdd78510b273bf9d119c950cbeda7ea3
    Camera: Change ProCamera to take IGraphicBufferProducer
    
    Change-Id: Iec62eead6d179aa5486f7719143340976bb76e7d
    Camera: Change ProCamera to take IGraphicBufferProducer
    
    Change-Id: Iec62eead6d179aa5486f7719143340976bb76e7d
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    Camera: ProCamera - add createStream stub and unit test for it
    
    Change-Id: Ic05130e63f4f2c0c3278ba348b192992169f105f
    Camera: ProCamera - add createStream stub and unit test for it
    
    Change-Id: Ic05130e63f4f2c0c3278ba348b192992169f105f
    Camera: ProClient add asynchronous locks and such
    
    Change-Id: I551e5e5e76d9be733fab5224beaa7309268c0f38
    Camera: ProClient add asynchronous locks and such
    
    Change-Id: I551e5e5e76d9be733fab5224beaa7309268c0f38
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Add NOTICE and MODULE_LICENSE_APACH2 to libs build under /frameworks/av/
    
    Change-Id: I0a3af3e2abdedebd5934f3d941d01c32cfc75e26
    related-to-bug: 6647465
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Camera: Implement getCameraCharacteristics
    
    Bug: 10904541
    Bug: 10360518
    Change-Id: Ie9ca6b3b0b5f2fe529e6b0decc193096e770a017
    Refactor CameraService to handle errors properly.
    
    Bug: 10361136
    
    -Connect calls now return status_t error flags.
    
    Change-Id: Idca453b111e5df31327f6c99ebe853bb2e332b95
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Initial implementation of android.hardware.photography.CameraDevice (service)
    
    * Verified preview streaming requests
    * Other things *should* work but unverified / unimplemented in client side
    
    Missing:
    * CameraService needs to return static camera info metadata
    
    Bug: 9213377
    Change-Id: I71568560fcf18d0e2b408ed1c4d0066647314868
    camera: Make some binder interfaces compatible with AIDL
    
    Done:
    * ICameraService
    * ICameraServiceListener
    
    Partial:
    * ICamera (disconnect only)
    * IProCameraUser (disconnect only)
    
    Bug: 9213377
    Change-Id: I8e2e6e05cfd02ec36be1d5b2c551f10ffb43b5b4
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Remove new camera connect API.
    
    Applications are not resumed under the lock screen now.
    This API is not needed anymore.
    
    bug:5584464
    Change-Id: I115daf6b647348617ec0fc05b626878c945b9b29
    Add a new camera open API that allows taking the ownership.
    
    The purpose is to let face unlock always get the camera
    successfully. What happened was the camera applications may
    have opened the camera in onResume under the lock screen.
    This API lets face unlock take the camera from the camera
    application. A new permission will be added, so other
    applicatoins won't be able to take the camera from the face
    unlock.
    
    bug:5584464
    
    Change-Id: Ib3d9dcbc2161815b68db42327dc01148453704c6
    Change camera interface to support multiple cameras.
    
    Change-Id: Ie88fe706d2278acf762eca87780de349434778a4
    Support multiple cameras in framework.
    
    Change-Id: I081f0fbdca4b633715ea7c3b3d42f8662d27598a
    split libsurfaceflinger_client and libcamera_client out of libui
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Add framework support for camcorder zoom.
    
    The purpose of ICameraRecordingProxy and ICameraRecordingProxyListener is to
    allow applications using the camera during recording.
    
    Camera service allows only one client at a time. Since camcorder application
    needs to own the camera to do things like zoom, the media recorder cannot
    access the camera directly during recording. So ICameraRecordingProxy is a proxy
    of ICamera, which allows the media recorder to start/stop the recording and
    release recording frames. ICameraRecordingProxyListener is an interface that
    allows the recorder to receive video frames during recording.
    
    ICameraRecordingProxy
      startRecording()
      stopRecording()
      releaseRecordingFrame()
    
    ICameraRecordingProxyListener
      dataCallbackTimestamp()
    
    The camcorder app opens the camera and starts the preview. The app passes
    ICamera and ICameraRecordingProxy to the media recorder by
    MediaRecorder::setCamera(). The recorder uses ICamera to setup the camera in
    MediaRecorder::start(). After setup, the recorder disconnects from camera
    service. The recorder calls ICameraRecordingProxy::startRecording() and
    passes a ICameraRecordingProxyListener to the app. The app connects back to
    camera service and starts the recording. The app owns the camera and can do
    things like zoom. The media recorder receives the video frames from the
    listener and releases them by ICameraRecordingProxy::releaseRecordingFrame.
    The recorder calls ICameraRecordingProxy::stopRecording() to stop the
    recording.
    
    The call sequences are as follows:
    1. The app: Camera.unlock().
    2. The app: MediaRecorder.setCamera().
    3. Start recording
       (1) The app: MediaRecorder.start().
       (2) The recorder: ICamera.unlock() and ICamera.disconnect().
       (3) The recorder: ICameraRecordingProxy.startRecording().
       (4) The app: ICamera.reconnect().
       (5) The app: ICamera.startRecording().
    4. During recording
       (1) The recorder: receive frames from ICameraRecordingProxyListener.dataCallbackTimestamp()
       (2) The recorder: release frames by ICameraRecordingProxy.releaseRecordingFrame().
    5. Stop recording
       (1) The app: MediaRecorder.stop()
       (2) The recorder: ICameraRecordingProxy.stopRecording().
       (3) The app: ICamera.stopRecording().
    
    bug:2644213
    
    Change-Id: I15269397defc25cbbcae16abc071c8349c123122
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Pass camera frame metadata from camera service to Java.
    
    bug:4460717
    Change-Id: I2fae6e1dfca6b8f3a5ee5716fc7817f5417bf657
    split libsurfaceflinger_client and libcamera_client out of libui
    Camera HAL3/API1: Add support for the partial result quirk.
    
    - Camera2Client:
     - Detect partial result quirk
    - Camera3Device:
     - Accumulate all partial results together
     - Fire off 3A-only result once all 3A states are available
    - FrameProcessorBase:
     - Filter out partials, don't send to listeners
    - FrameProcessor:
     - Skip face detect on partials
     - Make sure to only handle a 3A update for a given frame once
     - Trigger AF notifications when AF mode or trigger changes, to
       properly detect all AF transitions.
    
    Bug: 11115603
    Change-Id: Iea8aa73c568701562a46071f7ea100624251d10b
    Initial implementation of android.hardware.photography.CameraDevice (service)
    
    * Verified preview streaming requests
    * Other things *should* work but unverified / unimplemented in client side
    
    Missing:
    * CameraService needs to return static camera info metadata
    
    Bug: 9213377
    Change-Id: I71568560fcf18d0e2b408ed1c4d0066647314868
    camera: Use new camera_metadata structure validation functions
    
    * Reject unvalidated metadata across binder boundaries
    * Sanity check in-process CameraMetadata when mutating data
    
    Bug: 8713951
    Change-Id: I121d8e15f8fdc9cdbbaf27dfd947813e11831e1c
    camera: Use new camera_metadata structure validation functions
    
    * Reject unvalidated metadata across binder boundaries
    * Sanity check in-process CameraMetadata when mutating data
    
    Bug: 8713951
    Change-Id: I121d8e15f8fdc9cdbbaf27dfd947813e11831e1c
    Camera: Add input side to camera3 HAL device
    
    - Stream creation/deletion
    - Request submission
    - Request thread loop
    - Add get() to CameraMetadata to allow HAL submission while retaining
      ownership.
    
    Change-Id: I271f72bcbe9557eded43cbcbfe789109857f8144
    Camera: Add input side to camera3 HAL device
    
    - Stream creation/deletion
    - Request submission
    - Request thread loop
    - Add get() to CameraMetadata to allow HAL submission while retaining
      ownership.
    
    Change-Id: I271f72bcbe9557eded43cbcbfe789109857f8144
    Camera: Add exists function to CameraMetadata
    
    Change-Id: I081f61417fca7c8408e9e767129647ddce5364ab
    Camera: Add exists function to CameraMetadata
    
    Change-Id: I081f61417fca7c8408e9e767129647ddce5364ab
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Factor out Camera2Client::Parameters
    
    Move the parameter structure and the various utility methods using it
    to its own class. Rename LockedParameters to SharedParameters to match
    the Mutex naming convention.
    
    Also move CameraMetadata to camera2 directory for organization.
    
    No functional changes.
    
    Bug: 6243944
    Change-Id: Ie60b535936ecfda9bf23361d52604abf515c83d0
    Camera2: Use CameraMetadata wrapper class.
    
    Wrap the use of the camera_metadata library inside a CameraMetadata
    class to avoid memory leaks, improve code clarity, and increase type
    safety.
    
    Bug: 6243944
    Change-Id: I90ca592b5875e27e4c58ea1ca680582dc3c3b56a
    camera2: Get rid of annoying "Reading a NULL string...." error message
    
    Bug: 10461464
    Change-Id: Ie99f025db0e0e12c703f2d391e218b49330ee4dd
    Camera2: Add flush support
    
    - On HAL2 devices, fall back to wait until idle
    - On HAL3 devices, call HAL flush method
    
    Bug: 9758581
    Change-Id: Ie1c570a15f6590a1ee6c271e3b989c48079b468a
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    camera2: Implement ICameraDeviceUser::waitUntilIdle
    
    Also fixed some logging typo
    
    Change-Id: Ib254bdb137dca10b12595c23aeb1c53097423425
    camera2: Implement ICameraDeviceUser::getCameraInfo
    
    Bug: 9529161
    Change-Id: I927e39c124cd5fb19e38423506f4463acc381cb0
    Initial implementation of android.hardware.photography.CameraDevice (service)
    
    * Verified preview streaming requests
    * Other things *should* work but unverified / unimplemented in client side
    
    Missing:
    * CameraService needs to return static camera info metadata
    
    Bug: 9213377
    Change-Id: I71568560fcf18d0e2b408ed1c4d0066647314868
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera: fix the metadate parcel write issue
    
    Also rename the frameId to requestId to make it less confusing.
    
    Change-Id: I14a20b6fcabb86294afb31fc0c56397e185c1373
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Initial implementation of android.hardware.photography.CameraDevice (service)
    
    * Verified preview streaming requests
    * Other things *should* work but unverified / unimplemented in client side
    
    Missing:
    * CameraService needs to return static camera info metadata
    
    Bug: 9213377
    Change-Id: I71568560fcf18d0e2b408ed1c4d0066647314868
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: ProClient add asynchronous locks and such
    
    Change-Id: I551e5e5e76d9be733fab5224beaa7309268c0f38
    Camera: ProClient add asynchronous locks and such
    
    Change-Id: I551e5e5e76d9be733fab5224beaa7309268c0f38
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Pass camera frame metadata from camera service to Java.
    
    bug:4460717
    Change-Id: I2fae6e1dfca6b8f3a5ee5716fc7817f5417bf657
    split libsurfaceflinger_client and libcamera_client out of libui
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Initial implementation of android.hardware.photography.CameraDevice (service)
    
    * Verified preview streaming requests
    * Other things *should* work but unverified / unimplemented in client side
    
    Missing:
    * CameraService needs to return static camera info metadata
    
    Bug: 9213377
    Change-Id: I71568560fcf18d0e2b408ed1c4d0066647314868
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera: Correct stream id types
    
    Bug: 10604704
    Change-Id: I223ac5d200eb6439c08955fb7ad586592099fbae
    Fix ProCameraTests to pass on Wolfie, disabling failing tests
    
    Note: tests fail in racy conditions, but we don't occur those conditions
    in practice in other consumers of ProCamera.
    
    Bug: 8654735
    Change-Id: Ic73395ad564031a6b30ad99762dee59f9c35cecf
    Fix ProCameraTests to pass on Wolfie, disabling failing tests
    
    Note: tests fail in racy conditions, but we don't occur those conditions
    in practice in other consumers of ProCamera.
    
    Bug: 8654735
    Change-Id: Ic73395ad564031a6b30ad99762dee59f9c35cecf
    ProCamera: Fix memory leak in consumeFrameMetadata
    
    Bug: 8402301
    Change-Id: I975990185f45bb8552712271b9ac457af08a170c
    ProCamera: Fix memory leak in consumeFrameMetadata
    
    Bug: 8402301
    Change-Id: I975990185f45bb8552712271b9ac457af08a170c
    Camera: Add hotplug support (for fixed # of cameras)
    
    * Minor: also change addListener to fire the current status upon subscription
    * Minor: STATUS_AVAILABLE is now an alias for STATUS_PRESENT and deprecated
    
    Change-Id: I254608a7332095e3ef201ffea64cff156cfc1b3e
    Camera: Add hotplug support (for fixed # of cameras)
    
    * Minor: also change addListener to fire the current status upon subscription
    * Minor: STATUS_AVAILABLE is now an alias for STATUS_PRESENT and deprecated
    
    Change-Id: I254608a7332095e3ef201ffea64cff156cfc1b3e
    ProCameraTests: Minor add grey/frame count debug-only print outs
    
    Change-Id: I0f7b7f3c083a644e9bb0c2302244a5ad434e96a8
    ProCameraTests: Minor add grey/frame count debug-only print outs
    
    Change-Id: I0f7b7f3c083a644e9bb0c2302244a5ad434e96a8
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    ProCamera: Add CpuConsumer asynchronous mode support
    
    Bug: 8290146
    Bug: 8291751
    Change-Id: I25423a2b8a70ac7169911b1c7b482aa17190fe0f
    ProCamera: Add CpuConsumer asynchronous mode support
    
    Bug: 8290146
    Bug: 8291751
    Change-Id: I25423a2b8a70ac7169911b1c7b482aa17190fe0f
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    ProCameraTest: Drop frames test move processing delay between lock/unlock
    
    * This makes it more likely to find races with the buffer being unlocked
      by itself
    
    Change-Id: I1fa7dbfb73f60664a02a35678b58bcc9b06893a2
    ProCameraTest: Drop frames test move processing delay between lock/unlock
    
    * This makes it more likely to find races with the buffer being unlocked
      by itself
    
    Change-Id: I1fa7dbfb73f60664a02a35678b58bcc9b06893a2
    ProCamera: Fix waitForFrameBuffer not handling multiple outstanding frames
    
    If the CpuConsumer triggered multiple onFrameAvailable callbacks in between
    a single waitForFrameBuffer call, the old code would only handle 1 callback.
    
    This meant on two subsequent waitForFrameBuffer calls the second would always
    timeout when two buffers were already available to be unlocked.
    
    Bug: 8238112
    Change-Id: Ibefca35005ac5c408e5ada97ec4a4344a9e3e497
    ProCamera: Fix waitForFrameBuffer not handling multiple outstanding frames
    
    If the CpuConsumer triggered multiple onFrameAvailable callbacks in between
    a single waitForFrameBuffer call, the old code would only handle 1 callback.
    
    This meant on two subsequent waitForFrameBuffer calls the second would always
    timeout when two buffers were already available to be unlocked.
    
    Bug: 8238112
    Change-Id: Ibefca35005ac5c408e5ada97ec4a4344a9e3e497
    ProCamera: add waitForFrameBuffer/waitForFrameResult blocking calls
    
    Change-Id: I851d41aeecaa15245d5b9d622132e8706d6e292c
    ProCamera: add waitForFrameBuffer/waitForFrameResult blocking calls
    
    Change-Id: I851d41aeecaa15245d5b9d622132e8706d6e292c
    Camera: ProCameraTests: clean up a bit, still needs more cleanup
    
    Change-Id: Ia7e18c81002c8d98176f21553cf13cbd13cfdf5d
    Camera: ProCameraTests: clean up a bit, still needs more cleanup
    
    Change-Id: Ia7e18c81002c8d98176f21553cf13cbd13cfdf5d
    ProCamera: Add getInfo for getting static metadata (and a test)
    
    Change-Id: I3b87dfbc621d98bf41f37a892a1012baf85b5166
    ProCamera: Add getInfo for getting static metadata (and a test)
    
    Change-Id: I3b87dfbc621d98bf41f37a892a1012baf85b5166
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: ProCameraTests - add CpuConsumer tests for dual streams
    
    Change-Id: Ia010450dc79ac2841645b8c2e1553c9ec74ee5e3
    Camera: ProCameraTests - add CpuConsumer tests for dual streams
    
    Change-Id: Ia010450dc79ac2841645b8c2e1553c9ec74ee5e3
    Camera: ProCamera - add createStreamCpu and unit test
    
    Change-Id: I468172dbfdd78510b273bf9d119c950cbeda7ea3
    Camera: ProCamera - add createStreamCpu and unit test
    
    Change-Id: I468172dbfdd78510b273bf9d119c950cbeda7ea3
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    Camera: ProCamera - add createStream stub and unit test for it
    
    Change-Id: Ic05130e63f4f2c0c3278ba348b192992169f105f
    Camera: ProCamera - add createStream stub and unit test for it
    
    Change-Id: Ic05130e63f4f2c0c3278ba348b192992169f105f
    Camera: ProCameraTests - add asynchronous locking unit test
    
    Change-Id: Ib79eb84046c9ed898bfb086a6600265fc351924c
    Camera: ProCameraTests - add asynchronous locking unit test
    
    Change-Id: Ib79eb84046c9ed898bfb086a6600265fc351924c
    Camera: ProClient add asynchronous locks and such
    
    Change-Id: I551e5e5e76d9be733fab5224beaa7309268c0f38
    Camera: ProClient add asynchronous locks and such
    
    Change-Id: I551e5e5e76d9be733fab5224beaa7309268c0f38
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Update the test output path.
    
    In order for the automated test to pick up the test.
    The output must be in /data/nativetest.
    
    Change-Id: Idc15036afb5617ac1ef67ff74ba332c5f73fe155
    Update the test output path.
    
    In order for the automated test to pick up the test.
    The output must be in /data/nativetest.
    
    Change-Id: Idc15036afb5617ac1ef67ff74ba332c5f73fe155
    Camera: ProClient add asynchronous locks and such
    
    Change-Id: I551e5e5e76d9be733fab5224beaa7309268c0f38
    Camera: ProClient add asynchronous locks and such
    
    Change-Id: I551e5e5e76d9be733fab5224beaa7309268c0f38
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Camera: Add unit test infrastructure for libcameraclient
    
    Change-Id: I957538663ae8332d26f3640c63a75efc79f4ac5c
    Camera: Add unit test infrastructure for libcameraclient
    
    Change-Id: I957538663ae8332d26f3640c63a75efc79f4ac5c
    Camera: Add unit test infrastructure for libcameraclient
    
    Change-Id: I957538663ae8332d26f3640c63a75efc79f4ac5c
    Permit conditional registry of mediaserver extensions
    
    Change-Id: I94dc0d038e702dfe1779a50a1de0fae9bad15057
    Factor out and speed up permission-checking code
    
    Use the caching permission check for dump to save IPC.
    
    Cache getpid() to save kernel call for other permission checks.
    
    The C runtime library getpid() can't cache due to a fork
    race condition, but we know that mediaserver doesn't fork.
    
    Don't construct String16 on the stack.
    
    Change-Id: I6be6161dae5155d39ba6ed6228e7683e67be34ed
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Restore stagefright command line tool.
    
    Change-Id: Ia17f48522f601d6a057ef3e1e8cd01f80a5c9951
    Remove "LOCAL_MODULE_TAGS := debug" for stagefright tests
    
    Change-Id: I53815d2f6d7dfe7eebb26c3802eb3d195244aab1
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Turn off debug tags in stagefright modules.
    LOCAL_MODULE_TAGS := debug causes the module to be included in every userdebug
    build, regardless of whether it's specified as a dep by the device config.
    This CL switches them all to optional (i.e. default behavior) so that we can
    do (userdebug) device builds without pulling these in.
    
    Change-Id: I4b7b65afea61865dd38b3af55550fb8f10edf66d
    Add a test utility for MediaMuxer.
    
    This test/utility copy samples from one video and mux into another video.
    It support trimming, cutting audio or video track.
    It can run simply as command line like:
    adb shell muxer -a -v -s 1000 -e 8000 "/sdcard/DCIM/Camera/VID_*.mp4"
    
    bug:7991013
    
    Change-Id: I8a2eeff3cabd001b6b2a7062d991dd076edbf22e
    Add a test utility for MediaMuxer.
    
    This test/utility copy samples from one video and mux into another video.
    It support trimming, cutting audio or video track.
    It can run simply as command line like:
    adb shell muxer -a -v -s 1000 -e 8000 "/sdcard/DCIM/Camera/VID_*.mp4"
    
    bug:7991013
    
    Change-Id: I8a2eeff3cabd001b6b2a7062d991dd076edbf22e
    Add explicit cutils to stagefright
    
    Without this, some changes I'm making over in frameworks/native
    result in a link-time failure to find android_atomic_dec.
    
    Change-Id: Ieb45a86ef6508816ac51589e249ff89caf7ba309
    Add explicit cutils to stagefright
    
    Without this, some changes I'm making over in frameworks/native
    result in a link-time failure to find android_atomic_dec.
    
    Change-Id: Ieb45a86ef6508816ac51589e249ff89caf7ba309
    Remove obsolete references to libmedia_native
    
    Bug: 6654403
    Change-Id: I3993d62987cf0dd85db10bf002a5cce53d4f01bd
    Remove obsolete references to libmedia_native
    
    Bug: 6654403
    Change-Id: I3993d62987cf0dd85db10bf002a5cce53d4f01bd
    experimental support for fragmented mp4 playback in nuplayer
    
    cherry picked from change 170999
    
    Change-Id: I407775f0290154ad4961134839a15c9f296424c0
    AV Android make files changes
    
    o plus a few file relocation: ActivityManager.cpp/h, SoundPool.h, etc
    o remove some runtime dependencies to libandroid, libandroid_runtime, etc
    
    Change-Id: I047a47c5fb361dd5cf85cd98798c39f629a75d10
    stagefright: remove dependency on skia
    
    skia is only used to write a jpeg file, link directly to libjpeg
    instead.
    
    Change-Id: Iea8f4a2347c38328776541d2b74bcbdea3f62041
    Remove JNI in LOCAL_C_INCLUDE from non-JNI related Android.mk files.
    
    o related-to-bug: 6214141
    
    Change-Id: Ic88d1732b3e014af47532a0809e01f6086e8464d
    Add libmedia_native
    
    Change-Id: Ib8cff8abd73723b793f08da99ad59549f219e0e7
    Switched to use the header files in /frameworks/native
    and deleted the duplicate header files in /frameworks/base
    
    o related-to-bug: 6044887
    
    Change-Id: I17e0692d9a9b5c8796ded36677c833ca8ab36795
    Implementation of a java media codec interface and associated tools.
    
    Change-Id: I13e54062d4de584355c5d82bb027a68aeaf2923b
    Move away from MediaDebug and use ADebug instead
    
    Change-Id: I963a3b6f79a7292891973cbeeaf3378b38629f08
    merge libsurfaceflinger_client into libgui
    
    this is the first step in unifying surfacetexture and surface.
    for this reason the header files were not moved, as most of them
    will eventually go away.
    
    NOTE: currently we keep libsurfaceflinger_client.so as an empty
    library to workaround prebuilt binaries wrongly linking against
    it.
    
    Change-Id: I130f0de2428e8579033dc41394d093f4e1431a00
    Add the option '-S' to use surface allocated buffers in the stagefright cmdline tool.
    
    Change-Id: Ic84eeed1679d6bf68c92de0e20d30e7a3c4d410f
    Initial support for a true streaming player for mpeg2 transport streams.
    
    Change-Id: I153eec439d260a5524b21270e16d36940ec3161a
    Support streaming data across binder boundaries.
    
    Change-Id: Ifbac61406dcb81343765f99ccba08bd90f9274cc
    Squashed commit of the following:
    
    commit 0870f7bdd10a7cd36087d723d1957d8e1b967ca7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Nov 22 12:57:04 2010 -0800
    
        set_surface_crop doesn't seem to work right yet, stop using it in the SoftwareRenderer.
    
        Change-Id: If0a24f78b7810a6cecaa82eb4f23d0f90c22cc42
    
    commit 4767b52bee3a54ae117a8708d6832276a44e6a6a
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Nov 22 11:14:57 2010 -0800
    
        info->mMediaBuffer may still be NULL at this point...
    
        Change-Id: I25a71569015b1bb87f1ea7efff7588958774426f
    
    commit 0cef79874e1f1ddb10b7402177a87d3cffc7de92
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Nov 22 10:55:12 2010 -0800
    
        QCOM's YVU420 color format conversion has now been tested.
    
        Change-Id: I7fef4b642a928af15d42f006f7cdc107d5ff1d67
    
    commit 84fe05a6c969ede0ce8a85a530e110afca07c7a7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Nov 22 09:59:50 2010 -0800
    
        Removed remaining traces of suspend/resume. Proper reporting of video dimensions based on cropping rectangle.
    
        Change-Id: Ib238b80cbc1f19e7d312f2422eb5e9ab6b06b1bc
    
    commit 50970cdc837c5c498bcf0cb61b436196ca9e2ef7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 16:11:06 2010 -0800
    
        Revamped Software Renderer respects the crop rectangle.
    
        Removed obsolete ADRENO support code.
    
        Change-Id: I984cbc8a99c4d97e09e7d1b1292099c88b9ae535
    
    commit 8abbc6a5608bff650f968540f24a2eab75f254ed
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 16:10:41 2010 -0800
    
        The metadata retriever now respects the crop rectangle while capturing a video frame.
    
        Change-Id: Id3377176060086d16717f62c77ce26fabe899050
    
    commit 2d42e4466609d304e88bd2cdd6eb7b297340cc21
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 16:09:50 2010 -0800
    
        Changed ColorConverter APIs to be more general.
    
        Clients can now refer to crop rectangles in both source and destination.
    
        Change-Id: Ief151d736818396d0389ec04e7df5650e3ad7c04
    
    commit 273184303d54a54febd3e9c3dd4df30507ea78b5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 15:04:06 2010 -0800
    
        The stagefright commandline tool now writes the extracted video frame to /sdcard/out.jpg
    
        Change-Id: Ieb2ab3fda7a7cd9294beccb8db0eed75096eeef4
    
    commit 2d43390328cadf4ba94c1c3c02e4fb30baa29690
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 14:36:55 2010 -0800
    
        The AVC software decoder now properly advertises the cropping rectangle.
    
        Change-Id: Idb7a8a7e2fde5740f0fc34b7e8c92eca2577104b
    
    commit 9a7ed23c2fac8ce19dce7a34a603acee945a89f6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 13:40:39 2010 -0800
    
        OMXCodec now signals a format change if the cropping rectangle changes.
    
        ...and puts the cropping info into its output format.
    
        Change-Id: I3ffbd8e877ba286fe06a82c536ef20d92548d2e2
    
    commit efe0323947029df1c502599ccc288c8d676dfd31
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 11:29:39 2010 -0800
    
        Stagefright's MetaData object now supports rectangle items.
    
        Change-Id: I5667bb5ee6622c76104b99fb57f60abb802a8504
    
    Change-Id: I27cb78f2c5e0353f95fdfc5cb53991949ed75b70
    Remove one more opencore include path
    
    Bug: 3101573
    Change-Id: Id60845e4c46523e910504fe6e707f8247a3b6102
    Include the framework copy of the OpenMAX headers instead of referencing external/opencore.
    
    Change-Id: I762f59acf5e1f770e4d7c2d89af362bfffebefa6
    related-to-bug: 3101573
    Add a video record utility
    
    Change-Id: I3aa7cadf399aa319ee9ca3f391fd8599742bfb7e
    Support for writing the extracted data to an .mp4 file in the stagefright commandline tool.
    
    Change-Id: I972324a8fc9757e6e8116b0270ec0882106f8733
    Remove most stagefright property overrides, remove VorbisPlayer and VorbisMetadataRetriever as this functionality is now provided by stagefright.
    
    Change-Id: Ieafe75a4550c273ad59b4518d7cd4c0fce0f7cce
    related-to-bug: 2370115
    Simplify the code in the stagefright commandline utility.
    
    Change-Id: Ia222b25ef12af34f6434421fd96b67eca800d1ab
    Better diagnostics in the stagefright commandline tool, support for playing sine-tones using a filename of "sine:[samplingrate]", i.e. sine:44100. Support for playing audio through to the speakers by using "-o" in addition to "-a".
    
    related-to-bug: 2553359
    Change-Id: Ic49eb89feb62474d9513bc21571e0e8fe3a15e0b
    Tag stagefright development tools as "debug-only".
    Add missing shared libraries in linker commands.  Currently these libraries are
    linked implicitly via dependencies of other shared libraries.
    A small sample tool to encode pcm audio data to amr, decode it again and play it. Some changes to OMXCodec to properly configure the AMR decoder(s).
    eclair snapshot
    Added an API IOMX::createRendererFromJavaSurface.
    
    This api allows to instantiate a renderer by specifying the hosting java Surface object. This hides the implementation details of (java-)Surface, (native-)Surface and friends.
    Only build the "full" stagefright (including MediaExtractors and MediaPlayer) if BUILD_WITH_FULL_STAGEFRIGHT define is set (to true).
    Move JPEGSource.{cpp,h} into libstagefright.
    Some work to make audio encoding work.
    Squashed commit of the following:
    
    commit 3fa5f3ce910f34da0cedb8bcce1bd593db7eb740
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 27 14:48:54 2009 -0700
    
        Getting rid of more code now obsolete with the departure of OMXDecoder.
    
    commit e0d923ec0c7bb60bec8eb97739036a4c70c0feef
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 27 14:33:06 2009 -0700
    
        Remove obsoleted OMXDecoder class. OMXDecoder is dead, long live OMXCodec.
    Refactored "stagefright" commandline app, split off JPEGSource.
    Squashed commit of the following:
    
    commit 5bb012f0065f7ffaaeb4f569d71f0e3a8d6b19c3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 10:40:08 2009 -0700
    
        An attempt at fixing export using the qcom encoders. More quirks.
    
    commit 0690e76bfa48118a68287ccf1bbfa82febaa620c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 09:08:28 2009 -0700
    
        Callbacks are now dispatched from a separate thread in OMX.
    
    commit c6571a039526df29b6343f9a1971dbc019088c61
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 15:42:25 2009 -0700
    
        Massive API changes throughout stagefright, smart pointers everywhere.
    
    commit 900612af6a0555664d9ba195112cd859491265f4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 13:33:12 2009 -0700
    
        OMXCodecs now properly shutdown.
    
    commit 96732f05e1b0603dcd1b11f16a23512592eeb4f5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 12:04:04 2009 -0700
    
        More work on JPEG decoding using the hardware OMX component.
    
    commit 63839a073ac393e3a130434ba467969053b694ad
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 12 13:13:31 2009 -0700
    
        An attempt to drive the JPEG decoder OMX node.
    
    commit 3ac2fe5ab2926eda81b2123610b2434c645294ff
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:38:21 2009 -0700
    
        Renamed StateMachine to OMXCodec and put it in its proper place.
    
    commit 247da75a96bf8881956413023dd49a84d5b4f5b2
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:06:19 2009 -0700
    
        Statemachine is now a full-fledged MediaSource.
    
    commit 045244f6771fa0b9b329495c953afda900a84b71
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 7 09:16:54 2009 -0700
    
        Properly setup the input format when exporting to AMR audio.
    
    commit 271b984cb32c5cd9e46e3f90ae121f334e4b8da9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 6 09:59:38 2009 -0700
    
        Added some code to test audio encoding to the OMX harness.
    
    commit 79af4748e4af33bd66d3fbac606e332a69741cf4
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 5 14:36:22 2009 -0700
    
        Merge the old OMXDecoder and the new, shiny, StateMachine code.
    
    commit 91cf5dd77a8762bc10a0b2ffce35e3bbeb262231
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 4 17:41:43 2009 -0700
    
        A new harness to test OMX node compliance (and quirks).
    Build the stagefright library by default.
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    Fix build.
    
    Change-Id: If87636a654c8cfb2449e246df213fb24b08b4ad3
    fix build
    
    Change-Id: I859bd75eb796b0cb8da30ad947776d3e38f3873f
    Fix build. last attempt.
    
    Change-Id: Ib955134f90b78cfc0d31272021ad5907a41df708
    always pass the BufferQueue explicitely to consumers
    
    Change-Id: Ic2d9a9cf184a482b3c78a481ed693ee32df5ca13
    Adds VP9 decoding support for stagefright.
    
    Also change the VP8 encoder role name from
    video_encoder.vpx to video_encoder.vp8 for
    future VP9 encoder support.
    
    
    Requires the change in frameworks/native and media_codecs.xml
    corresponding to the device.
    
    
    VP9 decoding test will be added to cts repo later.
    New HLS implementation supporting independent stream sources, audio-only streams
    
    and more.
    
    Change-Id: Icfc45a0100243b2f7a14a9e65696be45b67d6495
    MediaMuxer prefer not to use the MPEG4Writer in real time recording mode.
    
    By default, MPEG4Write will keep running in real time recording mode.
    
    bug:8598944
    
    Change-Id: Idf7fbd4e0feb7763660a74279ba8817b79098aaf
    MediaMuxer prefer not to use the MPEG4Writer in real time recording mode.
    
    By default, MPEG4Write will keep running in real time recording mode.
    
    bug:8598944
    
    Change-Id: Idf7fbd4e0feb7763660a74279ba8817b79098aaf
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    HLS now properly publishes its "seekable" flags after connection
    
    has successfully completed and a sufficient amount of data fetched,
    and only then signals that preparation is completed.
    
    Change-Id: I7684a14238b826909f518f2af506966e522dfcfc
    HLS now properly publishes its "seekable" flags after connection
    
    has successfully completed and a sufficient amount of data fetched,
    and only then signals that preparation is completed.
    
    Change-Id: I7684a14238b826909f518f2af506966e522dfcfc
    Remove unnecessary parameter
    
    Just get the parameter on server side
    
    Change-Id: I433a63104dbb257e0d862be2ab61847cb36d1c15
    Remove unnecessary parameter
    
    Just get the parameter on server side
    
    Change-Id: I433a63104dbb257e0d862be2ab61847cb36d1c15
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    stop using a deprecated SurfaceTextureClient ctor"
    stop using a deprecated SurfaceTextureClient ctor"
    Revert "stop using a deprecated SurfaceTextureClient ctor"
    
    This reverts commit aef79b0676d8f0ee8ef637ec8be5ba73225b038d
    
    Change-Id: I5f6cf4d6d5dc895a9426f212dfc8a25b4bf2d23a
    Revert "stop using a deprecated SurfaceTextureClient ctor"
    
    This reverts commit aef79b0676d8f0ee8ef637ec8be5ba73225b038d
    
    Change-Id: I5f6cf4d6d5dc895a9426f212dfc8a25b4bf2d23a
    stop using a deprecated SurfaceTextureClient ctor
    
    Change-Id: I792277b0d711da22f6b2abb7f1d837450d6af8e2
    stop using a deprecated SurfaceTextureClient ctor
    
    Change-Id: I792277b0d711da22f6b2abb7f1d837450d6af8e2
    Stagefright command line tool: input file name last
    
    Show in usage that the source file name comes last, and is preceded
     by the options.
    
    Change-Id: I8407fc36c8d19785cb2e6e1f7b7a352a8d86f889
    Stagefright command line tool: input file name last
    
    Show in usage that the source file name comes last, and is preceded
     by the options.
    
    Change-Id: I8407fc36c8d19785cb2e6e1f7b7a352a8d86f889
    Use new surface flinger API.
    
    Change-Id: I594c6e15db5f617d2feaac1a65b5316daa3812d0
    Fixed incorrect codec type in the output for profiles/levels in cmd stagefright
    
    o related-to-bug: 6401068
    
    Change-Id: Icdc2cfa37ed053f53d1466d8b068f1d9973ed82f
    Add option to stagefright for writing decoded PCM
    
    b/774846
    Change-Id: I8edce3e7d60b3f56b4eb1ed75ca80285c5ae3972
    Add profile/level dump for encoders in cmd stagefright
    
    o related-to-bug: 6401068
    
    Change-Id: I51e3eeb026aa75c4492d421f5f239dc9072a9c8b
    Add option to stagefright for writing decoded PCM
    
    Change-Id: I8edce3e7d60b3f56b4eb1ed75ca80285c5ae3972
    Better error logging during meta data retrieval. Fixed the stagefright
    
    commandline tool to open the file to extract thumbnails from itself since
    mediaserver may not have permission to open files.
    
    Change-Id: Iabe16b3248e9bb0f266b0866a8d2ccba2ab7d2a8
    related-to-bug: 6321237
    stagefright: remove dependency on skia
    
    skia is only used to write a jpeg file, link directly to libjpeg
    instead.
    
    Change-Id: Iea8f4a2347c38328776541d2b74bcbdea3f62041
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    NuPlayer is now taking on the task of streaming over RTSP.
    
    Change-Id: Ie204db8810807f1e7981959e34dc0149e5d9563a
    Support for an MPEG2 Program Stream extractor.
    
    Change-Id: I606d87c278f72b22a5b6d7ee57bce6b02e280d41
    Add an option to dump the raw stream to a file in the stagefright cmdline tool.
    
    Change-Id: Ie19eca2cdf162d6973037ec554ef5916243ea7d7
    Properly connect to surface flinger in our shell tools
    
    Also raise the layer to INT_MAX to float in front of the toolbar.
    
    Change-Id: I045a1c83924e6655f1734d15f2504b90312eec64
    QueryCodecs() signature change
    
    Restore QueryCodecs() signature exactly as used by third-party libs.
    Add an alternative function to select HW only codecs.
    
    Change-Id: Ibb2cb4dd36fc0c6599eb93aa5751c216397e3b6f
    Add option to query hardware decoders only
    
    Add an option to OMXCodec::QueryCodecs() to filter out
     software codecs.
    
    Update stagefright command line tool to list the roles of codecs.
    
    Change-Id: Icddb79118c30fe13cc3aea20f340174cc082c4e0
    Include all supported mime types when querying decoder profile/level support.
    
    Change-Id: Ia1c930eee489bfebb482ac5079bd6ac9354532f2
    SF transactions are now O(1) wrt IPC instead of O(N).
    
    Change-Id: I57669852cbf6aabae244ea86940a08a5a27ffc43
    New option in the stagefright commandline tool.
    
    Use '-S' to allocate decoder buffers from a surface
    Use '-T' to allocate decoder buffers from a surface texture
    
    Change-Id: Ib71ea53d0fd1b2def08bfeac2fd8bcbdc1938161
    Reconstruct sync frame indication for content served by the MPEG2TSExtractor
    
    Strip data up to the first IDR frame if necessary.
    
    Change-Id: I4a096785eb1a17b7484983788e223d188454771d
    Add an option to force to use HW codec in stagefright cmd tool
    
    Change-Id: If6c277dd5a3f7a0b62acd6721343618b0be085fc
    Extract embedded cover art (aka poster frame) in mp4 files
    
    Change-Id: Ic9421ee27b9aa3b27df00878b887de20f25d232b
    Add the option '-S' to use surface allocated buffers in the stagefright cmdline tool.
    
    Change-Id: Ic84eeed1679d6bf68c92de0e20d30e7a3c4d410f
    Squash commits of the following patches, cherry-picked from other branch - do not merge.
    
    o Prepare for publishing MediaMetadataRetriever as public API
      step one:
      o replaced captureFrame with getFrameAtTime
      o removed getMode
    
    o Replace MediaMetadataRetriever.captureFrame() with MediaMetadataRetriever.getFrameAtTime()
      as part of the preparation for publishing MediaMetadataRetriever as public Java API
    
    o Remove captureFrame from MediaMetadataRetriever.java class
      It has been replaced by getFrameAtTime() method
    
    o Replace extractAlbumArt() with getEmbeddedPicture() in MediaMetadataRetriever.java
    
    o Publish MediaMetadataRetriever.java as public API
      o Removed setMode() methods and related mode constants
      o Removed some of the unused the metadata keys
      o Updated the javadoc
      o part of a multi-project change.
    
    bug - 3309041
    
    Change-Id: I2efb6e8b8d52897186b016cb4efda6862f5584c4
    Publish MediaMetadataRetriever.java as public API
    
    o Removed setMode() methods and related mode constants
    o Removed some of the unused the metadata keys
    o Updated the javadoc
    
    o part of a multi-project change.
    
    bug - 2433195
    
    Change-Id: I5ed167f1fd6a53cb143b7dc385b149431d434438
    Squashed commit of the following:
    
    commit 9254c845d7c82976fd4b8be406ce4b17eeb0e119
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Dec 3 15:26:12 2010 -0800
    
        Remove obsolete code from the cached data source.
    
        Change-Id: I794b986ac8977cbc834dff189221a636ba564e36
    
    commit 2ee33711064c58c53ba65ed9e63dd4b01ec2380e
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Dec 3 15:23:13 2010 -0800
    
        LiveSource is dead, long live LiveSession.
    
        Change-Id: Ibcd0731ecf9c94f0b3e5db3d53d012d9da2a1c66
    
    commit 9eabb2c3cd8571ab859bdeae0aa7f655c414d8fa
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Dec 3 12:49:31 2010 -0800
    
        Respect explicitly signalled discontinuities.
    
        Change-Id: I3c0c16a2de7a99742d25db7d1b2ff0258de52271
    
    commit 7f7f7b6b906b6ece6e4d43af7fd5f494e805c5e5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Dec 3 11:45:57 2010 -0800
    
        Better protection against syncword emulation in AAC ADTS content.
    
        Change-Id: I867e80a4556dd46d24ab3e781177c248a5221719
    
    commit fe765766582efcc350aed01135ea603576adccf6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Dec 3 09:15:59 2010 -0800
    
        New implementation of http live driving code.
    
        Change-Id: I31ddf3d6a0d5929b121be704a2b9c3d6775f7737
    
    Change-Id: Id8d1829c8fcb173756965013f848c1d426ef1048
    Prepare for publishing MediaMetadataRetriever as public API
    
    step one:
    o replaced captureFrame with getFrameAtTime
    o removed getMode
    
    bug - 2433195
    
    Change-Id: I38a8cecef29014692f0b08b8818326e3ebb40a12
    Squashed commit of the following:
    
    commit 0870f7bdd10a7cd36087d723d1957d8e1b967ca7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Nov 22 12:57:04 2010 -0800
    
        set_surface_crop doesn't seem to work right yet, stop using it in the SoftwareRenderer.
    
        Change-Id: If0a24f78b7810a6cecaa82eb4f23d0f90c22cc42
    
    commit 4767b52bee3a54ae117a8708d6832276a44e6a6a
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Nov 22 11:14:57 2010 -0800
    
        info->mMediaBuffer may still be NULL at this point...
    
        Change-Id: I25a71569015b1bb87f1ea7efff7588958774426f
    
    commit 0cef79874e1f1ddb10b7402177a87d3cffc7de92
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Nov 22 10:55:12 2010 -0800
    
        QCOM's YVU420 color format conversion has now been tested.
    
        Change-Id: I7fef4b642a928af15d42f006f7cdc107d5ff1d67
    
    commit 84fe05a6c969ede0ce8a85a530e110afca07c7a7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Nov 22 09:59:50 2010 -0800
    
        Removed remaining traces of suspend/resume. Proper reporting of video dimensions based on cropping rectangle.
    
        Change-Id: Ib238b80cbc1f19e7d312f2422eb5e9ab6b06b1bc
    
    commit 50970cdc837c5c498bcf0cb61b436196ca9e2ef7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 16:11:06 2010 -0800
    
        Revamped Software Renderer respects the crop rectangle.
    
        Removed obsolete ADRENO support code.
    
        Change-Id: I984cbc8a99c4d97e09e7d1b1292099c88b9ae535
    
    commit 8abbc6a5608bff650f968540f24a2eab75f254ed
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 16:10:41 2010 -0800
    
        The metadata retriever now respects the crop rectangle while capturing a video frame.
    
        Change-Id: Id3377176060086d16717f62c77ce26fabe899050
    
    commit 2d42e4466609d304e88bd2cdd6eb7b297340cc21
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 16:09:50 2010 -0800
    
        Changed ColorConverter APIs to be more general.
    
        Clients can now refer to crop rectangles in both source and destination.
    
        Change-Id: Ief151d736818396d0389ec04e7df5650e3ad7c04
    
    commit 273184303d54a54febd3e9c3dd4df30507ea78b5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 15:04:06 2010 -0800
    
        The stagefright commandline tool now writes the extracted video frame to /sdcard/out.jpg
    
        Change-Id: Ieb2ab3fda7a7cd9294beccb8db0eed75096eeef4
    
    commit 2d43390328cadf4ba94c1c3c02e4fb30baa29690
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 14:36:55 2010 -0800
    
        The AVC software decoder now properly advertises the cropping rectangle.
    
        Change-Id: Idb7a8a7e2fde5740f0fc34b7e8c92eca2577104b
    
    commit 9a7ed23c2fac8ce19dce7a34a603acee945a89f6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 13:40:39 2010 -0800
    
        OMXCodec now signals a format change if the cropping rectangle changes.
    
        ...and puts the cropping info into its output format.
    
        Change-Id: I3ffbd8e877ba286fe06a82c536ef20d92548d2e2
    
    commit efe0323947029df1c502599ccc288c8d676dfd31
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Nov 19 11:29:39 2010 -0800
    
        Stagefright's MetaData object now supports rectangle items.
    
        Change-Id: I5667bb5ee6622c76104b99fb57f60abb802a8504
    
    Change-Id: I27cb78f2c5e0353f95fdfc5cb53991949ed75b70
    Display AVC video sample profile and level for "stagefright" util
    
    Change-Id: I04b3f67d162cf3827bc74ad98cd1e1a0f5f14172
    Added a commandline option "-x" to the stagefright commandline tool.
    
    To display a histogram of decoding times and ideal frame rate distributions.
    
    Change-Id: Id8d70fd2960858c75f5f91ae9ebb9902ad5c37d3
    Squashed commit of the following:
    
    commit 29a4d3effb05a2e074cb0693316ab1977baeb0b6
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Sep 27 12:01:32 2010 -0700
    
        Fully working implementation of MPEG2TSWriter (for AAC and AVC sources).
    
        Change-Id: I8a32a47565b647bf6c078c520e39565e08ea0d84
    
    commit f4dec4c3899f3be393508e180d6c07e249d3335e
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Sep 27 10:36:31 2010 -0700
    
        More reliable identification of MPEG2 transport streams. Don't keep scanning forever in case the stream does not have both audio and video tracks.
    
        Change-Id: Icc5b4e8be145b2805e8776559546a6818342aea7
    
    commit 4fe3cc942f9b3d3cf54138b828c41214aa916dd2
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Sep 27 08:23:39 2010 -0700
    
        test code
    
        Change-Id: I16560a17661407d06497f99ff88230724bb898af
    
    commit 64d988b24f49f179a90fa677be11c823959e734b
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Sep 23 14:42:52 2010 -0700
    
        First shot at supporting writing to an MPEG2 transport stream.
    
        Change-Id: Ie537939a99fa3ddc0c7661c47c18277584817c74
    
    Change-Id: If78fd034af8f6e8ceac8dbeff96d5ecb3f6b96dc
    Instead of just writing one track to the .mp4 file, write all of them (at most 1 video and 1 audio track). Also support httplive URIs in the stagefright commandline tool.
    
    Change-Id: I67b287cf76546191f398939aabe4480d9e79a948
    Proper sync-frame detection for sources that don't already provide it.
    
    Change-Id: Iafeee847b015c5cf6bec6dd5fac22a8d3e8cb78e
    Make sure stagefright -o terminates even if we're using a raw audio source (such as .wav pcm)
    
    Change-Id: Iec809df89e6b75706cf5b1ce21006c2e217e018f
    Various changes to improve rtsp networking, reduce packet loss and adapt to ALooper API changes.
    
    Change-Id: I110e19d5ce33e597add3ffbd3e3ff3815862396d
    Add a seek test to the stagefright commandline tool.
    
    Change-Id: Ibf3517afa288fc4c7e2184c11bc7a63594f321df
    Support for writing the extracted data to an .mp4 file in the stagefright commandline tool.
    
    Change-Id: I972324a8fc9757e6e8116b0270ec0882106f8733
    Make sure sine: is supported again in stagefright commandline tool.
    
    Change-Id: I703f1a8b7556543ef71b141dc8e38d8b82d8c6dc
    Simplify the code in the stagefright commandline utility.
    
    Change-Id: Ia222b25ef12af34f6434421fd96b67eca800d1ab
    Make the -o option actually terminate.
    
    Change-Id: I91b70ee5c3e1fc9b8bb645e219af296867692e65
    Better handling of codec initialization failure in the player and thumbnail extractor. Return a runtime error instead of asserting if the software MPEG4/H.263 decoder fails to initialize.
    
    Change-Id: I5cba02ee85a41e43c2623053de40f26e2cf2efe4
    related-to-bug: 2699505
    Better diagnostics in the stagefright commandline tool, support for playing sine-tones using a filename of "sine:[samplingrate]", i.e. sine:44100. Support for playing audio through to the speakers by using "-o" in addition to "-a".
    
    related-to-bug: 2553359
    Change-Id: Ic49eb89feb62474d9513bc21571e0e8fe3a15e0b
    Coalesce multiple encoded AAC frames into a single input buffer on this particular OMX codec to increase throughput significantly.
    
    Change-Id: I90c7db6656a53339c5d454336548c4f00d0d9064
    related-to-bug: 2548426
    QueryCodecs now returns the names of the software codecs (non-OpenMax) as well.
    
    Change-Id: Ic4cd61f4dd722fb0dda544ffaa5615e87e3a4d40
    related-to-bug: 2541647
    Properly use a long long literal to avoid under/overflow during fps computation.
    
    Change-Id: I04730c86d43d6192ded3e779631effda9dd06e63
    HTTPDataSource must be connected before it is usable. Fix this in the stagefright tool.
    
    Change-Id: I5313b2cb7839233d51b2d37a03b6598b0760c2e0
    Extend stagefright tool to extract either album art or video frame.
    
    Change-Id: Iab50924e37a1aad057470a349c8f1a81858424e9
    Better diagnostics for the stagefright tool and codec performance.
    
    related-to-bug: 2450938
    When the extractor is not able to be created successfully, don't crash
    Upgrade for the stagefright commandline tool to support extracting thumbnails and to optionally prefer software codecs.
    Squashed commit of the following:
    
    commit 144b1c40e9cf08a584c50e1bef7ba3f287e81a4f
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Dec 16 09:28:23 2009 -0800
    
        This H264 file shows a certain problem even better.
    
    commit 3245f1f3b7471975aeeb824a756c987abd610f55
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Dec 16 09:20:08 2009 -0800
    
        Using only the QA testfiles now.
    
    commit 074817eb3816c5dd70858a3594e3b92d799d873b
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Dec 15 16:17:39 2009 -0800
    
        Yay, roles are back again now that the API is in place.
    
    commit 6d847e4932cc38301ae27cb7283b7f1553a95457
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Dec 15 13:01:20 2009 -0800
    
        Added commandline option for specifying the random seed for reproducable tests.
    
    commit 62ab37b26336eaa67e49791c41c996acb6acee3f
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Dec 14 10:53:27 2009 -0800
    
        When issuing a seek it is important that only the first MediaSource::read call has the seek option.
    
    commit e77c46644b2fb6862bafa3569f7d304252074f1e
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Dec 7 16:39:07 2009 -0800
    
        Make sure the tests are actually built, sp<OMXCodec> becomes sp<MediaSource>
    
    commit 6df56915bd55a9445b3c6f953d3cc251d81579b8
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Dec 3 14:25:36 2009 -0800
    
        Temporarily disable support for querying the roles of OMX components.
    
    commit 31bb26930df9e3658dea684cedb4b0f1a06a4a88
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Dec 1 13:36:52 2009 -0800
    
        Disregard EOS events, slightly change the way the EOS flag on output buffers is handled.
    
    commit 4c382fbc9aebee8197d5988d04378062809e7c48
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Dec 1 09:37:24 2009 -0800
    
        New random seek test for the codec tests. Fixed "sticky" end-of-output-buffers flag behaviour in OMXCodec.
    
    commit c762eac3e44309592b61a168d66e091cf609fa03
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 3 14:13:43 2009 -0800
    
        Fix a typo.
    
    commit 50540a59b65c7d476b0193c7494cd75895e6ca6d
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Nov 3 09:48:35 2009 -0800
    
        Some more fine tuning of the unit tests, make MPEG4Extractor less verbose.
    
    commit 1157a7e52a0636706caa235abe16d2ff8a0b8140
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Oct 28 12:01:01 2009 -0700
    
        Changes to the IOMX::listNodes API, this now returns the component's roles as well, unit tests now test all components in all supported roles by default.
    
    commit 30fbf2d8c6cb927689f7ba75eb550a81e9df488a
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Oct 26 09:45:26 2009 -0700
    
        Initial check-in of unit tests for OMX components.
    Don't count empty buffers when computing the frame rate.
    Squashed commit of the following:
    
    commit 1efc38dc3c33fef57b759002db3965ed07a28cb0
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 19 14:36:14 2009 -0800
    
        Sending the SEEK-COMPLETE notification temporarily broke seeking backwards in time behaviour. This is now fixed.
    
        Also, get rid of the semi-random delay after posting buffers to surface flinger in favour of delaying the buffer release until the next frame is displayed.
    
    commit 51973062eb5ee63fd64b845d72bac517cc3369cf
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 14:01:43 2009 -0800
    
        Fix one more unit test, properly send seek-complete notification only after seek actually completed.
    
    commit cb22250b34b1fcfe1bf459723a761fd003950229
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 12:31:36 2009 -0800
    
        Fix seek-while-paused in AwesomePlayer, revert to using FileSource if MmapSource fails.
    
    commit 25eb9241138ddf7bb27ce90657116c5f8a94d880
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 12:30:40 2009 -0800
    
        Support seeking and duration in AMRExtractor, assuming all frames are the same size.
    
    commit 44192f2ebb7ea3bbd3ba5910025692dbc6a08faa
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 10:21:44 2009 -0800
    
        MediaPlayerImpl is dead, long live AwesomePlayer.
    
    commit c5b52d3c0674f5dc94db506afbce52401cceddac
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 09:42:23 2009 -0800
    
        New implementation of the stagefright mediaplayer.
    eclair snapshot
    DO NOT MERGE: Squashed commit of the following:
    
    commit 08259dd3dc9026887f9bbfedaf45866eb56ea9bc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 5 12:02:31 2009 -0800
    
        DO NOT MERGE: Use PV for metadata extraction even if stagefright is used for playback.
    
    commit 991832fe4dc012e51d3d9ed8d647c7f09991858f
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 5 11:24:11 2009 -0800
    
        DO NOT MERGE: Do not assert if we encounter OMX_StateInvalid. All bets are off though.
    
    commit cec45cf302d9218fe79956cbe8a462d7ca3a10bb
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Oct 26 16:11:54 2009 -0700
    
        DO NOT MERGE: When freeing an OMX node, attempt to transition it from its current state all the way to "Loaded" in order to properly free any allocated buffers.
    
    commit 34a1e885ef9113d68acbc26d36fcc47fdebbed84
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 5 11:10:49 2009 -0800
    
        DO NOT MERGE: Fix heap corruptin in OMXNodeInstance.
    
    commit 5a47f7439a1298b330541a7e4e647a8b44487388
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 5 11:08:19 2009 -0800
    
        DO NOT MERGE: Fix seek-on-initial-read behaviour of OMXCodec.
    
    commit 45bed64722501b9f411a2940aff5aff4cc4d2e98
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 5 11:02:23 2009 -0800
    
        DO NOT MERGE: Renaming string.h to stagefright_string.h to avoid conflicts.
    
    commit 6738e306a50196f31a73d4fc7b7c45faff639903
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Oct 15 13:46:54 2009 -0700
    
        DO NOT MERGE: Reimplement the OMX backend for stagefright.
    
        Besides a major cleanup and refactoring, OMX is now a singleton living in the media server, it listens for death notifications of node observers/clients that allocated OMX nodes and performs/attempts cleanup.
    
        Changed APIs to conform to the rest of the system.
    Support raw audio sources in stagefright commandline tool.
    A few more testcases for the vendor to reproduce issues with their decoder. Not part of the shipping image.
    Reimplement the OMX backend for stagefright.
    
    Besides a major cleanup and refactoring, OMX is now a singleton living in the media server, it listens for death notifications of node observers/clients that allocated OMX nodes and performs/attempts cleanup.
    
    Changed APIs to conform to the rest of the system.
    OMXCodec now notifies the reader of changes in the output format by returning a special result/error code.
    Change to a int64_t usecs representation for timestamps and duration throughout stagefright.
    Another stagefright test-case and ignore end-of-stream notifications while we're flushing.
    Move JPEGSource.{cpp,h} into libstagefright.
    Media MIME types now have corresponding constants in MediaDefs.h, new codec enumeration API.
    Add another testcase for moto to reproduce bug #2099685 to the stagefright commandline app.
    Fixing the build.
    Squashed commit of the following:
    
    commit 3fa5f3ce910f34da0cedb8bcce1bd593db7eb740
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 27 14:48:54 2009 -0700
    
        Getting rid of more code now obsolete with the departure of OMXDecoder.
    
    commit e0d923ec0c7bb60bec8eb97739036a4c70c0feef
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 27 14:33:06 2009 -0700
    
        Remove obsoleted OMXDecoder class. OMXDecoder is dead, long live OMXCodec.
    Extend stagefright commandline up to enable vendor to reproduce specific bugs filed.
    Added a commandline option to "stagefright" that limits decoding to a maximum number of frames per iteration.
    Enable specification of http:// urls in stagefright commandline tool.
    The PV AVC software decoder expects each fragment of a NAL unit to be handed to the decoder unframed.
    Refactored "stagefright" commandline app, split off JPEGSource.
    Squashed commit of the following:
    
    commit 5bb012f0065f7ffaaeb4f569d71f0e3a8d6b19c3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 10:40:08 2009 -0700
    
        An attempt at fixing export using the qcom encoders. More quirks.
    
    commit 0690e76bfa48118a68287ccf1bbfa82febaa620c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 09:08:28 2009 -0700
    
        Callbacks are now dispatched from a separate thread in OMX.
    
    commit c6571a039526df29b6343f9a1971dbc019088c61
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 15:42:25 2009 -0700
    
        Massive API changes throughout stagefright, smart pointers everywhere.
    
    commit 900612af6a0555664d9ba195112cd859491265f4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 13:33:12 2009 -0700
    
        OMXCodecs now properly shutdown.
    
    commit 96732f05e1b0603dcd1b11f16a23512592eeb4f5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 12:04:04 2009 -0700
    
        More work on JPEG decoding using the hardware OMX component.
    
    commit 63839a073ac393e3a130434ba467969053b694ad
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 12 13:13:31 2009 -0700
    
        An attempt to drive the JPEG decoder OMX node.
    
    commit 3ac2fe5ab2926eda81b2123610b2434c645294ff
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:38:21 2009 -0700
    
        Renamed StateMachine to OMXCodec and put it in its proper place.
    
    commit 247da75a96bf8881956413023dd49a84d5b4f5b2
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:06:19 2009 -0700
    
        Statemachine is now a full-fledged MediaSource.
    
    commit 045244f6771fa0b9b329495c953afda900a84b71
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 7 09:16:54 2009 -0700
    
        Properly setup the input format when exporting to AMR audio.
    
    commit 271b984cb32c5cd9e46e3f90ae121f334e4b8da9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 6 09:59:38 2009 -0700
    
        Added some code to test audio encoding to the OMX harness.
    
    commit 79af4748e4af33bd66d3fbac606e332a69741cf4
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 5 14:36:22 2009 -0700
    
        Merge the old OMXDecoder and the new, shiny, StateMachine code.
    
    commit 91cf5dd77a8762bc10a0b2ffce35e3bbeb262231
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 4 17:41:43 2009 -0700
    
        A new harness to test OMX node compliance (and quirks).
    Squashed commit of the following:
    
    commit 374ea382ee3a9e3ce17e4c6357fc40d02e362810
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 28 09:54:13 2009 -0700
    
        PV's OMX implementation now uses (spec-compliant) microseconds instead of milliseconds in buffer timestamps.
    
    commit 8d02f8ab5d7b022ad4ad34db2a9bdeea6ce2acfe
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 27 14:24:26 2009 -0700
    
        Support for using an overlay for video playback on TI hardware.
    
        Appears to be currently constrained to CbYCrY 16-bit colorspace.
    
    commit d17f321cb4b15c1fea378f33a7ef5998f23dd0fc
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 27 09:45:38 2009 -0700
    
        Added '--audio-only' commandline option to stagefright tool.
    
    commit d8beef6be5c668c46451446d87e622933371cd75
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 24 13:35:00 2009 -0700
    
        Generalize the various workarounds for OMX nodes with their own unique interpretation of the spec.
    
    commit c7dfd53eeadf8ed5a39bf2b19b014dcd62f3324d
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 23 16:06:36 2009 -0700
    
        Fixed erroneous TI AAC decoder behaviour wrt shutdown.
    
        The AAC decoder appears to not return out buffers on an Executing->Idle transition, implemented a workaround that does a flush on all ports followed by the Executing->Idle. Oh, and flush with OMX_ALL doesn't properly work either. Fun.
    
    commit d6377282e75060881336578f166f9c7feacf3f8f
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 23 14:06:50 2009 -0700
    
        Apparently the "channels" parameter in AudioTrack's constructor no longer counts channels but is a bitmask of enabled destinations, update the code accordingly.
    
    commit ff698c79e851a2e57d362e9c3a09828af4048087
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 22 16:54:44 2009 -0700
    
        Fix MPEG4 decoding using TI's hardware decoder that I broke earlier...
    
    commit 2ef78bb87cd856eb7f0b3d7dd68782a8650c12bf
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 22 15:43:18 2009 -0700
    
        Now that the qcom decoder properly advertises its own custom colorspace, update dependent code to reflect this fact.
    
    commit bbaec96910727080fd7c8a6907c04facb9f5220f
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 22 14:32:03 2009 -0700
    
        Finishing up previous, incomplete change.
    
    commit 76f14a1ae816b6f434771f8d12bdad81196f351e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 22 14:25:17 2009 -0700
    
        The TI video decoder now properly decoder AVC/H.264 content.
    
    commit e106130d8c100d5c94603e43864a7a93cca10252
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 22 08:56:04 2009 -0700
    
        Experimental support for the TI H.264 decoder, various modifications to OMXDecoder, non-functional still.
    
    commit 241c3062dec3447db1a1ee74558cb4b9098fc404
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 21 12:13:09 2009 -0700
    
        Enable TI hardware OMX decoders (except for AVC/H.264 which still has issues).
    
        This particular set of OMX nodes does not appear to properly return our buffers when sending the "disable" command on a port. Rather it reqires manually flushing that port and _then_ disabling it instead.
    
    commit 1c34506a46e32ce25f2a86f3b4250dcfc037356a
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 21 08:51:35 2009 -0700
    
        Make it simpler to switch between the stagefright player and PVPlayer.
    
    commit 249c6de05671d403f8dd51f095d49bf190430c9c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 20 14:38:15 2009 -0700
    
        Prepare to use soon-to-be-available hardware decoders in the OMX decoder.
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    Use new surface flinger API.
    
    Change-Id: I594c6e15db5f617d2feaac1a65b5316daa3812d0
    Provisional support for secure decryption of media streams.
    
    Change-Id: Ib3982a9c960bfdb0cb7e1b174440b141b194cfbe
    Use NuPlayer for media playback everywhere
    
    if media.stagefright.use-nuplayer is set to true.
    
    Change-Id: Ibb217e7d7d5195b7feeea557554fe78e1585744c
    Report an error instead of waiting for EOS indefinitely in sf2.
    
    Change-Id: Id7bcfb90a3b6a61f0df8bd8f39ea4ffa3c433d87
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    Fix two more locations that use the old setObject("buffer", ...) paradigm
    
    that I'd previously missed.
    
    Change-Id: Ifbdbfb94d1bc1cbe8c0a403fed05ce99fca8397b
    Implementation of a java media codec interface and associated tools.
    
    Change-Id: I13e54062d4de584355c5d82bb027a68aeaf2923b
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Support AMR, G.711 and vorbis audio in ACodec and friends.
    
    Change-Id: I08c03219bf2d60fc5c6e89957bd4b4c615570983
    Properly connect to surface flinger in our shell tools
    
    Also raise the layer to INT_MAX to float in front of the toolbar.
    
    Change-Id: I045a1c83924e6655f1734d15f2504b90312eec64
    SF transactions are now O(1) wrt IPC instead of O(N).
    
    Change-Id: I57669852cbf6aabae244ea86940a08a5a27ffc43
    Multiple changes to ACodec/codec tools:
    
    Make sure sf2 does not coalesce input buffers, generalize ACodec's codec
    instantiation based on OMXCodec's list of eligible component names.
    
    Some changes/additions to the "sf2" commandline tool
    
    Make surface options consistent with stagefright tool, i.e. use '-S' instead of '-s'
    New option '-R' renders surface-allocated buffers.
    
    Also fixes a longstanding bug introduced when generalizing from surfaces to native windows that never used surface-allocated buffers in sf2 even when the option was specified.
    
    Change-Id: I59fd533f0f6ef0337ebe2806ddc81a46878eb3ae
    Get rid of the "pid" parameter from createSurface
    
    Change-Id: I28635e3f803e6abe965d79998e305f54a202465d
    Fix missing AOSP copyright headers for more files
    
    o Update the copyright date on InputDispatcher_test.cpp and InputReader_test.cpp
      because these two files were moved from other places to the current location,
      and were actually created in 2010.
    
    bug - 4119349
    
    Change-Id: Ic93b81ddafb58e9e72a2e9e02ca3d9f173d6dca7
    Ignore format change message in sf2 instead of asserting
    
    Change-Id: I2d7cdf371c07109398c53c7ffc37d7b10b6b6312
    Initial support for a true streaming player for mpeg2 transport streams.
    
    Change-Id: I153eec439d260a5524b21270e16d36940ec3161a
    Add NOTICE and MODULE_LICENSE_APACH2 to libs build under /frameworks/av/
    
    Change-Id: I0a3af3e2abdedebd5934f3d941d01c32cfc75e26
    related-to-bug: 6647465
    Copied MODULE_LICENSE_APACH2 and NOTICE from frameworks/base to frameworks/av
    
    Change-Id: I48c927b9690bf902ab167d60171c0ee7995687e0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Implementation of a java media codec interface and associated tools.
    
    Change-Id: I13e54062d4de584355c5d82bb027a68aeaf2923b
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    Move away from MediaDebug and use ADebug instead
    
    Change-Id: I963a3b6f79a7292891973cbeeaf3378b38629f08
    The software AAC encoder is now an OMX component.
    
    Yay.
    
    Change-Id: I74938a20b4e0a622836ea5184d3761180eb0f5de
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)
    
    Change-Id: I26f76452ac49e2890b14d133c065493d8df0fb4a
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: Ib08fe86d23db91ee153e9f91a99a35c42b9208ea
    Allow record to set input color format as a command line option
    
    o Only YUV420SP and YUV420P are supported
    
    Change-Id: I425e8b29d9dca8c05066c1cd777f8bdede52964a
    Add some encoding parameters for the "record" utility
    
    - TODO: remove some of the hard coded values
    
    Change-Id: Ib58bbb8af45fd102176ac49da0a71613a12fa5fc
    Various fixes to enable recording on passion and nexus1.
    
    Change-Id: I75a461c9882e2449082ad754ee7b231c1ceec039
    When the extractor is not able to be created successfully, don't crash
    Change OMXCodec::Create to return an sp<MediaSource> instead of an sp<OMXCodec>, this is more general and does not sacrifice any functionality as the remaining OMXCodec APIs are not meant to be public anyway.
    Squashed commit of the following:
    
    commit 1efc38dc3c33fef57b759002db3965ed07a28cb0
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 19 14:36:14 2009 -0800
    
        Sending the SEEK-COMPLETE notification temporarily broke seeking backwards in time behaviour. This is now fixed.
    
        Also, get rid of the semi-random delay after posting buffers to surface flinger in favour of delaying the buffer release until the next frame is displayed.
    
    commit 51973062eb5ee63fd64b845d72bac517cc3369cf
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 14:01:43 2009 -0800
    
        Fix one more unit test, properly send seek-complete notification only after seek actually completed.
    
    commit cb22250b34b1fcfe1bf459723a761fd003950229
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 12:31:36 2009 -0800
    
        Fix seek-while-paused in AwesomePlayer, revert to using FileSource if MmapSource fails.
    
    commit 25eb9241138ddf7bb27ce90657116c5f8a94d880
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 12:30:40 2009 -0800
    
        Support seeking and duration in AMRExtractor, assuming all frames are the same size.
    
    commit 44192f2ebb7ea3bbd3ba5910025692dbc6a08faa
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 10:21:44 2009 -0800
    
        MediaPlayerImpl is dead, long live AwesomePlayer.
    
    commit c5b52d3c0674f5dc94db506afbce52401cceddac
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 09:42:23 2009 -0800
    
        New implementation of the stagefright mediaplayer.
    eclair snapshot
    Transcode files again.
    Revive support for video encoding in OMXCodec.
    Moving the individual extractor headers files to the private include directory.
    Media MIME types now have corresponding constants in MediaDefs.h, new codec enumeration API.
    Support encoding amr-wb content in stagefright.
    Setting the component role appears to be mandatory now for all mime types.
    
    Also using CODEC_LOGV instead of vanilla LOGV to include the component name the message related to.
    Some work to make audio encoding work.
    More assert => CHECK
    Squashed commit of the following:
    
    commit 3fa5f3ce910f34da0cedb8bcce1bd593db7eb740
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 27 14:48:54 2009 -0700
    
        Getting rid of more code now obsolete with the departure of OMXDecoder.
    
    commit e0d923ec0c7bb60bec8eb97739036a4c70c0feef
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 27 14:33:06 2009 -0700
    
        Remove obsoleted OMXDecoder class. OMXDecoder is dead, long live OMXCodec.
    Squashed commit of the following:
    
    commit 5bb012f0065f7ffaaeb4f569d71f0e3a8d6b19c3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 10:40:08 2009 -0700
    
        An attempt at fixing export using the qcom encoders. More quirks.
    
    commit 0690e76bfa48118a68287ccf1bbfa82febaa620c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 09:08:28 2009 -0700
    
        Callbacks are now dispatched from a separate thread in OMX.
    
    commit c6571a039526df29b6343f9a1971dbc019088c61
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 15:42:25 2009 -0700
    
        Massive API changes throughout stagefright, smart pointers everywhere.
    
    commit 900612af6a0555664d9ba195112cd859491265f4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 13:33:12 2009 -0700
    
        OMXCodecs now properly shutdown.
    
    commit 96732f05e1b0603dcd1b11f16a23512592eeb4f5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 12:04:04 2009 -0700
    
        More work on JPEG decoding using the hardware OMX component.
    
    commit 63839a073ac393e3a130434ba467969053b694ad
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 12 13:13:31 2009 -0700
    
        An attempt to drive the JPEG decoder OMX node.
    
    commit 3ac2fe5ab2926eda81b2123610b2434c645294ff
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:38:21 2009 -0700
    
        Renamed StateMachine to OMXCodec and put it in its proper place.
    
    commit 247da75a96bf8881956413023dd49a84d5b4f5b2
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:06:19 2009 -0700
    
        Statemachine is now a full-fledged MediaSource.
    
    commit 045244f6771fa0b9b329495c953afda900a84b71
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 7 09:16:54 2009 -0700
    
        Properly setup the input format when exporting to AMR audio.
    
    commit 271b984cb32c5cd9e46e3f90ae121f334e4b8da9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 6 09:59:38 2009 -0700
    
        Added some code to test audio encoding to the OMX harness.
    
    commit 79af4748e4af33bd66d3fbac606e332a69741cf4
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 5 14:36:22 2009 -0700
    
        Merge the old OMXDecoder and the new, shiny, StateMachine code.
    
    commit 91cf5dd77a8762bc10a0b2ffce35e3bbeb262231
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 4 17:41:43 2009 -0700
    
        A new harness to test OMX node compliance (and quirks).
    Recording/Export to .mp4/h.263 somewhat works on TI hardware.
    Squashed commit of the following:
    
    commit 374ea382ee3a9e3ce17e4c6357fc40d02e362810
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 28 09:54:13 2009 -0700
    
        PV's OMX implementation now uses (spec-compliant) microseconds instead of milliseconds in buffer timestamps.
    
    commit 8d02f8ab5d7b022ad4ad34db2a9bdeea6ce2acfe
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 27 14:24:26 2009 -0700
    
        Support for using an overlay for video playback on TI hardware.
    
        Appears to be currently constrained to CbYCrY 16-bit colorspace.
    
    commit d17f321cb4b15c1fea378f33a7ef5998f23dd0fc
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 27 09:45:38 2009 -0700
    
        Added '--audio-only' commandline option to stagefright tool.
    
    commit d8beef6be5c668c46451446d87e622933371cd75
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 24 13:35:00 2009 -0700
    
        Generalize the various workarounds for OMX nodes with their own unique interpretation of the spec.
    
    commit c7dfd53eeadf8ed5a39bf2b19b014dcd62f3324d
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 23 16:06:36 2009 -0700
    
        Fixed erroneous TI AAC decoder behaviour wrt shutdown.
    
        The AAC decoder appears to not return out buffers on an Executing->Idle transition, implemented a workaround that does a flush on all ports followed by the Executing->Idle. Oh, and flush with OMX_ALL doesn't properly work either. Fun.
    
    commit d6377282e75060881336578f166f9c7feacf3f8f
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 23 14:06:50 2009 -0700
    
        Apparently the "channels" parameter in AudioTrack's constructor no longer counts channels but is a bitmask of enabled destinations, update the code accordingly.
    
    commit ff698c79e851a2e57d362e9c3a09828af4048087
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 22 16:54:44 2009 -0700
    
        Fix MPEG4 decoding using TI's hardware decoder that I broke earlier...
    
    commit 2ef78bb87cd856eb7f0b3d7dd68782a8650c12bf
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 22 15:43:18 2009 -0700
    
        Now that the qcom decoder properly advertises its own custom colorspace, update dependent code to reflect this fact.
    
    commit bbaec96910727080fd7c8a6907c04facb9f5220f
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 22 14:32:03 2009 -0700
    
        Finishing up previous, incomplete change.
    
    commit 76f14a1ae816b6f434771f8d12bdad81196f351e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 22 14:25:17 2009 -0700
    
        The TI video decoder now properly decoder AVC/H.264 content.
    
    commit e106130d8c100d5c94603e43864a7a93cca10252
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 22 08:56:04 2009 -0700
    
        Experimental support for the TI H.264 decoder, various modifications to OMXDecoder, non-functional still.
    
    commit 241c3062dec3447db1a1ee74558cb4b9098fc404
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 21 12:13:09 2009 -0700
    
        Enable TI hardware OMX decoders (except for AVC/H.264 which still has issues).
    
        This particular set of OMX nodes does not appear to properly return our buffers when sending the "disable" command on a port. Rather it reqires manually flushing that port and _then_ disabling it instead.
    
    commit 1c34506a46e32ce25f2a86f3b4250dcfc037356a
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 21 08:51:35 2009 -0700
    
        Make it simpler to switch between the stagefright player and PVPlayer.
    
    commit 249c6de05671d403f8dd51f095d49bf190430c9c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 20 14:38:15 2009 -0700
    
        Prepare to use soon-to-be-available hardware decoders in the OMX decoder.
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    stagefright: recordvideo: add -o flag to specify output filename
    
    Change-Id: I6b464a7b3f7dd918565c6abbd432d779eb286fd5
    Signed-off-by: Dima Zavin <dima@android.com>
    stagefright: recordvideo: add -o flag to specify output filename
    
    Change-Id: I6b464a7b3f7dd918565c6abbd432d779eb286fd5
    Signed-off-by: Dima Zavin <dima@android.com>
    recordvideo: Sleep while waiting for the encoding to finish
    
    This avoids busy looping while e.g. waiting for the software encoder
    to finish.
    
    This is similar to what the 'record' and 'stagefright' test apps
    do.
    
    Change-Id: Idce55b15396ce78b621a521229603bec1e799f33
    recordvideo: Add an option for choosing software encoders
    
    This is similar to the same option in the 'stagefright' test
    application.
    
    Change-Id: I2a2e5201bd93460df0911ef12865c9030c0183e5
    Move away from MediaDebug and use ADebug instead
    
    Change-Id: I963a3b6f79a7292891973cbeeaf3378b38629f08
    Add support for some custom YUV420 color formats to recordvideo utility
    
    Change-Id: I2f0dfba466efb94b704dca761162d7c7457a43cf
    Switch to use kKeyFrameRate for recordvideo utility
    
    Change-Id: I3f6abfed9c39223fe5c1a1b9c094b7ce8a8ca67f
    Add two more options to "recordvideo" utility
    
    o also removed unused code
    
    Change-Id: I49471b0ac1cf70b5eedcde78a21e7770c312c5d6
    Add a video record utility
    
    Change-Id: I3aa7cadf399aa319ee9ca3f391fd8599742bfb7e
    Allow record to set input color format as a command line option
    
    o Only YUV420SP and YUV420P are supported
    
    Change-Id: I425e8b29d9dca8c05066c1cd777f8bdede52964a
    Add some encoding parameters for the "record" utility
    
    - TODO: remove some of the hard coded values
    
    Change-Id: Ib58bbb8af45fd102176ac49da0a71613a12fa5fc
    Various fixes to enable recording on passion and nexus1.
    
    Change-Id: I75a461c9882e2449082ad754ee7b231c1ceec039
    When the extractor is not able to be created successfully, don't crash
    Change OMXCodec::Create to return an sp<MediaSource> instead of an sp<OMXCodec>, this is more general and does not sacrifice any functionality as the remaining OMXCodec APIs are not meant to be public anyway.
    Squashed commit of the following:
    
    commit 1efc38dc3c33fef57b759002db3965ed07a28cb0
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Nov 19 14:36:14 2009 -0800
    
        Sending the SEEK-COMPLETE notification temporarily broke seeking backwards in time behaviour. This is now fixed.
    
        Also, get rid of the semi-random delay after posting buffers to surface flinger in favour of delaying the buffer release until the next frame is displayed.
    
    commit 51973062eb5ee63fd64b845d72bac517cc3369cf
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 14:01:43 2009 -0800
    
        Fix one more unit test, properly send seek-complete notification only after seek actually completed.
    
    commit cb22250b34b1fcfe1bf459723a761fd003950229
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 12:31:36 2009 -0800
    
        Fix seek-while-paused in AwesomePlayer, revert to using FileSource if MmapSource fails.
    
    commit 25eb9241138ddf7bb27ce90657116c5f8a94d880
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 12:30:40 2009 -0800
    
        Support seeking and duration in AMRExtractor, assuming all frames are the same size.
    
    commit 44192f2ebb7ea3bbd3ba5910025692dbc6a08faa
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 10:21:44 2009 -0800
    
        MediaPlayerImpl is dead, long live AwesomePlayer.
    
    commit c5b52d3c0674f5dc94db506afbce52401cceddac
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Nov 18 09:42:23 2009 -0800
    
        New implementation of the stagefright mediaplayer.
    eclair snapshot
    Transcode files again.
    Revive support for video encoding in OMXCodec.
    Moving the individual extractor headers files to the private include directory.
    Media MIME types now have corresponding constants in MediaDefs.h, new codec enumeration API.
    Support encoding amr-wb content in stagefright.
    Setting the component role appears to be mandatory now for all mime types.
    
    Also using CODEC_LOGV instead of vanilla LOGV to include the component name the message related to.
    Some work to make audio encoding work.
    More assert => CHECK
    Squashed commit of the following:
    
    commit 3fa5f3ce910f34da0cedb8bcce1bd593db7eb740
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 27 14:48:54 2009 -0700
    
        Getting rid of more code now obsolete with the departure of OMXDecoder.
    
    commit e0d923ec0c7bb60bec8eb97739036a4c70c0feef
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 27 14:33:06 2009 -0700
    
        Remove obsoleted OMXDecoder class. OMXDecoder is dead, long live OMXCodec.
    Squashed commit of the following:
    
    commit 5bb012f0065f7ffaaeb4f569d71f0e3a8d6b19c3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 10:40:08 2009 -0700
    
        An attempt at fixing export using the qcom encoders. More quirks.
    
    commit 0690e76bfa48118a68287ccf1bbfa82febaa620c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 14 09:08:28 2009 -0700
    
        Callbacks are now dispatched from a separate thread in OMX.
    
    commit c6571a039526df29b6343f9a1971dbc019088c61
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 15:42:25 2009 -0700
    
        Massive API changes throughout stagefright, smart pointers everywhere.
    
    commit 900612af6a0555664d9ba195112cd859491265f4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 13:33:12 2009 -0700
    
        OMXCodecs now properly shutdown.
    
    commit 96732f05e1b0603dcd1b11f16a23512592eeb4f5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 13 12:04:04 2009 -0700
    
        More work on JPEG decoding using the hardware OMX component.
    
    commit 63839a073ac393e3a130434ba467969053b694ad
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 12 13:13:31 2009 -0700
    
        An attempt to drive the JPEG decoder OMX node.
    
    commit 3ac2fe5ab2926eda81b2123610b2434c645294ff
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:38:21 2009 -0700
    
        Renamed StateMachine to OMXCodec and put it in its proper place.
    
    commit 247da75a96bf8881956413023dd49a84d5b4f5b2
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 11 16:06:19 2009 -0700
    
        Statemachine is now a full-fledged MediaSource.
    
    commit 045244f6771fa0b9b329495c953afda900a84b71
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 7 09:16:54 2009 -0700
    
        Properly setup the input format when exporting to AMR audio.
    
    commit 271b984cb32c5cd9e46e3f90ae121f334e4b8da9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Aug 6 09:59:38 2009 -0700
    
        Added some code to test audio encoding to the OMX harness.
    
    commit 79af4748e4af33bd66d3fbac606e332a69741cf4
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Aug 5 14:36:22 2009 -0700
    
        Merge the old OMXDecoder and the new, shiny, StateMachine code.
    
    commit 91cf5dd77a8762bc10a0b2ffce35e3bbeb262231
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Aug 4 17:41:43 2009 -0700
    
        A new harness to test OMX node compliance (and quirks).
    Recording/Export to .mp4/h.263 somewhat works on TI hardware.
    Squashed commit of the following:
    
    commit 374ea382ee3a9e3ce17e4c6357fc40d02e362810
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 28 09:54:13 2009 -0700
    
        PV's OMX implementation now uses (spec-compliant) microseconds instead of milliseconds in buffer timestamps.
    
    commit 8d02f8ab5d7b022ad4ad34db2a9bdeea6ce2acfe
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 27 14:24:26 2009 -0700
    
        Support for using an overlay for video playback on TI hardware.
    
        Appears to be currently constrained to CbYCrY 16-bit colorspace.
    
    commit d17f321cb4b15c1fea378f33a7ef5998f23dd0fc
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 27 09:45:38 2009 -0700
    
        Added '--audio-only' commandline option to stagefright tool.
    
    commit d8beef6be5c668c46451446d87e622933371cd75
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 24 13:35:00 2009 -0700
    
        Generalize the various workarounds for OMX nodes with their own unique interpretation of the spec.
    
    commit c7dfd53eeadf8ed5a39bf2b19b014dcd62f3324d
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 23 16:06:36 2009 -0700
    
        Fixed erroneous TI AAC decoder behaviour wrt shutdown.
    
        The AAC decoder appears to not return out buffers on an Executing->Idle transition, implemented a workaround that does a flush on all ports followed by the Executing->Idle. Oh, and flush with OMX_ALL doesn't properly work either. Fun.
    
    commit d6377282e75060881336578f166f9c7feacf3f8f
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 23 14:06:50 2009 -0700
    
        Apparently the "channels" parameter in AudioTrack's constructor no longer counts channels but is a bitmask of enabled destinations, update the code accordingly.
    
    commit ff698c79e851a2e57d362e9c3a09828af4048087
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 22 16:54:44 2009 -0700
    
        Fix MPEG4 decoding using TI's hardware decoder that I broke earlier...
    
    commit 2ef78bb87cd856eb7f0b3d7dd68782a8650c12bf
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 22 15:43:18 2009 -0700
    
        Now that the qcom decoder properly advertises its own custom colorspace, update dependent code to reflect this fact.
    
    commit bbaec96910727080fd7c8a6907c04facb9f5220f
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 22 14:32:03 2009 -0700
    
        Finishing up previous, incomplete change.
    
    commit 76f14a1ae816b6f434771f8d12bdad81196f351e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 22 14:25:17 2009 -0700
    
        The TI video decoder now properly decoder AVC/H.264 content.
    
    commit e106130d8c100d5c94603e43864a7a93cca10252
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 22 08:56:04 2009 -0700
    
        Experimental support for the TI H.264 decoder, various modifications to OMXDecoder, non-functional still.
    
    commit 241c3062dec3447db1a1ee74558cb4b9098fc404
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 21 12:13:09 2009 -0700
    
        Enable TI hardware OMX decoders (except for AVC/H.264 which still has issues).
    
        This particular set of OMX nodes does not appear to properly return our buffers when sending the "disable" command on a port. Rather it reqires manually flushing that port and _then_ disabling it instead.
    
    commit 1c34506a46e32ce25f2a86f3b4250dcfc037356a
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 21 08:51:35 2009 -0700
    
        Make it simpler to switch between the stagefright player and PVPlayer.
    
    commit 249c6de05671d403f8dd51f095d49bf190430c9c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 20 14:38:15 2009 -0700
    
        Prepare to use soon-to-be-available hardware decoders in the OMX decoder.
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    replace getISurfaceTexture by getIGraphicBufferProducer
    
    Change-Id: I723a3863558126f2635a544a39bb3ec88d499c60
    replace getISurfaceTexture by getIGraphicBufferProducer
    
    Change-Id: I723a3863558126f2635a544a39bb3ec88d499c60
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Remove unnecessary parameter
    
    Just get the parameter on server side
    
    Change-Id: I433a63104dbb257e0d862be2ab61847cb36d1c15
    Remove unnecessary parameter
    
    Just get the parameter on server side
    
    Change-Id: I433a63104dbb257e0d862be2ab61847cb36d1c15
    Use new surface flinger API.
    
    Change-Id: I594c6e15db5f617d2feaac1a65b5316daa3812d0
    Fix static sample table processing, add support for h.263 video.
    
    Change-Id: I5628d3437b5e6f8836d78557fd07ab87e5a914e3
    experimental support for fragmented mp4 playback in nuplayer
    
    cherry picked from change 170999
    
    Change-Id: I407775f0290154ad4961134839a15c9f296424c0
    update to new getDisplayInfo API
    
    Change-Id: Ie273677e34b9e8475abfa0ae27620d98b3a15b77
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)
    
    Change-Id: I26f76452ac49e2890b14d133c065493d8df0fb4a
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: Ib08fe86d23db91ee153e9f91a99a35c42b9208ea
    Remove surface legacy APIs and code.
    
    All surfaces are now supported through surface textures.
    
    Change-Id: I95dd823e7099c0c32a48a1121624149dcc29d9c6
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Properly connect to surface flinger in our shell tools
    
    Also raise the layer to INT_MAX to float in front of the toolbar.
    
    Change-Id: I045a1c83924e6655f1734d15f2504b90312eec64
    Require INTERNET permission for network-based content.
    Bug #1870981
    
    Change-Id: Ia3ad166390c4d60cea19c3783895b078a2c4c15f
    When encountering a discontinuity, flush(clear) all content enqueued up to that
    
    point except previously enqueued discontinuities.
    
    Change-Id: Id04a559dc062fa4a5c80c599ad74bf81a543de01
    related-to-bug: 5201378
    SF transactions are now O(1) wrt IPC instead of O(N).
    
    Change-Id: I57669852cbf6aabae244ea86940a08a5a27ffc43
    Support for "streaming" non-transport streams by first converting them to ts packets.
    
    Change-Id: Ia753a1ab99039f54ce3678a38e997902372b5fa5
    Get rid of the "pid" parameter from createSurface
    
    Change-Id: I28635e3f803e6abe965d79998e305f54a202465d
    - Add another parameter in notify() to be able to send timed text sample
    through listener during video playback.
    - Add OnTimedTextListener in the MediaPlayer
    For feature request 800939.
    
    Change-Id: I65072c27acb4c0037109a72be38c73e9f667420f
    Fix missing AOSP copyright headers for more files
    
    o Update the copyright date on InputDispatcher_test.cpp and InputReader_test.cpp
      because these two files were moved from other places to the current location,
      and were actually created in 2010.
    
    bug - 4119349
    
    Change-Id: Ic93b81ddafb58e9e72a2e9e02ca3d9f173d6dca7
    Squashed commit of the following:
    
    commit eaeaa2672d4e0a82891493b2bde8bdd0c0e79a1b
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Dec 23 10:26:48 2010 -0800
    
        Remove lowest bandwidth stream if using the legacy player.
    
        Change-Id: I2f885e26344996de9152f8fda9fd6bdef89bf953
    
    commit 7d652972615b2750fd8f1c21b9fab0e136df2b82
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Dec 23 10:14:36 2010 -0800
    
        Don't clear the packet source's format for legacy discontinuities.
    
        Change-Id: I9bd5a21b9bd28043ad38bd0658ccc8eda3c1079a
    
    commit 2b18a45aac17cbfe1aa089d0f6510957d438dd64
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Dec 23 10:13:55 2010 -0800
    
        Use NuPlayer for HTTP live streaming based on runtime property.
    
        adb shell setprop media.httplive.enable-nuplayer true
    
        Change-Id: I22738df3403985dc8e6992b1ab5da5747309f773
    
    commit 50d899fb7b9ea52c3994b0a58e993998d926aeed
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Dec 22 16:25:22 2010 -0800
    
        Make ACodec a lot less verbose.
    
        Change-Id: I94c7e499b61032321ffaf999f5ad2c913cde6a48
    
    commit b19e1740cb4d02990a56844654b5d019987c6405
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Dec 22 16:22:22 2010 -0800
    
        Wait until we have fresh codec-specific-data before instantiating the decoders
    
        after a discontinuity involving a format change.
    
        Change-Id: I7bcf9b5ae3319f08bf8978a117e8ee5220902e37
    
    commit 06428c006906c9099e430aface3b439ff1d36ecc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Dec 22 15:20:38 2010 -0800
    
        Disable random seeks in the streaming tool for now.
    
        Change-Id: Ie86fde422dcfc4b2c7a01be51a193fda9c88cd71
    
    commit e19db68f3bea8a61c191f60f6940f30e3a0d5f1b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Dec 22 15:20:27 2010 -0800
    
        Tweak HTTP live parameters.
    
        Change-Id: If4b71e12485facc523a8a43d8213d0feb190daab
    
    commit 1e9942791538c2256b579d96c6c04264b0d8b087
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Dec 22 14:48:23 2010 -0800
    
        Enable http live streaming through NuPlayer for http URLs containing the string m3u8
    
        Change-Id: I1691fe12ae8f1507fe3673313959cd50bc324624
    
    commit 4c33f96a6e499ee0efe0e70b687094430cb7c1c0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Dec 22 14:40:27 2010 -0800
    
        Support for HTTP live streaming in NuPlayer.
    
        Change-Id: Iacba1c3ebaeb8d3b972185deaf4cff18c8009c54
    
    commit ddf705ce553708bc5b13d89a878484cf839bd674
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Dec 22 13:42:47 2010 -0800
    
        StreamingSource now a subclass of abstract NuPlayer::Source
    
        Change-Id: Ia6c7c639628910b9d1f37decc55da48b07a70de3
    
    commit 9e04a8406b1882a8e3fdeb7b4d52db5ae70b970a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Dec 22 13:33:52 2010 -0800
    
        Refactor media data sourcing to NuPlayer::Source.
    
        Change-Id: I1db9fb08c4e527bf7b19c29978cf342c2b0a0bc9
    
    Change-Id: I9610a097481dda58f22142eacda3ac2dba0b63f9
    Initial support for a true streaming player for mpeg2 transport streams.
    
    Change-Id: I153eec439d260a5524b21270e16d36940ec3161a
    API Support for both synchronous and queued commands, optionally associated metadata.
    
    Change-Id: Idb90d64cb638942210c5822b3cba2f05b087d601
    Support streaming data across binder boundaries.
    
    Change-Id: Ifbac61406dcb81343765f99ccba08bd90f9274cc
    eclair snapshot
    Some work to make audio encoding work.
    audio_channel_in/out_mask_from_count
    
    and avoid ambiguous term "channels" where it might be confusing
    as to whether it is a channel mask or channel count
    
    Change-Id: I744fa08ccb6001a98c97bd638d2c9d56836c4234
    Move away from MediaDebug and use ADebug instead
    
    Change-Id: I963a3b6f79a7292891973cbeeaf3378b38629f08
    update for new audio.h header location
    
    Change-Id: Ic4c62c4037800802427eb7d3c7f5eb8b25d18876
    Signed-off-by: Dima Zavin <dima@android.com>
    audio/media: convert to using the audio HAL and new audio defs
    
    Change-Id: Ibc637918637329e4f2b62f4ac7781102fbc269f5
    Signed-off-by: Dima Zavin <dima@android.com>
    Initial checkin of AudioSource and AMRWriter, a pair of classes supporting pure-audio recording in stagefright.
    
    related-to-bug: 2295449
    Change OMXCodec::Create to return an sp<MediaSource> instead of an sp<OMXCodec>, this is more general and does not sacrifice any functionality as the remaining OMXCodec APIs are not meant to be public anyway.
    A small sample tool to encode pcm audio data to amr, decode it again and play it. Some changes to OMXCodec to properly configure the AMR decoder(s).
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Use new surface flinger API.
    
    Change-Id: I594c6e15db5f617d2feaac1a65b5316daa3812d0
    update to new getDisplayInfo API
    
    Change-Id: Ie273677e34b9e8475abfa0ae27620d98b3a15b77
    Submit codec specific data automatically
    
    if it is contained in the format passed to MediaCodec::configure.
    
    Change-Id: I8ef6755e8389ec47b44a9c70904ea6c03a00f4f2
    related-to-bug: 6364139
    Allow propagation of error information and description from the CryptoPlugin to
    
    the higher layers.
    
    Change-Id: I9f434ad55cdf575803c208bedf47b607baff2330
    related-to-bug: 6365261
    Some refactoring and cleanup of now obsolete crypto fields.
    
    codec commandline tool no longer supports decryption.
    
    Change-Id: I7b10be6524631b20ac5d361d47949b00addf4a93
    New API to support submitting encrypted buffers to the decoder.
    
    Change-Id: I69dd60e43078c4211c6123cf6e0ce90e676bf873
    related-to-bug: 6275919
    New Crypto services talking to the new crypto "HAL".
    
    Change-Id: I69ed31e7a8b4d69d1209d2d516f94d258f072566
    related-to-bug: 6275919
    Provisional support for secure decryption of media streams.
    
    Change-Id: Ib3982a9c960bfdb0cb7e1b174440b141b194cfbe
    fix EOS handling in codec test.
    
    Change-Id: I5eb6d00aa0c1a728a951c7ffa4faebcadd7b14a6
    Added better codec statistics to evaluate performance.
    
    Change-Id: I9a1e4a803502329e0342ddde07b6df6b3761afd8
    Separate the notion of "stop" from that of "release", i.e.
    
    stop - means transition back to LOADED state and keeping the component
    instance allocated.
    
    release - means we get rid of the component completely.
    
    Change-Id: I40ad01ce70821faaad43f57999249904f9144924
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    Fix two more locations that use the old setObject("buffer", ...) paradigm
    
    that I'd previously missed.
    
    Change-Id: Ifbdbfb94d1bc1cbe8c0a403fed05ce99fca8397b
    Be more greedy when it comes to gathering input and output buffers.
    
    Change-Id: I54c4f608e5155917ca35eba5655b4c06357fb112
    Implementation of a java media codec interface and associated tools.
    
    Change-Id: I13e54062d4de584355c5d82bb027a68aeaf2923b
    stagefright: remove dependency on skia
    
    skia is only used to write a jpeg file, link directly to libjpeg
    instead.
    
    Change-Id: Iea8f4a2347c38328776541d2b74bcbdea3f62041
    Add the presentation rotation support
    
    bug:7991013
    
    Change-Id: I10cb034b432876c724baa4974efcb3d67b8a99b6
    Add the presentation rotation support
    
    bug:7991013
    
    Change-Id: I10cb034b432876c724baa4974efcb3d67b8a99b6
    Clean up the native code to match Java update
    
    1. Add flags to match the java side change.
    2. Update the interface.
    
    bug:7991013
    
    Change-Id: I8ffe84c466b2a68e2e1e48b35b78db9e44640265
    Clean up the native code to match Java update
    
    1. Add flags to match the java side change.
    2. Update the interface.
    
    bug:7991013
    
    Change-Id: I8ffe84c466b2a68e2e1e48b35b78db9e44640265
    Add a test utility for MediaMuxer.
    
    This test/utility copy samples from one video and mux into another video.
    It support trimming, cutting audio or video track.
    It can run simply as command line like:
    adb shell muxer -a -v -s 1000 -e 8000 "/sdcard/DCIM/Camera/VID_*.mp4"
    
    bug:7991013
    
    Change-Id: I8a2eeff3cabd001b6b2a7062d991dd076edbf22e
    Add a test utility for MediaMuxer.
    
    This test/utility copy samples from one video and mux into another video.
    It support trimming, cutting audio or video track.
    It can run simply as command line like:
    adb shell muxer -a -v -s 1000 -e 8000 "/sdcard/DCIM/Camera/VID_*.mp4"
    
    bug:7991013
    
    Change-Id: I8a2eeff3cabd001b6b2a7062d991dd076edbf22e
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Only pass the surface to the video decoder.
    
    Change-Id: Ice0cfc0021fdd9fe053be6ee324cbc64226ed122
    Only pass the surface to the video decoder.
    
    Change-Id: Ice0cfc0021fdd9fe053be6ee324cbc64226ed122
    New Crypto services talking to the new crypto "HAL".
    
    Change-Id: I69ed31e7a8b4d69d1209d2d516f94d258f072566
    related-to-bug: 6275919
    audio_channel_in/out_mask_from_count
    
    and avoid ambiguous term "channels" where it might be confusing
    as to whether it is a channel mask or channel count
    
    Change-Id: I744fa08ccb6001a98c97bd638d2c9d56836c4234
    Separate the notion of "stop" from that of "release", i.e.
    
    stop - means transition back to LOADED state and keeping the component
    instance allocated.
    
    release - means we get rid of the component completely.
    
    Change-Id: I40ad01ce70821faaad43f57999249904f9144924
    Be more greedy when it comes to gathering input and output buffers.
    
    Change-Id: I54c4f608e5155917ca35eba5655b4c06357fb112
    Add new APIs AMessage::(set|find)Buffer to make it safer to pass
    
    ABuffer objects through messages.
    
    Change-Id: I9f8b4e4c4767d0d70a0105e0c0813b754379b49d
    Implementation of a java media codec interface and associated tools.
    
    Change-Id: I13e54062d4de584355c5d82bb027a68aeaf2923b
    stagefright: remove dependency on skia
    
    skia is only used to write a jpeg file, link directly to libjpeg
    instead.
    
    Change-Id: Iea8f4a2347c38328776541d2b74bcbdea3f62041
    Add NOTICE and MODULE_LICENSE_APACH2 to libs build under /frameworks/av/
    
    Change-Id: I0a3af3e2abdedebd5934f3d941d01c32cfc75e26
    related-to-bug: 6647465
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    eclair snapshot
    Squashed commit of the following:
    
    commit 8d179995654c19d9094e51989dc84ed0deba6e04
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 16:30:40 2009 -0700
    
        Protect stagefright code with BUILD_WITH_STAGEFRIGHT build-define.
    
    commit 99b41acb58c34e8f024c30c833a09fd7b31c4e1f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 14 14:06:00 2009 -0700
    
        OMX::list_nodes API, stagefright --list now lists all available OMX components.
    
    commit 94a74c5b24aae6d7e446fff83d62ae3a57dc351b
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 16:04:29 2009 -0700
    
        Reenabled "record" commandline application to test encoding, support for h263 codec specific data when writing to .mp4.
    
    commit d363dd74f611577567c66d25900d6264c306468c
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:59:58 2009 -0700
    
        Make non-socket communication in IOMX the default.
    
    commit e89fc82c4fd138c88339887baf72f1d0e67f8660
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 13 10:32:33 2009 -0700
    
        The OMX interface now optionally supports communication through the binder only (no sockets involved)
    
    commit 28611de11223fba65299787cdd33f7fdbd6a60a3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 15:09:13 2009 -0700
    
        Split off the logic to render to a Surface (not ISurface!) into SurfaceRender.{cpp,h}
    
    commit c0cfa885faaeb17d3fc5436f6447b61708bd6fe1
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 12:21:46 2009 -0700
    
        Fix display dimensions vs. decoded dimensions display issues, unfortunately breaks software rendering a bit...
    
    commit ae209a2b5d09caed5dd383c910f238926aaa8fc6
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jul 10 09:33:29 2009 -0700
    
        Simple video decoder performance test in "stagefright" commandline tool.
    
    commit 59fe7840111d6f46dd3c48f4950146aed962dbd2
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 16:05:12 2009 -0700
    
        StagefrightPlayer: Properly publish video dimensions by notifying the listener.
    
    commit 51b6598f0e47be5e12d77f1d14e111e71c593638
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 9 11:38:15 2009 -0700
    
        MediaPlayerInterface::AudioSink now supports the specification of a callback for pull-based audio.
    
    commit 31ce53375d748da3e7d30e993ce89dae97fd65ea
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 17:23:37 2009 -0700
    
        Proper support for pushing audio to a specified AudioSink interface. Still not bulletproof: video falls behind frequently.
    
    commit a23e312b10631a5d47f5c9831205beac6b84ab36
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 15:10:13 2009 -0700
    
        IGenesisPlayer and friends are no more, java interface now uses local playback instead
        of playing inside the media server process.
    
    commit 42ee5c06ab5ba1c16f50472b0b26a0526635c73c
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 8 13:17:03 2009 -0700
    
        MP3 extractor now supports seeking (only fixed bitrate files currently supported)
    
    commit 96a790405763bfa738d1c6845c99a9fdf579b66f
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jul 7 10:53:54 2009 -0700
    
        Keeping up-to-date with new master-gl changes, removing CameraSource for now, removing unnecessary commandline utilities from the build.
    
    commit 6c9dcb7c628c0347154dd7f37913a3a5f04deb99
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 16:40:02 2009 -0700
    
        Finally take advantage of the fact that the Qcom OMX decoders already place the output buffers into memory accessible by the hardware yuv converter and avoid extra allocations and memcpys in that case. Split of the render logic into subclasses of VideoRenderer.
    
    commit e8d46e81cffc15ffb0bdf03f511e4a4497ca7621
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jul 6 12:18:29 2009 -0700
    
        Added a few more cases of valid MPEG4 files to the sniffer, fixed end of stream notifications in MPEG4 files.
    
    commit 88bffc5ed4033a607080f8777a1c0ec9e3e079de
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jul 2 12:25:03 2009 -0700
    
        MediaPlayerImpl now properly pauses/resumes instead of tearing down the decoder chains and starting back up from the beginning.
    
    commit 732aa0a87c7e8d8a10776b275712649954962414
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:58:56 2009 -0700
    
        Remove pthread_mutex_* and pthread_cond_* in favour of Mutex and Condition.
    
    commit 669e5944b2fe0542a3b8dba0c441a94503e99fb0
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jul 1 14:43:02 2009 -0700
    
        Proper support for end-of-stream signalling of MediaSources.
    
    commit afb038f2dc594c742e554b2d42b86ffc7434e3fc
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 30 16:48:03 2009 -0700
    
        Support for the "sniffing" of datasources to determine their probable mime type (along with confidence). Slightly refactored the MP3Extractor to share common code with the sniffer.
    
    commit ed3644b8bd56807e1db4b32433a93a2467f1f3c5
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 13:27:52 2009 -0700
    
        I don't think prepare should automatically start the player.
    
    commit 11eb9b49dc4a0819d366682817cba68613f4fe12
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 26 11:09:22 2009 -0700
    
        Somewhat better timing information implemented in the MP3Extractor.
    
    commit cab023a1751735c0ed26c8493498a91d8644c6c9
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 25 15:41:56 2009 -0700
    
        Initial checkin for support of mp3 content, extraction and playback. Media extractors now abstracted in MediaExtractor baseclass.
    
    commit 40f4146bb3c647e56690dd9b0fa3ffdea60030dc
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:41:12 2009 -0700
    
        Make sure we only allocate surface buffers if there is video to be played.
    
    commit 7f85e7d92fe81740e102e09905b19354f4ac178e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 24 10:19:32 2009 -0700
    
        Clean up a failed merge and implement stub for new API in MediaPlayerBase.
    
    commit f0e9d494a4c03402ea7b54891848ca5a50c421b2
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 15:38:03 2009 -0700
    
        Support yuv420->rgb565 conversion if hardware color conversion is unavailable.
    
    commit 87223248b3099cd5261b94169f84cfd1eba56a8f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 12 09:35:56 2009 -0700
    
        Remove unimplemented and currently unnecessary blocking option from MediaSource::ReadOptions.
    
    commit e07e651f0325892b797f3eb64dbeca0f317afdfd
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 16:26:42 2009 -0700
    
        Enable assertions in HTTPDataSource.
    
    commit 0dc97adebea1721156880f4b3d5c70f8d50c53b2
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:39 2009 -0700
    
        delete foo.
    
    commit 7f05845dda496e7defee284d32509d127e785784
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 12:34:08 2009 -0700
    
        added foo.
    
    commit e432970c51eeec4e5d549bdb3e2d3e48ffb4f0e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 10 11:44:31 2009 -0700
    
        Make sure to initialize all fields in _all_ constructors... Use a Mutex instead of the raw pthread_mutex_t.
    
    commit d6286a6bbca639952491448fa3e609b775a8a814
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 17:11:49 2009 -0700
    
        send_command is now implemented twice... ugly hack to get both shutdown working correctly and startup as well... playback now "works" on the emulator, too.
    
    commit 8d657e004677a7c5dae4479e8519bcaa94c18aad
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 11:58:55 2009 -0700
    
        Instead of erasing codec specific data once it's been output to the omx node, retain the data and just rewind after a stop.
    
    commit 279fede6ba35cbc37c35616c53406bf2c9720202
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 10:58:11 2009 -0700
    
        Various fixes related to play/pause. Decoder now properly frees OMXMediaBuffers, made MemoryDealer destructor protected instead of public to prevent accidental stack-allocation of MemoryDealer objects.
    
    commit 0f717f15a6328efd3f34082929cd8ad2351095a9
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 9 08:44:12 2009 -0700
    
        Make sure to rewind codec specific data on OMXDecoder::stop and reset AudioPlayer's notion of time mapping.
    
    commit 0cfb63e33270daf9b215214608ab383f93a31823
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 14:25:48 2009 -0700
    
        Massive rename.
    
    commit 30ed8f476c4431a5275538958b3e281bd17d5eab
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 13:52:41 2009 -0700
    
        send_command and fill/empty buffer commands must be executed in sequence, send_command is now dispatched over the socket instead of through the binder interface to ensure this.
    
    commit b832d04011b2dd8a9632eb7e575bfe1addd1270d
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:21:17 2009 -0700
    
        MediaBuffers can now be "clone()", they sit on top of the same data but have their own range and metadata. Once a clone's refcount drops to 0 it decrements the refcount on the original buffer.
    
    commit 4e944672808bdf1ed40a69f3f602f93ebf7b4049
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 8 10:01:01 2009 -0700
    
        Split MediaBuffer.h into MediaBufferGroup.h and MediaBuffer.h, same with their respective source files.
    
    commit ddb7529b4de4828db51432bd405fddd76cfa3b6a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 16:30:25 2009 -0700
    
        More fudging with A/V sync...
    
    commit 1e5a4d8df08237b58c06c6527a33152ae931addf
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Jun 5 11:54:20 2009 -0700
    
        API cleanup of MediaSource. Got rid of MediaRing as it really doesn't serve a purpose if OMX decoders are used.
    
    commit 0953c65232aa9753d17d2e25c5f5526eb810cf13
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 16:59:19 2009 -0700
    
        Experimental TimedEventQueue and an attempt at a cleaner player implementation using it, OMXDecoder is now a little less verbose.
    
    commit 2085b8ea9484a21fa11f94194a27405d413aeecc
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Jun 4 10:17:01 2009 -0700
    
        Properly bail out of the AV sync loop if the MediaPlayerImpl is stopped.
    
    commit 471f143458a8a0d93cb1bf9568c63c3967279dc6
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 17:32:27 2009 -0700
    
        Now this is much better AV sync, defer seeking the audio source until we know where the video source synced to.
    
    commit 4010d371dbe62ce4971e13437776cba32cb0bb3d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 16:01:07 2009 -0700
    
        Tweaked some of the heuristics in AV sync, OMXDecoder is now a little less verbose, seek to a sync sample at or _after_ the requested position.
    
    commit f3d4af1d5a4ac31fa02271b000f6c7ec593f0da9
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 15:33:58 2009 -0700
    
        Change the TimeSource interface's APIs, prefer microseconds over milliseconds now, changed the way MediaPlayerImpl does AV sync.
    
    commit 08bb46fa61d12e852a424698ddb0c90700328f6e
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Jun 3 11:57:24 2009 -0700
    
        Using framework's Mutex and Condition classes instead of pthread functions, much saner locking in OMXDecoder.
    
    commit 4d77b4e09e59bbf8c1af009ae7dc62b10af52fd6
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 17:12:03 2009 -0700
    
        MediaSources now publish their format.
    
    commit 7e429a26c57bf936e1a08035d2d11839f9f00310
    Author: Andreas Huber <andih@google.com>
    Date:   Tue Jun 2 16:38:29 2009 -0700
    
        MetaData is now implemented in terms of KeyedVector, MetaData is now reference counted.
    
    commit 0fa957aa5c9bcb6ec122ed7b5b97430039be6797
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 14:39:55 2009 -0700
    
        Sync sample seek support.
    
    commit 78a5f090d02e7e6e1a146b29bdb7771eecaa2f86
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 13:51:11 2009 -0700
    
        Distinguish shutdown from port-flush since one requires buffers to be freed and the other one doesn't. Fixes a problem with seek.
    
    commit e57781d3b2c985a74cd8b60e7c8f2d576459d038
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Jun 1 10:52:20 2009 -0700
    
        First shot at support for seeking a MediaSource. Sync frames are not properly handled yet.
    
    commit 0551cd78fda78bf66877fb26c5a55e5ae23d8367
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 16:23:38 2009 -0700
    
        Preliminary support for camera input.
    
    commit f8ebafa65d10d5a06944de6b2e2992a33121b857
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 12:13:47 2009 -0700
    
        Allow NativeMediaPlayer access to Surface's getISurface() method.
    
    commit b1a9fb36eeccd9f49d28c1c64b31fccbd6506eeb
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:38:25 2009 -0700
    
        Header files are now in their own genesis2 hierarchy below frameworks/base/include.
    
    commit f49b8b234b8f6ce83148787eef540dd920f04aa6
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:22:03 2009 -0700
    
        moved MPEG4Writer into libgenesis2.
    
    commit 5224254919dac4728677335ea60429fa16f518b4
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 28 11:13:38 2009 -0700
    
        Everything now lives in the android namespace, integrated errors with android errors, renamed MediaPlayer to MediaPlayerImpl.
    
    commit f9a9d84f7e0465ef5d1938a068655ba39527cf99
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 16:43:11 2009 -0700
    
        Support for getPosition() and getDuration().
    
    commit 3206cc5140bcbc88be039f8d94b954af63e69752
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 15:37:45 2009 -0700
    
        Support for {MediaPlayer, GenesisPlayer, Genesis2Player}::isPlaying()
    
    commit 9f41b248e0dfce71bbc50f883750cec52ebfd1fe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 27 13:49:50 2009 -0700
    
        Proper disconnection from the OMX service.
    
    commit cdcf47a2c31599109ee42277c7fa14af3c600091
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 26 17:27:06 2009 -0700
    
        New player type for the genesis player in libmediaplayerservice. Playing video through an ISurface now.
    
    commit 0586af20ac9ae0403dd190bafd290b0f90549723
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 15:53:19 2009 -0700
    
        Fix a buffer overflow error by adding padding in case we need to de-frame AVC data.
    
    commit eac62fff6ad2ffb7b75c0d4a1b9620d33e93fb9b
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 13:35:30 2009 -0700
    
        Support for http URIs in MediaPlayer, compensate for AudioTrack latency.
    
    commit a7db456e3173d94d6b5e457547e2a6a5f7a8e1cc
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 11:33:25 2009 -0700
    
        Support for URIs in MediaPlayer class, support for shoutcast streams in MediaPlayer, force shutdown of OMX nodes if they don't shutdown cleanly within a second.
    
    commit 1f0268f4f14ad5215668f34e06a420850174d665
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:33:16 2009 -0700
    
        and foo.txt is gone again.
    
    commit 0feca4e0919f345704d78ec78894bac5027bd5ed
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:28:49 2009 -0700
    
        added foo.txt
    
    commit 9c7d04b35cdc895a2de3602dc46522f608bd205f
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:28:04 2009 -0700
    
        delete foo again
    
    commit fec3ca1720992cce51b9a92b86b945da88a6b16c
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:27:45 2009 -0700
    
        weird
    
    commit 30a6571302333146e537e537a3a8986245cca87c
    Author: Andreas Huber <andih@dhcp-172-19-27-148.mtv.corp.google.com>
    Date:   Fri May 22 08:18:55 2009 -0700
    
        reverse test
    
    commit dea3d99dd0fe9386e8a3c51954d9d0fe2be09d38
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 22 08:18:22 2009 -0700
    
        test
    
    commit a9eeafec6e46072cac41e54ebdbd153cb7ae7518
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 16:37:50 2009 -0700
    
        Use the video ring again for now.
    
    commit e05ff3d3c1c4f89ef499a2b172138a775fd694e3
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 15:42:19 2009 -0700
    
        Export to .mp4 now works for MPEG4 video content. Fixed a bug in the sample table wrt co64 chunks.
    
    commit 5c44c540374a4e50c4e8aaab2b7a34aed6e1391e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 09:56:11 2009 -0700
    
        Fix the build, all binder-related headers have moved and there's a new library libbinde
        r to link against now.
    
    commit 23e0a24404d16c898c2c6b3c7495ad303844bc71
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 21 08:42:04 2009 -0700
    
        Initial checkin of MPEG4Writer, a class to export media sources into an mpeg4 file. MPEG4/AVC metadata (efss & friends) not currently working.
    
    commit 9cd77adb1ac194197364ffad00a0d7215f458e1a
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 20 12:31:45 2009 -0700
    
        New shell command to test recording/encoding. Various changes to OMXDecoder to support encoding properly. Now each OMXDecoder needs a dedicated thread on the client side since onEvent responses could block which would cause deadlocks if a node depends on the output of another node for example.
    
    commit 5c510fb55ffed7ec25305999ed9b6c1eec48d503
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 15:40:06 2009 -0700
    
        Make media decoding the default in the genesis2 commandline app instead of shoutcast playback.
    
    commit f6c7a2040b8eb43326621f12c3a936e09b3a70e3
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 18 11:03:04 2009 -0700
    
        The king is dead, long live the kind... Replaced old OMX binder interface with new OMX binder interface/socket hybrid.
    
    commit 0d4955eb5df9bfafb576d22f2ed572644d6d69ac
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 14 12:39:34 2009 -0700
    
        dynamic negotiation of NAL framing with the MPEG4Source, removed stale code from genesis2 commandline tool. Enable support form PV H264 software decoder.
    
    commit 380369f54a8027cbc9349305184d6bf527a24efe
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 17:32:00 2009 -0700
    
        Explore the option of running everything inside the mediaserver process by encapsulating the player in an IGenesisPlayer binder interface.
    
    commit b5cada56b9089a23e0c461352a97dc71e08b424d
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 13 12:11:06 2009 -0700
    
        Introduction of TimeSource class, clean shutdown of OMX Nodes.
    
    commit 89f6e582e605dcb2149eb67f73fe9345d4b9be2e
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 17:11:56 2009 -0700
    
        Helper classes MediaRing and MediaPlayer.
    
    commit 9aaed8739b4bb941473da367fb88f63224d2f1b7
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 12 14:19:18 2009 -0700
    
        Using mmap to map a file instead of going through FILE* improves performance, who knew?
    
    commit ad097a78bbd002c59193ffdc39b64935928426c7
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 11 16:42:42 2009 -0700
    
        Added a performance test, refactored AudioDecoder a little.
    
    commit bdd1b80ab3f3ba43e04f1f996e7fa84ed2e2728a
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 16:19:29 2009 -0700
    
        No more copying the output buffers coming out of the decoder, NAL separation also done in the extractor to avoid copying the data.
    
    commit 858955b42c29b8033841a8caaa56c2a449810ef3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 14:02:38 2009 -0700
    
        Change from a model in which the caller specifies the destination buffer to one where the MediaSource returns a buffer.
    
    commit 95098b6d4f8bdc37dfb6a109ca58db4d9e414e2d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 8 13:21:45 2009 -0700
    
        Changes to support multiple pieces of codec specific data to the decoder, de-frame nal units from the h.264 stream and insert start codes
    
    commit 3941fcf87a48dda81683df727dfb1381f62d9184
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 16:37:45 2009 -0700
    
        some refactoring. Most streams play now.
    
    commit d3152862840d4dd39068e5197bec8674f3d55dd5
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 15:37:32 2009 -0700
    
        Misc. changes to support H264 decoding using the qcom hardware decoder
    
    commit d4ecdfe7af36e7468270d1c2cbbdc540efe0351e
    Author: Andreas Huber <andih@google.com>
    Date:   Thu May 7 09:28:18 2009 -0700
    
        Timestamps are now stored as a fraction, i.e. units and scale, also, PV appears to violate OMX specs by assuming timestamps are in milliseconds instead of microseconds.
    
    commit fe6a50943f885e065d4061aa727a54417e9f36db
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 14:18:27 2009 -0700
    
        Refactored commandline app instantiation of the decoder.
    
    commit da1ff2724d0e78e8b360d9a2c34c55dd0e2c0492
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 10:41:14 2009 -0700
    
        Proper audio/video synchronization.
    
    commit 569ee3a23f600f4b6b87c6178c0223b06e97f201
    Author: Andreas Huber <andih@google.com>
    Date:   Wed May 6 09:17:20 2009 -0700
    
        Preliminary support for timestamps.
    
    commit e4e302a89207550d8a7170d8c0afbd9c15047c84
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:13:12 2009 -0700
    
        Another quick hack job to make CachingDataSource thread-safe as well.
    
    commit dfb376a58bd7c09aa04e89558186fcfe13fe696c
    Author: Andreas Huber <andih@google.com>
    Date:   Tue May 5 15:08:14 2009 -0700
    
        Quick rushjob to make FileSource and SampleTable thread safe.
    
    commit 02b29e7ebdab1f8b959b6c177ceb3b89d998f375
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 17:22:04 2009 -0700
    
        Made video decoding work for mpeg4/h263 and mostly(?) with AVC content.
    
    commit 3a57b8ff15e48f5a0af03bf0a99c32e240dbb7ef
    Author: Andreas Huber <andih@google.com>
    Date:   Mon May 4 09:26:42 2009 -0700
    
        Getting rid of old sample code to drive the OMXNode binder interface.
    
    commit 5b046aed0cf524a57ea711bc1e43ea80e57b2cb3
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 16:21:11 2009 -0700
    
        Moved files from the commandline utility into the framework, renamed MP3Decoder to AudioDecoder
    
    commit 7f3fbba21512a078b732cc52c7bd5ba5acb9a317
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 15:56:19 2009 -0700
    
        Fixed buffer ordering and an off-by-1 error in the SampleTable code. Plays all AACs now :)
    
    commit 024d06baab8f2c540dde16f7e7a4b6dd57f638c7
    Author: Andreas Huber <andih@google.com>
    Date:   Fri May 1 11:52:48 2009 -0700
    
        Some AAC content in .3gp or .mp4 files plays correctly now, other does not. Implemented ESFS parser.
    
    commit 1470427866b0d3e0ce6848b4edc01c13a09be289
    Author: Andreas Huber <andih@google.com>
    Date:   Thu Apr 30 15:19:31 2009 -0700
    
        Another checkpoint, amr decoding now functional.
    
    commit e612d044439f56331b6a2bc4a88622e04d4d42e7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 12:11:29 2009 -0700
    
        string wrapper around String8, various fixes, shoutcast now works again.
    
    commit 2ea52dfb1a39bf3a223ffc87855e54919e2daff7
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 11:08:18 2009 -0700
    
        Initial check-in of OMXNode binder interface.
    
    commit 7880d2957f74c0d7fba7679431ff5adb3780543b
    Author: Andreas Huber <andih@google.com>
    Date:   Wed Apr 29 10:05:01 2009 -0700
    
        Initial check-in of both libgenesis2 and the genesis2 commandline tool.
    Move away from MediaDebug and use ADebug instead
    
    Change-Id: I963a3b6f79a7292891973cbeeaf3378b38629f08
    A small sample tool to encode pcm audio data to amr, decode it again and play it. Some changes to OMXCodec to properly configure the AMR decoder(s).
    eclair snapshot
    Change to a int64_t usecs representation for timestamps and duration throughout stagefright.
    Media MIME types now have corresponding constants in MediaDefs.h, new codec enumeration API.
    Some work to make audio encoding work.
    Prototype screen recording command
    
    This records the screen contents as a movie.  It works by feeding
    the output of a virtual display to the video/avc encoder.  Recording
    continues until Ctrl-C is hit.
    
    Video only, no sound.  Does not track screen rotations.
    
    Change-Id: I91d5c4e781792c740699b7a83590e846295b3617
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    AV Android make files changes
    
    o plus a few file relocation: ActivityManager.cpp/h, SoundPool.h, etc
    o remove some runtime dependencies to libandroid, libandroid_runtime, etc
    
    Change-Id: I047a47c5fb361dd5cf85cd98798c39f629a75d10
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    Add memory leak tracking/debugging code to drm server
    
    bug - 4099038
    
    Change-Id: I6c048eaf3d7f34bc144b8daaa5fdef1ed474af66
    Bug 4016329 do full string comparisons
    
    Use full string comparisons instead of partial for
      file extension and MIME type.
    Do case-insensitive comparison of MIME type and file extensions.
    Fix error in comment for String8::getPathExtension.
    Remove dead code -- StringTokenizer is unused.
    
    Change-Id: I322be6235abbdaab5f7eafa48926dbb2cf46dc29
    Make DRM libraries optional
    
    Change-Id: I0b591b75a035bc6d8049c85b595966845fedaa15
    fix build
    
    Change-Id: I4aba42eabb2f959b5301bfd16f65fa6141d86ddc
      Initial contribution from Sony Corporation.
    
      Add DRM Framework to support DRM content playback
      together with StageFright.
    
      - DRM Framework code is added
         - include/drm
         - drm
      - api/current.xml is updated to include DRM Framework Java APIs
      - cmds/servicemanager/service_manager.c is modified
        to add drmManager and drmIOService.
    
    Change-Id: I6d7bc9c7067362b500e530988a9ce241761866fb
    Rotate fallback size
    
    If configuring the encoder for display-size recording fails, we drop
    back to 720p.  This was done a bit too literally, and didn't look
    good in portrait mode.  Rotate the fallback size as needed.
    
    Bug 10826876
    
    Change-Id: Id3130471fc1467afa8bf91d75c9d4a49245253c3
    Make sure the encoder instance is safely release()'d before its
    
    reference count drops to 0.
    
    Change-Id: I6601226e2754f17e964125cacf02dc02cfbf6231
    related-to-bug: 10150263
    Start 'am' with exec()
    
    We were using system() to run 'am broadcast'.  Switch to
    fork()+exec().
    
    Bug 10606037
    
    Change-Id: Ifae1a2b4f1914f015d09f2cac8cd0b1896d87a84
    Add time limit to screenrecord
    
    Recordings are now limited to 3 minutes.  The time can be set lower
    with the --time-limit option.
    
    Bug 10529645
    
    Change-Id: I6ac19b9da8d616d38262414c2e821d56efcec55d
    Notify the media scanner
    
    Use an "am broadcast" command to notify the media scanner that
    a new video file is available.
    
    Bug 10096103
    
    Change-Id: I8261d81d96832969ebb9031a9766c1b1f2a569ed
    Another error check
    
    Change-Id: I01ed5c0c7dcb520732d2856859bced31df5fbbb5
    Use destroyDisplay()
    
    Use the new SurfaceComposerClient::destroyDisplay call to shut the
    virtual display down.
    
    Change-Id: I0225a44594abf427d386456622b23b01fdd1690f
    Better error message
    
    Attempt to create the output file before handing it to MediaMuxer,
    which doesn't report file-open failures in a useful way.
    
    Change-Id: Ie24ff577dd50e185b4eb72575684d23a46f38d3d
    Use screen dimensions as default video size
    
    Instead of 720p, use the screen dimensions as the default video
    size.  For example, a phone with a 768x1280 display would be
    recorded as a 768x1280 video when in portrait, or a 1280x768
    video when in landscape.
    
    If the device is not able to record at that resolution, we
    fall back to 720p.
    
    Also, fixed a problem introduced by a buffer timestamp change.
    
    Change-Id: I7230ddb323c669ab07327f26df8d103c192c21d3
    Prototype screen recording command
    
    This records the screen contents as a movie.  It works by feeding
    the output of a virtual display to the video/avc encoder.  Recording
    continues until Ctrl-C is hit.
    
    Video only, no sound.  Does not track screen rotations.
    
    Change-Id: I91d5c4e781792c740699b7a83590e846295b3617
    camera: Collect stack traces when bad things happen, print with dumpsys
    
    Bug: 11324229
    Change-Id: Ic920e170a8f5a389fc139bbf5416c0e3186c7fb6
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Make android.hardware.photography.Camera work on HAL3+ devices
    
    Bug: 9213377
    Change-Id: I5b2eeab28985f53dfcb7b8e3029930f5adcd74f5
    Initial implementation of android.hardware.photography.CameraDevice (service)
    
    * Verified preview streaming requests
    * Other things *should* work but unverified / unimplemented in client side
    
    Missing:
    * CameraService needs to return static camera info metadata
    
    Bug: 9213377
    Change-Id: I71568560fcf18d0e2b408ed1c4d0066647314868
    Camera3: Refactor stream code to be DRY
    
    Bug: 8851039
    Change-Id: Iaac2926bfa25dd6e9db8b307765d4fe709b88d21
    Camera3: Refactor stream code to be DRY
    
    Bug: 8851039
    Change-Id: Iaac2926bfa25dd6e9db8b307765d4fe709b88d21
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    camera: Add new RingBufferConsumer to keep a ring buffer of acquired frames
    
    Bug: 8563838
    Change-Id: I5a95e0be94e5388b30639905efae42d3c3279f72
    camera: Add new RingBufferConsumer to keep a ring buffer of acquired frames
    
    Bug: 8563838
    Change-Id: I5a95e0be94e5388b30639905efae42d3c3279f72
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Remove obsolete references to libmedia_native
    
    Bug: 6654403
    Change-Id: I3993d62987cf0dd85db10bf002a5cce53d4f01bd
    Remove obsolete references to libmedia_native
    
    Bug: 6654403
    Change-Id: I3993d62987cf0dd85db10bf002a5cce53d4f01bd
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Refactor preview/recording management to separate class.
    
    Untangle preview/recording management from main class to simplify
    callpaths; in preparation for fixing several HAL/app interactions
    bugs.
    
    Bug: 7172543
    Bug: 7159577
    Bug: 7107220
    Change-Id: Iab5503f66b35d88a1524111536a484c9e33fd934
    Camera2: Refactor preview/recording management to separate class.
    
    Untangle preview/recording management from main class to simplify
    callpaths; in preparation for fixing several HAL/app interactions
    bugs.
    
    Bug: 7172543
    Bug: 7159577
    Bug: 7107220
    Change-Id: Iab5503f66b35d88a1524111536a484c9e33fd934
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Move preview callback processing to its own thread.
    
    To reduce delays for HAL callbacks, manage preview callbacks in their
    own thread.
    
    Bug: 6243944
    Change-Id: I7bef56949ac889ffce4e031bf40291a771a46f3e
    Camera2: Move preview callback processing to its own thread.
    
    To reduce delays for HAL callbacks, manage preview callbacks in their
    own thread.
    
    Bug: 6243944
    Change-Id: I7bef56949ac889ffce4e031bf40291a771a46f3e
    Camera2: Move still capture processing to separate thread.
    
    To avoid stalling HAL when it queues up new buffers for still capture,
    process still captures in a separate thread. Also move Camera2Heap to
    its own class so it can be used by the CaptureProcessor.
    
    Bug: 6243944
    Change-Id: Id38e2a52367c0985812fcd4fd9af3ef90beef43f
    Camera2: Move still capture processing to separate thread.
    
    To avoid stalling HAL when it queues up new buffers for still capture,
    process still captures in a separate thread. Also move Camera2Heap to
    its own class so it can be used by the CaptureProcessor.
    
    Bug: 6243944
    Change-Id: Id38e2a52367c0985812fcd4fd9af3ef90beef43f
    Camera2: Factor out FrameProcessor.
    
    Move FrameProcessor to its own file, add necessary interfaces to
    Camera2Client.
    
    Bug: 6243944
    Change-Id: I8d1b8280a65d2822461ebe6b6c9de17992b34276
    Camera2: Factor out Camera2Client::Parameters
    
    Move the parameter structure and the various utility methods using it
    to its own class. Rename LockedParameters to SharedParameters to match
    the Mutex naming convention.
    
    Also move CameraMetadata to camera2 directory for organization.
    
    No functional changes.
    
    Bug: 6243944
    Change-Id: Ie60b535936ecfda9bf23361d52604abf515c83d0
    Camera2: Use CameraMetadata wrapper class.
    
    Wrap the use of the camera_metadata library inside a CameraMetadata
    class to avoid memory leaks, improve code clarity, and increase type
    safety.
    
    Bug: 6243944
    Change-Id: I90ca592b5875e27e4c58ea1ca680582dc3c3b56a
    Camera2: Replace MediaConsumer with BufferItemConsumer.
    
    Get rid of MediaConsumer, which was largely duplicated code, and
    replace it with the simpler BufferItemConsumer.
    
    Bug: 6243944
    Change-Id: I242d80c5fe39f2ee581ec8bb46f362997d994b0a
    Camera2: Revamp recording support to allow opaque formats.
    
    - Avoid memcpy of buffer data by using metadata mode
    - Temporarily add MediaConsumer BufferQueue class
    
    Bug: 6243944
    Change-Id: I7a8c4222b7dbd14f1b1d86fda06d38eb640e87c1
    Update ANativeWindow client code for sync
    
    This change updates all the uses of ANativeWindow to use the new ANW functions
    that accept and return Sync HAL fence file descriptors.
    
    Change-Id: Id7db42d8d6380f8b440d88476ce9211c6225fb16
    Camera service: Initialization for camera2 clients and devices
    
    - Refactor initialization code to hide device type from CameraService
    - Add metadata queue class to Camera2Device
    - Initialization of Camera2Device, Camera2Client
    - Conversion from HAL2 device static metadata to camera API
      parameters.
    
    Bug: 6243944
    Change-Id: I524145b45438e906d8493dae202704ce8f090aeb
    Camera service: Add skeleton support for camera2 devices.
    
    - Add Camera2Client, which maps the current android.hardware.Camera
      API to the new camera2 semantics
    - Add Camera2Device, a C++ wrapper for the HAL camera 2 device
    
    No functionality besides create/destroy; all client methods return
    error or null.
    
    Bug: 6243944
    Change-Id: I6bd5136fa1efd8279b8cd2d9847d9b0bb2862294
    Break out CameraClient from CameraService.
    
    To allow for different low-level implementations of the current camera
    API, the Client class inside CameraService has to be inheritable. This
    change breaks it up into the common section accessed by the camera
    service, and the full implementation for camera device HAL version 1.
    
    The full implementation is moved out to CameraClient.h/.cpp.
    
    There are no functionality changes, just code reorganization.
    
    Bug: 6243944
    Change-Id: I8a79b31a3ae3617198dc6bb5576a9f2e2d9c95de
    Add libmedia_native
    
    Change-Id: I3ac357c78fb89f108d15c6e5b9fa317de0e9fb9a
    Add libmedia_native
    
    Change-Id: Ib8cff8abd73723b793f08da99ad59549f219e0e7
    frameworks/base: switch CameraService to a HAL module
    
    This patch changes CameraService to load a camera HAL module, instead of
    linking directly against a library that implements the CameraHardwareInterface
    class.
    
    CameraHardwareInterface no longer defines the API to the camera HAL.  Instead,
    this is now in HAL header hardware/camera.h.  We keep CamerHardwareInterface as
    a class local to CameraService, which wraps around the new HAL calls.  In the
    future, we may remove this class entirely and have CameraService call the HAL
    methods directly.
    
    Change-Id: I5c61ac40078fc0b50bbac5881a556fe6c8837641
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    merge libsurfaceflinger_client into libgui
    
    this is the first step in unifying surfacetexture and surface.
    for this reason the header files were not moved, as most of them
    will eventually go away.
    
    NOTE: currently we keep libsurfaceflinger_client.so as an empty
    library to workaround prebuilt binaries wrongly linking against
    it.
    
    Change-Id: I130f0de2428e8579033dc41394d093f4e1431a00
    Add camera service support for SurfaceTexture.
    
    This change enables the use of a SurfaceTexture in place of a Surface as
    the destination of camera preview frames.
    
    Change-Id: Ic70d404c8fe261e9d5da6f1de93d6babb5b191cb
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    Add NOTICE and MODULE_LICENSE_APACH2 to libs build under /frameworks/av/
    
    Change-Id: I0a3af3e2abdedebd5934f3d941d01c32cfc75e26
    related-to-bug: 6647465
    Copied MODULE_LICENSE_APACH2 and NOTICE from frameworks/base to frameworks/av
    
    Change-Id: I48c927b9690bf902ab167d60171c0ee7995687e0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Make android.hardware.photography.Camera work on HAL3+ devices
    
    Bug: 9213377
    Change-Id: I5b2eeab28985f53dfcb7b8e3029930f5adcd74f5
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Make android.hardware.photography.Camera work on HAL3+ devices
    
    Bug: 9213377
    Change-Id: I5b2eeab28985f53dfcb7b8e3029930f5adcd74f5
    Initial implementation of android.hardware.photography.CameraDevice (service)
    
    * Verified preview streaming requests
    * Other things *should* work but unverified / unimplemented in client side
    
    Missing:
    * CameraService needs to return static camera info metadata
    
    Bug: 9213377
    Change-Id: I71568560fcf18d0e2b408ed1c4d0066647314868
    Implementing MediaDrm APIs
    
    Change-Id: I9ff8eeb7d0c383b5c0c68cd54eb54ce7d2d22fe6
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Add unit test infrastructure for libcameraclient
    
    Change-Id: I957538663ae8332d26f3640c63a75efc79f4ac5c
    Permit conditional registry of mediaserver extensions
    
    Change-Id: I94dc0d038e702dfe1779a50a1de0fae9bad15057
    Factor out and speed up permission-checking code
    
    Use the caching permission check for dump to save IPC.
    
    Cache getpid() to save kernel call for other permission checks.
    
    The C runtime library getpid() can't cache due to a fork
    race condition, but we know that mediaserver doesn't fork.
    
    Don't construct String16 on the stack.
    
    Change-Id: I6be6161dae5155d39ba6ed6228e7683e67be34ed
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Camera: Implement getCameraCharacteristics
    
    Bug: 10904541
    Bug: 10360518
    Change-Id: Ie9ca6b3b0b5f2fe529e6b0decc193096e770a017
    Camera1: Set preview to be asynchronous, and remove dead code
    
    - Use the controlledByApp flag to make sure application-bound
      preview buffer queue is asynchronous as before
    - Remove setPreviewDisplay in service, since it is no longer in
      the binder interface
    - Rename setPreviewTexture to setPreviewTarget, to make it clear it's
      the only game in town now. Rename only on the binder level and service
      for now.
    
    Bug: 10312644
    Change-Id: Icd33a462022f9729a63dc65c69b755cb7969857e
    Refactor CameraService to handle errors properly.
    
    Bug: 10361136
    
    -Connect calls now return status_t error flags.
    
    Change-Id: Idca453b111e5df31327f6c99ebe853bb2e332b95
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Make android.hardware.photography.Camera work on HAL3+ devices
    
    Bug: 9213377
    Change-Id: I5b2eeab28985f53dfcb7b8e3029930f5adcd74f5
    Initial implementation of android.hardware.photography.CameraDevice (service)
    
    * Verified preview streaming requests
    * Other things *should* work but unverified / unimplemented in client side
    
    Missing:
    * CameraService needs to return static camera info metadata
    
    Bug: 9213377
    Change-Id: I71568560fcf18d0e2b408ed1c4d0066647314868
    Camera: Hotplug - conditionally transition to PRESENT when clients disconnect
    
    Fixes an issue where a client could unconditionally transition to PRESENT
    after a client disconnects, even though the underlying HAL status was actually
    NOT_PRESENT or ENUMERATING.
    
    Bug: 8780114
    Change-Id: I68adb5fc819eec3b046ddcb2507b84bedc999a0f
    Camera: Hotplug - conditionally transition to PRESENT when clients disconnect
    
    Fixes an issue where a client could unconditionally transition to PRESENT
    after a client disconnects, even though the underlying HAL status was actually
    NOT_PRESENT or ENUMERATING.
    
    Bug: 8780114
    Change-Id: I68adb5fc819eec3b046ddcb2507b84bedc999a0f
    Camera: Add preview callback surface support
    
    - Add call to set a preview callback surface
    - Implement support for HAL2/3 devices
    - Still need HAL1 implementation
    
    Change-Id: I0dc0bd72e43d871aa487858d1665c1efca633ffe
    Camera: Add hotplug support (for fixed # of cameras)
    
    * Minor: also change addListener to fire the current status upon subscription
    * Minor: STATUS_AVAILABLE is now an alias for STATUS_PRESENT and deprecated
    
    Change-Id: I254608a7332095e3ef201ffea64cff156cfc1b3e
    Camera: Add hotplug support (for fixed # of cameras)
    
    * Minor: also change addListener to fire the current status upon subscription
    * Minor: STATUS_AVAILABLE is now an alias for STATUS_PRESENT and deprecated
    
    Change-Id: I254608a7332095e3ef201ffea64cff156cfc1b3e
    Camera: Make ProCamera connect take the same paths as Camera connect
    
    * ProCamera uses the app ops manager
    * Refactored connect calls to be as common as possible
    * Removed some useless not implemented function calls in ProClient
    
    Change-Id: I5dab30d20f0c202a494a07b2cfe4c1fa04a2a076
    Camera: Make ProCamera connect take the same paths as Camera connect
    
    * ProCamera uses the app ops manager
    * Refactored connect calls to be as common as possible
    * Removed some useless not implemented function calls in ProClient
    
    Change-Id: I5dab30d20f0c202a494a07b2cfe4c1fa04a2a076
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Camera2: Don't promote weak IBinder ptrs to strong ones
    
    The Binder driver does not support promoting weak pointers into strong
    pointers. Occassionally the system would lock up when trying to do this
    (when closing the camera app).
    
    Bug: 7289040
    Change-Id: I8bc0b5c48616bf0b7f4eed1878ad4994ee635871
    Camera2: Don't promote weak IBinder ptrs to strong ones
    
    The Binder driver does not support promoting weak pointers into strong
    pointers. Occassionally the system would lock up when trying to do this
    (when closing the camera app).
    
    Bug: 7289040
    Change-Id: I8bc0b5c48616bf0b7f4eed1878ad4994ee635871
    Camera2: Don't promote weak IBinder ptrs to strong ones
    
    The Binder driver does not support promoting weak pointers into strong
    pointers. Occassionally the system would lock up when trying to do this
    (when closing the camera app).
    
    Bug: 7289040
    Change-Id: I8bc0b5c48616bf0b7f4eed1878ad4994ee635871
    Camera2: Don't promote weak IBinder ptrs to strong ones
    
    The Binder driver does not support promoting weak pointers into strong
    pointers. Occassionally the system would lock up when trying to do this
    (when closing the camera app).
    
    Bug: 7289040
    Change-Id: I8bc0b5c48616bf0b7f4eed1878ad4994ee635871
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera service: Initialization for camera2 clients and devices
    
    - Refactor initialization code to hide device type from CameraService
    - Add metadata queue class to Camera2Device
    - Initialization of Camera2Device, Camera2Client
    - Conversion from HAL2 device static metadata to camera API
      parameters.
    
    Bug: 6243944
    Change-Id: I524145b45438e906d8493dae202704ce8f090aeb
    DO NOT MERGE: Minimal fix for takePicture/previewCallback deadlock
    
    - Caused by already held lock in camera service
    
    - Introduce one more lock, mICameraLock, to control access to camera
      client through ICamera binder interface.
    
    - mLock is released before calling HAL takePicture, allowing HAL
      callbacks to access camera client during takePicture processing.
    
    Bug: 5804701
    Change-Id: Ibcef4857a2c844c964afefa70f9cdccdd0a55fd0
    Camera service: Add skeleton support for camera2 devices.
    
    - Add Camera2Client, which maps the current android.hardware.Camera
      API to the new camera2 semantics
    - Add Camera2Device, a C++ wrapper for the HAL camera 2 device
    
    No functionality besides create/destroy; all client methods return
    error or null.
    
    Bug: 6243944
    Change-Id: I6bd5136fa1efd8279b8cd2d9847d9b0bb2862294
    Break out CameraClient from CameraService.
    
    To allow for different low-level implementations of the current camera
    API, the Client class inside CameraService has to be inheritable. This
    change breaks it up into the common section accessed by the camera
    service, and the full implementation for camera device HAL version 1.
    
    The full implementation is moved out to CameraClient.h/.cpp.
    
    There are no functionality changes, just code reorganization.
    
    Bug: 6243944
    Change-Id: I8a79b31a3ae3617198dc6bb5576a9f2e2d9c95de
    Remove new camera connect API.
    
    Applications are not resumed under the lock screen now.
    This API is not needed anymore.
    
    bug:5584464
    Change-Id: I115daf6b647348617ec0fc05b626878c945b9b29
    Fix deadlock in camera destruction after client app's crash
    
    * why deadlock happened: when an app (CTS camera test) crashes while using
      camera, its binder is closed and reference counter is decreased. If camera
      is inside callback, sp<Client> inside callback will hold the Client instance,
      and Client instance is destroyed when the callback ends as sp<Client> to hold
      it no longer exists. The destructor of Client instance tries to clean up
      camera H/W which tries to stop threads created by camera HAL including the
      thread context where the callback is running. This causes deadlock where the
      callback thread itself is waiting for itself to terminate.
      Note that the deadlock will not happen if camera callback is not active. In
      that case, closing of binder will force the destruction of Client instance,
      and the destruction happens in binder thread.
    
    * Fix: Forces Client descruction in binder thread
    - remove sp<Client> from callbacks to prevent destruction in callback context
    - add client lock to allow callback to use raw pointer safely. This prevents
      the destructor from deleting the instance while callback is using it.
    - add status change inside destructor with client lock to safely destroy Client
    
    Bug: 6214383
    Change-Id: Ic6d6396d4d95ce9e72a16ec2480ae65c100fe806
    Add a new camera open API that allows taking the ownership.
    
    The purpose is to let face unlock always get the camera
    successfully. What happened was the camera applications may
    have opened the camera in onResume under the lock screen.
    This API lets face unlock take the camera from the camera
    application. A new permission will be added, so other
    applicatoins won't be able to take the camera from the face
    unlock.
    
    bug:5584464
    
    Change-Id: Ib3d9dcbc2161815b68db42327dc01148453704c6
    Switch camera sounds to always use the system enforced audio stream.
    
    Instead of picking between the music stream and the enforced audio
    stream, change the camera service to always play sounds through
    enforced system stream. Also update the currently-hidden CameraSound
    API to match.
    
    Bug: 5778365
    Change-Id: I3cc64b1d1ff567dbac8020a665d5b19846197ff3
    Fix 5468644: Use the proper audio stream type to play sound.
    
    Change-Id: I80dd37da277b1810959a2dbdd852078b26f70cf5
    Pass camera frame metadata from camera service to Java.
    
    bug:4460717
    Change-Id: I2fae6e1dfca6b8f3a5ee5716fc7817f5417bf657
    Add frame metadata parameter to camera data_callback.
    
    bug:4460717
    Change-Id: Ib47d7d7df20af8155a719f3dabefe030893bfebc
    CameraService: (dis)connect from preview windows
    
    This change makes CameraService connect and disconnect from preview
    windows (Surfaces and SurfaceTextures) that get set.
    
    Change-Id: I726971688367d5ce0d9aa90c44168037bce33deb
    frameworks/base: switch CameraService to a HAL module
    
    This patch changes CameraService to load a camera HAL module, instead of
    linking directly against a library that implements the CameraHardwareInterface
    class.
    
    CameraHardwareInterface no longer defines the API to the camera HAL.  Instead,
    this is now in HAL header hardware/camera.h.  We keep CamerHardwareInterface as
    a class local to CameraService, which wraps around the new HAL calls.  In the
    future, we may remove this class entirely and have CameraService call the HAL
    methods directly.
    
    Change-Id: I5c61ac40078fc0b50bbac5881a556fe6c8837641
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    remove more unused references to ISurface
    
    Change-Id: I2201f1ca2bb8f203a081d94a0134f798778dfbef
    frameworks/base: some camera-interface cleanup
    
    Methods getNumberOfVideoBuffers() and getVideoBuffer() as well as struct
    image_rect_struct are no longer used (instead, the necessary information is
    passed through ANativeWindow.)
    
    Change-Id: If4b11446fc9ccbde1f6b45bc70c0d0b8e54376eb
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Application-managed callback buffer support for raw image
    
    bug - 3292153
    
    Change-Id: I9789f7c5cde3a3889d7375e881181e9152d95fc2
    Add camera service support for SurfaceTexture.
    
    This change enables the use of a SurfaceTexture in place of a Surface as
    the destination of camera preview frames.
    
    Change-Id: Ic70d404c8fe261e9d5da6f1de93d6babb5b191cb
    remove support for PUSH_BUFFER surfaces and overlays
    
    the same functionality is now supported through
    the h/w composer HAL, and YUV support in the GPU.
    
    Change-Id: I8146605449954b8e8fd7f78810b7d873c2d8f5bf
    Mirror the camera preview if the camera is front-facing.
    
    bug:3095272
    Change-Id: Ib1c1d1edc06a33e9d4d2dcb42bc1dd2c25b1310c
    Remove the FLIP_H/ROT_90 workaround from CameraService.do not merge
    
    Now overlay does flip before rotation.
    bug:3114236
    Change-Id: I1780e56154566435a0ceeb2f101de7ed0a0613cb
    Mirror the preview for front-facing cameras. do not merge
    
    Now overlay does ROT_90 before FLIP_V or FLIP_H. It should be FLIP_V
    or FLIP_H first. The formula should be changed after overlay is fixed.
    
    bug:3059865
    Change-Id: Ie4366bf7f1fcac7383e8dfc74b1b865997bbbcc6
    Camera framework change required for 0-memcpy recording
    
    bug - 3042125
    
    Change-Id: I46eb7a10b5394086b353fd73e4503beceeed76f1
    Fix camera display orientation.
    
    bug:3036262
    Change-Id: I6fc3dc381fcfaceba09fd5bd14afb85045b3d676
    The old overlay should be destroyed if orientation changes.
    
    Previously the orientation was wrong after suspend and resume.
    When the camera app is resumed behide the lock screen, it
    orinteation is portrait. When users slide to unlock the screen,
    surfaceChanged is called and the orientation is landscape.
    The camera app stops the preview, sets the display orientation,
    and starts the preview. Overlay should be destroyed if the
    orientation has changed.
    
    bug:3031640
    Change-Id: I38b527f9ea78c91b538463292152c023383b4695
    Adding enable/disable option for sendCommand()
    
    - Added enum CAMERA_CMD_ENABLE_SHUTTER_SOUND which corresponds to
      command type for enabling/disabling shutter sound.
    - The implementation checks if it is legal to disable shutter sound.
      If it is, then any process can disable the sound. If not, then only
      the mediaserver process is allowed to do this. Currently time lapse
      capture needs this functionality to disable shutter sound when still
      mode is used to capture time lapse video.
    
    Change-Id: Id147a3bcc6a345c2c6a6d52bf98fd8292386bb19
    Change the framework to use the new camera preview path.
    
    This change makes the camera HAL interface take an ANativeWindow interface from
    which all the camera preview buffers will be allocated.  The framework code
    running in application processes now passes a Surface object rather than an
    ISurface to the camera server via Binder when setting the preview surface.  The
    camera server then forwards that Surface object (which implements the
    ANativeWindow interface) to the camera HAL, which uses it to communicate with
    SurfaceFlinger to allocate the camera preview buffers.
    
    Change-Id: Ie438f721559cd7de5e4f848a26d96360dda07b5f
    Handle the camera open failure better.
    
    Check if camera hardware is NULL to avoid mediaserver crash.
    
    Change-Id: Ibde0251f30bdb6b36a5d5380222d7be25ec9449c
    fix inaccurate copyrights
    
    Change-Id: I33b0f68f2da34ca4728211d83159cf32a127f6dd
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    added BinderService<> template to help creating native binder services
    
    Change-Id: Id980899d2647b56479f8a27c89eaa949f9209dfe
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    Add NOTICE and MODULE_LICENSE_APACH2 to libs build under /frameworks/av/
    
    Change-Id: I0a3af3e2abdedebd5934f3d941d01c32cfc75e26
    related-to-bug: 6647465
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix bugs and add traces for trust-store support
    
    Change-Id: I774d73d1cf8a05e5704e62736a155cac2edcd8ab
    Adjust permissions of socket. Provides a connection to a per-user remote trust-store implementation via a unix domain socket.
    
    Adjusts the connect behavior to reject a connection by an app if the application has not been trusted by the user.
    
    Change-Id: I4938ed9d004dee44422867ac5b3d204508bc2a00
    Signed-off-by: Thomas VoÃ <thomas.voss@canonical.com>
    Signed-off-by: Ricardo Salveti de Araujo <rsalveti@rsalveti.net>
    Signed-off-by: Thomas VoÃ <thomas.voss@canonical.com>
    Camera: Removing need of Android AppsOpsManager
    
    Change-Id: I4dd1132cdf6b4421f6d288adaf69aa709d05754c
    Signed-off-by: Ricardo Salveti de Araujo <ricardo.salveti@canonical.com>
    CameraService.cpp: disable shutter sound
    
    As in Ubuntu Touch we don't have support for audioflinger anymore.
    
    Change-Id: I6115bc5c1e9606a7af6b19716d0c25036128e011
    Signed-off-by: Ricardo Salveti de Araujo <ricardo.salveti@canonical.com>
    camera: Collect stack traces when bad things happen, print with dumpsys
    
    Bug: 11324229
    Change-Id: Ic920e170a8f5a389fc139bbf5416c0e3186c7fb6
    Camera: only return static metadata for HAL3 device
    
    This effectively disables the camera2 APIs for HAL2.x or lower HAL device.
    
    Bug: 10360518
    Change-Id: I0f374ac533468c6181f5672c75088b7144b9c53d
    Camera: Implement getCameraCharacteristics
    
    Bug: 10904541
    Bug: 10360518
    Change-Id: Ie9ca6b3b0b5f2fe529e6b0decc193096e770a017
    Fix CameraService error flag when running HAL1 with API2.
    
    Bug: 10620944
    
    Change-Id: I44c0d09a3d313ae8f724fbe61fa5f36cf5b38b6d
    Refactor CameraService to handle errors properly.
    
    Bug: 10361136
    
    -Connect calls now return status_t error flags.
    
    Change-Id: Idca453b111e5df31327f6c99ebe853bb2e332b95
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera: ProCamera connect need support HAL3 device
    
    Change-Id: Iae7e5f9e6387f61f1c4bbb91f75803fc1fdf2668
    Make android.hardware.photography.Camera work on HAL3+ devices
    
    Bug: 9213377
    Change-Id: I5b2eeab28985f53dfcb7b8e3029930f5adcd74f5
    Initial implementation of android.hardware.photography.CameraDevice (service)
    
    * Verified preview streaming requests
    * Other things *should* work but unverified / unimplemented in client side
    
    Missing:
    * CameraService needs to return static camera info metadata
    
    Bug: 9213377
    Change-Id: I71568560fcf18d0e2b408ed1c4d0066647314868
    Camera: Hotplug - conditionally transition to PRESENT when clients disconnect
    
    Fixes an issue where a client could unconditionally transition to PRESENT
    after a client disconnects, even though the underlying HAL status was actually
    NOT_PRESENT or ENUMERATING.
    
    Bug: 8780114
    Change-Id: I68adb5fc819eec3b046ddcb2507b84bedc999a0f
    Camera: Hotplug - conditionally transition to PRESENT when clients disconnect
    
    Fixes an issue where a client could unconditionally transition to PRESENT
    after a client disconnects, even though the underlying HAL status was actually
    NOT_PRESENT or ENUMERATING.
    
    Bug: 8780114
    Change-Id: I68adb5fc819eec3b046ddcb2507b84bedc999a0f
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera: Add hotplug support (for fixed # of cameras)
    
    * Minor: also change addListener to fire the current status upon subscription
    * Minor: STATUS_AVAILABLE is now an alias for STATUS_PRESENT and deprecated
    
    Change-Id: I254608a7332095e3ef201ffea64cff156cfc1b3e
    Camera: Add hotplug support (for fixed # of cameras)
    
    * Minor: also change addListener to fire the current status upon subscription
    * Minor: STATUS_AVAILABLE is now an alias for STATUS_PRESENT and deprecated
    
    Change-Id: I254608a7332095e3ef201ffea64cff156cfc1b3e
    ProCamera: Fix rare deadlock when client destructs inside the connect call
    
    Bug: 8337737
    Change-Id: Ia6fca4365fa20fdbfd6a1ec8d047639a002f2aba
    ProCamera: Fix rare deadlock when client destructs inside the connect call
    
    Bug: 8337737
    Change-Id: Ia6fca4365fa20fdbfd6a1ec8d047639a002f2aba
    Camera: Make ProCamera connect take the same paths as Camera connect
    
    * ProCamera uses the app ops manager
    * Refactored connect calls to be as common as possible
    * Removed some useless not implemented function calls in ProClient
    
    Change-Id: I5dab30d20f0c202a494a07b2cfe4c1fa04a2a076
    Camera: Make ProCamera connect take the same paths as Camera connect
    
    * ProCamera uses the app ops manager
    * Refactored connect calls to be as common as possible
    * Removed some useless not implemented function calls in ProClient
    
    Change-Id: I5dab30d20f0c202a494a07b2cfe4c1fa04a2a076
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    camera_client: refactor Camera/ProCamera commonalities into BasicCamera
    
    Change-Id: Ie10a4094522d49683657665fe94ab0b7ccd280e9
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Camera: Add ProCamera private binder interface for an API2-light functionality
    
    Change-Id: I2af7a807c99df75ea659e6e6acc9c4fca6a56274
    Camera: Add unit test infrastructure for libcameraclient
    
    Change-Id: I957538663ae8332d26f3640c63a75efc79f4ac5c
    Camera: Add unit test infrastructure for libcameraclient
    
    Change-Id: I957538663ae8332d26f3640c63a75efc79f4ac5c
    CameraService: Log camera module name
    
    Explicitly logs camera module loaded.  This is useful on systems with
    multiple camera modules installed.  Also this make the camera service
    match audioflinger, which logs hardware module names as well.
    
    Change-Id: I280bf12df2d517f936916b8ba3cb662e671d0216
    CameraService: Log camera module name
    
    Explicitly logs camera module loaded.  This is useful on systems with
    multiple camera modules installed.  Also this make the camera service
    match audioflinger, which logs hardware module names as well.
    
    Change-Id: I280bf12df2d517f936916b8ba3cb662e671d0216
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Camera2: Always disconnect in the client destructor
    
    If Camera2Client failed to initialize, it would skip disconnect step,
    and thus the camera would be forever marked as busy. By always calling
    disconnect it will always call free.
    
    It also adds a new guarantee that Client::disconnect is idempotent
    
    Bug: 7298182
    Change-Id: Ic9876f1665b7d9b3c0da692880f63f165e3f4fa5
    Camera2: Always disconnect in the client destructor
    
    If Camera2Client failed to initialize, it would skip disconnect step,
    and thus the camera would be forever marked as busy. By always calling
    disconnect it will always call free.
    
    It also adds a new guarantee that Client::disconnect is idempotent
    
    Bug: 7298182
    Change-Id: Ic9876f1665b7d9b3c0da692880f63f165e3f4fa5
    Camera2: Don't promote weak IBinder ptrs to strong ones
    
    The Binder driver does not support promoting weak pointers into strong
    pointers. Occassionally the system would lock up when trying to do this
    (when closing the camera app).
    
    Bug: 7289040
    Change-Id: I8bc0b5c48616bf0b7f4eed1878ad4994ee635871
    Camera2: Don't promote weak IBinder ptrs to strong ones
    
    The Binder driver does not support promoting weak pointers into strong
    pointers. Occassionally the system would lock up when trying to do this
    (when closing the camera app).
    
    Bug: 7289040
    Change-Id: I8bc0b5c48616bf0b7f4eed1878ad4994ee635871
    Camera2: Don't promote weak IBinder ptrs to strong ones
    
    The Binder driver does not support promoting weak pointers into strong
    pointers. Occassionally the system would lock up when trying to do this
    (when closing the camera app).
    
    Bug: 7289040
    Change-Id: I8bc0b5c48616bf0b7f4eed1878ad4994ee635871
    Camera2: Don't promote weak IBinder ptrs to strong ones
    
    The Binder driver does not support promoting weak pointers into strong
    pointers. Occassionally the system would lock up when trying to do this
    (when closing the camera app).
    
    Bug: 7289040
    Change-Id: I8bc0b5c48616bf0b7f4eed1878ad4994ee635871
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera2: Improve formatting of debugging dump
    
    Bug: 6243944
    Change-Id: Id8730357f3adcd96923132f9f702e296e0dfd357
    CameraService: Add more information to service dump.
    
    Add dumpsys information even when there's no active client. Including:
    - Camera module version / name / author
    - Number of camera devices
    - Static information for each device
    
    Change-Id: Ib97e325f6be5f989b342d24f1ae17aa9e796f8ed
    Shutter sound is heard at the end of the recorded video
    
    On fast hardware, which is more common, the shutter sound is
    played and recorded before video recording is stopped.
    
    Before we call play shutter sound before calling stop recording.
    With this fix we call play shutter sound after calling stop recording.
    
    Change-Id: I06a3e65fd2700f1d2457fea5ff0f64500eac436f
    Add basic Camera2Client dump, minor fixes to CameraService dump.
    
    Bug: 6243944
    Change-Id: I52caaa6146050c38976768e99b0eeea1d13a3f51
    Camera service: Initialization for camera2 clients and devices
    
    - Refactor initialization code to hide device type from CameraService
    - Add metadata queue class to Camera2Device
    - Initialization of Camera2Device, Camera2Client
    - Conversion from HAL2 device static metadata to camera API
      parameters.
    
    Bug: 6243944
    Change-Id: I524145b45438e906d8493dae202704ce8f090aeb
    DO NOT MERGE: Minimal fix for takePicture/previewCallback deadlock
    
    - Caused by already held lock in camera service
    
    - Introduce one more lock, mICameraLock, to control access to camera
      client through ICamera binder interface.
    
    - mLock is released before calling HAL takePicture, allowing HAL
      callbacks to access camera client during takePicture processing.
    
    Bug: 5804701
    Change-Id: Ibcef4857a2c844c964afefa70f9cdccdd0a55fd0
    Camera service: Add skeleton support for camera2 devices.
    
    - Add Camera2Client, which maps the current android.hardware.Camera
      API to the new camera2 semantics
    - Add Camera2Device, a C++ wrapper for the HAL camera 2 device
    
    No functionality besides create/destroy; all client methods return
    error or null.
    
    Bug: 6243944
    Change-Id: I6bd5136fa1efd8279b8cd2d9847d9b0bb2862294
    Break out CameraClient from CameraService.
    
    To allow for different low-level implementations of the current camera
    API, the Client class inside CameraService has to be inheritable. This
    change breaks it up into the common section accessed by the camera
    service, and the full implementation for camera device HAL version 1.
    
    The full implementation is moved out to CameraClient.h/.cpp.
    
    There are no functionality changes, just code reorganization.
    
    Bug: 6243944
    Change-Id: I8a79b31a3ae3617198dc6bb5576a9f2e2d9c95de
    Remove new camera connect API.
    
    Applications are not resumed under the lock screen now.
    This API is not needed anymore.
    
    bug:5584464
    Change-Id: I115daf6b647348617ec0fc05b626878c945b9b29
    Fix deadlock in camera destruction after client app's crash
    
    * why deadlock happened: when an app (CTS camera test) crashes while using
      camera, its binder is closed and reference counter is decreased. If camera
      is inside callback, sp<Client> inside callback will hold the Client instance,
      and Client instance is destroyed when the callback ends as sp<Client> to hold
      it no longer exists. The destructor of Client instance tries to clean up
      camera H/W which tries to stop threads created by camera HAL including the
      thread context where the callback is running. This causes deadlock where the
      callback thread itself is waiting for itself to terminate.
      Note that the deadlock will not happen if camera callback is not active. In
      that case, closing of binder will force the destruction of Client instance,
      and the destruction happens in binder thread.
    
    * Fix: Forces Client descruction in binder thread
    - remove sp<Client> from callbacks to prevent destruction in callback context
    - add client lock to allow callback to use raw pointer safely. This prevents
      the destructor from deleting the instance while callback is using it.
    - add status change inside destructor with client lock to safely destroy Client
    
    Bug: 6214383
    Change-Id: Ic6d6396d4d95ce9e72a16ec2480ae65c100fe806
    Add a new camera open API that allows taking the ownership.
    
    The purpose is to let face unlock always get the camera
    successfully. What happened was the camera applications may
    have opened the camera in onResume under the lock screen.
    This API lets face unlock take the camera from the camera
    application. A new permission will be added, so other
    applicatoins won't be able to take the camera from the face
    unlock.
    
    bug:5584464
    
    Change-Id: Ib3d9dcbc2161815b68db42327dc01148453704c6
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)
    
    Change-Id: I26f76452ac49e2890b14d133c065493d8df0fb4a
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Switch camera sounds to always use the system enforced audio stream.
    
    Instead of picking between the music stream and the enforced audio
    stream, change the camera service to always play sounds through
    enforced system stream. Also update the currently-hidden CameraSound
    API to match.
    
    Bug: 5778365
    Change-Id: I3cc64b1d1ff567dbac8020a665d5b19846197ff3
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: Ib08fe86d23db91ee153e9f91a99a35c42b9208ea
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Add camera focus move callback.
    
    bug:5534973
    Change-Id: Iaadcb2738ad040f94849be30ee531326f6199431
    Fix 5487571: Make sure shutter sound is played when it's enforced
    
    Change-Id: I0c7adf452217b8308243836b40b1fba8f2029240
    Fix 5468644: Use the proper audio stream type to play sound.
    
    Change-Id: I80dd37da277b1810959a2dbdd852078b26f70cf5
    Add initialize method to CameraHardwareInterface
    
    Add intialize() method to CameraHardwareInterface so we can
    return a proper error value to CameraService if open of camera
    hardware module fails.
    
    b/5405235
    
    Change-Id: I09c627034ddd22a5753c5163392c4fcff301e0b9
    Signed-off-by: Tyler Luu <tluu@ti.com>
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Allow Camera.setDisplayOrientation to be called when preview is active.
    
    bug:5422679
    
    Change-Id: I4c936ab00428fc158b5947fe8f10b1028869bbdb
    Allow shutter/recording sound to be adjusted unless it's forced.
    
    Change-Id: I7080d5f50a87f92c8e9395d4cf8f927a6760fa70
    Add video snapshot camera parameter.
    
    The API is still hidden.
    
    bug:5187868
    
    Change-Id: I59e1b5774ca32be049723d1a0887faa90d8884bb
    Pass camera frame metadata from camera service to Java.
    
    bug:4460717
    Change-Id: I2fae6e1dfca6b8f3a5ee5716fc7817f5417bf657
    connect/disconnect is now called from our EGL wrapper
    
    the original connect/disconnect hooks are deprecated
    and replace by api_connect/api_disconnect. the original
    hooks are no no-ops.
    api_connect/api_disconnect is now only called from the
    android framework.
    
    Bug: 5057915
    Change-Id: I8ca64cd1acd6cabf915bf54689ec2e5f6dfa495a
    Add frame metadata parameter to camera data_callback.
    
    bug:4460717
    Change-Id: Ib47d7d7df20af8155a719f3dabefe030893bfebc
    Disconnect the native window in CameraService::Client::disconnect.
    
    bug:5048372
    Change-Id: I6886907a672ddf5580b988ca5bc13e3dc26d4385
    use SurfaceTexture new scaling mode in SF
    
    SF now obeys SurfaceTexture's scaling mode instead
    of inferring it from the buffer's size
    
    Change-Id: I4d50e9851abedd7e64bfcfc8af9eefb9fb668529
    CameraService: (dis)connect from preview windows
    
    This change makes CameraService connect and disconnect from preview
    windows (Surfaces and SurfaceTextures) that get set.
    
    Change-Id: I726971688367d5ce0d9aa90c44168037bce33deb
    Add framework support for camcorder zoom.
    
    The purpose of ICameraRecordingProxy and ICameraRecordingProxyListener is to
    allow applications using the camera during recording.
    
    Camera service allows only one client at a time. Since camcorder application
    needs to own the camera to do things like zoom, the media recorder cannot
    access the camera directly during recording. So ICameraRecordingProxy is a proxy
    of ICamera, which allows the media recorder to start/stop the recording and
    release recording frames. ICameraRecordingProxyListener is an interface that
    allows the recorder to receive video frames during recording.
    
    ICameraRecordingProxy
      startRecording()
      stopRecording()
      releaseRecordingFrame()
    
    ICameraRecordingProxyListener
      dataCallbackTimestamp()
    
    The camcorder app opens the camera and starts the preview. The app passes
    ICamera and ICameraRecordingProxy to the media recorder by
    MediaRecorder::setCamera(). The recorder uses ICamera to setup the camera in
    MediaRecorder::start(). After setup, the recorder disconnects from camera
    service. The recorder calls ICameraRecordingProxy::startRecording() and
    passes a ICameraRecordingProxyListener to the app. The app connects back to
    camera service and starts the recording. The app owns the camera and can do
    things like zoom. The media recorder receives the video frames from the
    listener and releases them by ICameraRecordingProxy::releaseRecordingFrame.
    The recorder calls ICameraRecordingProxy::stopRecording() to stop the
    recording.
    
    The call sequences are as follows:
    1. The app: Camera.unlock().
    2. The app: MediaRecorder.setCamera().
    3. Start recording
       (1) The app: MediaRecorder.start().
       (2) The recorder: ICamera.unlock() and ICamera.disconnect().
       (3) The recorder: ICameraRecordingProxy.startRecording().
       (4) The app: ICamera.reconnect().
       (5) The app: ICamera.startRecording().
    4. During recording
       (1) The recorder: receive frames from ICameraRecordingProxyListener.dataCallbackTimestamp()
       (2) The recorder: release frames by ICameraRecordingProxy.releaseRecordingFrame().
    5. Stop recording
       (1) The app: MediaRecorder.stop()
       (2) The recorder: ICameraRecordingProxy.stopRecording().
       (3) The app: ICamera.stopRecording().
    
    bug:2644213
    
    Change-Id: I15269397defc25cbbcae16abc071c8349c123122
    Allow camera to be disabled via Device Policy Manager
    
    bug:4185309
    
    Change-Id: I8be89d892b8f540fd05913c93f97b92346a0a282
    frameworks/base: switch CameraService to a HAL module
    
    This patch changes CameraService to load a camera HAL module, instead of
    linking directly against a library that implements the CameraHardwareInterface
    class.
    
    CameraHardwareInterface no longer defines the API to the camera HAL.  Instead,
    this is now in HAL header hardware/camera.h.  We keep CamerHardwareInterface as
    a class local to CameraService, which wraps around the new HAL calls.  In the
    future, we may remove this class entirely and have CameraService call the HAL
    methods directly.
    
    Change-Id: I5c61ac40078fc0b50bbac5881a556fe6c8837641
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    frameworks/base: include system/core header camera.h in Camera.h
    
    We define struct CameraInfo in this camera/Camera.h, even though an identical
    struct camera_info is defined in hardware/camera.h (but not in
    hardware/camera_defs.h).  We may not export struct definitions from the HAL
    into headers which may find their way into the NDK.
    
    This commit also renames FRAME_CALLBACK_FLAG_xxx to CAMERA_FRAME_CALLBACK_xxx.
    
    Change-Id: I3e2ddd01d61bf5371ff2fc1a397995e0f1ee11f8
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    audio/media: convert to using the audio HAL and new audio defs
    
    Change-Id: Ibc637918637329e4f2b62f4ac7781102fbc269f5
    Signed-off-by: Dima Zavin <dima@android.com>
    remove more unused references to ISurface
    
    Change-Id: I2201f1ca2bb8f203a081d94a0134f798778dfbef
    frameworks/base: some camera-interface cleanup
    
    Methods getNumberOfVideoBuffers() and getVideoBuffer() as well as struct
    image_rect_struct are no longer used (instead, the necessary information is
    passed through ANativeWindow.)
    
    Change-Id: If4b11446fc9ccbde1f6b45bc70c0d0b8e54376eb
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Application-managed callback buffer support for raw image
    
    bug - 3292153
    
    Change-Id: I9789f7c5cde3a3889d7375e881181e9152d95fc2
    Add camera service support for SurfaceTexture.
    
    This change enables the use of a SurfaceTexture in place of a Surface as
    the destination of camera preview frames.
    
    Change-Id: Ic70d404c8fe261e9d5da6f1de93d6babb5b191cb
    We requires camera hal's implementation should not track the ref count of any outstanding video frames and ignore
    releaseRecordingFrame() call after it receives disableMsgType(CAMERA_MSG_VIDEO_FRAME).
    
    Change-Id: I2ecb9b3b11dab6bf868ccf8effda1b8df5bcde3c
    remove support for PUSH_BUFFER surfaces and overlays
    
    the same functionality is now supported through
    the h/w composer HAL, and YUV support in the GPU.
    
    Change-Id: I8146605449954b8e8fd7f78810b7d873c2d8f5bf
    Don't drop video frames but to release them.
    
    bug - 3259009
    
    Change-Id: Ib7634f10a7fe7b7ce7014b79b07957d194bae1a7
    Revert "Temporary workaround for issue 3187563"
    
    This reverts commit 065299b58d1c00cd24e442fa192561decf7b1fec.
    
    The work around for issue 3187563 is not needed any more since the new kernel
    DMA driver implementation (commit 7953250be7c9a1c3417e21b20032b571d495d218)
    fixes the root cause.
    
    Change-Id: Ibaac2826b63c8e5825ae2e5cab2fb2f0e51ab7b4
    Temporary workaround for issue 3187563
    
    The audio HAL does not always handle properly simultaneous input and output stream
    state changes. This happens in particular when starting video record because output
    stream starts and stops while input is active.
    
    Temporary disable the video record jingle the time the audio HAL issues are solved.
    
    Change-Id: I3b923d81af543a335deae9e22d7f396bb5791d91
    Mirror the camera preview if the camera is front-facing.
    
    bug:3095272
    Change-Id: Ib1c1d1edc06a33e9d4d2dcb42bc1dd2c25b1310c
    Remove the FLIP_H/ROT_90 workaround from CameraService.do not merge
    
    Now overlay does flip before rotation.
    bug:3114236
    Change-Id: I1780e56154566435a0ceeb2f101de7ed0a0613cb
    Mirror the preview for front-facing cameras. do not merge
    
    Now overlay does ROT_90 before FLIP_V or FLIP_H. It should be FLIP_V
    or FLIP_H first. The formula should be changed after overlay is fixed.
    
    bug:3059865
    Change-Id: Ie4366bf7f1fcac7383e8dfc74b1b865997bbbcc6
    Camera framework change required for 0-memcpy recording
    
    bug - 3042125
    
    Change-Id: I46eb7a10b5394086b353fd73e4503beceeed76f1
    Fix camera display orientation.
    
    bug:3036262
    Change-Id: I6fc3dc381fcfaceba09fd5bd14afb85045b3d676
    The old overlay should be destroyed if orientation changes.
    
    Previously the orientation was wrong after suspend and resume.
    When the camera app is resumed behide the lock screen, it
    orinteation is portrait. When users slide to unlock the screen,
    surfaceChanged is called and the orientation is landscape.
    The camera app stops the preview, sets the display orientation,
    and starts the preview. Overlay should be destroyed if the
    orientation has changed.
    
    bug:3031640
    Change-Id: I38b527f9ea78c91b538463292152c023383b4695
    Added command type to play recording sound.
    
    Added CAMERA_CMD_PLAY_RECORDING_SOUND command type to play recording
    sound through sendCommand. This is currently needed by time lapse
    recording using still mode capture, which disables the shutter sound
    but needs to play the recording sound.
    
    Change-Id: I376aa40f45b6064fd862abc065456b06fc338020
    Adding enable/disable option for sendCommand()
    
    - Added enum CAMERA_CMD_ENABLE_SHUTTER_SOUND which corresponds to
      command type for enabling/disabling shutter sound.
    - The implementation checks if it is legal to disable shutter sound.
      If it is, then any process can disable the sound. If not, then only
      the mediaserver process is allowed to do this. Currently time lapse
      capture needs this functionality to disable shutter sound when still
      mode is used to capture time lapse video.
    
    Change-Id: Id147a3bcc6a345c2c6a6d52bf98fd8292386bb19
    Only enable CAMERA_MSG_PREVIEW_FRAME when necessary.
    
    Now camera driver uses ANativeWindow for display.
    CameraService should not request preview callback from
    camera hardware if applications have not requested it.
    
    bug:2951018
    Change-Id: I85f74ea4a61104feca018867bc9d6dfe3a9479f5
    Remove setPreviewDisplay in CameraService::Client::~Client().
    
    mSurface is released in destructor and setPreviewWindow(0) is
    called in Client::disconnect(). setPreviewDisplay is not needed
    in destructor.
    
    bug:2964479
    Change-Id: I329901659a2af407816c34e02f37143b28183a89
    Change the framework to use the new camera preview path.
    
    This change makes the camera HAL interface take an ANativeWindow interface from
    which all the camera preview buffers will be allocated.  The framework code
    running in application processes now passes a Surface object rather than an
    ISurface to the camera server via Binder when setting the preview surface.  The
    camera server then forwards that Surface object (which implements the
    ANativeWindow interface) to the camera HAL, which uses it to communicate with
    SurfaceFlinger to allocate the camera preview buffers.
    
    Change-Id: Ie438f721559cd7de5e4f848a26d96360dda07b5f
    Handle the camera open failure better.
    
    Check if camera hardware is NULL to avoid mediaserver crash.
    
    Change-Id: Ibde0251f30bdb6b36a5d5380222d7be25ec9449c
    fix inaccurate copyrights
    
    Change-Id: I33b0f68f2da34ca4728211d83159cf32a127f6dd
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    added BinderService<> template to help creating native binder services
    
    Change-Id: Id980899d2647b56479f8a27c89eaa949f9209dfe
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    Camera2/3: Add more tracing for API1
    
    - AF state
    - Async autofocus completion
    - Async takePicture completion
    - Stages of takePicture
    
    Bug: 10570497
    Change-Id: Ida9fedd81aa4ee3ae3fb8dfada858a3bc3c213a3
    Camera1: Set preview to be asynchronous, and remove dead code
    
    - Use the controlledByApp flag to make sure application-bound
      preview buffer queue is asynchronous as before
    - Remove setPreviewDisplay in service, since it is no longer in
      the binder interface
    - Rename setPreviewTexture to setPreviewTarget, to make it clear it's
      the only game in town now. Rename only on the binder level and service
      for now.
    
    Bug: 10312644
    Change-Id: Icd33a462022f9729a63dc65c69b755cb7969857e
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    camera3: Fix recording failure when switching resolutions while preview on
    
    Bug: 9069574
    Change-Id: Ife2ae5467f799dbe37e66714b3a6c9a51e1fe328
    Camera: Pause preview when needing to delete jpeg/zsl streams
    
    Bug: 8876221
    Change-Id: Idf9490a48462fa44d49c4ebe99425c3149ae6378
    Camera: Pause preview when needing to delete jpeg/zsl streams
    
    Bug: 8876221
    Change-Id: Idf9490a48462fa44d49c4ebe99425c3149ae6378
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera: Add preview callback surface support
    
    - Add call to set a preview callback surface
    - Implement support for HAL2/3 devices
    - Still need HAL1 implementation
    
    Change-Id: I0dc0bd72e43d871aa487858d1665c1efca633ffe
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera2: Refactor preview/recording management to separate class.
    
    Untangle preview/recording management from main class to simplify
    callpaths; in preparation for fixing several HAL/app interactions
    bugs.
    
    Bug: 7172543
    Bug: 7159577
    Bug: 7107220
    Change-Id: Iab5503f66b35d88a1524111536a484c9e33fd934
    Camera2: Refactor preview/recording management to separate class.
    
    Untangle preview/recording management from main class to simplify
    callpaths; in preparation for fixing several HAL/app interactions
    bugs.
    
    Bug: 7172543
    Bug: 7159577
    Bug: 7107220
    Change-Id: Iab5503f66b35d88a1524111536a484c9e33fd934
    Camera2: Use the recordingHint parameter.
    
    Use recordingHint to create recording and still capture streams up
    front, and to use the recording template when doing preview.
    
    Bug: 6243944
    
    Change-Id: Ifeb624794849f734784b53a1a10ff2bfe8f1a357
    Camera2: Use the recordingHint parameter.
    
    Use recordingHint to create recording and still capture streams up
    front, and to use the recording template when doing preview.
    
    Bug: 6243944
    
    Change-Id: Ifeb624794849f734784b53a1a10ff2bfe8f1a357
    Camera2: Play shutter and recording sounds.
    
    Bug: 6987540
    
    Change-Id: Icd441a757c4b68fc4988b3bfbef428adb8d1ba28
    Camera2: Play shutter and recording sounds.
    
    Bug: 6987540
    
    Change-Id: Icd441a757c4b68fc4988b3bfbef428adb8d1ba28
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Move preview callback processing to its own thread.
    
    To reduce delays for HAL callbacks, manage preview callbacks in their
    own thread.
    
    Bug: 6243944
    Change-Id: I7bef56949ac889ffce4e031bf40291a771a46f3e
    Camera2: Move preview callback processing to its own thread.
    
    To reduce delays for HAL callbacks, manage preview callbacks in their
    own thread.
    
    Bug: 6243944
    Change-Id: I7bef56949ac889ffce4e031bf40291a771a46f3e
    Camera2: Move still capture processing to separate thread.
    
    To avoid stalling HAL when it queues up new buffers for still capture,
    process still captures in a separate thread. Also move Camera2Heap to
    its own class so it can be used by the CaptureProcessor.
    
    Bug: 6243944
    Change-Id: Id38e2a52367c0985812fcd4fd9af3ef90beef43f
    Camera2: Move still capture processing to separate thread.
    
    To avoid stalling HAL when it queues up new buffers for still capture,
    process still captures in a separate thread. Also move Camera2Heap to
    its own class so it can be used by the CaptureProcessor.
    
    Bug: 6243944
    Change-Id: Id38e2a52367c0985812fcd4fd9af3ef90beef43f
    Camera2: Factor out FrameProcessor.
    
    Move FrameProcessor to its own file, add necessary interfaces to
    Camera2Client.
    
    Bug: 6243944
    Change-Id: I8d1b8280a65d2822461ebe6b6c9de17992b34276
    Camera2: Factor out Camera2Client::Parameters
    
    Move the parameter structure and the various utility methods using it
    to its own class. Rename LockedParameters to SharedParameters to match
    the Mutex naming convention.
    
    Also move CameraMetadata to camera2 directory for organization.
    
    No functional changes.
    
    Bug: 6243944
    Change-Id: Ie60b535936ecfda9bf23361d52604abf515c83d0
    Camera2: Fix metering/focusing region coordinates, minor bugs
    
    - Use active pixel array-based coordinates instead of the normalized
      camera API coordinates for ae/awb/af regions
    - Fix calculation of UV stride for YV12 format
    
    Bug: 6243944
    Change-Id: I80cbd989858b0a3cb75c6f536c145e16e44fdb25
    Camera2: Move frame processing to its own thread.
    
    To avoid blocking the HAL on possibly long-running binder calls,
    move frame receiption and processing to its own thread.
    
    Bug: 6243944
    Change-Id: I6385be4410b2f68e2331755027afc10c342187cf
    Camera2: Use CameraMetadata wrapper class.
    
    Wrap the use of the camera_metadata library inside a CameraMetadata
    class to avoid memory leaks, improve code clarity, and increase type
    safety.
    
    Bug: 6243944
    Change-Id: I90ca592b5875e27e4c58ea1ca680582dc3c3b56a
    Camera2: Replace MediaConsumer with BufferItemConsumer.
    
    Get rid of MediaConsumer, which was largely duplicated code, and
    replace it with the simpler BufferItemConsumer.
    
    Bug: 6243944
    Change-Id: I242d80c5fe39f2ee581ec8bb46f362997d994b0a
    Camera2: Add support for preview callbacks
    
    - Move camera overall state enum to be part of parameters
    - No longer use ICameraLock to guard access to overall state enum
    - Add callback flag management
    - Add callback stream and management
    
    Bug: 6243944
    
    Change-Id: Ideb3dc523a23c05e440e429ebf838b1900a96573
    Camera2: Skeleton for output frame processing, plus face detect
    
    - Plumbing for processing output metadata frames from the HAL
    - Support for passing face detection metadata from said frames
      to the application.
    - Switch calls on ICameraClient interface to use separate mutex to
      avoid deadlock scenarios with messages being communicated from the
      HAL to the camera user while calls from the user to the service are
      active.
    
    Bug: 6243944
    
    Change-Id: Id4cf821d9c5c3c0069be4c0f669874b6ff0d1ecd
    Camera2: Add trigger support, and implement autofocus
    
    - Add skeletons for all triggering actions into Camera2Device
    - Add support for AF triggers to HAL
    - Add support for AF notifications from HAL
    
    Bug: 6243944
    Change-Id: I21025440849ae41f7083e1dcb72c99f8e5b2d5f7
    Fix a deadlock in commandSetVideoBufferCountL()
    
    o The lock to be acquired in recordingEnabled() has aleady been acquired in sendCommand()
      before the call to commandSetVideoBufferCountL().
    
    Change-Id: I664d51ef449c9eb3576d5d56f73f29c98444ff3f
    Fix a deadlock in commandSetVideoBufferCountL()
    
    o The lock to be acquired in recordingEnabled() has aleady been acquired in sendCommand()
      before the call to commandSetVideoBufferCountL().
    
    Change-Id: I664d51ef449c9eb3576d5d56f73f29c98444ff3f
    Camera2: Add notification handling skeleton.
    
    Wire up skeleton methods for handling all currently defined
    notifications.
    
    Bug: 6243944
    Change-Id: I84b3f60111416ba6fbcdb086f1310225142e2b70
    Camera2: Break out individual commands
    
    - List all commands that need implementing in sendCommand
    - Write skeleton methods for each one
    - Implements playRecordingSound command
    - Partially implements enableShutterSound command
    
    Bug: 6243944
    Change-Id: I7866df75adca09483f407d3a4f630e847dbc7721
    Dynamically configure the number of video buffers used by camera source, if supported
    
    o related-to-bug: 6920805
    
    Change-Id: I413bb50954cc84e32ed40bcb713842dc7b58e2b6
    Camera2: Check PIDs to ensure camera exclusive access.
    
    Bug: 6243944
    Change-Id: I4b36af2c92b7266a4aa896a2b048c56b6406cb9a
    Camera2: Improve threading safety
    
    Merge mutex lock for accessing internal parameters with the parameter
    structure, forcing a lock to be held before the parameters can be accessed.
    
    Bug: 6243944
    Change-Id: I86e44f395de0d80ff7c3ff3530f25b60015512d2
    Camera2: Use more buffers for video encoding.
    
    To avoid starvation, set the number of simultaneously available buffers
    to the encoder to 8.
    
    Bug: 6243944
    Change-Id: I6d0e9f3c0426d62d374c0ae0d427bf5189141adf
    Camera2: Revamp recording support to allow opaque formats.
    
    - Avoid memcpy of buffer data by using metadata mode
    - Temporarily add MediaConsumer BufferQueue class
    
    Bug: 6243944
    Change-Id: I7a8c4222b7dbd14f1b1d86fda06d38eb640e87c1
    Camera2: Add recording support
    
    - Support startRecording/stopRecording
    - Support lock/unlock/connect
    - Some rearrangement of class definitions for clarity/consistency
    
    Bug: 6243944
    
    Change-Id: I00c600a798572d2f69bb3f2bab3d79e4bd9a91e5
    Camera2: Handle preview orientation changes.
    
    - Process sendCommand(CAMERA_CMD_SET_DISPLAY_ORIENTATION)
    
    Bug: 6243944
    Change-Id: I92d3bb13312d475703325230487d660a1cb7e0e5
    Camera2: Connect camera parameters to HAL request entries.
    
    - All fields in Camera.Parameters are mapped to HAL2 entries, and
      communicated to the HAL.
    
    - Preview stream properly updated on parameter changes
    
    - Slight code rearrangment for improved clarity
    
    Bug: 6243944
    Change-Id: I2a1db5c148809a62ba3524fb659dd6065affff8e
    Camera2: Minor parameter restructuring
    
    Will make it easier to update HAL-level parameters.
    
    Bug: 6243944
    Change-Id: I3acac3c532de440d46755ce3e1d819ad5ed2e106
    Camera2: Improve error checking and debug logs.
    
    Bug: 6243944
    Change-Id: Ie61d89b733af7d1f653443bf64b767456127a455
    Camera2: Still image support
    
    - Add stream / request creation for still image capture
    - Add takePicture call
    - Add callback handler
    - Fix shutdown bugs (wait until requests have drained)
    
    Bug: 6243944
    
    Change-Id: Id73eb7090e61b40b90348d1eb262f641ea5f3229
    Camera2: Add setParameters call
    
    - Validate new parameters and transfer to internal parameters
    
    - Add several utility functions to convert between CameraParameter
      strings and camera2/internal parameter enums
    
    Bug: 6243944
    Change-Id: I323798dbfa028066f4963a6357766a781dde7cb6
    Camera2: Add basic concurrency guards.
    
    - Serialize access through ICamera interface
    - Serialize access to internal parameter structure
    
    Bug: 6243944
    Change-Id: I82c9811c1d059b2bca5cca7e3d73890120dbbe59
    Camera2: Add internal parameter state to dump.
    
    Bug: 6243944
    Change-Id: Id02943001ef92a9c5717b295eb4af1a18669b08b
    Camera2: Use new param structure, improve static camera info queries
    
    - Stop using CameraParameters for internal parameter storage, use a
      straightforward structure instead.
    
    - Improve querying for camera static characteristics for creating
      defaults for API-facing CameraParameters.
    
    Bug: 6243944
    
    Change-Id: I965cdca7b242ef10ac1be931ebe7c186f997bb63
    Camera service: Minimally functional preview for camera 2 devices.
    
    - Camera app starts up
    - Basic preview operation with defaults
    - Shutdown sequence is very minimal
    
    Bug: 6243944
    
    Change-Id: I67673b7c1fc08956d218d99f9171e74a7a82bf07
    Camera service: Initialization for camera2 clients and devices
    
    - Refactor initialization code to hide device type from CameraService
    - Add metadata queue class to Camera2Device
    - Initialization of Camera2Device, Camera2Client
    - Conversion from HAL2 device static metadata to camera API
      parameters.
    
    Bug: 6243944
    Change-Id: I524145b45438e906d8493dae202704ce8f090aeb
    Camera service: Add skeleton support for camera2 devices.
    
    - Add Camera2Client, which maps the current android.hardware.Camera
      API to the new camera2 semantics
    - Add Camera2Device, a C++ wrapper for the HAL camera 2 device
    
    No functionality besides create/destroy; all client methods return
    error or null.
    
    Bug: 6243944
    Change-Id: I6bd5136fa1efd8279b8cd2d9847d9b0bb2862294
    Camera1: Set preview to be asynchronous, and remove dead code
    
    - Use the controlledByApp flag to make sure application-bound
      preview buffer queue is asynchronous as before
    - Remove setPreviewDisplay in service, since it is no longer in
      the binder interface
    - Rename setPreviewTexture to setPreviewTarget, to make it clear it's
      the only game in town now. Rename only on the binder level and service
      for now.
    
    Bug: 10312644
    Change-Id: Icd33a462022f9729a63dc65c69b755cb7969857e
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera: Add preview callback surface support
    
    - Add call to set a preview callback surface
    - Implement support for HAL2/3 devices
    - Still need HAL1 implementation
    
    Change-Id: I0dc0bd72e43d871aa487858d1665c1efca633ffe
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera service: Initialization for camera2 clients and devices
    
    - Refactor initialization code to hide device type from CameraService
    - Add metadata queue class to Camera2Device
    - Initialization of Camera2Device, Camera2Client
    - Conversion from HAL2 device static metadata to camera API
      parameters.
    
    Bug: 6243944
    Change-Id: I524145b45438e906d8493dae202704ce8f090aeb
    Break out CameraClient from CameraService.
    
    To allow for different low-level implementations of the current camera
    API, the Client class inside CameraService has to be inheritable. This
    change breaks it up into the common section accessed by the camera
    service, and the full implementation for camera device HAL version 1.
    
    The full implementation is moved out to CameraClient.h/.cpp.
    
    There are no functionality changes, just code reorganization.
    
    Bug: 6243944
    Change-Id: I8a79b31a3ae3617198dc6bb5576a9f2e2d9c95de
    Camera1: Set preview to be asynchronous, and remove dead code
    
    - Use the controlledByApp flag to make sure application-bound
      preview buffer queue is asynchronous as before
    - Remove setPreviewDisplay in service, since it is no longer in
      the binder interface
    - Rename setPreviewTexture to setPreviewTarget, to make it clear it's
      the only game in town now. Rename only on the binder level and service
      for now.
    
    Bug: 10312644
    Change-Id: Icd33a462022f9729a63dc65c69b755cb7969857e
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera: Add preview callback surface support
    
    - Add call to set a preview callback surface
    - Implement support for HAL2/3 devices
    - Still need HAL1 implementation
    
    Change-Id: I0dc0bd72e43d871aa487858d1665c1efca633ffe
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    replace getISurfaceTexture by getIGraphicBufferProducer
    
    Change-Id: I723a3863558126f2635a544a39bb3ec88d499c60
    replace getISurfaceTexture by getIGraphicBufferProducer
    
    Change-Id: I723a3863558126f2635a544a39bb3ec88d499c60
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera: Limit valid caller PIDs for camera clients.
    
    Narrow down on PID checks to avoid cases where service can access the
    camera even though it shouldn't be able to, per API semantics.
    
    Bug: 6970469
    
    Change-Id: Ic468a31949c28ef978b6ed48a70e4601c7ced684
    Camera: Limit valid caller PIDs for camera clients.
    
    Narrow down on PID checks to avoid cases where service can access the
    camera even though it shouldn't be able to, per API semantics.
    
    Bug: 6970469
    
    Change-Id: Ic468a31949c28ef978b6ed48a70e4601c7ced684
    Camera: Clear Hardware device pointer when initialization fails
    
    When disconnecting, don't try to call device functions if the initialization
    fails since this can lead to internal HAL segfaults.
    
    Bug: 7317107
    Change-Id: Ib65db7eb6556ee10d844959934b1bfd7bb08d0ff
    Camera: Clear Hardware device pointer when initialization fails
    
    When disconnecting, don't try to call device functions if the initialization
    fails since this can lead to internal HAL segfaults.
    
    Bug: 7317107
    Change-Id: Ib65db7eb6556ee10d844959934b1bfd7bb08d0ff
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera1: Fix enable shutter sound command error handling.
    
    Return the error codes from calls to enableShutterSound to the caller,
    and don't call the HAL with the enable shutter sound command.
    
    Change-Id: Ibe4943bd1cd0fcd1832fd904f12dd2f78fec06a5
    Camera1: Fix enable shutter sound command error handling.
    
    Return the error codes from calls to enableShutterSound to the caller,
    and don't call the HAL with the enable shutter sound command.
    
    Change-Id: Ibe4943bd1cd0fcd1832fd904f12dd2f78fec06a5
    Dynamically configure the number of video buffers used by camera source, if supported
    
    o related-to-bug: 6920805
    
    Change-Id: I413bb50954cc84e32ed40bcb713842dc7b58e2b6
    Shutter sound is heard at the end of the recorded video
    
    On fast hardware, which is more common, the shutter sound is
    played and recorded before video recording is stopped.
    
    Before we call play shutter sound before calling stop recording.
    With this fix we call play shutter sound after calling stop recording.
    
    Change-Id: I06a3e65fd2700f1d2457fea5ff0f64500eac436f
    Shutter sound is heard at the end of the recorded video
    
    On fast hardware, which is more common, the shutter sound is
    played and recorded before video recording is stopped.
    
    Before we call play shutter sound before calling stop recording.
    With this fix we call play shutter sound after calling stop recording.
    
    Change-Id: I06a3e65fd2700f1d2457fea5ff0f64500eac436f
    Camera service: Initialization for camera2 clients and devices
    
    - Refactor initialization code to hide device type from CameraService
    - Add metadata queue class to Camera2Device
    - Initialization of Camera2Device, Camera2Client
    - Conversion from HAL2 device static metadata to camera API
      parameters.
    
    Bug: 6243944
    Change-Id: I524145b45438e906d8493dae202704ce8f090aeb
    Break out CameraClient from CameraService.
    
    To allow for different low-level implementations of the current camera
    API, the Client class inside CameraService has to be inheritable. This
    change breaks it up into the common section accessed by the camera
    service, and the full implementation for camera device HAL version 1.
    
    The full implementation is moved out to CameraClient.h/.cpp.
    
    There are no functionality changes, just code reorganization.
    
    Bug: 6243944
    Change-Id: I8a79b31a3ae3617198dc6bb5576a9f2e2d9c95de
    Remove new camera connect API.
    
    Applications are not resumed under the lock screen now.
    This API is not needed anymore.
    
    bug:5584464
    Change-Id: I115daf6b647348617ec0fc05b626878c945b9b29
    Fix deadlock in camera destruction after client app's crash
    
    * why deadlock happened: when an app (CTS camera test) crashes while using
      camera, its binder is closed and reference counter is decreased. If camera
      is inside callback, sp<Client> inside callback will hold the Client instance,
      and Client instance is destroyed when the callback ends as sp<Client> to hold
      it no longer exists. The destructor of Client instance tries to clean up
      camera H/W which tries to stop threads created by camera HAL including the
      thread context where the callback is running. This causes deadlock where the
      callback thread itself is waiting for itself to terminate.
      Note that the deadlock will not happen if camera callback is not active. In
      that case, closing of binder will force the destruction of Client instance,
      and the destruction happens in binder thread.
    
    * Fix: Forces Client descruction in binder thread
    - remove sp<Client> from callbacks to prevent destruction in callback context
    - add client lock to allow callback to use raw pointer safely. This prevents
      the destructor from deleting the instance while callback is using it.
    - add status change inside destructor with client lock to safely destroy Client
    
    Bug: 6214383
    Change-Id: Ic6d6396d4d95ce9e72a16ec2480ae65c100fe806
    Add a new camera open API that allows taking the ownership.
    
    The purpose is to let face unlock always get the camera
    successfully. What happened was the camera applications may
    have opened the camera in onResume under the lock screen.
    This API lets face unlock take the camera from the camera
    application. A new permission will be added, so other
    applicatoins won't be able to take the camera from the face
    unlock.
    
    bug:5584464
    
    Change-Id: Ib3d9dcbc2161815b68db42327dc01148453704c6
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)
    
    Change-Id: I26f76452ac49e2890b14d133c065493d8df0fb4a
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Switch camera sounds to always use the system enforced audio stream.
    
    Instead of picking between the music stream and the enforced audio
    stream, change the camera service to always play sounds through
    enforced system stream. Also update the currently-hidden CameraSound
    API to match.
    
    Bug: 5778365
    Change-Id: I3cc64b1d1ff567dbac8020a665d5b19846197ff3
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: Ib08fe86d23db91ee153e9f91a99a35c42b9208ea
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Add camera focus move callback.
    
    bug:5534973
    Change-Id: Iaadcb2738ad040f94849be30ee531326f6199431
    Fix 5487571: Make sure shutter sound is played when it's enforced
    
    Change-Id: I0c7adf452217b8308243836b40b1fba8f2029240
    Fix 5468644: Use the proper audio stream type to play sound.
    
    Change-Id: I80dd37da277b1810959a2dbdd852078b26f70cf5
    Add initialize method to CameraHardwareInterface
    
    Add intialize() method to CameraHardwareInterface so we can
    return a proper error value to CameraService if open of camera
    hardware module fails.
    
    b/5405235
    
    Change-Id: I09c627034ddd22a5753c5163392c4fcff301e0b9
    Signed-off-by: Tyler Luu <tluu@ti.com>
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Allow Camera.setDisplayOrientation to be called when preview is active.
    
    bug:5422679
    
    Change-Id: I4c936ab00428fc158b5947fe8f10b1028869bbdb
    Allow shutter/recording sound to be adjusted unless it's forced.
    
    Change-Id: I7080d5f50a87f92c8e9395d4cf8f927a6760fa70
    Add video snapshot camera parameter.
    
    The API is still hidden.
    
    bug:5187868
    
    Change-Id: I59e1b5774ca32be049723d1a0887faa90d8884bb
    Pass camera frame metadata from camera service to Java.
    
    bug:4460717
    Change-Id: I2fae6e1dfca6b8f3a5ee5716fc7817f5417bf657
    connect/disconnect is now called from our EGL wrapper
    
    the original connect/disconnect hooks are deprecated
    and replace by api_connect/api_disconnect. the original
    hooks are no no-ops.
    api_connect/api_disconnect is now only called from the
    android framework.
    
    Bug: 5057915
    Change-Id: I8ca64cd1acd6cabf915bf54689ec2e5f6dfa495a
    Add frame metadata parameter to camera data_callback.
    
    bug:4460717
    Change-Id: Ib47d7d7df20af8155a719f3dabefe030893bfebc
    Disconnect the native window in CameraService::Client::disconnect.
    
    bug:5048372
    Change-Id: I6886907a672ddf5580b988ca5bc13e3dc26d4385
    use SurfaceTexture new scaling mode in SF
    
    SF now obeys SurfaceTexture's scaling mode instead
    of inferring it from the buffer's size
    
    Change-Id: I4d50e9851abedd7e64bfcfc8af9eefb9fb668529
    CameraService: (dis)connect from preview windows
    
    This change makes CameraService connect and disconnect from preview
    windows (Surfaces and SurfaceTextures) that get set.
    
    Change-Id: I726971688367d5ce0d9aa90c44168037bce33deb
    Add framework support for camcorder zoom.
    
    The purpose of ICameraRecordingProxy and ICameraRecordingProxyListener is to
    allow applications using the camera during recording.
    
    Camera service allows only one client at a time. Since camcorder application
    needs to own the camera to do things like zoom, the media recorder cannot
    access the camera directly during recording. So ICameraRecordingProxy is a proxy
    of ICamera, which allows the media recorder to start/stop the recording and
    release recording frames. ICameraRecordingProxyListener is an interface that
    allows the recorder to receive video frames during recording.
    
    ICameraRecordingProxy
      startRecording()
      stopRecording()
      releaseRecordingFrame()
    
    ICameraRecordingProxyListener
      dataCallbackTimestamp()
    
    The camcorder app opens the camera and starts the preview. The app passes
    ICamera and ICameraRecordingProxy to the media recorder by
    MediaRecorder::setCamera(). The recorder uses ICamera to setup the camera in
    MediaRecorder::start(). After setup, the recorder disconnects from camera
    service. The recorder calls ICameraRecordingProxy::startRecording() and
    passes a ICameraRecordingProxyListener to the app. The app connects back to
    camera service and starts the recording. The app owns the camera and can do
    things like zoom. The media recorder receives the video frames from the
    listener and releases them by ICameraRecordingProxy::releaseRecordingFrame.
    The recorder calls ICameraRecordingProxy::stopRecording() to stop the
    recording.
    
    The call sequences are as follows:
    1. The app: Camera.unlock().
    2. The app: MediaRecorder.setCamera().
    3. Start recording
       (1) The app: MediaRecorder.start().
       (2) The recorder: ICamera.unlock() and ICamera.disconnect().
       (3) The recorder: ICameraRecordingProxy.startRecording().
       (4) The app: ICamera.reconnect().
       (5) The app: ICamera.startRecording().
    4. During recording
       (1) The recorder: receive frames from ICameraRecordingProxyListener.dataCallbackTimestamp()
       (2) The recorder: release frames by ICameraRecordingProxy.releaseRecordingFrame().
    5. Stop recording
       (1) The app: MediaRecorder.stop()
       (2) The recorder: ICameraRecordingProxy.stopRecording().
       (3) The app: ICamera.stopRecording().
    
    bug:2644213
    
    Change-Id: I15269397defc25cbbcae16abc071c8349c123122
    Allow camera to be disabled via Device Policy Manager
    
    bug:4185309
    
    Change-Id: I8be89d892b8f540fd05913c93f97b92346a0a282
    frameworks/base: switch CameraService to a HAL module
    
    This patch changes CameraService to load a camera HAL module, instead of
    linking directly against a library that implements the CameraHardwareInterface
    class.
    
    CameraHardwareInterface no longer defines the API to the camera HAL.  Instead,
    this is now in HAL header hardware/camera.h.  We keep CamerHardwareInterface as
    a class local to CameraService, which wraps around the new HAL calls.  In the
    future, we may remove this class entirely and have CameraService call the HAL
    methods directly.
    
    Change-Id: I5c61ac40078fc0b50bbac5881a556fe6c8837641
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    frameworks/base: include system/core header camera.h in Camera.h
    
    We define struct CameraInfo in this camera/Camera.h, even though an identical
    struct camera_info is defined in hardware/camera.h (but not in
    hardware/camera_defs.h).  We may not export struct definitions from the HAL
    into headers which may find their way into the NDK.
    
    This commit also renames FRAME_CALLBACK_FLAG_xxx to CAMERA_FRAME_CALLBACK_xxx.
    
    Change-Id: I3e2ddd01d61bf5371ff2fc1a397995e0f1ee11f8
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    audio/media: convert to using the audio HAL and new audio defs
    
    Change-Id: Ibc637918637329e4f2b62f4ac7781102fbc269f5
    Signed-off-by: Dima Zavin <dima@android.com>
    remove more unused references to ISurface
    
    Change-Id: I2201f1ca2bb8f203a081d94a0134f798778dfbef
    frameworks/base: some camera-interface cleanup
    
    Methods getNumberOfVideoBuffers() and getVideoBuffer() as well as struct
    image_rect_struct are no longer used (instead, the necessary information is
    passed through ANativeWindow.)
    
    Change-Id: If4b11446fc9ccbde1f6b45bc70c0d0b8e54376eb
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Application-managed callback buffer support for raw image
    
    bug - 3292153
    
    Change-Id: I9789f7c5cde3a3889d7375e881181e9152d95fc2
    Add camera service support for SurfaceTexture.
    
    This change enables the use of a SurfaceTexture in place of a Surface as
    the destination of camera preview frames.
    
    Change-Id: Ic70d404c8fe261e9d5da6f1de93d6babb5b191cb
    We requires camera hal's implementation should not track the ref count of any outstanding video frames and ignore
    releaseRecordingFrame() call after it receives disableMsgType(CAMERA_MSG_VIDEO_FRAME).
    
    Change-Id: I2ecb9b3b11dab6bf868ccf8effda1b8df5bcde3c
    remove support for PUSH_BUFFER surfaces and overlays
    
    the same functionality is now supported through
    the h/w composer HAL, and YUV support in the GPU.
    
    Change-Id: I8146605449954b8e8fd7f78810b7d873c2d8f5bf
    Don't drop video frames but to release them.
    
    bug - 3259009
    
    Change-Id: Ib7634f10a7fe7b7ce7014b79b07957d194bae1a7
    Revert "Temporary workaround for issue 3187563"
    
    This reverts commit 065299b58d1c00cd24e442fa192561decf7b1fec.
    
    The work around for issue 3187563 is not needed any more since the new kernel
    DMA driver implementation (commit 7953250be7c9a1c3417e21b20032b571d495d218)
    fixes the root cause.
    
    Change-Id: Ibaac2826b63c8e5825ae2e5cab2fb2f0e51ab7b4
    Temporary workaround for issue 3187563
    
    The audio HAL does not always handle properly simultaneous input and output stream
    state changes. This happens in particular when starting video record because output
    stream starts and stops while input is active.
    
    Temporary disable the video record jingle the time the audio HAL issues are solved.
    
    Change-Id: I3b923d81af543a335deae9e22d7f396bb5791d91
    Mirror the camera preview if the camera is front-facing.
    
    bug:3095272
    Change-Id: Ib1c1d1edc06a33e9d4d2dcb42bc1dd2c25b1310c
    Remove the FLIP_H/ROT_90 workaround from CameraService.do not merge
    
    Now overlay does flip before rotation.
    bug:3114236
    Change-Id: I1780e56154566435a0ceeb2f101de7ed0a0613cb
    Mirror the preview for front-facing cameras. do not merge
    
    Now overlay does ROT_90 before FLIP_V or FLIP_H. It should be FLIP_V
    or FLIP_H first. The formula should be changed after overlay is fixed.
    
    bug:3059865
    Change-Id: Ie4366bf7f1fcac7383e8dfc74b1b865997bbbcc6
    Camera framework change required for 0-memcpy recording
    
    bug - 3042125
    
    Change-Id: I46eb7a10b5394086b353fd73e4503beceeed76f1
    Fix camera display orientation.
    
    bug:3036262
    Change-Id: I6fc3dc381fcfaceba09fd5bd14afb85045b3d676
    The old overlay should be destroyed if orientation changes.
    
    Previously the orientation was wrong after suspend and resume.
    When the camera app is resumed behide the lock screen, it
    orinteation is portrait. When users slide to unlock the screen,
    surfaceChanged is called and the orientation is landscape.
    The camera app stops the preview, sets the display orientation,
    and starts the preview. Overlay should be destroyed if the
    orientation has changed.
    
    bug:3031640
    Change-Id: I38b527f9ea78c91b538463292152c023383b4695
    Added command type to play recording sound.
    
    Added CAMERA_CMD_PLAY_RECORDING_SOUND command type to play recording
    sound through sendCommand. This is currently needed by time lapse
    recording using still mode capture, which disables the shutter sound
    but needs to play the recording sound.
    
    Change-Id: I376aa40f45b6064fd862abc065456b06fc338020
    Adding enable/disable option for sendCommand()
    
    - Added enum CAMERA_CMD_ENABLE_SHUTTER_SOUND which corresponds to
      command type for enabling/disabling shutter sound.
    - The implementation checks if it is legal to disable shutter sound.
      If it is, then any process can disable the sound. If not, then only
      the mediaserver process is allowed to do this. Currently time lapse
      capture needs this functionality to disable shutter sound when still
      mode is used to capture time lapse video.
    
    Change-Id: Id147a3bcc6a345c2c6a6d52bf98fd8292386bb19
    Only enable CAMERA_MSG_PREVIEW_FRAME when necessary.
    
    Now camera driver uses ANativeWindow for display.
    CameraService should not request preview callback from
    camera hardware if applications have not requested it.
    
    bug:2951018
    Change-Id: I85f74ea4a61104feca018867bc9d6dfe3a9479f5
    Remove setPreviewDisplay in CameraService::Client::~Client().
    
    mSurface is released in destructor and setPreviewWindow(0) is
    called in Client::disconnect(). setPreviewDisplay is not needed
    in destructor.
    
    bug:2964479
    Change-Id: I329901659a2af407816c34e02f37143b28183a89
    Change the framework to use the new camera preview path.
    
    This change makes the camera HAL interface take an ANativeWindow interface from
    which all the camera preview buffers will be allocated.  The framework code
    running in application processes now passes a Surface object rather than an
    ISurface to the camera server via Binder when setting the preview surface.  The
    camera server then forwards that Surface object (which implements the
    ANativeWindow interface) to the camera HAL, which uses it to communicate with
    SurfaceFlinger to allocate the camera preview buffers.
    
    Change-Id: Ie438f721559cd7de5e4f848a26d96360dda07b5f
    Handle the camera open failure better.
    
    Check if camera hardware is NULL to avoid mediaserver crash.
    
    Change-Id: Ibde0251f30bdb6b36a5d5380222d7be25ec9449c
    fix inaccurate copyrights
    
    Change-Id: I33b0f68f2da34ca4728211d83159cf32a127f6dd
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    added BinderService<> template to help creating native binder services
    
    Change-Id: Id980899d2647b56479f8a27c89eaa949f9209dfe
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    Camera HAL3/API1: Add support for the partial result quirk.
    
    - Camera2Client:
     - Detect partial result quirk
    - Camera3Device:
     - Accumulate all partial results together
     - Fire off 3A-only result once all 3A states are available
    - FrameProcessorBase:
     - Filter out partials, don't send to listeners
    - FrameProcessor:
     - Skip face detect on partials
     - Make sure to only handle a 3A update for a given frame once
     - Trigger AF notifications when AF mode or trigger changes, to
       properly detect all AF transitions.
    
    Bug: 11115603
    Change-Id: Iea8aa73c568701562a46071f7ea100624251d10b
    Camera2/3: Add more tracing for API1
    
    - AF state
    - Async autofocus completion
    - Async takePicture completion
    - Stages of takePicture
    
    Bug: 10570497
    Change-Id: Ida9fedd81aa4ee3ae3fb8dfada858a3bc3c213a3
    Camera: Save 1 frame time for takePicture call
    
    Move the latest request signal call right before submitting request to HAL,
    which avoids unnecessary 1 frame time wait.
    
    Also fix request status constructor issue, and the log tag for Camera2Client.
    
    Bug: 10570497
    Change-Id: I0b1818658bee9983b117e49a5a00f1aab515c567
    Camera2/3: Support new PASSIVE_UNFOCUSED AF state
    
    Bug: 10860639
    Change-Id: I39be64abaf79b49b2d1f74e1c2ab2adf718ae701
    Camera2/3: For still captures, use widest FPS range available.
    
    Instead of using the application-selected preview FPS range for still
    captures, select the widest FPS range advertised by the device and use
    it for still captures instead, to give the HAL the widest range of exposure
    values to choose from possible.
    
    Bug: 10842868
    Change-Id: I0e24f5eb713a4f8df116cd5979a84390cc0974d7
    Camera2/3: For still captures, use widest FPS range available.
    
    Instead of using the application-selected preview FPS range for still
    captures, select the widest FPS range advertised by the device and use
    it for still captures instead, to give the HAL the widest range of exposure
    values to choose from possible.
    
    Bug: 10842868
    Change-Id: I0e24f5eb713a4f8df116cd5979a84390cc0974d7
    Camera: setCallBackWindow only if callback surface is used
    
    Calling setCallBackWindow without checking the previewCallbackSurface could make
    the stream to be deleted during callback stream operation, which is bad because
    the preview is still active and the delete fails.
    
    Bug: 10730496
    Change-Id: I8addac25e5aa7901bf200d730c749bee2c088090
    Camera: Correct stream id types
    
    Bug: 10604704
    Change-Id: I223ac5d200eb6439c08955fb7ad586592099fbae
    camera: Fix race condition between setParameters() and stopPreview().
    
    Bug: 10414772
    Change-Id: I928cb3935afb101da8a7931f88c27dccdb03b4a9
    Camera1: Set preview to be asynchronous, and remove dead code
    
    - Use the controlledByApp flag to make sure application-bound
      preview buffer queue is asynchronous as before
    - Remove setPreviewDisplay in service, since it is no longer in
      the binder interface
    - Rename setPreviewTexture to setPreviewTarget, to make it clear it's
      the only game in town now. Rename only on the binder level and service
      for now.
    
    Bug: 10312644
    Change-Id: Icd33a462022f9729a63dc65c69b755cb7969857e
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    camera2/3: set preview callback oneshot flag during still capture
    
    Preview callback oneshot flag need set when a still picture is being captured
    and preview callback oneshot is enabled, otherwise, the callback enabling status
    could be lost when preview is restarted after still catpure.
    
    Bug 9742091
    
    Change-Id: If9562369013e53727edfdd16f3d00d6a9392e70d
    Camera2/3: Don't allow recording and callbacks to coexist.
    
    - Tear down conflicting streams when necessary.
    
    - Shut down callbacks if recording starts
    
    - Do not allow callbacks to start if recording is active
    
    Per the current camera API, recording and preview callbacks cannot be
    active simultaneously. However, the framework did not explicitly
    disallow this, and in fact left the streams configured once they were
    created, even if switching between the two operational modes.
    
    In addition, no guards existed for trying to enable both recording and
    callbacks at the same time.
    
    Bug: 9423825
    
    Change-Id: I7d6e6114c2e14fcfb5299b4c72ad557895cbf4b8
    Make android.hardware.photography.Camera work on HAL3+ devices
    
    Bug: 9213377
    Change-Id: I5b2eeab28985f53dfcb7b8e3029930f5adcd74f5
    Camera2/3: Create JPEG stream unconditionally.
    
    Instead of creating the JPEG output stream only at first use,
    create it at time of preview start. This is important for reducing
    the first-capture latency on HAL3 devices, and for ZSL on them.
    
    Bug: 9339858
    Change-Id: I4296f706cfd151c47ef315149e87d01fe554aaa4
    Camera2/3: Move recording frame processing to its own thread.
    
    Due to new deadlock opportunities from HAL3 integration, recording
    frame processing needs to move out of the new frame handler into its
    own thread in StreamingProcessor.
    
    Bug: 9282913
    Change-Id: I8d2926f2de9d0d395eef3c328c65caebbdbd2827
    Camera2/3: Move recording frame processing to its own thread.
    
    Due to new deadlock opportunities from HAL3 integration, recording
    frame processing needs to move out of the new frame handler into its
    own thread in StreamingProcessor.
    
    Bug: 9282913
    Change-Id: I8d2926f2de9d0d395eef3c328c65caebbdbd2827
    Camera2/3: Don't trigger AF when in INFINITY focus mode.
    
    While the HAL should ignore it, it's faster to immediately respond
    with success.
    
    Also filter out cancel autofocus calls for FIXED/INFINITY focus.
    
    Bug: 9263856
    Change-Id: I637ec7c8b459d654ef11cb1142b959f2674224c5
    Camera2/3: Don't trigger AF when in INFINITY focus mode.
    
    While the HAL should ignore it, it's faster to immediately respond
    with success.
    
    Also filter out cancel autofocus calls for FIXED/INFINITY focus.
    
    Bug: 9263856
    Change-Id: I637ec7c8b459d654ef11cb1142b959f2674224c5
    camera3: Fix recording failure when switching resolutions while preview on
    
    Bug: 9069574
    Change-Id: Ife2ae5467f799dbe37e66714b3a6c9a51e1fe328
    Camera: Pause preview when needing to delete jpeg/zsl streams
    
    Bug: 8876221
    Change-Id: Idf9490a48462fa44d49c4ebe99425c3149ae6378
    Camera: Pause preview when needing to delete jpeg/zsl streams
    
    Bug: 8876221
    Change-Id: Idf9490a48462fa44d49c4ebe99425c3149ae6378
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera: Add preview callback surface support
    
    - Add call to set a preview callback surface
    - Implement support for HAL2/3 devices
    - Still need HAL1 implementation
    
    Change-Id: I0dc0bd72e43d871aa487858d1665c1efca633ffe
    Camera: Add output side to camera3 HAL device
    
    - Notifications
    - Result queue and processing
    
    Change-Id: Id6b4746708ce6c6dcc7262666b6ac3130fa3d225
    Camera: Add output side to camera3 HAL device
    
    - Notifications
    - Result queue and processing
    
    Change-Id: Id6b4746708ce6c6dcc7262666b6ac3130fa3d225
    commandStartFaceDetectionL returned the wrong value when face detection is not supported by the HAL.
    This caused the JNI function to fail since it expected a BAD_VALUE response in that case.
    
    Change-Id: I53107a3958d541c25930b81eda638d4b6a394254
    Signed-off-by: Igor Murashkin <iam@google.com>
    commandStartFaceDetectionL returned the wrong value when face detection is not supported by the HAL.
    This caused the JNI function to fail since it expected a BAD_VALUE response in that case.
    
    Change-Id: I53107a3958d541c25930b81eda638d4b6a394254
    Signed-off-by: Igor Murashkin <iam@google.com>
    Camera: Make ProCamera connect take the same paths as Camera connect
    
    * ProCamera uses the app ops manager
    * Refactored connect calls to be as common as possible
    * Removed some useless not implemented function calls in ProClient
    
    Change-Id: I5dab30d20f0c202a494a07b2cfe4c1fa04a2a076
    Camera: Make ProCamera connect take the same paths as Camera connect
    
    * ProCamera uses the app ops manager
    * Refactored connect calls to be as common as possible
    * Removed some useless not implemented function calls in ProClient
    
    Change-Id: I5dab30d20f0c202a494a07b2cfe4c1fa04a2a076
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    replace getISurfaceTexture by getIGraphicBufferProducer
    
    Change-Id: I723a3863558126f2635a544a39bb3ec88d499c60
    replace getISurfaceTexture by getIGraphicBufferProducer
    
    Change-Id: I723a3863558126f2635a544a39bb3ec88d499c60
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Camera2: fix metadata symbols: DO NOT MERGE
    
    Change-Id: I59e457824782de26b7b489cd92eb33d48e6ee2d9
    Camera2: fix metadata symbols: DO NOT MERGE
    
    Change-Id: I59e457824782de26b7b489cd92eb33d48e6ee2d9
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: I64520a55f8c09fe6215382ea361c539a9940cba5
    Camera2: fix metadata symbols
    
    Change-Id: I59e457824782de26b7b489cd92eb33d48e6ee2d9
    Camera2: fix metadata symbols
    
    Change-Id: I59e457824782de26b7b489cd92eb33d48e6ee2d9
    Fix master build.
    
    Change-Id: Ia362f74d8cd7df76292473c26c112dffe190c599
    Fix master build.
    
    Change-Id: Ia362f74d8cd7df76292473c26c112dffe190c599
    Camera: Play shutter sound iff enableShutterSound(true) && ShutterCallback !null
    
    Bug: 7564718
    Change-Id: Ie7821cdee57966d88af048759578439a3e6ecb2e
    Camera: Play shutter sound iff enableShutterSound(true) && ShutterCallback !null
    
    Bug: 7564718
    Change-Id: Ie7821cdee57966d88af048759578439a3e6ecb2e
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Don't hold locks while waiting to sync.
    
    Bug: 7409877
    Change-Id: Ia3a0bc4f0ab4e19fca868ba04a870cf8e8ee7adb
    Camera2: Don't hold locks while waiting to sync.
    
    Bug: 7409877
    Change-Id: Ia3a0bc4f0ab4e19fca868ba04a870cf8e8ee7adb
    Camera2: Increase mode update timeout.
    
    During camera startup, it might take a few hundred milliseconds before
    requests start to be dequeued by the HAL. Increase the timeout for
    synchronizing mode changes and triggers so that triggers near startup
    don't time out.
    
    Bug: 6970465
    Change-Id: I9dc35378e8018ec18ae31be874fcb094f8a9a0e9
    Camera2: Increase mode update timeout.
    
    During camera startup, it might take a few hundred milliseconds before
    requests start to be dequeued by the HAL. Increase the timeout for
    synchronizing mode changes and triggers so that triggers near startup
    don't time out.
    
    Bug: 6970465
    Change-Id: I9dc35378e8018ec18ae31be874fcb094f8a9a0e9
    Camera2: Fix potential deadlock
    
    setPreviewWindow was holding a lock during long-lasting HAL calls
    which may cause deadlock if the HAL calls back into the service during
    the call. Stop holding the lock during these calls, since it's not
    essential to do so.
    
    Bug: 7320517
    Change-Id: I4a35703d751e22ac32979b5a1288e291610576e7
    Camera2: Fix potential deadlock
    
    setPreviewWindow was holding a lock during long-lasting HAL calls
    which may cause deadlock if the HAL calls back into the service during
    the call. Stop holding the lock during these calls, since it's not
    essential to do so.
    
    Bug: 7320517
    Change-Id: I4a35703d751e22ac32979b5a1288e291610576e7
    Camera2: Improve quirks focusing behavior.
    
    - When scene mode is set and the AF quirk is in use, don't change AF
    mode and then cancel when AF cancel is received. Just change mode
    since that also implies a cancel.
    
    - Only trigger quirks switch when a focusing area is set.
    
    Bug: 7318812
    Change-Id: I28d8755553bd78052e774701210cb94d84ee2046
    Camera2: Improve quirks focusing behavior.
    
    - When scene mode is set and the AF quirk is in use, don't change AF
    mode and then cancel when AF cancel is received. Just change mode
    since that also implies a cancel.
    
    - Only trigger quirks switch when a focusing area is set.
    
    Bug: 7318812
    Change-Id: I28d8755553bd78052e774701210cb94d84ee2046
    Camera2: When focus is already locked in CAF mode, do not trigger HAL.
    
    In HAL2 CAF modes, once focus is locked by an AF trigger, additional
    triggers will not cause AF notifications, since the state will not
    change again until a cancelAutofocus call.
    
    Since the old API still expects to see a notification, short-circuit
    this at the service and send an immediate success notification.
    
    Bug: 7318298
    Change-Id: Ib209a24eaf2a35a247d06aea671efe80a33d751e
    Camera2: When focus is already locked in CAF mode, do not trigger HAL.
    
    In HAL2 CAF modes, once focus is locked by an AF trigger, additional
    triggers will not cause AF notifications, since the state will not
    change again until a cancelAutofocus call.
    
    Since the old API still expects to see a notification, short-circuit
    this at the service and send an immediate success notification.
    
    Bug: 7318298
    Change-Id: Ib209a24eaf2a35a247d06aea671efe80a33d751e
    Camera2: Don't error out of startPreview when already recording.
    
    Bug: 7327474
    Change-Id: I603da5b8bd58e5a700d7ae0b3d34bd89bbcb1d53
    Camera2: Don't error out of startPreview when already recording.
    
    Bug: 7327474
    Change-Id: I603da5b8bd58e5a700d7ae0b3d34bd89bbcb1d53
    Camera2: Don't let unlocks happen during recording.
    
    Bug: 7309020
    Change-Id: I6e66809b868d2e8f47f71e6f8752b44ec06dfb17
    Camera2: Don't let unlocks happen during recording.
    
    Bug: 7309020
    Change-Id: I6e66809b868d2e8f47f71e6f8752b44ec06dfb17
    Camera: Limit valid caller PIDs for camera clients.
    
    Narrow down on PID checks to avoid cases where service can access the
    camera even though it shouldn't be able to, per API semantics.
    
    Bug: 6970469
    
    Change-Id: Ic468a31949c28ef978b6ed48a70e4601c7ced684
    Camera: Limit valid caller PIDs for camera clients.
    
    Narrow down on PID checks to avoid cases where service can access the
    camera even though it shouldn't be able to, per API semantics.
    
    Bug: 6970469
    
    Change-Id: Ic468a31949c28ef978b6ed48a70e4601c7ced684
    Camera2: Call onAutoFocus immediately for fixed-focus cameras
    
    Bug: 7311578
    Change-Id: Ib8a8ea1f5fc269abdd24ed1e0370dc9b87b284ee
    Camera2: Call onAutoFocus immediately for fixed-focus cameras
    
    Bug: 7311578
    Change-Id: Ib8a8ea1f5fc269abdd24ed1e0370dc9b87b284ee
    Camera2: On stopping preview, wait until captures are completed.
    
    If preview is stopped while a still capture or a video snapshot is
    underway, wait until the capture completes before stopping preview.
    
    Also use the same behavior for disconnect - do not shut down the
    camera device until captures are complete.
    
    This works around HAL implementations which report to be done
    (get_in_progress_count returns 0) even when a capture is still
    outstanding.
    
    Bug: 7276954
    
    Change-Id: I66290acf1740cc330eadecbcded0c59fa9c5d2fd
    Camera2: On stopping preview, wait until captures are completed.
    
    If preview is stopped while a still capture or a video snapshot is
    underway, wait until the capture completes before stopping preview.
    
    Also use the same behavior for disconnect - do not shut down the
    camera device until captures are complete.
    
    This works around HAL implementations which report to be done
    (get_in_progress_count returns 0) even when a capture is still
    outstanding.
    
    Bug: 7276954
    
    Change-Id: I66290acf1740cc330eadecbcded0c59fa9c5d2fd
    Camera2: Unconditionally shut down streams on disconnect.
    
    stopPreviewL may do nothing in certain states. Stop streams directly
    to avoid those failures, so that we always maintain the HAL interface
    invariant that streams referenced by in-flight requests are never
    deleted.
    
    Bug: 7276954
    Change-Id: Ic4cffc43036f4944684d941981a43d6dd1dce7af
    Camera2: Unconditionally shut down streams on disconnect.
    
    stopPreviewL may do nothing in certain states. Stop streams directly
    to avoid those failures, so that we always maintain the HAL interface
    invariant that streams referenced by in-flight requests are never
    deleted.
    
    Bug: 7276954
    Change-Id: Ic4cffc43036f4944684d941981a43d6dd1dce7af
    Camera2: Fix metering regions to take into account the current zoom/crop region
    
    Also adds a quirk to disable this fix to work around for incompliant HALs
    
    Bug: 7246065
    Change-Id: I80bad25e56ba59149270238e5639bb33cae495ae
    Camera2: Fix metering regions to take into account the current zoom/crop region
    
    Also adds a quirk to disable this fix to work around for incompliant HALs
    
    Bug: 7246065
    Change-Id: I80bad25e56ba59149270238e5639bb33cae495ae
    Camera2: Use the triggerAfWithAuto quirk
    
    When this quirk is set, and a scene mode is enabled, do AF calls with
    AF mode AUTO instead of whatever the scene more override AF mode is.
    
    Bug: 7159577
    Change-Id: I3ea6b8386abc0968047fc9bba3a35c5db5bdcfd3
    Camera2: Use the triggerAfWithAuto quirk
    
    When this quirk is set, and a scene mode is enabled, do AF calls with
    AF mode AUTO instead of whatever the scene more override AF mode is.
    
    Bug: 7159577
    Change-Id: I3ea6b8386abc0968047fc9bba3a35c5db5bdcfd3
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera2: Don't change state when reconnect is called
    
    Bug: 7252802
    Change-Id: Ibed4f59a96bef75bf84b1aaf1235fb87e94102ef
    Camera2: Don't change state when reconnect is called
    
    Bug: 7252802
    Change-Id: Ibed4f59a96bef75bf84b1aaf1235fb87e94102ef
    Camera2: Use ZSL format quirk.
    
    Switch service to using HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED,
    unless ZSL quirk is set.
    
    This is important for compatibility across multiple implementations.
    
    Bug: 6243944
    Change-Id: Iea74671cbb44890a07e4f99cd757b0a5423d447a
    Camera2: Use ZSL format quirk.
    
    Switch service to using HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED,
    unless ZSL quirk is set.
    
    This is important for compatibility across multiple implementations.
    
    Bug: 6243944
    Change-Id: Iea74671cbb44890a07e4f99cd757b0a5423d447a
    Camera2: Use scene mode override parameter
    
    - Read in SCENE_MODE_OVERRIDES static parameter if available.
      Use it to select AF/AE/AWB modes when a scene mode is set.
    - Add quirks structure to parameters; not yet used
    - Fix desynchronization between range and single FPS value.
      Still need to sort out best way to convert from one to another.
    
    Bug: 7259959
    Bug: 7159577
    Bug: 7172543
    
    Change-Id: I0d07c31d5f21fbc4b0ec2fa23f7f778073d2d6e0
    Camera2: Use scene mode override parameter
    
    - Read in SCENE_MODE_OVERRIDES static parameter if available.
      Use it to select AF/AE/AWB modes when a scene mode is set.
    - Add quirks structure to parameters; not yet used
    - Fix desynchronization between range and single FPS value.
      Still need to sort out best way to convert from one to another.
    
    Bug: 7259959
    Bug: 7159577
    Bug: 7172543
    
    Change-Id: I0d07c31d5f21fbc4b0ec2fa23f7f778073d2d6e0
    Camera2: Refactor preview/recording management to separate class.
    
    Untangle preview/recording management from main class to simplify
    callpaths; in preparation for fixing several HAL/app interactions
    bugs.
    
    Bug: 7172543
    Bug: 7159577
    Bug: 7107220
    Change-Id: Iab5503f66b35d88a1524111536a484c9e33fd934
    Camera2: Refactor preview/recording management to separate class.
    
    Untangle preview/recording management from main class to simplify
    callpaths; in preparation for fixing several HAL/app interactions
    bugs.
    
    Bug: 7172543
    Bug: 7159577
    Bug: 7107220
    Change-Id: Iab5503f66b35d88a1524111536a484c9e33fd934
    Camera2: Re-entering preview state on v2 Device
    
    Bug: 7240891
    Change-Id: I6a01b27197b4ee89a68f06f4375d315a716b67ae
    Camera2: Re-entering preview state on v2 Device
    
    Bug: 7240891
    Change-Id: I6a01b27197b4ee89a68f06f4375d315a716b67ae
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Clean up startup/shutdown sequences.
    
    - Close camera device on startup errors
    
    - Make sure all threads are shut down and the device is closed before
      returning from ICamera::disconnect.
    
    Bug: 7172680
    Change-Id: I98611448ec5f2311e6604fa8ee5f9dde7bfdd988
    Camera2: Clean up startup/shutdown sequences.
    
    - Close camera device on startup errors
    
    - Make sure all threads are shut down and the device is closed before
      returning from ICamera::disconnect.
    
    Bug: 7172680
    Change-Id: I98611448ec5f2311e6604fa8ee5f9dde7bfdd988
    Camera2: Clean up startup/shutdown sequences.
    
    - Close camera device on startup errors
    
    - Make sure all threads are shut down and the device is closed before
      returning from ICamera::disconnect.
    
    Bug: 7172680
    Change-Id: I98611448ec5f2311e6604fa8ee5f9dde7bfdd988
    Camera2: Clean up startup/shutdown sequences.
    
    - Close camera device on startup errors
    
    - Make sure all threads are shut down and the device is closed before
      returning from ICamera::disconnect.
    
    Bug: 7172680
    Change-Id: I98611448ec5f2311e6604fa8ee5f9dde7bfdd988
    Camera2: ZSL: Do regular capture if AE is not satisfied.
    
    - Check the AE state of the selected ZSL buffer; if it's not reporting
      as CONVERGED or LOCKED, fall back to normal capture sequence
    - Add more debugging for the ZSL queue.
    
    Bug: 6910087
    Change-Id: I77a4287580aa9ddbd58438477c40ce829555d0ca
    Camera2: ZSL: Do regular capture if AE is not satisfied.
    
    - Check the AE state of the selected ZSL buffer; if it's not reporting
      as CONVERGED or LOCKED, fall back to normal capture sequence
    - Add more debugging for the ZSL queue.
    
    Bug: 6910087
    Change-Id: I77a4287580aa9ddbd58438477c40ce829555d0ca
    Camera2: Configure ZSL at the right time.
    
    ZSL enable was too early in the camera startup sequence, resulting it
    being turned off most of the time.
    
    Bug: 7148012
    Change-Id: Ie144dd960d018a34b0bc77c88208ca22b7112772
    Camera2: Configure ZSL at the right time.
    
    ZSL enable was too early in the camera startup sequence, resulting it
    being turned off most of the time.
    
    Bug: 7148012
    Change-Id: Ie144dd960d018a34b0bc77c88208ca22b7112772
    Camera2: Temporarily stop pre-allocation of recording stream.
    
    When recordingHint is set, don't pre-allocate recording stream on
    preview start.
    
    Bug: 7137947
    Change-Id: I06b5f6d7dbb21d4d0747974ba001b0c8929a0b02
    Camera2: Temporarily stop pre-allocation of recording stream.
    
    When recordingHint is set, don't pre-allocate recording stream on
    preview start.
    
    Bug: 7137947
    Change-Id: I06b5f6d7dbb21d4d0747974ba001b0c8929a0b02
    Fix build
    
    Change-Id: Ia4bebc4ecc850b42ebd4edd1ffed07e9bc2ec300
    Fix build
    
    Change-Id: Ia4bebc4ecc850b42ebd4edd1ffed07e9bc2ec300
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera2: Use the recordingHint parameter.
    
    Use recordingHint to create recording and still capture streams up
    front, and to use the recording template when doing preview.
    
    Bug: 6243944
    
    Change-Id: Ifeb624794849f734784b53a1a10ff2bfe8f1a357
    Camera2: Use the recordingHint parameter.
    
    Use recordingHint to create recording and still capture streams up
    front, and to use the recording template when doing preview.
    
    Bug: 6243944
    
    Change-Id: Ifeb624794849f734784b53a1a10ff2bfe8f1a357
    Camera2: Delete all streams and stop all threads during shutdown.
    
    Bug: 6243944
    Change-Id: If13a1f91e8a07c1ec4f91183d1a4b261ec4f6d52
    Camera2: Delete all streams and stop all threads during shutdown.
    
    Bug: 6243944
    Change-Id: If13a1f91e8a07c1ec4f91183d1a4b261ec4f6d52
    Camera2: Play shutter and recording sounds.
    
    Bug: 6987540
    
    Change-Id: Icd441a757c4b68fc4988b3bfbef428adb8d1ba28
    Camera2: Play shutter and recording sounds.
    
    Bug: 6987540
    
    Change-Id: Icd441a757c4b68fc4988b3bfbef428adb8d1ba28
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Move preview callback processing to its own thread.
    
    To reduce delays for HAL callbacks, manage preview callbacks in their
    own thread.
    
    Bug: 6243944
    Change-Id: I7bef56949ac889ffce4e031bf40291a771a46f3e
    Camera2: Move preview callback processing to its own thread.
    
    To reduce delays for HAL callbacks, manage preview callbacks in their
    own thread.
    
    Bug: 6243944
    Change-Id: I7bef56949ac889ffce4e031bf40291a771a46f3e
    Camera2: Move still capture processing to separate thread.
    
    To avoid stalling HAL when it queues up new buffers for still capture,
    process still captures in a separate thread. Also move Camera2Heap to
    its own class so it can be used by the CaptureProcessor.
    
    Bug: 6243944
    Change-Id: Id38e2a52367c0985812fcd4fd9af3ef90beef43f
    Camera2: Move still capture processing to separate thread.
    
    To avoid stalling HAL when it queues up new buffers for still capture,
    process still captures in a separate thread. Also move Camera2Heap to
    its own class so it can be used by the CaptureProcessor.
    
    Bug: 6243944
    Change-Id: Id38e2a52367c0985812fcd4fd9af3ef90beef43f
    Camera2: Factor out FrameProcessor.
    
    Move FrameProcessor to its own file, add necessary interfaces to
    Camera2Client.
    
    Bug: 6243944
    Change-Id: I8d1b8280a65d2822461ebe6b6c9de17992b34276
    Camera2: Factor out Camera2Client::Parameters
    
    Move the parameter structure and the various utility methods using it
    to its own class. Rename LockedParameters to SharedParameters to match
    the Mutex naming convention.
    
    Also move CameraMetadata to camera2 directory for organization.
    
    No functional changes.
    
    Bug: 6243944
    Change-Id: Ie60b535936ecfda9bf23361d52604abf515c83d0
    Camera2: Fix metering/focusing region coordinates, minor bugs
    
    - Use active pixel array-based coordinates instead of the normalized
      camera API coordinates for ae/awb/af regions
    - Fix calculation of UV stride for YV12 format
    
    Bug: 6243944
    Change-Id: I80cbd989858b0a3cb75c6f536c145e16e44fdb25
    Camera2: Move frame processing to its own thread.
    
    To avoid blocking the HAL on possibly long-running binder calls,
    move frame receiption and processing to its own thread.
    
    Bug: 6243944
    Change-Id: I6385be4410b2f68e2331755027afc10c342187cf
    Camera2: Use CameraMetadata wrapper class.
    
    Wrap the use of the camera_metadata library inside a CameraMetadata
    class to avoid memory leaks, improve code clarity, and increase type
    safety.
    
    Bug: 6243944
    Change-Id: I90ca592b5875e27e4c58ea1ca680582dc3c3b56a
    Camera2: Replace MediaConsumer with BufferItemConsumer.
    
    Get rid of MediaConsumer, which was largely duplicated code, and
    replace it with the simpler BufferItemConsumer.
    
    Bug: 6243944
    Change-Id: I242d80c5fe39f2ee581ec8bb46f362997d994b0a
    Camera2: Ignore NOT_FOUND errors for face detect mode on frame receipt.
    
    Reduce log spamming due to incomplete implementations.
    
    Change-Id: I6eb9d657591bd5f1476dd8c96e4a00b8a03e2a5e
    Camera2: Add support for preview callbacks
    
    - Move camera overall state enum to be part of parameters
    - No longer use ICameraLock to guard access to overall state enum
    - Add callback flag management
    - Add callback stream and management
    
    Bug: 6243944
    
    Change-Id: Ideb3dc523a23c05e440e429ebf838b1900a96573
    Camera2: Fix SCENE_MODE
    
    Now can set scene mode back to auto.
    
    Bug: 7001465
    
    Change-Id: Ia25ba54d13de662bef5bf79957987513a7313c18
    Camera2: Skeleton for output frame processing, plus face detect
    
    - Plumbing for processing output metadata frames from the HAL
    - Support for passing face detection metadata from said frames
      to the application.
    - Switch calls on ICameraClient interface to use separate mutex to
      avoid deadlock scenarios with messages being communicated from the
      HAL to the camera user while calls from the user to the service are
      active.
    
    Bug: 6243944
    
    Change-Id: Id4cf821d9c5c3c0069be4c0f669874b6ff0d1ecd
    Camera2: Swap AF notification order, minor bug fix.
    
    In continuous AF modes, when an AF trigger/cancel is received in the
    middle of a passive AF scan, we want to send both an AF move stop
    callback and an AF done callback. Swap the order of sending to
    simplify life when the app just wants to pay attention to the AF done
    callback during an active AF trigger.
    
    Bug: 6243944
    Change-Id: I127d1675bc37ef828ef89c70b8cfab75f9428a2f
    Camera2: Add trigger support, and implement autofocus
    
    - Add skeletons for all triggering actions into Camera2Device
    - Add support for AF triggers to HAL
    - Add support for AF notifications from HAL
    
    Bug: 6243944
    Change-Id: I21025440849ae41f7083e1dcb72c99f8e5b2d5f7
    Fix a deadlock in commandSetVideoBufferCountL()
    
    o The lock to be acquired in recordingEnabled() has aleady been acquired in sendCommand()
      before the call to commandSetVideoBufferCountL().
    
    Change-Id: I664d51ef449c9eb3576d5d56f73f29c98444ff3f
    Fix a deadlock in commandSetVideoBufferCountL()
    
    o The lock to be acquired in recordingEnabled() has aleady been acquired in sendCommand()
      before the call to commandSetVideoBufferCountL().
    
    Change-Id: I664d51ef449c9eb3576d5d56f73f29c98444ff3f
    Camera2: Add notification handling skeleton.
    
    Wire up skeleton methods for handling all currently defined
    notifications.
    
    Bug: 6243944
    Change-Id: I84b3f60111416ba6fbcdb086f1310225142e2b70
    Camera2: Break out individual commands
    
    - List all commands that need implementing in sendCommand
    - Write skeleton methods for each one
    - Implements playRecordingSound command
    - Partially implements enableShutterSound command
    
    Bug: 6243944
    Change-Id: I7866df75adca09483f407d3a4f630e847dbc7721
    Dynamically configure the number of video buffers used by camera source, if supported
    
    o related-to-bug: 6920805
    
    Change-Id: I413bb50954cc84e32ed40bcb713842dc7b58e2b6
    Camera2: Fix exposure compensation step value.
    
    Fix floating-point divide error.
    
    Change-Id: I61b140c1090d6773b9b530d19a2ec03cf784b85e
    Camera2: Check PIDs to ensure camera exclusive access.
    
    Bug: 6243944
    Change-Id: I4b36af2c92b7266a4aa896a2b048c56b6406cb9a
    Camera2: Improve formatting of debugging dump
    
    Bug: 6243944
    Change-Id: Id8730357f3adcd96923132f9f702e296e0dfd357
    Camera2: Improve threading safety
    
    Merge mutex lock for accessing internal parameters with the parameter
    structure, forcing a lock to be held before the parameters can be accessed.
    
    Bug: 6243944
    Change-Id: I86e44f395de0d80ff7c3ff3530f25b60015512d2
    Camera2: Use more buffers for video encoding.
    
    To avoid starvation, set the number of simultaneously available buffers
    to the encoder to 8.
    
    Bug: 6243944
    Change-Id: I6d0e9f3c0426d62d374c0ae0d427bf5189141adf
    Camera2: Revamp recording support to allow opaque formats.
    
    - Avoid memcpy of buffer data by using metadata mode
    - Temporarily add MediaConsumer BufferQueue class
    
    Bug: 6243944
    Change-Id: I7a8c4222b7dbd14f1b1d86fda06d38eb640e87c1
    Camera2: Stop preview: Wait until HAL is drained
    
    Once camera returns from stopPreview, all preview activity needs to
    have stopped. So wait until that's true.
    
    Bug: 6243944
    Change-Id: Ifa6cf171bd69015883e26dafb1e49e5ac098025a
    Camera2: Add more verbose logging
    
    Until ATRACE works in emulator, add more verbose logs to help debugging
    
    Bug: 6243944
    Change-Id: Ic5fbf764f2717e5edd05d37e0f7d826f1d494179
    Camera2: Fix recording bugs
    
     - Release recording stream on shutdown
     - Return recording gralloc buffers to queue when they are received by
       camera service after recording has been stopped (which is normal
       behavior thanks to pipeline latencies in camera pipelines)
    
    Bug: 6243944
    Change-Id: Ia13a501c726613fd1e404733456dbd10d7b00132
    Camera2: Add recording support
    
    - Support startRecording/stopRecording
    - Support lock/unlock/connect
    - Some rearrangement of class definitions for clarity/consistency
    
    Bug: 6243944
    
    Change-Id: I00c600a798572d2f69bb3f2bab3d79e4bd9a91e5
    Camera2: Handle preview orientation changes.
    
    - Process sendCommand(CAMERA_CMD_SET_DISPLAY_ORIENTATION)
    
    Bug: 6243944
    Change-Id: I92d3bb13312d475703325230487d660a1cb7e0e5
    Camera2: Connect camera parameters to HAL request entries.
    
    - All fields in Camera.Parameters are mapped to HAL2 entries, and
      communicated to the HAL.
    
    - Preview stream properly updated on parameter changes
    
    - Slight code rearrangment for improved clarity
    
    Bug: 6243944
    Change-Id: I2a1db5c148809a62ba3524fb659dd6065affff8e
    Camera2: Minor parameter restructuring
    
    Will make it easier to update HAL-level parameters.
    
    Bug: 6243944
    Change-Id: I3acac3c532de440d46755ce3e1d819ad5ed2e106
    Camera2: Add more dump information, connect HAL device dump
    
    Bug: 6243944
    Change-Id: I79a302f68786d815b9ab9984dbb31d237522416b
    Camera2: Improve error checking and debug logs.
    
    Bug: 6243944
    Change-Id: Ie61d89b733af7d1f653443bf64b767456127a455
    Camera2: Still image support
    
    - Add stream / request creation for still image capture
    - Add takePicture call
    - Add callback handler
    - Fix shutdown bugs (wait until requests have drained)
    
    Bug: 6243944
    
    Change-Id: Id73eb7090e61b40b90348d1eb262f641ea5f3229
    Camera2: Minor bugfixes and cleanup
    
    - Use CameraParameter-defined enum strings instead of writing our own
    - Remember last window binder sent properly
    
    Bug: 6243944
    Change-Id: I68b1d042becaa6ebb4776fd2865dc0a29db7b87e
    Camera2: Add setParameters call
    
    - Validate new parameters and transfer to internal parameters
    
    - Add several utility functions to convert between CameraParameter
      strings and camera2/internal parameter enums
    
    Bug: 6243944
    Change-Id: I323798dbfa028066f4963a6357766a781dde7cb6
    Camera2: Add basic concurrency guards.
    
    - Serialize access through ICamera interface
    - Serialize access to internal parameter structure
    
    Bug: 6243944
    Change-Id: I82c9811c1d059b2bca5cca7e3d73890120dbbe59
    Camera2: Add internal parameter state to dump.
    
    Bug: 6243944
    Change-Id: Id02943001ef92a9c5717b295eb4af1a18669b08b
    Camera2: Use new param structure, improve static camera info queries
    
    - Stop using CameraParameters for internal parameter storage, use a
      straightforward structure instead.
    
    - Improve querying for camera static characteristics for creating
      defaults for API-facing CameraParameters.
    
    Bug: 6243944
    
    Change-Id: I965cdca7b242ef10ac1be931ebe7c186f997bb63
    Camera2: Switch to using ATRACE
    
    Bug: 6243944
    Change-Id: Ib2aa1875c72b20ae764d9de95b4122b736738df2
    Camera service: Minimally functional preview for camera 2 devices.
    
    - Camera app starts up
    - Basic preview operation with defaults
    - Shutdown sequence is very minimal
    
    Bug: 6243944
    
    Change-Id: I67673b7c1fc08956d218d99f9171e74a7a82bf07
    Add basic Camera2Client dump, minor fixes to CameraService dump.
    
    Bug: 6243944
    Change-Id: I52caaa6146050c38976768e99b0eeea1d13a3f51
    Camera service: Initialization for camera2 clients and devices
    
    - Refactor initialization code to hide device type from CameraService
    - Add metadata queue class to Camera2Device
    - Initialization of Camera2Device, Camera2Client
    - Conversion from HAL2 device static metadata to camera API
      parameters.
    
    Bug: 6243944
    Change-Id: I524145b45438e906d8493dae202704ce8f090aeb
    Camera service: Add skeleton support for camera2 devices.
    
    - Add Camera2Client, which maps the current android.hardware.Camera
      API to the new camera2 semantics
    - Add Camera2Device, a C++ wrapper for the HAL camera 2 device
    
    No functionality besides create/destroy; all client methods return
    error or null.
    
    Bug: 6243944
    Change-Id: I6bd5136fa1efd8279b8cd2d9847d9b0bb2862294
    Camera2/3: Add more tracing for API1
    
    - AF state
    - Async autofocus completion
    - Async takePicture completion
    - Stages of takePicture
    
    Bug: 10570497
    Change-Id: Ida9fedd81aa4ee3ae3fb8dfada858a3bc3c213a3
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera2/3: Increase precapture start timeout
    
    Currently, we only wait 200 ms for the HAL to switch to the precapture
    state.  This is insufficient at low preview frame rates (dark
    conditions, ~10 fps), where a 3-request-deep HAL pipeline will take
    300 ms to produce a precapture trigger output. In those cases, we
    would prematurely skip the precapture sequence, causing bad quality
    pictures.
    
    Since this is a fallback timeout to prevent deadlock in case of a bad
    HAL or framework implementation, increase the timeout to 1 second. Has
    no impact on correctly-working implementations
    
    Bug: 10430191
    Change-Id: I08e99f8e7f3beb8f15dcee32632cdebfe3dca8b3
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera: Play shutter sound iff enableShutterSound(true) && ShutterCallback !null
    
    Bug: 7564718
    Change-Id: Ie7821cdee57966d88af048759578439a3e6ecb2e
    Camera: Play shutter sound iff enableShutterSound(true) && ShutterCallback !null
    
    Bug: 7564718
    Change-Id: Ie7821cdee57966d88af048759578439a3e6ecb2e
    Camera2: Move non-ZSL shutter sound firing to be later.
    
    Instead of firing shutter sound when capture request is submitted for
    non-ZSL captures, fire it when the metadata frame is received. This
    guarantees that the shutter sound fires after picture capture is
    completed by the sensor.
    
    Bug: 7259900
    Change-Id: I4a1eeed89ed0400bf80b0f0cc2d5799c3d9bb9e3
    Camera2: Move non-ZSL shutter sound firing to be later.
    
    Instead of firing shutter sound when capture request is submitted for
    non-ZSL captures, fire it when the metadata frame is received. This
    guarantees that the shutter sound fires after picture capture is
    completed by the sensor.
    
    Bug: 7259900
    Change-Id: I4a1eeed89ed0400bf80b0f0cc2d5799c3d9bb9e3
    Camera2: On stopping preview, wait until captures are completed.
    
    If preview is stopped while a still capture or a video snapshot is
    underway, wait until the capture completes before stopping preview.
    
    Also use the same behavior for disconnect - do not shut down the
    camera device until captures are complete.
    
    This works around HAL implementations which report to be done
    (get_in_progress_count returns 0) even when a capture is still
    outstanding.
    
    Bug: 7276954
    
    Change-Id: I66290acf1740cc330eadecbcded0c59fa9c5d2fd
    Camera2: On stopping preview, wait until captures are completed.
    
    If preview is stopped while a still capture or a video snapshot is
    underway, wait until the capture completes before stopping preview.
    
    Also use the same behavior for disconnect - do not shut down the
    camera device until captures are complete.
    
    This works around HAL implementations which report to be done
    (get_in_progress_count returns 0) even when a capture is still
    outstanding.
    
    Bug: 7276954
    
    Change-Id: I66290acf1740cc330eadecbcded0c59fa9c5d2fd
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Emit ShutterCallback/RawCallback events after takePicture
    
    Bug: 7176692
    Change-Id: I50e8f9511f1770d97a42d1fa208c04b1bbcfba6b
    Camera2: Emit ShutterCallback/RawCallback events after takePicture
    
    Bug: 7176692
    Change-Id: I50e8f9511f1770d97a42d1fa208c04b1bbcfba6b
    Camera2: State must be STOPPED before JPEG callback is fired.
    
    Move handling of JPEG callback to CaptureSequencer instead of
    JpegProcessor, so that we can be sure the camera state is updated to
    STOPPED before the JPEG callback is sent to the application layer.
    
    Bug: 7172743
    Change-Id: Ie8752d946d3eb8254230c77f10e5c38a83dc5371
    Camera2: State must be STOPPED before JPEG callback is fired.
    
    Move handling of JPEG callback to CaptureSequencer instead of
    JpegProcessor, so that we can be sure the camera state is updated to
    STOPPED before the JPEG callback is sent to the application layer.
    
    Bug: 7172743
    Change-Id: Ie8752d946d3eb8254230c77f10e5c38a83dc5371
    Camera2: Increase max timeout for the precapture sequence.
    
    Increase maximum duration of the precapture sequence (final metering +
    preflash + redeye reduction) to 2 seconds before timing out.
    
    Change-Id: Ie1de4e96d46599eb53e1def9052b211e684f1fbc
    Camera2: Increase max timeout for the precapture sequence.
    
    Increase maximum duration of the precapture sequence (final metering +
    preflash + redeye reduction) to 2 seconds before timing out.
    
    Change-Id: Ie1de4e96d46599eb53e1def9052b211e684f1fbc
    Camera2: Increase capture timeout.
    
    Low-light modes may take longer to capture a picture, so increase the
    timeouts.
    
    Change-Id: Id50b1e4fd3186da4e75b2cc1c226ced2f8d394ac
    Camera2: Increase capture timeout.
    
    Low-light modes may take longer to capture a picture, so increase the
    timeouts.
    
    Change-Id: Id50b1e4fd3186da4e75b2cc1c226ced2f8d394ac
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera: Correct stream id types
    
    Bug: 10604704
    Change-Id: I223ac5d200eb6439c08955fb7ad586592099fbae
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera3: Power: Properly shut down unused thread.
    
    Bug: 9466221
    Change-Id: I9ed0740561b2e04954eebc1b8aec89cfab40a3a0
    camera3: Fix zsl buffers released-while-in-use race condition
    
    Bug: 9007356
    Change-Id: I0ced31020410978c549d408b2815f925e9c9ffcf
    camera3: Fix zsl buffers released-while-in-use race condition
    
    Bug: 9007356
    Change-Id: I0ced31020410978c549d408b2815f925e9c9ffcf
    Camera3: Fix Bug minTimestamp is never greater than frame timestamp
    
    Bug in logic since minTimestamp is initialized to -1, and this needs
    to be updated for the first frame atleast for logic to work correctly
    for subsequent frames.
    
    Bug: 9007356
    Change-Id: I70edc4d9f34ff67a141c027c67396dc2ca9e413a
    Signed-off-by: Igor Murashkin <iam@google.com>
    Camera3: Make sure new metadata results signal other threads waiting
    
    - Also adds a lot of logging around shuffling around metadata frames
    
    Bug: 9007356
    Change-Id: I4285f4f55b4b899ea4928d43062c705619c8248a
    Camera: Pause preview when needing to delete jpeg/zsl streams
    
    Bug: 8876221
    Change-Id: Idf9490a48462fa44d49c4ebe99425c3149ae6378
    Camera: Pause preview when needing to delete jpeg/zsl streams
    
    Bug: 8876221
    Change-Id: Idf9490a48462fa44d49c4ebe99425c3149ae6378
    camera3: Don't crash when taking a still capture with ZSL disabled
    
    Bug: 8790212
    Change-Id: I4bf7ac5ab856b0ea1738844182efb86137e14083
    camera3: Don't crash when taking a still capture with ZSL disabled
    
    Bug: 8790212
    Change-Id: I4bf7ac5ab856b0ea1738844182efb86137e14083
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera: implement takePicture for HAL3-using clients
    
    * Implements Camera2Device-style triggers by mutating the next request
    * Implements Camera3Device::waitUntilRequestReceived
    
    Change-Id: Ie0b5591158872513a0bffbfab33123cf18dacf8a
    Camera: implement takePicture for HAL3-using clients
    
    * Implements Camera2Device-style triggers by mutating the next request
    * Implements Camera3Device::waitUntilRequestReceived
    
    Change-Id: Ie0b5591158872513a0bffbfab33123cf18dacf8a
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera2: Refactor preview/recording management to separate class.
    
    Untangle preview/recording management from main class to simplify
    callpaths; in preparation for fixing several HAL/app interactions
    bugs.
    
    Bug: 7172543
    Bug: 7159577
    Bug: 7107220
    Change-Id: Iab5503f66b35d88a1524111536a484c9e33fd934
    Camera2: Refactor preview/recording management to separate class.
    
    Untangle preview/recording management from main class to simplify
    callpaths; in preparation for fixing several HAL/app interactions
    bugs.
    
    Bug: 7172543
    Bug: 7159577
    Bug: 7107220
    Change-Id: Iab5503f66b35d88a1524111536a484c9e33fd934
    Camera2: Use new JPEG transport header
    
    Check for new JPEG transport header at the end of the stream buffer
    instead of at the beginning.
    
    Bug: 7108816
    Change-Id: I26c52267cb406dae50c9d0ee01e6c26359ba84aa
    Camera2: Use new JPEG transport header
    
    Check for new JPEG transport header at the end of the stream buffer
    instead of at the beginning.
    
    Bug: 7108816
    Change-Id: I26c52267cb406dae50c9d0ee01e6c26359ba84aa
    Camera2: Truncate JPEG images
    
    Check for JPEG size hint from HAL, use if applicable.  Otherwise
    read until end of JPEG image to find appropriate file size.
    
    Bug: 7108816
    Change-Id: Idfd194133eb6c293ab08c9466f59606e62ba56b6
    Camera2: Truncate JPEG images
    
    Check for JPEG size hint from HAL, use if applicable.  Otherwise
    read until end of JPEG image to find appropriate file size.
    
    Bug: 7108816
    Change-Id: Idfd194133eb6c293ab08c9466f59606e62ba56b6
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Move still capture processing to separate thread.
    
    To avoid stalling HAL when it queues up new buffers for still capture,
    process still captures in a separate thread. Also move Camera2Heap to
    its own class so it can be used by the CaptureProcessor.
    
    Bug: 6243944
    Change-Id: Id38e2a52367c0985812fcd4fd9af3ef90beef43f
    Camera2: Factor out FrameProcessor.
    
    Move FrameProcessor to its own file, add necessary interfaces to
    Camera2Client.
    
    Bug: 6243944
    Change-Id: I8d1b8280a65d2822461ebe6b6c9de17992b34276
    Camera2: Rework the FPS range vs. FPS single setting detection
    
    Give up on current approach of writing out consistent FPS values
    into parameters that will be read back by the app.
    
    - Preserve app's latest set parameters exactly, and compare against
      them when detecting if a new FPS range or single FPS value has been
      selected.
    
    - Since get() returns exactly what was set(), it doesn't matter if the
      app calls getParameters() before its next setParameters(), in terms
      of retriggering FPS selection logic. Before, the behavior varied
      depending on whether the app re-read the parameters.
    
    - As before, if app changes both range and single FPS in a single set
      call, the range set wins. Otherwise, the value that has changed more
      recently is used.
    
    Bug: 11570973
    Change-Id: I72b5e60c3f60e88d55127dd1bda87e26eaf929c6
    Camera HAL3/API1: Add support for the partial result quirk.
    
    - Camera2Client:
     - Detect partial result quirk
    - Camera3Device:
     - Accumulate all partial results together
     - Fire off 3A-only result once all 3A states are available
    - FrameProcessorBase:
     - Filter out partials, don't send to listeners
    - FrameProcessor:
     - Skip face detect on partials
     - Make sure to only handle a 3A update for a given frame once
     - Trigger AF notifications when AF mode or trigger changes, to
       properly detect all AF transitions.
    
    Bug: 11115603
    Change-Id: Iea8aa73c568701562a46071f7ea100624251d10b
    Camera2/3: Add more tracing for API1
    
    - AF state
    - Async autofocus completion
    - Async takePicture completion
    - Stages of takePicture
    
    Bug: 10570497
    Change-Id: Ida9fedd81aa4ee3ae3fb8dfada858a3bc3c213a3
    Camera: Set default thumbnail size with matched aspect ratio
    
    Make default thumbnail size match the default still capture size aspect ratio.
    
    Bug: 10885012
    Change-Id: If46da9508d3b71992f0e14a35c600b7e8d347f4e
    Camera2/3: Properly disambiguate FPS range vs. single FPS setting
    
    The camera1 API allows for either setPreviewFrameRate or
    setPreviewFPSRange, so both values may or may not change in a single
    setParameter call.
    
    The disambiguation of which setting has been changed since the last
    setParameter() call was not fully correct, so a sequence of changes
    that only changed setPreviewFPSRange or didn't change either could be
    interpreted as as a change to setPreviewFrameRate.
    
    Bug: 10842868
    Change-Id: I40baeced80a58f09f8a1742ece8dd5e141e9c1e3
    Camera2/3: For still captures, use widest FPS range available.
    
    Instead of using the application-selected preview FPS range for still
    captures, select the widest FPS range advertised by the device and use
    it for still captures instead, to give the HAL the widest range of exposure
    values to choose from possible.
    
    Bug: 10842868
    Change-Id: I0e24f5eb713a4f8df116cd5979a84390cc0974d7
    Camera2/3: For still captures, use widest FPS range available.
    
    Instead of using the application-selected preview FPS range for still
    captures, select the widest FPS range advertised by the device and use
    it for still captures instead, to give the HAL the widest range of exposure
    values to choose from possible.
    
    Bug: 10842868
    Change-Id: I0e24f5eb713a4f8df116cd5979a84390cc0974d7
    Camera: Limit supported preview sizes
    
    The ANDROID_SCALER_AVAILABLE_PROCESSED_SIZES can provide sizes as large
    as jpeg sizes, which could cause potential issues when trying to do
    full size still capture and full size preview. This is not supported
    by many devices due to hardware limitation. This change limits the
    preview (as well video) size to no more than 1080p.
    
    Bug: 10625115
    Change-Id: I9467ab843553ec06e8249b4a17c0ecf4c6d6f04e
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera2/3: Increase digital zoom steps
    
    Digitial zoom number of steps was 30 and a bit rough. Change it to 100 to make
    smooth zoom smoother.
    
    Bug: 9050908
    Change-Id: I141bc0335d58cdcd6530c14cbbfe6c4ffb4c6dc6
    Camera3: Support flexible YUV for preview callbacks
    
    When the HAL supports it, and the client asks for YV12 or NV21,
    use the new flexible YUV format instead.
    
    Bug: 8734880
    
    Change-Id: Ib0129d9c26a6b30f3be7aa624c2439c6edba1bbd
    Camera3: Support flexible YUV for preview callbacks
    
    When the HAL supports it, and the client asks for YV12 or NV21,
    use the new flexible YUV format instead.
    
    Bug: 8734880
    
    Change-Id: Ib0129d9c26a6b30f3be7aa624c2439c6edba1bbd
    Camera2/3: Fix still image FOV reporting.
    
    Still FOV can vary as a function of the output sizes, with
    the function depending on the HAL version.
    
    Calculate and update the FOV whenever the output sizes might change.
    
    Bug: 8484377
    Change-Id: I56f2cc768a1e128a159b326588be55b2752db06e
    Camera2/3: Fix still image FOV reporting.
    
    Still FOV can vary as a function of the output sizes, with
    the function depending on the HAL version.
    
    Calculate and update the FOV whenever the output sizes might change.
    
    Bug: 8484377
    Change-Id: I56f2cc768a1e128a159b326588be55b2752db06e
    Camera: Don't complain repeatedly about missing android.led.availableLeds
    
    Bug: 8765726
    Change-Id: I78f5f98315068aaad3a39d56698b9c8a18cc8f4a
    Camera: Don't complain repeatedly about missing android.led.availableLeds
    
    Bug: 8765726
    Change-Id: I78f5f98315068aaad3a39d56698b9c8a18cc8f4a
    Camera: Add preview callback surface support
    
    - Add call to set a preview callback surface
    - Implement support for HAL2/3 devices
    - Still need HAL1 implementation
    
    Change-Id: I0dc0bd72e43d871aa487858d1665c1efca633ffe
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera2: Fix JPEG quality metadata type, new warnings.: DO NOT MERGE
    
    - JPEG quality tag is now a uint8_t, not an int. Update parameter code
    accordingly.
    
    - Fix new warnings about narrowing conversions.
    
    Bug: 7944244
    
    Change-Id: Ie081c57c9e9323148614b170b132ffb98c0a0b9f
    Camera2: Fix JPEG quality metadata type, new warnings.: DO NOT MERGE
    
    - JPEG quality tag is now a uint8_t, not an int. Update parameter code
    accordingly.
    
    - Fix new warnings about narrowing conversions.
    
    Bug: 7944244
    
    Change-Id: Ie081c57c9e9323148614b170b132ffb98c0a0b9f
    Camera2: fix metadata symbols: DO NOT MERGE
    
    Change-Id: I59e457824782de26b7b489cd92eb33d48e6ee2d9
    Camera2: fix metadata symbols: DO NOT MERGE
    
    Change-Id: I59e457824782de26b7b489cd92eb33d48e6ee2d9
    Camera2: Fix JPEG quality metadata type, new warnings.
    
    - JPEG quality tag is now a uint8_t, not an int. Update parameter code
    accordingly.
    
    - Fix new warnings about narrowing conversions.
    
    Bug: 7944244
    
    Change-Id: Ie081c57c9e9323148614b170b132ffb98c0a0b9f
    Camera2: Fix JPEG quality metadata type, new warnings.
    
    - JPEG quality tag is now a uint8_t, not an int. Update parameter code
    accordingly.
    
    - Fix new warnings about narrowing conversions.
    
    Bug: 7944244
    
    Change-Id: Ie081c57c9e9323148614b170b132ffb98c0a0b9f
    Camera2: fix metadata symbols
    
    Change-Id: I59e457824782de26b7b489cd92eb33d48e6ee2d9
    Camera2: fix metadata symbols
    
    Change-Id: I59e457824782de26b7b489cd92eb33d48e6ee2d9
    Camera2: Improve quirks focusing behavior.
    
    - When scene mode is set and the AF quirk is in use, don't change AF
    mode and then cancel when AF cancel is received. Just change mode
    since that also implies a cancel.
    
    - Only trigger quirks switch when a focusing area is set.
    
    Bug: 7318812
    Change-Id: I28d8755553bd78052e774701210cb94d84ee2046
    Camera2: Improve quirks focusing behavior.
    
    - When scene mode is set and the AF quirk is in use, don't change AF
    mode and then cancel when AF cancel is received. Just change mode
    since that also implies a cancel.
    
    - Only trigger quirks switch when a focusing area is set.
    
    Bug: 7318812
    Change-Id: I28d8755553bd78052e774701210cb94d84ee2046
    Camera2: When focus is already locked in CAF mode, do not trigger HAL.
    
    In HAL2 CAF modes, once focus is locked by an AF trigger, additional
    triggers will not cause AF notifications, since the state will not
    change again until a cancelAutofocus call.
    
    Since the old API still expects to see a notification, short-circuit
    this at the service and send an immediate success notification.
    
    Bug: 7318298
    Change-Id: Ib209a24eaf2a35a247d06aea671efe80a33d751e
    Camera2: When focus is already locked in CAF mode, do not trigger HAL.
    
    In HAL2 CAF modes, once focus is locked by an AF trigger, additional
    triggers will not cause AF notifications, since the state will not
    change again until a cancelAutofocus call.
    
    Since the old API still expects to see a notification, short-circuit
    this at the service and send an immediate success notification.
    
    Bug: 7318298
    Change-Id: Ib209a24eaf2a35a247d06aea671efe80a33d751e
    Camera2: Report getMaxNumFocusAreas 0 for fixed focus cameras
    
    Bug: 7298805
    Change-Id: I7499b80a9416bf454c8ea80c31ea4fdd3c4ee2d7
    Camera2: Report getMaxNumFocusAreas 0 for fixed focus cameras
    
    Bug: 7298805
    Change-Id: I7499b80a9416bf454c8ea80c31ea4fdd3c4ee2d7
    Camera2: Fix metering regions to take into account the current zoom/crop region
    
    Also adds a quirk to disable this fix to work around for incompliant HALs
    
    Bug: 7246065
    Change-Id: I80bad25e56ba59149270238e5639bb33cae495ae
    Camera2: Fix metering regions to take into account the current zoom/crop region
    
    Also adds a quirk to disable this fix to work around for incompliant HALs
    
    Bug: 7246065
    Change-Id: I80bad25e56ba59149270238e5639bb33cae495ae
    Camera2: Change policy for calculating previewFpsRange from previewFps
    
    Bug: 7259959
    Change-Id: I759a559d7115201264f88db1f23edc2d6aef6c43
    Camera2: Change policy for calculating previewFpsRange from previewFps
    
    Bug: 7259959
    Change-Id: I759a559d7115201264f88db1f23edc2d6aef6c43
    Camera2: Use the triggerAfWithAuto quirk
    
    When this quirk is set, and a scene mode is enabled, do AF calls with
    AF mode AUTO instead of whatever the scene more override AF mode is.
    
    Bug: 7159577
    Change-Id: I3ea6b8386abc0968047fc9bba3a35c5db5bdcfd3
    Camera2: Use the triggerAfWithAuto quirk
    
    When this quirk is set, and a scene mode is enabled, do AF calls with
    AF mode AUTO instead of whatever the scene more override AF mode is.
    
    Bug: 7159577
    Change-Id: I3ea6b8386abc0968047fc9bba3a35c5db5bdcfd3
    Camera2: Include JPEG settings in ZSL requests.
    
    Bug: 7287743
    Change-Id: I1aba81b228451c3df712ce1f42b7aab79cac575f
    Camera2: Include JPEG settings in ZSL requests.
    
    Bug: 7287743
    Change-Id: I1aba81b228451c3df712ce1f42b7aab79cac575f
    Camera2: Use ZSL format quirk.
    
    Switch service to using HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED,
    unless ZSL quirk is set.
    
    This is important for compatibility across multiple implementations.
    
    Bug: 6243944
    Change-Id: Iea74671cbb44890a07e4f99cd757b0a5423d447a
    Camera2: Use ZSL format quirk.
    
    Switch service to using HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED,
    unless ZSL quirk is set.
    
    This is important for compatibility across multiple implementations.
    
    Bug: 6243944
    Change-Id: Iea74671cbb44890a07e4f99cd757b0a5423d447a
    Camera2: Use scene mode override parameter
    
    - Read in SCENE_MODE_OVERRIDES static parameter if available.
      Use it to select AF/AE/AWB modes when a scene mode is set.
    - Add quirks structure to parameters; not yet used
    - Fix desynchronization between range and single FPS value.
      Still need to sort out best way to convert from one to another.
    
    Bug: 7259959
    Bug: 7159577
    Bug: 7172543
    
    Change-Id: I0d07c31d5f21fbc4b0ec2fa23f7f778073d2d6e0
    Camera2: Use scene mode override parameter
    
    - Read in SCENE_MODE_OVERRIDES static parameter if available.
      Use it to select AF/AE/AWB modes when a scene mode is set.
    - Add quirks structure to parameters; not yet used
    - Fix desynchronization between range and single FPS value.
      Still need to sort out best way to convert from one to another.
    
    Bug: 7259959
    Bug: 7159577
    Bug: 7172543
    
    Change-Id: I0d07c31d5f21fbc4b0ec2fa23f7f778073d2d6e0
    DO NOT MERGE: Remove experimental parameters for burst mode
    
    Bug: 7248756
    Change-Id: I3aaf2da4791b2a13e1e788b2914e4c51c529a75d
    DO NOT MERGE: Remove experimental parameters for burst mode
    
    Bug: 7248756
    Change-Id: I3aaf2da4791b2a13e1e788b2914e4c51c529a75d
    Camera2: Only _some_ FPS values in the old API are scaled.
    
    The (deprecated) single-FPS parameter is not scaled by 1000.
    
    Bug: 7230239
    Change-Id: I5664cce90f9cb01e57e39f1a1f7c8eb730501da3
    Camera2: Only _some_ FPS values in the old API are scaled.
    
    The (deprecated) single-FPS parameter is not scaled by 1000.
    
    Bug: 7230239
    Change-Id: I5664cce90f9cb01e57e39f1a1f7c8eb730501da3
    Camera2: Fix FPS value scaling between HAL2 and API
    
    API assumes FPS values are in fixed-point with LSB 0.001; HAL2 just
    uses ints with no fractional part.
    
    HAL should probably use floats or something similar, but for now, fix
    scaling so the two agree on FPS values.
    
    Bug: 7230239
    Change-Id: Ie18a4f11fc9d17d9ae2d04781511a273213eda55
    Camera2: Fix FPS value scaling between HAL2 and API
    
    API assumes FPS values are in fixed-point with LSB 0.001; HAL2 just
    uses ints with no fractional part.
    
    HAL should probably use floats or something similar, but for now, fix
    scaling so the two agree on FPS values.
    
    Bug: 7230239
    Change-Id: Ie18a4f11fc9d17d9ae2d04781511a273213eda55
    Camera2: Fix cropRegion sometimes exceeding the sensor array size
    
    Bug: 7155264
    Bug: 7120431
    Change-Id: I92a9c695b97ec40acf26dbdaa877964e41a9fd4c
    Camera2: Fix cropRegion sometimes exceeding the sensor array size
    
    Bug: 7155264
    Bug: 7120431
    Change-Id: I92a9c695b97ec40acf26dbdaa877964e41a9fd4c
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera2: Increase zoom steps.
    
    10 is too low for smooth zoom; increase number to improve smoothness.
    
    Bug: 7120794
    Change-Id: I178cd3890ef37beeff97cadb9e92ceab6d2cad06
    Camera2: Increase zoom steps.
    
    10 is too low for smooth zoom; increase number to improve smoothness.
    
    Bug: 7120794
    Change-Id: I178cd3890ef37beeff97cadb9e92ceab6d2cad06
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Factor out Camera2Client::Parameters
    
    Move the parameter structure and the various utility methods using it
    to its own class. Rename LockedParameters to SharedParameters to match
    the Mutex naming convention.
    
    Also move CameraMetadata to camera2 directory for organization.
    
    No functional changes.
    
    Bug: 6243944
    Change-Id: Ie60b535936ecfda9bf23361d52604abf515c83d0
    Camera HAL3/API1: Add support for the partial result quirk.
    
    - Camera2Client:
     - Detect partial result quirk
    - Camera3Device:
     - Accumulate all partial results together
     - Fire off 3A-only result once all 3A states are available
    - FrameProcessorBase:
     - Filter out partials, don't send to listeners
    - FrameProcessor:
     - Skip face detect on partials
     - Make sure to only handle a 3A update for a given frame once
     - Trigger AF notifications when AF mode or trigger changes, to
       properly detect all AF transitions.
    
    Bug: 11115603
    Change-Id: Iea8aa73c568701562a46071f7ea100624251d10b
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera2/3: Fix deadlock when starting recording before preview.
    
    Move 3A notification synthesis for HAL3 devices from
    Camera3Device::processCaptureResult to Camera2Client's
    FrameProcessor. This will ensure that calls to processCaptureResult
    from HAL can never block on Camera2Client internal mutexes.
    
    Bug: 9923891
    Change-Id: I5184649bf45c0807babe6b8c0e1239e959cd3480
    Camera2/3: Fix deadlock when starting recording before preview.
    
    Move 3A notification synthesis for HAL3 devices from
    Camera3Device::processCaptureResult to Camera2Client's
    FrameProcessor. This will ensure that calls to processCaptureResult
    from HAL can never block on Camera2Client internal mutexes.
    
    Bug: 9923891
    Change-Id: I5184649bf45c0807babe6b8c0e1239e959cd3480
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    Camera: Log warning on out-of-range face detect scores
    
    Bug: 7368364
    Change-Id: I7b1e995dd15e87c816b89ccf9968a222fd66d140
    Camera: Log warning on out-of-range face detect scores
    
    Bug: 7368364
    Change-Id: I7b1e995dd15e87c816b89ccf9968a222fd66d140
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera2: fix metadata symbols: DO NOT MERGE
    
    Change-Id: I59e457824782de26b7b489cd92eb33d48e6ee2d9
    Camera2: fix metadata symbols: DO NOT MERGE
    
    Change-Id: I59e457824782de26b7b489cd92eb33d48e6ee2d9
    Camera2: fix metadata symbols
    
    Change-Id: I59e457824782de26b7b489cd92eb33d48e6ee2d9
    Camera2: fix metadata symbols
    
    Change-Id: I59e457824782de26b7b489cd92eb33d48e6ee2d9
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Emit FaceDetection events for all except repeating 0-face frames
    
    Bug: 7205311
    Change-Id: I570209445acf3a26f2246c3fe886d56bb63bd2f8
    Camera2: Emit FaceDetection events for all except repeating 0-face frames
    
    Bug: 7205311
    Change-Id: I570209445acf3a26f2246c3fe886d56bb63bd2f8
    Camera2: Don't be bothered by lack of faces.
    
    Sometimes, people might want to photograph scenes with no faces. And
    not have their log fill with errors when they do.
    
    Bug: 7078231
    Change-Id: Ibe5c08d51b49a3ea14203416fe7803a58de08dda
    Camera2: Don't be bothered by lack of faces.
    
    Sometimes, people might want to photograph scenes with no faces. And
    not have their log fill with errors when they do.
    
    Bug: 7078231
    Change-Id: Ibe5c08d51b49a3ea14203416fe7803a58de08dda
    Camera2: Filter out faces with 0 confidence.
    
    Bug: 7078231
    Change-Id: I559f1281359835e0489456091a5409ebc8f73479
    Camera2: Filter out faces with 0 confidence.
    
    Bug: 7078231
    Change-Id: I559f1281359835e0489456091a5409ebc8f73479
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Factor out FrameProcessor.
    
    Move FrameProcessor to its own file, add necessary interfaces to
    Camera2Client.
    
    Bug: 6243944
    Change-Id: I8d1b8280a65d2822461ebe6b6c9de17992b34276
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera2: Move still capture processing to separate thread.
    
    To avoid stalling HAL when it queues up new buffers for still capture,
    process still captures in a separate thread. Also move Camera2Heap to
    its own class so it can be used by the CaptureProcessor.
    
    Bug: 6243944
    Change-Id: Id38e2a52367c0985812fcd4fd9af3ef90beef43f
    Camera2: Move still capture processing to separate thread.
    
    To avoid stalling HAL when it queues up new buffers for still capture,
    process still captures in a separate thread. Also move Camera2Heap to
    its own class so it can be used by the CaptureProcessor.
    
    Bug: 6243944
    Change-Id: Id38e2a52367c0985812fcd4fd9af3ef90beef43f
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera: Correct stream id types
    
    Bug: 10604704
    Change-Id: I223ac5d200eb6439c08955fb7ad586592099fbae
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera2/3: As a fallback, unilaterally free old recording buffers
    
    When starting a recording session, check for and clear out recording
    buffers still owned by stagefright from a previous recording session,
    if any.  There should never be any, but in case they are due to a bug
    elsewhere in the system, clearing out the buffers makes recovery
    possible.
    
    Bug: 9591080
    Change-Id: I3a2a1256860bd174381cd525948419f985c9b415
    Camera2/3: Move recording frame processing to its own thread.
    
    Due to new deadlock opportunities from HAL3 integration, recording
    frame processing needs to move out of the new frame handler into its
    own thread in StreamingProcessor.
    
    Bug: 9282913
    Change-Id: I8d2926f2de9d0d395eef3c328c65caebbdbd2827
    Camera2/3: Move recording frame processing to its own thread.
    
    Due to new deadlock opportunities from HAL3 integration, recording
    frame processing needs to move out of the new frame handler into its
    own thread in StreamingProcessor.
    
    Bug: 9282913
    Change-Id: I8d2926f2de9d0d395eef3c328c65caebbdbd2827
    Camera: Pause preview when needing to delete jpeg/zsl streams
    
    Bug: 8876221
    Change-Id: Idf9490a48462fa44d49c4ebe99425c3149ae6378
    Camera: Pause preview when needing to delete jpeg/zsl streams
    
    Bug: 8876221
    Change-Id: Idf9490a48462fa44d49c4ebe99425c3149ae6378
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Refactor preview/recording management to separate class.
    
    Untangle preview/recording management from main class to simplify
    callpaths; in preparation for fixing several HAL/app interactions
    bugs.
    
    Bug: 7172543
    Bug: 7159577
    Bug: 7107220
    Change-Id: Iab5503f66b35d88a1524111536a484c9e33fd934
    Camera2: Refactor preview/recording management to separate class.
    
    Untangle preview/recording management from main class to simplify
    callpaths; in preparation for fixing several HAL/app interactions
    bugs.
    
    Bug: 7172543
    Bug: 7159577
    Bug: 7107220
    Change-Id: Iab5503f66b35d88a1524111536a484c9e33fd934
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Include JPEG settings in ZSL requests.
    
    Bug: 7287743
    Change-Id: I1aba81b228451c3df712ce1f42b7aab79cac575f
    Camera2: Include JPEG settings in ZSL requests.
    
    Bug: 7287743
    Change-Id: I1aba81b228451c3df712ce1f42b7aab79cac575f
    Camera2: Erase ZSL queue after each use.
    
    Since preview stops after a capture is submitted, need to clear out
    the ZSL queue to avoid using stale buffers when the preview starts up
    again.
    
    Bug: 7189765
    Change-Id: I9ae2382d0af132208aca5ccba49b5464d18a263e
    Camera2: Erase ZSL queue after each use.
    
    Since preview stops after a capture is submitted, need to clear out
    the ZSL queue to avoid using stale buffers when the preview starts up
    again.
    
    Bug: 7189765
    Change-Id: I9ae2382d0af132208aca5ccba49b5464d18a263e
    Camera2: ZSL: Do regular capture if AE is not satisfied.
    
    - Check the AE state of the selected ZSL buffer; if it's not reporting
      as CONVERGED or LOCKED, fall back to normal capture sequence
    - Add more debugging for the ZSL queue.
    
    Bug: 6910087
    Change-Id: I77a4287580aa9ddbd58438477c40ce829555d0ca
    Camera2: ZSL: Do regular capture if AE is not satisfied.
    
    - Check the AE state of the selected ZSL buffer; if it's not reporting
      as CONVERGED or LOCKED, fall back to normal capture sequence
    - Add more debugging for the ZSL queue.
    
    Bug: 6910087
    Change-Id: I77a4287580aa9ddbd58438477c40ce829555d0ca
    Camera2: Fix ZSL bugs.
    
    The ZSL processor was discarding buffers too often, and waiting for
    new buffers with mutexes held.
    
    Also adds basic fallback to regular capture in case the ZSL queue
    doesn't contain a suitable buffer.
    
    Bug: 7147043
    
    Change-Id: I5721267ef08dbc87ef9d8ec47f333db5f67e41c1
    Camera2: Fix ZSL bugs.
    
    The ZSL processor was discarding buffers too often, and waiting for
    new buffers with mutexes held.
    
    Also adds basic fallback to regular capture in case the ZSL queue
    doesn't contain a suitable buffer.
    
    Bug: 7147043
    
    Change-Id: I5721267ef08dbc87ef9d8ec47f333db5f67e41c1
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Use scene mode override parameter
    
    - Read in SCENE_MODE_OVERRIDES static parameter if available.
      Use it to select AF/AE/AWB modes when a scene mode is set.
    - Add quirks structure to parameters; not yet used
    - Fix desynchronization between range and single FPS value.
      Still need to sort out best way to convert from one to another.
    
    Bug: 7259959
    Bug: 7159577
    Bug: 7172543
    
    Change-Id: I0d07c31d5f21fbc4b0ec2fa23f7f778073d2d6e0
    Camera2: Use scene mode override parameter
    
    - Read in SCENE_MODE_OVERRIDES static parameter if available.
      Use it to select AF/AE/AWB modes when a scene mode is set.
    - Add quirks structure to parameters; not yet used
    - Fix desynchronization between range and single FPS value.
      Still need to sort out best way to convert from one to another.
    
    Bug: 7259959
    Bug: 7159577
    Bug: 7172543
    
    Change-Id: I0d07c31d5f21fbc4b0ec2fa23f7f778073d2d6e0
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Include JPEG settings in ZSL requests.
    
    Bug: 7287743
    Change-Id: I1aba81b228451c3df712ce1f42b7aab79cac575f
    Camera2: Include JPEG settings in ZSL requests.
    
    Bug: 7287743
    Change-Id: I1aba81b228451c3df712ce1f42b7aab79cac575f
    Camera2: Erase ZSL queue after each use.
    
    Since preview stops after a capture is submitted, need to clear out
    the ZSL queue to avoid using stale buffers when the preview starts up
    again.
    
    Bug: 7189765
    Change-Id: I9ae2382d0af132208aca5ccba49b5464d18a263e
    Camera2: Erase ZSL queue after each use.
    
    Since preview stops after a capture is submitted, need to clear out
    the ZSL queue to avoid using stale buffers when the preview starts up
    again.
    
    Bug: 7189765
    Change-Id: I9ae2382d0af132208aca5ccba49b5464d18a263e
    Camera2: ZSL: Do regular capture if AE is not satisfied.
    
    - Check the AE state of the selected ZSL buffer; if it's not reporting
      as CONVERGED or LOCKED, fall back to normal capture sequence
    - Add more debugging for the ZSL queue.
    
    Bug: 6910087
    Change-Id: I77a4287580aa9ddbd58438477c40ce829555d0ca
    Camera2: ZSL: Do regular capture if AE is not satisfied.
    
    - Check the AE state of the selected ZSL buffer; if it's not reporting
      as CONVERGED or LOCKED, fall back to normal capture sequence
    - Add more debugging for the ZSL queue.
    
    Bug: 6910087
    Change-Id: I77a4287580aa9ddbd58438477c40ce829555d0ca
    Camera2: Fix ZSL bugs.
    
    The ZSL processor was discarding buffers too often, and waiting for
    new buffers with mutexes held.
    
    Also adds basic fallback to regular capture in case the ZSL queue
    doesn't contain a suitable buffer.
    
    Bug: 7147043
    
    Change-Id: I5721267ef08dbc87ef9d8ec47f333db5f67e41c1
    Camera2: Fix ZSL bugs.
    
    The ZSL processor was discarding buffers too often, and waiting for
    new buffers with mutexes held.
    
    Also adds basic fallback to regular capture in case the ZSL queue
    doesn't contain a suitable buffer.
    
    Bug: 7147043
    
    Change-Id: I5721267ef08dbc87ef9d8ec47f333db5f67e41c1
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera: Correct stream id types
    
    Bug: 10604704
    Change-Id: I223ac5d200eb6439c08955fb7ad586592099fbae
    separte producer and consumer interfaces
    
    Bug: 9265647
    Change-Id: Iefabc11e4bd2e2e8ffd31160476c450affe6629c
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    update to new Consumer APIs
    
    Change-Id: I3c5d4be2a2e8783fbf98b3e268fd02658f71dc7d
    always pass the BufferQueue explicitely to consumers
    
    Change-Id: Ic2d9a9cf184a482b3c78a481ed693ee32df5ca13
    Pass additional arg to acquireBuffer calls.
    
    Bug 7900302
    
    Change-Id: I30b9cca783e0a48f77035b745b7d5e20edf10f27
    Camera2/3: As a fallback, unilaterally free old recording buffers
    
    When starting a recording session, check for and clear out recording
    buffers still owned by stagefright from a previous recording session,
    if any.  There should never be any, but in case they are due to a bug
    elsewhere in the system, clearing out the buffers makes recovery
    possible.
    
    Bug: 9591080
    Change-Id: I3a2a1256860bd174381cd525948419f985c9b415
    Camera2/3: Move recording frame processing to its own thread.
    
    Due to new deadlock opportunities from HAL3 integration, recording
    frame processing needs to move out of the new frame handler into its
    own thread in StreamingProcessor.
    
    Bug: 9282913
    Change-Id: I8d2926f2de9d0d395eef3c328c65caebbdbd2827
    Camera2/3: Move recording frame processing to its own thread.
    
    Due to new deadlock opportunities from HAL3 integration, recording
    frame processing needs to move out of the new frame handler into its
    own thread in StreamingProcessor.
    
    Bug: 9282913
    Change-Id: I8d2926f2de9d0d395eef3c328c65caebbdbd2827
    camera3: Fix recording failure when switching resolutions while preview on
    
    Bug: 9069574
    Change-Id: Ife2ae5467f799dbe37e66714b3a6c9a51e1fe328
    Camera: Pause preview when needing to delete jpeg/zsl streams
    
    Bug: 8876221
    Change-Id: Idf9490a48462fa44d49c4ebe99425c3149ae6378
    Camera: Pause preview when needing to delete jpeg/zsl streams
    
    Bug: 8876221
    Change-Id: Idf9490a48462fa44d49c4ebe99425c3149ae6378
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Fix deadlock while zooming during record
    
    Acquired SharedParameters before mMutex in StreamingProcessor,
    this avoids any potential deadlocks since Camera2Client code would
    always acquire SharedParameters first before invoking StreamingProcessor.
    
    Bug: 7275259
    Change-Id: Ia741162c455300378bee049f063590ece5328b95
    Camera2: Fix deadlock while zooming during record
    
    Acquired SharedParameters before mMutex in StreamingProcessor,
    this avoids any potential deadlocks since Camera2Client code would
    always acquire SharedParameters first before invoking StreamingProcessor.
    
    Bug: 7275259
    Change-Id: Ia741162c455300378bee049f063590ece5328b95
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Fix deadlock while zooming during record
    
    Acquired SharedParameters before mMutex in StreamingProcessor,
    this avoids any potential deadlocks since Camera2Client code would
    always acquire SharedParameters first before invoking StreamingProcessor.
    
    Bug: 7275259
    Change-Id: Ia741162c455300378bee049f063590ece5328b95
    Camera2: Fix deadlock while zooming during record
    
    Acquired SharedParameters before mMutex in StreamingProcessor,
    this avoids any potential deadlocks since Camera2Client code would
    always acquire SharedParameters first before invoking StreamingProcessor.
    
    Bug: 7275259
    Change-Id: Ia741162c455300378bee049f063590ece5328b95
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera2: Don't change state when reconnect is called
    
    Bug: 7252802
    Change-Id: Ibed4f59a96bef75bf84b1aaf1235fb87e94102ef
    Camera2: Don't change state when reconnect is called
    
    Bug: 7252802
    Change-Id: Ibed4f59a96bef75bf84b1aaf1235fb87e94102ef
    Camera2: Refactor preview/recording management to separate class.
    
    Untangle preview/recording management from main class to simplify
    callpaths; in preparation for fixing several HAL/app interactions
    bugs.
    
    Bug: 7172543
    Bug: 7159577
    Bug: 7107220
    Change-Id: Iab5503f66b35d88a1524111536a484c9e33fd934
    Camera2: Refactor preview/recording management to separate class.
    
    Untangle preview/recording management from main class to simplify
    callpaths; in preparation for fixing several HAL/app interactions
    bugs.
    
    Bug: 7172543
    Bug: 7159577
    Bug: 7107220
    Change-Id: Iab5503f66b35d88a1524111536a484c9e33fd934
    separte producer and consumer interfaces
    
    Bug: 9265647
    Change-Id: Iefabc11e4bd2e2e8ffd31160476c450affe6629c
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    always pass the BufferQueue explicitely to consumers
    
    Change-Id: Ic2d9a9cf184a482b3c78a481ed693ee32df5ca13
    Camera: Pause preview when needing to delete jpeg/zsl streams
    
    Bug: 8876221
    Change-Id: Idf9490a48462fa44d49c4ebe99425c3149ae6378
    Camera: Pause preview when needing to delete jpeg/zsl streams
    
    Bug: 8876221
    Change-Id: Idf9490a48462fa44d49c4ebe99425c3149ae6378
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: On stopping preview, wait until captures are completed.
    
    If preview is stopped while a still capture or a video snapshot is
    underway, wait until the capture completes before stopping preview.
    
    Also use the same behavior for disconnect - do not shut down the
    camera device until captures are complete.
    
    This works around HAL implementations which report to be done
    (get_in_progress_count returns 0) even when a capture is still
    outstanding.
    
    Bug: 7276954
    
    Change-Id: I66290acf1740cc330eadecbcded0c59fa9c5d2fd
    Camera2: On stopping preview, wait until captures are completed.
    
    If preview is stopped while a still capture or a video snapshot is
    underway, wait until the capture completes before stopping preview.
    
    Also use the same behavior for disconnect - do not shut down the
    camera device until captures are complete.
    
    This works around HAL implementations which report to be done
    (get_in_progress_count returns 0) even when a capture is still
    outstanding.
    
    Bug: 7276954
    
    Change-Id: I66290acf1740cc330eadecbcded0c59fa9c5d2fd
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera2: Refactor preview/recording management to separate class.
    
    Untangle preview/recording management from main class to simplify
    callpaths; in preparation for fixing several HAL/app interactions
    bugs.
    
    Bug: 7172543
    Bug: 7159577
    Bug: 7107220
    Change-Id: Iab5503f66b35d88a1524111536a484c9e33fd934
    Camera2: Refactor preview/recording management to separate class.
    
    Untangle preview/recording management from main class to simplify
    callpaths; in preparation for fixing several HAL/app interactions
    bugs.
    
    Bug: 7172543
    Bug: 7159577
    Bug: 7107220
    Change-Id: Iab5503f66b35d88a1524111536a484c9e33fd934
    Camera2: Use new JPEG transport header
    
    Check for new JPEG transport header at the end of the stream buffer
    instead of at the beginning.
    
    Bug: 7108816
    Change-Id: I26c52267cb406dae50c9d0ee01e6c26359ba84aa
    Camera2: Use new JPEG transport header
    
    Check for new JPEG transport header at the end of the stream buffer
    instead of at the beginning.
    
    Bug: 7108816
    Change-Id: I26c52267cb406dae50c9d0ee01e6c26359ba84aa
    Camera2: Fix JPEG Transport Header offset
    
    Use offset into start of buffer after transport header
    
    Bug: 7108816
    Change-Id: I6f9778db313856eaeee31f6999e4e55678b09b26
    Camera2: Fix JPEG Transport Header offset
    
    Use offset into start of buffer after transport header
    
    Bug: 7108816
    Change-Id: I6f9778db313856eaeee31f6999e4e55678b09b26
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Truncate JPEG images
    
    Check for JPEG size hint from HAL, use if applicable.  Otherwise
    read until end of JPEG image to find appropriate file size.
    
    Bug: 7108816
    Change-Id: Idfd194133eb6c293ab08c9466f59606e62ba56b6
    Camera2: Truncate JPEG images
    
    Check for JPEG size hint from HAL, use if applicable.  Otherwise
    read until end of JPEG image to find appropriate file size.
    
    Bug: 7108816
    Change-Id: Idfd194133eb6c293ab08c9466f59606e62ba56b6
    Camera2: State must be STOPPED before JPEG callback is fired.
    
    Move handling of JPEG callback to CaptureSequencer instead of
    JpegProcessor, so that we can be sure the camera state is updated to
    STOPPED before the JPEG callback is sent to the application layer.
    
    Bug: 7172743
    Change-Id: Ie8752d946d3eb8254230c77f10e5c38a83dc5371
    Camera2: State must be STOPPED before JPEG callback is fired.
    
    Move handling of JPEG callback to CaptureSequencer instead of
    JpegProcessor, so that we can be sure the camera state is updated to
    STOPPED before the JPEG callback is sent to the application layer.
    
    Bug: 7172743
    Change-Id: Ie8752d946d3eb8254230c77f10e5c38a83dc5371
    Camera2: Delete all streams and stop all threads during shutdown.
    
    Bug: 6243944
    Change-Id: If13a1f91e8a07c1ec4f91183d1a4b261ec4f6d52
    Camera2: Delete all streams and stop all threads during shutdown.
    
    Bug: 6243944
    Change-Id: If13a1f91e8a07c1ec4f91183d1a4b261ec4f6d52
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Move still capture processing to separate thread.
    
    To avoid stalling HAL when it queues up new buffers for still capture,
    process still captures in a separate thread. Also move Camera2Heap to
    its own class so it can be used by the CaptureProcessor.
    
    Bug: 6243944
    Change-Id: Id38e2a52367c0985812fcd4fd9af3ef90beef43f
    Camera2: Move still capture processing to separate thread.
    
    To avoid stalling HAL when it queues up new buffers for still capture,
    process still captures in a separate thread. Also move Camera2Heap to
    its own class so it can be used by the CaptureProcessor.
    
    Bug: 6243944
    Change-Id: Id38e2a52367c0985812fcd4fd9af3ef90beef43f
    Camera2: Rework the FPS range vs. FPS single setting detection
    
    Give up on current approach of writing out consistent FPS values
    into parameters that will be read back by the app.
    
    - Preserve app's latest set parameters exactly, and compare against
      them when detecting if a new FPS range or single FPS value has been
      selected.
    
    - Since get() returns exactly what was set(), it doesn't matter if the
      app calls getParameters() before its next setParameters(), in terms
      of retriggering FPS selection logic. Before, the behavior varied
      depending on whether the app re-read the parameters.
    
    - As before, if app changes both range and single FPS in a single set
      call, the range set wins. Otherwise, the value that has changed more
      recently is used.
    
    Bug: 11570973
    Change-Id: I72b5e60c3f60e88d55127dd1bda87e26eaf929c6
    Camera HAL3/API1: Add support for the partial result quirk.
    
    - Camera2Client:
     - Detect partial result quirk
    - Camera3Device:
     - Accumulate all partial results together
     - Fire off 3A-only result once all 3A states are available
    - FrameProcessorBase:
     - Filter out partials, don't send to listeners
    - FrameProcessor:
     - Skip face detect on partials
     - Make sure to only handle a 3A update for a given frame once
     - Trigger AF notifications when AF mode or trigger changes, to
       properly detect all AF transitions.
    
    Bug: 11115603
    Change-Id: Iea8aa73c568701562a46071f7ea100624251d10b
    Camera: don't do hw support check for ZSL
    
    Only use camera.disable_zsl_mode to control disable/enable ZSL.
    
    Bug: 11258054
    Change-Id: Ibf10b959d0913f7dedb59d89b571e9bf66fe978a
    Camera2/3: Add more tracing for API1
    
    - AF state
    - Async autofocus completion
    - Async takePicture completion
    - Stages of takePicture
    
    Bug: 10570497
    Change-Id: Ida9fedd81aa4ee3ae3fb8dfada858a3bc3c213a3
    Camera: Set default thumbnail size with matched aspect ratio
    
    Make default thumbnail size match the default still capture size aspect ratio.
    
    Bug: 10885012
    Change-Id: If46da9508d3b71992f0e14a35c600b7e8d347f4e
    Camera2/3: Properly disambiguate FPS range vs. single FPS setting
    
    The camera1 API allows for either setPreviewFrameRate or
    setPreviewFPSRange, so both values may or may not change in a single
    setParameter call.
    
    The disambiguation of which setting has been changed since the last
    setParameter() call was not fully correct, so a sequence of changes
    that only changed setPreviewFPSRange or didn't change either could be
    interpreted as as a change to setPreviewFrameRate.
    
    Bug: 10842868
    Change-Id: I40baeced80a58f09f8a1742ece8dd5e141e9c1e3
    Camera2/3: For still captures, use widest FPS range available.
    
    Instead of using the application-selected preview FPS range for still
    captures, select the widest FPS range advertised by the device and use
    it for still captures instead, to give the HAL the widest range of exposure
    values to choose from possible.
    
    Bug: 10842868
    Change-Id: I0e24f5eb713a4f8df116cd5979a84390cc0974d7
    Camera2/3: For still captures, use widest FPS range available.
    
    Instead of using the application-selected preview FPS range for still
    captures, select the widest FPS range advertised by the device and use
    it for still captures instead, to give the HAL the widest range of exposure
    values to choose from possible.
    
    Bug: 10842868
    Change-Id: I0e24f5eb713a4f8df116cd5979a84390cc0974d7
    Camera: Limit supported preview sizes
    
    The ANDROID_SCALER_AVAILABLE_PROCESSED_SIZES can provide sizes as large
    as jpeg sizes, which could cause potential issues when trying to do
    full size still capture and full size preview. This is not supported
    by many devices due to hardware limitation. This change limits the
    preview (as well video) size to no more than 1080p.
    
    Bug: 10625115
    Change-Id: I9467ab843553ec06e8249b4a17c0ecf4c6d6f04e
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    camera2/3: Warn on missing active array size parameters
    
    Change-Id: I752659e1f0522392b902839cd7f4d997dcd85966
    camera2: accept 4-value active array size
    
    Change-Id: Ia320a022b201a938a025efc30a54c05fcfe5b02f
    Camera: static parameter default values
    
    Use sane default values for static metadata parameters.
    
    Change-Id: I180d9b6560ebba468a083e847b78e02b845db788
    camera3: Disable ZSL for limited mode camera HALs
    
    Bug: 9111852
    Change-Id: Idad7e0d2f912341bd643d0ad1a0861fb2043aa90
    camera3: Disable ZSL for limited mode camera HALs
    
    Bug: 9111852
    Change-Id: Idad7e0d2f912341bd643d0ad1a0861fb2043aa90
    Camera2: FoV quirk crop regions
    
    Bug: 8484377
    Change-Id: I5ffcc20b68dc92b502acc9898e57f12cadb92848
    Camera2: FoV quirk crop regions
    
    Bug: 8484377
    Change-Id: I5ffcc20b68dc92b502acc9898e57f12cadb92848
    camera2: Add height to the crop region metadata property
    
    Bug: 8756080
    Change-Id: I90b9166440e92f7675255a01ddc4a980c2e52201
    camera2: Add height to the crop region metadata property
    
    Bug: 8756080
    Change-Id: I90b9166440e92f7675255a01ddc4a980c2e52201
    Camera3: Support flexible YUV for preview callbacks
    
    When the HAL supports it, and the client asks for YV12 or NV21,
    use the new flexible YUV format instead.
    
    Bug: 8734880
    
    Change-Id: Ib0129d9c26a6b30f3be7aa624c2439c6edba1bbd
    Camera3: Support flexible YUV for preview callbacks
    
    When the HAL supports it, and the client asks for YV12 or NV21,
    use the new flexible YUV format instead.
    
    Bug: 8734880
    
    Change-Id: Ib0129d9c26a6b30f3be7aa624c2439c6edba1bbd
    Camera2/3: Fix still image FOV reporting.
    
    Still FOV can vary as a function of the output sizes, with
    the function depending on the HAL version.
    
    Calculate and update the FOV whenever the output sizes might change.
    
    Bug: 8484377
    Change-Id: I56f2cc768a1e128a159b326588be55b2752db06e
    Camera2/3: Fix still image FOV reporting.
    
    Still FOV can vary as a function of the output sizes, with
    the function depending on the HAL version.
    
    Calculate and update the FOV whenever the output sizes might change.
    
    Bug: 8484377
    Change-Id: I56f2cc768a1e128a159b326588be55b2752db06e
    Camera: Don't complain repeatedly about missing android.led.availableLeds
    
    Bug: 8765726
    Change-Id: I78f5f98315068aaad3a39d56698b9c8a18cc8f4a
    Camera: Don't complain repeatedly about missing android.led.availableLeds
    
    Bug: 8765726
    Change-Id: I78f5f98315068aaad3a39d56698b9c8a18cc8f4a
    ProCamera: Add security permission checks for disabling transmit LED
    
    Bug: 8554573
    Change-Id: Ie909908a4cab3700bd622282e8342e8fa5b72376
    ProCamera: Add security permission checks for disabling transmit LED
    
    Bug: 8554573
    Change-Id: Ie909908a4cab3700bd622282e8342e8fa5b72376
    Camera: Add preview callback surface support
    
    - Add call to set a preview callback surface
    - Implement support for HAL2/3 devices
    - Still need HAL1 implementation
    
    Change-Id: I0dc0bd72e43d871aa487858d1665c1efca633ffe
    Camera2: getSceneMode should return NULL when there are no supported scene modes
    
    Bug: 8444806
    Change-Id: Ic92924ceda3de738a7971605552baf00a4fc0546
    Camera2: getSceneMode should return NULL when there are no supported scene modes
    
    Bug: 8444806
    Change-Id: Ic92924ceda3de738a7971605552baf00a4fc0546
    Camera2: Fix JPEG quality metadata type, new warnings.: DO NOT MERGE
    
    - JPEG quality tag is now a uint8_t, not an int. Update parameter code
    accordingly.
    
    - Fix new warnings about narrowing conversions.
    
    Bug: 7944244
    
    Change-Id: Ie081c57c9e9323148614b170b132ffb98c0a0b9f
    Camera2: Fix JPEG quality metadata type, new warnings.: DO NOT MERGE
    
    - JPEG quality tag is now a uint8_t, not an int. Update parameter code
    accordingly.
    
    - Fix new warnings about narrowing conversions.
    
    Bug: 7944244
    
    Change-Id: Ie081c57c9e9323148614b170b132ffb98c0a0b9f
    Camera2: fix metadata symbols: DO NOT MERGE
    
    Change-Id: I59e457824782de26b7b489cd92eb33d48e6ee2d9
    Camera2: fix metadata symbols: DO NOT MERGE
    
    Change-Id: I59e457824782de26b7b489cd92eb33d48e6ee2d9
    Camera2: Fix JPEG quality metadata type, new warnings.
    
    - JPEG quality tag is now a uint8_t, not an int. Update parameter code
    accordingly.
    
    - Fix new warnings about narrowing conversions.
    
    Bug: 7944244
    
    Change-Id: Ie081c57c9e9323148614b170b132ffb98c0a0b9f
    Camera2: Fix JPEG quality metadata type, new warnings.
    
    - JPEG quality tag is now a uint8_t, not an int. Update parameter code
    accordingly.
    
    - Fix new warnings about narrowing conversions.
    
    Bug: 7944244
    
    Change-Id: Ie081c57c9e9323148614b170b132ffb98c0a0b9f
    Camera2: fix metadata symbols
    
    Change-Id: I59e457824782de26b7b489cd92eb33d48e6ee2d9
    Camera2: fix metadata symbols
    
    Change-Id: I59e457824782de26b7b489cd92eb33d48e6ee2d9
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: When focus is already locked in CAF mode, do not trigger HAL.
    
    In HAL2 CAF modes, once focus is locked by an AF trigger, additional
    triggers will not cause AF notifications, since the state will not
    change again until a cancelAutofocus call.
    
    Since the old API still expects to see a notification, short-circuit
    this at the service and send an immediate success notification.
    
    Bug: 7318298
    Change-Id: Ib209a24eaf2a35a247d06aea671efe80a33d751e
    Camera2: When focus is already locked in CAF mode, do not trigger HAL.
    
    In HAL2 CAF modes, once focus is locked by an AF trigger, additional
    triggers will not cause AF notifications, since the state will not
    change again until a cancelAutofocus call.
    
    Since the old API still expects to see a notification, short-circuit
    this at the service and send an immediate success notification.
    
    Bug: 7318298
    Change-Id: Ib209a24eaf2a35a247d06aea671efe80a33d751e
    Camera2: Do not set auto-white-balance regions from metering regions.
    
    Per API documentation, metering regions are only for AE, not also for AWB.
    
    Bug: 7312720
    Change-Id: I39bcf33e4c81e80022f45e8fca77ea6cf9ba115e
    Camera2: Do not set auto-white-balance regions from metering regions.
    
    Per API documentation, metering regions are only for AE, not also for AWB.
    
    Bug: 7312720
    Change-Id: I39bcf33e4c81e80022f45e8fca77ea6cf9ba115e
    Camera2: Fix uninitialized parameters.
    
    Some parameters were not being set to default values, causing strange
    flakiness in any app that wasn't calling setParameters. This includes
    many CTS tests.
    
    Bug: 6970468
    Change-Id: If91635afc000e23862e7b039292a55349274c5ee
    Camera2: Fix uninitialized parameters.
    
    Some parameters were not being set to default values, causing strange
    flakiness in any app that wasn't calling setParameters. This includes
    many CTS tests.
    
    Bug: 6970468
    Change-Id: If91635afc000e23862e7b039292a55349274c5ee
    Camera2: isSmoothZoomSupported should return FALSE
    
    Bug: 7308024
    Change-Id: Ib757bef8f6dc203f8dfa6ea6d11191e3c7cfcc6d
    Camera2: isSmoothZoomSupported should return FALSE
    
    Bug: 7308024
    Change-Id: Ib757bef8f6dc203f8dfa6ea6d11191e3c7cfcc6d
    Camera2: Set default flash mode to FLASH_OFF
    
    Bug: 6970090
    Change-Id: I904b1be2ee0710e82e8e647753a705184c10b46c
    Camera2: Set default flash mode to FLASH_OFF
    
    Bug: 6970090
    Change-Id: I904b1be2ee0710e82e8e647753a705184c10b46c
    Camera2: Fix Parameters#setZoom off by 1 validation error
    
    Bug: 7298683
    Change-Id: If79ac6396379593eb852f041ca7d5a20ad2f9e6d
    Camera2: Fix Parameters#setZoom off by 1 validation error
    
    Bug: 7298683
    Change-Id: If79ac6396379593eb852f041ca7d5a20ad2f9e6d
    Camera2: Report getMaxNumFocusAreas 0 for fixed focus cameras
    
    Bug: 7298805
    Change-Id: I7499b80a9416bf454c8ea80c31ea4fdd3c4ee2d7
    Camera2: Report getMaxNumFocusAreas 0 for fixed focus cameras
    
    Bug: 7298805
    Change-Id: I7499b80a9416bf454c8ea80c31ea4fdd3c4ee2d7
    Camera2: Fix metering regions to take into account the current zoom/crop region
    
    Also adds a quirk to disable this fix to work around for incompliant HALs
    
    Bug: 7246065
    Change-Id: I80bad25e56ba59149270238e5639bb33cae495ae
    Camera2: Fix metering regions to take into account the current zoom/crop region
    
    Also adds a quirk to disable this fix to work around for incompliant HALs
    
    Bug: 7246065
    Change-Id: I80bad25e56ba59149270238e5639bb33cae495ae
    Camera2: Change policy for calculating previewFpsRange from previewFps
    
    Bug: 7259959
    Change-Id: I759a559d7115201264f88db1f23edc2d6aef6c43
    Camera2: Change policy for calculating previewFpsRange from previewFps
    
    Bug: 7259959
    Change-Id: I759a559d7115201264f88db1f23edc2d6aef6c43
    Camera2: Use the triggerAfWithAuto quirk
    
    When this quirk is set, and a scene mode is enabled, do AF calls with
    AF mode AUTO instead of whatever the scene more override AF mode is.
    
    Bug: 7159577
    Change-Id: I3ea6b8386abc0968047fc9bba3a35c5db5bdcfd3
    Camera2: Use the triggerAfWithAuto quirk
    
    When this quirk is set, and a scene mode is enabled, do AF calls with
    AF mode AUTO instead of whatever the scene more override AF mode is.
    
    Bug: 7159577
    Change-Id: I3ea6b8386abc0968047fc9bba3a35c5db5bdcfd3
    Camera2: Include JPEG settings in ZSL requests.
    
    Bug: 7287743
    Change-Id: I1aba81b228451c3df712ce1f42b7aab79cac575f
    Camera2: Include JPEG settings in ZSL requests.
    
    Bug: 7287743
    Change-Id: I1aba81b228451c3df712ce1f42b7aab79cac575f
    Camera2: Properly update FPS range when FPS is set.
    
    Otherwise a getParameters followed by setParameters will trigger an
    incorrect reversion in FPS parameters.
    
    Bug: 7279267
    Change-Id: I7426860f05497dbdf4245c34cef1b38f2f5a1832
    Camera2: Properly update FPS range when FPS is set.
    
    Otherwise a getParameters followed by setParameters will trigger an
    incorrect reversion in FPS parameters.
    
    Bug: 7279267
    Change-Id: I7426860f05497dbdf4245c34cef1b38f2f5a1832
    Camera2: Properly update FPS range when FPS is set.
    
    Otherwise a getParameters followed by setParameters will trigger an
    incorrect reversion in FPS parameters.
    
    Bug: 7279267
    Change-Id: I7426860f05497dbdf4245c34cef1b38f2f5a1832
    Camera2: Properly update FPS range when FPS is set.
    
    Otherwise a getParameters followed by setParameters will trigger an
    incorrect reversion in FPS parameters.
    
    Bug: 7279267
    Change-Id: I7426860f05497dbdf4245c34cef1b38f2f5a1832
    Camera2: Use ZSL format quirk.
    
    Switch service to using HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED,
    unless ZSL quirk is set.
    
    This is important for compatibility across multiple implementations.
    
    Bug: 6243944
    Change-Id: Iea74671cbb44890a07e4f99cd757b0a5423d447a
    Camera2: Use ZSL format quirk.
    
    Switch service to using HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED,
    unless ZSL quirk is set.
    
    This is important for compatibility across multiple implementations.
    
    Bug: 6243944
    Change-Id: Iea74671cbb44890a07e4f99cd757b0a5423d447a
    Camera2: Use scene mode override parameter
    
    - Read in SCENE_MODE_OVERRIDES static parameter if available.
      Use it to select AF/AE/AWB modes when a scene mode is set.
    - Add quirks structure to parameters; not yet used
    - Fix desynchronization between range and single FPS value.
      Still need to sort out best way to convert from one to another.
    
    Bug: 7259959
    Bug: 7159577
    Bug: 7172543
    
    Change-Id: I0d07c31d5f21fbc4b0ec2fa23f7f778073d2d6e0
    Camera2: Use scene mode override parameter
    
    - Read in SCENE_MODE_OVERRIDES static parameter if available.
      Use it to select AF/AE/AWB modes when a scene mode is set.
    - Add quirks structure to parameters; not yet used
    - Fix desynchronization between range and single FPS value.
      Still need to sort out best way to convert from one to another.
    
    Bug: 7259959
    Bug: 7159577
    Bug: 7172543
    
    Change-Id: I0d07c31d5f21fbc4b0ec2fa23f7f778073d2d6e0
    DO NOT MERGE: Remove experimental parameters for burst mode
    
    Bug: 7248756
    Change-Id: I3aaf2da4791b2a13e1e788b2914e4c51c529a75d
    DO NOT MERGE: Remove experimental parameters for burst mode
    
    Bug: 7248756
    Change-Id: I3aaf2da4791b2a13e1e788b2914e4c51c529a75d
    Camera2: Only _some_ FPS values in the old API are scaled.
    
    The (deprecated) single-FPS parameter is not scaled by 1000.
    
    Bug: 7230239
    Change-Id: I5664cce90f9cb01e57e39f1a1f7c8eb730501da3
    Camera2: Only _some_ FPS values in the old API are scaled.
    
    The (deprecated) single-FPS parameter is not scaled by 1000.
    
    Bug: 7230239
    Change-Id: I5664cce90f9cb01e57e39f1a1f7c8eb730501da3
    Camera2: Fix FPS value scaling between HAL2 and API
    
    API assumes FPS values are in fixed-point with LSB 0.001; HAL2 just
    uses ints with no fractional part.
    
    HAL should probably use floats or something similar, but for now, fix
    scaling so the two agree on FPS values.
    
    Bug: 7230239
    Change-Id: Ie18a4f11fc9d17d9ae2d04781511a273213eda55
    Camera2: Fix FPS value scaling between HAL2 and API
    
    API assumes FPS values are in fixed-point with LSB 0.001; HAL2 just
    uses ints with no fractional part.
    
    HAL should probably use floats or something similar, but for now, fix
    scaling so the two agree on FPS values.
    
    Bug: 7230239
    Change-Id: Ie18a4f11fc9d17d9ae2d04781511a273213eda55
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Fix cropRegion sometimes exceeding the sensor array size
    
    Bug: 7155264
    Bug: 7120431
    Change-Id: I92a9c695b97ec40acf26dbdaa877964e41a9fd4c
    Camera2: Fix cropRegion sometimes exceeding the sensor array size
    
    Bug: 7155264
    Bug: 7120431
    Change-Id: I92a9c695b97ec40acf26dbdaa877964e41a9fd4c
    Camera2: Enable ZSL by default.
    
    Bug: 6910087
    Change-Id: Ie774f28fbb943b2ac2c856872fd4cae68b40430c
    Camera2: Enable ZSL by default.
    
    Bug: 6910087
    Change-Id: Ie774f28fbb943b2ac2c856872fd4cae68b40430c
    Camera2: Change face detect/scene mode priority.
    
    Explicit scene modes should override the implicit face priority scene
    mode from enabling face detection, to match application/API
    expectations.
    
    Change-Id: I6f0f44fadeacfdc0594dd2fdc280e294d2d87df6
    Camera2: Change face detect/scene mode priority.
    
    Explicit scene modes should override the implicit face priority scene
    mode from enabling face detection, to match application/API
    expectations.
    
    Change-Id: I6f0f44fadeacfdc0594dd2fdc280e294d2d87df6
    Camera2: Configure ZSL at the right time.
    
    ZSL enable was too early in the camera startup sequence, resulting it
    being turned off most of the time.
    
    Bug: 7148012
    Change-Id: Ie144dd960d018a34b0bc77c88208ca22b7112772
    Camera2: Configure ZSL at the right time.
    
    ZSL enable was too early in the camera startup sequence, resulting it
    being turned off most of the time.
    
    Bug: 7148012
    Change-Id: Ie144dd960d018a34b0bc77c88208ca22b7112772
    Camera2: Sanity check inputs better.
    
    Bug: 7132141
    Change-Id: I866a65dfe47464070a6ef4ac60be4801cb68327b
    Camera2: Sanity check inputs better.
    
    Bug: 7132141
    Change-Id: I866a65dfe47464070a6ef4ac60be4801cb68327b
    Camera2: Use face priority scene mode when face detect is enabled.
    
    Per API specs, enabled face detection implies that metering, etc is
    done based on faces.
    
    Bug: 6243944
    Change-Id: Ie35162226d70cc0f437e92e37be138e71e45e738
    Camera2: Use face priority scene mode when face detect is enabled.
    
    Per API specs, enabled face detection implies that metering, etc is
    done based on faces.
    
    Bug: 6243944
    Change-Id: Ie35162226d70cc0f437e92e37be138e71e45e738
    Camera2: Sanity check inputs better.
    
    Bug: 7132141
    Change-Id: I866a65dfe47464070a6ef4ac60be4801cb68327b
    Camera2: Sanity check inputs better.
    
    Bug: 7132141
    Change-Id: I866a65dfe47464070a6ef4ac60be4801cb68327b
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera2: Move locked states out of AE/AWB mode
    
    Bug: 6243944
    
    Change-Id: I7b609cc6c04c957d1f48c1a996263fa9c7b94000
    Camera2: Move locked states out of AE/AWB mode
    
    Bug: 6243944
    
    Change-Id: I7b609cc6c04c957d1f48c1a996263fa9c7b94000
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Require 2 JPEG thumbnail resolutions.
    
    Include (0,0) as a required thumbnail resolution, to allow turning off
    thumbnails.
    
    Change-Id: I3c4efe2d6a4f576a11ce5b75a3d573812a100b80
    Camera2: Require 2 JPEG thumbnail resolutions.
    
    Include (0,0) as a required thumbnail resolution, to allow turning off
    thumbnails.
    
    Change-Id: I3c4efe2d6a4f576a11ce5b75a3d573812a100b80
    Camera2: Factor out Camera2Client::Parameters
    
    Move the parameter structure and the various utility methods using it
    to its own class. Rename LockedParameters to SharedParameters to match
    the Mutex naming convention.
    
    Also move CameraMetadata to camera2 directory for organization.
    
    No functional changes.
    
    Bug: 6243944
    Change-Id: Ie60b535936ecfda9bf23361d52604abf515c83d0
    Camera HAL3/API1: Add support for the partial result quirk.
    
    - Camera2Client:
     - Detect partial result quirk
    - Camera3Device:
     - Accumulate all partial results together
     - Fire off 3A-only result once all 3A states are available
    - FrameProcessorBase:
     - Filter out partials, don't send to listeners
    - FrameProcessor:
     - Skip face detect on partials
     - Make sure to only handle a 3A update for a given frame once
     - Trigger AF notifications when AF mode or trigger changes, to
       properly detect all AF transitions.
    
    Bug: 11115603
    Change-Id: Iea8aa73c568701562a46071f7ea100624251d10b
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera2/3: Fix deadlock when starting recording before preview.
    
    Move 3A notification synthesis for HAL3 devices from
    Camera3Device::processCaptureResult to Camera2Client's
    FrameProcessor. This will ensure that calls to processCaptureResult
    from HAL can never block on Camera2Client internal mutexes.
    
    Bug: 9923891
    Change-Id: I5184649bf45c0807babe6b8c0e1239e959cd3480
    Camera2/3: Fix deadlock when starting recording before preview.
    
    Move 3A notification synthesis for HAL3 devices from
    Camera3Device::processCaptureResult to Camera2Client's
    FrameProcessor. This will ensure that calls to processCaptureResult
    from HAL can never block on Camera2Client internal mutexes.
    
    Bug: 9923891
    Change-Id: I5184649bf45c0807babe6b8c0e1239e959cd3480
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Emit FaceDetection events for all except repeating 0-face frames
    
    Bug: 7205311
    Change-Id: I570209445acf3a26f2246c3fe886d56bb63bd2f8
    Camera2: Emit FaceDetection events for all except repeating 0-face frames
    
    Bug: 7205311
    Change-Id: I570209445acf3a26f2246c3fe886d56bb63bd2f8
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Factor out FrameProcessor.
    
    Move FrameProcessor to its own file, add necessary interfaces to
    Camera2Client.
    
    Bug: 6243944
    Change-Id: I8d1b8280a65d2822461ebe6b6c9de17992b34276
    Camera: drop stale callback buffer
    
    Sometimes, when preview size is changed and preview callback is enabled, stale
    callback buffer from previous size could be delivered to callback processor
    because stop preview doesn't guarantee consumer side buffers are properly
    cleaned up. We need drop these buffers to avoid sending wrong data to app side.
    
    Bug: 11009183
    Change-Id: If9281e8c02481f883872ce58dfd8660a06d56a47
    separte producer and consumer interfaces
    
    Bug: 9265647
    Change-Id: Iefabc11e4bd2e2e8ffd31160476c450affe6629c
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    update to new Consumer APIs
    
    Change-Id: I3c5d4be2a2e8783fbf98b3e268fd02658f71dc7d
    always pass the BufferQueue explicitely to consumers
    
    Change-Id: Ic2d9a9cf184a482b3c78a481ed693ee32df5ca13
    Camera2/3: Don't allow recording and callbacks to coexist.
    
    - Tear down conflicting streams when necessary.
    
    - Shut down callbacks if recording starts
    
    - Do not allow callbacks to start if recording is active
    
    Per the current camera API, recording and preview callbacks cannot be
    active simultaneously. However, the framework did not explicitly
    disallow this, and in fact left the streams configured once they were
    created, even if switching between the two operational modes.
    
    In addition, no guards existed for trying to enable both recording and
    callbacks at the same time.
    
    Bug: 9423825
    
    Change-Id: I7d6e6114c2e14fcfb5299b4c72ad557895cbf4b8
    Camera2/3: Avoid shutdown race in callback processor.
    
    It's possible, during shutdown, for callback processor's heap to be
    destroyed when it's about to send the callback back to the user.
    Properly copy the heap reference to a local variable before unlocking
    the mutex.
    
    Bug: 9485959
    Change-Id: I301347b77145f19c7ac721b9127dc74f122acce2
    camera2/3: Fix deadlock take picture while preview callback
    
    Acquiring mInputMutex before SharedParameters mutex in preview callback thread
    causes circular locking dependency between callback thread and capture callback
    thread.
    Enforce the right lock ordering to break the dead lock.
    
    Bug: 9323319
    Change-Id: Iea2e025e4d9e29debcf74297c19930075017e179
    camera2/3: Fix deadlock take picture while preview callback
    
    Acquiring mInputMutex before SharedParameters mutex in preview callback thread
    causes circular locking dependency between callback thread and capture callback
    thread.
    Enforce the right lock ordering to break the dead lock.
    
    Bug: 9323319
    Change-Id: Iea2e025e4d9e29debcf74297c19930075017e179
    camera2/3: Add protection to callback processing call
    
    Callback stream in callbackprocessor could be delleted while process or
    discard callback are ongoing, which leads CpuConsumer related call crash.
    
    Bug 9303911
    
    Change-Id: Ib6137e512208e5603468eba166640729b744e8f9
    camera2/3: Add protection to callback processing call
    
    Callback stream in callbackprocessor could be delleted while process or
    discard callback are ongoing, which leads CpuConsumer related call crash.
    
    Bug 9303911
    
    Change-Id: Ib6137e512208e5603468eba166640729b744e8f9
    Camera3: Fix fast flexible YUV->NV21 path.
    
    A U by any other name may smell just as sweet, but the color's pretty
    awful if you call it a V.
    
    Henceforth they never will be UV.
    
    Bug: 8949720
    Change-Id: I4897e93d5a293e576bb1d7ba44d91792b869ad42
    Camera3: Fix fast flexible YUV->NV21 path.
    
    A U by any other name may smell just as sweet, but the color's pretty
    awful if you call it a V.
    
    Henceforth they never will be UV.
    
    Bug: 8949720
    Change-Id: I4897e93d5a293e576bb1d7ba44d91792b869ad42
    Camera2/3: Optimize a few YCbCr_420_888 copy paths
    
    Covers cases where the HAL format and the API format have the same
    chroma layout.
    
    Bug: 8734880
    Change-Id: Ia735082c260b5914fc14f12551f91917c4e53b01
    Camera2/3: Optimize a few YCbCr_420_888 copy paths
    
    Covers cases where the HAL format and the API format have the same
    chroma layout.
    
    Bug: 8734880
    Change-Id: Ia735082c260b5914fc14f12551f91917c4e53b01
    Camera3: Support flexible YUV for preview callbacks
    
    When the HAL supports it, and the client asks for YV12 or NV21,
    use the new flexible YUV format instead.
    
    Bug: 8734880
    
    Change-Id: Ib0129d9c26a6b30f3be7aa624c2439c6edba1bbd
    Camera3: Support flexible YUV for preview callbacks
    
    When the HAL supports it, and the client asks for YV12 or NV21,
    use the new flexible YUV format instead.
    
    Bug: 8734880
    
    Change-Id: Ib0129d9c26a6b30f3be7aa624c2439c6edba1bbd
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera: Add preview callback surface support
    
    - Add call to set a preview callback surface
    - Implement support for HAL2/3 devices
    - Still need HAL1 implementation
    
    Change-Id: I0dc0bd72e43d871aa487858d1665c1efca633ffe
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Delete all streams and stop all threads during shutdown.
    
    Bug: 6243944
    Change-Id: If13a1f91e8a07c1ec4f91183d1a4b261ec4f6d52
    Camera2: Delete all streams and stop all threads during shutdown.
    
    Bug: 6243944
    Change-Id: If13a1f91e8a07c1ec4f91183d1a4b261ec4f6d52
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Move preview callback processing to its own thread.
    
    To reduce delays for HAL callbacks, manage preview callbacks in their
    own thread.
    
    Bug: 6243944
    Change-Id: I7bef56949ac889ffce4e031bf40291a771a46f3e
    Camera2: Move preview callback processing to its own thread.
    
    To reduce delays for HAL callbacks, manage preview callbacks in their
    own thread.
    
    Bug: 6243944
    Change-Id: I7bef56949ac889ffce4e031bf40291a771a46f3e
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    libcameraservice: missing argument when logging
    
    Change-Id: I6f3da400f8f47a387968b9da4ee7cd8e0c9dea70
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera3: Support flexible YUV for preview callbacks
    
    When the HAL supports it, and the client asks for YV12 or NV21,
    use the new flexible YUV format instead.
    
    Bug: 8734880
    
    Change-Id: Ib0129d9c26a6b30f3be7aa624c2439c6edba1bbd
    Camera3: Support flexible YUV for preview callbacks
    
    When the HAL supports it, and the client asks for YV12 or NV21,
    use the new flexible YUV format instead.
    
    Bug: 8734880
    
    Change-Id: Ib0129d9c26a6b30f3be7aa624c2439c6edba1bbd
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera: Add preview callback surface support
    
    - Add call to set a preview callback surface
    - Implement support for HAL2/3 devices
    - Still need HAL1 implementation
    
    Change-Id: I0dc0bd72e43d871aa487858d1665c1efca633ffe
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Move preview callback processing to its own thread.
    
    To reduce delays for HAL callbacks, manage preview callbacks in their
    own thread.
    
    Bug: 6243944
    Change-Id: I7bef56949ac889ffce4e031bf40291a771a46f3e
    Camera2: Move still capture processing to separate thread.
    
    To avoid stalling HAL when it queues up new buffers for still capture,
    process still captures in a separate thread. Also move Camera2Heap to
    its own class so it can be used by the CaptureProcessor.
    
    Bug: 6243944
    Change-Id: Id38e2a52367c0985812fcd4fd9af3ef90beef43f
    Camera2: Factor out FrameProcessor.
    
    Move FrameProcessor to its own file, add necessary interfaces to
    Camera2Client.
    
    Bug: 6243944
    Change-Id: I8d1b8280a65d2822461ebe6b6c9de17992b34276
    Camera: Skip AE precapture when possible
    
    Skip AE precapture when AE is already converged for still capture use case. This
    could save still capture latency 6-7 frame time for AE already converged case.
    
    Bug: 10712902
    Change-Id: Ie5512618b76e5d87c62c57c3d96d2004c604e29e
    Camera: Skip AE precapture when possible
    
    Skip AE precapture when AE is already converged for still capture use case. This
    could save still capture latency 6-7 frame time for AE already converged case.
    
    Bug: 10712902
    Change-Id: Ie5512618b76e5d87c62c57c3d96d2004c604e29e
    Camera2/3: Add more tracing for API1
    
    - AF state
    - Async autofocus completion
    - Async takePicture completion
    - Stages of takePicture
    
    Bug: 10570497
    Change-Id: Ida9fedd81aa4ee3ae3fb8dfada858a3bc3c213a3
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera: Correct stream id types
    
    Bug: 10604704
    Change-Id: I223ac5d200eb6439c08955fb7ad586592099fbae
    Camera: Send VIDEO_SNAPSHOT intent for video snapshot case
    
    Bug: 9924539
    Change-Id: Ief39eff79c31f2c2aa5df2fe1a0f04c4afc74690
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera2/3: Make sure to wait for idle after still capture.
    
    While this wait should be immediate, it's important to guarantee
    that preview is stopped when takePicture completes, and that the
    device knows itself to be idle.
    
    Bug: 9413025
    Change-Id: I1c151ba920e226107ee048918187364990f444c0
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera: implement takePicture for HAL3-using clients
    
    * Implements Camera2Device-style triggers by mutating the next request
    * Implements Camera3Device::waitUntilRequestReceived
    
    Change-Id: Ie0b5591158872513a0bffbfab33123cf18dacf8a
    Camera: implement takePicture for HAL3-using clients
    
    * Implements Camera2Device-style triggers by mutating the next request
    * Implements Camera3Device::waitUntilRequestReceived
    
    Change-Id: Ie0b5591158872513a0bffbfab33123cf18dacf8a
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    Camera: Play shutter sound iff enableShutterSound(true) && ShutterCallback !null
    
    Bug: 7564718
    Change-Id: Ie7821cdee57966d88af048759578439a3e6ecb2e
    Camera: Play shutter sound iff enableShutterSound(true) && ShutterCallback !null
    
    Bug: 7564718
    Change-Id: Ie7821cdee57966d88af048759578439a3e6ecb2e
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Move non-ZSL shutter sound firing to be later.
    
    Instead of firing shutter sound when capture request is submitted for
    non-ZSL captures, fire it when the metadata frame is received. This
    guarantees that the shutter sound fires after picture capture is
    completed by the sensor.
    
    Bug: 7259900
    Change-Id: I4a1eeed89ed0400bf80b0f0cc2d5799c3d9bb9e3
    Camera2: Move non-ZSL shutter sound firing to be later.
    
    Instead of firing shutter sound when capture request is submitted for
    non-ZSL captures, fire it when the metadata frame is received. This
    guarantees that the shutter sound fires after picture capture is
    completed by the sensor.
    
    Bug: 7259900
    Change-Id: I4a1eeed89ed0400bf80b0f0cc2d5799c3d9bb9e3
    Camera2: On stopping preview, wait until captures are completed.
    
    If preview is stopped while a still capture or a video snapshot is
    underway, wait until the capture completes before stopping preview.
    
    Also use the same behavior for disconnect - do not shut down the
    camera device until captures are complete.
    
    This works around HAL implementations which report to be done
    (get_in_progress_count returns 0) even when a capture is still
    outstanding.
    
    Bug: 7276954
    
    Change-Id: I66290acf1740cc330eadecbcded0c59fa9c5d2fd
    Camera2: On stopping preview, wait until captures are completed.
    
    If preview is stopped while a still capture or a video snapshot is
    underway, wait until the capture completes before stopping preview.
    
    Also use the same behavior for disconnect - do not shut down the
    camera device until captures are complete.
    
    This works around HAL implementations which report to be done
    (get_in_progress_count returns 0) even when a capture is still
    outstanding.
    
    Bug: 7276954
    
    Change-Id: I66290acf1740cc330eadecbcded0c59fa9c5d2fd
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Include JPEG settings in ZSL requests.
    
    Bug: 7287743
    Change-Id: I1aba81b228451c3df712ce1f42b7aab79cac575f
    Camera2: Include JPEG settings in ZSL requests.
    
    Bug: 7287743
    Change-Id: I1aba81b228451c3df712ce1f42b7aab79cac575f
    Camera2: Fix prematurely clearing stream request
    
    Zsl handling was clearing the stream request before a capture request
    was ready to be sent to the HAL, which would cause capture delays and
    timeouts in certain conditions.
    
    Bug: 7259520
    Change-Id: Idde8bc4fc58b8b426c6985feac87759740e338ea
    Camera2: Fix prematurely clearing stream request
    
    Zsl handling was clearing the stream request before a capture request
    was ready to be sent to the HAL, which would cause capture delays and
    timeouts in certain conditions.
    
    Bug: 7259520
    Change-Id: Idde8bc4fc58b8b426c6985feac87759740e338ea
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Emit ShutterCallback/RawCallback events after takePicture
    
    Bug: 7176692
    Change-Id: I50e8f9511f1770d97a42d1fa208c04b1bbcfba6b
    Camera2: Emit ShutterCallback/RawCallback events after takePicture
    
    Bug: 7176692
    Change-Id: I50e8f9511f1770d97a42d1fa208c04b1bbcfba6b
    Camera2: Don't use ZSL when flash is on force fire mode.
    
    Bug: 7213907
    Change-Id: I120b187c1886d85f4b2b5d3a6f28a28936424e8e
    Camera2: Don't use ZSL when flash is on force fire mode.
    
    Bug: 7213907
    Change-Id: I120b187c1886d85f4b2b5d3a6f28a28936424e8e
    Camera2: Erase ZSL queue after each use.
    
    Since preview stops after a capture is submitted, need to clear out
    the ZSL queue to avoid using stale buffers when the preview starts up
    again.
    
    Bug: 7189765
    Change-Id: I9ae2382d0af132208aca5ccba49b5464d18a263e
    Camera2: Erase ZSL queue after each use.
    
    Since preview stops after a capture is submitted, need to clear out
    the ZSL queue to avoid using stale buffers when the preview starts up
    again.
    
    Bug: 7189765
    Change-Id: I9ae2382d0af132208aca5ccba49b5464d18a263e
    Camera2: State must be STOPPED before JPEG callback is fired.
    
    Move handling of JPEG callback to CaptureSequencer instead of
    JpegProcessor, so that we can be sure the camera state is updated to
    STOPPED before the JPEG callback is sent to the application layer.
    
    Bug: 7172743
    Change-Id: Ie8752d946d3eb8254230c77f10e5c38a83dc5371
    Camera2: State must be STOPPED before JPEG callback is fired.
    
    Move handling of JPEG callback to CaptureSequencer instead of
    JpegProcessor, so that we can be sure the camera state is updated to
    STOPPED before the JPEG callback is sent to the application layer.
    
    Bug: 7172743
    Change-Id: Ie8752d946d3eb8254230c77f10e5c38a83dc5371
    Camera2: ZSL captures should also make some noise.
    
    Change-Id: If7aff7223db41b4b7edeeb4c32e40ef3197b180b
    Camera2: ZSL captures should also make some noise.
    
    Change-Id: If7aff7223db41b4b7edeeb4c32e40ef3197b180b
    Camera2: ZSL: Do regular capture if AE is not satisfied.
    
    - Check the AE state of the selected ZSL buffer; if it's not reporting
      as CONVERGED or LOCKED, fall back to normal capture sequence
    - Add more debugging for the ZSL queue.
    
    Bug: 6910087
    Change-Id: I77a4287580aa9ddbd58438477c40ce829555d0ca
    Camera2: ZSL: Do regular capture if AE is not satisfied.
    
    - Check the AE state of the selected ZSL buffer; if it's not reporting
      as CONVERGED or LOCKED, fall back to normal capture sequence
    - Add more debugging for the ZSL queue.
    
    Bug: 6910087
    Change-Id: I77a4287580aa9ddbd58438477c40ce829555d0ca
    Camera2: Don't play shutter sound when doing a video snapshot
    
    Bug: 7171820
    Change-Id: I11ec0900aff3cdf4b57ae1bfc75f7acfecf95098
    Camera2: Don't play shutter sound when doing a video snapshot
    
    Bug: 7171820
    Change-Id: I11ec0900aff3cdf4b57ae1bfc75f7acfecf95098
    Camera2: Fix ZSL bugs.
    
    The ZSL processor was discarding buffers too often, and waiting for
    new buffers with mutexes held.
    
    Also adds basic fallback to regular capture in case the ZSL queue
    doesn't contain a suitable buffer.
    
    Bug: 7147043
    
    Change-Id: I5721267ef08dbc87ef9d8ec47f333db5f67e41c1
    Camera2: Fix ZSL bugs.
    
    The ZSL processor was discarding buffers too often, and waiting for
    new buffers with mutexes held.
    
    Also adds basic fallback to regular capture in case the ZSL queue
    doesn't contain a suitable buffer.
    
    Bug: 7147043
    
    Change-Id: I5721267ef08dbc87ef9d8ec47f333db5f67e41c1
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera2: Add a burst mode skeleton.
    
    Bug: 6243944
    Change-Id: I7f496ca1051571c68fdd99a6f85bf6a908a4e29a
    Camera2: Play shutter and recording sounds.
    
    Bug: 6987540
    
    Change-Id: Icd441a757c4b68fc4988b3bfbef428adb8d1ba28
    Camera2: Play shutter and recording sounds.
    
    Bug: 6987540
    
    Change-Id: Icd441a757c4b68fc4988b3bfbef428adb8d1ba28
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera: Correct stream id types
    
    Bug: 10604704
    Change-Id: I223ac5d200eb6439c08955fb7ad586592099fbae
    separte producer and consumer interfaces
    
    Bug: 9265647
    Change-Id: Iefabc11e4bd2e2e8ffd31160476c450affe6629c
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    update to new Consumer APIs
    
    Change-Id: I3c5d4be2a2e8783fbf98b3e268fd02658f71dc7d
    always pass the BufferQueue explicitely to consumers
    
    Change-Id: Ic2d9a9cf184a482b3c78a481ed693ee32df5ca13
    Pass additional arg to acquireBuffer calls.
    
    Bug 7900302
    
    Change-Id: I30b9cca783e0a48f77035b745b7d5e20edf10f27
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: I4e8a8b20914cb64edc37abe68233fbc9f2b5d830
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Fix off-by-one error in ZSL selection.
    
    Bug: 7258126
    Change-Id: Ie6da4645c46a7bb0dbd11d7c6183e904f41f74fd
    Camera2: Fix off-by-one error in ZSL selection.
    
    Bug: 7258126
    Change-Id: Ie6da4645c46a7bb0dbd11d7c6183e904f41f74fd
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Include JPEG settings in ZSL requests.
    
    Bug: 7287743
    Change-Id: I1aba81b228451c3df712ce1f42b7aab79cac575f
    Camera2: Include JPEG settings in ZSL requests.
    
    Bug: 7287743
    Change-Id: I1aba81b228451c3df712ce1f42b7aab79cac575f
    Camera2: Fix prematurely clearing stream request
    
    Zsl handling was clearing the stream request before a capture request
    was ready to be sent to the HAL, which would cause capture delays and
    timeouts in certain conditions.
    
    Bug: 7259520
    Change-Id: Idde8bc4fc58b8b426c6985feac87759740e338ea
    Camera2: Fix prematurely clearing stream request
    
    Zsl handling was clearing the stream request before a capture request
    was ready to be sent to the HAL, which would cause capture delays and
    timeouts in certain conditions.
    
    Bug: 7259520
    Change-Id: Idde8bc4fc58b8b426c6985feac87759740e338ea
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera2: Use ZSL format quirk.
    
    Switch service to using HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED,
    unless ZSL quirk is set.
    
    This is important for compatibility across multiple implementations.
    
    Bug: 6243944
    Change-Id: Iea74671cbb44890a07e4f99cd757b0a5423d447a
    Camera2: Use ZSL format quirk.
    
    Switch service to using HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED,
    unless ZSL quirk is set.
    
    This is important for compatibility across multiple implementations.
    
    Bug: 6243944
    Change-Id: Iea74671cbb44890a07e4f99cd757b0a5423d447a
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Erase ZSL queue after each use.
    
    Since preview stops after a capture is submitted, need to clear out
    the ZSL queue to avoid using stale buffers when the preview starts up
    again.
    
    Bug: 7189765
    Change-Id: I9ae2382d0af132208aca5ccba49b5464d18a263e
    Camera2: Erase ZSL queue after each use.
    
    Since preview stops after a capture is submitted, need to clear out
    the ZSL queue to avoid using stale buffers when the preview starts up
    again.
    
    Bug: 7189765
    Change-Id: I9ae2382d0af132208aca5ccba49b5464d18a263e
    Camera2: ZSL: Do regular capture if AE is not satisfied.
    
    - Check the AE state of the selected ZSL buffer; if it's not reporting
      as CONVERGED or LOCKED, fall back to normal capture sequence
    - Add more debugging for the ZSL queue.
    
    Bug: 6910087
    Change-Id: I77a4287580aa9ddbd58438477c40ce829555d0ca
    Camera2: ZSL: Do regular capture if AE is not satisfied.
    
    - Check the AE state of the selected ZSL buffer; if it's not reporting
      as CONVERGED or LOCKED, fall back to normal capture sequence
    - Add more debugging for the ZSL queue.
    
    Bug: 6910087
    Change-Id: I77a4287580aa9ddbd58438477c40ce829555d0ca
    Revert "Revert "Camera2: Use FORMAT_ZSL until transition to new gralloc scheme.""
    
    The changes this commit depends on are now submitted.
    
    This reverts commit f54b1459cda7f585b4896671643b33bab8290964
    
    Change-Id: If7f146ab7968d50fffd2174c2c5792bdc9d7724c
    Revert "Revert "Camera2: Use FORMAT_ZSL until transition to new gralloc scheme.""
    
    The changes this commit depends on are now submitted.
    
    This reverts commit f54b1459cda7f585b4896671643b33bab8290964
    
    Change-Id: If7f146ab7968d50fffd2174c2c5792bdc9d7724c
    Revert "Camera2: Use FORMAT_ZSL until transition to new gralloc scheme."
    
    This reverts commit 8a3016613dc684a6be11fdf643f9cc5cad817e8f
    
    Change-Id: I3f1d4e9c13df838b8b6aa5696a6494140eac3e04
    Revert "Camera2: Use FORMAT_ZSL until transition to new gralloc scheme."
    
    This reverts commit 8a3016613dc684a6be11fdf643f9cc5cad817e8f
    
    Change-Id: I3f1d4e9c13df838b8b6aa5696a6494140eac3e04
    Camera2: Use FORMAT_ZSL until transition to new gralloc scheme.
    
    Until all HAL implementations move to the new format negotiation
    scheme, use CAMERA2_HAL_PIXEL_FORMAT_ZSL to indicate ZSL mode.
    
    Bug: 6243944
    Change-Id: Idf5d9f42e203903ba906d5df156100646b27404c
    Camera2: Use FORMAT_ZSL until transition to new gralloc scheme.
    
    Until all HAL implementations move to the new format negotiation
    scheme, use CAMERA2_HAL_PIXEL_FORMAT_ZSL to indicate ZSL mode.
    
    Bug: 6243944
    Change-Id: Idf5d9f42e203903ba906d5df156100646b27404c
    Camera2: Fix ZSL bugs.
    
    The ZSL processor was discarding buffers too often, and waiting for
    new buffers with mutexes held.
    
    Also adds basic fallback to regular capture in case the ZSL queue
    doesn't contain a suitable buffer.
    
    Bug: 7147043
    
    Change-Id: I5721267ef08dbc87ef9d8ec47f333db5f67e41c1
    Camera2: Fix ZSL bugs.
    
    The ZSL processor was discarding buffers too often, and waiting for
    new buffers with mutexes held.
    
    Also adds basic fallback to regular capture in case the ZSL queue
    doesn't contain a suitable buffer.
    
    Bug: 7147043
    
    Change-Id: I5721267ef08dbc87ef9d8ec47f333db5f67e41c1
    Camera2: Use full pixel array for ZSL stream
    
    For efficiency, use full pixel array size for the ZSL output/input
    streams, instead of the final picture size.
    
    Bug: 7139362
    Change-Id: I98ad4f5a1ca283efe87ae60bf0cf39573e22d2f3
    Camera2: Use full pixel array for ZSL stream
    
    For efficiency, use full pixel array size for the ZSL output/input
    streams, instead of the final picture size.
    
    Bug: 7139362
    Change-Id: I98ad4f5a1ca283efe87ae60bf0cf39573e22d2f3
    Camera2: Clean up the right streams.
    
    Change-Id: I780c3e8e255f6a185e0edf1d76f35afdc74dff48
    Camera2: Clean up the right streams.
    
    Change-Id: I780c3e8e255f6a185e0edf1d76f35afdc74dff48
    Camera2: Delete all streams and stop all threads during shutdown.
    
    Bug: 6243944
    Change-Id: If13a1f91e8a07c1ec4f91183d1a4b261ec4f6d52
    Camera2: Delete all streams and stop all threads during shutdown.
    
    Bug: 6243944
    Change-Id: If13a1f91e8a07c1ec4f91183d1a4b261ec4f6d52
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    ProCamera: Add security permission checks for disabling transmit LED
    
    Bug: 8554573
    Change-Id: Ie909908a4cab3700bd622282e8342e8fa5b72376
    ProCamera: Add security permission checks for disabling transmit LED
    
    Bug: 8554573
    Change-Id: Ie909908a4cab3700bd622282e8342e8fa5b72376
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    ProCamera: Add getInfo for getting static metadata (and a test)
    
    Change-Id: I3b87dfbc621d98bf41f37a892a1012baf85b5166
    ProCamera: Add getInfo for getting static metadata (and a test)
    
    Change-Id: I3b87dfbc621d98bf41f37a892a1012baf85b5166
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: ProCamera - add createStreamCpu and unit test
    
    Change-Id: I468172dbfdd78510b273bf9d119c950cbeda7ea3
    Camera: ProCamera - add createStreamCpu and unit test
    
    Change-Id: I468172dbfdd78510b273bf9d119c950cbeda7ea3
    Camera: Change ProCamera to take IGraphicBufferProducer
    
    Change-Id: Iec62eead6d179aa5486f7719143340976bb76e7d
    Camera: Change ProCamera to take IGraphicBufferProducer
    
    Change-Id: Iec62eead6d179aa5486f7719143340976bb76e7d
    Camera: ProCamera2Client implement createStream,createDefaultRequest
    
    The StreamingImage unit test should now work when TEST_DISPLAY_SECS is set.
    
    Change-Id: I9cf3ad5bd5a76096ab21bd39e631d636c4ff3d3f
    Camera: ProCamera2Client implement createStream,createDefaultRequest
    
    The StreamingImage unit test should now work when TEST_DISPLAY_SECS is set.
    
    Change-Id: I9cf3ad5bd5a76096ab21bd39e631d636c4ff3d3f
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    ProCamera: Add security permission checks for disabling transmit LED
    
    Bug: 8554573
    Change-Id: Ie909908a4cab3700bd622282e8342e8fa5b72376
    ProCamera: Add security permission checks for disabling transmit LED
    
    Bug: 8554573
    Change-Id: Ie909908a4cab3700bd622282e8342e8fa5b72376
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    ProCamera: Add getInfo for getting static metadata (and a test)
    
    Change-Id: I3b87dfbc621d98bf41f37a892a1012baf85b5166
    ProCamera: Add getInfo for getting static metadata (and a test)
    
    Change-Id: I3b87dfbc621d98bf41f37a892a1012baf85b5166
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: Change ProCamera to take IGraphicBufferProducer
    
    Change-Id: Iec62eead6d179aa5486f7719143340976bb76e7d
    Camera: Change ProCamera to take IGraphicBufferProducer
    
    Change-Id: Iec62eead6d179aa5486f7719143340976bb76e7d
    Camera: ProCamera2Client implement createStream,createDefaultRequest
    
    The StreamingImage unit test should now work when TEST_DISPLAY_SECS is set.
    
    Change-Id: I9cf3ad5bd5a76096ab21bd39e631d636c4ff3d3f
    Camera: ProCamera2Client implement createStream,createDefaultRequest
    
    The StreamingImage unit test should now work when TEST_DISPLAY_SECS is set.
    
    Change-Id: I9cf3ad5bd5a76096ab21bd39e631d636c4ff3d3f
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    separte producer and consumer interfaces
    
    Bug: 9265647
    Change-Id: Iefabc11e4bd2e2e8ffd31160476c450affe6629c
    update to new Consumer APIs
    
    Change-Id: I3c5d4be2a2e8783fbf98b3e268fd02658f71dc7d
    Pass additional arg to acquireBuffer calls.
    
    Bug 7900302
    
    Change-Id: I30b9cca783e0a48f77035b745b7d5e20edf10f27
    camera3: Fix zsl buffers released-while-in-use race condition
    
    Bug: 9007356
    Change-Id: I0ced31020410978c549d408b2815f925e9c9ffcf
    stagefright: BufferProducer updates
    
    Update BufferQueue and ConsumerBase users to new BufferQueue
    API, to allow BufferQueue slots to be reused.  Buffer consumers
    generally now need to track the unique frameNumber belonging to
    each frame acquired if they are using BufferQueue directly.
    Otherwise, they can simply track the graphicBuffer.
    
    Change-Id: I30ee3158cf40fb10bbd085241646d5f1128ee480
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Related-to-bug: 7093648
    camera3: Fix zsl buffers released-while-in-use race condition
    
    Bug: 9007356
    Change-Id: I0ced31020410978c549d408b2815f925e9c9ffcf
    update to Fence::waitForever() API change
    
    Bug: 8988871
    Change-Id: I24a2620d356f3bb6207ed834c79fd3e48b429695
    Camera: don't spam RingBufferConsumer logs in eng builds
    
    Bug: 8969579
    Change-Id: Ia51d4072725754fd3b6ca028232a605885376287
    Camera: don't spam RingBufferConsumer logs in eng builds
    
    Bug: 8969579
    Change-Id: Ia51d4072725754fd3b6ca028232a605885376287
    camera: Add new RingBufferConsumer to keep a ring buffer of acquired frames
    
    Bug: 8563838
    Change-Id: I5a95e0be94e5388b30639905efae42d3c3279f72
    camera: Add new RingBufferConsumer to keep a ring buffer of acquired frames
    
    Bug: 8563838
    Change-Id: I5a95e0be94e5388b30639905efae42d3c3279f72
    separte producer and consumer interfaces
    
    Bug: 9265647
    Change-Id: Iefabc11e4bd2e2e8ffd31160476c450affe6629c
    camera: Add new RingBufferConsumer to keep a ring buffer of acquired frames
    
    Bug: 8563838
    Change-Id: I5a95e0be94e5388b30639905efae42d3c3279f72
    camera: Add new RingBufferConsumer to keep a ring buffer of acquired frames
    
    Bug: 8563838
    Change-Id: I5a95e0be94e5388b30639905efae42d3c3279f72
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Update ANativeWindow client code for sync
    
    This change updates all the uses of ANativeWindow to use the new ANW functions
    that accept and return Sync HAL fence file descriptors.
    
    Change-Id: Id7db42d8d6380f8b440d88476ce9211c6225fb16
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    remove dependency on android_native{s_priv|buffer}.h
    
    Change-Id: Ie4b95f7061c240f37c504414259f92d72c4ffc89
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)
    
    Change-Id: I26f76452ac49e2890b14d133c065493d8df0fb4a
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Add ANativeWindow timestamp support to camera service.
    
    This allows the camera HAL to set ANativeWindow timestamps, which
    are used by SurfaceTexture.
    
    Bug-Id: 5081132
    Change-Id: I123ea4c9d1824fb72146fad81ad03d1491e0a7f8
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: Ib08fe86d23db91ee153e9f91a99a35c42b9208ea
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Add initialize method to CameraHardwareInterface
    
    Add intialize() method to CameraHardwareInterface so we can
    return a proper error value to CameraService if open of camera
    hardware module fails.
    
    b/5405235
    
    Change-Id: I09c627034ddd22a5753c5163392c4fcff301e0b9
    Signed-off-by: Tyler Luu <tluu@ti.com>
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Add frame metadata parameter to camera data_callback.
    
    bug:4460717
    Change-Id: Ib47d7d7df20af8155a719f3dabefe030893bfebc
    libcameraservice: call put_parameters on camera HAL
    
    Change-Id: I492d1034ade50f9e157141debaa9783a90a04a91
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    CameraService: Decouple dequeue and lock
    
    Decouple lockBuffer from dequeueBuffer. Add lock_buffer to preview_stream_ops,
    so HALs will be fully in charge of managing buffers.
    
    Change-Id: I7b53487d618bdf08ba904c5a0f41af462a7ca773
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    CameraService: return stide when dequeueing a buffer
    
    Change-Id: I11c7f0b57f7d619cdc392b2d34c538ae898de7ac
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    frameworks/base: updates for camera HAL memory management
    
    -- when the camera HAL allocates memory
            -- it requests is as N buffers by S bytes each
            -- it may specify a file descriptor to get mmapped; if -1, then we use ashmem
    -- when issuing data and data-timestamp callbacks, the camera HAL specifies a
       buffer index
    -- range checking is performed on the buffer indices
    -- memory requested by a camera HAL is not incStrong'ed, and needs to be
       expliciftly released by the camera HAL (by calling the release method on the
       camera_memory_t handle)
    
    Change-Id: I0f09603aa786c238590e7288388ab673787e6032
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    frameworks/base: android_native_buffer_t -> ANativeWindowBuffer
    
    Change-Id: Idc2eabaa805bb6d308ebb315872623f28d428417
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    frameworks/base: switch CameraService to a HAL module
    
    This patch changes CameraService to load a camera HAL module, instead of
    linking directly against a library that implements the CameraHardwareInterface
    class.
    
    CameraHardwareInterface no longer defines the API to the camera HAL.  Instead,
    this is now in HAL header hardware/camera.h.  We keep CamerHardwareInterface as
    a class local to CameraService, which wraps around the new HAL calls.  In the
    future, we may remove this class entirely and have CameraService call the HAL
    methods directly.
    
    Change-Id: I5c61ac40078fc0b50bbac5881a556fe6c8837641
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    camera: Collect stack traces when bad things happen, print with dumpsys
    
    Bug: 11324229
    Change-Id: Ic920e170a8f5a389fc139bbf5416c0e3186c7fb6
    camera: Collect stack traces when bad things happen, print with dumpsys
    
    Bug: 11324229
    Change-Id: Ic920e170a8f5a389fc139bbf5416c0e3186c7fb6
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera: Don't overwrite the error status
    
    Bug: 10749544
    Change-Id: I6096effde03e18ee1b8c63cf3b36dce0344054c5
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Make android.hardware.photography.Camera work on HAL3+ devices
    
    Bug: 9213377
    Change-Id: I5b2eeab28985f53dfcb7b8e3029930f5adcd74f5
    Initial implementation of android.hardware.photography.CameraDevice (service)
    
    * Verified preview streaming requests
    * Other things *should* work but unverified / unimplemented in client side
    
    Missing:
    * CameraService needs to return static camera info metadata
    
    Bug: 9213377
    Change-Id: I71568560fcf18d0e2b408ed1c4d0066647314868
    Camera: Make ProCamera connect take the same paths as Camera connect
    
    * ProCamera uses the app ops manager
    * Refactored connect calls to be as common as possible
    * Removed some useless not implemented function calls in ProClient
    
    Change-Id: I5dab30d20f0c202a494a07b2cfe4c1fa04a2a076
    Camera: Make ProCamera connect take the same paths as Camera connect
    
    * ProCamera uses the app ops manager
    * Refactored connect calls to be as common as possible
    * Removed some useless not implemented function calls in ProClient
    
    Change-Id: I5dab30d20f0c202a494a07b2cfe4c1fa04a2a076
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Initial implementation of android.hardware.photography.CameraDevice (service)
    
    * Verified preview streaming requests
    * Other things *should* work but unverified / unimplemented in client side
    
    Missing:
    * CameraService needs to return static camera info metadata
    
    Bug: 9213377
    Change-Id: I71568560fcf18d0e2b408ed1c4d0066647314868
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    Camera API2: Add support for partial result quirk
    
    - Camera3Device: Include requestId in partial 3A results
    - FrameProcessorBase: Add support for partial result listeners
    - CameraDeviceClient: Listen and forward partial results to client
    
    Bug: 11115603
    Change-Id: If1cc6bbc32932742ac142c058688761ebf6a8024
    camera2: Don't race while dumping last frame metadata
    
    Bug: 11095203
    Change-Id: Icfb31e1719634b62004d6c15a95a9316e9642e4c
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Emit FaceDetection events for all except repeating 0-face frames
    
    Bug: 7205311
    Change-Id: I570209445acf3a26f2246c3fe886d56bb63bd2f8
    Camera2: Emit FaceDetection events for all except repeating 0-face frames
    
    Bug: 7205311
    Change-Id: I570209445acf3a26f2246c3fe886d56bb63bd2f8
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Factor out FrameProcessor.
    
    Move FrameProcessor to its own file, add necessary interfaces to
    Camera2Client.
    
    Bug: 6243944
    Change-Id: I8d1b8280a65d2822461ebe6b6c9de17992b34276
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera2: Add flush support
    
    - On HAL2 devices, fall back to wait until idle
    - On HAL3 devices, call HAL flush method
    
    Bug: 9758581
    Change-Id: Ie1c570a15f6590a1ee6c271e3b989c48079b468a
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera2/3: Fix deadlock when starting recording before preview.
    
    Move 3A notification synthesis for HAL3 devices from
    Camera3Device::processCaptureResult to Camera2Client's
    FrameProcessor. This will ensure that calls to processCaptureResult
    from HAL can never block on Camera2Client internal mutexes.
    
    Bug: 9923891
    Change-Id: I5184649bf45c0807babe6b8c0e1239e959cd3480
    Camera2/3: Fix deadlock when starting recording before preview.
    
    Move 3A notification synthesis for HAL3 devices from
    Camera3Device::processCaptureResult to Camera2Client's
    FrameProcessor. This will ensure that calls to processCaptureResult
    from HAL can never block on Camera2Client internal mutexes.
    
    Bug: 9923891
    Change-Id: I5184649bf45c0807babe6b8c0e1239e959cd3480
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Add unit test infrastructure for libcameraclient
    
    Change-Id: I957538663ae8332d26f3640c63a75efc79f4ac5c
    Permit conditional registry of mediaserver extensions
    
    Change-Id: I94dc0d038e702dfe1779a50a1de0fae9bad15057
    Factor out and speed up permission-checking code
    
    Use the caching permission check for dump to save IPC.
    
    Cache getpid() to save kernel call for other permission checks.
    
    The C runtime library getpid() can't cache due to a fork
    race condition, but we know that mediaserver doesn't fork.
    
    Don't construct String16 on the stack.
    
    Change-Id: I6be6161dae5155d39ba6ed6228e7683e67be34ed
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Camera API2: Add support for partial result quirk
    
    - Camera3Device: Include requestId in partial 3A results
    - FrameProcessorBase: Add support for partial result listeners
    - CameraDeviceClient: Listen and forward partial results to client
    
    Bug: 11115603
    Change-Id: If1cc6bbc32932742ac142c058688761ebf6a8024
    Camera HAL3/API1: Add support for the partial result quirk.
    
    - Camera2Client:
     - Detect partial result quirk
    - Camera3Device:
     - Accumulate all partial results together
     - Fire off 3A-only result once all 3A states are available
    - FrameProcessorBase:
     - Filter out partials, don't send to listeners
    - FrameProcessor:
     - Skip face detect on partials
     - Make sure to only handle a 3A update for a given frame once
     - Trigger AF notifications when AF mode or trigger changes, to
       properly detect all AF transitions.
    
    Bug: 11115603
    Change-Id: Iea8aa73c568701562a46071f7ea100624251d10b
    camera2: Don't race while dumping last frame metadata
    
    Bug: 11095203
    Change-Id: Icfb31e1719634b62004d6c15a95a9316e9642e4c
    Camera: fix the metadate parcel write issue
    
    Also rename the frameId to requestId to make it less confusing.
    
    Change-Id: I14a20b6fcabb86294afb31fc0c56397e185c1373
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera3: Make sure new metadata results signal other threads waiting
    
    - Also adds a lot of logging around shuffling around metadata frames
    
    Bug: 9007356
    Change-Id: I4285f4f55b4b899ea4928d43062c705619c8248a
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera2: Add flush support
    
    - On HAL2 devices, fall back to wait until idle
    - On HAL3 devices, call HAL flush method
    
    Bug: 9758581
    Change-Id: Ie1c570a15f6590a1ee6c271e3b989c48079b468a
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera2/3: Fix deadlock when starting recording before preview.
    
    Move 3A notification synthesis for HAL3 devices from
    Camera3Device::processCaptureResult to Camera2Client's
    FrameProcessor. This will ensure that calls to processCaptureResult
    from HAL can never block on Camera2Client internal mutexes.
    
    Bug: 9923891
    Change-Id: I5184649bf45c0807babe6b8c0e1239e959cd3480
    Camera2/3: Fix deadlock when starting recording before preview.
    
    Move 3A notification synthesis for HAL3 devices from
    Camera3Device::processCaptureResult to Camera2Client's
    FrameProcessor. This will ensure that calls to processCaptureResult
    from HAL can never block on Camera2Client internal mutexes.
    
    Bug: 9923891
    Change-Id: I5184649bf45c0807babe6b8c0e1239e959cd3480
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera2: Fix deadlock on shutdown due to client getting killed.
    
    When the binder connection dies and is the only holder of a strong
    pointer to the Camera2Client, disconnect is called from the
    destructor. At this point, all weak pointers to Camera2Client are no
    longer promotable, and lots of cleanup code paths are broken as a
    result.
    
    Rework all such code paths to not need the client pointer, and to
    discard image buffers that arrive during shutdown.
    
    Bug: 8696047
    Change-Id: Ic0672ecde7c1baaf65079f925a45bd5be45f1fb3
    Camera: fix waitUntilDrained log message
    
    Change-Id: Iab6197e0674752de7933dd812bff430a5c487c4b
    Camera: fix waitUntilDrained log message
    
    Change-Id: Iab6197e0674752de7933dd812bff430a5c487c4b
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Compile with warnings, fix warnings
    
    Change-Id: I557350abb32b0480f5da7dcecadfbe9edbe53361
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Fix trying to release HAL stream twice
    
    When we fail to disconnect the native window, StreamAdapter::release
    would fail and remain in the old (ALLOCATED) state, thus it thinks that
    we haven't released the HAL stream yet.
    
    With this change, ignore DEAD_OBJECT native window disconnect failures,
    so the state transitions to RELEASED and we don't double release HAL
    streams.
    
    Bug: 7258314
    Change-Id: I524893e4b4d6463d7b0a7ce32fb6f658afba8e11
    Camera2: Fix trying to release HAL stream twice
    
    When we fail to disconnect the native window, StreamAdapter::release
    would fail and remain in the old (ALLOCATED) state, thus it thinks that
    we haven't released the HAL stream yet.
    
    With this change, ignore DEAD_OBJECT native window disconnect failures,
    so the state transitions to RELEASED and we don't double release HAL
    streams.
    
    Bug: 7258314
    Change-Id: I524893e4b4d6463d7b0a7ce32fb6f658afba8e11
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera2: Handle client processes dying by closing camera resources
    
    CameraService now subscribes to binder death notifications
    for each client, and disconnects the client if the death happened
    without cleanly shutting down the client first.
    
    Bug: 7258314
    Change-Id: I7803836b589fd8f0dfe00f6c28a707b82012e751
    Camera2: Make sure to clean out reprocess streams on shutdown as well.
    
    Otherwise, streams may persist past expected lifetime.
    
    Bug: 6243944
    Change-Id: I901971b78baf9d577ea3812588dec3885232e7ef
    Camera2: Make sure to clean out reprocess streams on shutdown as well.
    
    Otherwise, streams may persist past expected lifetime.
    
    Bug: 6243944
    Change-Id: I901971b78baf9d577ea3812588dec3885232e7ef
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Debug and logging fixes.
    
    - Fix LOG_TAGs to work with standard logcat filtering.
    - Add ATRACE to Camera2Device
    - Shorten thread names to fit in 16 characters
    - Remove some ATRACEs to avoid flooding trace unnecessarily
    
    Bug: 7220520
    Change-Id: Ief8d677b5c8bb35d94e0f21b11b86505e83169ea
    Camera2: Clean up startup/shutdown sequences.
    
    - Close camera device on startup errors
    
    - Make sure all threads are shut down and the device is closed before
      returning from ICamera::disconnect.
    
    Bug: 7172680
    Change-Id: I98611448ec5f2311e6604fa8ee5f9dde7bfdd988
    Camera2: Clean up startup/shutdown sequences.
    
    - Close camera device on startup errors
    
    - Make sure all threads are shut down and the device is closed before
      returning from ICamera::disconnect.
    
    Bug: 7172680
    Change-Id: I98611448ec5f2311e6604fa8ee5f9dde7bfdd988
    Camera2: Clean up startup/shutdown sequences.
    
    - Close camera device on startup errors
    
    - Make sure all threads are shut down and the device is closed before
      returning from ICamera::disconnect.
    
    Bug: 7172680
    Change-Id: I98611448ec5f2311e6604fa8ee5f9dde7bfdd988
    Camera2: Clean up startup/shutdown sequences.
    
    - Close camera device on startup errors
    
    - Make sure all threads are shut down and the device is closed before
      returning from ICamera::disconnect.
    
    Bug: 7172680
    Change-Id: I98611448ec5f2311e6604fa8ee5f9dde7bfdd988
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Fix an issue where the "mFrameCount" field was accessed without its containing object
    
    Change-Id: I6077b61b3e718b9b44ff86ca669a59f96b0b256f
    Fix an issue where the "mFrameCount" field was accessed without its containing object
    
    Change-Id: I6077b61b3e718b9b44ff86ca669a59f96b0b256f
    Camera: set vendor_ops on camera metadata.
    
    This makes sure that vendor specific metadata can propogate through
    the framework.
    
    Change-Id: I3bd0ae4b889eb907caf7b305dbcb16abbbef0ea3
    Camera: set vendor_ops on camera metadata.
    
    This makes sure that vendor specific metadata can propogate through
    the framework.
    
    Change-Id: I3bd0ae4b889eb907caf7b305dbcb16abbbef0ea3
    Camera2: Factor out Camera2Client::Parameters
    
    Move the parameter structure and the various utility methods using it
    to its own class. Rename LockedParameters to SharedParameters to match
    the Mutex naming convention.
    
    Also move CameraMetadata to camera2 directory for organization.
    
    No functional changes.
    
    Bug: 6243944
    Change-Id: Ie60b535936ecfda9bf23361d52604abf515c83d0
    Camera2: Move frame processing to its own thread.
    
    To avoid blocking the HAL on possibly long-running binder calls,
    move frame receiption and processing to its own thread.
    
    Bug: 6243944
    Change-Id: I6385be4410b2f68e2331755027afc10c342187cf
    Camera2: Use CameraMetadata wrapper class.
    
    Wrap the use of the camera_metadata library inside a CameraMetadata
    class to avoid memory leaks, improve code clarity, and increase type
    safety.
    
    Bug: 6243944
    Change-Id: I90ca592b5875e27e4c58ea1ca680582dc3c3b56a
    Camera2: Add support for preview callbacks
    
    - Move camera overall state enum to be part of parameters
    - No longer use ICameraLock to guard access to overall state enum
    - Add callback flag management
    - Add callback stream and management
    
    Bug: 6243944
    
    Change-Id: Ideb3dc523a23c05e440e429ebf838b1900a96573
    Camera2: Skeleton for output frame processing, plus face detect
    
    - Plumbing for processing output metadata frames from the HAL
    - Support for passing face detection metadata from said frames
      to the application.
    - Switch calls on ICameraClient interface to use separate mutex to
      avoid deadlock scenarios with messages being communicated from the
      HAL to the camera user while calls from the user to the service are
      active.
    
    Bug: 6243944
    
    Change-Id: Id4cf821d9c5c3c0069be4c0f669874b6ff0d1ecd
    Camera2: Swap AF notification order, minor bug fix.
    
    In continuous AF modes, when an AF trigger/cancel is received in the
    middle of a passive AF scan, we want to send both an AF move stop
    callback and an AF done callback. Swap the order of sending to
    simplify life when the app just wants to pay attention to the AF done
    callback during an active AF trigger.
    
    Bug: 6243944
    Change-Id: I127d1675bc37ef828ef89c70b8cfab75f9428a2f
    Camera2: Add trigger support, and implement autofocus
    
    - Add skeletons for all triggering actions into Camera2Device
    - Add support for AF triggers to HAL
    - Add support for AF notifications from HAL
    
    Bug: 6243944
    Change-Id: I21025440849ae41f7083e1dcb72c99f8e5b2d5f7
    Update state only if calls to native window are successful
    
    Change-Id: I7a20f3ca787e11ca9c8c904b257e3c8a4e529136
    Camera2: Reduce redundant device dumpsys
    
    Bug: 6243944
    Change-Id: Ifdc15ee62156a7adfd133f0d0d8b772dd1e9d5a3
    Camera2: Add notification handling skeleton.
    
    Wire up skeleton methods for handling all currently defined
    notifications.
    
    Bug: 6243944
    Change-Id: I84b3f60111416ba6fbcdb086f1310225142e2b70
    Camera2: Minor logging updates.
    
    Improve double-verbose logging, report a few more errors/startup
    conditions.
    
    Bug: 6243944
    Change-Id: I2e814f786b35f57b63220d1b7c39f39cb6c3ace3
    Camera2: Improve formatting of debugging dump
    
    Bug: 6243944
    Change-Id: Id8730357f3adcd96923132f9f702e296e0dfd357
    Camera2: Add more verbose logging
    
    Until ATRACE works in emulator, add more verbose logs to help debugging
    
    Bug: 6243944
    Change-Id: Ic5fbf764f2717e5edd05d37e0f7d826f1d494179
    Camera2: Add recording support
    
    - Support startRecording/stopRecording
    - Support lock/unlock/connect
    - Some rearrangement of class definitions for clarity/consistency
    
    Bug: 6243944
    
    Change-Id: I00c600a798572d2f69bb3f2bab3d79e4bd9a91e5
    Update ANativeWindow client code for sync
    
    This change updates all the uses of ANativeWindow to use the new ANW functions
    that accept and return Sync HAL fence file descriptors.
    
    Change-Id: Id7db42d8d6380f8b440d88476ce9211c6225fb16
    Camera2: Move per-frame verbose logs to separate log enable
    
    Bug: 6243944
    Change-Id: I5850f8ceb2e603aa555cc71328f64d6a928694a0
    Camera2: Handle preview orientation changes.
    
    - Process sendCommand(CAMERA_CMD_SET_DISPLAY_ORIENTATION)
    
    Bug: 6243944
    Change-Id: I92d3bb13312d475703325230487d660a1cb7e0e5
    Camera2: Add more dump information, connect HAL device dump
    
    Bug: 6243944
    Change-Id: I79a302f68786d815b9ab9984dbb31d237522416b
    Camera2: Improve error checking and debug logs.
    
    Bug: 6243944
    Change-Id: Ie61d89b733af7d1f653443bf64b767456127a455
    Camera2: Still image support
    
    - Add stream / request creation for still image capture
    - Add takePicture call
    - Add callback handler
    - Fix shutdown bugs (wait until requests have drained)
    
    Bug: 6243944
    
    Change-Id: Id73eb7090e61b40b90348d1eb262f641ea5f3229
    Camera2: Copy metadata buffers for streaming.
    
    Using the passed-in buffer directly is incorrect; copy them so that
    concurrent access can be controlled, and ownership is clear.
    
    Bug: 6243944
    Change-Id: Iad22c0dc166b7739e6c5dbfa39aac631b974c95a
    Camera2: Improve ANativeWindow handling
    
    - Properly set up scaling mode and transform on stream create
    - More error checking/verbose logs on enqueue/dequeue
    
    Bug: 6243944
    Change-Id: Ic814e7f84a2016ed46ee2eb6832474f741f7cfd1
    Camera service: Minimally functional preview for camera 2 devices.
    
    - Camera app starts up
    - Basic preview operation with defaults
    - Shutdown sequence is very minimal
    
    Bug: 6243944
    
    Change-Id: I67673b7c1fc08956d218d99f9171e74a7a82bf07
    Camera service: Initialization for camera2 clients and devices
    
    - Refactor initialization code to hide device type from CameraService
    - Add metadata queue class to Camera2Device
    - Initialization of Camera2Device, Camera2Client
    - Conversion from HAL2 device static metadata to camera API
      parameters.
    
    Bug: 6243944
    Change-Id: I524145b45438e906d8493dae202704ce8f090aeb
    Camera service: Add skeleton support for camera2 devices.
    
    - Add Camera2Client, which maps the current android.hardware.Camera
      API to the new camera2 semantics
    - Add Camera2Device, a C++ wrapper for the HAL camera 2 device
    
    No functionality besides create/destroy; all client methods return
    error or null.
    
    Bug: 6243944
    Change-Id: I6bd5136fa1efd8279b8cd2d9847d9b0bb2862294
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera2: Add flush support
    
    - On HAL2 devices, fall back to wait until idle
    - On HAL3 devices, call HAL flush method
    
    Bug: 9758581
    Change-Id: Ie1c570a15f6590a1ee6c271e3b989c48079b468a
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera2/3: Fix deadlock when starting recording before preview.
    
    Move 3A notification synthesis for HAL3 devices from
    Camera3Device::processCaptureResult to Camera2Client's
    FrameProcessor. This will ensure that calls to processCaptureResult
    from HAL can never block on Camera2Client internal mutexes.
    
    Bug: 9923891
    Change-Id: I5184649bf45c0807babe6b8c0e1239e959cd3480
    Camera2/3: Fix deadlock when starting recording before preview.
    
    Move 3A notification synthesis for HAL3 devices from
    Camera3Device::processCaptureResult to Camera2Client's
    FrameProcessor. This will ensure that calls to processCaptureResult
    from HAL can never block on Camera2Client internal mutexes.
    
    Bug: 9923891
    Change-Id: I5184649bf45c0807babe6b8c0e1239e959cd3480
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera: Move CameraMetadata.h from service to client library
    
    Change-Id: I940ce86f318f37ae5b73f912a6e589415150125f
    Camera2: Don't touch frame counter on output frames.
    
    Bug: 7357069
    Change-Id: I9cd0cdcc23959bfecced5f47bb9e8c59c997dade
    Camera2: Don't touch frame counter on output frames.
    
    Bug: 7357069
    Change-Id: I9cd0cdcc23959bfecced5f47bb9e8c59c997dade
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Synchronize mode changes and triggers
    
    Make sure that changes to various parameters have reached the HAL
    before triggering asynchronous events like autofocus or precapture
    metering.
    
    Bug: 7107220
    Change-Id: I3c50038de1671968eb32004ce538435121934e7e
    Camera2: Clean up startup/shutdown sequences.
    
    - Close camera device on startup errors
    
    - Make sure all threads are shut down and the device is closed before
      returning from ICamera::disconnect.
    
    Bug: 7172680
    Change-Id: I98611448ec5f2311e6604fa8ee5f9dde7bfdd988
    Camera2: Clean up startup/shutdown sequences.
    
    - Close camera device on startup errors
    
    - Make sure all threads are shut down and the device is closed before
      returning from ICamera::disconnect.
    
    Bug: 7172680
    Change-Id: I98611448ec5f2311e6604fa8ee5f9dde7bfdd988
    Camera2: Clean up startup/shutdown sequences.
    
    - Close camera device on startup errors
    
    - Make sure all threads are shut down and the device is closed before
      returning from ICamera::disconnect.
    
    Bug: 7172680
    Change-Id: I98611448ec5f2311e6604fa8ee5f9dde7bfdd988
    Camera2: Clean up startup/shutdown sequences.
    
    - Close camera device on startup errors
    
    - Make sure all threads are shut down and the device is closed before
      returning from ICamera::disconnect.
    
    Bug: 7172680
    Change-Id: I98611448ec5f2311e6604fa8ee5f9dde7bfdd988
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Basic ZSL and precapture trigger support.
    
    - Add capture sequencer to control still image capture process
    - Use precapture trigger for standard capture in sequencer
    - Add infrastructure for reprocessing streams
    - Add ZSL processor to maintain ZSL queue
    - Add ZSL capture sequence to sequencer
    
    This patch sets up ZSL mode and precapture triggers.
    
    For now, to enable zsl mode, set the system property camera.zsl_mode
    to 1.
    
    Bug: 6243944
    
    Change-Id: Icf8cb1a83a7c11a152a11007c8f3c54f8ea1c70c
    Camera2: Factor out Camera2Client::Parameters
    
    Move the parameter structure and the various utility methods using it
    to its own class. Rename LockedParameters to SharedParameters to match
    the Mutex naming convention.
    
    Also move CameraMetadata to camera2 directory for organization.
    
    No functional changes.
    
    Bug: 6243944
    Change-Id: Ie60b535936ecfda9bf23361d52604abf515c83d0
    Camera2: Move frame processing to its own thread.
    
    To avoid blocking the HAL on possibly long-running binder calls,
    move frame receiption and processing to its own thread.
    
    Bug: 6243944
    Change-Id: I6385be4410b2f68e2331755027afc10c342187cf
    Camera2: Use CameraMetadata wrapper class.
    
    Wrap the use of the camera_metadata library inside a CameraMetadata
    class to avoid memory leaks, improve code clarity, and increase type
    safety.
    
    Bug: 6243944
    Change-Id: I90ca592b5875e27e4c58ea1ca680582dc3c3b56a
    Camera2: Skeleton for output frame processing, plus face detect
    
    - Plumbing for processing output metadata frames from the HAL
    - Support for passing face detection metadata from said frames
      to the application.
    - Switch calls on ICameraClient interface to use separate mutex to
      avoid deadlock scenarios with messages being communicated from the
      HAL to the camera user while calls from the user to the service are
      active.
    
    Bug: 6243944
    
    Change-Id: Id4cf821d9c5c3c0069be4c0f669874b6ff0d1ecd
    Camera2: Add trigger support, and implement autofocus
    
    - Add skeletons for all triggering actions into Camera2Device
    - Add support for AF triggers to HAL
    - Add support for AF notifications from HAL
    
    Bug: 6243944
    Change-Id: I21025440849ae41f7083e1dcb72c99f8e5b2d5f7
    Camera2: Add notification handling skeleton.
    
    Wire up skeleton methods for handling all currently defined
    notifications.
    
    Bug: 6243944
    Change-Id: I84b3f60111416ba6fbcdb086f1310225142e2b70
    Camera2: Add recording support
    
    - Support startRecording/stopRecording
    - Support lock/unlock/connect
    - Some rearrangement of class definitions for clarity/consistency
    
    Bug: 6243944
    
    Change-Id: I00c600a798572d2f69bb3f2bab3d79e4bd9a91e5
    Camera2: Handle preview orientation changes.
    
    - Process sendCommand(CAMERA_CMD_SET_DISPLAY_ORIENTATION)
    
    Bug: 6243944
    Change-Id: I92d3bb13312d475703325230487d660a1cb7e0e5
    Camera2: Add more dump information, connect HAL device dump
    
    Bug: 6243944
    Change-Id: I79a302f68786d815b9ab9984dbb31d237522416b
    Camera2: Still image support
    
    - Add stream / request creation for still image capture
    - Add takePicture call
    - Add callback handler
    - Fix shutdown bugs (wait until requests have drained)
    
    Bug: 6243944
    
    Change-Id: Id73eb7090e61b40b90348d1eb262f641ea5f3229
    Camera2: Copy metadata buffers for streaming.
    
    Using the passed-in buffer directly is incorrect; copy them so that
    concurrent access can be controlled, and ownership is clear.
    
    Bug: 6243944
    Change-Id: Iad22c0dc166b7739e6c5dbfa39aac631b974c95a
    Camera service: Minimally functional preview for camera 2 devices.
    
    - Camera app starts up
    - Basic preview operation with defaults
    - Shutdown sequence is very minimal
    
    Bug: 6243944
    
    Change-Id: I67673b7c1fc08956d218d99f9171e74a7a82bf07
    Camera service: Initialization for camera2 clients and devices
    
    - Refactor initialization code to hide device type from CameraService
    - Add metadata queue class to Camera2Device
    - Initialization of Camera2Device, Camera2Client
    - Conversion from HAL2 device static metadata to camera API
      parameters.
    
    Bug: 6243944
    Change-Id: I524145b45438e906d8493dae202704ce8f090aeb
    Camera service: Add skeleton support for camera2 devices.
    
    - Add Camera2Client, which maps the current android.hardware.Camera
      API to the new camera2 semantics
    - Add Camera2Device, a C++ wrapper for the HAL camera 2 device
    
    No functionality besides create/destroy; all client methods return
    error or null.
    
    Bug: 6243944
    Change-Id: I6bd5136fa1efd8279b8cd2d9847d9b0bb2862294
    Fix race condition for non-started fast tracks
    
    This required re-implementing how fast tracks are considered active.
    Now, they use the same logic as normal tracks, except underrun is ignored.
    
    Other changes:
     - add framesReady() to AudioBufferProvider interface
     - rebased
     - add track underrun counter state to fast mixer dump state
     - move dumpsys header to Track::appendDumpHeader()
       so it closer to where tracks are dumped
     - display track state in dumpsys as a character code
     - measure and display warmup time and cycles in dumpsys
     - copy in the presentation complete code
     - add ExtendedAudioBufferProvider for framesReady() which returns size_t
     - simplify underrun tracking
     - deferred reset track after stop()
     - add comments
    
    Change-Id: I7db8821bc565230ec76da1f9380fe3fb09735e5b
    Use scheduling policy service
    
    Change-Id: I3c09da1dc0de5039d0c15ce7fb2bc373fa398712
    Factor out and speed up permission-checking code
    
    Use the caching permission check for dump to save IPC.
    
    Cache getpid() to save kernel call for other permission checks.
    
    The C runtime library getpid() can't cache due to a fork
    race condition, but we know that mediaserver doesn't fork.
    
    Don't construct String16 on the stack.
    
    Change-Id: I6be6161dae5155d39ba6ed6228e7683e67be34ed
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Camera API2: Add support for partial result quirk
    
    - Camera3Device: Include requestId in partial 3A results
    - FrameProcessorBase: Add support for partial result listeners
    - CameraDeviceClient: Listen and forward partial results to client
    
    Bug: 11115603
    Change-Id: If1cc6bbc32932742ac142c058688761ebf6a8024
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera2 API: Hack: Always use async mode with GLConsumer
    
    Until a cleaner solution is implemented, force buffer queues to
    consumers that set USAGE_HW_TEXTURE usage to be asynchronous.
    
    Bug: 10949105
    Change-Id: I69e6b02b773831396767c282ce8c5936c5d41f03
    Camera2 API: Hack: Always use async mode with GLConsumer
    
    Until a cleaner solution is implemented, force buffer queues to
    consumers that set USAGE_HW_TEXTURE usage to be asynchronous.
    
    Bug: 10949105
    Change-Id: I69e6b02b773831396767c282ce8c5936c5d41f03
    camera2: Tell all streams to ignore global device UI rotation
    
    - Also use android.sensor.orientation to set the right transform
      flags automatically.
    
    Bug: 10804238
    Change-Id: I10caf8331f19e107c461696963cc10f597c91d83
    camera2: Tell all streams to ignore global device UI rotation
    
    - Also use android.sensor.orientation to set the right transform
      flags automatically.
    
    Bug: 10804238
    Change-Id: I10caf8331f19e107c461696963cc10f597c91d83
    Camera: Correct stream id types
    
    Bug: 10604704
    Change-Id: I223ac5d200eb6439c08955fb7ad586592099fbae
    camera: Fix deadlock when sending callbacks during disconnect
    
    Bug: 10552448
    Change-Id: Ie93ba744ae6705aa657f980ae8e08ec624feeb39
    Camera2: Add flush support
    
    - On HAL2 devices, fall back to wait until idle
    - On HAL3 devices, call HAL flush method
    
    Bug: 9758581
    Change-Id: Ie1c570a15f6590a1ee6c271e3b989c48079b468a
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    camera2 api: Override default RGBx formats to IMPLEMENTATION_DEFINED
    
    Bug: 9487482
    Change-Id: I09d3b4e41454d350c4bc7b1f8e893c3dad655e73
    camera2: Implement ICameraDeviceUser::waitUntilIdle
    
    Also fixed some logging typo
    
    Change-Id: Ib254bdb137dca10b12595c23aeb1c53097423425
    camera2: Fix request ID bug
    
    Wrong request id was pushed in request list.
    
    Change-Id: I55bf7ae84ca41eec79db1a81d2cde35beaa2a6b9
    camera2: Implement ICameraDeviceUser::getCameraInfo
    
    Bug: 9529161
    Change-Id: I927e39c124cd5fb19e38423506f4463acc381cb0
    Camera2Api: Creating a JPEG stream needs to use the right size
    
    JPEG streams have variable size, so use the HAL-provided max size
    to size the stream buffers.
    
    Change-Id: Ie6900bc9ece6e972eae93fca6aca779224c9bfc6
    Initial implementation of android.hardware.photography.CameraDevice (service)
    
    * Verified preview streaming requests
    * Other things *should* work but unverified / unimplemented in client side
    
    Missing:
    * CameraService needs to return static camera info metadata
    
    Bug: 9213377
    Change-Id: I71568560fcf18d0e2b408ed1c4d0066647314868
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    camera2: Tell all streams to ignore global device UI rotation
    
    - Also use android.sensor.orientation to set the right transform
      flags automatically.
    
    Bug: 10804238
    Change-Id: I10caf8331f19e107c461696963cc10f597c91d83
    camera2: Tell all streams to ignore global device UI rotation
    
    - Also use android.sensor.orientation to set the right transform
      flags automatically.
    
    Bug: 10804238
    Change-Id: I10caf8331f19e107c461696963cc10f597c91d83
    Camera2: Add flush support
    
    - On HAL2 devices, fall back to wait until idle
    - On HAL3 devices, call HAL flush method
    
    Bug: 9758581
    Change-Id: Ie1c570a15f6590a1ee6c271e3b989c48079b468a
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    camera2: Implement ICameraDeviceUser::waitUntilIdle
    
    Also fixed some logging typo
    
    Change-Id: Ib254bdb137dca10b12595c23aeb1c53097423425
    camera2: Implement ICameraDeviceUser::getCameraInfo
    
    Bug: 9529161
    Change-Id: I927e39c124cd5fb19e38423506f4463acc381cb0
    Initial implementation of android.hardware.photography.CameraDevice (service)
    
    * Verified preview streaming requests
    * Other things *should* work but unverified / unimplemented in client side
    
    Missing:
    * CameraService needs to return static camera info metadata
    
    Bug: 9213377
    Change-Id: I71568560fcf18d0e2b408ed1c4d0066647314868
    ProCamera: Add security permission checks for disabling transmit LED
    
    Bug: 8554573
    Change-Id: Ie909908a4cab3700bd622282e8342e8fa5b72376
    ProCamera: Add security permission checks for disabling transmit LED
    
    Bug: 8554573
    Change-Id: Ie909908a4cab3700bd622282e8342e8fa5b72376
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    (Camera)ProCamera: Remove unused functions from binder interface
    
    Change-Id: I0582268cef6e84b630bc87c8a03dcd69d54c440d
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    CameraService: Refactor Camera2Client to share a base with ProCameraClient
    
    Change-Id: I249e2a0fc47ae84f29c9d9c4a223fba13da3ee66
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    Camera: Drop ProCamera connections when a Camera connection happens
    
    * Also adds an ICameraServiceListener with available/not available statuses
    
    Bug: 8291653
    Change-Id: I24680f1a2dc109510caf451cf7c7bd180b670d84
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    CameraService and Stagefright: Support AppOps
    
    Camera:
    - Signal to AppOpsService when camera usage starts and stops
    - Listen to permissions revocations and act on them
    - Currently just kill camera connection when permissions lost
    
    Stagefright:
    - Pass on client name, UID to camera as needed
    
    Bug: 8181262
    Change-Id: I9e33c9d05e9daa77dbb2d795045d08eb887ec8f0
    ProCamera: Add getInfo for getting static metadata (and a test)
    
    Change-Id: I3b87dfbc621d98bf41f37a892a1012baf85b5166
    ProCamera: Add getInfo for getting static metadata (and a test)
    
    Change-Id: I3b87dfbc621d98bf41f37a892a1012baf85b5166
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: ProCamera - implement onResultReceived callback for metadata callbacks
    
    Change-Id: I46775402b007244bc383d6343a620eebbd492aad
    Camera: Change ProCamera to take IGraphicBufferProducer
    
    Change-Id: Iec62eead6d179aa5486f7719143340976bb76e7d
    Camera: Change ProCamera to take IGraphicBufferProducer
    
    Change-Id: Iec62eead6d179aa5486f7719143340976bb76e7d
    Camera: ProCamera2Client implement createStream,createDefaultRequest
    
    The StreamingImage unit test should now work when TEST_DISPLAY_SECS is set.
    
    Change-Id: I9cf3ad5bd5a76096ab21bd39e631d636c4ff3d3f
    Camera: ProCamera2Client implement createStream,createDefaultRequest
    
    The StreamingImage unit test should now work when TEST_DISPLAY_SECS is set.
    
    Change-Id: I9cf3ad5bd5a76096ab21bd39e631d636c4ff3d3f
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    Camera: ProCamera2Client - add createStream (service is stubbed) and unit test
    
    Change-Id: I1ae7ba9b24f5883c214c19a7ed0eaf0c802d69c1
    separte producer and consumer interfaces
    
    Bug: 9265647
    Change-Id: Iefabc11e4bd2e2e8ffd31160476c450affe6629c
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera3: Refactor stream code to be DRY
    
    Bug: 8851039
    Change-Id: Iaac2926bfa25dd6e9db8b307765d4fe709b88d21
    Camera3: Refactor stream code to be DRY
    
    Bug: 8851039
    Change-Id: Iaac2926bfa25dd6e9db8b307765d4fe709b88d21
    camera3: Manage fences properly when buffers are returned with an error
    
    Bug: 8622089
    Change-Id: I4df0258d6803d460d4dd98f0a80829eb844ca30d
    camera3: Manage fences properly when buffers are returned with an error
    
    Bug: 8622089
    Change-Id: I4df0258d6803d460d4dd98f0a80829eb844ca30d
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera3: Refactor stream code to be DRY
    
    Bug: 8851039
    Change-Id: Iaac2926bfa25dd6e9db8b307765d4fe709b88d21
    Camera3: Refactor stream code to be DRY
    
    Bug: 8851039
    Change-Id: Iaac2926bfa25dd6e9db8b307765d4fe709b88d21
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    separte producer and consumer interfaces
    
    Bug: 9265647
    Change-Id: Iefabc11e4bd2e2e8ffd31160476c450affe6629c
    Camera3: Provide consumer usage flags to HAL for each stream
    
    At stream configure time, pass on the stream's consumer usage flags
    to the HAL, to speed up final hardware configuration.
    
    Bug: 9592202
    Change-Id: Ie467be053be36a09e482f5f05cad65df42d66476
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    update to new Consumer APIs
    
    Change-Id: I3c5d4be2a2e8783fbf98b3e268fd02658f71dc7d
    always pass the BufferQueue explicitely to consumers
    
    Change-Id: Ic2d9a9cf184a482b3c78a481ed693ee32df5ca13
    Camera3: Refactor stream code to be DRY
    
    Bug: 8851039
    Change-Id: Iaac2926bfa25dd6e9db8b307765d4fe709b88d21
    Camera3: Refactor stream code to be DRY
    
    Bug: 8851039
    Change-Id: Iaac2926bfa25dd6e9db8b307765d4fe709b88d21
    Camera3: Add input stream support
    
    - Untested with actual CAMERA3_STREAM_INPUT streams.
    
    Bug: 8629088
    
    Change-Id: Ia0c21ef0a2c951e401ea8babd15d3cceb4bb25a1
    Camera3: Add input stream support
    
    - Untested with actual CAMERA3_STREAM_INPUT streams.
    
    Bug: 8629088
    
    Change-Id: Ia0c21ef0a2c951e401ea8babd15d3cceb4bb25a1
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera3: Provide consumer usage flags to HAL for each stream
    
    At stream configure time, pass on the stream's consumer usage flags
    to the HAL, to speed up final hardware configuration.
    
    Bug: 9592202
    Change-Id: Ie467be053be36a09e482f5f05cad65df42d66476
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera3: Add more tracing
    
    Change-Id: I5f5d0d3f37244f19446c473db70373bdf16cce56
    camera3: Don't try to disconnect stream native windows more than once
    
    This fixes the multiple-disconnect-from-BufferQueue bug.
    
    (In logs)
    BufferQueue: [SurfaceView] disconnect: connected to another api (cur=0, req=4)
    
    Bug: 9114681
    Change-Id: I21ae1c5bd993701eea13648aa9994979a24eb210
    update to Fence::waitForever() API change
    
    Bug: 8988871
    Change-Id: I24a2620d356f3bb6207ed834c79fd3e48b429695
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add input stream support
    
    - Untested with actual CAMERA3_STREAM_INPUT streams.
    
    Bug: 8629088
    
    Change-Id: Ia0c21ef0a2c951e401ea8babd15d3cceb4bb25a1
    Camera3: Add input stream support
    
    - Untested with actual CAMERA3_STREAM_INPUT streams.
    
    Bug: 8629088
    
    Change-Id: Ia0c21ef0a2c951e401ea8babd15d3cceb4bb25a1
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Add unit test infrastructure for libcameraclient
    
    Change-Id: I957538663ae8332d26f3640c63a75efc79f4ac5c
    Permit conditional registry of mediaserver extensions
    
    Change-Id: I94dc0d038e702dfe1779a50a1de0fae9bad15057
    Factor out and speed up permission-checking code
    
    Use the caching permission check for dump to save IPC.
    
    Cache getpid() to save kernel call for other permission checks.
    
    The C runtime library getpid() can't cache due to a fork
    race condition, but we know that mediaserver doesn't fork.
    
    Don't construct String16 on the stack.
    
    Change-Id: I6be6161dae5155d39ba6ed6228e7683e67be34ed
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera3: Provide consumer usage flags to HAL for each stream
    
    At stream configure time, pass on the stream's consumer usage flags
    to the HAL, to speed up final hardware configuration.
    
    Bug: 9592202
    Change-Id: Ie467be053be36a09e482f5f05cad65df42d66476
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera3: Refactor stream code to be DRY
    
    Bug: 8851039
    Change-Id: Iaac2926bfa25dd6e9db8b307765d4fe709b88d21
    Camera3: Refactor stream code to be DRY
    
    Bug: 8851039
    Change-Id: Iaac2926bfa25dd6e9db8b307765d4fe709b88d21
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera API2: Add support for partial result quirk
    
    - Camera3Device: Include requestId in partial 3A results
    - FrameProcessorBase: Add support for partial result listeners
    - CameraDeviceClient: Listen and forward partial results to client
    
    Bug: 11115603
    Change-Id: If1cc6bbc32932742ac142c058688761ebf6a8024
    Camera HAL3/API1: Add support for the partial result quirk.
    
    - Camera2Client:
     - Detect partial result quirk
    - Camera3Device:
     - Accumulate all partial results together
     - Fire off 3A-only result once all 3A states are available
    - FrameProcessorBase:
     - Filter out partials, don't send to listeners
    - FrameProcessor:
     - Skip face detect on partials
     - Make sure to only handle a 3A update for a given frame once
     - Trigger AF notifications when AF mode or trigger changes, to
       properly detect all AF transitions.
    
    Bug: 11115603
    Change-Id: Iea8aa73c568701562a46071f7ea100624251d10b
    Camera: Save 1 frame time for takePicture call
    
    Move the latest request signal call right before submitting request to HAL,
    which avoids unnecessary 1 frame time wait.
    
    Also fix request status constructor issue, and the log tag for Camera2Client.
    
    Bug: 10570497
    Change-Id: I0b1818658bee9983b117e49a5a00f1aab515c567
    Camera3: track request status in inflight queue
    
    Bug: 9758581
    Change-Id: I1d7135cd0932bd6b453acabfeb9a553985c887bc
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera3: Always set a trigger ID for an active trigger
    
    This is to work around HAL implementations that expect to see an
    ID for every trigger.
    
    Use a dummy trigger ID of 1, since 0 has special meaning for older
    HALs.
    
    Bug: 10720617
    Change-Id: I9cb1b8dbcb113cb9e737e5adb04032fd61a54c12
    camera3: Dump latest request sent with dumpsys
    
    Bug: 10606535
    Change-Id: I0dd5ca3e09f45701659ab9ebd3b51939a2f6e6ba
    Camera3: Be busy as soon as work arrives.
    
    RequestThread's internal busy flag (mPaused) was not being immediately
    set when new work was submitted to it. This allowed for a race
    condition where a capture() followed by an immediate
    waitUntilDrained() would immediately return from the wait.
    
    Set the mPaused flag to false immediately in capture() and
    setStreamingRequest() to avoid this, instead of waiting until the end
    of the next RequestThread iteration.
    
    Bug: 10531739
    Change-Id: I54a79fe5361d527ec717f41ad805e9b319a48cd8
    Camera2: Add flush support
    
    - On HAL2 devices, fall back to wait until idle
    - On HAL3 devices, call HAL flush method
    
    Bug: 9758581
    Change-Id: Ie1c570a15f6590a1ee6c271e3b989c48079b468a
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera2/3: Fix deadlock when starting recording before preview.
    
    Move 3A notification synthesis for HAL3 devices from
    Camera3Device::processCaptureResult to Camera2Client's
    FrameProcessor. This will ensure that calls to processCaptureResult
    from HAL can never block on Camera2Client internal mutexes.
    
    Bug: 9923891
    Change-Id: I5184649bf45c0807babe6b8c0e1239e959cd3480
    Camera2/3: Fix deadlock when starting recording before preview.
    
    Move 3A notification synthesis for HAL3 devices from
    Camera3Device::processCaptureResult to Camera2Client's
    FrameProcessor. This will ensure that calls to processCaptureResult
    from HAL can never block on Camera2Client internal mutexes.
    
    Bug: 9923891
    Change-Id: I5184649bf45c0807babe6b8c0e1239e959cd3480
    Camera3: Skip no-op stream configurations.
    
    If configuring the same set of streams more than once, don't actually
    call into the HAL for the second and subsequent configure calls, since
    they're no-ops.
    
    This can speed up camera operation substantially if the
    HAL implementation does not detect no-ops on its own and does a full
    shutdown/restart on each configure call.
    
    Bug: 9392513
    Change-Id: I23baf4acbae2304735899adcf8e17565fa94d31d
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add input stream support
    
    - Untested with actual CAMERA3_STREAM_INPUT streams.
    
    Bug: 8629088
    
    Change-Id: Ia0c21ef0a2c951e401ea8babd15d3cceb4bb25a1
    Camera3: Add input stream support
    
    - Untested with actual CAMERA3_STREAM_INPUT streams.
    
    Bug: 8629088
    
    Change-Id: Ia0c21ef0a2c951e401ea8babd15d3cceb4bb25a1
    Camera3: Allow multiple process_capture_result calls per request
    
    To simplify HAL implementation, allow the results for a single
    capture request to be sent from the HAL across multiple calls
    to process_capture_request.
    
    This requires that the HAL must call notify() with the SHUTTER message
    to indicate start of exposure time, before the first call to
    process_capture_result for a given frame.
    
    Bug: 8565103
    
    Change-Id: I6a61449725f98af88769fafa07736848a226dad2
    Camera3: Allow multiple process_capture_result calls per request
    
    To simplify HAL implementation, allow the results for a single
    capture request to be sent from the HAL across multiple calls
    to process_capture_request.
    
    This requires that the HAL must call notify() with the SHUTTER message
    to indicate start of exposure time, before the first call to
    process_capture_result for a given frame.
    
    Bug: 8565103
    
    Change-Id: I6a61449725f98af88769fafa07736848a226dad2
    Camera3: Improve error logging
    
    In preparation for supporting fragmented result calls.
    
    Bug: 8565103
    Change-Id: Id834637d7cbecf7b550333beedab3281b5400748
    Camera3: Improve error logging
    
    In preparation for supporting fragmented result calls.
    
    Bug: 8565103
    Change-Id: Id834637d7cbecf7b550333beedab3281b5400748
    Camera: implement takePicture for HAL3-using clients
    
    * Implements Camera2Device-style triggers by mutating the next request
    * Implements Camera3Device::waitUntilRequestReceived
    
    Change-Id: Ie0b5591158872513a0bffbfab33123cf18dacf8a
    Camera: implement takePicture for HAL3-using clients
    
    * Implements Camera2Device-style triggers by mutating the next request
    * Implements Camera3Device::waitUntilRequestReceived
    
    Change-Id: Ie0b5591158872513a0bffbfab33123cf18dacf8a
    Camera: Add output side to camera3 HAL device
    
    - Notifications
    - Result queue and processing
    
    Change-Id: Id6b4746708ce6c6dcc7262666b6ac3130fa3d225
    Camera: Add output side to camera3 HAL device
    
    - Notifications
    - Result queue and processing
    
    Change-Id: Id6b4746708ce6c6dcc7262666b6ac3130fa3d225
    Camera: Add input side to camera3 HAL device
    
    - Stream creation/deletion
    - Request submission
    - Request thread loop
    - Add get() to CameraMetadata to allow HAL submission while retaining
      ownership.
    
    Change-Id: I271f72bcbe9557eded43cbcbfe789109857f8144
    Camera: Add input side to camera3 HAL device
    
    - Stream creation/deletion
    - Request submission
    - Request thread loop
    - Add get() to CameraMetadata to allow HAL submission while retaining
      ownership.
    
    Change-Id: I271f72bcbe9557eded43cbcbfe789109857f8144
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Fix deadlock in Camera3OutputStream
    
    process capture request thread, process capture result and setParameter
    binder threads can run into circular locking situation when acquiring
    StreamingProcessor lock, Camera3Stream lock, and bufferQueue lock.
    Releasing the Camera3Stream lock briefly in process capture request
    thread getbuffer call can break this deadlock.
    
    Bug: 11016037
    Change-Id: If08d4b134c26be26039b1d5363759e60f911bad6
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera3: Provide consumer usage flags to HAL for each stream
    
    At stream configure time, pass on the stream's consumer usage flags
    to the HAL, to speed up final hardware configuration.
    
    Bug: 9592202
    Change-Id: Ie467be053be36a09e482f5f05cad65df42d66476
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    camera2: Implement ICameraDeviceUser::waitUntilIdle
    
    Also fixed some logging typo
    
    Change-Id: Ib254bdb137dca10b12595c23aeb1c53097423425
    camera3: Error on minimum buffer count
    
    Change-Id: Idf16de20e940e411286ec3e477534b36ef1c9b11
    Camera3: Fix the deadlock during recording pinch zooming
    
    When zooming during recording, hal callback thread and request update thread run
    into deadlock due to lock circular dependency. This change release lock during
    queuebuffer in callback thread to break the dependency.
    
    Bug: 9091576
    Change-Id: Ia7b3f0ec17573cb32a5696dcde419ca28f42cfb8
    Camera3: Fix the deadlock during recording pinch zooming
    
    When zooming during recording, hal callback thread and request update thread run
    into deadlock due to lock circular dependency. This change release lock during
    queuebuffer in callback thread to break the dependency.
    
    Bug: 9091576
    Change-Id: Ia7b3f0ec17573cb32a5696dcde419ca28f42cfb8
    Camera3: Refactor stream code to be DRY
    
    Bug: 8851039
    Change-Id: Iaac2926bfa25dd6e9db8b307765d4fe709b88d21
    Camera3: Refactor stream code to be DRY
    
    Bug: 8851039
    Change-Id: Iaac2926bfa25dd6e9db8b307765d4fe709b88d21
    Camera3: Fix initial orientation configuration.
    
    One call to set orientation too many.
    
    Bug: 8683719
    Change-Id: I4b776fc8665eed940a1f18a6f617be4f1406e41a
    Camera3: Fix initial orientation configuration.
    
    One call to set orientation too many.
    
    Bug: 8683719
    Change-Id: I4b776fc8665eed940a1f18a6f617be4f1406e41a
    Camera3: Fix initial orientation configuration.
    
    One call to set orientation too many.
    
    Bug: 8683719
    Change-Id: I4b776fc8665eed940a1f18a6f617be4f1406e41a
    camera3: Manage fences properly when buffers are returned with an error
    
    Bug: 8622089
    Change-Id: I4df0258d6803d460d4dd98f0a80829eb844ca30d
    camera3: Manage fences properly when buffers are returned with an error
    
    Bug: 8622089
    Change-Id: I4df0258d6803d460d4dd98f0a80829eb844ca30d
    Camera3: Add input stream support
    
    - Untested with actual CAMERA3_STREAM_INPUT streams.
    
    Bug: 8629088
    
    Change-Id: Ia0c21ef0a2c951e401ea8babd15d3cceb4bb25a1
    Camera3: Add input stream support
    
    - Untested with actual CAMERA3_STREAM_INPUT streams.
    
    Bug: 8629088
    
    Change-Id: Ia0c21ef0a2c951e401ea8babd15d3cceb4bb25a1
    Camera3: Fix output stream creation for JPEG streams
    
    Change-Id: Iadf85c103c21614abb1aeb69a832ca01919c2aa5
    Camera3: Fix output stream creation for JPEG streams
    
    Change-Id: Iadf85c103c21614abb1aeb69a832ca01919c2aa5
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera API2: Add support for partial result quirk
    
    - Camera3Device: Include requestId in partial 3A results
    - FrameProcessorBase: Add support for partial result listeners
    - CameraDeviceClient: Listen and forward partial results to client
    
    Bug: 11115603
    Change-Id: If1cc6bbc32932742ac142c058688761ebf6a8024
    Camera HAL3/API1: Add support for the partial result quirk.
    
    - Camera2Client:
     - Detect partial result quirk
    - Camera3Device:
     - Accumulate all partial results together
     - Fire off 3A-only result once all 3A states are available
    - FrameProcessorBase:
     - Filter out partials, don't send to listeners
    - FrameProcessor:
     - Skip face detect on partials
     - Make sure to only handle a 3A update for a given frame once
     - Trigger AF notifications when AF mode or trigger changes, to
       properly detect all AF transitions.
    
    Bug: 11115603
    Change-Id: Iea8aa73c568701562a46071f7ea100624251d10b
    camera: Collect stack traces when bad things happen, print with dumpsys
    
    Bug: 11324229
    Change-Id: Ic920e170a8f5a389fc139bbf5416c0e3186c7fb6
    Camera2/3: Add more tracing for API1
    
    - AF state
    - Async autofocus completion
    - Async takePicture completion
    - Stages of takePicture
    
    Bug: 10570497
    Change-Id: Ida9fedd81aa4ee3ae3fb8dfada858a3bc3c213a3
    Camera: Save 1 frame time for takePicture call
    
    Move the latest request signal call right before submitting request to HAL,
    which avoids unnecessary 1 frame time wait.
    
    Also fix request status constructor issue, and the log tag for Camera2Client.
    
    Bug: 10570497
    Change-Id: I0b1818658bee9983b117e49a5a00f1aab515c567
    Camera3: Improve resilience to stream failures
    
    - Handle binder connection drops (DEAD_OBJECT) for streams
    - Just log an error, don't go to an error state when queue/dequeue fails
    
    Bug: 10347526
    Change-Id: Ib463ffe15d58db444cf5d8cad176a201c7d1facc
    Camera3: track request status in inflight queue
    
    Bug: 9758581
    Change-Id: I1d7135cd0932bd6b453acabfeb9a553985c887bc
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera3: Always set a trigger ID for an active trigger
    
    This is to work around HAL implementations that expect to see an
    ID for every trigger.
    
    Use a dummy trigger ID of 1, since 0 has special meaning for older
    HALs.
    
    Bug: 10720617
    Change-Id: I9cb1b8dbcb113cb9e737e5adb04032fd61a54c12
    Camera: Correct stream id types
    
    Bug: 10604704
    Change-Id: I223ac5d200eb6439c08955fb7ad586592099fbae
    camera3: Dump latest request sent with dumpsys
    
    Bug: 10606535
    Change-Id: I0dd5ca3e09f45701659ab9ebd3b51939a2f6e6ba
    Camera3: Be busy as soon as work arrives.
    
    RequestThread's internal busy flag (mPaused) was not being immediately
    set when new work was submitted to it. This allowed for a race
    condition where a capture() followed by an immediate
    waitUntilDrained() would immediately return from the wait.
    
    Set the mPaused flag to false immediately in capture() and
    setStreamingRequest() to avoid this, instead of waiting until the end
    of the next RequestThread iteration.
    
    Bug: 10531739
    Change-Id: I54a79fe5361d527ec717f41ad805e9b319a48cd8
    Camera2: Add flush support
    
    - On HAL2 devices, fall back to wait until idle
    - On HAL3 devices, call HAL flush method
    
    Bug: 9758581
    Change-Id: Ie1c570a15f6590a1ee6c271e3b989c48079b468a
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera2/3: Fix deadlock when starting recording before preview.
    
    Move 3A notification synthesis for HAL3 devices from
    Camera3Device::processCaptureResult to Camera2Client's
    FrameProcessor. This will ensure that calls to processCaptureResult
    from HAL can never block on Camera2Client internal mutexes.
    
    Bug: 9923891
    Change-Id: I5184649bf45c0807babe6b8c0e1239e959cd3480
    Camera2/3: Fix deadlock when starting recording before preview.
    
    Move 3A notification synthesis for HAL3 devices from
    Camera3Device::processCaptureResult to Camera2Client's
    FrameProcessor. This will ensure that calls to processCaptureResult
    from HAL can never block on Camera2Client internal mutexes.
    
    Bug: 9923891
    Change-Id: I5184649bf45c0807babe6b8c0e1239e959cd3480
    Camera3: Always close HAL device even in face of errors.
    
    To improve robustness, make sure the HAL device instance is always
    closed, even if it cannot be put into the IDLE state.
    
    Bug: 9414167
    Change-Id: I8e7035ff0afe7214951f9824e561b340cb37592e
    Camera3: Skipping no-ops good, not updating state machine bad.
    
    If a HAL-level stream reconfigure is not needed, still need to
    transition camera device to ACTIVE state in configureStreams.
    Otherwise, shutdown functions will not wait for device to drain
    properly.
    
    Bug: 9413025
    Change-Id: I0b15792097c7e5771015f2a362735d5f88b8c6ea
    Camera3: Skip no-op stream configurations.
    
    If configuring the same set of streams more than once, don't actually
    call into the HAL for the second and subsequent configure calls, since
    they're no-ops.
    
    This can speed up camera operation substantially if the
    HAL implementation does not detect no-ops on its own and does a full
    shutdown/restart on each configure call.
    
    Bug: 9392513
    Change-Id: I23baf4acbae2304735899adcf8e17565fa94d31d
    Camera3: Add more tracing
    
    Change-Id: I5f5d0d3f37244f19446c473db70373bdf16cce56
    camera3: Fix crash in set error state.
    
    When camera open fails in camera3device initialize call, setErrorStateLockedV()
    tries to access RequestThread object that is not created yet.
    
    Bug: 9319518
    Change-Id: Id5c6c0150ecaecb198045d5c6eb1b2ceebf5a727
    camera3: Fix crash in set error state.
    
    When camera open fails in camera3device initialize call, setErrorStateLockedV()
    tries to access RequestThread object that is not created yet.
    
    Bug: 9319518
    Change-Id: Id5c6c0150ecaecb198045d5c6eb1b2ceebf5a727
    camera: Dont segfault when result lacks timestamp
    
    Also make a log message more useful.
    
    Change-Id: Id8b65a9b55e1ebe41598dc2db4b0b2aa3f161965
    camera3: Don't try to disconnect stream native windows more than once
    
    This fixes the multiple-disconnect-from-BufferQueue bug.
    
    (In logs)
    BufferQueue: [SurfaceView] disconnect: connected to another api (cur=0, req=4)
    
    Bug: 9114681
    Change-Id: I21ae1c5bd993701eea13648aa9994979a24eb210
    Camera3: Make sure new metadata results signal other threads waiting
    
    - Also adds a lot of logging around shuffling around metadata frames
    
    Bug: 9007356
    Change-Id: I4285f4f55b4b899ea4928d43062c705619c8248a
    Camera: Pause preview when needing to delete jpeg/zsl streams
    
    Bug: 8876221
    Change-Id: Idf9490a48462fa44d49c4ebe99425c3149ae6378
    Camera: Pause preview when needing to delete jpeg/zsl streams
    
    Bug: 8876221
    Change-Id: Idf9490a48462fa44d49c4ebe99425c3149ae6378
    camera3: Don't eagerly finish configuring bidi streams more than once
    
    Finishing all stream configuration immediately is good, but when a stream is
    both input and output it attempted to finish configuring bidi streams twice.
    Since all ZSL streams are bidi, when we had a ZSL stream active preview would
    immediately stop working.
    
    Bug: 8563838
    Change-Id: Iec998f11f6405fc15f3f31bd7cd29f03a7968d14
    camera3: Don't eagerly finish configuring bidi streams more than once
    
    Finishing all stream configuration immediately is good, but when a stream is
    both input and output it attempted to finish configuring bidi streams twice.
    Since all ZSL streams are bidi, when we had a ZSL stream active preview would
    immediately stop working.
    
    Bug: 8563838
    Change-Id: Iec998f11f6405fc15f3f31bd7cd29f03a7968d14
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add input stream support
    
    - Untested with actual CAMERA3_STREAM_INPUT streams.
    
    Bug: 8629088
    
    Change-Id: Ia0c21ef0a2c951e401ea8babd15d3cceb4bb25a1
    Camera3: Add input stream support
    
    - Untested with actual CAMERA3_STREAM_INPUT streams.
    
    Bug: 8629088
    
    Change-Id: Ia0c21ef0a2c951e401ea8babd15d3cceb4bb25a1
    Camera3: Register all stream buffers at stream configuration time.
    
    While registering them later would be nice for startup time, current
    hardware will have to reinitialize everything, resulting in glitches.
    
    Bug: 8657740
    Change-Id: I1ed1f0a65d648f219f5228c8df15ffcf2a4b272e
    Camera3: Register all stream buffers at stream configuration time.
    
    While registering them later would be nice for startup time, current
    hardware will have to reinitialize everything, resulting in glitches.
    
    Bug: 8657740
    Change-Id: I1ed1f0a65d648f219f5228c8df15ffcf2a4b272e
    Camera3: Allow multiple process_capture_result calls per request
    
    To simplify HAL implementation, allow the results for a single
    capture request to be sent from the HAL across multiple calls
    to process_capture_request.
    
    This requires that the HAL must call notify() with the SHUTTER message
    to indicate start of exposure time, before the first call to
    process_capture_result for a given frame.
    
    Bug: 8565103
    
    Change-Id: I6a61449725f98af88769fafa07736848a226dad2
    Camera3: Allow multiple process_capture_result calls per request
    
    To simplify HAL implementation, allow the results for a single
    capture request to be sent from the HAL across multiple calls
    to process_capture_request.
    
    This requires that the HAL must call notify() with the SHUTTER message
    to indicate start of exposure time, before the first call to
    process_capture_result for a given frame.
    
    Bug: 8565103
    
    Change-Id: I6a61449725f98af88769fafa07736848a226dad2
    Camera3: Improve error logging
    
    In preparation for supporting fragmented result calls.
    
    Bug: 8565103
    Change-Id: Id834637d7cbecf7b550333beedab3281b5400748
    Camera3: Improve error logging
    
    In preparation for supporting fragmented result calls.
    
    Bug: 8565103
    Change-Id: Id834637d7cbecf7b550333beedab3281b5400748
    Camera: implement takePicture for HAL3-using clients
    
    * Implements Camera2Device-style triggers by mutating the next request
    * Implements Camera3Device::waitUntilRequestReceived
    
    Change-Id: Ie0b5591158872513a0bffbfab33123cf18dacf8a
    Camera: implement takePicture for HAL3-using clients
    
    * Implements Camera2Device-style triggers by mutating the next request
    * Implements Camera3Device::waitUntilRequestReceived
    
    Change-Id: Ie0b5591158872513a0bffbfab33123cf18dacf8a
    Camera3: Fix metadata result not being rewritten after capture
    
    Generally this problem manifested itself as the Frame Count not being set,
    which then errored out ProFrameProcessor with a "Success" error.
    
    Change-Id: Ifa927f43d0ce92100651ad3f714099a2f1ec4c2a
    Camera3: Fix metadata result not being rewritten after capture
    
    Generally this problem manifested itself as the Frame Count not being set,
    which then errored out ProFrameProcessor with a "Success" error.
    
    Change-Id: Ifa927f43d0ce92100651ad3f714099a2f1ec4c2a
    Camera: Add output side to camera3 HAL device
    
    - Notifications
    - Result queue and processing
    
    Change-Id: Id6b4746708ce6c6dcc7262666b6ac3130fa3d225
    Camera: Add output side to camera3 HAL device
    
    - Notifications
    - Result queue and processing
    
    Change-Id: Id6b4746708ce6c6dcc7262666b6ac3130fa3d225
    Camera: Add input side to camera3 HAL device
    
    - Stream creation/deletion
    - Request submission
    - Request thread loop
    - Add get() to CameraMetadata to allow HAL submission while retaining
      ownership.
    
    Change-Id: I271f72bcbe9557eded43cbcbfe789109857f8144
    Camera: Add input side to camera3 HAL device
    
    - Stream creation/deletion
    - Request submission
    - Request thread loop
    - Add get() to CameraMetadata to allow HAL submission while retaining
      ownership.
    
    Change-Id: I271f72bcbe9557eded43cbcbfe789109857f8144
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    (Camera)FrameProcessor: Refactor to share code with ProFrameProcessor
    
    Change-Id: Ie8cd0df7caf83f9d0134f560ae31ab72f2f7d1fc
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera: Start of support for version 3.0 of camera device HAL
    
    - Refactor common CameraDevice interface out of Camera2Device
    - Initial skeleton only for Camera3Device
    
    Change-Id: I097cc76e2ad102a51712ac114235163245f5482c
    Camera3: Improve resilience to stream failures
    
    - Handle binder connection drops (DEAD_OBJECT) for streams
    - Just log an error, don't go to an error state when queue/dequeue fails
    
    Bug: 10347526
    Change-Id: Ib463ffe15d58db444cf5d8cad176a201c7d1facc
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    camera3: Don't try to disconnect stream native windows more than once
    
    This fixes the multiple-disconnect-from-BufferQueue bug.
    
    (In logs)
    BufferQueue: [SurfaceView] disconnect: connected to another api (cur=0, req=4)
    
    Bug: 9114681
    Change-Id: I21ae1c5bd993701eea13648aa9994979a24eb210
    Camera3: Refactor stream code to be DRY
    
    Bug: 8851039
    Change-Id: Iaac2926bfa25dd6e9db8b307765d4fe709b88d21
    Camera3: Refactor stream code to be DRY
    
    Bug: 8851039
    Change-Id: Iaac2926bfa25dd6e9db8b307765d4fe709b88d21
    Camera3: Add input stream support
    
    - Untested with actual CAMERA3_STREAM_INPUT streams.
    
    Bug: 8629088
    
    Change-Id: Ia0c21ef0a2c951e401ea8babd15d3cceb4bb25a1
    Camera3: Add input stream support
    
    - Untested with actual CAMERA3_STREAM_INPUT streams.
    
    Bug: 8629088
    
    Change-Id: Ia0c21ef0a2c951e401ea8babd15d3cceb4bb25a1
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    Camera API 2, Device 2/3: Implement idle and shutter callbacks
    
    - Update callback Binder interface
    - Rename frameId to be requestId to be consistent and disambiguate
      from frameNumber.
    - Implement shutter callback from HAL2/3 notify()
      - Add in-flight tracking to HAL2
      - Add requestId to in-flight tracking
      - Report requestId from shutter callback
    - Implement idle callback from HAL3 process_capture_result
      - Add new idle tracker thread
      - Update all idle waiting to use the tracker
      - Add reporting from request thread, all streams to tracker
      - Remove existing idle waiting infrastructure
    
    Bug: 10549462
    Change-Id: I867bfc248e3848c50e71527e3561fe92dc037958
    Camera3: Provide consumer usage flags to HAL for each stream
    
    At stream configure time, pass on the stream's consumer usage flags
    to the HAL, to speed up final hardware configuration.
    
    Bug: 9592202
    Change-Id: Ie467be053be36a09e482f5f05cad65df42d66476
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    camera3: Don't try to disconnect stream native windows more than once
    
    This fixes the multiple-disconnect-from-BufferQueue bug.
    
    (In logs)
    BufferQueue: [SurfaceView] disconnect: connected to another api (cur=0, req=4)
    
    Bug: 9114681
    Change-Id: I21ae1c5bd993701eea13648aa9994979a24eb210
    update to Fence::waitForever() API change
    
    Bug: 8988871
    Change-Id: I24a2620d356f3bb6207ed834c79fd3e48b429695
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add input stream support
    
    - Untested with actual CAMERA3_STREAM_INPUT streams.
    
    Bug: 8629088
    
    Change-Id: Ia0c21ef0a2c951e401ea8babd15d3cceb4bb25a1
    Camera3: Add input stream support
    
    - Untested with actual CAMERA3_STREAM_INPUT streams.
    
    Bug: 8629088
    
    Change-Id: Ia0c21ef0a2c951e401ea8babd15d3cceb4bb25a1
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera3: Add missing buffer listener include (for ZSL)
    
    Bug: 8563838
    Change-Id: Ie053655f5583d20003abdabccee68980d7cdcbfd
    Implement async event callout from drm plugin to Java app
    
    Change-Id: I007f147d693664e777b8758be2bb8a4c7ec0236b
    Whitespace and indentation
    
    Fix indentation to be multiple of 4.
    Make it easier to search:
      sp< not sp < to
      "switch (...)" instead of "switch(...)" (also "if" and "while")
    Remove redundant blank line at start or EOF.
    Remove whitespace at end of line.
    Remove extra blank lines where they don't add value.
    
    Use git diff -b or -w to verify.
    
    Change-Id: I966b7ba852faa5474be6907fb212f5e267c2874e
    Separate MediaRecorderClient with MediaPlayerClient
    
    - An alternative would be to define a common base class that
      both MediaRecorderClient and MediaPlayerClient can derive.
      But since the common code, onTransact() and notify() uses
      some Binder code, having a common base class may not gain
      us too much in terms of code reuse.
    
    Change-Id: Ibc06720278ad173fceacff3d267b7060856c6316
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    separte producer and consumer interfaces
    
    Bug: 9265647
    Change-Id: Iefabc11e4bd2e2e8ffd31160476c450affe6629c
    Camera3: Provide consumer usage flags to HAL for each stream
    
    At stream configure time, pass on the stream's consumer usage flags
    to the HAL, to speed up final hardware configuration.
    
    Bug: 9592202
    Change-Id: Ie467be053be36a09e482f5f05cad65df42d66476
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera3: Refactor stream code to be DRY
    
    Bug: 8851039
    Change-Id: Iaac2926bfa25dd6e9db8b307765d4fe709b88d21
    Camera3: Refactor stream code to be DRY
    
    Bug: 8851039
    Change-Id: Iaac2926bfa25dd6e9db8b307765d4fe709b88d21
    Camera3: Add input stream support
    
    - Untested with actual CAMERA3_STREAM_INPUT streams.
    
    Bug: 8629088
    
    Change-Id: Ia0c21ef0a2c951e401ea8babd15d3cceb4bb25a1
    Camera3: Add input stream support
    
    - Untested with actual CAMERA3_STREAM_INPUT streams.
    
    Bug: 8629088
    
    Change-Id: Ia0c21ef0a2c951e401ea8babd15d3cceb4bb25a1
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    Camera3: Provide consumer usage flags to HAL for each stream
    
    At stream configure time, pass on the stream's consumer usage flags
    to the HAL, to speed up final hardware configuration.
    
    Bug: 9592202
    Change-Id: Ie467be053be36a09e482f5f05cad65df42d66476
    Camera: Rename new API to camera2, rearrange camera service
    
     - Support API rename from photography to camera2
     - Reorganize camera service files
       - API support files to api1/, api2/, api_pro/
       - HAL device support files into device{1,2,3}/
       - Common files into common/
       - Camera service remains at top-level
    
    Change-Id: Ie474c12536f543832fba0a2dc936ac4fd39fe6a9
    Camera3: Fix the deadlock during recording pinch zooming
    
    When zooming during recording, hal callback thread and request update thread run
    into deadlock due to lock circular dependency. This change release lock during
    queuebuffer in callback thread to break the dependency.
    
    Bug: 9091576
    Change-Id: Ia7b3f0ec17573cb32a5696dcde419ca28f42cfb8
    Camera3: Fix the deadlock during recording pinch zooming
    
    When zooming during recording, hal callback thread and request update thread run
    into deadlock due to lock circular dependency. This change release lock during
    queuebuffer in callback thread to break the dependency.
    
    Bug: 9091576
    Change-Id: Ia7b3f0ec17573cb32a5696dcde419ca28f42cfb8
    Camera3: Refactor stream code to be DRY
    
    Bug: 8851039
    Change-Id: Iaac2926bfa25dd6e9db8b307765d4fe709b88d21
    Camera3: Refactor stream code to be DRY
    
    Bug: 8851039
    Change-Id: Iaac2926bfa25dd6e9db8b307765d4fe709b88d21
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera3: Add ZSL stream support
    
    Bug: 8563838
    
    Change-Id: I2feda142ff5172aba17ade5c8d502f9bb5d5b766
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    Camera: Add streams to camera3 HAL device
    
    - Generic stream interface
    - Functional output stream
    - Skeleton input/zsl stream
    
    Change-Id: I143794eac1a2217031d62b51912662fc6d1db900
    Make AudioFlinger::instantiate() more resilient when called from separate module
    
    Bug: 8834855
    Change-Id: I4cd842cdfb09d2aaaaab9df9ac3bec6179709bd3
    make libaudioflinger symbols visibility hidden
    
    we export only symbols needed by clients of this library.
    this saves about 130KB (1/3rd of the lib size)
    
    Change-Id: Id81f3ecb299ee3abc0811915cf6efe87180bf15c
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Add template class SingleStateQueue
    
    Change-Id: If7e2bc9b2a216524ee9cbb68682e2634933b4973
    Add template class SingleStateQueue
    
    Change-Id: If7e2bc9b2a216524ee9cbb68682e2634933b4973
    Remove tee sink debugging at compile time
    
    Bug: 8223560
    Change-Id: Iddbfb06c45d43d9f20bb428215dd4094931e19a7
    Remove tee sink debugging at compile time
    
    Bug: 8223560
    Change-Id: Iddbfb06c45d43d9f20bb428215dd4094931e19a7
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    audioflinger: define ANDROID_SMP, remove conditional tracing
    
    With ANDROID_SMP set, tracing functionality is completely inline, and
    without the performance hits of external library calls, tracing does
    not need to be conditionally compiled.
    
    Change-Id: I4b29a9a52c403f0d2ea137c5b7bc05a518a7ca4b
    audioflinger: define ANDROID_SMP, remove conditional tracing
    
    With ANDROID_SMP set, tracing functionality is completely inline, and
    without the performance hits of external library calls, tracing does
    not need to be conditionally compiled.
    
    Change-Id: I4b29a9a52c403f0d2ea137c5b7bc05a518a7ca4b
    Remove conditional compilation of ATRACE functions
    
    Tracing functions are meant to be dynamically controlled via sysprops.
    Conditional compilation removes this functionality.
    
    Change-Id: I26bc473d104d0b3c50a228dddfda3fa2428d157a
    Remove conditional compilation of ATRACE functions
    
    Tracing functions are meant to be dynamically controlled via sysprops.
    Conditional compilation removes this functionality.
    
    Change-Id: I26bc473d104d0b3c50a228dddfda3fa2428d157a
    New VHQ resampler
    
    Squashed commit of the following:
    
    commit 12b6952da9f25e94d06dd7185bce255924e7e791
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 19 15:27:26 2012 -0800
    
        fix a typo in SINC resampler that prevented tracks to be mixed
    
        we were always erasing the current mix instead of mixing into it.
    
        Change-Id: Ib229245f9e5a0d384f1727640a59e9f0469211a2
    
    commit 0019ce082df430278f14ab922e900ce33b64897d
    Author: Dave Bort <dbort@google.com>
    Date:   Tue Nov 13 01:30:32 2007 -0800
    
        Rename "TARGET" to "MODULE" in the build system.
    
        Part one of the grand renaming.
    
        API_CHANGE: Third parties may need to update their makefiles.
        Any variables with "LOCAL" and "TARGET" in their names
        should now use "MODULE" instead of "TARGET"; e.g., LOCAL_MODULE,
        LOCAL_MODULE_TAGS.
    
        PRESUBMIT=passed
        OCL=39840
    
        Change-Id: Ica9a7937d3d9552ab84db46ac6eea8a290e404fe
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit f01adc0cef0e39e75c76d9195ac26a94cac0a100
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Wed Nov 14 08:32:08 2012 -0800
    
        Fix build warnings
    
        Change-Id: Ic43bcca166a529a6431711b05a7fa21849b6a38b
    
    commit 9bb031a565c753a03d9c9397edea318947d80528
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 04:44:30 2012 -0800
    
        more optimizations...
    
        calculate the offsets from the phase differently, this happens
        to reduce the register pressure in the main loop, which in turns
        allows the compiler to generate much better code (doesn't need
        to spill a lot of stuff on the stack).
    
        this gives another 15% performance increase
    
        Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    
    commit 5a951598f31217b8cd2babd0720c9608ee17291a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 03:26:39 2012 -0800
    
        refactor code to improve neon code
    
        we want to make sure we don't transfer data from the
        neon unit to the arm register file, as this can be quite
        slow. instead we do all the calculation on the neon side
        and write the result directly to main memory.
    
        Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    
    commit b381ee9e83bc9fd18986e79c7809841514ed590e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 15:16:13 2012 -0800
    
        NEON optimized SINC resampler
    
        this currently gives us a 60% to 80% boost depending
        on the quality level selected.
    
        Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    
    commit bea077354210242ea193a50b0dbab0fedab25df3
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 5 01:51:37 2012 -0800
    
        minor cleanups
    
        Change-Id: Ia12ee4fb59e90221761bec85e6450db29197591f
    
    commit 8f4ed7decbe161a5ff38200b218f5216d80aba46
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 18:49:14 2012 -0800
    
        improve resample test
    
        - handle stereo input
        - input file can now be ommited, in this case
          a linear chirp will be used automatically
        - better usage information
    
        Change-Id: I5d62a6c26a9054a1c1a517a065b4df5a2cdcda22
    
    commit 5fcd634ea6cb4df27c495abe20f5f9b8ff55d128
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 02:03:49 2012 -0800
    
        change how we store the FIR coefficients
    
        The coefficient table is now transposed and shows
        much better its polyphase nature: we now have a FIR
        per line, each line corresponding to a phase.
    
        This doesn't change at all the results produced by
        the filter, but allows us to make slightly better
        use of the data cache and improves performance a bit
        (although not as much as I thought it would).
    
        The main benefit is that it is the first step
        before we can make much larger optimizations
        (like using NEON).
    
        Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    
    commit d652231abf4c7e2ea1fc89caae730cec1f7259a1
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 3 23:37:53 2012 -0700
    
        improve SINC resampler performance
    
        The improvement is about 60% by just tweaking a few
        things to help the compiler generate better code.
        It turns out that inlining too much stuff manually was hurting us.
    
        Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    
    commit 9dc68ef5b94c700c4ee68790e8cbb334c90a538d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Nov 1 21:03:46 2012 -0700
    
        new coefficients for the vhq resampler
    
        previous coefficients were provided by a 3rd party and didn't have a
        way to re-generate them. we're now using the 'fir' utility.
    
        the performance of the filter is virtually identical, except for
        the down-sampling case which seems slightly better now:
           It looks like both the previous and new coefficients are generating
        some sort of clipping for full-scale signals in the down-sampling case
        (although the new ones seem better), the reason for that is
        unknown (see bug: 7453062)
    
        Also updated the HQ coefficients for the down-samplers, previous ones
        were a little bit too conservative -- the new ones push the cut-off
        frequency up by about 1 KHz.
    
        Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    
    commit 38e0b8560a6fc1b7124e22e0e09a84a285182f8e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 13:51:44 2012 -0700
    
        fix SINC resampler on non ARM architectures
    
        make sure the C version of the code generates the same
        output than the ARM assemply version.
    
        Change-Id: Ide218785c35d02598b2d7278e646b1b178148698
    
    commit a1878128b182696ba508569b4d211d0dfae92463
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 12:49:07 2012 -0700
    
        fix another issue with generating FIR coefficients
    
        the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
        missing the 2*f scale factor. This explains why we were seeing
        clipping and had to manually scale the filter down.
    
        Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    
    commit 1a0fb993430acc9f601e6c538305bc407c20ac5d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:20 2012 -0700
    
        fir a typo that caused up-sampling coefficiens to be wrong
    
        up-sample coefficient were generated with a cut-off frequency of 24KHz
        intead of ~20KHz, which caused more aliasing in the audible band.
    
        also increased the attenuation to 1.3 dB on both up and down
        sampling coefficient to avoid clipping.
    
        Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    
    commit 9520ad6862bd682ad075a9d9e3e94ada9f6e58b6
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:16 2012 -0700
    
        test-resample: clip instead of overflowing
    
        Change-Id: I550e5a59e51c11e1095ca338222b094f92b96878
    
    commit ba36656300f250f7f1fdeb75149749344260e6cb
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 01:01:38 2012 -0700
    
        a test app for the resamplers
    
        Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    
    commit 056a08b9bfd33cf27228c992adc8293a56b01be8
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 14:11:01 2012 -0700
    
        reenable the cubic resampler
    
        cubic resampler was disabled because it hadn't been qualified,
        however after I did some tests, it does improve significantly
        the sound quality over the order-1 resampler, even if it is
        still quite bad.
    
        also HIGH_QUALITY resampler was partially disabled, it's now
        fully enabled. It's a big improvement over the cubic resampler
        in terms of aliasing noise (it's not as good in the pass-band).
    
        Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    
    commit 8c0241d3ff50ae85167f69b3bd369244894cfa44
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 13:48:42 2012 -0700
    
        improve SINC resampler coefficients
    
        - we increase the interpolation precision from 4 to 7 bits
        this doesn't increase CPU power required, it only increases the
        size of the filter table but significantly reduces the noise
        introduced by the quantization of the impulse response.
    
        - the parameters of the filter are set such that aliasing is
        rejected at 80 dB below 20 KHz. Because we don't use a lot of
        coefficient (to save compute power), there are quite a bit of
        attenuation in the pass-band: starting at 9KHz for the
        down-sampler (48 to 44.1), and starting at 13 KHz for the
        up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
        Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    
    commit 69e7dab2192adc1f780464146810629ebd01b145
    Author: Pixelflinger <mathias.agopian@gmail.com>
    Date:   Thu Oct 25 19:43:49 2012 -0700
    
        improve fir tool: cleanup, better default, bug fixes
    
        - all parameters can be changed on the command-line
        - added float output
        - added debug option
        - added an option to generate a polyphase filter coefficients
        - added an attenuation option in dBFS
        - added a lot of comments and references
        - fixed kaiser window parameter
    
        also the default should generate a filter with 80 dB rejection
        (of the 24 KHz aliasing) above 20 KHz and a 15 KHz transition
        band around ~20 KHz (for 48 KHz sampling rate).
        It's not very good but corresponds to the current code.
    
    commit 8347499d105a50257c18e9dac652e750b06428b1
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Mon Oct 22 17:09:27 2012 -0700
    
        Increase allowed number of VHQ resamplers to 3
    
        Bug: 7378660
        Change-Id: I69e33ca2eb4bb9bd38e2c63df62cd1130d68baf6
    
    commit f91cf3cad7f5c4d52614271c89ab468741c5d24c
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 03:04:05 2012 -0700
    
        Fix a typo that caused the high quality resampler to produce garbage
    
        the problem is that if libaudio_resampler is present, it is those
        coefficients that will always be selected, but the correct
        meta-data.
    
        Bug: 7385994
        Change-Id: Ieebeb37b4dfb62a1a051bc29fae2ce056dbc6621
    
    commit e158a9e4262a174c59469a205658bc3ca4078234
    Author: Dan Bornstein <danfuzz@google.com>
    Date:   Fri Oct 3 10:34:57 2008 -0700
    
        Manually merge change #111620 from tc3 to mainline, to keep the
    
        automerger from choking on it.
    
        p4 sync
        p4 integrate -r -b android_to_tc3 //...@111620,111620
        p4 resolve -a
        p4 resolve     # resolve a couple merge travesties
    
        PRESUBMIT=passed
        BUG=1399648
        TBR=edheyl
        OCL=111902
    
        Change-Id: I854b01553dd92bbf9c864f5a9bd51a3d665f0ac2
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b9f3c26032be7a6ea01a10d93d94826f449e68ab
    Author: Dave Bort <dbort@google.com>
    Date:   Fri Jan 18 14:51:05 2008 -0800
    
        Rename "Makefile" to "Android.mk" throughout the tree.
    
        For <http://b/issue?id=960416>.
    
        I've tested this as much as I can, but 1500 open files =
        easy to mess things up.  Please let me know if there's
        a problem rather than rolling back this change.
    
        PRESUBMIT=passed
        BUG=960416
        TBR=joeo
        OCL=46537
    
        Change-Id: I5a404caf0f398a7afa7ae7abaf2f2a1c6ab490eb
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 0c22a9a44c4103483fba1d944acf1354c5eb1617
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 23:44:25 2007 -0700
    
        Tweak the SINC resampler parameters and double the performance. It's using about 10% CPU in the worse case now.
    
        Change-Id: I50ac7e6c6702a427fa36ab6d976c507155057507
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b85e41487983ad085b859acf8251e7e54480308a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 04:34:36 2007 -0700
    
        A sinc resampler for Audioflinger. It's not enabled yet, but fully functional and apparently working. It need more "quality" tests. In the 48->44 KHz, it takes about 25% of the CPU time.
    
        Change-Id: I80eb5185e13ebdb907e0b85c49ba1272c23d60ec
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit ba3949ef17cac2ba71cc3096c413782a49c922e5
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 21:01:28 2007 -0700
    
        fix a few small typos in the FIR computation
    
        Change-Id: I6e56b514fe520f30f7487f85c64ea5d2a7c19b40
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 7474bfa7de2604021963794dddfe44985648db6a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 03:16:02 2007 -0700
    
        This is a tool to compute the the reconstruction filter coefficients for a sinc audio resampler.
    
        Change-Id: I99be2505139b8e0e7647200e1647509d4f7e6067
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    Bug: 7577965
    Change-Id: I2c84a9283a1668723bad83e1a119c849c88c3e6b
    New VHQ resampler
    
    Squashed commit of the following:
    
    commit 12b6952da9f25e94d06dd7185bce255924e7e791
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 19 15:27:26 2012 -0800
    
        fix a typo in SINC resampler that prevented tracks to be mixed
    
        we were always erasing the current mix instead of mixing into it.
    
        Change-Id: Ib229245f9e5a0d384f1727640a59e9f0469211a2
    
    commit 0019ce082df430278f14ab922e900ce33b64897d
    Author: Dave Bort <dbort@google.com>
    Date:   Tue Nov 13 01:30:32 2007 -0800
    
        Rename "TARGET" to "MODULE" in the build system.
    
        Part one of the grand renaming.
    
        API_CHANGE: Third parties may need to update their makefiles.
        Any variables with "LOCAL" and "TARGET" in their names
        should now use "MODULE" instead of "TARGET"; e.g., LOCAL_MODULE,
        LOCAL_MODULE_TAGS.
    
        PRESUBMIT=passed
        OCL=39840
    
        Change-Id: Ica9a7937d3d9552ab84db46ac6eea8a290e404fe
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit f01adc0cef0e39e75c76d9195ac26a94cac0a100
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Wed Nov 14 08:32:08 2012 -0800
    
        Fix build warnings
    
        Change-Id: Ic43bcca166a529a6431711b05a7fa21849b6a38b
    
    commit 9bb031a565c753a03d9c9397edea318947d80528
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 04:44:30 2012 -0800
    
        more optimizations...
    
        calculate the offsets from the phase differently, this happens
        to reduce the register pressure in the main loop, which in turns
        allows the compiler to generate much better code (doesn't need
        to spill a lot of stuff on the stack).
    
        this gives another 15% performance increase
    
        Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    
    commit 5a951598f31217b8cd2babd0720c9608ee17291a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 03:26:39 2012 -0800
    
        refactor code to improve neon code
    
        we want to make sure we don't transfer data from the
        neon unit to the arm register file, as this can be quite
        slow. instead we do all the calculation on the neon side
        and write the result directly to main memory.
    
        Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    
    commit b381ee9e83bc9fd18986e79c7809841514ed590e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 15:16:13 2012 -0800
    
        NEON optimized SINC resampler
    
        this currently gives us a 60% to 80% boost depending
        on the quality level selected.
    
        Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    
    commit bea077354210242ea193a50b0dbab0fedab25df3
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 5 01:51:37 2012 -0800
    
        minor cleanups
    
        Change-Id: Ia12ee4fb59e90221761bec85e6450db29197591f
    
    commit 8f4ed7decbe161a5ff38200b218f5216d80aba46
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 18:49:14 2012 -0800
    
        improve resample test
    
        - handle stereo input
        - input file can now be ommited, in this case
          a linear chirp will be used automatically
        - better usage information
    
        Change-Id: I5d62a6c26a9054a1c1a517a065b4df5a2cdcda22
    
    commit 5fcd634ea6cb4df27c495abe20f5f9b8ff55d128
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 02:03:49 2012 -0800
    
        change how we store the FIR coefficients
    
        The coefficient table is now transposed and shows
        much better its polyphase nature: we now have a FIR
        per line, each line corresponding to a phase.
    
        This doesn't change at all the results produced by
        the filter, but allows us to make slightly better
        use of the data cache and improves performance a bit
        (although not as much as I thought it would).
    
        The main benefit is that it is the first step
        before we can make much larger optimizations
        (like using NEON).
    
        Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    
    commit d652231abf4c7e2ea1fc89caae730cec1f7259a1
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 3 23:37:53 2012 -0700
    
        improve SINC resampler performance
    
        The improvement is about 60% by just tweaking a few
        things to help the compiler generate better code.
        It turns out that inlining too much stuff manually was hurting us.
    
        Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    
    commit 9dc68ef5b94c700c4ee68790e8cbb334c90a538d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Nov 1 21:03:46 2012 -0700
    
        new coefficients for the vhq resampler
    
        previous coefficients were provided by a 3rd party and didn't have a
        way to re-generate them. we're now using the 'fir' utility.
    
        the performance of the filter is virtually identical, except for
        the down-sampling case which seems slightly better now:
           It looks like both the previous and new coefficients are generating
        some sort of clipping for full-scale signals in the down-sampling case
        (although the new ones seem better), the reason for that is
        unknown (see bug: 7453062)
    
        Also updated the HQ coefficients for the down-samplers, previous ones
        were a little bit too conservative -- the new ones push the cut-off
        frequency up by about 1 KHz.
    
        Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    
    commit 38e0b8560a6fc1b7124e22e0e09a84a285182f8e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 13:51:44 2012 -0700
    
        fix SINC resampler on non ARM architectures
    
        make sure the C version of the code generates the same
        output than the ARM assemply version.
    
        Change-Id: Ide218785c35d02598b2d7278e646b1b178148698
    
    commit a1878128b182696ba508569b4d211d0dfae92463
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 12:49:07 2012 -0700
    
        fix another issue with generating FIR coefficients
    
        the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
        missing the 2*f scale factor. This explains why we were seeing
        clipping and had to manually scale the filter down.
    
        Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    
    commit 1a0fb993430acc9f601e6c538305bc407c20ac5d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:20 2012 -0700
    
        fir a typo that caused up-sampling coefficiens to be wrong
    
        up-sample coefficient were generated with a cut-off frequency of 24KHz
        intead of ~20KHz, which caused more aliasing in the audible band.
    
        also increased the attenuation to 1.3 dB on both up and down
        sampling coefficient to avoid clipping.
    
        Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    
    commit 9520ad6862bd682ad075a9d9e3e94ada9f6e58b6
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:16 2012 -0700
    
        test-resample: clip instead of overflowing
    
        Change-Id: I550e5a59e51c11e1095ca338222b094f92b96878
    
    commit ba36656300f250f7f1fdeb75149749344260e6cb
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 01:01:38 2012 -0700
    
        a test app for the resamplers
    
        Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    
    commit 056a08b9bfd33cf27228c992adc8293a56b01be8
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 14:11:01 2012 -0700
    
        reenable the cubic resampler
    
        cubic resampler was disabled because it hadn't been qualified,
        however after I did some tests, it does improve significantly
        the sound quality over the order-1 resampler, even if it is
        still quite bad.
    
        also HIGH_QUALITY resampler was partially disabled, it's now
        fully enabled. It's a big improvement over the cubic resampler
        in terms of aliasing noise (it's not as good in the pass-band).
    
        Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    
    commit 8c0241d3ff50ae85167f69b3bd369244894cfa44
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 13:48:42 2012 -0700
    
        improve SINC resampler coefficients
    
        - we increase the interpolation precision from 4 to 7 bits
        this doesn't increase CPU power required, it only increases the
        size of the filter table but significantly reduces the noise
        introduced by the quantization of the impulse response.
    
        - the parameters of the filter are set such that aliasing is
        rejected at 80 dB below 20 KHz. Because we don't use a lot of
        coefficient (to save compute power), there are quite a bit of
        attenuation in the pass-band: starting at 9KHz for the
        down-sampler (48 to 44.1), and starting at 13 KHz for the
        up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
        Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    
    commit 69e7dab2192adc1f780464146810629ebd01b145
    Author: Pixelflinger <mathias.agopian@gmail.com>
    Date:   Thu Oct 25 19:43:49 2012 -0700
    
        improve fir tool: cleanup, better default, bug fixes
    
        - all parameters can be changed on the command-line
        - added float output
        - added debug option
        - added an option to generate a polyphase filter coefficients
        - added an attenuation option in dBFS
        - added a lot of comments and references
        - fixed kaiser window parameter
    
        also the default should generate a filter with 80 dB rejection
        (of the 24 KHz aliasing) above 20 KHz and a 15 KHz transition
        band around ~20 KHz (for 48 KHz sampling rate).
        It's not very good but corresponds to the current code.
    
    commit 8347499d105a50257c18e9dac652e750b06428b1
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Mon Oct 22 17:09:27 2012 -0700
    
        Increase allowed number of VHQ resamplers to 3
    
        Bug: 7378660
        Change-Id: I69e33ca2eb4bb9bd38e2c63df62cd1130d68baf6
    
    commit f91cf3cad7f5c4d52614271c89ab468741c5d24c
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 03:04:05 2012 -0700
    
        Fix a typo that caused the high quality resampler to produce garbage
    
        the problem is that if libaudio_resampler is present, it is those
        coefficients that will always be selected, but the correct
        meta-data.
    
        Bug: 7385994
        Change-Id: Ieebeb37b4dfb62a1a051bc29fae2ce056dbc6621
    
    commit e158a9e4262a174c59469a205658bc3ca4078234
    Author: Dan Bornstein <danfuzz@google.com>
    Date:   Fri Oct 3 10:34:57 2008 -0700
    
        Manually merge change #111620 from tc3 to mainline, to keep the
    
        automerger from choking on it.
    
        p4 sync
        p4 integrate -r -b android_to_tc3 //...@111620,111620
        p4 resolve -a
        p4 resolve     # resolve a couple merge travesties
    
        PRESUBMIT=passed
        BUG=1399648
        TBR=edheyl
        OCL=111902
    
        Change-Id: I854b01553dd92bbf9c864f5a9bd51a3d665f0ac2
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b9f3c26032be7a6ea01a10d93d94826f449e68ab
    Author: Dave Bort <dbort@google.com>
    Date:   Fri Jan 18 14:51:05 2008 -0800
    
        Rename "Makefile" to "Android.mk" throughout the tree.
    
        For <http://b/issue?id=960416>.
    
        I've tested this as much as I can, but 1500 open files =
        easy to mess things up.  Please let me know if there's
        a problem rather than rolling back this change.
    
        PRESUBMIT=passed
        BUG=960416
        TBR=joeo
        OCL=46537
    
        Change-Id: I5a404caf0f398a7afa7ae7abaf2f2a1c6ab490eb
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 0c22a9a44c4103483fba1d944acf1354c5eb1617
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 23:44:25 2007 -0700
    
        Tweak the SINC resampler parameters and double the performance. It's using about 10% CPU in the worse case now.
    
        Change-Id: I50ac7e6c6702a427fa36ab6d976c507155057507
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b85e41487983ad085b859acf8251e7e54480308a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 04:34:36 2007 -0700
    
        A sinc resampler for Audioflinger. It's not enabled yet, but fully functional and apparently working. It need more "quality" tests. In the 48->44 KHz, it takes about 25% of the CPU time.
    
        Change-Id: I80eb5185e13ebdb907e0b85c49ba1272c23d60ec
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit ba3949ef17cac2ba71cc3096c413782a49c922e5
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 21:01:28 2007 -0700
    
        fix a few small typos in the FIR computation
    
        Change-Id: I6e56b514fe520f30f7487f85c64ea5d2a7c19b40
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 7474bfa7de2604021963794dddfe44985648db6a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 03:16:02 2007 -0700
    
        This is a tool to compute the the reconstruction filter coefficients for a sinc audio resampler.
    
        Change-Id: I99be2505139b8e0e7647200e1647509d4f7e6067
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    Bug: 7577965
    Change-Id: I2c84a9283a1668723bad83e1a119c849c88c3e6b
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    Save copy of mic input, disabled by default
    
    Change-Id: I4f5e95a5ddf016530d1b2747a0a5ca0962caabda
    Save copy of mic input, disabled by default
    
    Change-Id: I4f5e95a5ddf016530d1b2747a0a5ca0962caabda
    Remove obsolete references to libmedia_native
    
    Bug: 6654403
    Change-Id: I3993d62987cf0dd85db10bf002a5cce53d4f01bd
    Remove obsolete references to libmedia_native
    
    Bug: 6654403
    Change-Id: I3993d62987cf0dd85db10bf002a5cce53d4f01bd
    a test app for the resamplers
    
    Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    a test app for the resamplers
    
    Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    reenable the cubic resampler
    
    cubic resampler was disabled because it hadn't been qualified,
    however after I did some tests, it does improve significantly
    the sound quality over the order-1 resampler, even if it is
    still quite bad.
    
    also HIGH_QUALITY resampler was partially disabled, it's now
    fully enabled. It's a big improvement over the cubic resampler
    in terms of aliasing noise (it's not as good in the pass-band).
    
    Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    reenable the cubic resampler
    
    cubic resampler was disabled because it hadn't been qualified,
    however after I did some tests, it does improve significantly
    the sound quality over the order-1 resampler, even if it is
    still quite bad.
    
    also HIGH_QUALITY resampler was partially disabled, it's now
    fully enabled. It's a big improvement over the cubic resampler
    in terms of aliasing noise (it's not as good in the pass-band).
    
    Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    audioflinger/resampler: add build source for libaudio-resampler
    
    Bug: 7229644
    Change-Id: I93bde36be1c3ec84174a4c98423e28f8b3d8782f
    Signed-off-by: ty.lee <ty.lee@lge.com>
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    audioflinger/resampler: add build source for libaudio-resampler
    
    Bug: 7229644
    Change-Id: I93bde36be1c3ec84174a4c98423e28f8b3d8782f
    Signed-off-by: ty.lee <ty.lee@lge.com>
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Integrate improved coefficient sinc resampler: VHQ
    
    Summary:
    Very high quality is enabled only for 44.1 -> 48 or 48 -> 44.1,
      and uses low quality for all other use cases.
    Track estimated CPU load and throttles the quality based on load;
      as currently configured it should allow up to 2 instances of very high quality.
    Medium quality and high quality are currently disabled unless explicitly requested.
    
    Details:
    Only load .so the first time it is needed.
    Cleanup code style: formatting, indentation, whitespace.
    Restore medium quality resampler, but it is not used (see next line).
    Fix memory leak for sinc resampler.
    Check sample rate in resampler constructor.
    Add logs for debugging.
    Rename DEFAULT to DEFAULT_QUALITY for consistency with other quality levels.
    Renumber VERY_HIGH_QUALITY from 255 to 4.
    Use enum src_quality consistently.
    Improve parsing of property af.resampler.quality.
    Fix reentrancy bug - allow an instance of high quality and an instance
      of very high quality to both be active concurrently.
    
    Bug: 7229644
    Change-Id: I0ce6b913b05038889f50462a38830b61a602a9f7
    Integrate improved coefficient sinc resampler: VHQ
    
    Summary:
    Very high quality is enabled only for 44.1 -> 48 or 48 -> 44.1,
      and uses low quality for all other use cases.
    Track estimated CPU load and throttles the quality based on load;
      as currently configured it should allow up to 2 instances of very high quality.
    Medium quality and high quality are currently disabled unless explicitly requested.
    
    Details:
    Only load .so the first time it is needed.
    Cleanup code style: formatting, indentation, whitespace.
    Restore medium quality resampler, but it is not used (see next line).
    Fix memory leak for sinc resampler.
    Check sample rate in resampler constructor.
    Add logs for debugging.
    Rename DEFAULT to DEFAULT_QUALITY for consistency with other quality levels.
    Renumber VERY_HIGH_QUALITY from 255 to 4.
    Use enum src_quality consistently.
    Improve parsing of property af.resampler.quality.
    Fix reentrancy bug - allow an instance of high quality and an instance
      of very high quality to both be active concurrently.
    
    Bug: 7229644
    Change-Id: I0ce6b913b05038889f50462a38830b61a602a9f7
    Disable audio watchdog
    
    It's not critical, and is wasting power
    
    Bug: 7241714
    Change-Id: I6ad4375f0000c92529688723dbe0ff0caa809c5d
    Disable audio watchdog
    
    It's not critical, and is wasting power
    
    Bug: 7241714
    Change-Id: I6ad4375f0000c92529688723dbe0ff0caa809c5d
    audioflinger: use resample coefficients from audio-resampler library.
    
    -Add a separate quality VERY_HIGH_QUALITY in resampler
    -Use resample coefficients audio-resampler library for
     quality VERY_HIGH_QUALITY.
    -This improves the quality of resampled output.
    
    Bug: 7024293
    Change-Id: Ia44142413bed5f5963d7eab7846eec877a2415e4
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    audioflinger: use resample coefficients from audio-resampler library.
    
    -Add a separate quality VERY_HIGH_QUALITY in resampler
    -Use resample coefficients audio-resampler library for
     quality VERY_HIGH_QUALITY.
    -This improves the quality of resampled output.
    
    Bug: 7024293
    Change-Id: Ia44142413bed5f5963d7eab7846eec877a2415e4
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Remove debug code HAVE_REQUEST_PRIORITY and SOAKER
    
    Change-Id: I73a2afe72d8acb53e57e6b4e6fb5133e22b7875a
    Make CPU frequency statistics optional
    
    Certain CPUs with dynamic cluster swapping and hotplug
    don't report CPU frequency accurately.  The file descriptors
    used to read the frequency become stale and report bogus data.
    So make this feature a build time option for debugging only.
    This will also improve performance of the fast mixer loop.
    
    Change-Id: I602f81ec3281a37992769208be08084ed1469e8c
    Add audio watchdog thread
    
    Change-Id: I4ed62087bd6554179abb8258d2da606050e762c0
    Reduce underruns in screen off, esp. with EQ
    
    Add MonoPipe APIs to specify setpoint.
    Use screen state to configure pipe setpoint.
    Fix a long-standing bug where pipe sleep time was excessive,
      which interacted poorly with governor and low clock frequencies.
      Now it deducts the elapsed time since last write(),
      which was significant when there was EQ and low clock frequency.
    
    Bug: 6618373
    Change-Id: I6f3b0072c2244aeb033ef0795ad164491a164ff5
    Reduce underruns in screen off, esp. with EQ
    
    Add MonoPipe APIs to specify setpoint.
    Use screen state to configure pipe setpoint.
    Fix a long-standing bug where pipe sleep time was excessive,
      which interacted poorly with governor and low clock frequencies.
      Now it deducts the elapsed time since last write(),
      which was significant when there was EQ and low clock frequency.
    
    Bug: 6618373
    Change-Id: I6f3b0072c2244aeb033ef0795ad164491a164ff5
    State queue dump
    
    Bug: 6591648
    Change-Id: Iac75e5ea64e86640b3d890c46a636641b9733c6d
    Keep a copy of most recent audio played
    
    Change-Id: I6b2f97881c39998a2fae9ab79d669af6c0a37e94
    systrace for audio
    
    Trace fast track buffer fill status for underruns etc.
    
    Move the definition of macro to Android.mk.
    
    No overhead if disabled.
    
    Change-Id: If0e83e21b61b059ca38f543f8a6ffb58e08c79ee
    Use scheduling policy service
    
    Change-Id: I3c09da1dc0de5039d0c15ce7fb2bc373fa398712
    AudioFlinger normal mixer uses FastMixer
    
    Change-Id: I3131bb22d2d057e9197a2ebfa6aa1cfaab9e5321
    Configure policy of mediaserver threads
    
    Change-Id: Ifd825590ba36996064a458f64453a94b84722cb0
    FastMixer update
    
    Updates:
     - Add support for mono fast tracks
     - Add support for optional sample rate conversion on fast tracks
     - Log sample rate and frame count
     - Enable statistics
    
    Change-Id: Ife014edf4f452da361f3eaaae19209ef6ff6958b
    Fast mixer
    
    Change-Id: I61552f83507e08e4c706076b9fb15362869e6265
    Add template class StateQueue
    
    Change-Id: Iccc5eb42bc295a22b2e429a4551f083cd7b6831a
    Non-blocking audio I/O interface, WIP
    
    Yet another abstraction similar to AudioTrack::Buffer and AudioBufferProvider,
    but with support for streaming, non-blocking, and eventually PTS.
    
    This is intended to be used as follows:
     - primary HAL output stream implements a Sink
     - primary HAL input stream implements a Source
     - Pipe implements a Sink
     - PipeReader implements a Source or TimedSource (not shown yet),
       which supports "read at PTS"
     - fast AudioTrack on server side will implement a Source using cblk
     - normal AudioTrack on server side will not be changed initially
     - fast AudioRecord on server side will implement a Sink using cblk
     - normal AudioRecord on server side will not be changed initially
     - fast mixer thread will read from Sources and write to a Sink,
       or (unlikely) implement a Source and multiple Sinks
     - Visualization and PCM logger will read from Source or TimedSource
     - A2DP normal mixer will be connected directly to its output stream
       and there will be a kind of OutputTrack for duplication that will
       read from a Sink with non-blocking write fed by the fast mixer.
    
    Patch set 3 changes:
     - Add more implementations of NBAIO interfaces:
       added SourceAudioBufferProvider, MonoPipe, MonoPipeReader.
     - Added Format_sampleRate and Format_channelCount.
     - Extract out the roundUp() method.
     - Respond to most comments from previous code review.
     - The new classes are untested.
    
    Patch set 4 changes:
     - Fix bugs in MonoPipe::write() and MonoPipeReader::read()
     - Fix bug initializing mFrameBitShift too early
     - renamed roundUp() to roundup()
     - Fix Android.mk
     - Add LOG_TAG an LOG_NDEBUG, use ALOG_ASSERT and utils/Log.h instead of assert
     - Fix build warnings
     - Move constructor and destructor bodies from .h to .cpp
     - Line length 100
     - Following naming conventions for #include double-include protector macros
     - Include what you use
     - More NBAIO logging
     - MonoPipe write can be blocking
    
    Patch set 5 changes:
     - Address code review comments
     - Use a static library so unused implementations don't take memory
     - Comment out libsndfile dependency
     - Remove debugging LOGV and LOG_NDEBUG
    
    Patch set 6 changes (would be 6 at old location, actually 2 at new location):
     - Address code review comments on patchset 5
     - For MonoPipe, allow the full pipe to be used, no need to omit one slot
     - Don't do atomic releasing stores unless needed
    
    Still to do:
     - I'm not happy with the Pipe class names
     - Update build/ for new static library?
    
    Change-Id: Ie6c61f05ce06b676b033be448a8ef9025a2ffcfd
    Revert "AudioFlinger does not need libmedia any more"
    
    This reverts commit c920dee060ac69684be33210ee44b99a5fc3e8b2
    AudioFlinger does not need libmedia any more
    
    Change-Id: Ifd2c61882109ec36ca68072a2bf6506e08c8cf34
    Add libmedia_native
    
    Change-Id: I3ac357c78fb89f108d15c6e5b9fa317de0e9fb9a
    Add libmedia_native
    
    Change-Id: Ib8cff8abd73723b793f08da99ad59549f219e0e7
    Remove dependency on audio_* location
    
    Change-Id: I4bc66115fcb9ba22b057bd72db3f561dcb18a0d8
    AudioBufferProvider comments and cleanup
    
    Add comments about which methods implement the AudioBufferProvider interface.
    
    Simplified the definition of kInvalidPts.  <stdint.h> is very hard to work
    with, there seems to be no way to use it reliably to get INT64_MAX without
    having a separate source file, which is ugly because it means kInvalidPts
    is not a compile-time constant.  So I just deleted AudioBufferProvider.cpp
    and used a hard-coded constant instead.
    
    Added a default constructor for Buffer so that the fields aren't random
    (especially .raw which is used to determine if the buffer is valid).
    
    Make the pts for getNextBuffer default to kInvalidPTS so code that
    doesn't need a pts doesn't have to specify a value.
    
    Rename the parameter to AudioMixer::setBufferProvider to make it clearer.
    
    Change-Id: I87e7290884d4ed975b019f62d1ab6ae2bc5065a5
    Upintegrate Audio Flinger changes from ICS_AAH
    
    Bring in changes to audio flinger made to support timed audio tracks
    and HW master volume control.
    
    Change-Id: Ide52d48809bdbed13acf35fd59b24637e35064ae
    Signed-off-by: John Grossman <johngro@google.com>
    Factor out and speed up permission-checking code
    
    Use the caching permission check for dump to save IPC.
    
    Cache getpid() to save kernel call for other permission checks.
    
    The C runtime library getpid() can't cache due to a fork
    race condition, but we know that mediaserver doesn't fork.
    
    Don't construct String16 on the stack.
    
    Change-Id: I6be6161dae5155d39ba6ed6228e7683e67be34ed
    Disable HQ resamplers for now until qualified
    
    This saves about 6500 bytes.
    
    Change-Id: I87102fe561c95c19c9e615dea3de914f96639257
    De-AAH-ify the common time service.
    
    Bulk name change to remove references to Android@Home from the common time
    service in preparation for cleanup and up-integration into the master
    branch.  Basically, aah_timesrv is now common_time.
    
    Change-Id: I3d3db212f96e8ba171aa36b9c58e27e4a336cb0a
    Extract out audio DSP code to utility library
    
    Change-Id: Ib8ce72028a7ea30e82baa518e381370e820ebbd0
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: I6ec5d2bca9b8ebc0acd395a7dd92e1a48fcdfa9b
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    undo reset to ics-mr1 until we have a better method
    reset to ics-mr1, but keep history
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: Id78bba8c002131d8b52b4170259a87fd94e63c73
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    Fix issue 4604090: notification sound interrupted.
    
    The problem is that the audio HAL fails to acquire the wake lock when playing the notification.
    This is because of a change that removed the mediaserver process form the system group for honeycomb.
    
    The fix consists in requesting the wake lock from PowerManagerService when AudioFlinger mixer
    wakes up.
    
    A consequence of this change is that audio HALs or pcm drivers do not have to hold wake locks
    anymore as in the past.
    
    Change-Id: I4fb3cc84816c9c408ab7fec75886baf801e1ecb5
    Log CPU usage
    
    Change-Id: Ie447e59be139153e526b7ad467c46c659d26816f
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    Moved and renamed effect API header files
    
    Moved specific effect header files to
    system/media/audio_effects/include/audio_effects
    and renamed to lower case (effect_xxx.h).
    
    Change-Id: Icfc2264bfd013cab0395d7e310ada636b9fe3621
    audio/media: convert to using the audio HAL and new audio defs
    
    Change-Id: Ibc637918637329e4f2b62f4ac7781102fbc269f5
    Signed-off-by: Dima Zavin <dima@android.com>
    audioflinger: move legacy audio hw/policy out to libhardware_legacy
    
    Change-Id: I4adcec73d3c08bcbe15bb19e1ba2ff18b195af45
    Signed-off-by: Dima Zavin <dima@android.com>
    Bug 3366885 Remove LVMX switch
    
    Change-Id: I0bf98c6f85f00b3296874571e1c049dcc4e2fcca
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    New VHQ resampler
    
    Squashed commit of the following:
    
    commit 12b6952da9f25e94d06dd7185bce255924e7e791
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 19 15:27:26 2012 -0800
    
        fix a typo in SINC resampler that prevented tracks to be mixed
    
        we were always erasing the current mix instead of mixing into it.
    
        Change-Id: Ib229245f9e5a0d384f1727640a59e9f0469211a2
    
    commit 0019ce082df430278f14ab922e900ce33b64897d
    Author: Dave Bort <dbort@google.com>
    Date:   Tue Nov 13 01:30:32 2007 -0800
    
        Rename "TARGET" to "MODULE" in the build system.
    
        Part one of the grand renaming.
    
        API_CHANGE: Third parties may need to update their makefiles.
        Any variables with "LOCAL" and "TARGET" in their names
        should now use "MODULE" instead of "TARGET"; e.g., LOCAL_MODULE,
        LOCAL_MODULE_TAGS.
    
        PRESUBMIT=passed
        OCL=39840
    
        Change-Id: Ica9a7937d3d9552ab84db46ac6eea8a290e404fe
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit f01adc0cef0e39e75c76d9195ac26a94cac0a100
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Wed Nov 14 08:32:08 2012 -0800
    
        Fix build warnings
    
        Change-Id: Ic43bcca166a529a6431711b05a7fa21849b6a38b
    
    commit 9bb031a565c753a03d9c9397edea318947d80528
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 04:44:30 2012 -0800
    
        more optimizations...
    
        calculate the offsets from the phase differently, this happens
        to reduce the register pressure in the main loop, which in turns
        allows the compiler to generate much better code (doesn't need
        to spill a lot of stuff on the stack).
    
        this gives another 15% performance increase
    
        Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    
    commit 5a951598f31217b8cd2babd0720c9608ee17291a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 03:26:39 2012 -0800
    
        refactor code to improve neon code
    
        we want to make sure we don't transfer data from the
        neon unit to the arm register file, as this can be quite
        slow. instead we do all the calculation on the neon side
        and write the result directly to main memory.
    
        Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    
    commit b381ee9e83bc9fd18986e79c7809841514ed590e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 15:16:13 2012 -0800
    
        NEON optimized SINC resampler
    
        this currently gives us a 60% to 80% boost depending
        on the quality level selected.
    
        Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    
    commit bea077354210242ea193a50b0dbab0fedab25df3
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 5 01:51:37 2012 -0800
    
        minor cleanups
    
        Change-Id: Ia12ee4fb59e90221761bec85e6450db29197591f
    
    commit 8f4ed7decbe161a5ff38200b218f5216d80aba46
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 18:49:14 2012 -0800
    
        improve resample test
    
        - handle stereo input
        - input file can now be ommited, in this case
          a linear chirp will be used automatically
        - better usage information
    
        Change-Id: I5d62a6c26a9054a1c1a517a065b4df5a2cdcda22
    
    commit 5fcd634ea6cb4df27c495abe20f5f9b8ff55d128
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 02:03:49 2012 -0800
    
        change how we store the FIR coefficients
    
        The coefficient table is now transposed and shows
        much better its polyphase nature: we now have a FIR
        per line, each line corresponding to a phase.
    
        This doesn't change at all the results produced by
        the filter, but allows us to make slightly better
        use of the data cache and improves performance a bit
        (although not as much as I thought it would).
    
        The main benefit is that it is the first step
        before we can make much larger optimizations
        (like using NEON).
    
        Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    
    commit d652231abf4c7e2ea1fc89caae730cec1f7259a1
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 3 23:37:53 2012 -0700
    
        improve SINC resampler performance
    
        The improvement is about 60% by just tweaking a few
        things to help the compiler generate better code.
        It turns out that inlining too much stuff manually was hurting us.
    
        Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    
    commit 9dc68ef5b94c700c4ee68790e8cbb334c90a538d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Nov 1 21:03:46 2012 -0700
    
        new coefficients for the vhq resampler
    
        previous coefficients were provided by a 3rd party and didn't have a
        way to re-generate them. we're now using the 'fir' utility.
    
        the performance of the filter is virtually identical, except for
        the down-sampling case which seems slightly better now:
           It looks like both the previous and new coefficients are generating
        some sort of clipping for full-scale signals in the down-sampling case
        (although the new ones seem better), the reason for that is
        unknown (see bug: 7453062)
    
        Also updated the HQ coefficients for the down-samplers, previous ones
        were a little bit too conservative -- the new ones push the cut-off
        frequency up by about 1 KHz.
    
        Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    
    commit 38e0b8560a6fc1b7124e22e0e09a84a285182f8e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 13:51:44 2012 -0700
    
        fix SINC resampler on non ARM architectures
    
        make sure the C version of the code generates the same
        output than the ARM assemply version.
    
        Change-Id: Ide218785c35d02598b2d7278e646b1b178148698
    
    commit a1878128b182696ba508569b4d211d0dfae92463
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 12:49:07 2012 -0700
    
        fix another issue with generating FIR coefficients
    
        the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
        missing the 2*f scale factor. This explains why we were seeing
        clipping and had to manually scale the filter down.
    
        Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    
    commit 1a0fb993430acc9f601e6c538305bc407c20ac5d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:20 2012 -0700
    
        fir a typo that caused up-sampling coefficiens to be wrong
    
        up-sample coefficient were generated with a cut-off frequency of 24KHz
        intead of ~20KHz, which caused more aliasing in the audible band.
    
        also increased the attenuation to 1.3 dB on both up and down
        sampling coefficient to avoid clipping.
    
        Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    
    commit 9520ad6862bd682ad075a9d9e3e94ada9f6e58b6
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:16 2012 -0700
    
        test-resample: clip instead of overflowing
    
        Change-Id: I550e5a59e51c11e1095ca338222b094f92b96878
    
    commit ba36656300f250f7f1fdeb75149749344260e6cb
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 01:01:38 2012 -0700
    
        a test app for the resamplers
    
        Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    
    commit 056a08b9bfd33cf27228c992adc8293a56b01be8
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 14:11:01 2012 -0700
    
        reenable the cubic resampler
    
        cubic resampler was disabled because it hadn't been qualified,
        however after I did some tests, it does improve significantly
        the sound quality over the order-1 resampler, even if it is
        still quite bad.
    
        also HIGH_QUALITY resampler was partially disabled, it's now
        fully enabled. It's a big improvement over the cubic resampler
        in terms of aliasing noise (it's not as good in the pass-band).
    
        Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    
    commit 8c0241d3ff50ae85167f69b3bd369244894cfa44
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 13:48:42 2012 -0700
    
        improve SINC resampler coefficients
    
        - we increase the interpolation precision from 4 to 7 bits
        this doesn't increase CPU power required, it only increases the
        size of the filter table but significantly reduces the noise
        introduced by the quantization of the impulse response.
    
        - the parameters of the filter are set such that aliasing is
        rejected at 80 dB below 20 KHz. Because we don't use a lot of
        coefficient (to save compute power), there are quite a bit of
        attenuation in the pass-band: starting at 9KHz for the
        down-sampler (48 to 44.1), and starting at 13 KHz for the
        up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
        Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    
    commit 69e7dab2192adc1f780464146810629ebd01b145
    Author: Pixelflinger <mathias.agopian@gmail.com>
    Date:   Thu Oct 25 19:43:49 2012 -0700
    
        improve fir tool: cleanup, better default, bug fixes
    
        - all parameters can be changed on the command-line
        - added float output
        - added debug option
        - added an option to generate a polyphase filter coefficients
        - added an attenuation option in dBFS
        - added a lot of comments and references
        - fixed kaiser window parameter
    
        also the default should generate a filter with 80 dB rejection
        (of the 24 KHz aliasing) above 20 KHz and a 15 KHz transition
        band around ~20 KHz (for 48 KHz sampling rate).
        It's not very good but corresponds to the current code.
    
    commit 8347499d105a50257c18e9dac652e750b06428b1
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Mon Oct 22 17:09:27 2012 -0700
    
        Increase allowed number of VHQ resamplers to 3
    
        Bug: 7378660
        Change-Id: I69e33ca2eb4bb9bd38e2c63df62cd1130d68baf6
    
    commit f91cf3cad7f5c4d52614271c89ab468741c5d24c
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 03:04:05 2012 -0700
    
        Fix a typo that caused the high quality resampler to produce garbage
    
        the problem is that if libaudio_resampler is present, it is those
        coefficients that will always be selected, but the correct
        meta-data.
    
        Bug: 7385994
        Change-Id: Ieebeb37b4dfb62a1a051bc29fae2ce056dbc6621
    
    commit e158a9e4262a174c59469a205658bc3ca4078234
    Author: Dan Bornstein <danfuzz@google.com>
    Date:   Fri Oct 3 10:34:57 2008 -0700
    
        Manually merge change #111620 from tc3 to mainline, to keep the
    
        automerger from choking on it.
    
        p4 sync
        p4 integrate -r -b android_to_tc3 //...@111620,111620
        p4 resolve -a
        p4 resolve     # resolve a couple merge travesties
    
        PRESUBMIT=passed
        BUG=1399648
        TBR=edheyl
        OCL=111902
    
        Change-Id: I854b01553dd92bbf9c864f5a9bd51a3d665f0ac2
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b9f3c26032be7a6ea01a10d93d94826f449e68ab
    Author: Dave Bort <dbort@google.com>
    Date:   Fri Jan 18 14:51:05 2008 -0800
    
        Rename "Makefile" to "Android.mk" throughout the tree.
    
        For <http://b/issue?id=960416>.
    
        I've tested this as much as I can, but 1500 open files =
        easy to mess things up.  Please let me know if there's
        a problem rather than rolling back this change.
    
        PRESUBMIT=passed
        BUG=960416
        TBR=joeo
        OCL=46537
    
        Change-Id: I5a404caf0f398a7afa7ae7abaf2f2a1c6ab490eb
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 0c22a9a44c4103483fba1d944acf1354c5eb1617
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 23:44:25 2007 -0700
    
        Tweak the SINC resampler parameters and double the performance. It's using about 10% CPU in the worse case now.
    
        Change-Id: I50ac7e6c6702a427fa36ab6d976c507155057507
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b85e41487983ad085b859acf8251e7e54480308a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 04:34:36 2007 -0700
    
        A sinc resampler for Audioflinger. It's not enabled yet, but fully functional and apparently working. It need more "quality" tests. In the 48->44 KHz, it takes about 25% of the CPU time.
    
        Change-Id: I80eb5185e13ebdb907e0b85c49ba1272c23d60ec
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit ba3949ef17cac2ba71cc3096c413782a49c922e5
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 21:01:28 2007 -0700
    
        fix a few small typos in the FIR computation
    
        Change-Id: I6e56b514fe520f30f7487f85c64ea5d2a7c19b40
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 7474bfa7de2604021963794dddfe44985648db6a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 03:16:02 2007 -0700
    
        This is a tool to compute the the reconstruction filter coefficients for a sinc audio resampler.
    
        Change-Id: I99be2505139b8e0e7647200e1647509d4f7e6067
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    Bug: 7577965
    Change-Id: I2c84a9283a1668723bad83e1a119c849c88c3e6b
    New VHQ resampler
    
    Squashed commit of the following:
    
    commit 12b6952da9f25e94d06dd7185bce255924e7e791
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 19 15:27:26 2012 -0800
    
        fix a typo in SINC resampler that prevented tracks to be mixed
    
        we were always erasing the current mix instead of mixing into it.
    
        Change-Id: Ib229245f9e5a0d384f1727640a59e9f0469211a2
    
    commit 0019ce082df430278f14ab922e900ce33b64897d
    Author: Dave Bort <dbort@google.com>
    Date:   Tue Nov 13 01:30:32 2007 -0800
    
        Rename "TARGET" to "MODULE" in the build system.
    
        Part one of the grand renaming.
    
        API_CHANGE: Third parties may need to update their makefiles.
        Any variables with "LOCAL" and "TARGET" in their names
        should now use "MODULE" instead of "TARGET"; e.g., LOCAL_MODULE,
        LOCAL_MODULE_TAGS.
    
        PRESUBMIT=passed
        OCL=39840
    
        Change-Id: Ica9a7937d3d9552ab84db46ac6eea8a290e404fe
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit f01adc0cef0e39e75c76d9195ac26a94cac0a100
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Wed Nov 14 08:32:08 2012 -0800
    
        Fix build warnings
    
        Change-Id: Ic43bcca166a529a6431711b05a7fa21849b6a38b
    
    commit 9bb031a565c753a03d9c9397edea318947d80528
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 04:44:30 2012 -0800
    
        more optimizations...
    
        calculate the offsets from the phase differently, this happens
        to reduce the register pressure in the main loop, which in turns
        allows the compiler to generate much better code (doesn't need
        to spill a lot of stuff on the stack).
    
        this gives another 15% performance increase
    
        Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    
    commit 5a951598f31217b8cd2babd0720c9608ee17291a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 03:26:39 2012 -0800
    
        refactor code to improve neon code
    
        we want to make sure we don't transfer data from the
        neon unit to the arm register file, as this can be quite
        slow. instead we do all the calculation on the neon side
        and write the result directly to main memory.
    
        Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    
    commit b381ee9e83bc9fd18986e79c7809841514ed590e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 15:16:13 2012 -0800
    
        NEON optimized SINC resampler
    
        this currently gives us a 60% to 80% boost depending
        on the quality level selected.
    
        Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    
    commit bea077354210242ea193a50b0dbab0fedab25df3
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 5 01:51:37 2012 -0800
    
        minor cleanups
    
        Change-Id: Ia12ee4fb59e90221761bec85e6450db29197591f
    
    commit 8f4ed7decbe161a5ff38200b218f5216d80aba46
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 18:49:14 2012 -0800
    
        improve resample test
    
        - handle stereo input
        - input file can now be ommited, in this case
          a linear chirp will be used automatically
        - better usage information
    
        Change-Id: I5d62a6c26a9054a1c1a517a065b4df5a2cdcda22
    
    commit 5fcd634ea6cb4df27c495abe20f5f9b8ff55d128
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 02:03:49 2012 -0800
    
        change how we store the FIR coefficients
    
        The coefficient table is now transposed and shows
        much better its polyphase nature: we now have a FIR
        per line, each line corresponding to a phase.
    
        This doesn't change at all the results produced by
        the filter, but allows us to make slightly better
        use of the data cache and improves performance a bit
        (although not as much as I thought it would).
    
        The main benefit is that it is the first step
        before we can make much larger optimizations
        (like using NEON).
    
        Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    
    commit d652231abf4c7e2ea1fc89caae730cec1f7259a1
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 3 23:37:53 2012 -0700
    
        improve SINC resampler performance
    
        The improvement is about 60% by just tweaking a few
        things to help the compiler generate better code.
        It turns out that inlining too much stuff manually was hurting us.
    
        Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    
    commit 9dc68ef5b94c700c4ee68790e8cbb334c90a538d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Nov 1 21:03:46 2012 -0700
    
        new coefficients for the vhq resampler
    
        previous coefficients were provided by a 3rd party and didn't have a
        way to re-generate them. we're now using the 'fir' utility.
    
        the performance of the filter is virtually identical, except for
        the down-sampling case which seems slightly better now:
           It looks like both the previous and new coefficients are generating
        some sort of clipping for full-scale signals in the down-sampling case
        (although the new ones seem better), the reason for that is
        unknown (see bug: 7453062)
    
        Also updated the HQ coefficients for the down-samplers, previous ones
        were a little bit too conservative -- the new ones push the cut-off
        frequency up by about 1 KHz.
    
        Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    
    commit 38e0b8560a6fc1b7124e22e0e09a84a285182f8e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 13:51:44 2012 -0700
    
        fix SINC resampler on non ARM architectures
    
        make sure the C version of the code generates the same
        output than the ARM assemply version.
    
        Change-Id: Ide218785c35d02598b2d7278e646b1b178148698
    
    commit a1878128b182696ba508569b4d211d0dfae92463
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 12:49:07 2012 -0700
    
        fix another issue with generating FIR coefficients
    
        the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
        missing the 2*f scale factor. This explains why we were seeing
        clipping and had to manually scale the filter down.
    
        Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    
    commit 1a0fb993430acc9f601e6c538305bc407c20ac5d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:20 2012 -0700
    
        fir a typo that caused up-sampling coefficiens to be wrong
    
        up-sample coefficient were generated with a cut-off frequency of 24KHz
        intead of ~20KHz, which caused more aliasing in the audible band.
    
        also increased the attenuation to 1.3 dB on both up and down
        sampling coefficient to avoid clipping.
    
        Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    
    commit 9520ad6862bd682ad075a9d9e3e94ada9f6e58b6
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:16 2012 -0700
    
        test-resample: clip instead of overflowing
    
        Change-Id: I550e5a59e51c11e1095ca338222b094f92b96878
    
    commit ba36656300f250f7f1fdeb75149749344260e6cb
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 01:01:38 2012 -0700
    
        a test app for the resamplers
    
        Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    
    commit 056a08b9bfd33cf27228c992adc8293a56b01be8
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 14:11:01 2012 -0700
    
        reenable the cubic resampler
    
        cubic resampler was disabled because it hadn't been qualified,
        however after I did some tests, it does improve significantly
        the sound quality over the order-1 resampler, even if it is
        still quite bad.
    
        also HIGH_QUALITY resampler was partially disabled, it's now
        fully enabled. It's a big improvement over the cubic resampler
        in terms of aliasing noise (it's not as good in the pass-band).
    
        Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    
    commit 8c0241d3ff50ae85167f69b3bd369244894cfa44
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 13:48:42 2012 -0700
    
        improve SINC resampler coefficients
    
        - we increase the interpolation precision from 4 to 7 bits
        this doesn't increase CPU power required, it only increases the
        size of the filter table but significantly reduces the noise
        introduced by the quantization of the impulse response.
    
        - the parameters of the filter are set such that aliasing is
        rejected at 80 dB below 20 KHz. Because we don't use a lot of
        coefficient (to save compute power), there are quite a bit of
        attenuation in the pass-band: starting at 9KHz for the
        down-sampler (48 to 44.1), and starting at 13 KHz for the
        up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
        Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    
    commit 69e7dab2192adc1f780464146810629ebd01b145
    Author: Pixelflinger <mathias.agopian@gmail.com>
    Date:   Thu Oct 25 19:43:49 2012 -0700
    
        improve fir tool: cleanup, better default, bug fixes
    
        - all parameters can be changed on the command-line
        - added float output
        - added debug option
        - added an option to generate a polyphase filter coefficients
        - added an attenuation option in dBFS
        - added a lot of comments and references
        - fixed kaiser window parameter
    
        also the default should generate a filter with 80 dB rejection
        (of the 24 KHz aliasing) above 20 KHz and a 15 KHz transition
        band around ~20 KHz (for 48 KHz sampling rate).
        It's not very good but corresponds to the current code.
    
    commit 8347499d105a50257c18e9dac652e750b06428b1
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Mon Oct 22 17:09:27 2012 -0700
    
        Increase allowed number of VHQ resamplers to 3
    
        Bug: 7378660
        Change-Id: I69e33ca2eb4bb9bd38e2c63df62cd1130d68baf6
    
    commit f91cf3cad7f5c4d52614271c89ab468741c5d24c
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 03:04:05 2012 -0700
    
        Fix a typo that caused the high quality resampler to produce garbage
    
        the problem is that if libaudio_resampler is present, it is those
        coefficients that will always be selected, but the correct
        meta-data.
    
        Bug: 7385994
        Change-Id: Ieebeb37b4dfb62a1a051bc29fae2ce056dbc6621
    
    commit e158a9e4262a174c59469a205658bc3ca4078234
    Author: Dan Bornstein <danfuzz@google.com>
    Date:   Fri Oct 3 10:34:57 2008 -0700
    
        Manually merge change #111620 from tc3 to mainline, to keep the
    
        automerger from choking on it.
    
        p4 sync
        p4 integrate -r -b android_to_tc3 //...@111620,111620
        p4 resolve -a
        p4 resolve     # resolve a couple merge travesties
    
        PRESUBMIT=passed
        BUG=1399648
        TBR=edheyl
        OCL=111902
    
        Change-Id: I854b01553dd92bbf9c864f5a9bd51a3d665f0ac2
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b9f3c26032be7a6ea01a10d93d94826f449e68ab
    Author: Dave Bort <dbort@google.com>
    Date:   Fri Jan 18 14:51:05 2008 -0800
    
        Rename "Makefile" to "Android.mk" throughout the tree.
    
        For <http://b/issue?id=960416>.
    
        I've tested this as much as I can, but 1500 open files =
        easy to mess things up.  Please let me know if there's
        a problem rather than rolling back this change.
    
        PRESUBMIT=passed
        BUG=960416
        TBR=joeo
        OCL=46537
    
        Change-Id: I5a404caf0f398a7afa7ae7abaf2f2a1c6ab490eb
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 0c22a9a44c4103483fba1d944acf1354c5eb1617
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 23:44:25 2007 -0700
    
        Tweak the SINC resampler parameters and double the performance. It's using about 10% CPU in the worse case now.
    
        Change-Id: I50ac7e6c6702a427fa36ab6d976c507155057507
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b85e41487983ad085b859acf8251e7e54480308a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 04:34:36 2007 -0700
    
        A sinc resampler for Audioflinger. It's not enabled yet, but fully functional and apparently working. It need more "quality" tests. In the 48->44 KHz, it takes about 25% of the CPU time.
    
        Change-Id: I80eb5185e13ebdb907e0b85c49ba1272c23d60ec
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit ba3949ef17cac2ba71cc3096c413782a49c922e5
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 21:01:28 2007 -0700
    
        fix a few small typos in the FIR computation
    
        Change-Id: I6e56b514fe520f30f7487f85c64ea5d2a7c19b40
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 7474bfa7de2604021963794dddfe44985648db6a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 03:16:02 2007 -0700
    
        This is a tool to compute the the reconstruction filter coefficients for a sinc audio resampler.
    
        Change-Id: I99be2505139b8e0e7647200e1647509d4f7e6067
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    Bug: 7577965
    Change-Id: I2c84a9283a1668723bad83e1a119c849c88c3e6b
    reenable the cubic resampler
    
    cubic resampler was disabled because it hadn't been qualified,
    however after I did some tests, it does improve significantly
    the sound quality over the order-1 resampler, even if it is
    still quite bad.
    
    also HIGH_QUALITY resampler was partially disabled, it's now
    fully enabled. It's a big improvement over the cubic resampler
    in terms of aliasing noise (it's not as good in the pass-band).
    
    Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    reenable the cubic resampler
    
    cubic resampler was disabled because it hadn't been qualified,
    however after I did some tests, it does improve significantly
    the sound quality over the order-1 resampler, even if it is
    still quite bad.
    
    also HIGH_QUALITY resampler was partially disabled, it's now
    fully enabled. It's a big improvement over the cubic resampler
    in terms of aliasing noise (it's not as good in the pass-band).
    
    Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    Increase allowed number of VHQ resamplers to 3
    
    Bug: 7378660
    Change-Id: I69e33ca2eb4bb9bd38e2c63df62cd1130d68baf6
    Increase allowed number of VHQ resamplers to 3
    
    Bug: 7378660
    Change-Id: I69e33ca2eb4bb9bd38e2c63df62cd1130d68baf6
    Integrate improved coefficient sinc resampler: VHQ
    
    Summary:
    Very high quality is enabled only for 44.1 -> 48 or 48 -> 44.1,
      and uses low quality for all other use cases.
    Track estimated CPU load and throttles the quality based on load;
      as currently configured it should allow up to 2 instances of very high quality.
    Medium quality and high quality are currently disabled unless explicitly requested.
    
    Details:
    Only load .so the first time it is needed.
    Cleanup code style: formatting, indentation, whitespace.
    Restore medium quality resampler, but it is not used (see next line).
    Fix memory leak for sinc resampler.
    Check sample rate in resampler constructor.
    Add logs for debugging.
    Rename DEFAULT to DEFAULT_QUALITY for consistency with other quality levels.
    Renumber VERY_HIGH_QUALITY from 255 to 4.
    Use enum src_quality consistently.
    Improve parsing of property af.resampler.quality.
    Fix reentrancy bug - allow an instance of high quality and an instance
      of very high quality to both be active concurrently.
    
    Bug: 7229644
    Change-Id: I0ce6b913b05038889f50462a38830b61a602a9f7
    Integrate improved coefficient sinc resampler: VHQ
    
    Summary:
    Very high quality is enabled only for 44.1 -> 48 or 48 -> 44.1,
      and uses low quality for all other use cases.
    Track estimated CPU load and throttles the quality based on load;
      as currently configured it should allow up to 2 instances of very high quality.
    Medium quality and high quality are currently disabled unless explicitly requested.
    
    Details:
    Only load .so the first time it is needed.
    Cleanup code style: formatting, indentation, whitespace.
    Restore medium quality resampler, but it is not used (see next line).
    Fix memory leak for sinc resampler.
    Check sample rate in resampler constructor.
    Add logs for debugging.
    Rename DEFAULT to DEFAULT_QUALITY for consistency with other quality levels.
    Renumber VERY_HIGH_QUALITY from 255 to 4.
    Use enum src_quality consistently.
    Improve parsing of property af.resampler.quality.
    Fix reentrancy bug - allow an instance of high quality and an instance
      of very high quality to both be active concurrently.
    
    Bug: 7229644
    Change-Id: I0ce6b913b05038889f50462a38830b61a602a9f7
    audioflinger: use resample coefficients from audio-resampler library.
    
    -Add a separate quality VERY_HIGH_QUALITY in resampler
    -Use resample coefficients audio-resampler library for
     quality VERY_HIGH_QUALITY.
    -This improves the quality of resampled output.
    
    Bug: 7024293
    Change-Id: Ia44142413bed5f5963d7eab7846eec877a2415e4
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    audioflinger: use resample coefficients from audio-resampler library.
    
    -Add a separate quality VERY_HIGH_QUALITY in resampler
    -Use resample coefficients audio-resampler library for
     quality VERY_HIGH_QUALITY.
    -This improves the quality of resampled output.
    
    Bug: 7024293
    Change-Id: Ia44142413bed5f5963d7eab7846eec877a2415e4
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Whitespace and indentation
    
    Fix indentation to be multiple of 4.
    Make it easier to search:
      sp< not sp < to
      "switch (...)" instead of "switch(...)" (also "if" and "while")
    Remove redundant blank line at start or EOF.
    Remove whitespace at end of line.
    Remove extra blank lines where they don't add value.
    
    Use git diff -b or -w to verify.
    
    Change-Id: I966b7ba852faa5474be6907fb212f5e267c2874e
    Upintegrate Audio Flinger changes from ICS_AAH
    
    Bring in changes to audio flinger made to support timed audio tracks
    and HW master volume control.
    
    Change-Id: Ide52d48809bdbed13acf35fd59b24637e35064ae
    Signed-off-by: John Grossman <johngro@google.com>
    Disable HQ resamplers for now until qualified
    
    This saves about 6500 bytes.
    
    Change-Id: I87102fe561c95c19c9e615dea3de914f96639257
    No newline or space at end of ALOG format string
    
    Change-Id: I0bef580cbc818cb7c87aea23919d26f1446cec32
    Remove dead code
    
    mFormat is unused in resampler
    mClientTid is unused
    local variable pid is unused in dump
    
    Change-Id: Ib156e38029366620bfeff2a13e73471867155a5b
    Rename LOG_ASSERT to ALOG_ASSERT
    
    Change-Id: Ie2c7ea6560656d65bad791a61996174c75677517
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename LOG_ASSERT to ALOG_ASSERT  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157519
    
    Bug: 5449033
    Change-Id: I8ceb2dba1b031a0fd68d15d146960d9ced62bbf3
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Bug 5522189 re-enable ARM opts but disable inline
    
    PIE did not work together with inlining.  This change combines (almost
    all of) the performance benefits of ARM optimizations together with PIE.
    
    Change-Id: I4594d33ae5a0a7bac327ae08e30fb35343a06256
    Bug 5522189 temporary workaround
    
    Change-Id: I21d91d7a24df7bb6e7fc3d0fbc4786d55391fc0e
    Do not inline the audio resampler assembly functions
    
    The assembly expects arguments to live at fixed offsets from the stack pointer
    which are invalid if the code is inlined.
    
    Change-Id: Ie93e93c5c69774079112345754fbc85896fc2f64
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: I6ec5d2bca9b8ebc0acd395a7dd92e1a48fcdfa9b
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    Do not inline the audio resampler assembly functions
    
    The assembly expects arguments to live at fixed offsets from the stack pointer
    which are invalid if the code is inlined.
    
    Change-Id: I423b3993ac9cd8d62129718d84fd23efbbac174a
    undo reset to ics-mr1 until we have a better method
    reset to ics-mr1, but keep history
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    AudioResampler: use relative instead of absolute labels
    
    This change is needed to allow Android to compile with -fPIE
    Bug: 5328392
    
    Change-Id: I84d947975776800a7b79c6ac75a881af461a631c
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: Id78bba8c002131d8b52b4170259a87fd94e63c73
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    audioflinger: Enable ARMv5TE optimized resampler
    
    Previously, the optimized asm option is only enabled when
    __ARM_ARCH_5E__ is defined, which is assigned in armv5te.mk
    rather than armv7-a series targets.  This patch checks the ARM CPU
    feature about half-word multiply instructions to enable ARMv5TE
    resampler optimization routines properly.
    
    Change-Id: I4c5a5d8c932416f23bedb0b389db958349f21ea4
    Fix issue 3479042.
    
    The problem is that when an AudioRecord using the resampler is restarted,
    the resampler state is not reset (as there is no reset function in the resampler).
    The consequence is that the first time the record thread loop runs, it calls the resampler
    which consumes the remaining data in the input buffer and when this buffer is released
    the input index is incremented over the limit.
    
    The fix consists in implementing a reset function in the resampler.
    
    A similar problem was also present for playback but unoticed because the track buffer is always
    drained by the mixer when a track stops. The only problem for playback was that the initial
    phase fraction was wrong when restarting a track after stop (it was correct after a pause).
    
    Change-Id: Ifc2585d685f4402d29f4afc63f6efd1d69265de3
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    FastMixer computes presentation timestamps for fast tracks
    
    and forwards them to each track's ExtendedAudioBufferProvider::onTimestamp().
    
    Change-Id: I06fb9586bb7e20d5c0289abdc8cac6cd3fd2f6e8
    HAL stream format for mixer output threads must be stereo 16-bit PCM
    
    Direct and tunnel output threads can support various HAL stream formats,
    included encoded.  But currently there are stereo 16-bit PCM assumptions
    in several places for mixer and duplicating output threads:
     - mMixBuffer and mixBuffer()
     - AudioMixer including resampler
     - FastMixer's mixBuffer
     - effects
     - NBAIO_Format
     - anywhere FCC_2 is used
     - possibly other places
    
    Until those assumptions are removed, this CL enforces stereo 16-bit
    PCM in mixer and duplicating threads at the place where the HAL format
    is read.  It was already being checked in checkForNewParameters_l(),
    but not in readOutputParameters().
    
    Change-Id: Ibe344cc922743da234299097aa1bb1f54795cc9b
    Use AudioSystem::setLowRamDevice() to configure memory
    
    Bug: 9798886
    Change-Id: I9321e3f369f1ed9429ae222e3926ebdeb012b8b0
    Make AudioFlinger::instantiate() more resilient when called from separate module
    
    Bug: 8834855
    Change-Id: I4cd842cdfb09d2aaaaab9df9ac3bec6179709bd3
    Fix indentation
    
    Change-Id: Ia28720a7d0fad8cf110c2448b967d5648d42e017
    Remove timing jitter during startup of audio
    
    This fixes a regression introduced recently, that increased timing jitter
    during the startup of the FastMixer and AudioTrack callback threads.
    
    The regression was to make requestPriority() asynchronous as a way to
    avoid an apparent priority inversion in system_server.  This means that
    the target thread could run briefly with the initial priority, before
    the new priority takes effect.
    
    This change removes the startup jitter for FastMixer, by making the
    requestPriority() synchronous again for that case.  It doesn't matter
    that this restores the priority inversion involving normal mixer thread,
    because it happens during startup of both threads.
    
    The change also removes the startup jitter for the AudioTrack callback
    thread, by having the target thread check whether the requestPriority()
    has completed yet.  If not, the target thread blocks with a timeout
    until the priority boost finishes.
    
    Finally, we now log an error message if the expected priority boost
    doesn't happen.
    
    Bug: 8698989
    Change-Id: Id590e9a274b70ec1ba85b44a585ee37a22e41cbc
    Remove timing jitter during startup of audio
    
    This fixes a regression introduced recently, that increased timing jitter
    during the startup of the FastMixer and AudioTrack callback threads.
    
    The regression was to make requestPriority() asynchronous as a way to
    avoid an apparent priority inversion in system_server.  This means that
    the target thread could run briefly with the initial priority, before
    the new priority takes effect.
    
    This change removes the startup jitter for FastMixer, by making the
    requestPriority() synchronous again for that case.  It doesn't matter
    that this restores the priority inversion involving normal mixer thread,
    because it happens during startup of both threads.
    
    The change also removes the startup jitter for the AudioTrack callback
    thread, by having the target thread check whether the requestPriority()
    has completed yet.  If not, the target thread blocks with a timeout
    until the priority boost finishes.
    
    Finally, we now log an error message if the expected priority boost
    doesn't happen.
    
    Bug: 8698989
    Change-Id: Id590e9a274b70ec1ba85b44a585ee37a22e41cbc
    Miscellaneous cleanup
    
    Abbreviation framesReady to fRdy for new systrace.
    Put inline const on one line.
    Use local copy of mState in state.
    Improve logging.
    Line length 100.
    
    Change-Id: I8201c3ce0e53fd464fd33d02544e52c342d40b68
    Miscellaneous cleanup
    
    Abbreviation framesReady to fRdy for new systrace.
    Put inline const on one line.
    Use local copy of mState in state.
    Improve logging.
    Line length 100.
    
    Change-Id: I8201c3ce0e53fd464fd33d02544e52c342d40b68
    media.log cleanup
    
    Remove almost all of the specific logs, but leave the media.log
    logging infrastructure in place for the next time we need it.
    
    Re-apply a few good changes that were reverted earlier:
     - check logf format vs. argument list compatibility
     - distinguish potentially modified and actually modified tracks in FastMixer
     - fix benign bug where sq->end() was called more than once
     - fix a build warning
    
    Bug: 6490974
    Change-Id: I02d3e83646c738acaebb415bd0d6b548638b4ef5
    media.log cleanup
    
    Remove almost all of the specific logs, but leave the media.log
    logging infrastructure in place for the next time we need it.
    
    Re-apply a few good changes that were reverted earlier:
     - check logf format vs. argument list compatibility
     - distinguish potentially modified and actually modified tracks in FastMixer
     - fix benign bug where sq->end() was called more than once
     - fix a build warning
    
    Bug: 6490974
    Change-Id: I02d3e83646c738acaebb415bd0d6b548638b4ef5
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 32584a7d672864b20ab8b83a3cb23c1858e908b7
    
    Change-Id: I9dc680578b955b1af462eeb7a49d61a0d45eb81b
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 32584a7d672864b20ab8b83a3cb23c1858e908b7
    
    Change-Id: I9dc680578b955b1af462eeb7a49d61a0d45eb81b
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
     - increase log buffer sizes yet again
     - enable assertion checking without ALOGV
     - improve a few log messages
     - check for corruption in more places
     - log in all the process hooks
     - add new mixer APIs so we can check for corruption of mixer state
     - fix a build warning
    
    Bug: 6490974
    Change-Id: Ib0c4a73dcf606ef9bd898313b3b40ef61ab42f51
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
     - increase log buffer sizes yet again
     - enable assertion checking without ALOGV
     - improve a few log messages
     - check for corruption in more places
     - log in all the process hooks
     - add new mixer APIs so we can check for corruption of mixer state
     - fix a build warning
    
    Bug: 6490974
    Change-Id: Ib0c4a73dcf606ef9bd898313b3b40ef61ab42f51
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 639482c24c911b125398b31883ba6d55faebe28b
    
    Change-Id: I11f2829072ab11e18b0663024f27bf31192f1d39
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 639482c24c911b125398b31883ba6d55faebe28b
    
    Change-Id: I11f2829072ab11e18b0663024f27bf31192f1d39
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 0ddd56316262ac74a95e9edb595697c163136d6d
    
    Change-Id: I180a928af6f5a38d15a5efe44cd1fe927b5d961c
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 0ddd56316262ac74a95e9edb595697c163136d6d
    
    Change-Id: I180a928af6f5a38d15a5efe44cd1fe927b5d961c
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
    
    Bug: 6490974
    Change-Id: I4c030f171343fe4b483eae0ddea4427118d8d4b1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
    
    Bug: 6490974
    Change-Id: I4c030f171343fe4b483eae0ddea4427118d8d4b1
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 3051df27261e9952c0e642dec548515250e85f6a
    
    Change-Id: I8bf5c3e91b65bd20de26f480c367c2854b62373c
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 3051df27261e9952c0e642dec548515250e85f6a
    
    Change-Id: I8bf5c3e91b65bd20de26f480c367c2854b62373c
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
    
    Bug: 6490974
    Change-Id: I4c030f171343fe4b483eae0ddea4427118d8d4b1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
    
    Bug: 6490974
    Change-Id: I4c030f171343fe4b483eae0ddea4427118d8d4b1
    AudioFlinger uses media.log service for logging
    
    Change-Id: Ia0f8204334f6b233f644d897762a18c95d936b4b
    AudioFlinger uses media.log service for logging
    
    Change-Id: Ia0f8204334f6b233f644d897762a18c95d936b4b
    audioflinger: define ANDROID_SMP, remove conditional tracing
    
    With ANDROID_SMP set, tracing functionality is completely inline, and
    without the performance hits of external library calls, tracing does
    not need to be conditionally compiled.
    
    Change-Id: I4b29a9a52c403f0d2ea137c5b7bc05a518a7ca4b
    audioflinger: define ANDROID_SMP, remove conditional tracing
    
    With ANDROID_SMP set, tracing functionality is completely inline, and
    without the performance hits of external library calls, tracing does
    not need to be conditionally compiled.
    
    Change-Id: I4b29a9a52c403f0d2ea137c5b7bc05a518a7ca4b
    Remove conditional compilation of ATRACE functions
    
    Tracing functions are meant to be dynamically controlled via sysprops.
    Conditional compilation removes this functionality.
    
    Change-Id: I26bc473d104d0b3c50a228dddfda3fa2428d157a
    Remove conditional compilation of ATRACE functions
    
    Tracing functions are meant to be dynamically controlled via sysprops.
    Conditional compilation removes this functionality.
    
    Change-Id: I26bc473d104d0b3c50a228dddfda3fa2428d157a
    Add warning about following the design rules
    
    Change-Id: Ic4895ed5682bad10b03e97d8015e642ee1696533
    Add warning about following the design rules
    
    Change-Id: Ic4895ed5682bad10b03e97d8015e642ee1696533
    Use ATRACE macros instead of Tracer statics
    
    ATRACE_BEGIN and ATRACE_END have replaced the static
    Tracer::traceBegin and Tracer::traceEnd functions, so
    use them instead.
    
    Fixes compilation errors when tracing is enabled.
    
    Change-Id: I4d1147d2f76afcdf113e9986f0544cb848802b15
    Use ATRACE macros instead of Tracer statics
    
    ATRACE_BEGIN and ATRACE_END have replaced the static
    Tracer::traceBegin and Tracer::traceEnd functions, so
    use them instead.
    
    Fixes compilation errors when tracing is enabled.
    
    Change-Id: I4d1147d2f76afcdf113e9986f0544cb848802b15
    Check clock_gettime(CLOCK_MONOTONIC) for failure
    
    Bug: 7100774
    Change-Id: I15a84a19bb6d6ef1d9dac4beaa03587638196404
    Check clock_gettime(CLOCK_MONOTONIC) for failure
    
    Bug: 7100774
    Change-Id: I15a84a19bb6d6ef1d9dac4beaa03587638196404
    Fix build in AudioFlinger/FastMixer
    
    Commit was missing some changes to modifications to send session ID
     from AudioFlinger to AudioMixer.
    
    Change-Id: I7daeaf4eff243b5287bef63be86a87acf408374a
    Fix build in AudioFlinger/FastMixer
    
    Commit was missing some changes to modifications to send session ID
     from AudioFlinger to AudioMixer.
    
    Change-Id: I7daeaf4eff243b5287bef63be86a87acf408374a
    Communicate audio session ID to downmixer
    
    The audio downmixer effect might need the audio session Id, pass it
     from the track creation in AudioFlinger to the downmix effect
     creation in AudioMixer.
    
    Change-Id: I5e29540542ae89cf4a0cdb537b3e67f04442a20a
    Communicate audio session ID to downmixer
    
    The audio downmixer effect might need the audio session Id, pass it
     from the track creation in AudioFlinger to the downmix effect
     creation in AudioMixer.
    
    Change-Id: I5e29540542ae89cf4a0cdb537b3e67f04442a20a
    Add outlier statistics for fast mixer cycle times
    
    Change-Id: I31c964caeb8b5d9ae0a426224f030cdcb01114a0
    Add outlier statistics for fast mixer cycle times
    
    Change-Id: I31c964caeb8b5d9ae0a426224f030cdcb01114a0
    Tune the overrun correction
    
    The new overrun correction is: if the previous write() cycle time is <
    50% of expected, then sleep enough extra to make the total cycle time =
    95% of expected.  This should help compensate for HAL implementations
    that have uneven cycle times due to sample rate conversion.
    
    Bug: 6881638
    Change-Id: I5ab58afdfceee7ac523177f021fbf62d743d571a
    AudioFlinger: fix timed audio
    
    (cherry picked from commit e20ac92c564a2f4e8123885807abdf0a78de0dd7)
    
    > AudioFlinger: fix timed audio
    >
    > Addresses Bug 6900517.
    >
    > Finish up support for timed audio in the new FastMixer world.  Pay special
    > attention to remaining lock-less and voluntary yield free on the FastMixer
    > thread.  This fixes audio playback for Q on JB.
    >
    > Change-Id: Iaf815e58a1b1d0a0190051794bec8dc5c9231785
    > Signed-off-by: John Grossman <johngro@google.com>
    
    Change-Id: I9bd687acc345a05867af48e71116690fdb0ce1b5
    Signed-off-by: John Grossman <johngro@google.com>
    Change definition of warmup period
    
    Previously, warmup was considered done as soon as any write() took
    more than 0.5 nominal cycle time.  In practice, this was always the
    first write() that turned on power to the output path, and it didn't
    accurately account for filling the full kernel buffer queue, or for
    buffering in the HAL sample rate conversion.
    
    Now warmup is considered done when a write() _after_ the first write
    takes more than 0.5 nominal cycle time.
    
    This will throttle the initial pull rate after coming out of standby.
    When combined with another change to throttle the pull rate for
    devices with HAL sample rate conversion, it may help reduce some of the
    notification glitches.  The only downside is that it will increase the
    warmup time a bit.
    
    Bug: 6508317, 6650846, 6607056
    Change-Id: I39f324c5195578170a55308e9601d3a1b41db3e0
    FastMixer compensates for SRC jitter in audio HAL
    
    Force a sleep if audio HAL write() returns too quickly.
    
    Bug: 6661275
    Change-Id: Ie810f5a087b89fb24dab229a0e500af1dee53571
    Make CPU frequency statistics optional
    
    Certain CPUs with dynamic cluster swapping and hotplug
    don't report CPU frequency accurately.  The file descriptors
    used to read the frequency become stale and report bogus data.
    So make this feature a build time option for debugging only.
    This will also improve performance of the fast mixer loop.
    
    Change-Id: I602f81ec3281a37992769208be08084ed1469e8c
    Shorten dumpsys media.audio_flinger output
    
    Don't include in FastMixer if it's not present.
    This removes confusing clutter especially for devices
    with a separate deep buffer output thread, or for the
    duplicating thread and A2DP output thread.
    
    Change-Id: I84933f5555593256f11ba0895ec915c09cf16963
    audioflinger: modify fast mixer overrun management
    
    Do not force sleep when an overrun occurs. This was for non
    blocking audio HAL and is unused.
    Keep statistics on overruns.
    
    Bug 6605215.
    
    Change-Id: I295455d4562201aa3814c88bdd6e52c9226712af
    Fast track dumpsys
    
    Bug: 6591648
    Change-Id: I696f51c682e7233ba690d97da26012084989b412
    Was calculating measured warmup time wrong
    
    Bug: 6592923
    Change-Id: I980c6fc69d78c569147ea44ce33a7f8a41739c91
    Keep a copy of most recent audio played
    
    Change-Id: I6b2f97881c39998a2fae9ab79d669af6c0a37e94
    systrace for audio
    
    Trace fast track buffer fill status for underruns etc.
    
    Move the definition of macro to Android.mk.
    
    No overhead if disabled.
    
    Change-Id: If0e83e21b61b059ca38f543f8a6ffb58e08c79ee
    Skip bad kHz values, and display them accurately
    
    One device reports zero CPU kHz occasionally, so skip those values.
    
    Preserve accuracy of the low-order 4 bits of the the CPU frequency.
    
    Change-Id: I7d934f697412277462464fca82d112d0306a214e
    Improve underrun handling for fast tracks
    
    Maintain more accurate accounting of type of underrun.
    Automatically remove track from active list after a series of "empty" underruns.
    
    Change-Id: If042bf80e1790dcaaf195c99dc9c0ed9b55382c1
    Fix 2 bugs in fast mixer statistics
    
    Was losing the upper half of the bounds, and MHz was off.
    
    Change-Id: I61c98027b35ce7c3578ea6f3acf05aa5c48a5831
    Use audio tag for system tracing
    
    Disabled by default; uncomment ATRACE_TAG to enable
    
    Change-Id: I99af894022a859ee5644bd853cfd8a48e4735ff9
    Update fast mixer statistics
    
    Compute statistics on fast mixer elapsed time and CPU load per cycle using a
    simple moving average rather than by fixed blocks.  This has a couple advantages:
     - remove burstiness of CPU usage due to former floating-point calculations in fast mixer
     - gives us flexibility in how to report (e.g. could report over just the last 1 second)
    
    Disadvantage is increased RAM, and since the samples are not updated
    atomically, it is possible to have an error in the statistics.  This
    should not be much of an issue due to the relatively large number of samples.
    
    Also add CPU raw ns and adjusted MHz statistics.
    
    Change-Id: Iaa2cd13f18250c3162aff40409b3694b769d9505
    Fix race condition for non-started fast tracks
    
    This required re-implementing how fast tracks are considered active.
    Now, they use the same logic as normal tracks, except underrun is ignored.
    
    Other changes:
     - add framesReady() to AudioBufferProvider interface
     - rebased
     - add track underrun counter state to fast mixer dump state
     - move dumpsys header to Track::appendDumpHeader()
       so it closer to where tracks are dumped
     - display track state in dumpsys as a character code
     - measure and display warmup time and cycles in dumpsys
     - copy in the presentation complete code
     - add ExtendedAudioBufferProvider for framesReady() which returns size_t
     - simplify underrun tracking
     - deferred reset track after stop()
     - add comments
    
    Change-Id: I7db8821bc565230ec76da1f9380fe3fb09735e5b
    FastMixer update
    
    Updates:
     - Add support for mono fast tracks
     - Add support for optional sample rate conversion on fast tracks
     - Log sample rate and frame count
     - Enable statistics
    
    Change-Id: Ife014edf4f452da361f3eaaae19209ef6ff6958b
    Fix multichannel downmix pause bug on video player
    
    Pausing a video player will cause the track audio mixer to be
     disabled, which causes the downmixer to be deleted. When reenabled,
     the track channel mask hasn't changed but the downmixer is there
     anymore.
    Fixed by:
    - instanciating a downmixer when the AudioMixer track
     gets initialized (in getTrackName(), now taking a channel mask
     as input), and deleted when in deleteTrackName().
    - when the channel changes on a track, check whether it
     needs a downmixer or not. Preparing a track for downmix
     automatically removes the old downmixer if there was one.
    
    Also: initialize the track downmixerBufferProvider field
     when AudioMixer is instanciated, so we can safely call
     delete on it in AudioMixer's destructor, in case
     deleteTrackName() wasn't called before the mixer was
     destroyed.
    
    Change-Id: I589b0781cda5b3c82f85b561c52b08546cac21f8
    Fast mixer
    
    Change-Id: I61552f83507e08e4c706076b9fb15362869e6265
    Integrate improved coefficient sinc resampler: VHQ
    
    Summary:
    Very high quality is enabled only for 44.1 -> 48 or 48 -> 44.1,
      and uses low quality for all other use cases.
    Track estimated CPU load and throttles the quality based on load;
      as currently configured it should allow up to 2 instances of very high quality.
    Medium quality and high quality are currently disabled unless explicitly requested.
    
    Details:
    Only load .so the first time it is needed.
    Cleanup code style: formatting, indentation, whitespace.
    Restore medium quality resampler, but it is not used (see next line).
    Fix memory leak for sinc resampler.
    Check sample rate in resampler constructor.
    Add logs for debugging.
    Rename DEFAULT to DEFAULT_QUALITY for consistency with other quality levels.
    Renumber VERY_HIGH_QUALITY from 255 to 4.
    Use enum src_quality consistently.
    Improve parsing of property af.resampler.quality.
    Fix reentrancy bug - allow an instance of high quality and an instance
      of very high quality to both be active concurrently.
    
    Bug: 7229644
    Change-Id: I0ce6b913b05038889f50462a38830b61a602a9f7
    Integrate improved coefficient sinc resampler: VHQ
    
    Summary:
    Very high quality is enabled only for 44.1 -> 48 or 48 -> 44.1,
      and uses low quality for all other use cases.
    Track estimated CPU load and throttles the quality based on load;
      as currently configured it should allow up to 2 instances of very high quality.
    Medium quality and high quality are currently disabled unless explicitly requested.
    
    Details:
    Only load .so the first time it is needed.
    Cleanup code style: formatting, indentation, whitespace.
    Restore medium quality resampler, but it is not used (see next line).
    Fix memory leak for sinc resampler.
    Check sample rate in resampler constructor.
    Add logs for debugging.
    Rename DEFAULT to DEFAULT_QUALITY for consistency with other quality levels.
    Renumber VERY_HIGH_QUALITY from 255 to 4.
    Use enum src_quality consistently.
    Improve parsing of property af.resampler.quality.
    Fix reentrancy bug - allow an instance of high quality and an instance
      of very high quality to both be active concurrently.
    
    Bug: 7229644
    Change-Id: I0ce6b913b05038889f50462a38830b61a602a9f7
    Whitespace and indentation
    
    Fix indentation to be multiple of 4.
    Make it easier to search:
      sp< not sp < to
      "switch (...)" instead of "switch(...)" (also "if" and "while")
    Remove redundant blank line at start or EOF.
    Remove whitespace at end of line.
    Remove extra blank lines where they don't add value.
    
    Use git diff -b or -w to verify.
    
    Change-Id: I966b7ba852faa5474be6907fb212f5e267c2874e
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    fix volume and effect enable delay on offloaded tracks
    
    Volume: add a method to wake up the mediaserver playback
    thread when a volume command is received on an offloaded track.
    
    Effects: call effect chain process on offloaded playback threads
    asynchronously from writes to allow effect state updates while
    waiting for async write callback.
    
    Bug: 10796540.
    
    Change-Id: Id2747ae88783575d1d7ffd6fc86fbd054ab2c739
    Don't call audio effect process on offloaded playback threads
    
    An audio effect process command is not meant to be called for
     playback threads belonging to offloaded playback.
    
    Bug 10933817
    
    Change-Id: Idc7b6a0224791bbf8d61648474d3c288617c498f
    more support for audio effect offload
    
    Offloading of audio effects is now enabled for offloaded
    output threads. If an effect not supporting offload is enabled,
    the AudioTrack is invalidated so that it can be recreated in PCM
    mode.
    
    Fix some issues in effect proxy related to handling of effect
    commands to offloaded and non offloaded effects.
    
    Also fixed a bug on capture index in software Visualizer effect.
    
    Bug: 8174034.
    
    Change-Id: Ib23d3c2d5a652361b0aaec7faee09102f2b18fce
    audioflinger: no effects on offloaded tracks
    
    Invalidate offloaded tracks when an effect is enabled
    so that the track is recreated in PCM mode and the effect
    can be applied.
    This is temporary until effect offloading is implemented.
    
    Bug: 8174034.
    
    Change-Id: I77b8b54a10db6cb8334be76d863ea7e720eaad09
    AudioFlinger: offload playback, non-blocking write
    
    - Added specialized playback thread class for offload playback,
    derived from directoutput thread.
    This thread type handles specific state transitions for offloaded
    tracks and offloading commands (pause/resume/drain/flush..) to audio HAL.
    As opposed to other threads, does not go to standby if the track is paused.
    
    - Added support for asynchronous write and drain operations at audio HAL.
    Use a thread to handle async callback events from HAL: this avoids locking
    playback thread mutex when executing the callback and cause deadlocks when
    calling audio HAL functions with the playback thread mutex locked.
    
    - Better accouting for track activity: call start/stop and release Output
    methods in audio policy manager when tracks are actually added and removed
    from the active tracks list.
    Added a command thread in audio policy service to handle stop/release commands
    asynchronously and avoid deadlocks with playback thread.
    
    - Track terminated status is not a state anymore. This condition is othogonal
    to state to permitted state transitions while terminated.
    
    Change-Id: Id157f4b3277620568d8eace7535d9186602564de
    Make AudioFlinger::instantiate() more resilient when called from separate module
    
    Bug: 8834855
    Change-Id: I4cd842cdfb09d2aaaaab9df9ac3bec6179709bd3
    AudioFlinger: do not cache audio device when 0.
    
    AudioFlinger should not cache the audio device
    passed to the audio HAL when it is AUDIO_DEVICE_NONE
    but keep previous valid selection instead.
    
    Bug: 9323399.
    Change-Id: I6f9480e55a21be4115453e6a5eebc5cf2536c476
    audioflinger: add effect config status check
    
    Check the result of the effect engine configuration command
    and do not attempt to send parameters to, enable, or process
    the effect if configuration fails.
    
    Bug 8512027
    
    Change-Id: I8c78a05d79fba36b1a387aa5cf2700612301ac91
    audioflinger: add effect config status check
    
    Check the result of the effect engine configuration command
    and do not attempt to send parameters to, enable, or process
    the effect if configuration fails.
    
    Bug 8512027
    
    Change-Id: I8c78a05d79fba36b1a387aa5cf2700612301ac91
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    Make AudioFlinger::instantiate() more resilient when called from separate module
    
    Bug: 8834855
    Change-Id: I4cd842cdfb09d2aaaaab9df9ac3bec6179709bd3
    Add audio watchdog thread
    
    Change-Id: I4ed62087bd6554179abb8258d2da606050e762c0
    Assign blame for playback wakelocks.
    
    Set a work source for the playback wakelock, so that playback is
    counted against the requesting app instead of the media server.
    
    Cherrypicked from master.
    
    b/9464621
    
    Change-Id: I7329f88a288a95a582a78005a1c3d16a5a611e31
    fix volume and effect enable delay on offloaded tracks
    
    Volume: add a method to wake up the mediaserver playback
    thread when a volume command is received on an offloaded track.
    
    Effects: call effect chain process on offloaded playback threads
    asynchronously from writes to allow effect state updates while
    waiting for async write callback.
    
    Bug: 10796540.
    
    Change-Id: Id2747ae88783575d1d7ffd6fc86fbd054ab2c739
    Fix AudioTrack shared memory leak
    
    Bug: 2801375
    Change-Id: I50e15164fe310f69ea019dca5b49171a02bc6992
    Add ExtendedAudioBufferProvider::framesReleased and onTimestamp
    
    and implement them in SourceAudioBufferProvider using the associated NBAIO_Source,
    and in Track using the associated AudioTrackServerProxy.
    
    Change-Id: I60dc4adba63fc1dc452ff16caf347e4a7c8242c2
    Add AudioFlinger::PlaybackThread::Track::getTimestamp()
    
    with a dummy implementation initially,
    and use it in AudioFlinger::TrackHandle::getTimestamp()
    
    Change-Id: I2da88fc52a135a7f0d9fd9538986e919dc8ccd3b
    Report underruns for fast tracks also
    
    This fixes a regression that was introduced earlier
    by commit 9f80dd223d83d9bb9077fb6baee056cee4eaf7e5
    called "New control block for AudioTrack and AudioRecord".
    That commit broke underrun reporting for fast tracks.
    
    Also remove Track::mUnderrunCount, which counted the number of underrun
    events, and was only used by dumpsys media.audio_flinger.
    
    Now dumpsys media.audio_flinger reports the number of underrun frames,
    
    Isolated underrun-related control block accesses via the proxy, so that
    the server is not directly poking around in the control block.
    
    The new proxy APIs are AudioTrackServerProxy::getUnderrunFrames() and
    AudioTrackServerProxy::tallyUnderrunFrames().  getUnderrunFrames() returns
    a rolling counter for streaming tracks, or zero for static buffer tracks
    which never underrun, but do a kind of 'pause' at end of buffer.
    tallyUnderrunFrames() increments the counter by a specified number of frames.
    
    Change-Id: Ib31fd73eb17cbb23888ce3af8ff29f471f5bd5a2
    Move control block mName to createTrack() output
    
    This is part of a series of CLs to clean up the shared memory
    control block, by removing any fields that don't have to be there.
    
    Change-Id: I6e51003a1293b6800258c31b22cff2eba42162e7
    AudioFlinger: offload playback, non-blocking write
    
    - Added specialized playback thread class for offload playback,
    derived from directoutput thread.
    This thread type handles specific state transitions for offloaded
    tracks and offloading commands (pause/resume/drain/flush..) to audio HAL.
    As opposed to other threads, does not go to standby if the track is paused.
    
    - Added support for asynchronous write and drain operations at audio HAL.
    Use a thread to handle async callback events from HAL: this avoids locking
    playback thread mutex when executing the callback and cause deadlocks when
    calling audio HAL functions with the playback thread mutex locked.
    
    - Better accouting for track activity: call start/stop and release Output
    methods in audio policy manager when tracks are actually added and removed
    from the active tracks list.
    Added a command thread in audio policy service to handle stop/release commands
    asynchronously and avoid deadlocks with playback thread.
    
    - Track terminated status is not a state anymore. This condition is othogonal
    to state to permitted state transitions while terminated.
    
    Change-Id: Id157f4b3277620568d8eace7535d9186602564de
    New control block for AudioTrack and AudioRecord
    
    Main differences between old and new control block:
     - removes the mutex, which was a potential source of priority inversion
     - circular indices into shared buffer, which is now always a power-of-2 size
    
    Change-Id: I4e9b7fa99858b488ac98a441fa70e31dbba1b865
    Miscellaneous cleanup
    
    Abbreviation framesReady to fRdy for new systrace.
    Put inline const on one line.
    Use local copy of mState in state.
    Improve logging.
    Line length 100.
    
    Change-Id: I8201c3ce0e53fd464fd33d02544e52c342d40b68
    Miscellaneous cleanup
    
    Abbreviation framesReady to fRdy for new systrace.
    Put inline const on one line.
    Use local copy of mState in state.
    Improve logging.
    Line length 100.
    
    Change-Id: I8201c3ce0e53fd464fd33d02544e52c342d40b68
    Start isolating control block accesses in a proxy
    
    The proxy object will eventually be the only code that understands the
    details of the control block.  This should make it easier to change the
    control block in the future.
    
    Initial set of control block fields that are isolated:
     - sample rate
     - send level
     - volume
    
    Prepare for streaming/static separation by adding a union to the control
    block for the new fields.
    
    Fix bug in handling of max sample rate on a track.  It was only checking
    at re-configuration, not at each mix.
    
    Simplify OutputTrack::obtainBuffer.
    
    Change-Id: I2249f9d04f73a911a922ad1d7f6197292c74cd92
    Start isolating control block accesses in a proxy
    
    The proxy object will eventually be the only code that understands the
    details of the control block.  This should make it easier to change the
    control block in the future.
    
    Initial set of control block fields that are isolated:
     - sample rate
     - send level
     - volume
    
    Prepare for streaming/static separation by adding a union to the control
    block for the new fields.
    
    Fix bug in handling of max sample rate on a track.  It was only checking
    at re-configuration, not at each mix.
    
    Simplify OutputTrack::obtainBuffer.
    
    Change-Id: I2249f9d04f73a911a922ad1d7f6197292c74cd92
    Prepare for track invalidation to be done by proxy
    
    Don't rely on control block to determine whether track has been marked
    invalid.  Instead, use a local flag that can't be corrupted by client.
    
    Change-Id: I783dafe828f93c1c3d2d0e5a08105ea536436efb
    Prepare for track invalidation to be done by proxy
    
    Don't rely on control block to determine whether track has been marked
    invalid.  Instead, use a local flag that can't be corrupted by client.
    
    Change-Id: I783dafe828f93c1c3d2d0e5a08105ea536436efb
    AudioTrack::mute() is unused so remove it
    
    If ever needed again, it could be implemented on client side by forcing
    a track volume of 0.
    
    Change-Id: I88a9b4f675b6dca2948549414f9ec2c192d29269
    AudioTrack::mute() is unused so remove it
    
    If ever needed again, it could be implemented on client side by forcing
    a track volume of 0.
    
    Change-Id: I88a9b4f675b6dca2948549414f9ec2c192d29269
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    Remove need for SchedulingPolicyService (JAVA based)
    
    Change-Id: I88f1d15e87db62dccc6bc59098cc2dd490c18095
    Signed-off-by: Jani Monoses <jani@ubuntu.com>
    Signed-off-by: Ricardo Salveti de Araujo <ricardo.salveti@canonical.com>
    fix scheduling policy service death detection
    
    Check status of transactions to scheduling policy service
    and re-acquire a binder interface in case of DEAD_OBJECT.
    
    Bug: 8875559.
    Change-Id: I1e00bd44e2d4723b3ec95d5c31d9652ba08e238a
    Remove timing jitter during startup of audio
    
    This fixes a regression introduced recently, that increased timing jitter
    during the startup of the FastMixer and AudioTrack callback threads.
    
    The regression was to make requestPriority() asynchronous as a way to
    avoid an apparent priority inversion in system_server.  This means that
    the target thread could run briefly with the initial priority, before
    the new priority takes effect.
    
    This change removes the startup jitter for FastMixer, by making the
    requestPriority() synchronous again for that case.  It doesn't matter
    that this restores the priority inversion involving normal mixer thread,
    because it happens during startup of both threads.
    
    The change also removes the startup jitter for the AudioTrack callback
    thread, by having the target thread check whether the requestPriority()
    has completed yet.  If not, the target thread blocks with a timeout
    until the priority boost finishes.
    
    Finally, we now log an error message if the expected priority boost
    doesn't happen.
    
    Bug: 8698989
    Change-Id: Id590e9a274b70ec1ba85b44a585ee37a22e41cbc
    Remove timing jitter during startup of audio
    
    This fixes a regression introduced recently, that increased timing jitter
    during the startup of the FastMixer and AudioTrack callback threads.
    
    The regression was to make requestPriority() asynchronous as a way to
    avoid an apparent priority inversion in system_server.  This means that
    the target thread could run briefly with the initial priority, before
    the new priority takes effect.
    
    This change removes the startup jitter for FastMixer, by making the
    requestPriority() synchronous again for that case.  It doesn't matter
    that this restores the priority inversion involving normal mixer thread,
    because it happens during startup of both threads.
    
    The change also removes the startup jitter for the AudioTrack callback
    thread, by having the target thread check whether the requestPriority()
    has completed yet.  If not, the target thread blocks with a timeout
    until the priority boost finishes.
    
    Finally, we now log an error message if the expected priority boost
    doesn't happen.
    
    Bug: 8698989
    Change-Id: Id590e9a274b70ec1ba85b44a585ee37a22e41cbc
    Use scheduling policy service
    
    Change-Id: I3c09da1dc0de5039d0c15ce7fb2bc373fa398712
    Add NOTICE and MODULE_LICENSE_APACH2 to libs build under /frameworks/av/
    
    Change-Id: I0a3af3e2abdedebd5934f3d941d01c32cfc75e26
    related-to-bug: 6647465
    Copied MODULE_LICENSE_APACH2 and NOTICE from frameworks/base to frameworks/av
    
    Change-Id: I48c927b9690bf902ab167d60171c0ee7995687e0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Upintegrate Audio Flinger changes from ICS_AAH
    
    Bring in changes to audio flinger made to support timed audio tracks
    and HW master volume control.
    
    Change-Id: Ide52d48809bdbed13acf35fd59b24637e35064ae
    Signed-off-by: John Grossman <johngro@google.com>
    No newline or space at end of ALOG format string
    
    Change-Id: I0bef580cbc818cb7c87aea23919d26f1446cec32
    Rename LOG_ASSERT to ALOG_ASSERT
    
    Change-Id: Ie2c7ea6560656d65bad791a61996174c75677517
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename LOG_ASSERT to ALOG_ASSERT  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157519
    
    Bug: 5449033
    Change-Id: I8ceb2dba1b031a0fd68d15d146960d9ced62bbf3
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: I6ec5d2bca9b8ebc0acd395a7dd92e1a48fcdfa9b
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    undo reset to ics-mr1 until we have a better method
    reset to ics-mr1, but keep history
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: Id78bba8c002131d8b52b4170259a87fd94e63c73
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    Fix build warning; LOG_TAG was misplaced
    
    Change-Id: I4fb0590f626445188f9053367707878b2fa0fa30
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    fix incoming call audio start time.
    
    commit cec4abb fixing issue 6720482 had a flaw that
    would insert commmands at the wrong position in the
    audio policy service command thread queue causing other
    commands to be delayed more than expected.
    
    A change in track stop timing introduced by commit bfb1b83
    made this issue visible when answering a call.
    
    Bug: 10860012.
    Change-Id: Iec769112f14e13d13b64628b808e43663e33771c
    audioflinger: add HOTWORD audio source.
    
    HOTWORD is a special capture audio source that uses
    the same audio tuning as VOICE_RECOGNITION but allows an
    active capture to be preempted.
    
    Bug: 10640877.
    
    Change-Id: Iea09a11cbcdbacc8d434e5230e7559dcd1b44ac0
    AudioFlinger: offload playback, non-blocking write
    
    - Added specialized playback thread class for offload playback,
    derived from directoutput thread.
    This thread type handles specific state transitions for offloaded
    tracks and offloading commands (pause/resume/drain/flush..) to audio HAL.
    As opposed to other threads, does not go to standby if the track is paused.
    
    - Added support for asynchronous write and drain operations at audio HAL.
    Use a thread to handle async callback events from HAL: this avoids locking
    playback thread mutex when executing the callback and cause deadlocks when
    calling audio HAL functions with the playback thread mutex locked.
    
    - Better accouting for track activity: call start/stop and release Output
    methods in audio policy manager when tracks are actually added and removed
    from the active tracks list.
    Added a command thread in audio policy service to handle stop/release commands
    asynchronously and avoid deadlocks with playback thread.
    
    - Track terminated status is not a state anymore. This condition is othogonal
    to state to permitted state transitions while terminated.
    
    Change-Id: Id157f4b3277620568d8eace7535d9186602564de
    Fix compile warning
    
    Change-Id: I80de4a013dc65eb7c532561438fd10e005354c03
    Make AudioFlinger::instantiate() more resilient when called from separate module
    
    Bug: 8834855
    Change-Id: I4cd842cdfb09d2aaaaab9df9ac3bec6179709bd3
    Include what is needed
    
    Remove old includes.
    Header files only include other header files that they directly need themselves.
    
    Change-Id: Ic471386808d9f42ea19ccbd59cb50a5f83a89dd0
    Public API changes for audio offload support.
    
    NOTE: this does _not_ include all private member variables added
    to classes as part of offload support. Only public/protected functions
    and stubs functions/variables needed to make the changes buildable.
    
    - isOffloadSupported() added to audio policy service
        A stub implementation is required to build, this always returns false
    - setParameters() added to IAudioTrack
        A stub implementation is required to build, this always returns
        INVALID_OPERATION
    
    - CBlk flag for stream end
    
    - Change AudioSystem::getRenderPosition() to take an audio_output_t
        so caller can specify which output to query
    
    - Add AudioSystem::isOffloadSupported()
        This is fully implemented down to the AudioFlinger function
        AudioPolicyServer::isOffloadSupported() which is just a stub
        that always returns false.
    
    - Add EVENT_STREAM_END to AudioTrack interface.
        STREAM_END is used to signal when the hardware has actually finished
        playing all the data it was sent.
    
    - Add event type enumeration to media player interface AudioSink callbacks
        so that the same callback can be used to handle multiple types of
        event. For offloaded tracks we also have to handle STREAM_END and
        TEAR_DOWN events
    
    - Pass audio_offload_info_t to various functions used for opening outputs,
        tracks and audio players. This passes additional information about the
        compressed stream down to the HAL when using offload.
        For publicly-available APIs this is an optional parameter (for some of
        the internal and low-level APIs around the HAL interface it is mandatory)
    
    - Add getParameters() and setParameters() API to AudioTrack
        Currently dummy implementations.
    
    - Change AudioPlayer contructor so that it takes a set of bitflags defining what
        options are required. This replaces the original bool which only specified
        whether to use deep buffering.
    
    - Changes to StageFright class definition related to handling tearing-down of
        an offloaded track when we need to switch back to software decode
    
    - Define new StageFright utility functions used for offloaded tracks
        Currently dummy implementations.
    
    - AudioFlinger changes to use extended audio_config_t.
        Fills in audio_offload_info_t member if this info is passed in when
        opening an output.
    
    - libvideoeditor changes required to add the new event type parameter
        to AudioSink callback functions
    
    - libmediaplayerservice changes required to add the new event type parameter
        to AudioSink callback functions
    
    Change-Id: I3ab41138aa1083d81fe83b886a9b1021ec7320f1
    Signed-off-by: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
    Signed-off-by: Eric Laurent <elaurent@google.com>
    Prevent AudioCommands being freed before read
    
    When AudioCommandThread::threadLoop process AudioCommands it was
    possible for it to delete a command where the posting thread still
    hadn't read that status from it.
    
    If a second command signaled the thread loop to continue after it
    had inserted a new command while the thread loop was actually waiting
    for the first command to report that it had read the status the
    thread loop would continue and delete the first command.
    
    Changed the wait condition when waiting for the calling thread to
    read status to use command->mCond instead of mWaitWorkCV. This way
    it's guaranteed that the signal to continue comes from the correct
    thread.
    
    Change-Id: Ia69b48cb4fdfaf8b4c83b56a197fb9f2058a92d1
    Add support for querying if a stream is active remotely
    
    Bug 7485803
    
    Change-Id: I0744374f130fd2dd0714102354cffed2fa915361
    Add support for querying if a stream is active remotely
    
    Bug 7485803
    
    Change-Id: I0744374f130fd2dd0714102354cffed2fa915361
    Don't explicitly log tid
    
    If needed, it can be obtained with adb logcat -v threadtime
    
    Change-Id: I91b3911d20f7bcfc3361db4052db21ff9181f1cf
    Don't explicitly log tid
    
    If needed, it can be obtained with adb logcat -v threadtime
    
    Change-Id: I91b3911d20f7bcfc3361db4052db21ff9181f1cf
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Support querying active record sources
    
    Add support for querying whether there is currently a recording
     underway from the specified audio source.
    
    Bug 7314859
    
    Change-Id: I986b231a10ffd368b08ec2f9c7f348d28eaeb892
    Support querying active record sources
    
    Add support for querying whether there is currently a recording
     underway from the specified audio source.
    
    Bug 7314859
    
    Change-Id: I986b231a10ffd368b08ec2f9c7f348d28eaeb892
    audio policy: deprecate ro.camera.sound.forced
    
    The volume and routing policy of AUDIO_STREAM_ENFORCED_AUDIBLE is
    now controlled by AudioService.
    
    Do not read ro.camera.sound.forced is not needed anymore.
    
    Bug 7032634.
    
    Change-Id: Ic0a6396fc4b6efb91cdb4dffe0c8eb035d0440bd
    audio policy: deprecate ro.camera.sound.forced
    
    The volume and routing policy of AUDIO_STREAM_ENFORCED_AUDIBLE is
    now controlled by AudioService.
    
    Do not read ro.camera.sound.forced is not needed anymore.
    
    Bug 7032634.
    
    Change-Id: Ic0a6396fc4b6efb91cdb4dffe0c8eb035d0440bd
    effect_descriptor_t const correctness
    
    Change-Id: Iad008f20d35a18acf500f773900164552fd0c19e
    Use struct assignment instead of explicit memcpy
    
    for POD structs effect_descriptor_t and effect_config_t
    
    Change-Id: Ib2fc47f85fb65ed91b0abb1f87217c49b5eb571d
    Use audio_channel_mask_t more places
    
    Use it in AudioSystem::getOutput(), AudioSystem::getInput(),
    IAudioPolicyService::getOutput(), IAudioPolicyService::getInput(),
    and various other places in AudioFlinger.
    
    Not done: AudioTrack and OutputDescriptor.
    
    Change-Id: I70e83455820bd8f05dafd30c63d636c6a47cd172
    audio policy: fix delayed command insertion
    
    When inserting a delayed command in the audio policy service
    command thread queue, later similar commands are filtered out.
    In case of volume commands and delayed unmuting, this can cause
    a problem where a new volume command can cause the timing of a
    delayed unmuting command to not be honored.
    
    This change makes that a volume command gets the time stamp of
    any delayed command it replaces.
    
    Bug 6720482.
    
    Change-Id: I216f85ac0ea46e4a046d3483e9e9b7ffe6c34a08
    Remove acoustics from AudioSystem::getInput()
    
    Change-Id: I29fb3ee5664c1f0ee0409c1bb2be087ecca637db
    audio policy: acquire lock for volume functions
    
    Acquire the AudioPolicyService mutex when executing
    setStreamVolumeIndex() and getStreamVolumeIndex().
    
    These functions have become more complex and iterate on the
    list of opened outputs and it is safer to acquire the
    AudioPolicyService mutex to avoid concurrency with other
    functions.
    
    Bug 6626532.
    
    Change-Id: Ifdcbbbf13338fd9a59f694d43faa7ade143f94bf
    audioflinger: various fixes on direct output
    
    Various fixes in direct output playback thread implementation:
    - threadLoop_write() was broken for playback threads that do not
    use a pipe sink.
    - output buffer size calculation was hard coded for stereo.
    - removed software volume that was implemented for PCM stereo
    format only: the audio HAL has to implement volume if needed
    for direct outputs.
    
    Change-Id: If211b4489be9af395435707b8cf0388cce1347b2
    rename audio policy output flags
    
    Change-Id: I27c46bd1d1b2b5f96b87af7d05b951fef18a1312
    audio policy: load audio hw modules.
    
    Audio HW modules are now loaded upon request from audio policy manager
    according to the configuration in audio_policy.conf.
    Removed hard coded HW module loading by AudioFlinger at init time.
    Added methods to IAudioFlinger and AudioPolicyInterface
    to control the loading of audio HW modules.
    Added methods to open an output or input stream on a specific hw module.
    
    Change-Id: I361b294ece1a9b56b2fb39cc64259dbb73b804f4
    audio policy: add configuration file
    
    removed outputs to stream mapping cache in audio system: the output for a
    given stream type must always be queried from audio policy manager as the cache
    is not always updated fast enough by audioflinger callback.
    
    removed AudioFlinger::PlaybackThread::setStreamValid() not used anymore if
    stream to output mapping is not cached.
    
    Change-Id: Ieca720c0b292181f81247259c8a44359bc74c66b
    Whitespace and indentation
    
    Fix indentation to be multiple of 4.
    Make it easier to search:
      sp< not sp < to
      "switch (...)" instead of "switch(...)" (also "if" and "while")
    Remove redundant blank line at start or EOF.
    Remove whitespace at end of line.
    Remove extra blank lines where they don't add value.
    
    Use git diff -b or -w to verify.
    
    Change-Id: I966b7ba852faa5474be6907fb212f5e267c2874e
    AudioPolicyService InputDesc minor cleanup
    
    Add a non-default constructor to set the mSessionId, and make mSessionId const.
    
    Remove explicit clear on mEffects - it is automatically cleared by the destructor.
    
    AudioPolicyService::setPreProcessorEnabled:
     - parameter is const *
     - use an alias instead of making a Vector copy
    
    Destructor doesn't need to be virtual since there are no subclasses.
    
    Change-Id: Ibc3c3bea8259839430b1cf5356186c7d96f1082f
    audio policy: use audio_devices_t when appropriate
    
    Change-Id: I1b3a5879e81c789fb53d356af3d3a1ee2dca955f
    Shorten thread names
    
    prctl(PR_SET_NAME) limits to 15 characters.  Before we had names like
    "Binder Thread #" and the counter was cut off :-( Also remove redundant
    "thread" at end of name; it's always a thread.
    
    Change-Id: I1f99c2730ba0787ed9b59c15914356cddf698e2f
    Simplify code
    
    Use DefaultKeyedVector::valueFor to avoid extra test
    Make local variables as local as possible
    No double parentheses
    No typedef for single use
    No parentheses around indirect function call
    No AudioFlinger:: prefix when not needed
    Remove unnecessary casts
    Remove block with only one line
    
    Saves 128 bytes
    
    Change-Id: I3a87430eeb01b81e7b81a1c38f6fdd3274ec48f3
    Fixed possible heap corruption in EffectDesc
    
    "EffectDesc *effect = new EffectDesc(*effects[i]);" was relying on the
    default copy constructor for EffectDesc, but the default copy constructor
    does a member-by-member copy.  This works OK for mUuid, but a member
    copy of mName and mParams shares pointers.  This could result in heap
    corruption later on due to a double free.  Changed to add an explicit
    copy constructor that does a deep copy of both mName and mParams.
    
    A malloc() and strdup() were being freed by delete, but the correct
    matching API for these is free().  Fortunately our current memory runtime
    implementation ignores the difference. Changed to use free().
    
    EffectDesc and InputSourceDesc member fields were being torn down by
    the code that does delete.  Changed to do the tear-down in ~EffectDesc()
    and ~InputSourceDesc().
    
    Added constructor EffectDesc() with name and UUID parameters, rather
    than having caller fill in the object after construction.
    
    Made ~EffectDesc() and ~InputSourceDesc() non-virtual to save memory,
    since they have no subclasses.
    
    Change-Id: Ibb5cc2e6760d72e0c4cf537068ac4432c717bafd
    Use size_t and ssize_t with Vector
    
    Use size_t with size() and ssize_t with indexOfKey().  Exception:
    use ssize_t for backwards loops, and indices that are overloaded as a
    marker or error code.
    
    Change-Id: Ibf2a360af4539b72b09c818dda22ea2a0de92431
    Factor out and speed up permission-checking code
    
    Use the caching permission check for dump to save IPC.
    
    Cache getpid() to save kernel call for other permission checks.
    
    The C runtime library getpid() can't cache due to a fork
    race condition, but we know that mediaserver doesn't fork.
    
    Don't construct String16 on the stack.
    
    Change-Id: I6be6161dae5155d39ba6ed6228e7683e67be34ed
    Follow raw pointer and sp<> conventions
    
    Unconditional delete for raw pointers.
    Use "if (sp != 0)" not "if (sp.get() != 0)" or "if (sp != NULL)".
    Use "if (raw != NULL)" not "if (raw)".
    
    Change-Id: I531a8da7c37149261ed2f34b862ec4896a4b785b
    Fix typos in ALOG for pid vs tid
    
    Change-Id: I6dc70f137d0ff8a86427ab8882a81886e1de0782
    Use audio_io_handle_t consistently instead of int
    
    Other:
     - add a comment to nextUniqueId
     - made ThreadBase::mId const, since it is only assigned in constructor.
    
    Change-Id: I4e8b7bec4e45badcde6274d574b8a9aabd046837
    Use 0 not NULL for sp<> and wp<>
    
    Change-Id: Id1f0c89acefaceed6cb9ca7c165fce895e46d85b
    Use NULL not 0 for raw pointers
    
    Use if (p != NULL) instead of if (ptr)
    
    Change-Id: Iaec3413a59ccbf233c98fcd918cc7d70ac5da9fa
    Unconditional delete
    
    Don't check that pointer is non-NULL before delete.
    
    Don't leave deleted member fields non-NULL, except in a destructor,
    since it could be misleading in a dump or debugger. (mRsmpOutBuffer)
    
    Change-Id: Ic0492a6b752f74a67f4c96dfb89ca2de4e69eecf
    Use ToneGenerator::tone_type consistently
    
    Also remove defaults in startToneCommand(), they're not needed and the
    default for tone type was nonsense.
    
    Change-Id: I70fa8cee4f3dbb8c66ceb3719c8d3d2f447f05b9
    Use audio_in_acoustics_t consistently
    
    Change-Id: I0a9dd668fb2e57b1c3ece3190588194974b99062
    Use audio_source_t consistently
    
    Was a mix of audio_source_t, uint8_t, and int.
    
    Related fixes:
     - fix comments in MediaRecorder.java
     - AudioPolicyService server side was not checking source parameter at
       all, so if the client wrapper was bypassed, invalid values could be
       passed into audio HAL
     - JNI android_media_AudioRecord_setup was checking source for positive
       values, but not negative values. This test is redundant, since already
       checked at Java and now checked by AudioPolicyService also, but might
       as well make it correct.
    
    Change-Id: Ie5e25d646dcd59a86d7985aa46cfcb4a1ba64a4a
    Use audio_format_t consistently, continued
    
    Was int or uint32_t.
    
    When AudioFlinger::format can't determine the correct format,
    return INVALID rather than DEFAULT.
    
    Init mFormat to INVALID rather than DEFAULT in the constructor.
    Subclass constructors will set mFormat to the correct value.
    
    Change-Id: I9b62640aa107d24d2d27925f5563d0d7407d1b73
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)
    
    Change-Id: I26f76452ac49e2890b14d133c065493d8df0fb4a
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Add units to time periods
    
    Change-Id: Ib980e2676cecf5d9b0c2e388da6dc8e370df8abb
    Use const const strings for arrays and pointers to strings
    
    Change-Id: I0a073e17ebf6ad59e7edbedac104c6fa4bcaf9c9
    For booleans, use ! instead of == false
    
    Change-Id: Ibc115936d2d0b0b7744ebe9b52839ea5b42c4edd
    Remove dead setRingerMode(mode, mask)
    
    Change-Id: Ia4cc8be8424a40b3dcb7ebd0264fdff4e5247f7f
    audio framework: manage stream volume per device
    
    Improve volume management by keeping track of volume for each type
    of device independently.
    Volume for each stream (MUSIC, RINGTONE, VOICE_CALL...) is now maintained
    per device.
    
    The main changes are:
    - AudioService now keeps tracks of stream volumes per device:
     volume indexes are kept in a HashMap < device , index>.
     active device is queried from policy manager when a volume change request
     is received
     initalization, mute and unmute happen on all device simultaneously
    - Settings: suffixes is added to volume keys to store each device
    volume independently.
    - AudioSystem/AudioPolicyService/AudioPolicyInterface: added a device argument
    to setStreamVolumeIndex() and getStreamVolumeIndex() to address each
    device independently.
    - AudioPolicyManagerBase: keep track of stream volumes for each device
    and apply volume according to current device selection.
    
    Change-Id: I61ef1c45caadca04d16363bca4140e0f81901b3f
    Check stream type in AudioFlinger::createTrack
    
    A bad parameter to AudioFlinger::createTrack could cause mediaserver to crash.
    
    Other AudioFlinger stream type cleanup:
     - Simplify range check for audio_stream_type_t
     - Add comment about mStreamTypes array initialization.
    
    Change-Id: Ia33aa1cce0fdd694b08d9288816ffc097a9543d0
    Use audio_stream_type_t consistently
    
    At native level it was a mixture of audio_stream_type_t, int, uint32_t,
    and uint8_t.  Java is still int.  Also fixed a couple of hard-coded -1
    instead of AUDIO_STREAM_DEFAULT, and in startToneCommand a hard-coded 0
    instead of AUDIO_STREAM_VOICE_CALL.
    
    Change-Id: Ia33bfd70edca8c2daec9052984b369cd8eee2a83
    Use audio_mode_t consistently
    
    It was int or uint32_t.
    Also make getMode() const.
    
    Change-Id: Ibe45aadbf413b9158e4dd17f2b3bcc6355288d37
    Simplify range check for audio_mode_t
    
    AudioSystem::setMode previously allowed negative modes, but these were
    then rejected by AudioFlinger.
    
    Now negative modes (including AUDIO_MODE_INVALID and AUDIO_MODE_CURRENT)
    are explicitly disallowed.
    
    Change-Id: I0bac8fea737c8eb1f5b6afbb893e48739f88d745
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: Ib08fe86d23db91ee153e9f91a99a35c42b9208ea
    Fix includes
    
    Remove unused #include dlfcn.h
    
    Add #include String8.h
    Forward class declaration is only for references and pointers.
    In this case, we need the full class declaration,
    and were incorrectly depending on another header file to do it.
    
    Change-Id: Iff65cceb3982698cc1ebaeec405695fc190c03ff
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Issue 5081351: isWiredHeadsetOn() permission.
    
    AudioManager.isWiredHeadsetOn() should not require permission MODIFY_AUDIO_SETTINGS.
    Remove permission checks on all getters in audio policy manager as permission enforcement
    is really usefull for setters.
    Also deprecate AudioManager.isWiredHeadsetOn() which name and implementation are deceptive.
    
    Change-Id: I38f8df7c26c0d417bf0e2b74e4c11c2d143f2ecd
    Audio effects: track CPU and memory use separately
    
    Before this change, CPU and memory usage for an audio effect were
    registered and checked against the limit by audio policy manager
    upon effect instantiation. Even if an effect was not enabled
    it would prevent another effect to be created if the CPU load budget
    was exceeded, which was too restrictive.
    
    This change adds a method to register/unregister CPU load only when
    an effect is enabled or disabled.
    It also adds a mechanism to place all effects on the global output mix
    in suspend state (disabled) when an effect is enabled on a specific session.
    This will allow applications using session effects to have the priority
    over others using global effects.
    
    Also fixes some issues with suspend/restore mechanism:
    - avoid taking actions when an effect is disconnected and was not enabled.
    - do not remove a session from the suspended sessions list when corresponding
    effect chain is destroyed.
    
    Change-Id: I5225278aba1ae13d0d0997bfe26a0c9fb46b17d3
    Added APIs for audio preprocessing
    
    Added APIs to control pre processes applied on captured audio.
    Those APIs are still hidden until reviewed by API council.
    
    Three types of standard pre processes are supported:
    - Automatic Gain Control (AGC) by AutomaticGainControl class
    - Acoustic Echo Cancellation (AEC) by AcousticEchoCanceler class
    - Noise Suppression (NS) by NoiseSuppressor class
    
    A method is added to AudioEffect class to query audio pre processings
    applied by default by the platform on a given AudioRecord session ID.
    
    Change-Id: I0b9fceeb8c704dd06319c3b52b85c96fe871d51d
    Audio framework: support for audio pre processing
    
    Audio effect framework is extended to suport effects on
    output and input audio path.
    
    AudioFlinger: Support for audio effects and effect chains is
    moved from PlaybackThread class to ThreadBase class so that
    RecordThread can manage effects.
    Effects of type pre processing are allowed on record thread
    only. When a pre processing is enabled, the effect interface handle is
    passed down to the input stream so that the audio HAL can call the
    process function. The record thread loop calls the effect chain process
    function that will only manage the effect state and commands and skip the
    process function.
    
    AudioRecord: The audio session is allocated before calling getInput() into
    audio policy serice so that the session is known before the input theead is
    created and pre processings can be created on the correct session.
    
    AudioPolicyService: default pre processing for a given input source are
    loaded from audio_effects.conf file.
    When an input is created, corresponding effects are created and enabled.
    
    Change-Id: Id17119e0979b4dcf189b5c7957fec30dc3478790
    Remove some #ifdef HAVE_ANDROID_OS that were needed for the simulator build
    
    Change-Id: I13d9f251f86c05ae5405f37adbf6b8e9660935ba
    Signed-off-by: Mike Lockwood <lockwood@android.com>
    audio: update for audio/audio_policy header names/locations
    
    Change-Id: I36c49352eee57559403cd1597f56a8485a360289
    Signed-off-by: Dima Zavin <dima@android.com>
    Remove dead code related to gettid
    
    The gettid system call is always available now.
    
    Change-Id: Ib78b41781eda182dc8605daf456bbea7ff7c2dc0
    update for new audio.h header location
    
    Change-Id: Ic4c62c4037800802427eb7d3c7f5eb8b25d18876
    Signed-off-by: Dima Zavin <dima@android.com>
    audio/media: convert to using the audio HAL and new audio defs
    
    Change-Id: Ibc637918637329e4f2b62f4ac7781102fbc269f5
    Signed-off-by: Dima Zavin <dima@android.com>
    Bug 3352047 Wrong message when adjusting volume
    
    Add hidden AudioManager.getDevicesForStream and output device codes.
    
    Change-Id: I4d1c1d3b6a077cd117720817d1f733dda557b947
    Bug 3366668 Use BinderService template
    
    Change-Id: I93d7f3fc9dc9b6a365723d8a51a73a5aabdb4f93
    Fix issue 3371080
    
    Modified default volume control logic in AudioService:
    1 IN_CALL volume if in video/audio chat
    2 NOTIFICATION if notification is playing or was playing less than 5s ago.
    3 MUSIC
    
    Modified silent mode:
    - now also affect MUSIC stream type
    - entering silent mode when VOL- hard key is pressed once while selected
    stream volume is already at 0 (except for VOICE_CALL stream).
    - exiting silent mode when pressing VOL+ hard key while in silent mode
    
    Play sound FX (audible selections, keyboard clicks) at a fixed volume.
    
    Modified audio framework:
    - isStreamActive() method now implemented in AudioPolicyManagerBase (previously AudioFlinger)
    - iStreamActive() now specifies a time window during which the stream is considered
    active after it actually stopped.
    
    Change-Id: I7e5a0724099450b9fc90825224180ac97322785f
    Tentative fix for issue 3362362.
    
    The problem is likely that one method is called on the AudioPolicyManagerBase
    instance while it is still being constructed by AudioPolicyService.
    
    To avoid this, the AudioPolicyService mutex is held by the constructor until the
    platform specific AudioPolicyManager is constructed and the member
    mpPolicyManager initialized.
    
    Also added an initCheck() method to AudioPolicyInterface to verify successful
    initialization of AudioPolicyManager.
    
    A similar change is done in AudioFlinger constructor.
    Also added some missing protections in AudioFlinger methods where the
    playback thread list is parsed.
    
    Change-Id: I006b244ec057e1bb0aa5ebe426ef006e3b171056
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    Audio policy manager changes for audio effects
    
    Added methods for audio effects management by audio policy manager.
    - control of total CPU load and memory used by effect engines
    - selection of output stream for global effects
    - added audio session id in parameter list for startOutput() and stopOutput().
    this is not used in default audio policy manager implementation.
    
    Modifications of audio effect framework in AudioFlinger to allow moving and reconfiguring
    effect engines from one output mixer thread to another when audio tracks in the same session
    are moved or when requested by audio policy manager.
    Also fixed mutex deadlock problem with effect chains locks.
    
    Change-Id: Ida43484b06e9b890d6b9e53c13958d042720ebdb
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    Make AudioFlinger::instantiate() more resilient when called from separate module
    
    Bug: 8834855
    Change-Id: I4cd842cdfb09d2aaaaab9df9ac3bec6179709bd3
    fix scheduling policy service death detection
    
    Check status of transactions to scheduling policy service
    and re-acquire a binder interface in case of DEAD_OBJECT.
    
    Bug: 8875559.
    Change-Id: I1e00bd44e2d4723b3ec95d5c31d9652ba08e238a
    Remove timing jitter during startup of audio
    
    This fixes a regression introduced recently, that increased timing jitter
    during the startup of the FastMixer and AudioTrack callback threads.
    
    The regression was to make requestPriority() asynchronous as a way to
    avoid an apparent priority inversion in system_server.  This means that
    the target thread could run briefly with the initial priority, before
    the new priority takes effect.
    
    This change removes the startup jitter for FastMixer, by making the
    requestPriority() synchronous again for that case.  It doesn't matter
    that this restores the priority inversion involving normal mixer thread,
    because it happens during startup of both threads.
    
    The change also removes the startup jitter for the AudioTrack callback
    thread, by having the target thread check whether the requestPriority()
    has completed yet.  If not, the target thread blocks with a timeout
    until the priority boost finishes.
    
    Finally, we now log an error message if the expected priority boost
    doesn't happen.
    
    Bug: 8698989
    Change-Id: Id590e9a274b70ec1ba85b44a585ee37a22e41cbc
    Remove timing jitter during startup of audio
    
    This fixes a regression introduced recently, that increased timing jitter
    during the startup of the FastMixer and AudioTrack callback threads.
    
    The regression was to make requestPriority() asynchronous as a way to
    avoid an apparent priority inversion in system_server.  This means that
    the target thread could run briefly with the initial priority, before
    the new priority takes effect.
    
    This change removes the startup jitter for FastMixer, by making the
    requestPriority() synchronous again for that case.  It doesn't matter
    that this restores the priority inversion involving normal mixer thread,
    because it happens during startup of both threads.
    
    The change also removes the startup jitter for the AudioTrack callback
    thread, by having the target thread check whether the requestPriority()
    has completed yet.  If not, the target thread blocks with a timeout
    until the priority boost finishes.
    
    Finally, we now log an error message if the expected priority boost
    doesn't happen.
    
    Bug: 8698989
    Change-Id: Id590e9a274b70ec1ba85b44a585ee37a22e41cbc
    Workaround: requestPriority() is one-way
    
    Bug: 8565696
    Change-Id: If5fcdf8593e1ca15bea45217bd683b43a2a106c7
    Workaround: requestPriority() is one-way
    
    Bug: 8565696
    Change-Id: If5fcdf8593e1ca15bea45217bd683b43a2a106c7
    Use scheduling policy service
    
    Change-Id: I3c09da1dc0de5039d0c15ce7fb2bc373fa398712
    media.log cleanup
    
    Remove almost all of the specific logs, but leave the media.log
    logging infrastructure in place for the next time we need it.
    
    Re-apply a few good changes that were reverted earlier:
     - check logf format vs. argument list compatibility
     - distinguish potentially modified and actually modified tracks in FastMixer
     - fix benign bug where sq->end() was called more than once
     - fix a build warning
    
    Bug: 6490974
    Change-Id: I02d3e83646c738acaebb415bd0d6b548638b4ef5
    media.log cleanup
    
    Remove almost all of the specific logs, but leave the media.log
    logging infrastructure in place for the next time we need it.
    
    Re-apply a few good changes that were reverted earlier:
     - check logf format vs. argument list compatibility
     - distinguish potentially modified and actually modified tracks in FastMixer
     - fix benign bug where sq->end() was called more than once
     - fix a build warning
    
    Bug: 6490974
    Change-Id: I02d3e83646c738acaebb415bd0d6b548638b4ef5
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 32584a7d672864b20ab8b83a3cb23c1858e908b7
    
    Change-Id: I9dc680578b955b1af462eeb7a49d61a0d45eb81b
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 32584a7d672864b20ab8b83a3cb23c1858e908b7
    
    Change-Id: I9dc680578b955b1af462eeb7a49d61a0d45eb81b
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
     - increase log buffer sizes yet again
     - enable assertion checking without ALOGV
     - improve a few log messages
     - check for corruption in more places
     - log in all the process hooks
     - add new mixer APIs so we can check for corruption of mixer state
     - fix a build warning
    
    Bug: 6490974
    Change-Id: Ib0c4a73dcf606ef9bd898313b3b40ef61ab42f51
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
     - increase log buffer sizes yet again
     - enable assertion checking without ALOGV
     - improve a few log messages
     - check for corruption in more places
     - log in all the process hooks
     - add new mixer APIs so we can check for corruption of mixer state
     - fix a build warning
    
    Bug: 6490974
    Change-Id: Ib0c4a73dcf606ef9bd898313b3b40ef61ab42f51
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 639482c24c911b125398b31883ba6d55faebe28b
    
    Change-Id: I11f2829072ab11e18b0663024f27bf31192f1d39
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 639482c24c911b125398b31883ba6d55faebe28b
    
    Change-Id: I11f2829072ab11e18b0663024f27bf31192f1d39
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 0ddd56316262ac74a95e9edb595697c163136d6d
    
    Change-Id: I180a928af6f5a38d15a5efe44cd1fe927b5d961c
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 0ddd56316262ac74a95e9edb595697c163136d6d
    
    Change-Id: I180a928af6f5a38d15a5efe44cd1fe927b5d961c
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Document AudioMixer hard-coded limits
    
    Change-Id: I83ea8bed375f251260945db788bdb5f280dba12d
    Document AudioMixer hard-coded limits
    
    Change-Id: I83ea8bed375f251260945db788bdb5f280dba12d
    Communicate audio session ID to downmixer
    
    The audio downmixer effect might need the audio session Id, pass it
     from the track creation in AudioFlinger to the downmix effect
     creation in AudioMixer.
    
    Change-Id: I836873eebd6711f1048fce81cd2eb29b94f0ad0c
    Communicate audio session ID to downmixer
    
    The audio downmixer effect might need the audio session Id, pass it
     from the track creation in AudioFlinger to the downmix effect
     creation in AudioMixer.
    
    Change-Id: I836873eebd6711f1048fce81cd2eb29b94f0ad0c
    Communicate audio session ID to downmixer
    
    The audio downmixer effect might need the audio session Id, pass it
     from the track creation in AudioFlinger to the downmix effect
     creation in AudioMixer.
    
    Change-Id: I5e29540542ae89cf4a0cdb537b3e67f04442a20a
    Communicate audio session ID to downmixer
    
    The audio downmixer effect might need the audio session Id, pass it
     from the track creation in AudioFlinger to the downmix effect
     creation in AudioMixer.
    
    Change-Id: I5e29540542ae89cf4a0cdb537b3e67f04442a20a
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Share local time frequency for all tracks & mixers
    
    Change-Id: I5e6f0e371f728a5225c2fa6f778c109449d33602
    Fix multichannel downmix pause bug on video player
    
    Pausing a video player will cause the track audio mixer to be
     disabled, which causes the downmixer to be deleted. When reenabled,
     the track channel mask hasn't changed but the downmixer is there
     anymore.
    Fixed by:
    - instanciating a downmixer when the AudioMixer track
     gets initialized (in getTrackName(), now taking a channel mask
     as input), and deleted when in deleteTrackName().
    - when the channel changes on a track, check whether it
     needs a downmixer or not. Preparing a track for downmix
     automatically removes the old downmixer if there was one.
    
    Also: initialize the track downmixerBufferProvider field
     when AudioMixer is instanciated, so we can safely call
     delete on it in AudioMixer's destructor, in case
     deleteTrackName() wasn't called before the mixer was
     destroyed.
    
    Change-Id: I589b0781cda5b3c82f85b561c52b08546cac21f8
    AudioMixer new cmd: remove sample rate converter
    
    Add a new command REMOVE to remove any sample rate converter
       on a track, without having to delete the track name.
    Add comments.
    Remove some dead code.
    Fix whitespace and comparison to NULL.
    
    Change-Id: Id55a23ab5ee673189e99675b4e6fa5df7b617987
    AudioMixer uses downmix effect for multichannel content
    
    In the AudioMixer structure associated with each track, add an object
      that acts as the buffer provider when the track has more than two
      channels of input in the mixer. This object, DownmixerBufferProvider,
      gets audio from the actual buffer provider of the track, and applies
      a downmix effect on it.
    The downmix effect is created and configured when the track gets
      created in AudioFlinger, which causes AudioMixer::getTrackName()
      to be called with the new track's channel mask. It is released
      when the track is disabled in the mixer.
    
    Change-Id: I05281ed5f61bef663a8af7ca7d5ceac3517c82db
    AudioMixer can be configured for fewer max tracks
    
    Change-Id: I371b17cef071d083eecf35cd3627a3adff907a33
    Update comments
    
    Change-Id: I327663a020670d0a72ff57bd0b682e2ce0528650
    Remove bit fields to improve performance
    
    uint16_t enabled is (mostly) changed to bool in a separate CL
    
    Change-Id: Ied9f8c034b2479cee9a8778cee7b8ff92ae75b7b
    Simplify code
    
    Use DefaultKeyedVector::valueFor to avoid extra test
    Make local variables as local as possible
    No double parentheses
    No typedef for single use
    No parentheses around indirect function call
    No AudioFlinger:: prefix when not needed
    Remove unnecessary casts
    Remove block with only one line
    
    Saves 128 bytes
    
    Change-Id: I3a87430eeb01b81e7b81a1c38f6fdd3274ec48f3
    Upintegrate Audio Flinger changes from ICS_AAH
    
    Bring in changes to audio flinger made to support timed audio tracks
    and HW master volume control.
    
    Change-Id: Ide52d48809bdbed13acf35fd59b24637e35064ae
    Signed-off-by: John Grossman <johngro@google.com>
    Update comments
    
    We no longer put the filename at start of file.
    
    Change-Id: Ic435b159a23105681e3d4a6cb1ac097bc853302e
    AudioFlinger methods const and inline
    
    This saves 1063 bytes and probably improves performance.
    
    Change-Id: I11cf0dfd925fbaec75e3d1b806852a538eae5518
    Use virtual destructors
    
    It turns out to be just a comment, as all except AudioMixer are RefBase.
    
    There are only a few performance-sensitive cases where it's worth thinking
    about whether you need a virtual destructor, and the headache usually
    outweighs the benefit.
    
    Change-Id: I716292f9556ec17c29ce8c76ac8ae602cb496533
    By convention const goes before the type specifier
    
    Change-Id: I70203abd6a6f54e5bd9f1412800cc01212157e58
    Use the standard CC_LIKELY and CC_UNLIKELY macros
    
    Several source files privately defined macros LIKELY and UNLIKELY in terms
    of __builtin_expect. But <cutils/compiler.h> already has CC_LIKELY and
    CC_UNLIKELY which are intended for this purpose.  So rename the private
    uses to use the standard names.
    
    In addition, AudioFlinger was relying on the macro expanding to extra ( ).
    
    Change-Id: I2494e087a0c0cac0ac998335f5e9c8ad02955873
    audioflinger: fix clicks on 48kHz audio.
    
    The calculation done in prepareTracks_l() for the minimum amount
    off frames needed to mix one output buffer had 2 issues:
    - the additional sample needed for interpolation was not included
    - the fact that the resampler does not acknowledge the frames consumed
    immediately after each mixing round but only once all frames requested have been used
    was not taken into account.
    Thus the number of frames available in track buffer could be considered sufficient although
    it was not and the resampler would abort producing a short silence perceived as a click.
    
    Issue 5727099.
    
    Change-Id: I7419847a7474c7d9f9170bedd0a636132262142c
    Remove the notion of "active track" from mixer
    
    This is a first step towards making the mixer more object-oriented.
    
    Change-Id: Ifd445d0e471023a7f5c82e934736ffc95ba1b05b
    Remove dead code
    
    Change-Id: Icf23f7f90fdeb660f4015f22cf239e6d05f5d03c
    Use constants for 2 and 32
    
    Change-Id: If820dfd58b6df258570750610a07af99598d9e53
    Use switch in AudioMixer::setParameter
    
    Replace series of if/then/elses by easier-to-read switch.  Also return
    void instead of status_t, since callers weren't checking it. Assert on
    bad input parameters.
    
    Change-Id: Ie1f0a297977b28501d20e1af819afed9b4750616
    Extract out audio DSP code to utility library
    
    Change-Id: Ib8ce72028a7ea30e82baa518e381370e820ebbd0
    setActiveTrack and setBufferProvider can't fail
    
    Return void, not status_t, from setActiveTrack and setBufferProvider.
    
    These methods returned status_t, but the callers never checked the
    return value.  Since these aren't externally visible APIs, they now
    return void, and assert on bad input parameters.
    
    Change-Id: I530ed29484596ae41e8659826ca425149c51c2a1
    Simplify enable/disable mixing
    
    The MIXING enum isn't needed, and now returns void instead of status_t.
    
    Change-Id: Ibe4ec24081d75ad4ab78b9c7191fc9077959c4e9
    Audio C++ comments
    
    Change-Id: I84906ebb9dfcfa5b96b287d18364b407f02a30c1
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: I6ec5d2bca9b8ebc0acd395a7dd92e1a48fcdfa9b
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    undo reset to ics-mr1 until we have a better method
    reset to ics-mr1, but keep history
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: Id78bba8c002131d8b52b4170259a87fd94e63c73
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    Use channel mask instead of channel count for track creation
    
    Record and playback objects (resp AudioRecord and AudioTrack)
    are created using a channel mask, but this information is lost
    in the mixer because only the channel count is known to
    AudioFlinger. A channel count can always be derived from a
    channel mask.
    
    The change consists in:
    - disambiguiting variable names for channel masks and counts
    - passing the mask information from the client to AudioFlinger
     and the mixer.
    - when using the DIRECT ouput, only verifying the format of
     the track is compatible with the output's for PCM.
    
    Change-Id: I50d87bfb7d7afcabdf5f12d4ab75ef3a54132c0e
    Fix issue 3479042.
    
    The problem is that when an AudioRecord using the resampler is restarted,
    the resampler state is not reset (as there is no reset function in the resampler).
    The consequence is that the first time the record thread loop runs, it calls the resampler
    which consumes the remaining data in the input buffer and when this buffer is released
    the input index is incremented over the limit.
    
    The fix consists in implementing a reset function in the resampler.
    
    A similar problem was also present for playback but unoticed because the track buffer is always
    drained by the mixer when a track stops. The only problem for playback was that the initial
    phase fraction was wrong when restarting a track after stop (it was correct after a pause).
    
    Change-Id: Ifc2585d685f4402d29f4afc63f6efd1d69265de3
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    audioflinger: add HOTWORD audio source.
    
    HOTWORD is a special capture audio source that uses
    the same audio tuning as VOICE_RECOGNITION but allows an
    active capture to be preempted.
    
    Bug: 10640877.
    
    Change-Id: Iea09a11cbcdbacc8d434e5230e7559dcd1b44ac0
    Enforce permission for recording from remote submix.
    
    Bug: 10265163
    Change-Id: I2395036bac6e10baeaf6ea4bc3093bd9dd98742d
    Use correct pid when running under test harness
    
    This is a partial fix which addresses one of the root causes of this bug,
    but only when running under test harness.  It has no effect otherwise.
    
    Bug: 8598539
    Change-Id: I87444daef1d76b17544f331e651ba1c87893c381
    Use correct pid when running under test harness
    
    This is a partial fix which addresses one of the root causes of this bug,
    but only when running under test harness.  It has no effect otherwise.
    
    Bug: 8598539
    Change-Id: I87444daef1d76b17544f331e651ba1c87893c381
    Factor out and speed up permission-checking code
    
    Use the caching permission check for dump to save IPC.
    
    Cache getpid() to save kernel call for other permission checks.
    
    The C runtime library getpid() can't cache due to a fork
    race condition, but we know that mediaserver doesn't fork.
    
    Don't construct String16 on the stack.
    
    Change-Id: I6be6161dae5155d39ba6ed6228e7683e67be34ed
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add resampler comments and fix a typo
    
    Change-Id: Ie071673875f663de4212eed4a4dff89d51a5a915
    make libaudioflinger symbols visibility hidden
    
    we export only symbols needed by clients of this library.
    this saves about 130KB (1/3rd of the lib size)
    
    Change-Id: Id81f3ecb299ee3abc0811915cf6efe87180bf15c
    Integrate improved coefficient sinc resampler: VHQ
    
    Summary:
    Very high quality is enabled only for 44.1 -> 48 or 48 -> 44.1,
      and uses low quality for all other use cases.
    Track estimated CPU load and throttles the quality based on load;
      as currently configured it should allow up to 2 instances of very high quality.
    Medium quality and high quality are currently disabled unless explicitly requested.
    
    Details:
    Only load .so the first time it is needed.
    Cleanup code style: formatting, indentation, whitespace.
    Restore medium quality resampler, but it is not used (see next line).
    Fix memory leak for sinc resampler.
    Check sample rate in resampler constructor.
    Add logs for debugging.
    Rename DEFAULT to DEFAULT_QUALITY for consistency with other quality levels.
    Renumber VERY_HIGH_QUALITY from 255 to 4.
    Use enum src_quality consistently.
    Improve parsing of property af.resampler.quality.
    Fix reentrancy bug - allow an instance of high quality and an instance
      of very high quality to both be active concurrently.
    
    Bug: 7229644
    Change-Id: I0ce6b913b05038889f50462a38830b61a602a9f7
    Integrate improved coefficient sinc resampler: VHQ
    
    Summary:
    Very high quality is enabled only for 44.1 -> 48 or 48 -> 44.1,
      and uses low quality for all other use cases.
    Track estimated CPU load and throttles the quality based on load;
      as currently configured it should allow up to 2 instances of very high quality.
    Medium quality and high quality are currently disabled unless explicitly requested.
    
    Details:
    Only load .so the first time it is needed.
    Cleanup code style: formatting, indentation, whitespace.
    Restore medium quality resampler, but it is not used (see next line).
    Fix memory leak for sinc resampler.
    Check sample rate in resampler constructor.
    Add logs for debugging.
    Rename DEFAULT to DEFAULT_QUALITY for consistency with other quality levels.
    Renumber VERY_HIGH_QUALITY from 255 to 4.
    Use enum src_quality consistently.
    Improve parsing of property af.resampler.quality.
    Fix reentrancy bug - allow an instance of high quality and an instance
      of very high quality to both be active concurrently.
    
    Bug: 7229644
    Change-Id: I0ce6b913b05038889f50462a38830b61a602a9f7
    audioflinger: use resample coefficients from audio-resampler library.
    
    -Add a separate quality VERY_HIGH_QUALITY in resampler
    -Use resample coefficients audio-resampler library for
     quality VERY_HIGH_QUALITY.
    -This improves the quality of resampled output.
    
    Bug: 7024293
    Change-Id: Ia44142413bed5f5963d7eab7846eec877a2415e4
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    audioflinger: use resample coefficients from audio-resampler library.
    
    -Add a separate quality VERY_HIGH_QUALITY in resampler
    -Use resample coefficients audio-resampler library for
     quality VERY_HIGH_QUALITY.
    -This improves the quality of resampled output.
    
    Bug: 7024293
    Change-Id: Ia44142413bed5f5963d7eab7846eec877a2415e4
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Whitespace and indentation
    
    Fix indentation to be multiple of 4.
    Make it easier to search:
      sp< not sp < to
      "switch (...)" instead of "switch(...)" (also "if" and "while")
    Remove redundant blank line at start or EOF.
    Remove whitespace at end of line.
    Remove extra blank lines where they don't add value.
    
    Use git diff -b or -w to verify.
    
    Change-Id: I966b7ba852faa5474be6907fb212f5e267c2874e
    Upintegrate Audio Flinger changes from ICS_AAH
    
    Bring in changes to audio flinger made to support timed audio tracks
    and HW master volume control.
    
    Change-Id: Ide52d48809bdbed13acf35fd59b24637e35064ae
    Signed-off-by: John Grossman <johngro@google.com>
    Mark fields const if only set in constructor
    
    Change-Id: Iacd06bb9efaf708cf965033be1f2297b58f7f75c
    Remove dead code
    
    mFormat is unused in resampler
    mClientTid is unused
    local variable pid is unused in dump
    
    Change-Id: Ib156e38029366620bfeff2a13e73471867155a5b
    AudioFlinger methods const and inline
    
    This saves 1063 bytes and probably improves performance.
    
    Change-Id: I11cf0dfd925fbaec75e3d1b806852a538eae5518
    audioflinger: fix clicks on 48kHz audio.
    
    The calculation done in prepareTracks_l() for the minimum amount
    off frames needed to mix one output buffer had 2 issues:
    - the additional sample needed for interpolation was not included
    - the fact that the resampler does not acknowledge the frames consumed
    immediately after each mixing round but only once all frames requested have been used
    was not taken into account.
    Thus the number of frames available in track buffer could be considered sufficient although
    it was not and the resampler would abort producing a short silence perceived as a click.
    
    Issue 5727099.
    
    Change-Id: I7419847a7474c7d9f9170bedd0a636132262142c
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: I6ec5d2bca9b8ebc0acd395a7dd92e1a48fcdfa9b
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    undo reset to ics-mr1 until we have a better method
    reset to ics-mr1, but keep history
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: Id78bba8c002131d8b52b4170259a87fd94e63c73
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    Fix issue 3479042.
    
    The problem is that when an AudioRecord using the resampler is restarted,
    the resampler state is not reset (as there is no reset function in the resampler).
    The consequence is that the first time the record thread loop runs, it calls the resampler
    which consumes the remaining data in the input buffer and when this buffer is released
    the input index is incremented over the limit.
    
    The fix consists in implementing a reset function in the resampler.
    
    A similar problem was also present for playback but unoticed because the track buffer is always
    drained by the mixer when a track stops. The only problem for playback was that the initial
    phase fraction was wrong when restarting a track after stop (it was correct after a pause).
    
    Change-Id: Ifc2585d685f4402d29f4afc63f6efd1d69265de3
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    Use AudioSystem::setLowRamDevice() to configure memory
    
    Bug: 9798886
    Change-Id: I9321e3f369f1ed9429ae222e3926ebdeb012b8b0
    Increase size of statistics buffer
    
    Bug: 8354576
    Change-Id: I327e9dc203e09df8abc21e589ce9056540618abd
    Increase size of statistics buffer
    
    Bug: 8354576
    Change-Id: I327e9dc203e09df8abc21e589ce9056540618abd
    Make CPU frequency statistics optional
    
    Certain CPUs with dynamic cluster swapping and hotplug
    don't report CPU frequency accurately.  The file descriptors
    used to read the frequency become stale and report bogus data.
    So make this feature a build time option for debugging only.
    This will also improve performance of the fast mixer loop.
    
    Change-Id: I602f81ec3281a37992769208be08084ed1469e8c
    Fast track dumpsys
    
    Bug: 6591648
    Change-Id: I696f51c682e7233ba690d97da26012084989b412
    Improve underrun handling for fast tracks
    
    Maintain more accurate accounting of type of underrun.
    Automatically remove track from active list after a series of "empty" underruns.
    
    Change-Id: If042bf80e1790dcaaf195c99dc9c0ed9b55382c1
    Update fast mixer statistics
    
    Compute statistics on fast mixer elapsed time and CPU load per cycle using a
    simple moving average rather than by fixed blocks.  This has a couple advantages:
     - remove burstiness of CPU usage due to former floating-point calculations in fast mixer
     - gives us flexibility in how to report (e.g. could report over just the last 1 second)
    
    Disadvantage is increased RAM, and since the samples are not updated
    atomically, it is possible to have an error in the statistics.  This
    should not be much of an issue due to the relatively large number of samples.
    
    Also add CPU raw ns and adjusted MHz statistics.
    
    Change-Id: Iaa2cd13f18250c3162aff40409b3694b769d9505
    Fix race condition for non-started fast tracks
    
    This required re-implementing how fast tracks are considered active.
    Now, they use the same logic as normal tracks, except underrun is ignored.
    
    Other changes:
     - add framesReady() to AudioBufferProvider interface
     - rebased
     - add track underrun counter state to fast mixer dump state
     - move dumpsys header to Track::appendDumpHeader()
       so it closer to where tracks are dumped
     - display track state in dumpsys as a character code
     - measure and display warmup time and cycles in dumpsys
     - copy in the presentation complete code
     - add ExtendedAudioBufferProvider for framesReady() which returns size_t
     - simplify underrun tracking
     - deferred reset track after stop()
     - add comments
    
    Change-Id: I7db8821bc565230ec76da1f9380fe3fb09735e5b
    FastMixer update
    
    Updates:
     - Add support for mono fast tracks
     - Add support for optional sample rate conversion on fast tracks
     - Log sample rate and frame count
     - Enable statistics
    
    Change-Id: Ife014edf4f452da361f3eaaae19209ef6ff6958b
    Fast mixer
    
    Change-Id: I61552f83507e08e4c706076b9fb15362869e6265
    Fix build warnings
    
    Change-Id: I9e3cfa0c6b3467fe763ce55f759d179f02c5deea
    Fix build warnings
    
    Change-Id: I9e3cfa0c6b3467fe763ce55f759d179f02c5deea
    New VHQ resampler
    
    Squashed commit of the following:
    
    commit 12b6952da9f25e94d06dd7185bce255924e7e791
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 19 15:27:26 2012 -0800
    
        fix a typo in SINC resampler that prevented tracks to be mixed
    
        we were always erasing the current mix instead of mixing into it.
    
        Change-Id: Ib229245f9e5a0d384f1727640a59e9f0469211a2
    
    commit 0019ce082df430278f14ab922e900ce33b64897d
    Author: Dave Bort <dbort@google.com>
    Date:   Tue Nov 13 01:30:32 2007 -0800
    
        Rename "TARGET" to "MODULE" in the build system.
    
        Part one of the grand renaming.
    
        API_CHANGE: Third parties may need to update their makefiles.
        Any variables with "LOCAL" and "TARGET" in their names
        should now use "MODULE" instead of "TARGET"; e.g., LOCAL_MODULE,
        LOCAL_MODULE_TAGS.
    
        PRESUBMIT=passed
        OCL=39840
    
        Change-Id: Ica9a7937d3d9552ab84db46ac6eea8a290e404fe
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit f01adc0cef0e39e75c76d9195ac26a94cac0a100
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Wed Nov 14 08:32:08 2012 -0800
    
        Fix build warnings
    
        Change-Id: Ic43bcca166a529a6431711b05a7fa21849b6a38b
    
    commit 9bb031a565c753a03d9c9397edea318947d80528
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 04:44:30 2012 -0800
    
        more optimizations...
    
        calculate the offsets from the phase differently, this happens
        to reduce the register pressure in the main loop, which in turns
        allows the compiler to generate much better code (doesn't need
        to spill a lot of stuff on the stack).
    
        this gives another 15% performance increase
    
        Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    
    commit 5a951598f31217b8cd2babd0720c9608ee17291a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 03:26:39 2012 -0800
    
        refactor code to improve neon code
    
        we want to make sure we don't transfer data from the
        neon unit to the arm register file, as this can be quite
        slow. instead we do all the calculation on the neon side
        and write the result directly to main memory.
    
        Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    
    commit b381ee9e83bc9fd18986e79c7809841514ed590e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 15:16:13 2012 -0800
    
        NEON optimized SINC resampler
    
        this currently gives us a 60% to 80% boost depending
        on the quality level selected.
    
        Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    
    commit bea077354210242ea193a50b0dbab0fedab25df3
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 5 01:51:37 2012 -0800
    
        minor cleanups
    
        Change-Id: Ia12ee4fb59e90221761bec85e6450db29197591f
    
    commit 8f4ed7decbe161a5ff38200b218f5216d80aba46
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 18:49:14 2012 -0800
    
        improve resample test
    
        - handle stereo input
        - input file can now be ommited, in this case
          a linear chirp will be used automatically
        - better usage information
    
        Change-Id: I5d62a6c26a9054a1c1a517a065b4df5a2cdcda22
    
    commit 5fcd634ea6cb4df27c495abe20f5f9b8ff55d128
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 02:03:49 2012 -0800
    
        change how we store the FIR coefficients
    
        The coefficient table is now transposed and shows
        much better its polyphase nature: we now have a FIR
        per line, each line corresponding to a phase.
    
        This doesn't change at all the results produced by
        the filter, but allows us to make slightly better
        use of the data cache and improves performance a bit
        (although not as much as I thought it would).
    
        The main benefit is that it is the first step
        before we can make much larger optimizations
        (like using NEON).
    
        Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    
    commit d652231abf4c7e2ea1fc89caae730cec1f7259a1
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 3 23:37:53 2012 -0700
    
        improve SINC resampler performance
    
        The improvement is about 60% by just tweaking a few
        things to help the compiler generate better code.
        It turns out that inlining too much stuff manually was hurting us.
    
        Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    
    commit 9dc68ef5b94c700c4ee68790e8cbb334c90a538d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Nov 1 21:03:46 2012 -0700
    
        new coefficients for the vhq resampler
    
        previous coefficients were provided by a 3rd party and didn't have a
        way to re-generate them. we're now using the 'fir' utility.
    
        the performance of the filter is virtually identical, except for
        the down-sampling case which seems slightly better now:
           It looks like both the previous and new coefficients are generating
        some sort of clipping for full-scale signals in the down-sampling case
        (although the new ones seem better), the reason for that is
        unknown (see bug: 7453062)
    
        Also updated the HQ coefficients for the down-samplers, previous ones
        were a little bit too conservative -- the new ones push the cut-off
        frequency up by about 1 KHz.
    
        Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    
    commit 38e0b8560a6fc1b7124e22e0e09a84a285182f8e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 13:51:44 2012 -0700
    
        fix SINC resampler on non ARM architectures
    
        make sure the C version of the code generates the same
        output than the ARM assemply version.
    
        Change-Id: Ide218785c35d02598b2d7278e646b1b178148698
    
    commit a1878128b182696ba508569b4d211d0dfae92463
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 12:49:07 2012 -0700
    
        fix another issue with generating FIR coefficients
    
        the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
        missing the 2*f scale factor. This explains why we were seeing
        clipping and had to manually scale the filter down.
    
        Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    
    commit 1a0fb993430acc9f601e6c538305bc407c20ac5d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:20 2012 -0700
    
        fir a typo that caused up-sampling coefficiens to be wrong
    
        up-sample coefficient were generated with a cut-off frequency of 24KHz
        intead of ~20KHz, which caused more aliasing in the audible band.
    
        also increased the attenuation to 1.3 dB on both up and down
        sampling coefficient to avoid clipping.
    
        Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    
    commit 9520ad6862bd682ad075a9d9e3e94ada9f6e58b6
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:16 2012 -0700
    
        test-resample: clip instead of overflowing
    
        Change-Id: I550e5a59e51c11e1095ca338222b094f92b96878
    
    commit ba36656300f250f7f1fdeb75149749344260e6cb
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 01:01:38 2012 -0700
    
        a test app for the resamplers
    
        Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    
    commit 056a08b9bfd33cf27228c992adc8293a56b01be8
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 14:11:01 2012 -0700
    
        reenable the cubic resampler
    
        cubic resampler was disabled because it hadn't been qualified,
        however after I did some tests, it does improve significantly
        the sound quality over the order-1 resampler, even if it is
        still quite bad.
    
        also HIGH_QUALITY resampler was partially disabled, it's now
        fully enabled. It's a big improvement over the cubic resampler
        in terms of aliasing noise (it's not as good in the pass-band).
    
        Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    
    commit 8c0241d3ff50ae85167f69b3bd369244894cfa44
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 13:48:42 2012 -0700
    
        improve SINC resampler coefficients
    
        - we increase the interpolation precision from 4 to 7 bits
        this doesn't increase CPU power required, it only increases the
        size of the filter table but significantly reduces the noise
        introduced by the quantization of the impulse response.
    
        - the parameters of the filter are set such that aliasing is
        rejected at 80 dB below 20 KHz. Because we don't use a lot of
        coefficient (to save compute power), there are quite a bit of
        attenuation in the pass-band: starting at 9KHz for the
        down-sampler (48 to 44.1), and starting at 13 KHz for the
        up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
        Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    
    commit 69e7dab2192adc1f780464146810629ebd01b145
    Author: Pixelflinger <mathias.agopian@gmail.com>
    Date:   Thu Oct 25 19:43:49 2012 -0700
    
        improve fir tool: cleanup, better default, bug fixes
    
        - all parameters can be changed on the command-line
        - added float output
        - added debug option
        - added an option to generate a polyphase filter coefficients
        - added an attenuation option in dBFS
        - added a lot of comments and references
        - fixed kaiser window parameter
    
        also the default should generate a filter with 80 dB rejection
        (of the 24 KHz aliasing) above 20 KHz and a 15 KHz transition
        band around ~20 KHz (for 48 KHz sampling rate).
        It's not very good but corresponds to the current code.
    
    commit 8347499d105a50257c18e9dac652e750b06428b1
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Mon Oct 22 17:09:27 2012 -0700
    
        Increase allowed number of VHQ resamplers to 3
    
        Bug: 7378660
        Change-Id: I69e33ca2eb4bb9bd38e2c63df62cd1130d68baf6
    
    commit f91cf3cad7f5c4d52614271c89ab468741c5d24c
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 03:04:05 2012 -0700
    
        Fix a typo that caused the high quality resampler to produce garbage
    
        the problem is that if libaudio_resampler is present, it is those
        coefficients that will always be selected, but the correct
        meta-data.
    
        Bug: 7385994
        Change-Id: Ieebeb37b4dfb62a1a051bc29fae2ce056dbc6621
    
    commit e158a9e4262a174c59469a205658bc3ca4078234
    Author: Dan Bornstein <danfuzz@google.com>
    Date:   Fri Oct 3 10:34:57 2008 -0700
    
        Manually merge change #111620 from tc3 to mainline, to keep the
    
        automerger from choking on it.
    
        p4 sync
        p4 integrate -r -b android_to_tc3 //...@111620,111620
        p4 resolve -a
        p4 resolve     # resolve a couple merge travesties
    
        PRESUBMIT=passed
        BUG=1399648
        TBR=edheyl
        OCL=111902
    
        Change-Id: I854b01553dd92bbf9c864f5a9bd51a3d665f0ac2
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b9f3c26032be7a6ea01a10d93d94826f449e68ab
    Author: Dave Bort <dbort@google.com>
    Date:   Fri Jan 18 14:51:05 2008 -0800
    
        Rename "Makefile" to "Android.mk" throughout the tree.
    
        For <http://b/issue?id=960416>.
    
        I've tested this as much as I can, but 1500 open files =
        easy to mess things up.  Please let me know if there's
        a problem rather than rolling back this change.
    
        PRESUBMIT=passed
        BUG=960416
        TBR=joeo
        OCL=46537
    
        Change-Id: I5a404caf0f398a7afa7ae7abaf2f2a1c6ab490eb
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 0c22a9a44c4103483fba1d944acf1354c5eb1617
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 23:44:25 2007 -0700
    
        Tweak the SINC resampler parameters and double the performance. It's using about 10% CPU in the worse case now.
    
        Change-Id: I50ac7e6c6702a427fa36ab6d976c507155057507
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b85e41487983ad085b859acf8251e7e54480308a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 04:34:36 2007 -0700
    
        A sinc resampler for Audioflinger. It's not enabled yet, but fully functional and apparently working. It need more "quality" tests. In the 48->44 KHz, it takes about 25% of the CPU time.
    
        Change-Id: I80eb5185e13ebdb907e0b85c49ba1272c23d60ec
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit ba3949ef17cac2ba71cc3096c413782a49c922e5
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 21:01:28 2007 -0700
    
        fix a few small typos in the FIR computation
    
        Change-Id: I6e56b514fe520f30f7487f85c64ea5d2a7c19b40
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 7474bfa7de2604021963794dddfe44985648db6a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 03:16:02 2007 -0700
    
        This is a tool to compute the the reconstruction filter coefficients for a sinc audio resampler.
    
        Change-Id: I99be2505139b8e0e7647200e1647509d4f7e6067
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    Bug: 7577965
    Change-Id: I2c84a9283a1668723bad83e1a119c849c88c3e6b
    New VHQ resampler
    
    Squashed commit of the following:
    
    commit 12b6952da9f25e94d06dd7185bce255924e7e791
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 19 15:27:26 2012 -0800
    
        fix a typo in SINC resampler that prevented tracks to be mixed
    
        we were always erasing the current mix instead of mixing into it.
    
        Change-Id: Ib229245f9e5a0d384f1727640a59e9f0469211a2
    
    commit 0019ce082df430278f14ab922e900ce33b64897d
    Author: Dave Bort <dbort@google.com>
    Date:   Tue Nov 13 01:30:32 2007 -0800
    
        Rename "TARGET" to "MODULE" in the build system.
    
        Part one of the grand renaming.
    
        API_CHANGE: Third parties may need to update their makefiles.
        Any variables with "LOCAL" and "TARGET" in their names
        should now use "MODULE" instead of "TARGET"; e.g., LOCAL_MODULE,
        LOCAL_MODULE_TAGS.
    
        PRESUBMIT=passed
        OCL=39840
    
        Change-Id: Ica9a7937d3d9552ab84db46ac6eea8a290e404fe
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit f01adc0cef0e39e75c76d9195ac26a94cac0a100
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Wed Nov 14 08:32:08 2012 -0800
    
        Fix build warnings
    
        Change-Id: Ic43bcca166a529a6431711b05a7fa21849b6a38b
    
    commit 9bb031a565c753a03d9c9397edea318947d80528
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 04:44:30 2012 -0800
    
        more optimizations...
    
        calculate the offsets from the phase differently, this happens
        to reduce the register pressure in the main loop, which in turns
        allows the compiler to generate much better code (doesn't need
        to spill a lot of stuff on the stack).
    
        this gives another 15% performance increase
    
        Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    
    commit 5a951598f31217b8cd2babd0720c9608ee17291a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 03:26:39 2012 -0800
    
        refactor code to improve neon code
    
        we want to make sure we don't transfer data from the
        neon unit to the arm register file, as this can be quite
        slow. instead we do all the calculation on the neon side
        and write the result directly to main memory.
    
        Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    
    commit b381ee9e83bc9fd18986e79c7809841514ed590e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 15:16:13 2012 -0800
    
        NEON optimized SINC resampler
    
        this currently gives us a 60% to 80% boost depending
        on the quality level selected.
    
        Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    
    commit bea077354210242ea193a50b0dbab0fedab25df3
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 5 01:51:37 2012 -0800
    
        minor cleanups
    
        Change-Id: Ia12ee4fb59e90221761bec85e6450db29197591f
    
    commit 8f4ed7decbe161a5ff38200b218f5216d80aba46
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 18:49:14 2012 -0800
    
        improve resample test
    
        - handle stereo input
        - input file can now be ommited, in this case
          a linear chirp will be used automatically
        - better usage information
    
        Change-Id: I5d62a6c26a9054a1c1a517a065b4df5a2cdcda22
    
    commit 5fcd634ea6cb4df27c495abe20f5f9b8ff55d128
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 02:03:49 2012 -0800
    
        change how we store the FIR coefficients
    
        The coefficient table is now transposed and shows
        much better its polyphase nature: we now have a FIR
        per line, each line corresponding to a phase.
    
        This doesn't change at all the results produced by
        the filter, but allows us to make slightly better
        use of the data cache and improves performance a bit
        (although not as much as I thought it would).
    
        The main benefit is that it is the first step
        before we can make much larger optimizations
        (like using NEON).
    
        Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    
    commit d652231abf4c7e2ea1fc89caae730cec1f7259a1
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 3 23:37:53 2012 -0700
    
        improve SINC resampler performance
    
        The improvement is about 60% by just tweaking a few
        things to help the compiler generate better code.
        It turns out that inlining too much stuff manually was hurting us.
    
        Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    
    commit 9dc68ef5b94c700c4ee68790e8cbb334c90a538d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Nov 1 21:03:46 2012 -0700
    
        new coefficients for the vhq resampler
    
        previous coefficients were provided by a 3rd party and didn't have a
        way to re-generate them. we're now using the 'fir' utility.
    
        the performance of the filter is virtually identical, except for
        the down-sampling case which seems slightly better now:
           It looks like both the previous and new coefficients are generating
        some sort of clipping for full-scale signals in the down-sampling case
        (although the new ones seem better), the reason for that is
        unknown (see bug: 7453062)
    
        Also updated the HQ coefficients for the down-samplers, previous ones
        were a little bit too conservative -- the new ones push the cut-off
        frequency up by about 1 KHz.
    
        Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    
    commit 38e0b8560a6fc1b7124e22e0e09a84a285182f8e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 13:51:44 2012 -0700
    
        fix SINC resampler on non ARM architectures
    
        make sure the C version of the code generates the same
        output than the ARM assemply version.
    
        Change-Id: Ide218785c35d02598b2d7278e646b1b178148698
    
    commit a1878128b182696ba508569b4d211d0dfae92463
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 12:49:07 2012 -0700
    
        fix another issue with generating FIR coefficients
    
        the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
        missing the 2*f scale factor. This explains why we were seeing
        clipping and had to manually scale the filter down.
    
        Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    
    commit 1a0fb993430acc9f601e6c538305bc407c20ac5d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:20 2012 -0700
    
        fir a typo that caused up-sampling coefficiens to be wrong
    
        up-sample coefficient were generated with a cut-off frequency of 24KHz
        intead of ~20KHz, which caused more aliasing in the audible band.
    
        also increased the attenuation to 1.3 dB on both up and down
        sampling coefficient to avoid clipping.
    
        Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    
    commit 9520ad6862bd682ad075a9d9e3e94ada9f6e58b6
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:16 2012 -0700
    
        test-resample: clip instead of overflowing
    
        Change-Id: I550e5a59e51c11e1095ca338222b094f92b96878
    
    commit ba36656300f250f7f1fdeb75149749344260e6cb
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 01:01:38 2012 -0700
    
        a test app for the resamplers
    
        Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    
    commit 056a08b9bfd33cf27228c992adc8293a56b01be8
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 14:11:01 2012 -0700
    
        reenable the cubic resampler
    
        cubic resampler was disabled because it hadn't been qualified,
        however after I did some tests, it does improve significantly
        the sound quality over the order-1 resampler, even if it is
        still quite bad.
    
        also HIGH_QUALITY resampler was partially disabled, it's now
        fully enabled. It's a big improvement over the cubic resampler
        in terms of aliasing noise (it's not as good in the pass-band).
    
        Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    
    commit 8c0241d3ff50ae85167f69b3bd369244894cfa44
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 13:48:42 2012 -0700
    
        improve SINC resampler coefficients
    
        - we increase the interpolation precision from 4 to 7 bits
        this doesn't increase CPU power required, it only increases the
        size of the filter table but significantly reduces the noise
        introduced by the quantization of the impulse response.
    
        - the parameters of the filter are set such that aliasing is
        rejected at 80 dB below 20 KHz. Because we don't use a lot of
        coefficient (to save compute power), there are quite a bit of
        attenuation in the pass-band: starting at 9KHz for the
        down-sampler (48 to 44.1), and starting at 13 KHz for the
        up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
        Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    
    commit 69e7dab2192adc1f780464146810629ebd01b145
    Author: Pixelflinger <mathias.agopian@gmail.com>
    Date:   Thu Oct 25 19:43:49 2012 -0700
    
        improve fir tool: cleanup, better default, bug fixes
    
        - all parameters can be changed on the command-line
        - added float output
        - added debug option
        - added an option to generate a polyphase filter coefficients
        - added an attenuation option in dBFS
        - added a lot of comments and references
        - fixed kaiser window parameter
    
        also the default should generate a filter with 80 dB rejection
        (of the 24 KHz aliasing) above 20 KHz and a 15 KHz transition
        band around ~20 KHz (for 48 KHz sampling rate).
        It's not very good but corresponds to the current code.
    
    commit 8347499d105a50257c18e9dac652e750b06428b1
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Mon Oct 22 17:09:27 2012 -0700
    
        Increase allowed number of VHQ resamplers to 3
    
        Bug: 7378660
        Change-Id: I69e33ca2eb4bb9bd38e2c63df62cd1130d68baf6
    
    commit f91cf3cad7f5c4d52614271c89ab468741c5d24c
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 03:04:05 2012 -0700
    
        Fix a typo that caused the high quality resampler to produce garbage
    
        the problem is that if libaudio_resampler is present, it is those
        coefficients that will always be selected, but the correct
        meta-data.
    
        Bug: 7385994
        Change-Id: Ieebeb37b4dfb62a1a051bc29fae2ce056dbc6621
    
    commit e158a9e4262a174c59469a205658bc3ca4078234
    Author: Dan Bornstein <danfuzz@google.com>
    Date:   Fri Oct 3 10:34:57 2008 -0700
    
        Manually merge change #111620 from tc3 to mainline, to keep the
    
        automerger from choking on it.
    
        p4 sync
        p4 integrate -r -b android_to_tc3 //...@111620,111620
        p4 resolve -a
        p4 resolve     # resolve a couple merge travesties
    
        PRESUBMIT=passed
        BUG=1399648
        TBR=edheyl
        OCL=111902
    
        Change-Id: I854b01553dd92bbf9c864f5a9bd51a3d665f0ac2
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b9f3c26032be7a6ea01a10d93d94826f449e68ab
    Author: Dave Bort <dbort@google.com>
    Date:   Fri Jan 18 14:51:05 2008 -0800
    
        Rename "Makefile" to "Android.mk" throughout the tree.
    
        For <http://b/issue?id=960416>.
    
        I've tested this as much as I can, but 1500 open files =
        easy to mess things up.  Please let me know if there's
        a problem rather than rolling back this change.
    
        PRESUBMIT=passed
        BUG=960416
        TBR=joeo
        OCL=46537
    
        Change-Id: I5a404caf0f398a7afa7ae7abaf2f2a1c6ab490eb
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 0c22a9a44c4103483fba1d944acf1354c5eb1617
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 23:44:25 2007 -0700
    
        Tweak the SINC resampler parameters and double the performance. It's using about 10% CPU in the worse case now.
    
        Change-Id: I50ac7e6c6702a427fa36ab6d976c507155057507
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b85e41487983ad085b859acf8251e7e54480308a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 04:34:36 2007 -0700
    
        A sinc resampler for Audioflinger. It's not enabled yet, but fully functional and apparently working. It need more "quality" tests. In the 48->44 KHz, it takes about 25% of the CPU time.
    
        Change-Id: I80eb5185e13ebdb907e0b85c49ba1272c23d60ec
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit ba3949ef17cac2ba71cc3096c413782a49c922e5
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 21:01:28 2007 -0700
    
        fix a few small typos in the FIR computation
    
        Change-Id: I6e56b514fe520f30f7487f85c64ea5d2a7c19b40
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 7474bfa7de2604021963794dddfe44985648db6a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 03:16:02 2007 -0700
    
        This is a tool to compute the the reconstruction filter coefficients for a sinc audio resampler.
    
        Change-Id: I99be2505139b8e0e7647200e1647509d4f7e6067
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    Bug: 7577965
    Change-Id: I2c84a9283a1668723bad83e1a119c849c88c3e6b
    more optimizations...
    
    calculate the offsets from the phase differently, this happens
    to reduce the register pressure in the main loop, which in turns
    allows the compiler to generate much better code (doesn't need
    to spill a lot of stuff on the stack).
    
    this gives another 15% performance increase
    
    Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    more optimizations...
    
    calculate the offsets from the phase differently, this happens
    to reduce the register pressure in the main loop, which in turns
    allows the compiler to generate much better code (doesn't need
    to spill a lot of stuff on the stack).
    
    this gives another 15% performance increase
    
    Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    refactor code to improve neon code
    
    we want to make sure we don't transfer data from the
    neon unit to the arm register file, as this can be quite
    slow. instead we do all the calculation on the neon side
    and write the result directly to main memory.
    
    Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    refactor code to improve neon code
    
    we want to make sure we don't transfer data from the
    neon unit to the arm register file, as this can be quite
    slow. instead we do all the calculation on the neon side
    and write the result directly to main memory.
    
    Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    change how we store the FIR coefficients
    
    The coefficient table is now transposed and shows
    much better its polyphase nature: we now have a FIR
    per line, each line corresponding to a phase.
    
    This doesn't change at all the results produced by
    the filter, but allows us to make slightly better
    use of the data cache and improves performance a bit
    (although not as much as I thought it would).
    
    The main benefit is that it is the first step
    before we can make much larger optimizations
    (like using NEON).
    
    Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    change how we store the FIR coefficients
    
    The coefficient table is now transposed and shows
    much better its polyphase nature: we now have a FIR
    per line, each line corresponding to a phase.
    
    This doesn't change at all the results produced by
    the filter, but allows us to make slightly better
    use of the data cache and improves performance a bit
    (although not as much as I thought it would).
    
    The main benefit is that it is the first step
    before we can make much larger optimizations
    (like using NEON).
    
    Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    improve SINC resampler performance
    
    The improvement is about 60% by just tweaking a few
    things to help the compiler generate better code.
    It turns out that inlining too much stuff manually was hurting us.
    
    Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    improve SINC resampler performance
    
    The improvement is about 60% by just tweaking a few
    things to help the compiler generate better code.
    It turns out that inlining too much stuff manually was hurting us.
    
    Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    improve SINC resampler coefficients
    
    - we increase the interpolation precision from 4 to 7 bits
    this doesn't increase CPU power required, it only increases the
    size of the filter table but significantly reduces the noise
    introduced by the quantization of the impulse response.
    
    - the parameters of the filter are set such that aliasing is
    rejected at 80 dB below 20 KHz. Because we don't use a lot of
    coefficient (to save compute power), there are quite a bit of
    attenuation in the pass-band: starting at 9KHz for the
    down-sampler (48 to 44.1), and starting at 13 KHz for the
    up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
    Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    improve SINC resampler coefficients
    
    - we increase the interpolation precision from 4 to 7 bits
    this doesn't increase CPU power required, it only increases the
    size of the filter table but significantly reduces the noise
    introduced by the quantization of the impulse response.
    
    - the parameters of the filter are set such that aliasing is
    rejected at 80 dB below 20 KHz. Because we don't use a lot of
    coefficient (to save compute power), there are quite a bit of
    attenuation in the pass-band: starting at 9KHz for the
    down-sampler (48 to 44.1), and starting at 13 KHz for the
    up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
    Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    Integrate improved coefficient sinc resampler: VHQ
    
    Summary:
    Very high quality is enabled only for 44.1 -> 48 or 48 -> 44.1,
      and uses low quality for all other use cases.
    Track estimated CPU load and throttles the quality based on load;
      as currently configured it should allow up to 2 instances of very high quality.
    Medium quality and high quality are currently disabled unless explicitly requested.
    
    Details:
    Only load .so the first time it is needed.
    Cleanup code style: formatting, indentation, whitespace.
    Restore medium quality resampler, but it is not used (see next line).
    Fix memory leak for sinc resampler.
    Check sample rate in resampler constructor.
    Add logs for debugging.
    Rename DEFAULT to DEFAULT_QUALITY for consistency with other quality levels.
    Renumber VERY_HIGH_QUALITY from 255 to 4.
    Use enum src_quality consistently.
    Improve parsing of property af.resampler.quality.
    Fix reentrancy bug - allow an instance of high quality and an instance
      of very high quality to both be active concurrently.
    
    Bug: 7229644
    Change-Id: I0ce6b913b05038889f50462a38830b61a602a9f7
    Integrate improved coefficient sinc resampler: VHQ
    
    Summary:
    Very high quality is enabled only for 44.1 -> 48 or 48 -> 44.1,
      and uses low quality for all other use cases.
    Track estimated CPU load and throttles the quality based on load;
      as currently configured it should allow up to 2 instances of very high quality.
    Medium quality and high quality are currently disabled unless explicitly requested.
    
    Details:
    Only load .so the first time it is needed.
    Cleanup code style: formatting, indentation, whitespace.
    Restore medium quality resampler, but it is not used (see next line).
    Fix memory leak for sinc resampler.
    Check sample rate in resampler constructor.
    Add logs for debugging.
    Rename DEFAULT to DEFAULT_QUALITY for consistency with other quality levels.
    Renumber VERY_HIGH_QUALITY from 255 to 4.
    Use enum src_quality consistently.
    Improve parsing of property af.resampler.quality.
    Fix reentrancy bug - allow an instance of high quality and an instance
      of very high quality to both be active concurrently.
    
    Bug: 7229644
    Change-Id: I0ce6b913b05038889f50462a38830b61a602a9f7
    audioflinger: use resample coefficients from audio-resampler library.
    
    -Add a separate quality VERY_HIGH_QUALITY in resampler
    -Use resample coefficients audio-resampler library for
     quality VERY_HIGH_QUALITY.
    -This improves the quality of resampled output.
    
    Bug: 7024293
    Change-Id: Ia44142413bed5f5963d7eab7846eec877a2415e4
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    audioflinger: use resample coefficients from audio-resampler library.
    
    -Add a separate quality VERY_HIGH_QUALITY in resampler
    -Use resample coefficients audio-resampler library for
     quality VERY_HIGH_QUALITY.
    -This improves the quality of resampled output.
    
    Bug: 7024293
    Change-Id: Ia44142413bed5f5963d7eab7846eec877a2415e4
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Use virtual destructors
    
    It turns out to be just a comment, as all except AudioMixer are RefBase.
    
    There are only a few performance-sensitive cases where it's worth thinking
    about whether you need a virtual destructor, and the headache usually
    outweighs the benefit.
    
    Change-Id: I716292f9556ec17c29ce8c76ac8ae602cb496533
    By convention const goes before the type specifier
    
    Change-Id: I70203abd6a6f54e5bd9f1412800cc01212157e58
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    Make AudioFlinger::instantiate() more resilient when called from separate module
    
    Bug: 8834855
    Change-Id: I4cd842cdfb09d2aaaaab9df9ac3bec6179709bd3
    State queue dump
    
    Bug: 6591648
    Change-Id: Iac75e5ea64e86640b3d890c46a636641b9733c6d
    Add template class StateQueue
    
    Change-Id: Iccc5eb42bc295a22b2e429a4551f083cd7b6831a
    audioflinger: do not use raw pointer for tracks
    
    Commit 9da3d95 surfaced a problem caused by the use of a raw
    pointer to a track in offload thread implementation.
    
    Pointers to tracks should always be weak or strong pointers.
    
    Bug: 11708529.
    Change-Id: Ic48632532d186c9be8261f73cefdf824b9fbbd2b
    audioflinger: fix offload track transition
    
    Make sure that when transitioning from one active
    offloaded track to the next we flush DSP content
    if both tracks are not on the same audio session.
    This happens when switching between two applications
    playing the same type of content (e.g MP3, stereo, 44.1).
    In this case, we reuse the same output thread because the track
    formats are compatible.
    
    Bug: 11247103.
    Change-Id: I2b9031591149adeb70766da5e0d21ff2933a37e8
    audioflinger: fix offload resume after drain
    
    When pausing and resuming during the drain,
    the drain sequence number shuold not be modified
    otherwise the drain callback will be ignored.
    This causes failure to notify end of stream to audio
    player and transition to next song.
    
    Bug: 11247103.
    Change-Id: I2a35c5cc3fd6aa667cdd257f9e9cc8715cef5159
    audioflinger: fix direct output underrun
    
    Underruns on tracks handled by a direct or offloaded
    threads were not properly reported to the applications
    causing a failure to automatically recover.
    
    Bug: 11535001.
    Change-Id: I7a8696b4d646f78b16710addfe7c108d0dd0038d
    AudioFlinger: fix duplicating thread standby.
    
    Commit fd47797 fixing issue 11247103 introduced a regression
    where the duplicating thread does not exit standby state as
    expected. This in turn prevents the tracks sending audio to
    other threads to complete their activity cycle normally.
    
    The fix conists in clearing mStandby state also in the specialized
    threadLoop_write() method of DuplicatingThread subclass.
    
    Bug: 11451415.
    Change-Id: Ie8a92c819a56a2834ea25fa70a8b7b2125721775
    AudioFlinger: more fixes for offload audio lost
    
    mStandby being false was not a reliable indication that
    something had been written to audio HAL.
    
    Considering the last track in mActiveTracks vector as the
    latest activated track was wrong as this is a SortedVector.
    
    Bug: 11247103.
    Change-Id: I397d011c5afcdd779def3fe25aaae7669a472cfc
    Assign blame for playback wakelocks.
    
    Set a work source for the playback wakelock, so that playback is
    counted against the requesting app instead of the media server.
    
    Cherrypicked from master.
    
    b/9464621
    
    Change-Id: I7329f88a288a95a582a78005a1c3d16a5a611e31
    audioflinger: fix track terminated before playing
    
    When a track is terminated before any audio was written,
    we should not send a drain request to the HAL. The drain
    will be ignored and we will wait the async callback for ever.
    
    Also fix a potential deadlock by not deleting a track with the
    thread mutex held: mPreviousTrack changed from a sp to a raw pointer.
    
    Bug: 11247103.
    Change-Id: I0a4b47b099204c7c326d45d700234ab8f72d8eae
    Make Audio wakelock names less unique.
    
    These wakelocks now show up in the client process, where they
    might cause wakelock overflows if AudioFlinger threads die often.
    
    The client process should be agnostic of audio flinger threading,
    so don't make the wakelock names rely on audioflinger thread names.
    
    Wakelock names now depend only on the audio flinger thread type, and
    not the ID itself.
    
    bug: 11200551
    
    Change-Id: Ia1f71b569cb7502d617b77596abc245f461a6ec0
    Cleanup openRecord error handling
    
    Bug: 10888816
    Change-Id: I84897dd7d30b370640b54e928f230604b873cb68
    audioflinger: offload: fix pause/flush/resume
    
    If a pause/flush/resume sequence is fast enough, resume is received while
    we are still in PAUSING state in which case it is a NOP. If this happens,
    flush is still forwarded to the audio HAL but is not preceeded by a pause
    which can cause problems to the audio DSP.
    It is necessary to preserve the flush as this sequence is typical to a seek.
    
    The fix consists in forcing a pause/resume when a flush request must be
    executed and the audio HAL has not been paused previously.
    
    Bug: 11081559.
    Change-Id: Ib84ed26d503a61c05933b923ec556b10cedfe140
    audioflinger: fix wake lock acquisition check
    
    Commit e14a5d6 introduced a bug in ThreadBase::acquireWakeLock() where
    the wake lock acquisition return code is not initialized before
    being checked causing the wake lock token to be sometines not set
    and potential failure to release the wake lock later.
    
    Bug: 10985160.
    Change-Id: Iffd40e773ae3bcfec3c148a844d5dbebbf474eaf
    Better recording wake lock accounting
    
    Count wake lock use against the app that initiated the recording,
    not against the media server.
    
    b/10985160
    
    Change-Id: Iae6e6c030b7f1c6081d9c79725d6990f60dadaaa
    fix volume and effect enable delay on offloaded tracks
    
    Volume: add a method to wake up the mediaserver playback
    thread when a volume command is received on an offloaded track.
    
    Effects: call effect chain process on offloaded playback threads
    asynchronously from writes to allow effect state updates while
    waiting for async write callback.
    
    Bug: 10796540.
    
    Change-Id: Id2747ae88783575d1d7ffd6fc86fbd054ab2c739
    audioflinger: fix crash when starting offload thread
    
    Passing a sp to parent thread to AsyncCallbackThread() constructor
    causes a strong reference to be acquired on the OffloadThread inside
    its constructor which causes an early launch of the thread loop
    with unpredictable consequences.
    
    Pass a wp to parent thread instead.
    
    Also move the creation of the AsyncCallbackThread to
    readOutputParameters() where mUseAsyncWrite is initialized which
    makes more sense.
    
    Also change the type of AsyncCallbackThread parent thread to PlaybackThread
    instead of OffloadThread to allow a broder use of non blocking write which
    in theory is not limited to audio offload use case.
    
    Bug: 8174034.
    Change-Id: I4b093b022030cd4f5eb8b8e477333e91098a6549
    Cleanup openRecord error handling
    
    Bug: 10888816
    Change-Id: I84897dd7d30b370640b54e928f230604b873cb68
    audioflinger: fix ro.audio.silent in offload again
    
    Commit 1abbdb4 was not working 100% of the times because
    it is possible that the offload thread loop never sleeps
    after being created in which case the property is never read.
    
    The loop now reads the property once when starting.
    
    Bug: 10899309.
    Change-Id: I2e2ca332f2d7086e59d65f6010378c4d9618ba9e
    audioflinger: implement getTimestamp() for offloaded tracks
    
    Bug: 9587132.
    Change-Id: Ie9d5f4cca96306d08bc9a2dbd6edd8953096702d
    audioflinger: fix lost offload thread resume event
    
    It was possible that a resume request signaled by addTrack_l()
    while waiting for an async write callback is lost. This is because
    mSignalPending was not set and waitingAsyncCallback_l() would pause the
    thread loop before executing prepareTracks_l().
    
    The fix consists in using signal_l() method to wake the thread
    loop o that mSignalPending is set.
    
    Also make sure that sleepTime is reset to 0 when resuming to make sure
    that we write any remaining bytes to the HAL.
    
    Bug: 10810347.
    
    Change-Id: If9a3b22cc3b9e6eb384a56c48c40e6258d0896ad
    more support for audio effect offload
    
    Offloading of audio effects is now enabled for offloaded
    output threads. If an effect not supporting offload is enabled,
    the AudioTrack is invalidated so that it can be recreated in PCM
    mode.
    
    Fix some issues in effect proxy related to handling of effect
    commands to offloaded and non offloaded effects.
    
    Also fixed a bug on capture index in software Visualizer effect.
    
    Bug: 8174034.
    
    Change-Id: Ib23d3c2d5a652361b0aaec7faee09102f2b18fce
    audioflinger: fix ro.audio.silent in offload mode
    
    Change-Id: I5a1a79000d53146689b0a198cc5419c36509703f
    audioflinger: longer offload thread standby delay
    
    - Increase offloaded output thread standby delay to 1 second
    to allow transition between tracks with going to stanby
    if reusing the same audio track (gapless)
    
    - Make sure pause/flush/resume sequence is sent to the HAL
    in the right order
    
    - Fix format display in track dump
    
    Bug: 8174034.
    Change-Id: I43ef6f8fdbf7427e4eff6cc2d0665d7d1463ea8a
    audioflinger: add HOTWORD audio source.
    
    HOTWORD is a special capture audio source that uses
    the same audio tuning as VOICE_RECOGNITION but allows an
    active capture to be preempted.
    
    Bug: 10640877.
    
    Change-Id: Iea09a11cbcdbacc8d434e5230e7559dcd1b44ac0
    audioflinger: remove async write race conditions
    
    Remove possible race conditions between async callback
    thread and offload thread when clearing and setting the
    draining and write blocked flags.
    
    Bug: 8174034.
    Change-Id: I7af10491f39dc0e7d7414862a9d8e763daa2e2b7
    Add NBAIO_Sink::getTimestamp()
    
    with a real implementation in AudioStreamOutSink
    for dummy implementation initially in MonoPipe.
    
    Use in AudioFlinger::PlaybackThread::threadLoop_write()
    to keep the input to the timestamp latch up-to-date.
    
    Change-Id: I10ef277991b63bb43d55d6f3df75116ef32246cd
    audioflinger: offloaded tracks flush/pause order
    
    Make sure that a flush received after a pause is forwarded
    to the HAL after the pause.
    
    Change-Id: Ib3221f70c59f8b3dbbac20b23104f6b779b75be0
    Implement Track::getTimestamp()
    
    using a new timestamp latch in PlaybackThread, and
    AudioTrackServerProxy::framesReleased() which returns mServer.
    
    Change-Id: I1ebfba968c773faaab95648c272fd3ebd74718d6
    RecordThread::createRecordTrack_l use flags for fast tracks
    
    Look at client's request for a fast track in the flags parameter,
    and check whether the request can be satisfied.
    
    Change-Id: I65ddaeb1b85670fe9066076f638bfed0cda01c0d
    RecordTrack::createRecordTrack_l flags are in/out
    
    The flags are currently unused, but will be used for requesting a fast
    track.  Making flags in/out will allow reporting back up to client that
    the request is denied.
    
    Change-Id: Ifbee57da3632ce130551065a426577fb97b1a68d
    Report underruns for fast tracks also
    
    This fixes a regression that was introduced earlier
    by commit 9f80dd223d83d9bb9077fb6baee056cee4eaf7e5
    called "New control block for AudioTrack and AudioRecord".
    That commit broke underrun reporting for fast tracks.
    
    Also remove Track::mUnderrunCount, which counted the number of underrun
    events, and was only used by dumpsys media.audio_flinger.
    
    Now dumpsys media.audio_flinger reports the number of underrun frames,
    
    Isolated underrun-related control block accesses via the proxy, so that
    the server is not directly poking around in the control block.
    
    The new proxy APIs are AudioTrackServerProxy::getUnderrunFrames() and
    AudioTrackServerProxy::tallyUnderrunFrames().  getUnderrunFrames() returns
    a rolling counter for streaming tracks, or zero for static buffer tracks
    which never underrun, but do a kind of 'pause' at end of buffer.
    tallyUnderrunFrames() increments the counter by a specified number of frames.
    
    Change-Id: Ib31fd73eb17cbb23888ce3af8ff29f471f5bd5a2
    Add resampler comments and fix a typo
    
    Change-Id: Ie071673875f663de4212eed4a4dff89d51a5a915
    Rename control block flags to mFlags
    
    Change-Id: I7b6d31e24531954ab1ecdf3ed56c19433700bd89
    Rename control block server to mServer and add comments
    
    Change-Id: Ieabd91acee92d0e84e66fbd358df5282b856306e
    Fix mismatched delete/new couple
    
    In RecordThread::readInputParameters(), mRsmpInBuffer is allocated
    with new[] and should be freed with delete[] instead of delete.
    
    This error has been found by valgrind.
    
    Change-Id: I2f947abb658a21a7d1e61eebb99270cb37d2d147
    Signed-off-by: Andrei V. FOMITCHEV <andreix.fomitchev@intel.com>
    Signed-off-by: David Wagner <david.wagner@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Remove CC_LIKELY and CC_UNLIKELY where not needed
    
    Only keep them in performance-sensitive code
    
    Change-Id: Ib257ddd7bc39ce9896997ffae008c524ac743d01
    Rename RecordThread::mInputBytes to the more generic mBufferSize
    
    This prepares for using it in PlaybackThreads later
    
    Change-Id: Id90a92aa6372e4b69914b0008cef07296ca5d6a3
    Move members from ThreadBase to PlaybackThread
    
    Move mNormalFrameCount and frameCountHAL(), since they're not used by
    record threads.  Also comment which fields are updated by readParameters().
    
    Change-Id: I5fc0a8a89cc637976f22d49271a5a3e136dab4e1
    Treat mChannelCount as uint32_t consistently
    
    mChannelCount was 8-, 16-, or 32-bits
    
    Change-Id: I2cc2fedf3e33144e5c8bbd9894763282d9217f63
    Simplify RecordTrack::stop()
    
    Change-Id: Ib959c1e9dc9544d12277ce11bea445118b2e0521
    AudioFlinger: offload playback, non-blocking write
    
    - Added specialized playback thread class for offload playback,
    derived from directoutput thread.
    This thread type handles specific state transitions for offloaded
    tracks and offloading commands (pause/resume/drain/flush..) to audio HAL.
    As opposed to other threads, does not go to standby if the track is paused.
    
    - Added support for asynchronous write and drain operations at audio HAL.
    Use a thread to handle async callback events from HAL: this avoids locking
    playback thread mutex when executing the callback and cause deadlocks when
    calling audio HAL functions with the playback thread mutex locked.
    
    - Better accouting for track activity: call start/stop and release Output
    methods in audio policy manager when tracks are actually added and removed
    from the active tracks list.
    Added a command thread in audio policy service to handle stop/release commands
    asynchronously and avoid deadlocks with playback thread.
    
    - Track terminated status is not a state anymore. This condition is othogonal
    to state to permitted state transitions while terminated.
    
    Change-Id: Id157f4b3277620568d8eace7535d9186602564de
    Move delete AudioMixer closer to point of re-allocation
    
    No need to delete AudioMixer before readOutputParameters
    
    Change-Id: Icafa785c9021bbe8d985e4f9527f8fc8c5e62622
    HAL stream format for mixer output threads must be stereo 16-bit PCM
    
    Direct and tunnel output threads can support various HAL stream formats,
    included encoded.  But currently there are stereo 16-bit PCM assumptions
    in several places for mixer and duplicating output threads:
     - mMixBuffer and mixBuffer()
     - AudioMixer including resampler
     - FastMixer's mixBuffer
     - effects
     - NBAIO_Format
     - anywhere FCC_2 is used
     - possibly other places
    
    Until those assumptions are removed, this CL enforces stereo 16-bit
    PCM in mixer and duplicating threads at the place where the HAL format
    is read.  It was already being checked in checkForNewParameters_l(),
    but not in readOutputParameters().
    
    Change-Id: Ibe344cc922743da234299097aa1bb1f54795cc9b
    Simplify getParameters()
    
    Change-Id: Iedfeca3cd477d023c350d6d4e6eed874ee467a32
    Move local variable declarations to point of first use
    
    Change-Id: Ideb83dea2c3002651c34fa646753cba598e29e93
    Use standard name and type for channel mask
    
    Former name 'channels' was ambiguous with respect to channel count.
    
    Change-Id: I716f792d95a7e0c787d27514ad6e93dbcef8a415
    AudioRecord and HAL input stream must be 16-bit PCM only
    
    Currently there are 16-bit PCM assumptions in several places for capture:
     - resampler API
     - mRsmpInBuffer and mRsmpOutBuffer
     - RecordThread::threadLoop upmix, downmix, and resampling
     - possibly other places
    
    Until those assumptions are removed, this CL enforces 16-bit PCM in both
    client and server at all places where a format is checked.
    
    Change-Id: I08b0570bff626ad0d341804825a72c14e61b4233
    Use AudioSystem::setLowRamDevice() to configure memory
    
    Bug: 9798886
    Change-Id: I9321e3f369f1ed9429ae222e3926ebdeb012b8b0
    Make AudioFlinger::instantiate() more resilient when called from separate module
    
    Bug: 8834855
    Change-Id: I4cd842cdfb09d2aaaaab9df9ac3bec6179709bd3
    Fix theoretical memory leak in mConfigEvents
    
    Change-Id: I137f70676c8919661e716c33e0dd9c25c2b6285c
    Include what is needed
    
    Remove old includes.
    Header files only include other header files that they directly need themselves.
    
    Change-Id: Ic471386808d9f42ea19ccbd59cb50a5f83a89dd0
    Fix theoretical race using TrackBase::sampleRate()
    
    In two places we assumed that TrackBase::sampleRate() would return the
    same value when it is called twice in the same function.  This is not
    guaranteed; sampleRate() reads from the control block so the return
    value could change.  To fix this, only call sampleRate() once and cache
    the return value to get a consistent value.
    
    This was only a theoretical race.  In MixerThread::prepareTracks_l()
    it would have no bad effect.  In TimedTrack::getNextBuffer() it could
    cause a real problem, but we don't currently support dynamic sample rate
    ratios for timed tracks.
    
    Change-Id: I8e5c33f0121fc058d1e70c2ab5e9135397d3e0b7
    New control block for AudioTrack and AudioRecord
    
    Main differences between old and new control block:
     - removes the mutex, which was a potential source of priority inversion
     - circular indices into shared buffer, which is now always a power-of-2 size
    
    Change-Id: I4e9b7fa99858b488ac98a441fa70e31dbba1b865
    audioflinger: fix effects on direct output threads
    
    PlaybackThread::addTrack_l() uses the assumption that
    effects are attached to a track only if the track accumulation
    buffer is different from the mixer thread output buffer.
    This is not true for direct output threads where only one track is active
    an only one buffer is needed.
    This assumption is an optimization to avoid checking for effect chains with
    the same session ID each time a track is processed. The optimization
    is not key if only one track is attached to the thread which is the case for
    direct outputs.
    
    Current code fails to increment the active track count in the effect chain
    on direct output threads when a track is started thus making the effect
    framework clear the mix buffer and produce silence each time the mixer runs.
    
    The fix consists in removing the optimization described above.
    
    Bug: 9324989.
    
    Change-Id: Id7a6337450ed90d326299c2ce9fc02f4b9e2fa6f
    audioflinger: fix effects on direct output threads
    
    PlaybackThread::addTrack_l() uses the assumption that
    effects are attached to a track only if the track accumulation
    buffer is different from the mixer thread output buffer.
    This is not true for direct output threads where only one track is active
    an only one buffer is needed.
    This assumption is an optimization to avoid checking for effect chains with
    the same session ID each time a track is processed. The optimization
    is not key if only one track is attached to the thread which is the case for
    direct outputs.
    
    Current code fails to increment the active track count in the effect chain
    on direct output threads when a track is started thus making the effect
    framework clear the mix buffer and produce silence each time the mixer runs.
    
    The fix consists in removing the optimization described above.
    
    Bug: 9324989.
    
    Change-Id: Id7a6337450ed90d326299c2ce9fc02f4b9e2fa6f
    AudioFlinger: do not cache audio device when 0.
    
    AudioFlinger should not cache the audio device
    passed to the audio HAL when it is AUDIO_DEVICE_NONE
    but keep previous valid selection instead.
    
    Bug: 9323399.
    Change-Id: I6f9480e55a21be4115453e6a5eebc5cf2536c476
    Consistent whitespace
    
    Change-Id: I118cce68d3b777f9ec9b6bfb70367496422a40f2
    Update to supply correct name for new power manager app ops.
    
    Change-Id: Ia686319509d98a4f467479ea494e8a54f2c1e238
    Remove timing jitter during startup of audio
    
    This fixes a regression introduced recently, that increased timing jitter
    during the startup of the FastMixer and AudioTrack callback threads.
    
    The regression was to make requestPriority() asynchronous as a way to
    avoid an apparent priority inversion in system_server.  This means that
    the target thread could run briefly with the initial priority, before
    the new priority takes effect.
    
    This change removes the startup jitter for FastMixer, by making the
    requestPriority() synchronous again for that case.  It doesn't matter
    that this restores the priority inversion involving normal mixer thread,
    because it happens during startup of both threads.
    
    The change also removes the startup jitter for the AudioTrack callback
    thread, by having the target thread check whether the requestPriority()
    has completed yet.  If not, the target thread blocks with a timeout
    until the priority boost finishes.
    
    Finally, we now log an error message if the expected priority boost
    doesn't happen.
    
    Bug: 8698989
    Change-Id: Id590e9a274b70ec1ba85b44a585ee37a22e41cbc
    Remove timing jitter during startup of audio
    
    This fixes a regression introduced recently, that increased timing jitter
    during the startup of the FastMixer and AudioTrack callback threads.
    
    The regression was to make requestPriority() asynchronous as a way to
    avoid an apparent priority inversion in system_server.  This means that
    the target thread could run briefly with the initial priority, before
    the new priority takes effect.
    
    This change removes the startup jitter for FastMixer, by making the
    requestPriority() synchronous again for that case.  It doesn't matter
    that this restores the priority inversion involving normal mixer thread,
    because it happens during startup of both threads.
    
    The change also removes the startup jitter for the AudioTrack callback
    thread, by having the target thread check whether the requestPriority()
    has completed yet.  If not, the target thread blocks with a timeout
    until the priority boost finishes.
    
    Finally, we now log an error message if the expected priority boost
    doesn't happen.
    
    Bug: 8698989
    Change-Id: Id590e9a274b70ec1ba85b44a585ee37a22e41cbc
    audioflinger: multiple tracks on direct output
    
    Fix problems when multiple tracks exist on a direct output
    thread:  when multiple tracks are active, continue to update all
    track states but only take into account the last track started
    for audio HAL volume and mixer state control.
    
    Bug 8388941
    
    Change-Id: I57e6757286f41651dda99b11a5449e431812431b
    audioflinger: multiple tracks on direct output
    
    Fix problems when multiple tracks exist on a direct output
    thread:  when multiple tracks are active, continue to update all
    track states but only take into account the last track started
    for audio HAL volume and mixer state control.
    
    Bug 8388941
    
    Change-Id: I57e6757286f41651dda99b11a5449e431812431b
    Miscellaneous cleanup
    
    Abbreviation framesReady to fRdy for new systrace.
    Put inline const on one line.
    Use local copy of mState in state.
    Improve logging.
    Line length 100.
    
    Change-Id: I8201c3ce0e53fd464fd33d02544e52c342d40b68
    Miscellaneous cleanup
    
    Abbreviation framesReady to fRdy for new systrace.
    Put inline const on one line.
    Use local copy of mState in state.
    Improve logging.
    Line length 100.
    
    Change-Id: I8201c3ce0e53fd464fd33d02544e52c342d40b68
    media.log cleanup
    
    Remove almost all of the specific logs, but leave the media.log
    logging infrastructure in place for the next time we need it.
    
    Re-apply a few good changes that were reverted earlier:
     - check logf format vs. argument list compatibility
     - distinguish potentially modified and actually modified tracks in FastMixer
     - fix benign bug where sq->end() was called more than once
     - fix a build warning
    
    Bug: 6490974
    Change-Id: I02d3e83646c738acaebb415bd0d6b548638b4ef5
    media.log cleanup
    
    Remove almost all of the specific logs, but leave the media.log
    logging infrastructure in place for the next time we need it.
    
    Re-apply a few good changes that were reverted earlier:
     - check logf format vs. argument list compatibility
     - distinguish potentially modified and actually modified tracks in FastMixer
     - fix benign bug where sq->end() was called more than once
     - fix a build warning
    
    Bug: 6490974
    Change-Id: I02d3e83646c738acaebb415bd0d6b548638b4ef5
    Remove tee sink debugging at compile time
    
    Bug: 8223560
    Change-Id: Iddbfb06c45d43d9f20bb428215dd4094931e19a7
    Remove tee sink debugging at compile time
    
    Bug: 8223560
    Change-Id: Iddbfb06c45d43d9f20bb428215dd4094931e19a7
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 32584a7d672864b20ab8b83a3cb23c1858e908b7
    
    Change-Id: I9dc680578b955b1af462eeb7a49d61a0d45eb81b
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 32584a7d672864b20ab8b83a3cb23c1858e908b7
    
    Change-Id: I9dc680578b955b1af462eeb7a49d61a0d45eb81b
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
     - increase log buffer sizes yet again
     - enable assertion checking without ALOGV
     - improve a few log messages
     - check for corruption in more places
     - log in all the process hooks
     - add new mixer APIs so we can check for corruption of mixer state
     - fix a build warning
    
    Bug: 6490974
    Change-Id: Ib0c4a73dcf606ef9bd898313b3b40ef61ab42f51
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
     - increase log buffer sizes yet again
     - enable assertion checking without ALOGV
     - improve a few log messages
     - check for corruption in more places
     - log in all the process hooks
     - add new mixer APIs so we can check for corruption of mixer state
     - fix a build warning
    
    Bug: 6490974
    Change-Id: Ib0c4a73dcf606ef9bd898313b3b40ef61ab42f51
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 639482c24c911b125398b31883ba6d55faebe28b
    
    Change-Id: I11f2829072ab11e18b0663024f27bf31192f1d39
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 639482c24c911b125398b31883ba6d55faebe28b
    
    Change-Id: I11f2829072ab11e18b0663024f27bf31192f1d39
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 0ddd56316262ac74a95e9edb595697c163136d6d
    
    Change-Id: I180a928af6f5a38d15a5efe44cd1fe927b5d961c
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 0ddd56316262ac74a95e9edb595697c163136d6d
    
    Change-Id: I180a928af6f5a38d15a5efe44cd1fe927b5d961c
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
    
    Bug: 6490974
    Change-Id: I4c030f171343fe4b483eae0ddea4427118d8d4b1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
    
    Bug: 6490974
    Change-Id: I4c030f171343fe4b483eae0ddea4427118d8d4b1
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 3051df27261e9952c0e642dec548515250e85f6a
    
    Change-Id: I8bf5c3e91b65bd20de26f480c367c2854b62373c
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 3051df27261e9952c0e642dec548515250e85f6a
    
    Change-Id: I8bf5c3e91b65bd20de26f480c367c2854b62373c
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
    
    Bug: 6490974
    Change-Id: I4c030f171343fe4b483eae0ddea4427118d8d4b1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
    
    Bug: 6490974
    Change-Id: I4c030f171343fe4b483eae0ddea4427118d8d4b1
    AudioFlinger: fix RecordThread initial device
    
    A regression was introduced when the audio device enums where
    modified for a 32 bit representation: the device passed when
    constructing a RecordThread was still the concatenation of input
    device and output device bit fields on one 32 bit value which
    is not possible anymore.
    
    The fix consists in modifying the RecordThread constructor to accept
    separate values for input and output devices.
    
    Change-Id: I81fb5f4718428b54251e65d74b86e198ce15193e
    AudioFlinger: fix RecordThread initial device
    
    A regression was introduced when the audio device enums where
    modified for a 32 bit representation: the device passed when
    constructing a RecordThread was still the concatenation of input
    device and output device bit fields on one 32 bit value which
    is not possible anymore.
    
    The fix consists in modifying the RecordThread constructor to accept
    separate values for input and output devices.
    
    Change-Id: I81fb5f4718428b54251e65d74b86e198ce15193e
    AudioFlinger uses media.log service for logging
    
    Change-Id: Ia0f8204334f6b233f644d897762a18c95d936b4b
    AudioFlinger uses media.log service for logging
    
    Change-Id: Ia0f8204334f6b233f644d897762a18c95d936b4b
    AudioFlinger: fix build with debug log enabled
    
    Change-Id: Id397155ec884c41cb84b35462ea09a97a04d3ed2
    AudioFlinger: fix build with debug log enabled
    
    Change-Id: Id397155ec884c41cb84b35462ea09a97a04d3ed2
    Fix build warnings
    
    Change-Id: I9e3cfa0c6b3467fe763ce55f759d179f02c5deea
    Fix build warnings
    
    Change-Id: I9e3cfa0c6b3467fe763ce55f759d179f02c5deea
    Start isolating control block accesses in a proxy
    
    The proxy object will eventually be the only code that understands the
    details of the control block.  This should make it easier to change the
    control block in the future.
    
    Initial set of control block fields that are isolated:
     - sample rate
     - send level
     - volume
    
    Prepare for streaming/static separation by adding a union to the control
    block for the new fields.
    
    Fix bug in handling of max sample rate on a track.  It was only checking
    at re-configuration, not at each mix.
    
    Simplify OutputTrack::obtainBuffer.
    
    Change-Id: I2249f9d04f73a911a922ad1d7f6197292c74cd92
    Start isolating control block accesses in a proxy
    
    The proxy object will eventually be the only code that understands the
    details of the control block.  This should make it easier to change the
    control block in the future.
    
    Initial set of control block fields that are isolated:
     - sample rate
     - send level
     - volume
    
    Prepare for streaming/static separation by adding a union to the control
    block for the new fields.
    
    Fix bug in handling of max sample rate on a track.  It was only checking
    at re-configuration, not at each mix.
    
    Simplify OutputTrack::obtainBuffer.
    
    Change-Id: I2249f9d04f73a911a922ad1d7f6197292c74cd92
    Prepare for track invalidation to be done by proxy
    
    Don't rely on control block to determine whether track has been marked
    invalid.  Instead, use a local flag that can't be corrupted by client.
    
    Change-Id: I783dafe828f93c1c3d2d0e5a08105ea536436efb
    Prepare for track invalidation to be done by proxy
    
    Don't rely on control block to determine whether track has been marked
    invalid.  Instead, use a local flag that can't be corrupted by client.
    
    Change-Id: I783dafe828f93c1c3d2d0e5a08105ea536436efb
    AudioTrack::mute() is unused so remove it
    
    If ever needed again, it could be implemented on client side by forcing
    a track volume of 0.
    
    Change-Id: I88a9b4f675b6dca2948549414f9ec2c192d29269
    AudioTrack::mute() is unused so remove it
    
    If ever needed again, it could be implemented on client side by forcing
    a track volume of 0.
    
    Change-Id: I88a9b4f675b6dca2948549414f9ec2c192d29269
    Remove conditional compilation of ATRACE functions
    
    Tracing functions are meant to be dynamically controlled via sysprops.
    Conditional compilation removes this functionality.
    
    Change-Id: I26bc473d104d0b3c50a228dddfda3fa2428d157a
    Remove conditional compilation of ATRACE functions
    
    Tracing functions are meant to be dynamically controlled via sysprops.
    Conditional compilation removes this functionality.
    
    Change-Id: I26bc473d104d0b3c50a228dddfda3fa2428d157a
    Use ATRACE macros instead of Tracer statics
    
    ATRACE_BEGIN and ATRACE_END have replaced the static
    Tracer::traceBegin and Tracer::traceEnd functions, so
    use them instead.
    
    Fixes compilation errors when tracing is enabled.
    
    Change-Id: I4d1147d2f76afcdf113e9986f0544cb848802b15
    Use ATRACE macros instead of Tracer statics
    
    ATRACE_BEGIN and ATRACE_END have replaced the static
    Tracer::traceBegin and Tracer::traceEnd functions, so
    use them instead.
    
    Fixes compilation errors when tracing is enabled.
    
    Change-Id: I4d1147d2f76afcdf113e9986f0544cb848802b15
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    Assign blame for playback wakelocks.
    
    Set a work source for the playback wakelock, so that playback is
    counted against the requesting app instead of the media server.
    
    Cherrypicked from master.
    
    b/9464621
    
    Change-Id: I7329f88a288a95a582a78005a1c3d16a5a611e31
    Treat mChannelCount as uint32_t consistently
    
    mChannelCount was 8-, 16-, or 32-bits
    
    Change-Id: I2cc2fedf3e33144e5c8bbd9894763282d9217f63
    Remove obsolete mBufferEnd
    
    Change-Id: I507c6109d66000bb30933ca23b912a1316f55e5e
    Remove obsolete TrackBase::step(), mStepCount, mStepServerFailed
    
    Change-Id: I6347096f066b8b19451c6472db7b0671f0cf7702
    Remove obsolete TrackBase::reset()
    
    Change-Id: I38100b7e28a12d7af8cb40ae3f4d9cb4a0ebe701
    AudioFlinger: offload playback, non-blocking write
    
    - Added specialized playback thread class for offload playback,
    derived from directoutput thread.
    This thread type handles specific state transitions for offloaded
    tracks and offloading commands (pause/resume/drain/flush..) to audio HAL.
    As opposed to other threads, does not go to standby if the track is paused.
    
    - Added support for asynchronous write and drain operations at audio HAL.
    Use a thread to handle async callback events from HAL: this avoids locking
    playback thread mutex when executing the callback and cause deadlocks when
    calling audio HAL functions with the playback thread mutex locked.
    
    - Better accouting for track activity: call start/stop and release Output
    methods in audio policy manager when tracks are actually added and removed
    from the active tracks list.
    Added a command thread in audio policy service to handle stop/release commands
    asynchronously and avoid deadlocks with playback thread.
    
    - Track terminated status is not a state anymore. This condition is othogonal
    to state to permitted state transitions while terminated.
    
    Change-Id: Id157f4b3277620568d8eace7535d9186602564de
    New control block for AudioTrack and AudioRecord
    
    Main differences between old and new control block:
     - removes the mutex, which was a potential source of priority inversion
     - circular indices into shared buffer, which is now always a power-of-2 size
    
    Change-Id: I4e9b7fa99858b488ac98a441fa70e31dbba1b865
    Miscellaneous cleanup
    
    Abbreviation framesReady to fRdy for new systrace.
    Put inline const on one line.
    Use local copy of mState in state.
    Improve logging.
    Line length 100.
    
    Change-Id: I8201c3ce0e53fd464fd33d02544e52c342d40b68
    Miscellaneous cleanup
    
    Abbreviation framesReady to fRdy for new systrace.
    Put inline const on one line.
    Use local copy of mState in state.
    Improve logging.
    Line length 100.
    
    Change-Id: I8201c3ce0e53fd464fd33d02544e52c342d40b68
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Start isolating control block accesses in a proxy
    
    The proxy object will eventually be the only code that understands the
    details of the control block.  This should make it easier to change the
    control block in the future.
    
    Initial set of control block fields that are isolated:
     - sample rate
     - send level
     - volume
    
    Prepare for streaming/static separation by adding a union to the control
    block for the new fields.
    
    Fix bug in handling of max sample rate on a track.  It was only checking
    at re-configuration, not at each mix.
    
    Simplify OutputTrack::obtainBuffer.
    
    Change-Id: I2249f9d04f73a911a922ad1d7f6197292c74cd92
    Start isolating control block accesses in a proxy
    
    The proxy object will eventually be the only code that understands the
    details of the control block.  This should make it easier to change the
    control block in the future.
    
    Initial set of control block fields that are isolated:
     - sample rate
     - send level
     - volume
    
    Prepare for streaming/static separation by adding a union to the control
    block for the new fields.
    
    Fix bug in handling of max sample rate on a track.  It was only checking
    at re-configuration, not at each mix.
    
    Simplify OutputTrack::obtainBuffer.
    
    Change-Id: I2249f9d04f73a911a922ad1d7f6197292c74cd92
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    Add comments
    
    Change-Id: Ifbf3a46a4183c8abc0feee1c588953ab10303cc1
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 32584a7d672864b20ab8b83a3cb23c1858e908b7
    
    Change-Id: I9dc680578b955b1af462eeb7a49d61a0d45eb81b
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 32584a7d672864b20ab8b83a3cb23c1858e908b7
    
    Change-Id: I9dc680578b955b1af462eeb7a49d61a0d45eb81b
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
     - increase log buffer sizes yet again
     - enable assertion checking without ALOGV
     - improve a few log messages
     - check for corruption in more places
     - log in all the process hooks
     - add new mixer APIs so we can check for corruption of mixer state
     - fix a build warning
    
    Bug: 6490974
    Change-Id: Ib0c4a73dcf606ef9bd898313b3b40ef61ab42f51
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
     - increase log buffer sizes yet again
     - enable assertion checking without ALOGV
     - improve a few log messages
     - check for corruption in more places
     - log in all the process hooks
     - add new mixer APIs so we can check for corruption of mixer state
     - fix a build warning
    
    Bug: 6490974
    Change-Id: Ib0c4a73dcf606ef9bd898313b3b40ef61ab42f51
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 639482c24c911b125398b31883ba6d55faebe28b
    
    Change-Id: I11f2829072ab11e18b0663024f27bf31192f1d39
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 639482c24c911b125398b31883ba6d55faebe28b
    
    Change-Id: I11f2829072ab11e18b0663024f27bf31192f1d39
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Update audio comments
    
    Change-Id: I85d7d2f6381b251db5695202fec75128883a8662
    Update audio comments
    
    Change-Id: I85d7d2f6381b251db5695202fec75128883a8662
    StateQueue comments
    
    Change-Id: Id8c76d1e2ab5201e7ab3875f1dbcc0a126e611a4
    StateQueue comments
    
    Change-Id: Id8c76d1e2ab5201e7ab3875f1dbcc0a126e611a4
    State queue dump
    
    Bug: 6591648
    Change-Id: Iac75e5ea64e86640b3d890c46a636641b9733c6d
    Add template class StateQueue
    
    Change-Id: Iccc5eb42bc295a22b2e429a4551f083cd7b6831a
    Replace obsolete CLOCK_MONOTONIC_HR by CLOCK_MONOTONIC
    
    (cherry-pick of da1a325bc0a1421f4233e62704da4fab8b0acf7b.)
    
    Bug: 8895727
    Change-Id: I29d5dcf8519600fdd2910345449c66a5c1284646
    Replace obsolete CLOCK_MONOTONIC_HR by CLOCK_MONOTONIC
    
    (cherry-pick of da1a325bc0a1421f4233e62704da4fab8b0acf7b.)
    
    Bug: 8895727
    Change-Id: I29d5dcf8519600fdd2910345449c66a5c1284646
    Replace obsolete CLOCK_MONOTONIC_HR by CLOCK_MONOTONIC
    
    Bug: 8895727
    Change-Id: I0abf6da941965e9e29e232943184dbc72b95d03c
    New VHQ resampler
    
    Squashed commit of the following:
    
    commit 12b6952da9f25e94d06dd7185bce255924e7e791
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 19 15:27:26 2012 -0800
    
        fix a typo in SINC resampler that prevented tracks to be mixed
    
        we were always erasing the current mix instead of mixing into it.
    
        Change-Id: Ib229245f9e5a0d384f1727640a59e9f0469211a2
    
    commit 0019ce082df430278f14ab922e900ce33b64897d
    Author: Dave Bort <dbort@google.com>
    Date:   Tue Nov 13 01:30:32 2007 -0800
    
        Rename "TARGET" to "MODULE" in the build system.
    
        Part one of the grand renaming.
    
        API_CHANGE: Third parties may need to update their makefiles.
        Any variables with "LOCAL" and "TARGET" in their names
        should now use "MODULE" instead of "TARGET"; e.g., LOCAL_MODULE,
        LOCAL_MODULE_TAGS.
    
        PRESUBMIT=passed
        OCL=39840
    
        Change-Id: Ica9a7937d3d9552ab84db46ac6eea8a290e404fe
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit f01adc0cef0e39e75c76d9195ac26a94cac0a100
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Wed Nov 14 08:32:08 2012 -0800
    
        Fix build warnings
    
        Change-Id: Ic43bcca166a529a6431711b05a7fa21849b6a38b
    
    commit 9bb031a565c753a03d9c9397edea318947d80528
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 04:44:30 2012 -0800
    
        more optimizations...
    
        calculate the offsets from the phase differently, this happens
        to reduce the register pressure in the main loop, which in turns
        allows the compiler to generate much better code (doesn't need
        to spill a lot of stuff on the stack).
    
        this gives another 15% performance increase
    
        Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    
    commit 5a951598f31217b8cd2babd0720c9608ee17291a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 03:26:39 2012 -0800
    
        refactor code to improve neon code
    
        we want to make sure we don't transfer data from the
        neon unit to the arm register file, as this can be quite
        slow. instead we do all the calculation on the neon side
        and write the result directly to main memory.
    
        Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    
    commit b381ee9e83bc9fd18986e79c7809841514ed590e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 15:16:13 2012 -0800
    
        NEON optimized SINC resampler
    
        this currently gives us a 60% to 80% boost depending
        on the quality level selected.
    
        Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    
    commit bea077354210242ea193a50b0dbab0fedab25df3
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 5 01:51:37 2012 -0800
    
        minor cleanups
    
        Change-Id: Ia12ee4fb59e90221761bec85e6450db29197591f
    
    commit 8f4ed7decbe161a5ff38200b218f5216d80aba46
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 18:49:14 2012 -0800
    
        improve resample test
    
        - handle stereo input
        - input file can now be ommited, in this case
          a linear chirp will be used automatically
        - better usage information
    
        Change-Id: I5d62a6c26a9054a1c1a517a065b4df5a2cdcda22
    
    commit 5fcd634ea6cb4df27c495abe20f5f9b8ff55d128
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 02:03:49 2012 -0800
    
        change how we store the FIR coefficients
    
        The coefficient table is now transposed and shows
        much better its polyphase nature: we now have a FIR
        per line, each line corresponding to a phase.
    
        This doesn't change at all the results produced by
        the filter, but allows us to make slightly better
        use of the data cache and improves performance a bit
        (although not as much as I thought it would).
    
        The main benefit is that it is the first step
        before we can make much larger optimizations
        (like using NEON).
    
        Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    
    commit d652231abf4c7e2ea1fc89caae730cec1f7259a1
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 3 23:37:53 2012 -0700
    
        improve SINC resampler performance
    
        The improvement is about 60% by just tweaking a few
        things to help the compiler generate better code.
        It turns out that inlining too much stuff manually was hurting us.
    
        Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    
    commit 9dc68ef5b94c700c4ee68790e8cbb334c90a538d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Nov 1 21:03:46 2012 -0700
    
        new coefficients for the vhq resampler
    
        previous coefficients were provided by a 3rd party and didn't have a
        way to re-generate them. we're now using the 'fir' utility.
    
        the performance of the filter is virtually identical, except for
        the down-sampling case which seems slightly better now:
           It looks like both the previous and new coefficients are generating
        some sort of clipping for full-scale signals in the down-sampling case
        (although the new ones seem better), the reason for that is
        unknown (see bug: 7453062)
    
        Also updated the HQ coefficients for the down-samplers, previous ones
        were a little bit too conservative -- the new ones push the cut-off
        frequency up by about 1 KHz.
    
        Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    
    commit 38e0b8560a6fc1b7124e22e0e09a84a285182f8e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 13:51:44 2012 -0700
    
        fix SINC resampler on non ARM architectures
    
        make sure the C version of the code generates the same
        output than the ARM assemply version.
    
        Change-Id: Ide218785c35d02598b2d7278e646b1b178148698
    
    commit a1878128b182696ba508569b4d211d0dfae92463
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 12:49:07 2012 -0700
    
        fix another issue with generating FIR coefficients
    
        the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
        missing the 2*f scale factor. This explains why we were seeing
        clipping and had to manually scale the filter down.
    
        Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    
    commit 1a0fb993430acc9f601e6c538305bc407c20ac5d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:20 2012 -0700
    
        fir a typo that caused up-sampling coefficiens to be wrong
    
        up-sample coefficient were generated with a cut-off frequency of 24KHz
        intead of ~20KHz, which caused more aliasing in the audible band.
    
        also increased the attenuation to 1.3 dB on both up and down
        sampling coefficient to avoid clipping.
    
        Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    
    commit 9520ad6862bd682ad075a9d9e3e94ada9f6e58b6
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:16 2012 -0700
    
        test-resample: clip instead of overflowing
    
        Change-Id: I550e5a59e51c11e1095ca338222b094f92b96878
    
    commit ba36656300f250f7f1fdeb75149749344260e6cb
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 01:01:38 2012 -0700
    
        a test app for the resamplers
    
        Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    
    commit 056a08b9bfd33cf27228c992adc8293a56b01be8
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 14:11:01 2012 -0700
    
        reenable the cubic resampler
    
        cubic resampler was disabled because it hadn't been qualified,
        however after I did some tests, it does improve significantly
        the sound quality over the order-1 resampler, even if it is
        still quite bad.
    
        also HIGH_QUALITY resampler was partially disabled, it's now
        fully enabled. It's a big improvement over the cubic resampler
        in terms of aliasing noise (it's not as good in the pass-band).
    
        Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    
    commit 8c0241d3ff50ae85167f69b3bd369244894cfa44
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 13:48:42 2012 -0700
    
        improve SINC resampler coefficients
    
        - we increase the interpolation precision from 4 to 7 bits
        this doesn't increase CPU power required, it only increases the
        size of the filter table but significantly reduces the noise
        introduced by the quantization of the impulse response.
    
        - the parameters of the filter are set such that aliasing is
        rejected at 80 dB below 20 KHz. Because we don't use a lot of
        coefficient (to save compute power), there are quite a bit of
        attenuation in the pass-band: starting at 9KHz for the
        down-sampler (48 to 44.1), and starting at 13 KHz for the
        up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
        Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    
    commit 69e7dab2192adc1f780464146810629ebd01b145
    Author: Pixelflinger <mathias.agopian@gmail.com>
    Date:   Thu Oct 25 19:43:49 2012 -0700
    
        improve fir tool: cleanup, better default, bug fixes
    
        - all parameters can be changed on the command-line
        - added float output
        - added debug option
        - added an option to generate a polyphase filter coefficients
        - added an attenuation option in dBFS
        - added a lot of comments and references
        - fixed kaiser window parameter
    
        also the default should generate a filter with 80 dB rejection
        (of the 24 KHz aliasing) above 20 KHz and a 15 KHz transition
        band around ~20 KHz (for 48 KHz sampling rate).
        It's not very good but corresponds to the current code.
    
    commit 8347499d105a50257c18e9dac652e750b06428b1
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Mon Oct 22 17:09:27 2012 -0700
    
        Increase allowed number of VHQ resamplers to 3
    
        Bug: 7378660
        Change-Id: I69e33ca2eb4bb9bd38e2c63df62cd1130d68baf6
    
    commit f91cf3cad7f5c4d52614271c89ab468741c5d24c
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 03:04:05 2012 -0700
    
        Fix a typo that caused the high quality resampler to produce garbage
    
        the problem is that if libaudio_resampler is present, it is those
        coefficients that will always be selected, but the correct
        meta-data.
    
        Bug: 7385994
        Change-Id: Ieebeb37b4dfb62a1a051bc29fae2ce056dbc6621
    
    commit e158a9e4262a174c59469a205658bc3ca4078234
    Author: Dan Bornstein <danfuzz@google.com>
    Date:   Fri Oct 3 10:34:57 2008 -0700
    
        Manually merge change #111620 from tc3 to mainline, to keep the
    
        automerger from choking on it.
    
        p4 sync
        p4 integrate -r -b android_to_tc3 //...@111620,111620
        p4 resolve -a
        p4 resolve     # resolve a couple merge travesties
    
        PRESUBMIT=passed
        BUG=1399648
        TBR=edheyl
        OCL=111902
    
        Change-Id: I854b01553dd92bbf9c864f5a9bd51a3d665f0ac2
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b9f3c26032be7a6ea01a10d93d94826f449e68ab
    Author: Dave Bort <dbort@google.com>
    Date:   Fri Jan 18 14:51:05 2008 -0800
    
        Rename "Makefile" to "Android.mk" throughout the tree.
    
        For <http://b/issue?id=960416>.
    
        I've tested this as much as I can, but 1500 open files =
        easy to mess things up.  Please let me know if there's
        a problem rather than rolling back this change.
    
        PRESUBMIT=passed
        BUG=960416
        TBR=joeo
        OCL=46537
    
        Change-Id: I5a404caf0f398a7afa7ae7abaf2f2a1c6ab490eb
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 0c22a9a44c4103483fba1d944acf1354c5eb1617
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 23:44:25 2007 -0700
    
        Tweak the SINC resampler parameters and double the performance. It's using about 10% CPU in the worse case now.
    
        Change-Id: I50ac7e6c6702a427fa36ab6d976c507155057507
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b85e41487983ad085b859acf8251e7e54480308a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 04:34:36 2007 -0700
    
        A sinc resampler for Audioflinger. It's not enabled yet, but fully functional and apparently working. It need more "quality" tests. In the 48->44 KHz, it takes about 25% of the CPU time.
    
        Change-Id: I80eb5185e13ebdb907e0b85c49ba1272c23d60ec
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit ba3949ef17cac2ba71cc3096c413782a49c922e5
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 21:01:28 2007 -0700
    
        fix a few small typos in the FIR computation
    
        Change-Id: I6e56b514fe520f30f7487f85c64ea5d2a7c19b40
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 7474bfa7de2604021963794dddfe44985648db6a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 03:16:02 2007 -0700
    
        This is a tool to compute the the reconstruction filter coefficients for a sinc audio resampler.
    
        Change-Id: I99be2505139b8e0e7647200e1647509d4f7e6067
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    Bug: 7577965
    Change-Id: I2c84a9283a1668723bad83e1a119c849c88c3e6b
    New VHQ resampler
    
    Squashed commit of the following:
    
    commit 12b6952da9f25e94d06dd7185bce255924e7e791
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 19 15:27:26 2012 -0800
    
        fix a typo in SINC resampler that prevented tracks to be mixed
    
        we were always erasing the current mix instead of mixing into it.
    
        Change-Id: Ib229245f9e5a0d384f1727640a59e9f0469211a2
    
    commit 0019ce082df430278f14ab922e900ce33b64897d
    Author: Dave Bort <dbort@google.com>
    Date:   Tue Nov 13 01:30:32 2007 -0800
    
        Rename "TARGET" to "MODULE" in the build system.
    
        Part one of the grand renaming.
    
        API_CHANGE: Third parties may need to update their makefiles.
        Any variables with "LOCAL" and "TARGET" in their names
        should now use "MODULE" instead of "TARGET"; e.g., LOCAL_MODULE,
        LOCAL_MODULE_TAGS.
    
        PRESUBMIT=passed
        OCL=39840
    
        Change-Id: Ica9a7937d3d9552ab84db46ac6eea8a290e404fe
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit f01adc0cef0e39e75c76d9195ac26a94cac0a100
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Wed Nov 14 08:32:08 2012 -0800
    
        Fix build warnings
    
        Change-Id: Ic43bcca166a529a6431711b05a7fa21849b6a38b
    
    commit 9bb031a565c753a03d9c9397edea318947d80528
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 04:44:30 2012 -0800
    
        more optimizations...
    
        calculate the offsets from the phase differently, this happens
        to reduce the register pressure in the main loop, which in turns
        allows the compiler to generate much better code (doesn't need
        to spill a lot of stuff on the stack).
    
        this gives another 15% performance increase
    
        Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    
    commit 5a951598f31217b8cd2babd0720c9608ee17291a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 03:26:39 2012 -0800
    
        refactor code to improve neon code
    
        we want to make sure we don't transfer data from the
        neon unit to the arm register file, as this can be quite
        slow. instead we do all the calculation on the neon side
        and write the result directly to main memory.
    
        Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    
    commit b381ee9e83bc9fd18986e79c7809841514ed590e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 15:16:13 2012 -0800
    
        NEON optimized SINC resampler
    
        this currently gives us a 60% to 80% boost depending
        on the quality level selected.
    
        Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    
    commit bea077354210242ea193a50b0dbab0fedab25df3
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 5 01:51:37 2012 -0800
    
        minor cleanups
    
        Change-Id: Ia12ee4fb59e90221761bec85e6450db29197591f
    
    commit 8f4ed7decbe161a5ff38200b218f5216d80aba46
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 18:49:14 2012 -0800
    
        improve resample test
    
        - handle stereo input
        - input file can now be ommited, in this case
          a linear chirp will be used automatically
        - better usage information
    
        Change-Id: I5d62a6c26a9054a1c1a517a065b4df5a2cdcda22
    
    commit 5fcd634ea6cb4df27c495abe20f5f9b8ff55d128
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 02:03:49 2012 -0800
    
        change how we store the FIR coefficients
    
        The coefficient table is now transposed and shows
        much better its polyphase nature: we now have a FIR
        per line, each line corresponding to a phase.
    
        This doesn't change at all the results produced by
        the filter, but allows us to make slightly better
        use of the data cache and improves performance a bit
        (although not as much as I thought it would).
    
        The main benefit is that it is the first step
        before we can make much larger optimizations
        (like using NEON).
    
        Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    
    commit d652231abf4c7e2ea1fc89caae730cec1f7259a1
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 3 23:37:53 2012 -0700
    
        improve SINC resampler performance
    
        The improvement is about 60% by just tweaking a few
        things to help the compiler generate better code.
        It turns out that inlining too much stuff manually was hurting us.
    
        Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    
    commit 9dc68ef5b94c700c4ee68790e8cbb334c90a538d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Nov 1 21:03:46 2012 -0700
    
        new coefficients for the vhq resampler
    
        previous coefficients were provided by a 3rd party and didn't have a
        way to re-generate them. we're now using the 'fir' utility.
    
        the performance of the filter is virtually identical, except for
        the down-sampling case which seems slightly better now:
           It looks like both the previous and new coefficients are generating
        some sort of clipping for full-scale signals in the down-sampling case
        (although the new ones seem better), the reason for that is
        unknown (see bug: 7453062)
    
        Also updated the HQ coefficients for the down-samplers, previous ones
        were a little bit too conservative -- the new ones push the cut-off
        frequency up by about 1 KHz.
    
        Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    
    commit 38e0b8560a6fc1b7124e22e0e09a84a285182f8e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 13:51:44 2012 -0700
    
        fix SINC resampler on non ARM architectures
    
        make sure the C version of the code generates the same
        output than the ARM assemply version.
    
        Change-Id: Ide218785c35d02598b2d7278e646b1b178148698
    
    commit a1878128b182696ba508569b4d211d0dfae92463
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 12:49:07 2012 -0700
    
        fix another issue with generating FIR coefficients
    
        the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
        missing the 2*f scale factor. This explains why we were seeing
        clipping and had to manually scale the filter down.
    
        Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    
    commit 1a0fb993430acc9f601e6c538305bc407c20ac5d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:20 2012 -0700
    
        fir a typo that caused up-sampling coefficiens to be wrong
    
        up-sample coefficient were generated with a cut-off frequency of 24KHz
        intead of ~20KHz, which caused more aliasing in the audible band.
    
        also increased the attenuation to 1.3 dB on both up and down
        sampling coefficient to avoid clipping.
    
        Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    
    commit 9520ad6862bd682ad075a9d9e3e94ada9f6e58b6
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:16 2012 -0700
    
        test-resample: clip instead of overflowing
    
        Change-Id: I550e5a59e51c11e1095ca338222b094f92b96878
    
    commit ba36656300f250f7f1fdeb75149749344260e6cb
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 01:01:38 2012 -0700
    
        a test app for the resamplers
    
        Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    
    commit 056a08b9bfd33cf27228c992adc8293a56b01be8
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 14:11:01 2012 -0700
    
        reenable the cubic resampler
    
        cubic resampler was disabled because it hadn't been qualified,
        however after I did some tests, it does improve significantly
        the sound quality over the order-1 resampler, even if it is
        still quite bad.
    
        also HIGH_QUALITY resampler was partially disabled, it's now
        fully enabled. It's a big improvement over the cubic resampler
        in terms of aliasing noise (it's not as good in the pass-band).
    
        Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    
    commit 8c0241d3ff50ae85167f69b3bd369244894cfa44
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 13:48:42 2012 -0700
    
        improve SINC resampler coefficients
    
        - we increase the interpolation precision from 4 to 7 bits
        this doesn't increase CPU power required, it only increases the
        size of the filter table but significantly reduces the noise
        introduced by the quantization of the impulse response.
    
        - the parameters of the filter are set such that aliasing is
        rejected at 80 dB below 20 KHz. Because we don't use a lot of
        coefficient (to save compute power), there are quite a bit of
        attenuation in the pass-band: starting at 9KHz for the
        down-sampler (48 to 44.1), and starting at 13 KHz for the
        up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
        Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    
    commit 69e7dab2192adc1f780464146810629ebd01b145
    Author: Pixelflinger <mathias.agopian@gmail.com>
    Date:   Thu Oct 25 19:43:49 2012 -0700
    
        improve fir tool: cleanup, better default, bug fixes
    
        - all parameters can be changed on the command-line
        - added float output
        - added debug option
        - added an option to generate a polyphase filter coefficients
        - added an attenuation option in dBFS
        - added a lot of comments and references
        - fixed kaiser window parameter
    
        also the default should generate a filter with 80 dB rejection
        (of the 24 KHz aliasing) above 20 KHz and a 15 KHz transition
        band around ~20 KHz (for 48 KHz sampling rate).
        It's not very good but corresponds to the current code.
    
    commit 8347499d105a50257c18e9dac652e750b06428b1
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Mon Oct 22 17:09:27 2012 -0700
    
        Increase allowed number of VHQ resamplers to 3
    
        Bug: 7378660
        Change-Id: I69e33ca2eb4bb9bd38e2c63df62cd1130d68baf6
    
    commit f91cf3cad7f5c4d52614271c89ab468741c5d24c
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 03:04:05 2012 -0700
    
        Fix a typo that caused the high quality resampler to produce garbage
    
        the problem is that if libaudio_resampler is present, it is those
        coefficients that will always be selected, but the correct
        meta-data.
    
        Bug: 7385994
        Change-Id: Ieebeb37b4dfb62a1a051bc29fae2ce056dbc6621
    
    commit e158a9e4262a174c59469a205658bc3ca4078234
    Author: Dan Bornstein <danfuzz@google.com>
    Date:   Fri Oct 3 10:34:57 2008 -0700
    
        Manually merge change #111620 from tc3 to mainline, to keep the
    
        automerger from choking on it.
    
        p4 sync
        p4 integrate -r -b android_to_tc3 //...@111620,111620
        p4 resolve -a
        p4 resolve     # resolve a couple merge travesties
    
        PRESUBMIT=passed
        BUG=1399648
        TBR=edheyl
        OCL=111902
    
        Change-Id: I854b01553dd92bbf9c864f5a9bd51a3d665f0ac2
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b9f3c26032be7a6ea01a10d93d94826f449e68ab
    Author: Dave Bort <dbort@google.com>
    Date:   Fri Jan 18 14:51:05 2008 -0800
    
        Rename "Makefile" to "Android.mk" throughout the tree.
    
        For <http://b/issue?id=960416>.
    
        I've tested this as much as I can, but 1500 open files =
        easy to mess things up.  Please let me know if there's
        a problem rather than rolling back this change.
    
        PRESUBMIT=passed
        BUG=960416
        TBR=joeo
        OCL=46537
    
        Change-Id: I5a404caf0f398a7afa7ae7abaf2f2a1c6ab490eb
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 0c22a9a44c4103483fba1d944acf1354c5eb1617
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 23:44:25 2007 -0700
    
        Tweak the SINC resampler parameters and double the performance. It's using about 10% CPU in the worse case now.
    
        Change-Id: I50ac7e6c6702a427fa36ab6d976c507155057507
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b85e41487983ad085b859acf8251e7e54480308a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 04:34:36 2007 -0700
    
        A sinc resampler for Audioflinger. It's not enabled yet, but fully functional and apparently working. It need more "quality" tests. In the 48->44 KHz, it takes about 25% of the CPU time.
    
        Change-Id: I80eb5185e13ebdb907e0b85c49ba1272c23d60ec
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit ba3949ef17cac2ba71cc3096c413782a49c922e5
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 21:01:28 2007 -0700
    
        fix a few small typos in the FIR computation
    
        Change-Id: I6e56b514fe520f30f7487f85c64ea5d2a7c19b40
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 7474bfa7de2604021963794dddfe44985648db6a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 03:16:02 2007 -0700
    
        This is a tool to compute the the reconstruction filter coefficients for a sinc audio resampler.
    
        Change-Id: I99be2505139b8e0e7647200e1647509d4f7e6067
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    Bug: 7577965
    Change-Id: I2c84a9283a1668723bad83e1a119c849c88c3e6b
    Fix build warnings
    
    Change-Id: Ic43bcca166a529a6431711b05a7fa21849b6a38b
    Fix build warnings
    
    Change-Id: Ic43bcca166a529a6431711b05a7fa21849b6a38b
    NEON optimized SINC resampler
    
    this currently gives us a 60% to 80% boost depending
    on the quality level selected.
    
    Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    NEON optimized SINC resampler
    
    this currently gives us a 60% to 80% boost depending
    on the quality level selected.
    
    Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    improve resample test
    
    - handle stereo input
    - input file can now be ommited, in this case
      a linear chirp will be used automatically
    - better usage information
    
    Change-Id: I5d62a6c26a9054a1c1a517a065b4df5a2cdcda22
    improve resample test
    
    - handle stereo input
    - input file can now be ommited, in this case
      a linear chirp will be used automatically
    - better usage information
    
    Change-Id: I5d62a6c26a9054a1c1a517a065b4df5a2cdcda22
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    test-resample: clip instead of overflowing
    
    Change-Id: I550e5a59e51c11e1095ca338222b094f92b96878
    test-resample: clip instead of overflowing
    
    Change-Id: I550e5a59e51c11e1095ca338222b094f92b96878
    a test app for the resamplers
    
    Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    a test app for the resamplers
    
    Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    Make AudioFlinger::instantiate() more resilient when called from separate module
    
    Bug: 8834855
    Change-Id: I4cd842cdfb09d2aaaaab9df9ac3bec6179709bd3
    AudioFlinger uses media.log service for logging
    
    Change-Id: Ia0f8204334f6b233f644d897762a18c95d936b4b
    AudioFlinger uses media.log service for logging
    
    Change-Id: Ia0f8204334f6b233f644d897762a18c95d936b4b
    Keep a copy of most recent audio played
    
    Change-Id: I6b2f97881c39998a2fae9ab79d669af6c0a37e94
    FastMixer update
    
    Updates:
     - Add support for mono fast tracks
     - Add support for optional sample rate conversion on fast tracks
     - Log sample rate and frame count
     - Enable statistics
    
    Change-Id: Ife014edf4f452da361f3eaaae19209ef6ff6958b
    Fast mixer
    
    Change-Id: I61552f83507e08e4c706076b9fb15362869e6265
    Factor out and speed up permission-checking code
    
    Use the caching permission check for dump to save IPC.
    
    Cache getpid() to save kernel call for other permission checks.
    
    The C runtime library getpid() can't cache due to a fork
    race condition, but we know that mediaserver doesn't fork.
    
    Don't construct String16 on the stack.
    
    Change-Id: I6be6161dae5155d39ba6ed6228e7683e67be34ed
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    fix deadlock in audioflinger::createEffect()
    
    commit 5baf2af5 introduced a regression by calling
    getOutputForEffect() with AudioFLinger main mutex locked.
    The locking order must always be AudioPolicyService mutex then
    AudioFlinger then ThreadBase mutex.
    
    Bug: 10916796.
    Change-Id: Ide34a2d84dbb06dbb35abd0640d91b01b0ac4d40
    more support for audio effect offload
    
    Offloading of audio effects is now enabled for offloaded
    output threads. If an effect not supporting offload is enabled,
    the AudioTrack is invalidated so that it can be recreated in PCM
    mode.
    
    Fix some issues in effect proxy related to handling of effect
    commands to offloaded and non offloaded effects.
    
    Also fixed a bug on capture index in software Visualizer effect.
    
    Bug: 8174034.
    
    Change-Id: Ib23d3c2d5a652361b0aaec7faee09102f2b18fce
    audioflinger: no effects on offloaded tracks
    
    Invalidate offloaded tracks when an effect is enabled
    so that the track is recreated in PCM mode and the effect
    can be applied.
    This is temporary until effect offloading is implemented.
    
    Bug: 8174034.
    
    Change-Id: I77b8b54a10db6cb8334be76d863ea7e720eaad09
    AudioFlinger: offload playback, non-blocking write
    
    - Added specialized playback thread class for offload playback,
    derived from directoutput thread.
    This thread type handles specific state transitions for offloaded
    tracks and offloading commands (pause/resume/drain/flush..) to audio HAL.
    As opposed to other threads, does not go to standby if the track is paused.
    
    - Added support for asynchronous write and drain operations at audio HAL.
    Use a thread to handle async callback events from HAL: this avoids locking
    playback thread mutex when executing the callback and cause deadlocks when
    calling audio HAL functions with the playback thread mutex locked.
    
    - Better accouting for track activity: call start/stop and release Output
    methods in audio policy manager when tracks are actually added and removed
    from the active tracks list.
    Added a command thread in audio policy service to handle stop/release commands
    asynchronously and avoid deadlocks with playback thread.
    
    - Track terminated status is not a state anymore. This condition is othogonal
    to state to permitted state transitions while terminated.
    
    Change-Id: Id157f4b3277620568d8eace7535d9186602564de
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    Make AudioFlinger::instantiate() more resilient when called from separate module
    
    Bug: 8834855
    Change-Id: I4cd842cdfb09d2aaaaab9df9ac3bec6179709bd3
    Fast mixer
    
    Change-Id: I61552f83507e08e4c706076b9fb15362869e6265
    Factor out and speed up permission-checking code
    
    Use the caching permission check for dump to save IPC.
    
    Cache getpid() to save kernel call for other permission checks.
    
    The C runtime library getpid() can't cache due to a fork
    race condition, but we know that mediaserver doesn't fork.
    
    Don't construct String16 on the stack.
    
    Change-Id: I6be6161dae5155d39ba6ed6228e7683e67be34ed
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Assign blame for playback wakelocks.
    
    Set a work source for the playback wakelock, so that playback is
    counted against the requesting app instead of the media server.
    
    Cherrypicked from master.
    
    b/9464621
    
    Change-Id: I7329f88a288a95a582a78005a1c3d16a5a611e31
    audioflinger: enable effects after registration if needed
    
    This fixes a bug where effects were not properly reenabled after
    being moved from one playback thread to another. The effect
    is enabled but the audio policy manager sees it as disabled.
    
    Bug: 11181933.
    Change-Id: I19cac7acbaf61c546e667fd85ed7d4eda1c716d8
    Cleanup openRecord error handling
    
    Bug: 10888816
    Change-Id: I84897dd7d30b370640b54e928f230604b873cb68
    fix deadlock in audioflinger::createEffect()
    
    commit 5baf2af5 introduced a regression by calling
    getOutputForEffect() with AudioFLinger main mutex locked.
    The locking order must always be AudioPolicyService mutex then
    AudioFlinger then ThreadBase mutex.
    
    Bug: 10916796.
    Change-Id: Ide34a2d84dbb06dbb35abd0640d91b01b0ac4d40
    Cleanup openRecord error handling
    
    Bug: 10888816
    Change-Id: I84897dd7d30b370640b54e928f230604b873cb68
    audioflniger: fix leaked audiosession references
    
    acquireAudioSessionId() should not create session references
    if the caller is not listed in the known notification clients.
    It happens when the MediaPlayer or AudioTrack is created by the
    mediaserver on behalf of a client (e.g CameraService). In this case
    releaseAudioSessionId() can be called from a different pid and
    the session reference will not be removed.
    Also we will not be able to remove the reference if the client
    process dies.
    
    Bug: 10606426.
    Change-Id: Ibb5e27518daeb484a2e66302e4c6221cbaca5b70
    more support for audio effect offload
    
    Offloading of audio effects is now enabled for offloaded
    output threads. If an effect not supporting offload is enabled,
    the AudioTrack is invalidated so that it can be recreated in PCM
    mode.
    
    Fix some issues in effect proxy related to handling of effect
    commands to offloaded and non offloaded effects.
    
    Also fixed a bug on capture index in software Visualizer effect.
    
    Bug: 8174034.
    
    Change-Id: Ib23d3c2d5a652361b0aaec7faee09102f2b18fce
    audioflinger: no effects on offloaded tracks
    
    Invalidate offloaded tracks when an effect is enabled
    so that the track is recreated in PCM mode and the effect
    can be applied.
    This is temporary until effect offloading is implemented.
    
    Bug: 8174034.
    
    Change-Id: I77b8b54a10db6cb8334be76d863ea7e720eaad09
    Enforce permission for recording from remote submix.
    
    Bug: 10265163
    Change-Id: I2395036bac6e10baeaf6ea4bc3093bd9dd98742d
    RecordTrack::createRecordTrack_l flags are in/out
    
    The flags are currently unused, but will be used for requesting a fast
    track.  Making flags in/out will allow reporting back up to client that
    the request is denied.
    
    Change-Id: Ifbee57da3632ce130551065a426577fb97b1a68d
    IAudioFlinger::openRecord track_flags_t flags is in/out
    
    This will allow AudioFlinger to tell client it is denying a request.
    
    Change-Id: Iff2be3ad6636371bbda9c9899a283c94620c1f06
    Add resampler comments and fix a typo
    
    Change-Id: Ie071673875f663de4212eed4a4dff89d51a5a915
    Move control block mName to createTrack() output
    
    This is part of a series of CLs to clean up the shared memory
    control block, by removing any fields that don't have to be there.
    
    Change-Id: I6e51003a1293b6800258c31b22cff2eba42162e7
    Remove CC_LIKELY and CC_UNLIKELY where not needed
    
    Only keep them in performance-sensitive code
    
    Change-Id: Ib257ddd7bc39ce9896997ffae008c524ac743d01
    AudioFlinger: offload playback, non-blocking write
    
    - Added specialized playback thread class for offload playback,
    derived from directoutput thread.
    This thread type handles specific state transitions for offloaded
    tracks and offloading commands (pause/resume/drain/flush..) to audio HAL.
    As opposed to other threads, does not go to standby if the track is paused.
    
    - Added support for asynchronous write and drain operations at audio HAL.
    Use a thread to handle async callback events from HAL: this avoids locking
    playback thread mutex when executing the callback and cause deadlocks when
    calling audio HAL functions with the playback thread mutex locked.
    
    - Better accouting for track activity: call start/stop and release Output
    methods in audio policy manager when tracks are actually added and removed
    from the active tracks list.
    Added a command thread in audio policy service to handle stop/release commands
    asynchronously and avoid deadlocks with playback thread.
    
    - Track terminated status is not a state anymore. This condition is othogonal
    to state to permitted state transitions while terminated.
    
    Change-Id: Id157f4b3277620568d8eace7535d9186602564de
    Move local variable declarations to point of first use
    
    Change-Id: Ideb83dea2c3002651c34fa646753cba598e29e93
    AudioRecord and HAL input stream must be 16-bit PCM only
    
    Currently there are 16-bit PCM assumptions in several places for capture:
     - resampler API
     - mRsmpInBuffer and mRsmpOutBuffer
     - RecordThread::threadLoop upmix, downmix, and resampling
     - possibly other places
    
    Until those assumptions are removed, this CL enforces 16-bit PCM in both
    client and server at all places where a format is checked.
    
    Change-Id: I08b0570bff626ad0d341804825a72c14e61b4233
    Use AudioSystem::setLowRamDevice() to configure memory
    
    Bug: 9798886
    Change-Id: I9321e3f369f1ed9429ae222e3926ebdeb012b8b0
    Make AudioFlinger::instantiate() more resilient when called from separate module
    
    Bug: 8834855
    Change-Id: I4cd842cdfb09d2aaaaab9df9ac3bec6179709bd3
    Include what is needed
    
    Remove old includes.
    Header files only include other header files that they directly need themselves.
    
    Change-Id: Ic471386808d9f42ea19ccbd59cb50a5f83a89dd0
    Public API changes for audio offload support.
    
    NOTE: this does _not_ include all private member variables added
    to classes as part of offload support. Only public/protected functions
    and stubs functions/variables needed to make the changes buildable.
    
    - isOffloadSupported() added to audio policy service
        A stub implementation is required to build, this always returns false
    - setParameters() added to IAudioTrack
        A stub implementation is required to build, this always returns
        INVALID_OPERATION
    
    - CBlk flag for stream end
    
    - Change AudioSystem::getRenderPosition() to take an audio_output_t
        so caller can specify which output to query
    
    - Add AudioSystem::isOffloadSupported()
        This is fully implemented down to the AudioFlinger function
        AudioPolicyServer::isOffloadSupported() which is just a stub
        that always returns false.
    
    - Add EVENT_STREAM_END to AudioTrack interface.
        STREAM_END is used to signal when the hardware has actually finished
        playing all the data it was sent.
    
    - Add event type enumeration to media player interface AudioSink callbacks
        so that the same callback can be used to handle multiple types of
        event. For offloaded tracks we also have to handle STREAM_END and
        TEAR_DOWN events
    
    - Pass audio_offload_info_t to various functions used for opening outputs,
        tracks and audio players. This passes additional information about the
        compressed stream down to the HAL when using offload.
        For publicly-available APIs this is an optional parameter (for some of
        the internal and low-level APIs around the HAL interface it is mandatory)
    
    - Add getParameters() and setParameters() API to AudioTrack
        Currently dummy implementations.
    
    - Change AudioPlayer contructor so that it takes a set of bitflags defining what
        options are required. This replaces the original bool which only specified
        whether to use deep buffering.
    
    - Changes to StageFright class definition related to handling tearing-down of
        an offloaded track when we need to switch back to software decode
    
    - Define new StageFright utility functions used for offloaded tracks
        Currently dummy implementations.
    
    - AudioFlinger changes to use extended audio_config_t.
        Fills in audio_offload_info_t member if this info is passed in when
        opening an output.
    
    - libvideoeditor changes required to add the new event type parameter
        to AudioSink callback functions
    
    - libmediaplayerservice changes required to add the new event type parameter
        to AudioSink callback functions
    
    Change-Id: I3ab41138aa1083d81fe83b886a9b1021ec7320f1
    Signed-off-by: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
    Signed-off-by: Eric Laurent <elaurent@google.com>
    Consistent whitespace
    
    Change-Id: I118cce68d3b777f9ec9b6bfb70367496422a40f2
    Use correct pid when running under test harness
    
    This is a partial fix which addresses one of the root causes of this bug,
    but only when running under test harness.  It has no effect otherwise.
    
    Bug: 8598539
    Change-Id: I87444daef1d76b17544f331e651ba1c87893c381
    Use correct pid when running under test harness
    
    This is a partial fix which addresses one of the root causes of this bug,
    but only when running under test harness.  It has no effect otherwise.
    
    Bug: 8598539
    Change-Id: I87444daef1d76b17544f331e651ba1c87893c381
    Miscellaneous cleanup
    
    Abbreviation framesReady to fRdy for new systrace.
    Put inline const on one line.
    Use local copy of mState in state.
    Improve logging.
    Line length 100.
    
    Change-Id: I8201c3ce0e53fd464fd33d02544e52c342d40b68
    Miscellaneous cleanup
    
    Abbreviation framesReady to fRdy for new systrace.
    Put inline const on one line.
    Use local copy of mState in state.
    Improve logging.
    Line length 100.
    
    Change-Id: I8201c3ce0e53fd464fd33d02544e52c342d40b68
    Remove tee sink debugging at compile time
    
    Bug: 8223560
    Change-Id: Iddbfb06c45d43d9f20bb428215dd4094931e19a7
    Remove tee sink debugging at compile time
    
    Bug: 8223560
    Change-Id: Iddbfb06c45d43d9f20bb428215dd4094931e19a7
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Fix crash when destroying a DuplicatingThread
    
    Bug: 8121343
    Change-Id: I9b1fc56c753e465e8a08916022e52db6c3a36906
    Fix crash when destroying a DuplicatingThread
    
    Bug: 8121343
    Change-Id: I9b1fc56c753e465e8a08916022e52db6c3a36906
    AudioFlinger: fix RecordThread initial device
    
    A regression was introduced when the audio device enums where
    modified for a 32 bit representation: the device passed when
    constructing a RecordThread was still the concatenation of input
    device and output device bit fields on one 32 bit value which
    is not possible anymore.
    
    The fix consists in modifying the RecordThread constructor to accept
    separate values for input and output devices.
    
    Change-Id: I81fb5f4718428b54251e65d74b86e198ce15193e
    AudioFlinger: fix RecordThread initial device
    
    A regression was introduced when the audio device enums where
    modified for a 32 bit representation: the device passed when
    constructing a RecordThread was still the concatenation of input
    device and output device bit fields on one 32 bit value which
    is not possible anymore.
    
    The fix consists in modifying the RecordThread constructor to accept
    separate values for input and output devices.
    
    Change-Id: I81fb5f4718428b54251e65d74b86e198ce15193e
    AudioFlinger uses media.log service for logging
    
    Change-Id: Ia0f8204334f6b233f644d897762a18c95d936b4b
    AudioFlinger uses media.log service for logging
    
    Change-Id: Ia0f8204334f6b233f644d897762a18c95d936b4b
    Remove unnecessary parameter
    
    Just get the parameter on server side
    
    Change-Id: I433a63104dbb257e0d862be2ab61847cb36d1c15
    Remove unnecessary parameter
    
    Just get the parameter on server side
    
    Change-Id: I433a63104dbb257e0d862be2ab61847cb36d1c15
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    Clean up channel count and channel mask
    
    Channel count is uint32_t.
    Remove redundant mask parameter to AudioTrack::createTrack_l()
        and AudioRecord::openRecord_l().
    
    Change-Id: I5dc2b18eb609b2c0dc3091994cbaa4628062c17f
    Clean up channel count and channel mask
    
    Channel count is uint32_t.
    Remove redundant mask parameter to AudioTrack::createTrack_l()
        and AudioRecord::openRecord_l().
    
    Change-Id: I5dc2b18eb609b2c0dc3091994cbaa4628062c17f
    Don't use control block frame count after create
    
    This is part of a series to clean up the control block.
    
    Change-Id: I7f4cb05aef63053f8e2ab05b286d302260ef4758
    Don't use control block frame count after create
    
    This is part of a series to clean up the control block.
    
    Change-Id: I7f4cb05aef63053f8e2ab05b286d302260ef4758
    "if" statements use curly braces per media style
    
    Change-Id: I130e7849fd1da7a0b7fe56c3c53919d26e3843b8
    "if" statements use curly braces per media style
    
    Change-Id: I130e7849fd1da7a0b7fe56c3c53919d26e3843b8
    Don't explicitly log tid
    
    If needed, it can be obtained with adb logcat -v threadtime
    
    Change-Id: I91b3911d20f7bcfc3361db4052db21ff9181f1cf
    Don't explicitly log tid
    
    If needed, it can be obtained with adb logcat -v threadtime
    
    Change-Id: I91b3911d20f7bcfc3361db4052db21ff9181f1cf
    Fix time vs. bytes units bug in getRenderPosition
    
    Rename correctLatency since it requires thread to be locked.
    Use size_t for byte and frame counts.
    
    Change-Id: I178fdd18bdb823813b9563927bdff8c0d28ca5a5
    Fix time vs. bytes units bug in getRenderPosition
    
    Rename correctLatency since it requires thread to be locked.
    Use size_t for byte and frame counts.
    
    Change-Id: I178fdd18bdb823813b9563927bdff8c0d28ca5a5
    Static AudioTrack plays twice initially
    
    Bug: 7528721
    Change-Id: I10bc16a26f33dba6572b730a170cb3bf00e68e30
    Static AudioTrack plays twice initially
    
    Bug: 7528721
    Change-Id: I10bc16a26f33dba6572b730a170cb3bf00e68e30
    Use size_t for frame counts
    
    Also fix typo: bufferCount should be frameCount.
    
    Change-Id: Ibed539504db75ef99dc21c8ff1bf2987122063a5
    Use size_t for frame counts
    
    Also fix typo: bufferCount should be frameCount.
    
    Change-Id: Ibed539504db75ef99dc21c8ff1bf2987122063a5
    Static AudioTrack plays twice initially
    
    Bug: 7528721
    Change-Id: I10bc16a26f33dba6572b730a170cb3bf00e68e30
    Static AudioTrack plays twice initially
    
    Bug: 7528721
    Change-Id: I10bc16a26f33dba6572b730a170cb3bf00e68e30
    Clean up frame size in AudioTrack and AudioFlinger
    
    TrackBase::mFrameSize, mChannelMask, and mChannelCount are now const.
    Use TrackBase::mFrameSize instead of re-calculating frame size.
    AudioFlinger only sees 16-bit PCM format, conversion from 8-bit is
      now entirely on the client side.  Previously a small part of the
      responsibility was on server side also.
    size_t is unsigned, so use %u in logs.
    Fix theoretical bug where TrackBase constructor was over-allocating space
      for non-linear AudioTrack or 8-bit PCM AudioRecord (probably benign).
    
    Change-Id: I7cbbba0bf4dba29ea751d8af341ab8e5cbbdc206
    Clean up frame size in AudioTrack and AudioFlinger
    
    TrackBase::mFrameSize, mChannelMask, and mChannelCount are now const.
    Use TrackBase::mFrameSize instead of re-calculating frame size.
    AudioFlinger only sees 16-bit PCM format, conversion from 8-bit is
      now entirely on the client side.  Previously a small part of the
      responsibility was on server side also.
    size_t is unsigned, so use %u in logs.
    Fix theoretical bug where TrackBase constructor was over-allocating space
      for non-linear AudioTrack or 8-bit PCM AudioRecord (probably benign).
    
    Change-Id: I7cbbba0bf4dba29ea751d8af341ab8e5cbbdc206
    Use uint32_t for sample rate
    
    Change-Id: Ie240b48fb54b08359f69ecd4e5f8bda3d15cbe80
    Use uint32_t for sample rate
    
    Change-Id: Ie240b48fb54b08359f69ecd4e5f8bda3d15cbe80
    Rename TrackBase::mFrameCount to mStepCount
    
    This prepares for adding a new field TrackBase::mFrameCount
    with a different meaning.
    
    Change-Id: I6bbe2c59f2a882be57caeec2e2e06f439a0e9e83
    Rename TrackBase::mFrameCount to mStepCount
    
    This prepares for adding a new field TrackBase::mFrameCount
    with a different meaning.
    
    Change-Id: I6bbe2c59f2a882be57caeec2e2e06f439a0e9e83
    Move frame size out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ifab1c42ac0f8be704e571b292713cd2250d12a3f
    Move frame size out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ifab1c42ac0f8be704e571b292713cd2250d12a3f
    Move buffers pointer out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ie474557db7cb360f2d9a0f11600a68f5a3d46f07
    Move buffers pointer out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ie474557db7cb360f2d9a0f11600a68f5a3d46f07
    Remove CBLK_DIRECTION from control block flags
    
    This is part of a series to clean up the control block.
    
    Change-Id: I0265fece3247356b585d4d48fbda6f37aea8a851
    Remove CBLK_DIRECTION from control block flags
    
    This is part of a series to clean up the control block.
    
    Change-Id: I0265fece3247356b585d4d48fbda6f37aea8a851
    Remove CBLK_FAST from control block flags
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ic881a3560d9547cb63fcc0cefec87aa3da480e0d
    Remove CBLK_FAST from control block flags
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ic881a3560d9547cb63fcc0cefec87aa3da480e0d
    Merge duplicate code in TrackBase::TrackBase()
    
    Change-Id: Id8a7db4d94888796a9dcbed4cac99941705cd174
    Merge duplicate code in TrackBase::TrackBase()
    
    Change-Id: Id8a7db4d94888796a9dcbed4cac99941705cd174
    Simplify control block flag names
    
    Use only one symbol per flag
    
    Change-Id: Ia3582e2134abd60c896d11337face65383e79c7c
    Simplify control block flag names
    
    Use only one symbol per flag
    
    Change-Id: Ia3582e2134abd60c896d11337face65383e79c7c
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Save copy of mic input, disabled by default
    
    Change-Id: I4f5e95a5ddf016530d1b2747a0a5ca0962caabda
    Save copy of mic input, disabled by default
    
    Change-Id: I4f5e95a5ddf016530d1b2747a0a5ca0962caabda
    Use ALOGVV instead of commented ALOGV
    
    Change-Id: I17bdb5274877760c7edaa31416020d349082e593
    Use ALOGVV instead of commented ALOGV
    
    Change-Id: I17bdb5274877760c7edaa31416020d349082e593
    Remove active track when thread goes to standby
    
    Bug: 7369232
    Change-Id: I7ff9f525dad4be0aef562a53015b06ee7d3d50f1
    Remove active track when thread goes to standby
    
    Bug: 7369232
    Change-Id: I7ff9f525dad4be0aef562a53015b06ee7d3d50f1
    Fix track estimation for presentation complete
    
    Audio tracks were not using the right latency estimation for
     signalling the completion of their presetation. This caused
     the synchronization mechanism between playback and record to be
     off, and a synchronized recording would contain some of the audio
     that was meant to be over once recording would start.
    Use the playback thread's latency reporting which takes the audio
     pipe into account.
    
    Bug 7237669
    
    Change-Id: I23a907a53ad0b0d68d246789ec595a77a79fced5
    Fix track estimation for presentation complete
    
    Audio tracks were not using the right latency estimation for
     signalling the completion of their presetation. This caused
     the synchronization mechanism between playback and record to be
     off, and a synchronized recording would contain some of the audio
     that was meant to be over once recording would start.
    Use the playback thread's latency reporting which takes the audio
     pipe into account.
    
    Bug 7237669
    
    Change-Id: I23a907a53ad0b0d68d246789ec595a77a79fced5
    Disable audio watchdog
    
    It's not critical, and is wasting power
    
    Bug: 7241714
    Change-Id: I6ad4375f0000c92529688723dbe0ff0caa809c5d
    Disable audio watchdog
    
    It's not critical, and is wasting power
    
    Bug: 7241714
    Change-Id: I6ad4375f0000c92529688723dbe0ff0caa809c5d
    bug 7253033 clean up before closing an output
    
    An output can only be closed if there is no lock contention that
     prevents ThreadBase::exit() from being blocked. If an output
     device is waiting for an operation to complete (here a write
     in the remote_submix module, because the pipe is full), signal
     the module that it's entering the "exiting" state.
    
    Change-Id: I8248add60da543e90c25a4c809866cdb26255651
    bug 7253033 clean up before closing an output
    
    An output can only be closed if there is no lock contention that
     prevents ThreadBase::exit() from being blocked. If an output
     device is waiting for an operation to complete (here a write
     in the remote_submix module, because the pipe is full), signal
     the module that it's entering the "exiting" state.
    
    Change-Id: I8248add60da543e90c25a4c809866cdb26255651
    Revert "Don't wait for presentation complete if terminated"
    
    This reverts commit 44cda3a4e7ca3de0db9cb49145def3803b03ebb4
    
    Change-Id: I7fd29b77690dab057ac966a42fb198b2772f092c
    Revert "Don't wait for presentation complete if terminated"
    
    This reverts commit 44cda3a4e7ca3de0db9cb49145def3803b03ebb4
    
    Change-Id: I7fd29b77690dab057ac966a42fb198b2772f092c
    Implement android.media.AudioManager.getProperty()
    
    Bug: 6635041
    Change-Id: I3386a4a6c226bc4eceaf65556119e4fb15f73224
    Implement android.media.AudioManager.getProperty()
    
    Bug: 6635041
    Change-Id: I3386a4a6c226bc4eceaf65556119e4fb15f73224
    audioflinger: improve record start and thread exit
    
    Use broadcast() instead of signal() on the
    thread wake up condition when starting record or requesting thread
    exit to make sure that if another thread is waiting for the same
    condition (e.g binder thread calling setParameters()) the mixer
    thread will be woken up.
    
    Bug 7184317.
    
    Change-Id: I3154a4509ca7af6ffae5236e522b0fab8e75ed06
    audioflinger: improve record start and thread exit
    
    Use broadcast() instead of signal() on the
    thread wake up condition when starting record or requesting thread
    exit to make sure that if another thread is waiting for the same
    condition (e.g binder thread calling setParameters()) the mixer
    thread will be woken up.
    
    Bug 7184317.
    
    Change-Id: I3154a4509ca7af6ffae5236e522b0fab8e75ed06
    fix end of track presentation on suspended output
    
    The code detecting the end of an audio track presentation before
    removing it from the active track list is based on the
    count of audio frames sent to audio HAL. When an output stream
    is suspended (e.g. A2DP when SCO is active), this count does not
    change and a track in stopped state will never be removed from
    active track list causing the mixer thread to never release
    the wake lock.
    
    The fix consists in incrementing the audio HAL frame count even
    if the output is suspended.
    
    Also fix a problem in getRenderPosition() when the output is suspended.
    
    Bug 7167534.
    
    Change-Id: I3be836cbbea29b65dc087199cac6a1cd84c0a41d
    fix end of track presentation on suspended output
    
    The code detecting the end of an audio track presentation before
    removing it from the active track list is based on the
    count of audio frames sent to audio HAL. When an output stream
    is suspended (e.g. A2DP when SCO is active), this count does not
    change and a track in stopped state will never be removed from
    active track list causing the mixer thread to never release
    the wake lock.
    
    The fix consists in incrementing the audio HAL frame count even
    if the output is suspended.
    
    Also fix a problem in getRenderPosition() when the output is suspended.
    
    Bug 7167534.
    
    Change-Id: I3be836cbbea29b65dc087199cac6a1cd84c0a41d
    audioflinger: send priority request from a thread
    
    When creating a fast AudioTrack, a request is sent to SchedulingPolicyService
    to elevate the requesting thread priority. This generates a binder
    call into system_server process and to a JAVA service via JNI.
    If the thread from which the track was created is in the system_server
    process and does not have the "can call java" attribute, a crash occurs because
    the binder optimization reuses the same thread to process the returning binder
    call and no JNI env is present.
    
    The fix consists in sending the priority change request from the AudioFlinger
    mixer thread, not from the binder thread.
    
    This also reverts the workaround in commit 73431968
    
    Bug 7126707.
    
    Change-Id: I3347adf71ffbb56ed8436506d4357eab693078a3
    audioflinger: send priority request from a thread
    
    When creating a fast AudioTrack, a request is sent to SchedulingPolicyService
    to elevate the requesting thread priority. This generates a binder
    call into system_server process and to a JAVA service via JNI.
    If the thread from which the track was created is in the system_server
    process and does not have the "can call java" attribute, a crash occurs because
    the binder optimization reuses the same thread to process the returning binder
    call and no JNI env is present.
    
    The fix consists in sending the priority change request from the AudioFlinger
    mixer thread, not from the binder thread.
    
    This also reverts the workaround in commit 73431968
    
    Bug 7126707.
    
    Change-Id: I3347adf71ffbb56ed8436506d4357eab693078a3
    Handle audio HAL returning 0 bytes in record thread
    
    Enter standby when HAL returns an error, but also consider 0 bytes
      returned as NOT_ENOUGH_DATA.
    
    Change-Id: Ica83142310e9c176f936e0440571a6034cbc575f
    Handle audio HAL returning 0 bytes in record thread
    
    Enter standby when HAL returns an error, but also consider 0 bytes
      returned as NOT_ENOUGH_DATA.
    
    Change-Id: Ica83142310e9c176f936e0440571a6034cbc575f
    Fix build in AudioFlinger/FastMixer
    
    Commit was missing some changes to modifications to send session ID
     from AudioFlinger to AudioMixer.
    
    Change-Id: I7daeaf4eff243b5287bef63be86a87acf408374a
    Fix build in AudioFlinger/FastMixer
    
    Commit was missing some changes to modifications to send session ID
     from AudioFlinger to AudioMixer.
    
    Change-Id: I7daeaf4eff243b5287bef63be86a87acf408374a
    Don't deadlock on AudioRecord start when reads return 0
    
    When calling start() on an AudioRecord with a HAL that
     returns 0 on a read() operation, the start blocking
     condition was never unblocked.
    Add a boolean to track the first read operation so the returned
     number of bytes (mBytesRead) is only evaluated after that
     first read.
    
    Change-Id: I8c735a00d48cd6a0da467ccdf75d3616b38f6afa
    Don't deadlock on AudioRecord start when reads return 0
    
    When calling start() on an AudioRecord with a HAL that
     returns 0 on a read() operation, the start blocking
     condition was never unblocked.
    Add a boolean to track the first read operation so the returned
     number of bytes (mBytesRead) is only evaluated after that
     first read.
    
    Change-Id: I8c735a00d48cd6a0da467ccdf75d3616b38f6afa
    Communicate audio session ID to downmixer
    
    The audio downmixer effect might need the audio session Id, pass it
     from the track creation in AudioFlinger to the downmix effect
     creation in AudioMixer.
    
    Change-Id: I836873eebd6711f1048fce81cd2eb29b94f0ad0c
    Communicate audio session ID to downmixer
    
    The audio downmixer effect might need the audio session Id, pass it
     from the track creation in AudioFlinger to the downmix effect
     creation in AudioMixer.
    
    Change-Id: I836873eebd6711f1048fce81cd2eb29b94f0ad0c
    Communicate audio session ID to downmixer
    
    The audio downmixer effect might need the audio session Id, pass it
     from the track creation in AudioFlinger to the downmix effect
     creation in AudioMixer.
    
    Change-Id: I5e29540542ae89cf4a0cdb537b3e67f04442a20a
    Communicate audio session ID to downmixer
    
    The audio downmixer effect might need the audio session Id, pass it
     from the track creation in AudioFlinger to the downmix effect
     creation in AudioMixer.
    
    Change-Id: I5e29540542ae89cf4a0cdb537b3e67f04442a20a
    audioflinger: changes for new audio devices enums
    
    The ThreadBase class now has a separate member for input
    and output devices (mInDevice, mOutDevice).
    
    Only query get_supported_devices() from audio HAL if the function
    is exposed and if the audio policy manager did not specify the
    audio module to open.
    
    Also fixed bug in AEC preprocessing that would reset
    to default output device when an input device was given.
    
    Change-Id: I19d4d06aeb920b068e3ef31e6e6be6345ce5d67a
    audioflinger: changes for new audio devices enums
    
    The ThreadBase class now has a separate member for input
    and output devices (mInDevice, mOutDevice).
    
    Only query get_supported_devices() from audio HAL if the function
    is exposed and if the audio policy manager did not specify the
    audio module to open.
    
    Also fixed bug in AEC preprocessing that would reset
    to default output device when an input device was given.
    
    Change-Id: I19d4d06aeb920b068e3ef31e6e6be6345ce5d67a
    AudioFlinger: send audio source to audio effects
    
    Added support for EFFECT_CMD_SET_AUDIO_SOURCE audio effect
    command to inform preprocessings of current audio source
    selection for capture.
    
    Change-Id: Ib2418a9aa8114e8457fe828ecd43b230ed86cdd6
    AudioFlinger: send audio source to audio effects
    
    Added support for EFFECT_CMD_SET_AUDIO_SOURCE audio effect
    command to inform preprocessings of current audio source
    selection for capture.
    
    Change-Id: Ib2418a9aa8114e8457fe828ecd43b230ed86cdd6
    Update audio comments
    
    Change-Id: Ie7504d0ddb252f7e4d4f99ed0b44cfc7b1049816
    Update audio comments
    
    Change-Id: Ie7504d0ddb252f7e4d4f99ed0b44cfc7b1049816
    Remove dead code
    
    RecordThread::isValidSyncEvent() returns false, so most of
    RecordThread::setSyncEvent() is never executed.
    
    Change-Id: I0cf848beb46a367a45126d2df3073c5afa2ca59c
    Remove dead code
    
    RecordThread::isValidSyncEvent() returns false, so most of
    RecordThread::setSyncEvent() is never executed.
    
    Change-Id: I0cf848beb46a367a45126d2df3073c5afa2ca59c
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    const methods
    
    Change-Id: I92e32ee16274c032c9d0ce910676be2a7fa52471
    Simplify AudioFlinger::PlaybackThread::isValidSyncEvent()
    
    Change-Id: I3e4af69b929d4ca04afaac26c7e41c89fce25b9c
    Discard setSyncEvent() return value
    
    setSyncEvent() returns a status_t which is sometimes ignored.
    Emphasize this is intentional by casting to void.
    
    Change-Id: Ic614988347cba36bd2504d7ad321594a355b0d9d
    Replace hard-coded "2" by a constant and comment
    
    Bug: 6679403
    Change-Id: I6c2701f9afedc26540dfad0b4e23348bbc4cb01a
    AudioFlinger: fix timed audio
    
    (cherry picked from commit e20ac92c564a2f4e8123885807abdf0a78de0dd7)
    
    > AudioFlinger: fix timed audio
    >
    > Addresses Bug 6900517.
    >
    > Finish up support for timed audio in the new FastMixer world.  Pay special
    > attention to remaining lock-less and voluntary yield free on the FastMixer
    > thread.  This fixes audio playback for Q on JB.
    >
    > Change-Id: Iaf815e58a1b1d0a0190051794bec8dc5c9231785
    > Signed-off-by: John Grossman <johngro@google.com>
    
    Change-Id: I9bd687acc345a05867af48e71116690fdb0ce1b5
    Signed-off-by: John Grossman <johngro@google.com>
    AudioFlinger: Better handling for master volume/mute
    
    (cherry picked from commit 93d906837e0e89aa1d9c913ab2b531b809f9bb9e)
    
    > AudioFlinger: Better handling for master volume/mute
    >
    > Changes to address bug 6842827.
    >
    > When a HAL is loaded, cache whether or not the HAL supports
    > set_master_volume/mute in the AudioHwDevice structure.  Store an
    > AudioHwDevice in AudioStream(In|Out) structures instead of just an
    > audio_he_device_t.  This give threads (PlaybackThreads in
    > particular) access to the cached capabilities.
    >
    > When setting master volume/mute, change the system to always set the
    > setting on all HAL which support it and also to set the setting on all
    > PlaybackThreads.  Change PlaybackThreads to apply the setting at the
    > in SW mix stage of the pipeline if its assigned HAL does not support
    > the setting, or to ignore the setting of the assigned HAL does support
    > it.
    >
    > Change-Id: Ia14137a30b4c3ee6f2d7ddcc8cba87bf5eec87f4
    > Signed-off-by: John Grossman <johngro@google.com>
    
    Change-Id: Icb6bc13764e100a2003eb1dee2231132ab287d98
    Signed-off-by: John Grossman <johngro@google.com>
    Change audio flinger to user HAL master mute if available
    
    (cherry picked from commit 91de9b56282d126ffb36344266af5fee3cefcfdd)
    
    > Change audio flinger to user HAL master mute if available
    >
    > Hand merge from ics-aah
    >
    > > Change audio flinger to user HAL master mute if available: DO NOT MERGE
    > >
    > > Replicate the pattern used for HAL master volume support to make use
    > > of master mute support if the HAL supports it.  This is part of the
    > > change needed to address bug 6828363.  Because of the divergences
    > > between ICS and master, this change will need to be merged by hand.
    > >
    > > Signed-off-by: John Grossman <johngro@google.com>
    > > Change-Id: I6d83be524021d273d093bcb117b8f2fe57c23685
    >
    > Change-Id: I32280582905c969aaec2bb166ec5c61df82d737a
    > Signed-off-by: John Grossman <johngro@google.com>
    
    Change-Id: I5cd709187221d307fe25c5117ccaadca5f6b197b
    Signed-off-by: John Grossman <johngro@google.com>
    Don't wait for presentation complete if terminated
    
    Change-Id: Ia04cf6c620693457dca87b4ffea5dd0fe71efdce
    Start adding support for multiple record tracks
    
    Replace single mTrack by vector mTracks.
    Destroy record tracks similarly to playback tracks.
    Dump all record tracks, in addition to the active record track.
    
    Change-Id: I503f10b51928b6b92698fe1c51a9ddd3215df1f4
    AudioFlinger: Better handling for master volume/mute
    
    Changes to address bug 6842827.
    
    When a HAL is loaded, cache whether or not the HAL supports
    set_master_volume/mute in the AudioHwDevice structure.  Store an
    AudioHwDevice in AudioStream(In|Out) structures instead of just an
    audio_he_device_t.  This give threads (PlaybackThreads in
    particular) access to the cached capabilities.
    
    When setting master volume/mute, change the system to always set the
    setting on all HAL which support it and also to set the setting on all
    PlaybackThreads.  Change PlaybackThreads to apply the setting at the
    in SW mix stage of the pipeline if its assigned HAL does not support
    the setting, or to ignore the setting of the assigned HAL does support
    it.
    
    Change-Id: Ia14137a30b4c3ee6f2d7ddcc8cba87bf5eec87f4
    Signed-off-by: John Grossman <johngro@google.com>
    Change audio flinger to user HAL master mute if available
    
    Hand merge from ics-aah
    
    > Change audio flinger to user HAL master mute if available: DO NOT MERGE
    >
    > Replicate the pattern used for HAL master volume support to make use
    > of master mute support if the HAL supports it.  This is part of the
    > change needed to address bug 6828363.  Because of the divergences
    > between ICS and master, this change will need to be merged by hand.
    >
    > Signed-off-by: John Grossman <johngro@google.com>
    > Change-Id: I6d83be524021d273d093bcb117b8f2fe57c23685
    
    Change-Id: I32280582905c969aaec2bb166ec5c61df82d737a
    Signed-off-by: John Grossman <johngro@google.com>
    Clean up start() parameters
    
    Document where int is used instead of AudioSystem::sync_event_t
      (probably because of a header file dependency).
    TrackBase::start() and RecordTrack::start() don't need default parameters.
    
    Change-Id: I82f4a4d078be900f3aa4bd926697e32f5ed68ec8
    Extract methods to enter standby and standby mode
    
    Also move initial standby from to threadLoop to avoid a race condition.
    
    Change-Id: I65afca83c36fb41b983b3b1d3dab35d4029560e3
    Use valueAt instead of editValueAt when possible
    
    Change-Id: I885b169f4b176a6b5c2ca9a534214b4ffff1700e
    Fix races in AudioRecord stop()
    
    Change-Id: Id0ac1915f57fef4a938c7f90989c1162a8b6c51c
    Use upmix/downmix utility routines
    
    Change-Id: I9ae2ec938fb695ec576ea008a42205325af7bbf1
    fix audio effect not destroyed when needed.
    
    commit a5f44eba contained an error which made that audio effect
    modules where not destroyed but left in the destroyed state
    rendering them unuseable after being released.
    
    Bug 6805168.
    
    Change-Id: Ia4e683b3c970ffd01846c482fde73d799ff219de
    Miscellaneous audio record fixes
    
    Call AudioSystem::stopInput() if exitPending() after wait() returns.
    
    Acquire lock before clearing mActiveThread.
    
    Change-Id: Ia55e4c4b3accc65ad5479cbdc094fd919152af9f
    Use constructor to initialize instead of memcpy
    
    Also don't check for thread parameter as it's always non-NULL
    
    Change-Id: Id23ded1370556ef3f76f81f5f0c6fa644bcba681
    Internal dump methods return void not status_t
    
    Only the IAudioFlinger::dump() needs to return a status_t.
    
    Change-Id: Iffeb2a7db4846df850b6b2ed960276f1fd75dba0
    Revert 94479fd5405642c67efd14cebe722feb9cbe6e77
    
    Change-Id: I5ca78d5462badf541868785b2ba2e3f6d0cf492a
    Use audio_devices_t more places
    
    Change-Id: Id0ace02ca6f480a6c46e11880acf6cdc66d83184
    Use struct assignment instead of explicit memcpy
    
    for POD structs effect_descriptor_t and effect_config_t
    
    Change-Id: Ib2fc47f85fb65ed91b0abb1f87217c49b5eb571d
    Run audio at priorities 2 and 3 above kernel 1
    
    Also run the watchdog at same priority as the fast mixer.
    requestPriority() originally used only the caller's pid to decide which
    cgroup to assign, but in the future it might look at the priority also.
    So it's safer to use same priority as the fast mixer to be sure we
    run in the same cgroup.
    
    Bug: 6461925
    Change-Id: Ia59c93e4b22dacbb6746bfa6ad491be7b72f2b8d
    Don't call virtual methods in destructor
    
    The result of calling virtual methods from a destructor is undefined.
    
    Change-Id: I0fd4a19626e5ae564a60b753315b5f6c4b8d1f2c
    Use atomic ops for thread suspend count
    
    There was a theoretical but unlikely race if two binder threads
    executed suspend() or restore() concurrently.  Also added comments.
    
    Change-Id: I0908acc810b83bdd66455b27ca3429de1662a2cd
    Add tid parameter to IAudioFlinger::openRecord
    
    Not yet implemented
    
    Change-Id: I35523fb15ad71727ecc9f4bb870f07e4b7397dc4
    Simplify AudioRecord::getInputFramesLost()
    
    This also fixes a benign race in reading mActive without a lock.
    
    Change-Id: I19e953d4f275e5c266ca1ca3fece7b6c02ad1707
    Remove dead code
    
    Change-Id: If22a6c4e572b0734eba0c5a7ce29a2c61c581e5d
    Fix check for invalid channel count
    
    Change-Id: Id9e3dce0e3d5971786212d3f70e17a17e32ce92b
    Record overflow cleanup
    
    Add comments and rename one method for clarity
    
    Change-Id: I04a9147e46e88a072256c0211b112d52202419e2
    Use audio_channel_mask_t more places
    
    Use it in AudioSystem::getOutput(), AudioSystem::getInput(),
    IAudioPolicyService::getOutput(), IAudioPolicyService::getInput(),
    and various other places in AudioFlinger.
    
    Not done: AudioTrack and OutputDescriptor.
    
    Change-Id: I70e83455820bd8f05dafd30c63d636c6a47cd172
    Whitespace and indentation
    
    Change-Id: I424052b4ff9218147a5cfc8e6dcd67fe8105d229
    Move constant initializations from onFirstRef() to constructor
    
    Change-Id: I57f55b0bd1edee105c58c3a055f95f1e4a2c9646
    AudioFlinger::getBuffer() always returns non-NULL
    
    Change-Id: I543d3db507597cacbfdad5d9ea71732137fe54fb
    Fix build
    
    Revert after system/core audio_devices_t is submitted
    
    Change-Id: I5a8ee1a7b711e834501e927f41c62efa6a6600b6
    Only write to mDevice once
    
    This fixes a bug where readers might see intermediate values.
    Also add comments about how mStandby and mDevice are used.
    
    Change-Id: Idc84e56c21381a45137a2ca5ff9c57d437201869
    Remove debug code HAVE_REQUEST_PRIORITY and SOAKER
    
    Change-Id: I73a2afe72d8acb53e57e6b4e6fb5133e22b7875a
    audioflinger: fix effect disconnect deadlock
    
    Fix possible deadlock when several EffectHandles on the same
    EffectModule are destroyed simultaneously:
     A wp on an EffectHandle should not be promoted to a local sp
    with ThreadBase mutex held as the EffectHandle destructor can be
    called when the sp gets out of scope which will call
    ThreadBase::disconnectEffect() and try to acquire the mutex.
    
    Use raw pointers instead of weak pointers for the list of handles
    on an EffectModule.
    
    Bug 6679606.
    
    Change-Id: Ice8b602fb03a7d363c44ce3dced8a53540d96270
    Use audio_channel_mask_t more consistently
    
    In IAudioFlinger::createTrack() and IAudioFlinger::openRecord(),
    declare input parameter to use correct type audio_channel_mask_t.
    
    In IAudioFlinger::getInputBufferSize(), input parameter is now channel mask
    instead of channel count.
    
    Remove unused IAudioFlinger::channelCount(audio_io_handle_t).
    
    In AudioRecord::getMinFrameCount() and AudioSystem::getInputBufferSize(),
    input parameter is channel mask instead of channel count.
    
    Change-Id: Ib2f1c29bea70f016b3cfce83942ba292190ac965
    Remove longStandbyExit
    
    It was never set (the assignment was within an "if" that was never true).
    
    Change-Id: I01cc68e9df6b190eece621b2aa9858b4361880ce
    Fix uninitialized field EffectModule::mPinned
    
    Also mark EffectModule::mId and EffectModule::mSessionId const, and
    document the initialization of other fields in EffectModule.
    
    Change-Id: Ic1ca008e75e9b5924743ffc35bef80057f3a0669
    Compare sp<> to 0 and raw pointers to NULL
    
    Change-Id: I50ff8a010d349d1d7e3dffa04a6331814c2128b0
    audioflinger: fix regression in attachAuxEffect().
    
    Commit 717e1286 introduced a regression in PlaybackThread::Track::attachAuxEffect()
    when called with an effect ID of 0 to detach the auxiliary effect.
    
    It is normal in this case that AudioFlinger::getEffectThread_l() returns 0.
    
    Bug 6768757.
    
    Change-Id: I7430bd1aad2f68da38f7c3e4794e7ad657bfc6be
    audioflinger: fix auxiliary effect attachment
    
    Auxiliary effects (Reverb) are global effects and as such follow
    the default rule which is to attach them to the output thread that
    handles music streams by default. This causes a problem when several
    threads are eligible to handle music streams as tracks can be attached
    to either thread based on criteria unknown when teh effect is created.
    
    The fix consists in moving the auxiliary effect if necessary when an
    AudioTrack is attached to it and this track is not on the same
    output thread.
    
    Bug 6608561.
    
    Change-Id: Ib32c3cabc731b2046aba728be1771982999c6069
    audioflinger: fix setStreamOutput()
    
    AudioFlinger::setStreamOutput() should also work for direct outputs.
    Also ignore the destination output specified to match the expected
    behavior which is to invalidate all tracks using the specified stream
    type so that they can be re created on the correct ouput thread.
    
    Do not send STREAM_CONFIG_CHANGED event wich is ignored by AudioSystem
    anyway since the stream to output cache has been removed.
    
    Change-Id: I13d9d47922923b630dd755717875424c16be4637
    DO NOT MERGE Remove log spam for fast track denied
    
    Bug: 6531054
    Change-Id: Iedf58e810a157aae88b5900da27c81054c437058
    Log track name on obtain/releaseBuffer warnings
    
    This should help diagnose problems by allowing us to correlate
    the logs with the dumpsys media.audio_flinger output.
    
    Change-Id: I8c7c592b4f87d13b0f29c66ce7a2f301a0f063c9
    Add audio watchdog thread
    
    Change-Id: I4ed62087bd6554179abb8258d2da606050e762c0
    Reduce underruns in screen off, esp. with EQ
    
    Add MonoPipe APIs to specify setpoint.
    Use screen state to configure pipe setpoint.
    Fix a long-standing bug where pipe sleep time was excessive,
      which interacted poorly with governor and low clock frequencies.
      Now it deducts the elapsed time since last write(),
      which was significant when there was EQ and low clock frequency.
    
    Bug: 6618373
    Change-Id: I6f3b0072c2244aeb033ef0795ad164491a164ff5
    Reduce underruns in screen off, esp. with EQ
    
    Add MonoPipe APIs to specify setpoint.
    Use screen state to configure pipe setpoint.
    Fix a long-standing bug where pipe sleep time was excessive,
      which interacted poorly with governor and low clock frequencies.
      Now it deducts the elapsed time since last write(),
      which was significant when there was EQ and low clock frequency.
    
    Bug: 6618373
    Change-Id: I6f3b0072c2244aeb033ef0795ad164491a164ff5
    audioflinger: fix duplicating thread standby
    
    The code that waits for a track presentation to be complete
    before disabling it caused a regression for duplicating threads.
    Because of the way output tracks activity is managed, the number
    of frames output by the duplicating thread would never
    reach the target set for a track to be considered presented.
    The track would not be removed from active list and the thread would
    not go to standby and keep its wakelock held.
    
    Bug 6606922.
    
    Change-Id: I4b46b420ac4cbf79a86b6791ae6589d407b01c92
    Take latency and current time into account for visualization
    
    Buffer more data, and return the data that is currently being
    output from the audio output, to ensure that visualizations are
    smooth and responsive even when the audio output has a large
    latency and/or large buffers.
    b/6522728
    
    Change-Id: I401637f01be7600b3c594a55c869036c13b206c0
    audioflinger: various fixes on direct output
    
    Various fixes in direct output playback thread implementation:
    - threadLoop_write() was broken for playback threads that do not
    use a pipe sink.
    - output buffer size calculation was hard coded for stereo.
    - removed software volume that was implemented for PCM stereo
    format only: the audio HAL has to implement volume if needed
    for direct outputs.
    
    Change-Id: If211b4489be9af395435707b8cf0388cce1347b2
    audioflinger: fix active sleep time calculation.
    
    When an audioTrack underruns, the audioflinger mixer thread
    sleeps for a certain time to give the app a chance to recover.
    This time is based on the reported audio HAL latency.
    Some audio HALs implementing deep buffering have a variable
    latency and this creates a problem if the sleep time is cached
    when the output stream is opened and not updated afterwards.
    
    This change derives the active sleep time from the mix buffer
    framecount instead of the latency. This is more conservative
    but works for variable latency.
    
    Bug 6588525.
    
    Change-Id: Ia892fc290fe06f836565c3ae15f7a2ce026c88c6
    State queue dump
    
    Bug: 6591648
    Change-Id: Iac75e5ea64e86640b3d890c46a636641b9733c6d
    Fast track dumpsys
    
    Bug: 6591648
    Change-Id: I696f51c682e7233ba690d97da26012084989b412
    Count underruns for normal tracks also
    
    Bug: 6591648
    Change-Id: Iff9cabe392bb2ce97062603adb9c9dc7aa4170d5
    Fix fast track leak if out of normal track names
    
    Bug: 6580402
    Change-Id: I3ac7f012062c35833147f47ba822eb4bf532a824
    audioflinger: fix effect problem during underrun
    
    When an audio track underruns, the input buffer of the
    corresponding effect chain (if any) must be cleared, otherwise
    audio from previous mixer run will be fed again to the effect process
    function.
    
    Bug 6551652.
    
    Change-Id: I5cd02196745f756c85af82d6937e9dc54369b37f
    audioflinger: change session check in createTrack.
    
    Do not refuse to create a track on an output thread if the same session
    is present on another thread. It is now possible that two tracks
    with the same session ID are on different threads if one can use deep
    buffering and the other can't.
    
    In this case, move effects attached to this session to the output
    thread ion which the new track is created.
    
    Bug 6530324.
    
    Change-Id: I9019b3ee382e374c89d2319033afcfa7f886e4c4
    audioflinger: change session check in createTrack.
    
    Do not refuse to create a track on an output thread if the same session
    is present on another thread. It is now possible that two tracks
    with the same session ID are on different threads if one can use deep
    buffering and the other can't.
    
    In this case, move effects attached to this session to the output
    thread ion which the new track is created.
    
    Bug 6530324.
    
    Change-Id: I9019b3ee382e374c89d2319033afcfa7f886e4c4
    Remove log spam for fast track denied
    
    Bug: 6531054
    Change-Id: Iedf58e810a157aae88b5900da27c81054c437058
    audioflinger: refine latency latency calculation.
    
    There is an audio pipe between the normal mixer output and the fast
    mixer to cope for scheduling delays and buffer size difference.
    This pipe depth was not taken into account in latency calculation.
    
    Adding the pipe contribution to the latency significantly improves A/V sync.
    
    Bug 6520569.
    
    Change-Id: I5584908e8aa8a02170eb38b22b4370eea800a235
    Keep a copy of most recent audio played
    
    Change-Id: I6b2f97881c39998a2fae9ab79d669af6c0a37e94
    systrace for audio
    
    Trace fast track buffer fill status for underruns etc.
    
    Move the definition of macro to Android.mk.
    
    No overhead if disabled.
    
    Change-Id: If0e83e21b61b059ca38f543f8a6ffb58e08c79ee
    Display pipe underrun counters in dumpsys
    
    The normal mixer writes it's submix to a pipe, which is read by the fast
    mixer.  Now dumpsys media.audio_flinger display the raw underrun counters
    when fast mixer tries to pull from the pipe but doesn't get enough frames.
    
    Change-Id: I72505f149f9e12802784da654a651d43734e1c79
    Increase normal mixer's pipe to fast mixer
    
    Change-Id: I330925c7d07b6adb30b773bda3657e4efef9ae9b
    Fix static track activity ref counting
    
    When a static AudioTrack underruns, it means that playback is over.
    As apps do not necessarily stop playback explicitly, AudioFlinger
    should call stopOutput() to decrease activity ref count in
    audio policy manager.
    
    Bug 6486311.
    
    Change-Id: I1ea722c443780329ded6310c958b24726e918d16
    Fix static track activity ref counting
    
    When a static AudioTrack underruns, it means that playback is over.
    As apps do not necessarily stop playback explicitly, AudioFlinger
    should call stopOutput() to decrease activity ref count in
    audio policy manager.
    
    Bug 6486311.
    
    Change-Id: I1ea722c443780329ded6310c958b24726e918d16
    Fix issues with synchronous record start.
    
    - Added a timeout in case the trigger event is never fired.
    - Extend AudioRecord obtainBuffer() timeout in case of
    synchronous start to avoid spurious warning.
    - Make sure that the event is triggered if the track is
    destroyed.
    - Reject event if the triggering track is in an incompatible state.
    
    Also fix a problem when restoring a static AudioTrack after
    a mediaserver crash.
    
    Bug 6449468.
    
    Change-Id: Ib36e11111fb88f73caa31dcb0622792737d57a4b
    Reduce video frame drop rate
    
    The video playback engine depends on having relatively precise audio
    progress updates for its A/V sync and frame drop calculations.  For small
    audio HAL buffer sizes, this was not a problem, but when the HAL buffer
    size was > 12 ms, the normal mix buffer size became > 24 ms and this
    then caused video problems.  The new formula tries to keep the normal
    mix buffer size within a closer tolerance of 20 ms to 24 ms.
    
    Also use consistent term: multiplier instead of multiple.
    
    Bug: 6479613
    Change-Id: I903bad74461908e8c8f0a61e99ab5e24d5c44433
    Improve underrun handling for fast tracks
    
    Maintain more accurate accounting of type of underrun.
    Automatically remove track from active list after a series of "empty" underruns.
    
    Change-Id: If042bf80e1790dcaaf195c99dc9c0ed9b55382c1
    Fix stopping process for fast tracks
    
    Previously, the state of a fast track "wiggled" back and forth at the end.
    
    Now it goes through these transitions:
      active -> stopping_1 -> stopping_2 -> stopped
    
    This CL is only for fast tracks, and does not change how
    normal tracks work.
    
    Change-Id: Icc414f2b48c46dda63cfa6373ca22d033dd21cd4
    AudioFlinger: fix global effects suspend logic
    
    Audio effects on the output mix should not be suspended when effects
    on the output stage (post processing) are enabled.
    
    Change-Id: I2e1c08fa9358ea3cbaec68856738d504b1be54e4
    Use audio tag for system tracing
    
    Disabled by default; uncomment ATRACE_TAG to enable
    
    Change-Id: I99af894022a859ee5644bd853cfd8a48e4735ff9
    dumpsys fCnt and flags
    
    Previously displayed TrackBase::mFrameCount but not control block frameCount.
    Now displays both.
    
    Also display the track flags in control block.
    
    Change-Id: Ie53781d4784633d78b6f928d69ebd494d8f110ec
    Disable fast track log spam
    
    except for "denied by client" and "denied by server"
    
    Change-Id: I133ab747933729cc1f386813ee06ece055bdb294
    Temporary fix for both normal tracks & fast tracks
    
    If there is at least one active fast track, it forces a mixer
    status of ready, which messes up the logic for normal track underruns.
    
    Change-Id: I9de2fcaef090e2c2f99682333af3d3dd618b0d6b
    Fix race condition for non-started fast tracks
    
    This required re-implementing how fast tracks are considered active.
    Now, they use the same logic as normal tracks, except underrun is ignored.
    
    Other changes:
     - add framesReady() to AudioBufferProvider interface
     - rebased
     - add track underrun counter state to fast mixer dump state
     - move dumpsys header to Track::appendDumpHeader()
       so it closer to where tracks are dumped
     - display track state in dumpsys as a character code
     - measure and display warmup time and cycles in dumpsys
     - copy in the presentation complete code
     - add ExtendedAudioBufferProvider for framesReady() which returns size_t
     - simplify underrun tracking
     - deferred reset track after stop()
     - add comments
    
    Change-Id: I7db8821bc565230ec76da1f9380fe3fb09735e5b
    AudioFlinger: fix stop detection for static tracks
    
    The end of playback and end of presentation detection was broken for
    static AudioTracks (tracks using shared memory buffers passed by client).
    
    The mixer should not wait for a minimal amount of frames to be available to mix
    a static track otherwise the last frames might never be consumed.
    
    A static track should be removed from active list in case of underrun even if not
    stopped().
    
    Issue 6411521.
    
    Change-Id: I66a2c1a77e98149e5049a223a6f04c3b8c5ad11a
    Fast mixer configuration
    
    Add compile-time option for when to use fast mixer.
    
    Double HAL frame count for fast tracks due to SRC, and make the normal
    frame count multiplier an even number for compatibility.  Sample rate
    conversion can result in underruns if the HAL frame count is used as is,
    due to jitter.
    
    Change-Id: Ia1f8da1b8ac247d9807acfce3c318161db000905
    AudioFlinger: fix tracks ready for mixing logic.
    
    Commit fec279f5 broke the logic allowing to wait for an application
    to provide frames for mixing in the case of several active tracks.
    
    This was causing audio gaps when playing music and superposing a
    sound Fx (keyboard clicks...).
    
    Issue 6185007.
    
    Change-Id: Id0fad150d0b615646d6b1387c0de8ca944d228f6
    AudioFlinger: fix tracks ready for mixing logic.
    
    Commit fec279f5 broke the logic allowing to wait for an application
    to provide frames for mixing in the case of several active tracks.
    
    This was causing audio gaps when playing music and superposing a
    sound Fx (keyboard clicks...).
    
    Issue 6185007.
    
    Change-Id: Id0fad150d0b615646d6b1387c0de8ca944d228f6
    Move frame count calculations for fast tracks
    
    For fast tracks: move the default and minimum frame count calculations
    from client to server.  If accepted, the default and minimum frame count
    is the fast mixer (HAL) frame count.  If denied, the default and minimum
    frame count is the same as it currently is for normal tracks.
    
    For normal tracks: there is no change yet, preserve legacy behavior for
    now but add a FIXME to change this later.
    
    Bug fix: the test for buffer alignment matches channelCount was wrong.
    
    Bug fix: check for 8-bit data in shared memory, which isn't supported.
    
    Optimizations:
     - in set(), only call AudioSystem::getOutputSamplingRate() when needed
     - in createTrack_l(), only call AudioSystem::getSamplingRate() and
       AudioSystem::getFrameCount() when needed
    
    Change-Id: I79d2fe507db1a8f7bb094c71da8a129951dbb82f
    Move frame count calculations for fast tracks
    
    For fast tracks: move the default and minimum frame count calculations
    from client to server.  If accepted, the default and minimum frame count
    is the fast mixer (HAL) frame count.  If denied, the default and minimum
    frame count is the same as it currently is for normal tracks.
    
    For normal tracks: there is no change yet, preserve legacy behavior for
    now but add a FIXME to change this later.
    
    Bug fix: the test for buffer alignment matches channelCount was wrong.
    
    Bug fix: check for 8-bit data in shared memory, which isn't supported.
    
    Optimizations:
     - in set(), only call AudioSystem::getOutputSamplingRate() when needed
     - in createTrack_l(), only call AudioSystem::getSamplingRate() and
       AudioSystem::getFrameCount() when needed
    
    Change-Id: I79d2fe507db1a8f7bb094c71da8a129951dbb82f
    Use scheduling policy service
    
    Change-Id: I3c09da1dc0de5039d0c15ce7fb2bc373fa398712
    AudioFlinger normal mixer uses FastMixer
    
    Change-Id: I3131bb22d2d057e9197a2ebfa6aa1cfaab9e5321
    Configure policy of mediaserver threads
    
    Change-Id: Ifd825590ba36996064a458f64453a94b84722cb0
    TimedAudioTrack: Optimize the queue trim operation.
    
    Hand merge from ics-aah
    
    > TimedAudioTrack: Optimize the queue trim operation.
    >
    > Don't perform the end PTS calculation for each buffer during trimming.
    > Instead, only calculate the ending PTS of a buffer if there is no next
    > buffer in the queue.  This optimization assumes that the buffers being
    > queued are in monotonic media time order (a fair assumption for now)
    > and that the timestamps in the audio are contiguous (not a requirement
    > for this API, but a reality of how it is being used right now).
    >
    > In the case where the audio is discontinuous on purpose, it is
    > that this optimization will cause the system hold one extra buffer
    > which it could have safely trimmed.  It should not be much of an issue
    > since in real life the audio is almost always contiguous, and as long
    > as the media clock is running and the mixer is mixing, the buffer will
    > be used up and discard as part of the normal flow anyway.
    >
    > Change-Id: I00061e85ee7d5651fcf80751646c7d7415894a14
    > Signed-off-by: John Grossman <johngro@google.com>
    
    Change-Id: I0054b58e1389fa005aa990cb5710caf4af7b706a
    Signed-off-by: John Grossman <johngro@google.com>
    TimedAudioTrack: Fix continuity threshold handling.
    
    Hand merge from ics-aah
    
    > TimedAudioTrack: Fix continuity threshold handling.
    >
    > Fix issues with continuity threshold handling; notably
    > + If the steady-state continuity threshold is exceeded, be sure to
    >   clear the on-time flag.  Failure to do this will result in the
    >   system picking a new mix point which simply satisfies the
    >   steady-state continuity threshold instead of the startup threshold.
    >   Since we are putting a discontinuity in presentation anyway, we
    >   really want to pick a perfect point, not just an OK point.
    > + Tighten the steady-state continuity threshold.  It was currently set
    >   to 100mSec which is enormous.  4mSec (the new setting) is much more
    >   appropriate.  On systems with a VCXO (like tungsten) this should
    >   never be wrong by more than a sample.  If TimedAudioTracks are ever
    >   to be used on VCXO-less systems, this threshold should probably be a
    >   a parameter configurable by applications on a track by track basis
    >   so they can make the tradeoff between allowed error and frequency of
    >   disruptive corrections.
    > + Reset the on-time flag if the mixer provides no PTS during a mix
    >   operation.  This makes for a convenient way for the HAL to reset
    >   timed tracks when it makes changes for delay compensation across
    >   multiple outputs.
    >
    > Change-Id: I2cb23de5a3d1f75618abc1c8ab903db883837aa8
    > Signed-off-by: John Grossman <johngro@google.com>
    
    Change-Id: Ibd28c9d290494b0b19eb01caf2d9bfdef606a9b4
    Signed-off-by: John Grossman <johngro@google.com>
    Fix multichannel downmix pause bug on video player
    
    Pausing a video player will cause the track audio mixer to be
     disabled, which causes the downmixer to be deleted. When reenabled,
     the track channel mask hasn't changed but the downmixer is there
     anymore.
    Fixed by:
    - instanciating a downmixer when the AudioMixer track
     gets initialized (in getTrackName(), now taking a channel mask
     as input), and deleted when in deleteTrackName().
    - when the channel changes on a track, check whether it
     needs a downmixer or not. Preparing a track for downmix
     automatically removes the old downmixer if there was one.
    
    Also: initialize the track downmixerBufferProvider field
     when AudioMixer is instanciated, so we can safely call
     delete on it in AudioMixer's destructor, in case
     deleteTrackName() wasn't called before the mixer was
     destroyed.
    
    Change-Id: I589b0781cda5b3c82f85b561c52b08546cac21f8
    rename audio policy output flags
    
    Change-Id: I27c46bd1d1b2b5f96b87af7d05b951fef18a1312
    Configure the resampler with the correct channel count when downmixing
    
    When a track needs to be downmixed and resampled, it gets downmixed
     first before being resampled. Therefore the resampler needs to
     be configured with the channel count of the output of the downmixer
     instead of that of the track.
    Removed frame size checks that don't apply anymore now that we support
     frame sizes that are not powers of 2 (e.g. 12 for 5.1 16bits), and
     changed test performed for every buffer during playback into an
     assert.
    
    Change-Id: Ia220f00ee382f4f7848b661c58555bdca664e194
    audioflinger: update to new audio HAL.
    
    Updated audio flinger to new function prototypes
    for open_output_stream() and open_input_stream().
    
    Check audio hw device version when loading a module and
    reject devices with a version different from current one.
    
    Change-Id: I9d4c81a1f59a15db78b3989417c2a411c638fe88
    Fix ALOG_ASSERT in AudioFlinger
    
    Fix broken ALOG_ASSERT in updateFramesPendingAfterTrim_l() introduced by
    commit 1c345196.
    
    Change-Id: Ie1b2653069283f23ff0367f2628828e37fb0749c
    Fix the build
    
    forgot to upload final fixup during merge.  sry about that
    
    Change-Id: I2ddd2c08d8efa83c0a8d1e378ae4c28686145154
    TimedAudio: Track of the number of pending frames.
    
    This is a manual merge from ics-aah
    
    > TimedAudio: Track of the number of pending frames.
    >
    > Keep track of the number of frames pending in the timed audio queue so
    > we can implement framesReady in O(1) time instead of O(N).  This
    > change partially addresses bug 6020970; the bug will be completely
    > addressed once this change has been up-integrated into master.
    >
    > Change-Id: I599eb15ea1f6d715b97b30e65214fb6fadd169df
    > Signed-off-by: John Grossman <johngro@google.com>
    
    Change-Id: I6cbbbc3afc8efd066fe94865326ede0c6b3db2bd
    Signed-off-by: John Grossman <johngro@google.com>
    TimedAudio: Fix a cause of audio popping.
    
    This is a manual merge from ics-aah
    
    > TimedAudio: Fix a cause of audio popping.
    >
    > Fix an issue with buffer lifecycle management which could cause audio
    > pops on timed outputs.  There were two issues at work here.
    >
    > 1) During trim operations for the queued timed audio data, buffers
    >    were being trimmed based on their starting PTS instead of when the
    >    chunk of audio data actually ended.  This means that if you have a
    >    very large chunk of audio data (larger than the mixer lead time),
    >    then a buffer at the head of the queue could be eligible to be
    >    trimmed before its data had been completely mixed into the output
    >    stream, even though the output stream was fully buffered and in no
    >    danger of underflow.
    > 2) The implementation of getNextBuffer and releaseBuffer for timed
    >    audio tracks was not keeping anything like a reference to the data
    >    that it handed out to the mixer.  The original architecture here
    >    seemed to be expecting a ring buffer design, but timed audio tracks
    >    use a packet based design.  Pieces of packets are handed out to the
    >    mixer which then frequently will hold onto that chunk of data
    >    across two mix operations, using the first part of the chunk to
    >    finish a mix buffer and then using the end of the chunk for the
    >    start of the next mix buffer.  If the buffer that the mixer is
    >    holding a piece of got trimmed before the start of the next mix
    >    operation, it would return to its heap and could be filled with who
    >    knows what by the time it actually got mixed.  On debug builds,
    >    they seem to get zero'ed out as they go back to the heap causing
    >    obvious pops in presentation.
    >
    > This change addresses both issues.  Trim operations are now based on
    > ending presentation time for a chunk of audio, not the start.  Also,
    > when the head of the queue is in flight to the mixer, it can no longer
    > be trimmed immediately, merely flagged for trim by the mixer when the
    > mixer finally does call releaseBuffer.
    >
    > Signed-off-by: John Grossman <johngro@google.com>
    > Change-Id: Ia1ba08cb9dea35a698723ab2d9bcbf804f1682fe
    
    Change-Id: I2c5e2f0375c410f0de075886aac56ff6317b144c
    Signed-off-by: John Grossman <johngro@google.com>
    audio pre processing: test code for dual mic
    
    Added functional test code to validate effect API for
    multi mic simplementations.
    
    Also fixed warning in AudioFlinger.
    
    Change-Id: I07be4d2e4d17791d3626c804ba3e9f87ff26d05a
    AudioMixer uses downmix effect for multichannel content
    
    In the AudioMixer structure associated with each track, add an object
      that acts as the buffer provider when the track has more than two
      channels of input in the mixer. This object, DownmixerBufferProvider,
      gets audio from the actual buffer provider of the track, and applies
      a downmix effect on it.
    The downmix effect is created and configured when the track gets
      created in AudioFlinger, which causes AudioMixer::getTrackName()
      to be called with the new track's channel mask. It is released
      when the track is disabled in the mixer.
    
    Change-Id: I05281ed5f61bef663a8af7ca7d5ceac3517c82db
    audio policy: load audio hw modules.
    
    Audio HW modules are now loaded upon request from audio policy manager
    according to the configuration in audio_policy.conf.
    Removed hard coded HW module loading by AudioFlinger at init time.
    Added methods to IAudioFlinger and AudioPolicyInterface
    to control the loading of audio HW modules.
    Added methods to open an output or input stream on a specific hw module.
    
    Change-Id: I361b294ece1a9b56b2fb39cc64259dbb73b804f4
    audio policy: add configuration file
    
    removed outputs to stream mapping cache in audio system: the output for a
    given stream type must always be queried from audio policy manager as the cache
    is not always updated fast enough by audioflinger callback.
    
    removed AudioFlinger::PlaybackThread::setStreamValid() not used anymore if
    stream to output mapping is not cached.
    
    Change-Id: Ieca720c0b292181f81247259c8a44359bc74c66b
    AudioFlinger track flags and server's fast policy
    
    Change-Id: I72358c8e6829d173b3e60ced8a8babc089869fac
    const methods and comments
    
    Change-Id: Ifd16750174fdb15b72507787502b587562ffc99e
    Make AudioTrack/AudioRecord handle more than 2^32 frames
    
    b/6160363
    Change-Id: I471815012c6a113ec2c4dd7676e8fa288a70bc76
    implemented synchronous audio capture
    
    Added the infrastructure to support the synchronization of playback and
    capture actions on specific events.
    The first requirement for this feature is to synchronize the audio capture
    start with the full rendering of a given audio content.
    The applications can further be extended to other use cases
    (synchronized playback start...) by adding new synchronization events and
    new synchronous control methods on player or recorders.
    
    Also added a method to query the audio session from a ToneGenerator.
    
    Change-Id: I51f1167290d9cafdf2fbcdf9e4785156973af44c
    Clean up Track constructor
    
    The 'thread' parameter can never be NULL.
    Use constructor initialization list when possible.
    Make more members const.
    Only put the relevant code under "if (mCblk != NULL)".
    Add comment about track name leak.
    
    Change-Id: Ib963390a69bed1999638cc982a759edd1d5f4712
    Whitespace
    
    Fix indentation, and add blank lines in key places for clarity
    
    Change-Id: I57a0a8142394f83203161aa9b8aa9276abf3ed7c
    Update comments
    
    Change-Id: I327663a020670d0a72ff57bd0b682e2ce0528650
    new doesn't fail on Android
    
    Change-Id: I5079a3bf31097dd0807b2d806d5f8d3cff2077ab
    IAudioFlinger::createTrack and openRecord flags
    
    createTrack and openRecord don't need the "old" flags parameter,
    which was either audio_policy_output_t or audio_in_acoustics_t
    shifted left by 16 bits.  But they do need "new" flags, which
    are defined by the application use case.  Initially, the only
    application use case flag is timed output, but others are planned.
    
    For output, the audio_policy_output_t flags are passed to
    AudioSystem::getOutput, which returns an audio_io_handle_t, and that
    handle is then passed to createTrack. So createTrack doesn't need the
    old flags parameter.
    
    For input, the audio_in_acoustics_t flags are passed to
    AudioSystem::getInput, which returns an audio_io_handle_t, and that
    handle is then passed to openRecord. So openRecord doesn't need the
    old flags parameter.
    
    Change-Id: I18a9870911846cca69d420c19fe6a9face2fe8c4
    audioflinger: fix issue with camcorder and A2DP
    
    Some audio HALs do not support well a device selection of 0 (no device)
    received on an input stream.
    
    This can happen because of a problem in the audioflinger code that handles
    the forwarding of the output device selection to the record thread for use by
    the pre processing modules that need it. If the output device is 0 (meaning
    no op, which happens when stopping playback over A2DP) audioflinger could not
    detect it was an output device selection and would forward it to the input
    stream (see AudioFlinger::setParameters() and RecordThread::checkForNewParameters_l().
    
    Issue 6179641.
    
    Change-Id: Idae534521866538e0d12ba259a2834f402a922e2
    AudioFlinger playback thread CPU measurement in Hz
    
    Log statistics on CPU usage in Hz in addition to wall clock time
    
    Use CPU statistics for all playback threads, not just MIXER
    (but they are disabled by default by a compile-time debug macro).
    
    ThreadCpuUsage library:
     - Move statistics out of the library and leave that up to the caller
     - Add API to determine a CPU's frequency
    
    Change-Id: Ia1011123146e641fcf210ef26e78ae2b4d3b64ad
    audioflinger: more info in dumpsys
    
    Added TID and io handle to AudioFlinger threads dump.
    
    Change-Id: Ib1a856f3bad55c73e4c395b5e59d57435f4b9a4c
    Break circular dependency on media player service
    
    Bug: 6165157
    Change-Id: I3c85bbcaf31f3cb9a009e273f7b6284015eb3bd8
    Whitespace and indentation
    
    Fix indentation to be multiple of 4.
    Make it easier to search:
      sp< not sp < to
      "switch (...)" instead of "switch(...)" (also "if" and "while")
    Remove redundant blank line at start or EOF.
    Remove whitespace at end of line.
    Remove extra blank lines where they don't add value.
    
    Use git diff -b or -w to verify.
    
    Change-Id: I966b7ba852faa5474be6907fb212f5e267c2874e
    Fix bug where mMixerStatus was set to IDLE
    
    Change-Id: I55df1738fb7ba17ba6caeea6a17557526eac17a7
    Clean up assertion checks
    
    Use ALOG_ASSERT instead of assert.
    Use compile-time asserts where appropriate.
    Fix typo in an ALOGV.
    
    Change-Id: I58f1c1ffc14319a022c88b5a88b8d0368660da8b
    Inline applyVolume() into threadLoop_mix()
    
    Also the declaration of applyVolume in PlaybackThread was dead.
    
    Change-Id: I4b1a9848d07d3d7f340baea05b17f667c78df868
    Merge dup code at thread entry and param change
    
    This CL is mostly just cleanup, but there are a couple of fixes marked
    "FIX" below.
    
    Merge the duplicate code that was at the beginning of threadLoop() and
    after a parameter change.  cacheParameters_l() is now called at entry to
    threadLoop() and after any parameter change.  It re-calculates all values
    that are derived from parameters, and caches them in instance variables.
    
    updateWaitTime_l():
     - FIX activeSleepTime depends on mWaitTimeMs, which was initially set
       to infinity.  updateWaitTime_l() was not called at entry to
       threadLoop(), so activeSleepTime was not set correctly before the
       first parameter change.
    
     - FIX reversed the order of calls after parameter change
       for the same reason so that updateWaitTime_l() is called before
       calculating values that are derived from wait time.
    
     - marked it private since now it's only called from DuplicatingThread
    
    Change-Id: If2607d2ed66c6893d910433e48208a93c41fb7e9
    Use audio_policy_output_flags_t consistently
    
    This affects:
     - IAudioFlinger::openOutput
     - AudioTrack::AudioTrack
     - AudioTrack::set
     - apps that call these
    
    Change-Id: I26fb281bac6cb87593d17697bc9cb37a835af205
    Replace hard-coded 3 by FCC_2 to simplify searches
    
    Change-Id: I92881d04e8378307f849fb343071a58d181a68b4
    Mixer status cleanup
    
    Use mPrevMixerStatus for DirectOutputThread also.
    Remove the MIXER_CONTINUE logic and use MIXER_IDLE instead.
    Rename the field mixerStatus to mMixerStatus.
    Rename local variable back to mixerStatus.
    
    Change-Id: I0a8145fc856c6c5ff8b784b6176ef3c4d8eb7408
    Cleanup DirectOutputThread::mActiveTrack
    
    Rename activeTrack to mActiveTrack.
    Release the reference earlier, at the end of threadLoop_mix().
    This allows the field to be made private and to
      move the declaration from PlaybackThread to DirectOutputThread.
    
    Change-Id: I02be7a254638f7d85e92aaf0002d20ca0092a5c3
    Don't ask policy manager about invalid stream type
    
    Change-Id: If50fbff9d34045d1398984da48da7e6428a74491
    Isolate references to outputTracks/mOutputTracks
    
    Move all references to DuplicatingThread::outputTracks and
    DuplicatingThread::mOutputTracks from the common threadLoop() into
    virtual methods.  This allows them to be moved from PlaybackThread to
    DuplicatingThread, and to be marked private.
    
    Also use vector assignment to copy mOutputTracks to outputTracks.
    
    Change-Id: Ieb1cf1ad36b8a65143e61e6c92a65fb43427e5e2
    Make applyVolume private to DirectOutputThread
    
    Change-Id: I7ca4a59505857cbd106b6f274c66e9580dead271
    Merge the calls to prepareTracks_l
    
    Change-Id: I1dd759581333e2908d980180d44db7bf5ed6591d
    IAudioFlingerClient::ioConfigChanged param2 const
    
    The 3rd parameter (param2) to AudioFlingerClient::ioConfigChanged
    is used as an input.  So changed it from void * to const void *.
    It is then cast to const OutputDescriptor *
    or const audio_stream_type_t * depending on the event.
    
    Change-Id: Ieec0d284f139b74b3389b5ef69c7935a8e5650ee
    Rename updateWaitTime since a lock is held
    
    Change-Id: I9bb978cbd0debf5b21676467060f72eebafea3e6
    Fix indentation for re-organized code
    
    Change-Id: I63471cebdbd095b7ad4e481611b785f9b02c7941
    Rename fields of AudioSessionRef
    
    Change-Id: I9f2a66094135c4ac6bec2d3e9db3ac5fbf988ede
    threadLoop merge
    
    Change-Id: Id8e6330ac6be76f9c2debba94f856de87e2d98f7
    Prepare for threadLoop merge - active tracks
    
    Continued work on making the copies of threadLoop more similar:
     - Remove alias for mActiveTracks in MixerThread and DuplicatingThread.
     - Pull in declaration of activeTrack in DirectOutputThread.
     - Remove redundant parameter of prepareTracks_l().
     - Comment prepareTracks_l().
    
    Change-Id: If1087c1902b454acec01ddfdd9f055f0ca7abf04
    Pull in declaration of effectChains to inner block
    
    Change-Id: I09eacf72124942abd604132b9f4e774b1236fcf3
    mSuspend comments and usage
    
    Emphasize that playbackthread::mSuspend is a counter, not a bool
    
    Change-Id: I7188e56814e1c54dbc65e560f3627f138257d644
    Mark similar and different sections in threadLoop
    
    Most of these comments will be removed after the threadLoop merge.
    
    Note: the trivial change in assignments to mixBufferSize, and the
    comments about "tracks to remove" is to make them all identical.
    
    Change-Id: I3b1a33a7f2cd12ad557a1986bb71f6171161974a
    Shorten thread names
    
    prctl(PR_SET_NAME) limits to 15 characters.  Before we had names like
    "Binder Thread #" and the counter was cut off :-( Also remove redundant
    "thread" at end of name; it's always a thread.
    
    Change-Id: I1f99c2730ba0787ed9b59c15914356cddf698e2f
    Simplify removeNotificationClient
    
    No need to check for presence of item before removing
    (but we do lose the log of the previous value).
    
    Change-Id: I2838430824de5f257f2ee15db0c22b1920c67d08
    AudioFlinger const methods and parameters
    
    Change-Id: I93ec28024005ed23aa141518092a012a4a7c44c5
    Make threadLoop() logs identical
    
    Change the wording of the logs in the various copies of threadLoop()
    to be identical.  This will make it easier to merge them soon.
    
    Change-Id: Idfa181e437738712c784dc7f746cac79f83d2931
    Move declaration of mixerStatus to inner block
    
    mixerStatus was being declared (and initialized) too early,
    which also resulted in a duplicate initialization.  Moved
    the declaration into the block where it is actually used.
    
    Change-Id: Ifdcfefe362a5efe3493dd616cdb44645c6f9aed5
    Pull out duplicated copies of silent mode check
    
    Also fix the error handling for the property_get.
    
    This is part of preparation for the threadLoop() merge.
    
    Change-Id: I6405190ea18146d1271575e1dfe9f279e8f36b17
    Unlock effect chains in the middle of two if's
    
    As part of the upcoming threadLoop() merge, this CL makes it clearer
    what are the similar and different parts before and after unlocking
    effect chains.
    
    In each threadLoop(), the old code was:
    
        if (sleepTime == 0) {
            // A
            unlockEffectChains(effectChains);
            // B
        } else {
            unlockEffectChains(effectChains);
            // C
        }
    
    The new code is:
    
        if (sleepTime == 0) {
            // A
        }
        unlockEffectChains(effectChains);
        if (sleepTime == 0) {
            // B
        } else {
            // C
        }
    
    Also this is slightly slower by one "if", it has the advantage of making
    it much more obvious about what is done before and after the unlock,
    and also to see the similarities and differences among the various
    copies of threadLoop().
    
    Change-Id: I7bf4369d2dcb072573ec43b7e52c637f0097dc00
    Fix theoretical race condition in addOutputTrack
    
    This is not a real race, because addOutputTrack was only called in two
    places, and in both places there could be no other threads referencing
    the DuplicatingThread instance.
    
    Those two places are:
     - the DuplicatingThread constructor, which is of course safe
     - openDuplicateOutput - this is safe because it's called immediately
       after the new DuplicatingThread, and there are no sp<> either in the
       constructor or here which could cause onFirstRef() to do Thread::run().
    
    But for safety in case addOutputTrack is ever called somewhere else,
    or there are sp<> created earlier, it is safer to take the thread lock.
    
    Change-Id: I1502d014fa37ec5dbf4bf40d3e2884af311cd5e9
    Pull CPU statistics code out of threadLoop()
    
    This is to prepare for the threadLoop() merge
    
    Change-Id: I118c7d5c6b011b5d5b95ec7d63fb03feb166a9cf
    AudioBufferProvider comments and cleanup
    
    Add comments about which methods implement the AudioBufferProvider interface.
    
    Simplified the definition of kInvalidPts.  <stdint.h> is very hard to work
    with, there seems to be no way to use it reliably to get INT64_MAX without
    having a separate source file, which is ugly because it means kInvalidPts
    is not a compile-time constant.  So I just deleted AudioBufferProvider.cpp
    and used a hard-coded constant instead.
    
    Added a default constructor for Buffer so that the fields aren't random
    (especially .raw which is used to determine if the buffer is valid).
    
    Make the pts for getNextBuffer default to kInvalidPTS so code that
    doesn't need a pts doesn't have to specify a value.
    
    Rename the parameter to AudioMixer::setBufferProvider to make it clearer.
    
    Change-Id: I87e7290884d4ed975b019f62d1ab6ae2bc5065a5
    Fix tracking of hardware state for dump
    
    At end of AudioFlinger::onFirstRef(), the hardware status was being left
    in wrong state.  It should be AUDIO_HW_IDLE but was AUDIO_HW_INIT.
    
    mHardwareStatus was being set to AUDIO_HW_OUTPUT_OPEN too early, and so
    a return would leave it in the wrong state until next hardware operation.
    
    Take the hardware lock for dev->get_parameters, and update mHardwareStatus
    before and after.
    
    Keep hardware lock only for the duration of the dev->set_parameters.
    
    Rename two constants in enum hardware_call_state to have the prefix
    AUDIO_HW so they follow the naming conventions.
    
    Add comments.
    
    Change-Id: I6c7450b11f9b13adaeef9cec874333e478a58fc0
    Remove TrackBase::mFlags
    
    The bit-field TrackBase::mFlags was supposed to have track-specific
    flags in the upper 16 bits, and system flags in the lower 16 bits.
    
    The upper 16 bits of mFlags were initialized in the TrackBase
    constructor from the flags parameter of IAudioFlinger::createTrack()
    and IAudioFlinger::openRecord(), and the lower 16 bits were cleared.
    
    However, the upper 16 bits of mFlags were never acccessed again.
    So really there are no track-specific flags.  I left the flags
    in the parameter list of createTrack() and openRecord() but made a
    note that these should be removed eventually as they are dead.
    
    This leaves only the one system flag "step server failed".  I replaced
    the bit-field mFlags by bool mStepServerFailed, which is simpler and
    slightly faster.
    
    Change-Id: I6650f5487be72791b4a67d73adcd10ffa04e2aa5
    Avoid wp<>::unsafe_get() with a few exceptions
    
    Avoid using wp<>::unsafe_get() except in a log, and other specific cases
    when it's known to be safe.
    
    Use more specific subclass types for parameters to avoid down-casts.
    
    When a constructor or method parameter is "this" of an object that is
    currently being constructed, it's better to use a raw pointer rather
    than either sp<> or wp<>.
    
    Using the raw pointer is safe, provided either:
     - it is "this" of an object being constructed (which has sp<> refcount of 0),
     - or the caller already holds an sp<>
    
    The raw pointer is simpler and faster, and it avoids the problem of the
    sp<> reference count being incremented and then decremented to zero on
    scope exit, which would cause the object's destructor to run while the
    object is still being constructed.
    
    Also removed some dead code per a review comment.
    
    Change-Id: I7375f64da3aec11b928c33cb01faff186252ef5e
    Fix build warning
    
    warning: pointer of type 'void *' used in arithmetic
    warning: enumeral and non-enumeral type in conditional expression
    
    Change-Id: I7b8d626a636145ef648e3b5d0e77068216dd012e
    Remove bit fields to improve performance
    
    uint16_t enabled is (mostly) changed to bool in a separate CL
    
    Change-Id: Ied9f8c034b2479cee9a8778cee7b8ff92ae75b7b
    Simplify code
    
    Use DefaultKeyedVector::valueFor to avoid extra test
    Make local variables as local as possible
    No double parentheses
    No typedef for single use
    No parentheses around indirect function call
    No AudioFlinger:: prefix when not needed
    Remove unnecessary casts
    Remove block with only one line
    
    Saves 128 bytes
    
    Change-Id: I3a87430eeb01b81e7b81a1c38f6fdd3274ec48f3
    Put a bandaid on a segfault in timed audio track handling.
    
    Add a bandaid to prevent a segfault which can occur while handling
    timed audio buffers.  There is a deeper problem which should
    eventually be addressed, but for now this fix should prevent any
    crashing.
    
    The deeper problem is as follows.
    
    When the AudioFlinger mixer gets data to mix from an AudioTrack, it
    ends up getting a structure filled out which points into an IMemory
    region owned by the AudioTrack.  Unfortunately, this structure is not
    holding a refcount on the IMemory which it points into.  If the
    IMemory refcount hits 0 and the chunk of RAM is retuned to the binder
    heap it came from, there can still be a Buffer object being held by
    the AudioFlinger mixer which points into the region of memory which
    was retuned to the binfer heap.  If AF reads from this buffer, it
    could read corrupt data (if the region of memory gets handed back out
    to a writer), or it could segfault (if the heap has been freed and the
    pages unmapped).  Similar problems could happen if AF attempts to
    write to the buffer, heap corruption in one case, segfaulting in the
    other.
    
    In the past, this has not been an issue for AF, because tracks
    allocate a single IMemory (which serves as a ring buffer) and the
    IMemory lives for as long as the track lives.  As an artifact of the
    way the code came out, the mixer cannot be holding a Buffer structure
    pointing into the IMemory which used to be owned by a track if the
    track no longer exists.  Tracks cannot come into or out of existence
    during a mix operation, which is the only thing which makes this safe.
    
    TimedTracks work differently, however.  Timed tracks each allocate a
    small binder heap, and then hand out IMemory instances  broken out of
    this heap.  The heap lives as long as the track, so the worst which
    could happen here is that a TimedTrack's IMemory gets returned to the
    heap while there is still a buffer structure in flight pointing into
    the memory region, then the region gets handed out again and
    overwritten by new data causing the mixer to mix the wrong audio.  The
    timing to cause this to happen is very difficult to encounter, and you
    to generate the timing conditions required, you need to be in a pretty
    bad failure state where audio is already breaking up and skipping, so
    its unlikely that anyone would notice (which is why I'm band-aiding
    the segfault and letting the deeper issue slide for now).
    
    In general, however, it might be a good idea to revisit this buffering
    design.  On principal, if someone is going to hold pointers into a
    refcounted object, they should be holding a ref on the object at the
    same time.  Failure to do this will usually lead to a situation where
    there are corruption or segfault issues, or to a system where the
    refcounted object's lifetime must be implicitly managed very carefully
    in ways which are usually non-obvious and are easy to break by new
    engineers on a project.
    
    Change-Id: Ib391075395ed0ef46a03c37aa38a82d09e88abeb
    Fix a segfault in AudioFlinger.
    
    Check the string returned by a HAL's implementation of get_parameters
    for NULL before attempting to make use of it.  That way, we won't
    bring down the mediaserver because of a poorly written HAL.
    
    Change-Id: Ic99d7b004520d7d6347842a681c0595e889b68ea
    Signed-off-by: John Grossman <johngro@google.com>
    Upintegrate Audio Flinger changes from ICS_AAH
    
    Bring in changes to audio flinger made to support timed audio tracks
    and HW master volume control.
    
    Change-Id: Ide52d48809bdbed13acf35fd59b24637e35064ae
    Signed-off-by: John Grossman <johngro@google.com>
    Update comments
    
    We no longer put the filename at start of file.
    
    Change-Id: Ic435b159a23105681e3d4a6cb1ac097bc853302e
    Use size_t and ssize_t with Vector
    
    Use size_t with size() and ssize_t with indexOfKey().  Exception:
    use ssize_t for backwards loops, and indices that are overloaded as a
    marker or error code.
    
    Change-Id: Ibf2a360af4539b72b09c818dda22ea2a0de92431
    AudioRecord and AudioTrack client tid
    
    Inform AudioFlinger of the tid of the callback thread.
    
    Change-Id: I670df92dd06749b057238b48ed1094b13aab720b
    Factor out and speed up permission-checking code
    
    Use the caching permission check for dump to save IPC.
    
    Cache getpid() to save kernel call for other permission checks.
    
    The C runtime library getpid() can't cache due to a fork
    race condition, but we know that mediaserver doesn't fork.
    
    Don't construct String16 on the stack.
    
    Change-Id: I6be6161dae5155d39ba6ed6228e7683e67be34ed
    Put a bandaid on a segfault in timed audio track handling.
    
    Add a bandaid to prevent a segfault which can occur while handling
    timed audio buffers.  There is a deeper problem which should
    eventually be addressed, but for now this fix should prevent any
    crashing.
    
    The deeper problem is as follows.
    
    When the AudioFlinger mixer gets data to mix from an AudioTrack, it
    ends up getting a structure filled out which points into an IMemory
    region owned by the AudioTrack.  Unfortunately, this structure is not
    holding a refcount on the IMemory which it points into.  If the
    IMemory refcount hits 0 and the chunk of RAM is retuned to the binder
    heap it came from, there can still be a Buffer object being held by
    the AudioFlinger mixer which points into the region of memory which
    was retuned to the binfer heap.  If AF reads from this buffer, it
    could read corrupt data (if the region of memory gets handed back out
    to a writer), or it could segfault (if the heap has been freed and the
    pages unmapped).  Similar problems could happen if AF attempts to
    write to the buffer, heap corruption in one case, segfaulting in the
    other.
    
    In the past, this has not been an issue for AF, because tracks
    allocate a single IMemory (which serves as a ring buffer) and the
    IMemory lives for as long as the track lives.  As an artifact of the
    way the code came out, the mixer cannot be holding a Buffer structure
    pointing into the IMemory which used to be owned by a track if the
    track no longer exists.  Tracks cannot come into or out of existence
    during a mix operation, which is the only thing which makes this safe.
    
    TimedTracks work differently, however.  Timed tracks each allocate a
    small binder heap, and then hand out IMemory instances  broken out of
    this heap.  The heap lives as long as the track, so the worst which
    could happen here is that a TimedTrack's IMemory gets returned to the
    heap while there is still a buffer structure in flight pointing into
    the memory region, then the region gets handed out again and
    overwritten by new data causing the mixer to mix the wrong audio.  The
    timing to cause this to happen is very difficult to encounter, and you
    to generate the timing conditions required, you need to be in a pretty
    bad failure state where audio is already breaking up and skipping, so
    its unlikely that anyone would notice (which is why I'm band-aiding
    the segfault and letting the deeper issue slide for now).
    
    In general, however, it might be a good idea to revisit this buffering
    design.  On principal, if someone is going to hold pointers into a
    refcounted object, they should be holding a ref on the object at the
    same time.  Failure to do this will usually lead to a situation where
    there are corruption or segfault issues, or to a system where the
    refcounted object's lifetime must be implicitly managed very carefully
    in ways which are usually non-obvious and are easy to break by new
    engineers on a project.
    
    Change-Id: Ib391075395ed0ef46a03c37aa38a82d09e88abeb
    mAudioHwDevs and related cleanup
    
    Inline AudioFlinger::initCheck and remove unnecessary lock.
    
    Remove redundant check of mAudioHwDevs.size().
    
    No need to lock mHardwareLock for each device separately
    during initialization.
    
    Use size_t not int to loop through Vector, since size() returns size_t.
    
    Add missing hardware lock for get_mic_mute() and get_input_buffer_size().
    
    Add comments.
    
    Change-Id: Iafae78ef78bbf65f703d99fcc27c2f4ff221aedc
    Simplify ThreadBase::exit() aka requestExitAndWait
    
    We can remove mExiting and use Thread::exitPending() instead.
    
    The local sp<> on "this" in exit() is not needed, since the caller must
    also hold an sp<> in order to be calling us. (Unless it was using a raw
    pointer, but that would be dangerous for other reasons.)
    
    Add comment explaining the mLock in exit().
    
    Change-Id: I319e5107533a1a7cdbd13c292685f3e2be60f6c4
    Camel case readability & private disconnect(bool)
    
    Change-Id: If66516ed2703e048c5e6ccc6cd431446a024f4a1
    Use mul from audioutils
    
    I verified that the disassembled output is identical.
    
    Change-Id: I34a76f0842ebc4aef2c923e079e38d0bc1f98b5c
    Fix typos in ALOG for pid vs tid
    
    Change-Id: I6dc70f137d0ff8a86427ab8882a81886e1de0782
    Fix a segfault in AudioFlinger.
    
    Check the string returned by a HAL's implementation of get_parameters
    for NULL before attempting to make use of it.  That way, we won't
    bring down the mediaserver because of a poorly written HAL.
    
    Change-Id: I45f0fd3de003151f98acf32c36c42f58d053f3a0
    No newline or space at end of ALOG format string
    
    Change-Id: I0bef580cbc818cb7c87aea23919d26f1446cec32
    Fix races related to volume and mute
    
    Fix race conditions when setting master volume, master mute, stream
    volume, stream mute for a playback thread, and when reading stream
    volume of a playback thread.  Lock order is AudioFlinger, then thread.
    
    Rename streamVolumeInternal to streamVolume_l, comment, and use it to
    implement streamVolume().
    
    Code size reduction:
     - Remove dead code: AudioFlinger::PlaybackThread::masterVolume, masterMute, streamMute.
     - Change return type of non-binder methods that always succeed from status_t to void.
     - Remove virtual from volume and mute methods that don't need it.
    
    This change saves 228 bytes but decreases performance of binder operations
    due to the added locks.
    
    Change-Id: Iac75abc1f54784873a667d1981b2e08f8f31e5c9
    Rename type() to streamType()
    
    This avoids possible confusion with thread's type().
    Also remove redundant cast "(audio_stream_type_t)".
    
    Change-Id: I320b9177b6c267a102d215f002228bcf988c437a
    Combine duplicate code & document wp<> in mClients
    
    Change-Id: Iea8cfe8e57563337fb2484a1246ef79d6ad3db18
    Use audio_io_handle_t consistently instead of int
    
    Other:
     - add a comment to nextUniqueId
     - made ThreadBase::mId const, since it is only assigned in constructor.
    
    Change-Id: I4e8b7bec4e45badcde6274d574b8a9aabd046837
    Simplify destructors
    
    Remove explicit clear() when the order doesn't matter.
    
    Change-Id: I5931bc7ef5f681c7ce329aa9ec0a6e46d34a56c5
    Effect UUID inputs passed by pointer are const
    
    Change-Id: I1f5c338bcb7368e3dd8cd5f804b2e6d9fbe087f8
    Explicitly manage common clock client lifetimes.
    
    Change the CCHelper class to be an instanced instead of a static
    pattern.  The CCHelper instances all share an interface to the common
    clock service and register/unregister a callback handler in response
    to there being CCHelper instance in the system or not.  This brings
    usage of the CCHelper into like with the new auto-disable
    functionality of the common time service.  For any given process,
    whenever there are CCHelper instances active, the process will
    maintain a callback target to the common clock service and will be
    considered to be an active client.
    
    Also change all of the users of the CCHelper interface to manage the
    lifecycle of their new CCHelper instances.
    
    Change-Id: I7c28c5d70d9b07ba7407b4ac706e7e7d7253001b
    De-AAH-ify the common time service.
    
    Bulk name change to remove references to Android@Home from the common time
    service in preparation for cleanup and up-integration into the master
    branch.  Basically, aah_timesrv is now common_time.
    
    Change-Id: I3d3db212f96e8ba171aa36b9c58e27e4a336cb0a
    Don't double destruct audio_track_cblk_t
    
    Fortunately audio_track_cblk_t doesn't have a destructor, but for clarity
    remove the double destruction.
    
    Also add warning not to add any virtuals to audio_track_cblk_t.
    
    Change-Id: I70ebe1a70460c7002145b2cdf10f9f137396e6f3
    Use pid_t not int
    
    Change-Id: Iad1c2fd4152e94080ad8c65c13ddf4519fc2ed27
    Remove dead code
    
    mFormat is unused in resampler
    mClientTid is unused
    local variable pid is unused in dump
    
    Change-Id: Ib156e38029366620bfeff2a13e73471867155a5b
    Declare more IAudioFlinger methods const
    
    This is just documentation, as C++ method const-ness doesn't mean anything
    for a binder API.  Instead, here const means "no side effects".
    
    Change-Id: Iaa9cd2fe477db10ae9a40cac4f79f0faa9b4e5e6
    AudioFlinger methods const and inline
    
    This saves 1063 bytes and probably improves performance.
    
    Change-Id: I11cf0dfd925fbaec75e3d1b806852a538eae5518
    Use 0 not NULL for sp<> and wp<>
    
    Change-Id: Id1f0c89acefaceed6cb9ca7c165fce895e46d85b
    Use NULL not 0 for raw pointers
    
    Use if (p != NULL) instead of if (ptr)
    
    Change-Id: Iaec3413a59ccbf233c98fcd918cc7d70ac5da9fa
    Constructor initialization and const fields
    
    In constructors, initialize member fields in the initialization list
    rather than constructor body where possible.  This allows more fields
    to be const, provided they are never modified.
    
    Also initialize POD fields in constructor, unless it's obvious they
    don't need to be initialized.  In that case, put a comment instead.
    
    Remove explicit clear() in destructors on fields that are now const.
    
    Give AudioSessionRef a default constructor, so it's immutable fields can
    be marked const.
    
    Add comment about ~TrackBase() trick.
    
    Initialize fields in declaration order to make it easier to confirm that
    all fields are set.
    
    Move initialization of mHardwareStatus from onFirstRef() to constructor.
    
    Use NULL not 0 to initialize raw pointers in initialization list.
    
    Rename field mClient to mAudioFlingerClient, and getter from client()
    to audioFlingerClient().
    
    Change-Id: Ib36cf6ed32f3cd19003f40a5d84046eb4c122052
    For performance, return large objects by reference
    
    Change-Id: Ibf737018ef1d3c7d717584615dcb2d4ecdb50c99
    Improve performance for sp<> on stack
    
    Combine default constructor for sp<> immediately followed by assignment,
    as the reference-counting is relatively slow.  Also return sp<> directly
    rather than via local variable, for the same reason.
    
    Change-Id: If55931f1e407994f6591ddde41b53db72fb4fc40
    Fix const sp<>& in parameter list and return value
    
    EffectModule::addHandle and Client::heap() were declared incorrectly.
    
    As a parameter, an sp<> should be & for efficiency, and for input
    parameters it should also be const to protect the caller's value.
    
    But as a return value, an sp<> should have neither const or &.  The "e"
    in "return e;" might be located on the stack, and if there is "&" then
    the caller would see the address of a variable which no longer exists.
    Also, an & would make it hard to do "return 0;".
    A "const" without & is meaningless in the return type.
    (In this particular case, the "e" is a member field, so it was safe.)
    
    Change-Id: I3df5f294214eb15a9d4d596c6d5ef29de97b5c27
    Unconditional delete
    
    Don't check that pointer is non-NULL before delete.
    
    Don't leave deleted member fields non-NULL, except in a destructor,
    since it could be misleading in a dump or debugger. (mRsmpOutBuffer)
    
    Change-Id: Ic0492a6b752f74a67f4c96dfb89ca2de4e69eecf
    No need to check a wp<> for 0 before promote()
    
    Also remove unnecessary wp<> local variable.
    
    Change-Id: I620e67b5d559d28616f8e00609a525cfe19c5ddc
    Use audio_in_acoustics_t consistently
    
    Change-Id: I0a9dd668fb2e57b1c3ece3190588194974b99062
    AudioStreamIn and AudioStreamOut
    
    These are immutable, so make the fields const.
    getOutput() and getInput() methods are now const.
    
    Change-Id: I128246ebd56ea50b3e542be43f2aa1bcb55f1373
    Cleanup thread types
    
    Use type_t instead of int for thread types.
    Initialize ThreadBase::mType in constructor and make it const.
    
    Change-Id: I43d141388b9639e4783c30b97dbda5688bf7555f
    Declare methods in binder opcode order
    
    This makes it easier to compare interface and implementation.
    
    Change-Id: Ie060e43dec348902abcf40f5a610cec639d6d0d3
    Use enum mixer_state consistently
    
    Change-Id: I5b71ed20f939dfc4b98143334b7aa064d282f584
    Use enum track_state consistently
    
    Change-Id: Ie5ebb7befa092e1de1e4df9c6e2d51e6bcfd176a
    AudioFlinger: refine mixer sleep time logic
    
    When an AudioTrack is in underrun state, the AudioFlinger mixer will
    sleep for a short period of time to give the app a chance to fill the
    AudioTrack buffer. If the AudioTrack is still not ready during next mixing round,
    the mixer will proceed with other tracks.
    
    If an application keeps a steady underrun condition, the AudioFlinger mixer will
    alternate between ready and not ready states. In the longer term this will cause the
    audio HAL to underrun.
    There is a mechanism to reduce the sleep period if the mixer is not ready several times in a
    row but this mechanism is defeated by the alternating ready/not ready conditions.
    
    The fix consists in only increasing sleep time if the mixer is ready for at least two
    consecutive times.
    
    Issue 5904527.
    
    Change-Id: Id0139bca9be8c4e425ec6d428515c4d8f718e8c9
    DO NOT MERGE Revert "Revert "AudioFlinger: mix track only when really ready (2)""
    
    This reverts commit b918035d34422a2041b6ec8c09c566bb93345b40.
    
    Change-Id: I093bcfa56ad54a080b930208b6b79169d33581fb
    DO NOT MERGE Revert "AudioFlinger: mix track only when really ready (2)"
    
    This reverts commit 71c4496a9757438afd30b4404824f296f6158a49.
    
    Change-Id: Iff10c49ea728bb10023ddeb50a3b708db770fff2
    DO NOT MERGE Revert "AudioFlinger: mix track only when really ready (2)"
    
    This reverts commit 71c4496a9757438afd30b4404824f296f6158a49.
    
    Change-Id: Iff10c49ea728bb10023ddeb50a3b708db770fff2
    Remove AudioFlinger dependencies on client
    
    Change-Id: Ibb591e41a3ca5d7015e2b66b98b8fef5f415fb37
    Make AudioTrack control block volume field private
    
    This is part of the process of abstracting the control block
    to make it easier to maintain.
    
    Change-Id: Idb8f461e68dab3bcf268159cc0781651c6fb7094
    Use audio_format_t consistently, continued
    
    Was int or uint32_t.
    
    When AudioFlinger::format can't determine the correct format,
    return INVALID rather than DEFAULT.
    
    Init mFormat to INVALID rather than DEFAULT in the constructor.
    Subclass constructors will set mFormat to the correct value.
    
    Change-Id: I9b62640aa107d24d2d27925f5563d0d7407d1b73
    Remove redundant get()
    
    get() is almost always unnecessary, except in a LOG.
    Also no need to check for != 0 before calling get().
    
    Change-Id: Ib06e7a503f86cf102f09acc1ffb2ad085025516d
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)
    
    Change-Id: I26f76452ac49e2890b14d133c065493d8df0fb4a
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    For booleans, use ! instead of == false
    
    Change-Id: Ibc115936d2d0b0b7744ebe9b52839ea5b42c4edd
    AudioFlinger: mix track only when really ready (2)
    
    This problem due to the way audio buffers are mixed when
    low power mode is active was addressed by commits 19ddf0eb
    and 8a04fe03 but only partially. As a matter of fact, when more
    than one audio track is playing, the problem is still present.
    This is most noticeable when playing music with screen off
    and a notification or navigation instruction is played: in this case,
    the music or notification is likely to skip.
    
    The fix consists in declaring the mixer ready if all active tracks
    are ready. Previous behavior was to declare ready if at least one track was
    ready. To avoid that one application failing to fill the track buffer blocks other
    tracks indefinitely, this condition is respected only if the mixer was ready
    in the previous round.
    
    Issue 5799167.
    
    Change-Id: Iabd4ca08d3d45f563d9824c8a03c2c68a43ae179
    Track volume cleanup
    
    Always read and write track volumes atomically. In most places this was
    already being done, but there were a couple places where the left and
    right channels were read independently.
    
    Changed constant MAX_GAIN_INT to be a uint32_t instead of a float.
    It is always used as a uint32_t in comparisons and assignments.
    Use MAX_GAIN_INT in more places.
    
    Now that volume is always accessed atomically, removed the union
    and alias for uint16_t volume[2], and kept only volumeLR.
    
    Removed volatile as it's meaningless.
    
    In AudioFlinger, clamp the track volumes read from shared memory
    before applying master and stream volume.
    
    Change-Id: If65e2b27e5bc3db5bf75540479843041b58433f0
    Remove dead setVolume() and mVolume[2]
    
    Change-Id: I94b835434093e920432614eb5007101e87758f32
    Check stream type in AudioFlinger::createTrack
    
    A bad parameter to AudioFlinger::createTrack could cause mediaserver to crash.
    
    Other AudioFlinger stream type cleanup:
     - Simplify range check for audio_stream_type_t
     - Add comment about mStreamTypes array initialization.
    
    Change-Id: Ia33aa1cce0fdd694b08d9288816ffc097a9543d0
    Fix locking for mMasterVolume and mMute
    
    mMasterVolume and mMute are both protected by mutex in AudioFlinger class, but
    there were two places where they were accessed without a mutex.
    
    Also make AudioFlinger::mMasterMute private not protected.
    
    Change-Id: Ia3897daeb5c50313df5bcc071824357526237f3e
    AudioTrack and AudioFlinger send level cleanup
    
    Add an API to control block for getting/setting send level.
    This allow us to make the mSendLevel field private.
    
    Document the lack of barriers.
    
    Use 0.0f to initialize floating-point values (for doc only).
    
    Change-Id: I59f83b00adeb89eeee227e7648625d9a835be7a4
    Use size_t for frame size
    
    except in the control block, where we don't have room.
    
    In AudioFlinger::ThreadBase::TrackBase::getBuffer,
    read the frame size from control block only once.
    
    Change-Id: Id6c4bccd4ed3e07d91df6bbea43bae45524f9f4e
    Use audio_stream_type_t consistently
    
    At native level it was a mixture of audio_stream_type_t, int, uint32_t,
    and uint8_t.  Java is still int.  Also fixed a couple of hard-coded -1
    instead of AUDIO_STREAM_DEFAULT, and in startToneCommand a hard-coded 0
    instead of AUDIO_STREAM_VOICE_CALL.
    
    Change-Id: Ia33bfd70edca8c2daec9052984b369cd8eee2a83
    Use audio_mode_t consistently
    
    It was int or uint32_t.
    Also make getMode() const.
    
    Change-Id: Ibe45aadbf413b9158e4dd17f2b3bcc6355288d37
    Simplify range check for audio_mode_t
    
    AudioSystem::setMode previously allowed negative modes, but these were
    then rejected by AudioFlinger.
    
    Now negative modes (including AUDIO_MODE_INVALID and AUDIO_MODE_CURRENT)
    are explicitly disallowed.
    
    Change-Id: I0bac8fea737c8eb1f5b6afbb893e48739f88d745
    Rename LOG_ASSERT to ALOG_ASSERT  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157519
    
    Bug: 5449033
    Change-Id: I8ceb2dba1b031a0fd68d15d146960d9ced62bbf3
    Use cached reference to media.player service
    
    This save unnecessary binder calls
    
    Change-Id: I93a60efc54d9c8fb8fab706cd4477bbfd00ffec8
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    AudioFlinger new can't fail
    
    Change-Id: I7dae05a5ea1c962a9975386eab1fedbbe106ffba
    Use consistent style of & reference for AutoMutex
    
    AutoMutex, which is a typedef for Mutex::Autolock, is overloaded for
    either a reference (&) or pointer (*) parameter, but we prefer to use
    the reference form when the mutex is known at compile time.
    
    Change-Id: I3515e6d6ab7959b2356a27fa3b04fd49e42cb31e
    Use correct type for hardware call state
    
    Change-Id: Ic6d98b129e3ec653df1d8f7e829adf8dccb4f378
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    suspended() and isSuspended() are const
    
    Change-Id: I04b95970b5a645b64e7e64fffd46d868354dda66
    Use the standard CC_LIKELY and CC_UNLIKELY macros
    
    Several source files privately defined macros LIKELY and UNLIKELY in terms
    of __builtin_expect. But <cutils/compiler.h> already has CC_LIKELY and
    CC_UNLIKELY which are intended for this purpose.  So rename the private
    uses to use the standard names.
    
    In addition, AudioFlinger was relying on the macro expanding to extra ( ).
    
    Change-Id: I2494e087a0c0cac0ac998335f5e9c8ad02955873
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: Ib08fe86d23db91ee153e9f91a99a35c42b9208ea
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    audioflinger: fix clicks on 48kHz audio.
    
    The calculation done in prepareTracks_l() for the minimum amount
    off frames needed to mix one output buffer had 2 issues:
    - the additional sample needed for interpolation was not included
    - the fact that the resampler does not acknowledge the frames consumed
    immediately after each mixing round but only once all frames requested have been used
    was not taken into account.
    Thus the number of frames available in track buffer could be considered sufficient although
    it was not and the resampler would abort producing a short silence perceived as a click.
    
    Issue 5727099.
    
    Change-Id: I7419847a7474c7d9f9170bedd0a636132262142c
    Remove the notion of "active track" from mixer
    
    This is a first step towards making the mixer more object-oriented.
    
    Change-Id: Ifd445d0e471023a7f5c82e934736ffc95ba1b05b
    audio effects: rename configure command
    
    Renamed audio effect library interface command for audio format
    configuration from EFFECT_CMD_CONFIGURE to EFFECT_CMD_SET_CONFIG.
    This makes the naming more consistent with other exixsting commands
    and allow adding a new command to get the configuration (EFFECT_CMD_GET_CONFIG).
    Same change for reverse channel configuration renamed from
    EFFECT_CMD_CONFIGURE_REVERSE to EFFECT_CMD_SET_CONFIG_REVERSE.
    
    Implemented EFFECT_CMD_GET_CONFIG in exisitng effect libraries.
    
    Change-Id: Ia7b1c620f13797fe5aceb3b0b4acbacce09fb067
    Extract out audio DSP code to utility library
    
    Change-Id: Ib8ce72028a7ea30e82baa518e381370e820ebbd0
    Simplify enable/disable mixing
    
    The MIXING enum isn't needed, and now returns void instead of status_t.
    
    Change-Id: Ibe4ec24081d75ad4ab78b9c7191fc9077959c4e9
    Improve resistance to leaks for ConfigEvent
    
    A Vector of pointers is risky, as there is no ownership (and the
    ThreadBase destructor was not deleting them, so if there were any left
    over at end it would leak).  Replaced by a Vector of values.
    
    Change-Id: Iddde72dc30134adfcf724dec26cbe0a742509b8c
    Use NULL not 0 for pointers
    
    Change-Id: Iab3f9abbdab617dc5a599e657ec46a0b0a002eef
    Improve AudioFlinger error logging
    
    Change-Id: I8ce9aff4038cd7fa0067600faa8080b137db1939
    Fix indentation and whitespace
    
    Use git diff -w to verify.
    
    Change-Id: Ib65be0a1ecf65d6cad516110604e3855bf68a638
    Audio C++ comments
    
    Change-Id: I84906ebb9dfcfa5b96b287d18364b407f02a30c1
    Remove redundant clear()
    
    Change-Id: Ie5e4e63cbc8fa85ef50451dddf8f149fa864b132
    Use const char correctly in AudioFlinger
    
    Use const char [] instead of const char * to eliminate unnecessary pointer.
    Make the array audio_interfaces also const, in addition to the strings.
    
    Change-Id: I31f33d1dcb9a657ee136f4280fd2d46492496831
    Use units after all times
    
    Change-Id: I48d3f29c37228b5d03189e4c9600824c9360cac9
    AudioFlinger: Make StandbyTime configurable.
    
    Make the standby time for AudioFlinger configurable using a system
    property.  Default AudioFlinger behavior is to go into standby
    (allowing the audio outputs to underflow) after there has been nothing
    to mix and AudioFlinger has just been pumping out silence for the
    configured standby time (which defaulted to 3 seconds).
    
    Now, by setting the "ro.audio.flinger_standbytime_ms" property in
    their platform init.rc, platforms can override this default and
    control the standby time.  If the property is missing or malformed,
    the old default value of 3 seconds will be used instead.
    
    Change-Id: Ic9fa8b5f5bccee493bc72c65e408d3fd8ddd1059
    Signed-off-by: John Grossman <johngro@google.com>
    audioflinger: fix audio skipping over A2DP
    
    The maximum sleep time allowed in the mixer thread when audio tracks
    are enabled but not ready for mixing is derived from the latency
    reported by the output stream.
    This does not work for A2DP where the latency also reflects encoding, decoding
    and transfer time.
    
    Modified activeSleepTimeUs() to take A2DP case into account.
    
    Issue 5682206.
    
    Change-Id: I3784ac01fb6f836b5a6ce6f764fb15347586de35
    audioflinger: reduce sleep time to avoid underrun
    
    Progressively reduce the sleep time applied in MixerThread::threadLoop()
    in case of consecutive application underruns to avoid starving the audio HAL.
    As the default sleep time is longer than the duration of an audio buffer
    we ended up writing less data than needed by the audio HAL if
    the condition persisted.
    
    Issue 5553055.
    
    Change-Id: I2b23ee79c032efa945025db228beaecd1e07a2e5
    audioflinger: fix noise when skipping to next song
    
    When audio effects are enabled, a noise can be heard at the
    beginning of the new song when skipping to next song in music app.
    
    This is because some effects (especially virtualizer) have a tail.
    This tail was not played when previous song was stopped because effects were
    not processed when no tracks were present on a given session. This is to
    reduce CPU load when effects are enabled but no audio is playing.
    The tail was then rendered when the new song was started.
    
    Added a delay before stopping effect process after all tracks have been removed from a session.
    
    Issue 5584880.
    
    Change-Id: I815e0f7441f9302e8dfe413dc269a94e4cc6fd95
    Fix regression for SoundPool playback
    
    Commit 19ddf0eb introduced a problem with applications (like SoundPool)
    relying on an underrun condition to detect end of playback instead of
    stopping the track when all data is written.
    AudioFlinger would keep waiting for new data in case of partial buffer
    filling and never reach the underrun condition.
    
    Added a mechanism to wait no more than once if not enough frames are present
    in the track buffer.
    
    Issue 5585490.
    
    Change-Id: I131e605ff6070831a01ddf734e68459e3bf2354b
    AudioFlinger: mix track only when really ready
    
    The addition of low power audio playback mode made that audio buffer consumption
    by audio HAL can now happen in bursts. This makes that requesting audio data
    from an AudioTrack for mixing can happen at much shorter intervals than before.
    This revealed an existing problem where AudioFlinger would consider a track ready
    for mixing although not enough frames were ready to completely fill one output buffer,
    thus creating short periods of silence.
    
    The fix consists in waiting for enough frames to be ready in AudioTrack buffer before
    declaring a track ready for mixing. This minimum is not applied when the track is stopped
    to allow the buffer to be emptied completely.
    
    Change-Id: I6d04f9b65db5af85b0b53f0a5674be7ec02f9e9f
    Add a missing NULL check.
    
    The get_next_write_timestamp method introduced to the audio HAL is optional.
    HALs which do not implement it leave it set to NULL.  Callers (there is
    currently only one in the AudioMixer code) need to be certain to check for NULL
    before invoking it.
    
    Change-Id: I88ba43bb53bec081c98c9a8842936c4fbfdd44f6
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: I6ec5d2bca9b8ebc0acd395a7dd92e1a48fcdfa9b
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    undo reset to ics-mr1 until we have a better method
    reset to ics-mr1, but keep history
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Fix issue 381905: BassBoostTest CTS tests fail...
    
    When AudioEffectTest is executed, an Equalizer is created
    and enabled on a MediaPlayer session. Effects on the output
    mix are therefore suspended.
    Then the MediaPlayer is released with the effect still enabled.
    In this case, Audioflinger::purgeStaleEffects_l() fails to restore
    the suspended effects when the effect attached to the released audio session
    is removed.
    When subsequent tests are executed on output mix effects, these effects cannot be
    enabled as they are still suspended.
    
    Fixed purgeStaleEffects_l() to restore suspended effects if the effect removed is enabled.
    
    Also fixed EffectHandle::disconnect() to only restore suspended effects if the disconnected
    handle actually has control over the effect.
    
    Change-Id: I67232e7c34680b0cc01abfd57d5d510a524e5d4f
    Limit AudioFlinger log.
    
    AudioFlinger logs a warning when a write to the audio HAL
    takes too long to return. The threshold for this warning is
    a rule of thumb based on the assumption that the audio HAL will consume
    buffers at a regular pace.
    The introduction of low power audio mode with larger buffers and writes
    occuring in bursts makes that this threshold is often exceeded resulting
    in excessive and misleading warnings.
    
    The threshold is raised to remove unwanted warnings but we should reconsider
    the usefulness of this warning altogether.
    
    Change-Id: I5ef6898ea28d879cede3e47da542a64092a3cca4
    Fix issue 5381089: problem with A2DP music volume
    
    This problem only occurs when audio effects are present and
    the music volume is applied by one effect engine.
    When connecting or disconnecting A2DP, audio effects are moved from
    one mixer thread to another. When removed from the source thread,
    the effect is stopped but it is not restarted when added to the
    destination thread.
    This regression was introduced by commit 21b5c47e.
    
    Change-Id: I4cc578d8d760ec65b185032b6fda98c739d331bc
    Fix issue 5373658: memory leak in AudioFlinger.
    
    Unlink PowerManagerService binder interface death recipient
    in ThreadBase destructor.
    
    Change-Id: Iab06ae9a8a6737bb002b6416a157b0fb50c11ad5
    Fix issue 5355047: Automated effect tests fail.
    
    Fixed several regressions in automated audio effect tests due
    to changes in effect framework and visualizer FFT output range.
    
    - Do not suspend Volume effect on session 0 when effects are
    enabled on specific sessions.
    - Adapt energy detection thresholds to new visualizer FFT range.
    - Leave more time for BassBoost and Virtualizer effects to ramp up
    before measuring the effect.
    - Removed second insert reverb left by mistake on the player session
    in preset reverb test.
    
    Change-Id: I7a1ad1372d783fa7900eb9dd1d3b47f54d8d766f
    Issue 4345021: Audio routed to multiple devices...
    
    There is a possiblility that the condition on which RecordThread::checkForNewParameters_l()
    waits after updating the command completion status is never signalled.
    This happens if the thread executing ThreadBase::setParameters() has timed out waiting
    for the status (for instance if the audio HAL takes too long to execute the setParameters()
    command. Then the RecordThread is stuck forever.
    
    The fix consists in waiting for the condition with a timeout in RecordThread::checkForNewParameters_l().
    
    Change-Id: I7fc671bc2fc43ba4acb65a2beb33ee05742f091e
    merge in ics-release history after reset to master
    merge in ics-release history after reset to master
    226483: A2DP connected, but music out to speaker
    
    When the A2DP headset is connected, there is a possible
    race condition when the audio tracks are moved from
    the mixer thread attached to the speaker output to the thread
    attached to A2DP output.
    As the request to clear the stream type to output mapping cache in
    the client process is asynchronous, it is possible that the flag
    indicating to the client audio track to re-create the IAudioTrack
    on the new thread is processed before the cache is invalidated.
    In this case, the track will be attached to the old thread and
    music will continue playing over the device speaker instead of being
    redirected to A2DP headset.
    
    Change-Id: Ib2ce1eb5320eaff83287b93779061bf4e7a330df
    Audioflinger: reverse logic of BT NREC indication
    
    The interpretation of BT NREC by AudioFlinger to enable
    or disable AEC and NS was wrong: NREC to ON (default) means
    the phone (Audio Gateway) must enable local AEC and NS.
    
    Change-Id: I88a264e7fc9831c43bbace4f6b585baec73f2006
    Add a missing NULL check.
    
    The get_next_write_timestamp method introduced to the audio HAL is optional.
    HALs which do not implement it leave it set to NULL.  Callers (there is
    currently only one in the AudioMixer code) need to be certain to check for NULL
    before invoking it.
    
    Change-Id: I9e06d688311c388446bb53993291ebc0f98cff89
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: Id78bba8c002131d8b52b4170259a87fd94e63c73
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    AudioFlinger: add check for audio HAL init failure
    
    Do not call audio HAL functions on the primary HW interface
    if it could not be initialized properly.
    
    Change-Id: If54059c8fd188d6c1686f9e0439994fe9411478a
    Don't remove effects on session 0
    
    b/5159902
    Change-Id: Id6f29fb1c687069f7480dd81d4745a558f202226
    Audio effects: track CPU and memory use separately
    
    Before this change, CPU and memory usage for an audio effect were
    registered and checked against the limit by audio policy manager
    upon effect instantiation. Even if an effect was not enabled
    it would prevent another effect to be created if the CPU load budget
    was exceeded, which was too restrictive.
    
    This change adds a method to register/unregister CPU load only when
    an effect is enabled or disabled.
    It also adds a mechanism to place all effects on the global output mix
    in suspend state (disabled) when an effect is enabled on a specific session.
    This will allow applications using session effects to have the priority
    over others using global effects.
    
    Also fixes some issues with suspend/restore mechanism:
    - avoid taking actions when an effect is disconnected and was not enabled.
    - do not remove a session from the suspended sessions list when corresponding
    effect chain is destroyed.
    
    Change-Id: I5225278aba1ae13d0d0997bfe26a0c9fb46b17d3
    Keep effects sessions active when the caller dies.
    
    Don't remove effects until the session they are in goes away or all
    AudioEffects have been explicitly released. This allows the control
    panel process to die without stopping the effects.
    
    Change-Id: I4496e5df080230ca1af149dec95c1309ab8ea888
    AudioFlinger: protect input/output stream access
    
    Some methods would not check that the output orinput stream of a thread
    was still valid before calling functions on its interface.
    This could cause a crash if those methods where called while the output or
    input was being closed by another thread.
    
    Make sure that the output or input stream pointer is cleared before closing the
    stream.
    Always check that the output or input pointer is not null before calling
    functions at the stream interface.
    Generalize the use of initCheck() method to verify that the output or input
    stream is not null.
    
    Change-Id: I9d9ca6b744d011bcf3a7bbacb4a581ac1477bfa5
    AudioFlinger: disable AEC and NS with BT headsets
    
    Disable AEC and NS when the Bluetooth SCO headset in use indicates it
    implements those pre processings.
    
    Change-Id: I93f3d10b0a27243d5dbff7182639576fc0c6d862
    Audio Effect Framework: add effect suspend/restore
    
    Add the possibility for the effect framework to suspend
    (temporarily disable process) and restore audio effects.
    This feature will be usefull to disable pre processing under certain
    conditions and better control coexistence of audio effects
    on output mix and specific sources.
    
    Change-Id: I79b195982cc48748d5708308fb1647b9c3c34cc6
    Fix issue 5090721: audio record broken
    
    Commit 6dbdc40 introduced a deadlock when exiting the
    AudioFlinger RecordThread.
    
    Change-Id: I1f63e54c5aeff05da4e4d028b53f734c62c78677
    Fix issue 5090721: audio record broken
    
    Commit 6dbdc40 introduced a deadlock when exiting the
    AudioFlinger RecordThread.
    
    Change-Id: I1f63e54c5aeff05da4e4d028b53f734c62c78677
    AudioFlinger: fix crash when deleting pre process.
    
    If a pre processing effect is detroyed while enabled and capture is active,
    there was a possibility that the effect engine is released by the framework
    while still processed by the audio HAL.
    
    The fix consists in not releasing the engine in EffectModule::removeHandle()
    but just flag the effect as being detroyed to avoid further calls to functions
    on the engine effect interface.
    The effect interface is then removed from the audio HAL safely in
    EffectChain::removeEffect_l() while holding the EffectChain mutex.
    
    Change-Id: I71fab30d9145062af8644f545a1f1d4d3e7e7f02
    Fix issue 4604090: notification sound interrupted.
    
    The problem is that the audio HAL fails to acquire the wake lock when playing the notification.
    This is because of a change that removed the mediaserver process form the system group for honeycomb.
    
    The fix consists in requesting the wake lock from PowerManagerService when AudioFlinger mixer
    wakes up.
    
    A consequence of this change is that audio HALs or pcm drivers do not have to hold wake locks
    anymore as in the past.
    
    Change-Id: I4fb3cc84816c9c408ab7fec75886baf801e1ecb5
    AudioFlinger: add dump of audio pre processing.
    
    Dump of media.audio_flinger service was only listing effects on output threads.
    Moved the dump of effect chains from PlaybackThread to ThreadBase class so that
    pre processings on RecordThread are also listed.
    
    Change-Id: If8bc74023c12b9c2371f1b300743b156ceca7b87
    Fix issue 4988574: 8 bit PCM audio playback broken.
    
    Fixed regression in audio track control block frame size
    calculation introduced by commit c310dcb.
    
    Change-Id: Ia731b946ae4e43316b98d80229e3b08a696e47d6
    Audio framework: support for audio pre processing
    
    Audio effect framework is extended to suport effects on
    output and input audio path.
    
    AudioFlinger: Support for audio effects and effect chains is
    moved from PlaybackThread class to ThreadBase class so that
    RecordThread can manage effects.
    Effects of type pre processing are allowed on record thread
    only. When a pre processing is enabled, the effect interface handle is
    passed down to the input stream so that the audio HAL can call the
    process function. The record thread loop calls the effect chain process
    function that will only manage the effect state and commands and skip the
    process function.
    
    AudioRecord: The audio session is allocated before calling getInput() into
    audio policy serice so that the session is known before the input theead is
    created and pre processings can be created on the correct session.
    
    AudioPolicyService: default pre processing for a given input source are
    loaded from audio_effects.conf file.
    When an input is created, corresponding effects are created and enabled.
    
    Change-Id: Id17119e0979b4dcf189b5c7957fec30dc3478790
    Log CPU usage
    
    Change-Id: Ie447e59be139153e526b7ad467c46c659d26816f
    Moved and renamed effect API header files
    
    Moved specific effect header files to
    system/media/audio_effects/include/audio_effects
    and renamed to lower case (effect_xxx.h).
    
    Change-Id: Icfc2264bfd013cab0395d7e310ada636b9fe3621
    Added audio_bytes_per_sample() helper function
    
    Change-Id: Ibfcd75c4c241a53d5f052c25ada091904991048a
    audio: update for audio/audio_policy header names/locations
    
    Change-Id: I36c49352eee57559403cd1597f56a8485a360289
    Signed-off-by: Dima Zavin <dima@android.com>
    Remove dead code related to gettid
    
    The gettid system call is always available now.
    
    Change-Id: Ib78b41781eda182dc8605daf456bbea7ff7c2dc0
    Use channel mask instead of channel count for track creation
    
    Record and playback objects (resp AudioRecord and AudioTrack)
    are created using a channel mask, but this information is lost
    in the mixer because only the channel count is known to
    AudioFlinger. A channel count can always be derived from a
    channel mask.
    
    The change consists in:
    - disambiguiting variable names for channel masks and counts
    - passing the mask information from the client to AudioFlinger
     and the mixer.
    - when using the DIRECT ouput, only verifying the format of
     the track is compatible with the output's for PCM.
    
    Change-Id: I50d87bfb7d7afcabdf5f12d4ab75ef3a54132c0e
    Removed interface to load audio effects libraries
    
    Removed unused functions allowing dynamic loading of audio effects libraries
    from effects factory API.
    
    Change-Id: I06cc5a51dc10aca87c7a8687bbb874babd711eca
    New effect library API
    
    Moved and renamed media/EffectApi.h to hardware/audio_effect.h
    Modified the effect library API to expose a library info structure
    containing an interface functions table.
    Also removed enums for audio channels, audio format and devices
    from effect API and use values from system/audio.h instead.
    
    Modified effects factory to support new library interface format and
    load libraries and efffects listed in audio_effects.conf file.
    The file audio_effects.conf is first loaded from /vendor/etc and
    then from /system/etc/audio_effects.conf if not found.
    
    Modified existing effect libraries to implement the new library interface.
    
    Change-Id: Ie52351e071b6d352fa2fbc06c3846686f8c45df9
    Fix audio effect framework issues
    
    Fix two issues in audio effect framework reported by partners.
    
    1 - Fixed duplicated audio buffer sent to effect process function when
    pausing a track.
    Modified Effectchain::process_l() function to clear the effect chain
    input buffer before calling the effect process functions when no track
    is active on the session. Previous code was clearing the buffer after
    calling the process functions and  when transitioning from active
    to inactive, the last processed buffer was passed again once to effect
    process function before being cleared.
    
    2 - Fixed potential mutex cross deadlock when disconnecting an effect
    while playback is active. This is because EffectChain::process_l()
    was calling PlaybackThread::hasAudioSession() thus creating an inversion
    in the mutex lock order (EffectChain mutex locked before ThreadBase mutex).
    The fix consists in removing the call to hasAudioSession() from process_l()
    and requires each effect chain to keep count of the number of audio tracks
    attached to it (previously only the active tracks were accounted for).
    
    Change-Id: Iee4246694ea8c7a66c012120c629d72dd38f9c35
    update for new audio.h header location
    
    Change-Id: Ic4c62c4037800802427eb7d3c7f5eb8b25d18876
    Signed-off-by: Dima Zavin <dima@android.com>
    Tweak audio APIs for better forward/backward/sideways compatibility.
    
    Change-Id: I293e99107aed260db68edccad35cdc15ed88c1d3
    HAVE_ANDROID_OS AUDIOFLINGER_SECURITY_ENABLED dead
    
    Remove dead code from the days when Android ran in emulator.
    
    Change-Id: Ibadbbde0538239ad9b2811a3a2e8f8a6d3b6389c
    audioflinger: don't do work in constructor, instead do it in onFirstRef
    
    Change-Id: I22d9e01821816c3beb52b014330386c7fd2f0411
    Signed-off-by: Dima Zavin <dima@android.com>
    audioflinger: enumerate all the possible audio interfaces
    
    Keep track of the primary interface that handles the master volume,
    etc.
    
    Change-Id: Ib0701fccff8d8783a99035a241ab7c8ec75c00ac
    Signed-off-by: Dima Zavin <dima@android.com>
    audio/media: convert to using the audio HAL and new audio defs
    
    Change-Id: Ibc637918637329e4f2b62f4ac7781102fbc269f5
    Signed-off-by: Dima Zavin <dima@android.com>
    Miscellaneous code cleanup in audio framework
    
    Changes:
     - Move declaration of kClassPathName to top of file so it can be used
       in more than one place, instead of "android/media/AudioSystem".
     - Make private methods static.
     - Add comment to stream_type, audio_mode, force_use types that they must match
       values in AudioSystem.java.
     - Add comment about unused types mp3_sub_format and vorbis_sub_format.
     - Fix typos.
     - Use @ in javadoc comments.
     - Delete dead APIs setMode, getMode, setRouting, getRouting in AudioSystem.java
       (they are all hidden, deprecated, and unused by rest of framework)
     - Delete unused private log method.
     - Fix pathname for android_media_AudioSystem.cpp.
     - Improve code formatting for space after == and !=.
     - Add logging of delta for changing audio policy manager ref count.
    
    Change-Id: I18037c7beb8ab76d1fda08c11e589f6e591d36e1
    New fix for issue 4111672: control block flags
    
    The first fix (commit 913af0b4) is problematic because it makes threads
    in mediaserver process block on the cblk mutex. This is not permitted
    as it can cause audio to skip or worse have a malicious application
    prevent all audio playback by keeping the mutex locked.
    
    The fix consists in using atomic operations when modifying the control
    block flags.
    
    Also fixed audio_track_cblk_t::framesReady() so that it doesn't block
    when called from AudioFlinger (only applies when a loop is active).
    
    Change-Id: Ibf0abb562ced3e9f64118afdd5036854bb959428
    Fix issue 4111672: AudioTrack control block flags
    
    Make sure that all read/modify/write operations on the AudioTrack
    and AudioRecord control block flags field are protected by the
    control block's mutex.
    
    Also fix potential infinite loop in AudioTrack::write() if the
    written size is not a multiple of frame size.
    
    Change-Id: Ib3d557eb45dcc3abeb32c9aa56058e2873afee27
    - To track the usage of all audio output devices
    - To track the currently used audio device
    - The devices are separated as speaker and other audio devices
    - Provide the collected data to battery application through pullBatteryData()
    
    Change-Id: I374c755266b5ac6b1c6c630400f4daf901ea8acc
    Fix issue 3479042.
    
    The problem is that when an AudioRecord using the resampler is restarted,
    the resampler state is not reset (as there is no reset function in the resampler).
    The consequence is that the first time the record thread loop runs, it calls the resampler
    which consumes the remaining data in the input buffer and when this buffer is released
    the input index is incremented over the limit.
    
    The fix consists in implementing a reset function in the resampler.
    
    A similar problem was also present for playback but unoticed because the track buffer is always
    drained by the mixer when a track stops. The only problem for playback was that the initial
    phase fraction was wrong when restarting a track after stop (it was correct after a pause).
    
    Change-Id: Ifc2585d685f4402d29f4afc63f6efd1d69265de3
    Bug 3366885 Remove LVMX switch
    
    Change-Id: I0bf98c6f85f00b3296874571e1c049dcc4e2fcca
    Fix issue 3371080
    
    Modified default volume control logic in AudioService:
    1 IN_CALL volume if in video/audio chat
    2 NOTIFICATION if notification is playing or was playing less than 5s ago.
    3 MUSIC
    
    Modified silent mode:
    - now also affect MUSIC stream type
    - entering silent mode when VOL- hard key is pressed once while selected
    stream volume is already at 0 (except for VOICE_CALL stream).
    - exiting silent mode when pressing VOL+ hard key while in silent mode
    
    Play sound FX (audible selections, keyboard clicks) at a fixed volume.
    
    Modified audio framework:
    - isStreamActive() method now implemented in AudioPolicyManagerBase (previously AudioFlinger)
    - iStreamActive() now specifies a time window during which the stream is considered
    active after it actually stopped.
    
    Change-Id: I7e5a0724099450b9fc90825224180ac97322785f
    do not merge bug 3370834 Cherrypick from master
    
    Cherripick from master CL 79833, 79417, 78864, 80332, 87500
    
    Add new audio mode and recording source for audio communications
     other than telelphony.
    
    The audio mode MODE_IN_CALL signals the system the device a phone
     call is currently underway. There was no way for audio video
     chat or VoIP applications to signal a call is underway, but not
     using the telephony resources. This change introduces a new mode
     to address this. Changes in other parts of the system (java
     and native) are required to take this new mode into account.
    The generic AudioPolicyManager is updated to not use its phone
     state variable directly, but to use two new convenience methods,
     isInCall() and isStateInCall(int) instead.
    
    Add a recording source used to designate a recording stream for
    voice communications such as VoIP.
    
    Update the platform-independent audio policy manager to pass the
     nature of the audio recording source to the audio policy client
     interface through the AudioPolicyClientInterface::setParameters()
     method.
    
    SIP calls should set the audio mode to MODE_IN_COMMUNICATION,
     Audio mode MODE_IN_CALL is reserved for telephony.
    
    SIP: Enable built-in echo canceler if available.
    1. Always initialize AudioRecord with VOICE_COMMUNICATION.
    2. If echo canceler is available, disable our echo suppressor.
    
    Note that this CL is intentionally not correcting the
     getAudioSourceMax() return value in MediaRecorder.java as the
     new source is hidden here.
    
    Change-Id: Ie68cd03c50553101aa2ad838fe9459b2cf151bc8
    do not merge - Fix issue 3371096.
    
    EffectModule::process() was copying effect chain input buffer to
    output buffer if no effect was active instead of accumulating it.
    
    Change-Id: If4ca75601ea69a088d0f71d88aec53e90a1dec89
    Fix issue 3371096.
    
    EffectModule::process() was copying effect chain input buffer to
    output buffer if no effect was active instead of accumulating it.
    
    Change-Id: I2838af2e7b6654d0a76547625929a5453da68d02
    Tentative fix for issue 3362362.
    
    The problem is likely that one method is called on the AudioPolicyManagerBase
    instance while it is still being constructed by AudioPolicyService.
    
    To avoid this, the AudioPolicyService mutex is held by the constructor until the
    platform specific AudioPolicyManager is constructed and the member
    mpPolicyManager initialized.
    
    Also added an initCheck() method to AudioPolicyInterface to verify successful
    initialization of AudioPolicyManager.
    
    A similar change is done in AudioFlinger constructor.
    Also added some missing protections in AudioFlinger methods where the
    playback thread list is parsed.
    
    Change-Id: I006b244ec057e1bb0aa5ebe426ef006e3b171056
    Fix issue 3157123.
    
    Use a Mutex wherever atomic operations were used in AudioTrack,
    AudioRecord, AudioFlinger and AudioEffect classes.
    
    Change-Id: I6f55b2cabdcd93d64ef19446735b8f33720f8dbc
    Add new audio mode for audio communications other than telelphony.
    
    The audio mode MODE_IN_CALL signals the system the device a phone
     call is currently underway. There was no way for audio video
     chat or VoIP applications to signal a call is underway, but not
     using the telephony resources. This change introduces a new mode
     to address this. Changes in other parts of the system (java
     and native) are required to take this new mode into account.
    The generic AudioPolicyManager is updated to not use its phone
     state variable directly, but to use two new convenience methods,
     isInCall() and isStateInCall(int) instead.
    
    Change-Id: Id744cd26520ea1d1a4795eabe6a1f0c58789af76
    Fixed AudioFlinger not always pausing tracks
    
    If the pause request is received before the AudioTrack buffer was
    completelly filled and the track ready for mixing, the pause is
    not executed: the track just underruns and stays in pausing state.
    
    The fix consists in considering the track ready for mixing immediately
    if pausing.
    
    Change-Id: Ia6cb4703fee2126e41011a6400ea8eeb3a3e5456
    Issue 3032913: improve AudioTrack recovery time
    
    This issue showed that when an AudioTrack underruns during a too long period
    of time and is therefore disabled by audioflinger mixer, it takes an additional
    delay of up to 3 seconds to recover.
    This fix adds a simple mechanism to recover immediately when the client application
    is ready to write data again in the AudioTrack buffer
    
    Also throttle warnings on record overflows
    
    Change-Id: I8b2c71578dd134b9e60a15ee4d91b70f3799cb3d
    Fix several audio effects problems.
    
    Fixed the following issues in LVM effect bundle wrapper:
    - memory leaks in EffectCreate() in case effect creation fails at various stages
    - Added saturation when accumulating to output buffer
    - Fixed problems with enabled effects count when an effect is released while enabled
    - Do not allocate temporary buffer for accumulation each time process() is called
    
    Fixed the following issues in effects framework (AudioFlinger)
    - Release effect synchronously in the library when deleted from effect chain
    - Do not call the effect process function if no tracks are present in the same
    audio session
    
    Change-Id: Ifbd80a163415cfb3c0a337c12082853ea45d9c91
    Fix issue 3007862
    
    Removed a cross deadlock condition between audioflinger and audio policy
    service mutexes.
    Audioflinger::createEffect() locks audioflinger mutex and then calls
    AudioSystem::getOutputForEffect() which ends up in
    AudioPolicyService::getOutputForEffect() which locks audio policy service
    mutex. If at the same time, the command thread in audio policy service is
    processing a command(set volume, set route...), the mutex is locked and the
    command will call one audioflinger method which in turn will attempt to
    lock audioflinger mutex.
    The fix consists in releasing audioflinger mutex before calling
    getOutputForEffect().
    
    Change-Id: Id44e7feb36e0a295731f6aa97cf32d022edd34d0
    Request permission for global audio effects.
    
    Applications creating an audio effect on the output mix must
    have the MODIFY_AUDIO_SETTINGS permission.
    
    Change-Id: I57d88533f91ad0d33680107d79abcec28f7263b5
    Fix volume problems with insert revert
    
    - Use a constant input level to the reverb engine and implement volume control in the
    insert reverb. This avoids the volume spikes when an effect that was inserted after
    the reverb is disabled or removed.
    - Fix clicks (one silent buffer) at the end of the reverb disable period.
    - Modified volume management in audioflinger so that the volume ramp is also done by
    the insert effect if present when the track is paused (avoids clicks).
    - Increased room level for all presets.
    
    Also fixed problems with output stage session (-1):
    - effect bundle wrapper was not designed to support session -1
    - the permission check in audioflinger for using session -1 failed due to a wrong usage of
    getCallingPid()
    
    Change-Id: Id1ff51327263364bf71d3f2668fa5cde4311d84f
    Fix problem in AudioEffect::command() status.
    
    The *pReplyData argument of the command() function was left unitialized by EffectHandle::command()
    when command was EFFECT_CMD_ENABLE, EFFECT_CMD_DISABLE and EFFECT_CMD_SET_PARAM_COMMIT.
    
    Change-Id: I91a19817ead2a8cfbdd8e2d77ca270c7ce9d5bd4
    Audio Effects: fix problems in volume control.
    
    - Fixed click when re-enabling effect during the turn off phase:
    make sure the effect states where effect is processed are the same
    where volume control is delegated to effect.
    - Fixed click when effect is deleted while still active: do not apply
    volume ramp if an effect having volume control was just removed from the
    effect chain.
    
    Also fixed a crash when PCM dump is enabled in effect bundle wrapper.
    
    Change-Id: Ib562f5cf75c69af75df0e862536262e2514493e4
    Fix issue 2929440
    
    Fixed regression introduced by change a54d7d3d7dd691334189aab20d23c65710092869 in audioflinger mixer thread:
    When the output stream is suspended, the sleep time between two writes must match the actual duration
    of one output stream buffer otherwise the playback rate is not respected.
    
    Change-Id: Ic5bebe890290d1f44aeff9dd3c142d18e26fff2a
    Fix issue 2909189: System property ro.audio.silent no longer mutes system.
    
    Fixed regression introduced by commit 2a6b80bc65c4782b5a7168b300e1dc5ec9f617ee:
    master mute was not working if no effect chains were present on session 0.
    
    Change-Id: I66d107e045d159cb94d29c7476fa1e12d92f2ae7
    Fixed several audio effects problems.
    
    - Fixed constant inversions in AudioEffect.java
    - Do not return error when enabling an already enabled effect
    - Update cached effect state in native AudioEffect class when effect is enabled/disabled by command() method
    - Remove click when restarting effect during disable sequence
    - Fixed problem in master mute management when volume control is delegated to effect.
    
    Change-Id: I6df4ce9fcc54fdc7345df858f639d20d802d6712
    Fixed underrun in audioflinger mixer.
    
    When all audio tracks have been disabled and the mixer is running idle before the output stream is placed in standby,
    the mixer sometimes fails to write to the output stream on time to avoid underrun.
    
    This is because the sleep period used to wait before the next write to output stream is too close to the actual buffer duration.
    In fact this sleep time is not critical as if we write too early to the output stream, the kernel driver will wait for free buffers
    from the audio DSP DMA and we will sleep anyways.
    
    The fix consists in dividing the calculated wait period by 2 to increase the margin.
    
    Change-Id: I5730887dc2ccce2a511bc858494a6f7da6b392a0
    Allow creation of an audio effect on a session with no audio tracks.
    
    This is necessary to allow creating and enabling an effect attached to a particular player
    session before the playback is started. As a matter of fact, the implementation of the mediaplayer
    does not create the AudioTrack before playback starts.
    
    Change-Id: I1266e8885f9d756acc949303321aaac0fbf83e34
    Audio effects: modified command() parameter types.
    
    The type of the cmd, cmdSize and *pReplySize parameters of the effect control interface command()
    function have been modified from int to uint32_t. This is more consistent with their role.
    
    Change-Id: I84d289fc262d6753747910f06f485597dfee6591
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    Audio policy manager changes for audio effects
    
    Added methods for audio effects management by audio policy manager.
    - control of total CPU load and memory used by effect engines
    - selection of output stream for global effects
    - added audio session id in parameter list for startOutput() and stopOutput().
    this is not used in default audio policy manager implementation.
    
    Modifications of audio effect framework in AudioFlinger to allow moving and reconfiguring
    effect engines from one output mixer thread to another when audio tracks in the same session
    are moved or when requested by audio policy manager.
    Also fixed mutex deadlock problem with effect chains locks.
    
    Change-Id: Ida43484b06e9b890d6b9e53c13958d042720ebdb
    Fixed problems in audio effect volume control.
    
    Fixed the following problems in audio effect volume control in AudioFlinger:
    - Make sure that the volumes returned by EffectChain::setVolume_l() are correct even is
    no change is detected since last call
    - Do not use isEnabled() to validate volume control but mState >= ACTIVE instead as the volume control
    must be also active in STOPPING and STOPPED states.
    
    Change-Id: Id62da3164fad500ee8a5efd6cd78c77e8fdcb541
    Several improvements in audio effects volume control.
    
    - Fixed crash when deleting an effect chained before an effect having volume control
    - Changed EFFECT_FLAG_VOLUME_CTRL to implicitely include EFFECT_FLAG_VOLUME_IND
    (not need to set both in effect descriptor).
    - Volume control changes from one effect to another if needed according to effect enable state
    - EFFECT_CMD_SET_VOLUME is only sent when their is an actual change in volume
    
    Change-Id: Ieebaf09157e2627366023569d95516646e03e26c
    added BinderService<> template to help creating native binder services
    
    Change-Id: Id980899d2647b56479f8a27c89eaa949f9209dfe
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    Add audio watchdog thread
    
    Change-Id: I4ed62087bd6554179abb8258d2da606050e762c0
    AudioFlinger uses media.log service for logging
    
    Change-Id: Ia0f8204334f6b233f644d897762a18c95d936b4b
    AudioFlinger uses media.log service for logging
    
    Change-Id: Ia0f8204334f6b233f644d897762a18c95d936b4b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Keep a copy of most recent audio played
    
    Change-Id: I6b2f97881c39998a2fae9ab79d669af6c0a37e94
    Fix race condition for non-started fast tracks
    
    This required re-implementing how fast tracks are considered active.
    Now, they use the same logic as normal tracks, except underrun is ignored.
    
    Other changes:
     - add framesReady() to AudioBufferProvider interface
     - rebased
     - add track underrun counter state to fast mixer dump state
     - move dumpsys header to Track::appendDumpHeader()
       so it closer to where tracks are dumped
     - display track state in dumpsys as a character code
     - measure and display warmup time and cycles in dumpsys
     - copy in the presentation complete code
     - add ExtendedAudioBufferProvider for framesReady() which returns size_t
     - simplify underrun tracking
     - deferred reset track after stop()
     - add comments
    
    Change-Id: I7db8821bc565230ec76da1f9380fe3fb09735e5b
    FastMixer update
    
    Updates:
     - Add support for mono fast tracks
     - Add support for optional sample rate conversion on fast tracks
     - Log sample rate and frame count
     - Enable statistics
    
    Change-Id: Ife014edf4f452da361f3eaaae19209ef6ff6958b
    Fast mixer
    
    Change-Id: I61552f83507e08e4c706076b9fb15362869e6265
    Remove timing jitter during startup of audio
    
    This fixes a regression introduced recently, that increased timing jitter
    during the startup of the FastMixer and AudioTrack callback threads.
    
    The regression was to make requestPriority() asynchronous as a way to
    avoid an apparent priority inversion in system_server.  This means that
    the target thread could run briefly with the initial priority, before
    the new priority takes effect.
    
    This change removes the startup jitter for FastMixer, by making the
    requestPriority() synchronous again for that case.  It doesn't matter
    that this restores the priority inversion involving normal mixer thread,
    because it happens during startup of both threads.
    
    The change also removes the startup jitter for the AudioTrack callback
    thread, by having the target thread check whether the requestPriority()
    has completed yet.  If not, the target thread blocks with a timeout
    until the priority boost finishes.
    
    Finally, we now log an error message if the expected priority boost
    doesn't happen.
    
    Bug: 8698989
    Change-Id: Id590e9a274b70ec1ba85b44a585ee37a22e41cbc
    Remove timing jitter during startup of audio
    
    This fixes a regression introduced recently, that increased timing jitter
    during the startup of the FastMixer and AudioTrack callback threads.
    
    The regression was to make requestPriority() asynchronous as a way to
    avoid an apparent priority inversion in system_server.  This means that
    the target thread could run briefly with the initial priority, before
    the new priority takes effect.
    
    This change removes the startup jitter for FastMixer, by making the
    requestPriority() synchronous again for that case.  It doesn't matter
    that this restores the priority inversion involving normal mixer thread,
    because it happens during startup of both threads.
    
    The change also removes the startup jitter for the AudioTrack callback
    thread, by having the target thread check whether the requestPriority()
    has completed yet.  If not, the target thread blocks with a timeout
    until the priority boost finishes.
    
    Finally, we now log an error message if the expected priority boost
    doesn't happen.
    
    Bug: 8698989
    Change-Id: Id590e9a274b70ec1ba85b44a585ee37a22e41cbc
    Use scheduling policy service
    
    Change-Id: I3c09da1dc0de5039d0c15ce7fb2bc373fa398712
    Whitespace and indentation
    
    Fix indentation to be multiple of 4.
    Make it easier to search:
      sp< not sp < to
      "switch (...)" instead of "switch(...)" (also "if" and "while")
    Remove redundant blank line at start or EOF.
    Remove whitespace at end of line.
    Remove extra blank lines where they don't add value.
    
    Use git diff -b or -w to verify.
    
    Change-Id: I966b7ba852faa5474be6907fb212f5e267c2874e
    Separate MediaRecorderClient with MediaPlayerClient
    
    - An alternative would be to define a common base class that
      both MediaRecorderClient and MediaPlayerClient can derive.
      But since the common code, onTransact() and notify() uses
      some Binder code, having a common base class may not gain
      us too much in terms of code reuse.
    
    Change-Id: Ibc06720278ad173fceacff3d267b7060856c6316
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    audioflinger: add HOTWORD audio source.
    
    HOTWORD is a special capture audio source that uses
    the same audio tuning as VOICE_RECOGNITION but allows an
    active capture to be preempted.
    
    Bug: 10640877.
    
    Change-Id: Iea09a11cbcdbacc8d434e5230e7559dcd1b44ac0
    Enforce permission for recording from remote submix.
    
    Bug: 10265163
    Change-Id: I2395036bac6e10baeaf6ea4bc3093bd9dd98742d
    Use correct pid when running under test harness
    
    This is a partial fix which addresses one of the root causes of this bug,
    but only when running under test harness.  It has no effect otherwise.
    
    Bug: 8598539
    Change-Id: I87444daef1d76b17544f331e651ba1c87893c381
    Use correct pid when running under test harness
    
    This is a partial fix which addresses one of the root causes of this bug,
    but only when running under test harness.  It has no effect otherwise.
    
    Bug: 8598539
    Change-Id: I87444daef1d76b17544f331e651ba1c87893c381
    Factor out and speed up permission-checking code
    
    Use the caching permission check for dump to save IPC.
    
    Cache getpid() to save kernel call for other permission checks.
    
    The C runtime library getpid() can't cache due to a fork
    race condition, but we know that mediaserver doesn't fork.
    
    Don't construct String16 on the stack.
    
    Change-Id: I6be6161dae5155d39ba6ed6228e7683e67be34ed
    AudioFlinger: offload playback, non-blocking write
    
    - Added specialized playback thread class for offload playback,
    derived from directoutput thread.
    This thread type handles specific state transitions for offloaded
    tracks and offloading commands (pause/resume/drain/flush..) to audio HAL.
    As opposed to other threads, does not go to standby if the track is paused.
    
    - Added support for asynchronous write and drain operations at audio HAL.
    Use a thread to handle async callback events from HAL: this avoids locking
    playback thread mutex when executing the callback and cause deadlocks when
    calling audio HAL functions with the playback thread mutex locked.
    
    - Better accouting for track activity: call start/stop and release Output
    methods in audio policy manager when tracks are actually added and removed
    from the active tracks list.
    Added a command thread in audio policy service to handle stop/release commands
    asynchronously and avoid deadlocks with playback thread.
    
    - Track terminated status is not a state anymore. This condition is othogonal
    to state to permitted state transitions while terminated.
    
    Change-Id: Id157f4b3277620568d8eace7535d9186602564de
    Public API changes for audio offload support.
    
    NOTE: this does _not_ include all private member variables added
    to classes as part of offload support. Only public/protected functions
    and stubs functions/variables needed to make the changes buildable.
    
    - isOffloadSupported() added to audio policy service
        A stub implementation is required to build, this always returns false
    - setParameters() added to IAudioTrack
        A stub implementation is required to build, this always returns
        INVALID_OPERATION
    
    - CBlk flag for stream end
    
    - Change AudioSystem::getRenderPosition() to take an audio_output_t
        so caller can specify which output to query
    
    - Add AudioSystem::isOffloadSupported()
        This is fully implemented down to the AudioFlinger function
        AudioPolicyServer::isOffloadSupported() which is just a stub
        that always returns false.
    
    - Add EVENT_STREAM_END to AudioTrack interface.
        STREAM_END is used to signal when the hardware has actually finished
        playing all the data it was sent.
    
    - Add event type enumeration to media player interface AudioSink callbacks
        so that the same callback can be used to handle multiple types of
        event. For offloaded tracks we also have to handle STREAM_END and
        TEAR_DOWN events
    
    - Pass audio_offload_info_t to various functions used for opening outputs,
        tracks and audio players. This passes additional information about the
        compressed stream down to the HAL when using offload.
        For publicly-available APIs this is an optional parameter (for some of
        the internal and low-level APIs around the HAL interface it is mandatory)
    
    - Add getParameters() and setParameters() API to AudioTrack
        Currently dummy implementations.
    
    - Change AudioPlayer contructor so that it takes a set of bitflags defining what
        options are required. This replaces the original bool which only specified
        whether to use deep buffering.
    
    - Changes to StageFright class definition related to handling tearing-down of
        an offloaded track when we need to switch back to software decode
    
    - Define new StageFright utility functions used for offloaded tracks
        Currently dummy implementations.
    
    - AudioFlinger changes to use extended audio_config_t.
        Fills in audio_offload_info_t member if this info is passed in when
        opening an output.
    
    - libvideoeditor changes required to add the new event type parameter
        to AudioSink callback functions
    
    - libmediaplayerservice changes required to add the new event type parameter
        to AudioSink callback functions
    
    Change-Id: I3ab41138aa1083d81fe83b886a9b1021ec7320f1
    Signed-off-by: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
    Signed-off-by: Eric Laurent <elaurent@google.com>
    make libaudioflinger symbols visibility hidden
    
    we export only symbols needed by clients of this library.
    this saves about 130KB (1/3rd of the lib size)
    
    Change-Id: Id81f3ecb299ee3abc0811915cf6efe87180bf15c
    Add support for querying if a stream is active remotely
    
    Bug 7485803
    
    Change-Id: I0744374f130fd2dd0714102354cffed2fa915361
    Add support for querying if a stream is active remotely
    
    Bug 7485803
    
    Change-Id: I0744374f130fd2dd0714102354cffed2fa915361
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Support querying active record sources
    
    Add support for querying whether there is currently a recording
     underway from the specified audio source.
    
    Bug 7314859
    
    Change-Id: I986b231a10ffd368b08ec2f9c7f348d28eaeb892
    Support querying active record sources
    
    Add support for querying whether there is currently a recording
     underway from the specified audio source.
    
    Bug 7314859
    
    Change-Id: I986b231a10ffd368b08ec2f9c7f348d28eaeb892
    effect_descriptor_t const correctness
    
    Change-Id: Iad008f20d35a18acf500f773900164552fd0c19e
    Use audio_channel_mask_t more places
    
    Use it in AudioSystem::getOutput(), AudioSystem::getInput(),
    IAudioPolicyService::getOutput(), IAudioPolicyService::getInput(),
    and various other places in AudioFlinger.
    
    Not done: AudioTrack and OutputDescriptor.
    
    Change-Id: I70e83455820bd8f05dafd30c63d636c6a47cd172
    Remove acoustics from AudioSystem::getInput()
    
    Change-Id: I29fb3ee5664c1f0ee0409c1bb2be087ecca637db
    rename audio policy output flags
    
    Change-Id: I27c46bd1d1b2b5f96b87af7d05b951fef18a1312
    Whitespace and indentation
    
    Fix indentation to be multiple of 4.
    Make it easier to search:
      sp< not sp < to
      "switch (...)" instead of "switch(...)" (also "if" and "while")
    Remove redundant blank line at start or EOF.
    Remove whitespace at end of line.
    Remove extra blank lines where they don't add value.
    
    Use git diff -b or -w to verify.
    
    Change-Id: I966b7ba852faa5474be6907fb212f5e267c2874e
    AudioPolicyService InputDesc minor cleanup
    
    Add a non-default constructor to set the mSessionId, and make mSessionId const.
    
    Remove explicit clear on mEffects - it is automatically cleared by the destructor.
    
    AudioPolicyService::setPreProcessorEnabled:
     - parameter is const *
     - use an alias instead of making a Vector copy
    
    Destructor doesn't need to be virtual since there are no subclasses.
    
    Change-Id: Ibc3c3bea8259839430b1cf5356186c7d96f1082f
    audio policy: use audio_devices_t when appropriate
    
    Change-Id: I1b3a5879e81c789fb53d356af3d3a1ee2dca955f
    renamed audio policy output flag.
    
    Renamed AUDIO_POLICY_OUTPUT_FLAG_INDIRECT to AUDIO_POLICY_OUTPUT_FLAG_NONE
    which is more appropriate.
    
    Change-Id: Ia14d60397df0f2dcd9bea0186400a09da35bc104
    Fixed possible heap corruption in EffectDesc
    
    "EffectDesc *effect = new EffectDesc(*effects[i]);" was relying on the
    default copy constructor for EffectDesc, but the default copy constructor
    does a member-by-member copy.  This works OK for mUuid, but a member
    copy of mName and mParams shares pointers.  This could result in heap
    corruption later on due to a double free.  Changed to add an explicit
    copy constructor that does a deep copy of both mName and mParams.
    
    A malloc() and strdup() were being freed by delete, but the correct
    matching API for these is free().  Fortunately our current memory runtime
    implementation ignores the difference. Changed to use free().
    
    EffectDesc and InputSourceDesc member fields were being torn down by
    the code that does delete.  Changed to do the tear-down in ~EffectDesc()
    and ~InputSourceDesc().
    
    Added constructor EffectDesc() with name and UUID parameters, rather
    than having caller fill in the object after construction.
    
    Made ~EffectDesc() and ~InputSourceDesc() non-virtual to save memory,
    since they have no subclasses.
    
    Change-Id: Ibb5cc2e6760d72e0c4cf537068ac4432c717bafd
    Use audio_io_handle_t consistently instead of int
    
    Other:
     - add a comment to nextUniqueId
     - made ThreadBase::mId const, since it is only assigned in constructor.
    
    Change-Id: I4e8b7bec4e45badcde6274d574b8a9aabd046837
    Use ToneGenerator::tone_type consistently
    
    Also remove defaults in startToneCommand(), they're not needed and the
    default for tone type was nonsense.
    
    Change-Id: I70fa8cee4f3dbb8c66ceb3719c8d3d2f447f05b9
    Use audio_in_acoustics_t consistently
    
    Change-Id: I0a9dd668fb2e57b1c3ece3190588194974b99062
    Use audio_source_t consistently
    
    Was a mix of audio_source_t, uint8_t, and int.
    
    Related fixes:
     - fix comments in MediaRecorder.java
     - AudioPolicyService server side was not checking source parameter at
       all, so if the client wrapper was bypassed, invalid values could be
       passed into audio HAL
     - JNI android_media_AudioRecord_setup was checking source for positive
       values, but not negative values. This test is redundant, since already
       checked at Java and now checked by AudioPolicyService also, but might
       as well make it correct.
    
    Change-Id: Ie5e25d646dcd59a86d7985aa46cfcb4a1ba64a4a
    Use audio_format_t consistently, continued
    
    Was int or uint32_t.
    
    When AudioFlinger::format can't determine the correct format,
    return INVALID rather than DEFAULT.
    
    Init mFormat to INVALID rather than DEFAULT in the constructor.
    Subclass constructors will set mFormat to the correct value.
    
    Change-Id: I9b62640aa107d24d2d27925f5563d0d7407d1b73
    Use const const strings for arrays and pointers to strings
    
    Change-Id: I0a073e17ebf6ad59e7edbedac104c6fa4bcaf9c9
    Remove dead setRingerMode(mode, mask)
    
    Change-Id: Ia4cc8be8424a40b3dcb7ebd0264fdff4e5247f7f
    audio framework: manage stream volume per device
    
    Improve volume management by keeping track of volume for each type
    of device independently.
    Volume for each stream (MUSIC, RINGTONE, VOICE_CALL...) is now maintained
    per device.
    
    The main changes are:
    - AudioService now keeps tracks of stream volumes per device:
     volume indexes are kept in a HashMap < device , index>.
     active device is queried from policy manager when a volume change request
     is received
     initalization, mute and unmute happen on all device simultaneously
    - Settings: suffixes is added to volume keys to store each device
    volume independently.
    - AudioSystem/AudioPolicyService/AudioPolicyInterface: added a device argument
    to setStreamVolumeIndex() and getStreamVolumeIndex() to address each
    device independently.
    - AudioPolicyManagerBase: keep track of stream volumes for each device
    and apply volume according to current device selection.
    
    Change-Id: I61ef1c45caadca04d16363bca4140e0f81901b3f
    Use audio_stream_type_t consistently
    
    At native level it was a mixture of audio_stream_type_t, int, uint32_t,
    and uint8_t.  Java is still int.  Also fixed a couple of hard-coded -1
    instead of AUDIO_STREAM_DEFAULT, and in startToneCommand a hard-coded 0
    instead of AUDIO_STREAM_VOICE_CALL.
    
    Change-Id: Ia33bfd70edca8c2daec9052984b369cd8eee2a83
    Use audio_mode_t consistently
    
    It was int or uint32_t.
    Also make getMode() const.
    
    Change-Id: Ibe45aadbf413b9158e4dd17f2b3bcc6355288d37
    Fix includes
    
    Remove unused #include dlfcn.h
    
    Add #include String8.h
    Forward class declaration is only for references and pointers.
    In this case, we need the full class declaration,
    and were incorrectly depending on another header file to do it.
    
    Change-Id: Iff65cceb3982698cc1ebaeec405695fc190c03ff
    Audio effects: track CPU and memory use separately
    
    Before this change, CPU and memory usage for an audio effect were
    registered and checked against the limit by audio policy manager
    upon effect instantiation. Even if an effect was not enabled
    it would prevent another effect to be created if the CPU load budget
    was exceeded, which was too restrictive.
    
    This change adds a method to register/unregister CPU load only when
    an effect is enabled or disabled.
    It also adds a mechanism to place all effects on the global output mix
    in suspend state (disabled) when an effect is enabled on a specific session.
    This will allow applications using session effects to have the priority
    over others using global effects.
    
    Also fixes some issues with suspend/restore mechanism:
    - avoid taking actions when an effect is disconnected and was not enabled.
    - do not remove a session from the suspended sessions list when corresponding
    effect chain is destroyed.
    
    Change-Id: I5225278aba1ae13d0d0997bfe26a0c9fb46b17d3
    Added APIs for audio preprocessing
    
    Added APIs to control pre processes applied on captured audio.
    Those APIs are still hidden until reviewed by API council.
    
    Three types of standard pre processes are supported:
    - Automatic Gain Control (AGC) by AutomaticGainControl class
    - Acoustic Echo Cancellation (AEC) by AcousticEchoCanceler class
    - Noise Suppression (NS) by NoiseSuppressor class
    
    A method is added to AudioEffect class to query audio pre processings
    applied by default by the platform on a given AudioRecord session ID.
    
    Change-Id: I0b9fceeb8c704dd06319c3b52b85c96fe871d51d
    Audio framework: support for audio pre processing
    
    Audio effect framework is extended to suport effects on
    output and input audio path.
    
    AudioFlinger: Support for audio effects and effect chains is
    moved from PlaybackThread class to ThreadBase class so that
    RecordThread can manage effects.
    Effects of type pre processing are allowed on record thread
    only. When a pre processing is enabled, the effect interface handle is
    passed down to the input stream so that the audio HAL can call the
    process function. The record thread loop calls the effect chain process
    function that will only manage the effect state and commands and skip the
    process function.
    
    AudioRecord: The audio session is allocated before calling getInput() into
    audio policy serice so that the session is known before the input theead is
    created and pre processings can be created on the correct session.
    
    AudioPolicyService: default pre processing for a given input source are
    loaded from audio_effects.conf file.
    When an input is created, corresponding effects are created and enabled.
    
    Change-Id: Id17119e0979b4dcf189b5c7957fec30dc3478790
    audio: update for audio/audio_policy header names/locations
    
    Change-Id: I36c49352eee57559403cd1597f56a8485a360289
    Signed-off-by: Dima Zavin <dima@android.com>
    update for new audio.h header location
    
    Change-Id: Ic4c62c4037800802427eb7d3c7f5eb8b25d18876
    Signed-off-by: Dima Zavin <dima@android.com>
    audio/media: convert to using the audio HAL and new audio defs
    
    Change-Id: Ibc637918637329e4f2b62f4ac7781102fbc269f5
    Signed-off-by: Dima Zavin <dima@android.com>
    Bug 3352047 Wrong message when adjusting volume
    
    Add hidden AudioManager.getDevicesForStream and output device codes.
    
    Change-Id: I4d1c1d3b6a077cd117720817d1f733dda557b947
    Bug 3366668 Use BinderService template
    
    Change-Id: I93d7f3fc9dc9b6a365723d8a51a73a5aabdb4f93
    Fix issue 3371080
    
    Modified default volume control logic in AudioService:
    1 IN_CALL volume if in video/audio chat
    2 NOTIFICATION if notification is playing or was playing less than 5s ago.
    3 MUSIC
    
    Modified silent mode:
    - now also affect MUSIC stream type
    - entering silent mode when VOL- hard key is pressed once while selected
    stream volume is already at 0 (except for VOICE_CALL stream).
    - exiting silent mode when pressing VOL+ hard key while in silent mode
    
    Play sound FX (audible selections, keyboard clicks) at a fixed volume.
    
    Modified audio framework:
    - isStreamActive() method now implemented in AudioPolicyManagerBase (previously AudioFlinger)
    - iStreamActive() now specifies a time window during which the stream is considered
    active after it actually stopped.
    
    Change-Id: I7e5a0724099450b9fc90825224180ac97322785f
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    Audio policy manager changes for audio effects
    
    Added methods for audio effects management by audio policy manager.
    - control of total CPU load and memory used by effect engines
    - selection of output stream for global effects
    - added audio session id in parameter list for startOutput() and stopOutput().
    this is not used in default audio policy manager implementation.
    
    Modifications of audio effect framework in AudioFlinger to allow moving and reconfiguring
    effect engines from one output mixer thread to another when audio tracks in the same session
    are moved or when requested by audio policy manager.
    Also fixed mutex deadlock problem with effect chains locks.
    
    Change-Id: Ida43484b06e9b890d6b9e53c13958d042720ebdb
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    Fix build warnings
    
    Change-Id: I9e3cfa0c6b3467fe763ce55f759d179f02c5deea
    Fix build warnings
    
    Change-Id: I9e3cfa0c6b3467fe763ce55f759d179f02c5deea
    New VHQ resampler
    
    Squashed commit of the following:
    
    commit 12b6952da9f25e94d06dd7185bce255924e7e791
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 19 15:27:26 2012 -0800
    
        fix a typo in SINC resampler that prevented tracks to be mixed
    
        we were always erasing the current mix instead of mixing into it.
    
        Change-Id: Ib229245f9e5a0d384f1727640a59e9f0469211a2
    
    commit 0019ce082df430278f14ab922e900ce33b64897d
    Author: Dave Bort <dbort@google.com>
    Date:   Tue Nov 13 01:30:32 2007 -0800
    
        Rename "TARGET" to "MODULE" in the build system.
    
        Part one of the grand renaming.
    
        API_CHANGE: Third parties may need to update their makefiles.
        Any variables with "LOCAL" and "TARGET" in their names
        should now use "MODULE" instead of "TARGET"; e.g., LOCAL_MODULE,
        LOCAL_MODULE_TAGS.
    
        PRESUBMIT=passed
        OCL=39840
    
        Change-Id: Ica9a7937d3d9552ab84db46ac6eea8a290e404fe
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit f01adc0cef0e39e75c76d9195ac26a94cac0a100
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Wed Nov 14 08:32:08 2012 -0800
    
        Fix build warnings
    
        Change-Id: Ic43bcca166a529a6431711b05a7fa21849b6a38b
    
    commit 9bb031a565c753a03d9c9397edea318947d80528
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 04:44:30 2012 -0800
    
        more optimizations...
    
        calculate the offsets from the phase differently, this happens
        to reduce the register pressure in the main loop, which in turns
        allows the compiler to generate much better code (doesn't need
        to spill a lot of stuff on the stack).
    
        this gives another 15% performance increase
    
        Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    
    commit 5a951598f31217b8cd2babd0720c9608ee17291a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 03:26:39 2012 -0800
    
        refactor code to improve neon code
    
        we want to make sure we don't transfer data from the
        neon unit to the arm register file, as this can be quite
        slow. instead we do all the calculation on the neon side
        and write the result directly to main memory.
    
        Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    
    commit b381ee9e83bc9fd18986e79c7809841514ed590e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 15:16:13 2012 -0800
    
        NEON optimized SINC resampler
    
        this currently gives us a 60% to 80% boost depending
        on the quality level selected.
    
        Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    
    commit bea077354210242ea193a50b0dbab0fedab25df3
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 5 01:51:37 2012 -0800
    
        minor cleanups
    
        Change-Id: Ia12ee4fb59e90221761bec85e6450db29197591f
    
    commit 8f4ed7decbe161a5ff38200b218f5216d80aba46
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 18:49:14 2012 -0800
    
        improve resample test
    
        - handle stereo input
        - input file can now be ommited, in this case
          a linear chirp will be used automatically
        - better usage information
    
        Change-Id: I5d62a6c26a9054a1c1a517a065b4df5a2cdcda22
    
    commit 5fcd634ea6cb4df27c495abe20f5f9b8ff55d128
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 02:03:49 2012 -0800
    
        change how we store the FIR coefficients
    
        The coefficient table is now transposed and shows
        much better its polyphase nature: we now have a FIR
        per line, each line corresponding to a phase.
    
        This doesn't change at all the results produced by
        the filter, but allows us to make slightly better
        use of the data cache and improves performance a bit
        (although not as much as I thought it would).
    
        The main benefit is that it is the first step
        before we can make much larger optimizations
        (like using NEON).
    
        Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    
    commit d652231abf4c7e2ea1fc89caae730cec1f7259a1
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 3 23:37:53 2012 -0700
    
        improve SINC resampler performance
    
        The improvement is about 60% by just tweaking a few
        things to help the compiler generate better code.
        It turns out that inlining too much stuff manually was hurting us.
    
        Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    
    commit 9dc68ef5b94c700c4ee68790e8cbb334c90a538d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Nov 1 21:03:46 2012 -0700
    
        new coefficients for the vhq resampler
    
        previous coefficients were provided by a 3rd party and didn't have a
        way to re-generate them. we're now using the 'fir' utility.
    
        the performance of the filter is virtually identical, except for
        the down-sampling case which seems slightly better now:
           It looks like both the previous and new coefficients are generating
        some sort of clipping for full-scale signals in the down-sampling case
        (although the new ones seem better), the reason for that is
        unknown (see bug: 7453062)
    
        Also updated the HQ coefficients for the down-samplers, previous ones
        were a little bit too conservative -- the new ones push the cut-off
        frequency up by about 1 KHz.
    
        Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    
    commit 38e0b8560a6fc1b7124e22e0e09a84a285182f8e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 13:51:44 2012 -0700
    
        fix SINC resampler on non ARM architectures
    
        make sure the C version of the code generates the same
        output than the ARM assemply version.
    
        Change-Id: Ide218785c35d02598b2d7278e646b1b178148698
    
    commit a1878128b182696ba508569b4d211d0dfae92463
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 12:49:07 2012 -0700
    
        fix another issue with generating FIR coefficients
    
        the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
        missing the 2*f scale factor. This explains why we were seeing
        clipping and had to manually scale the filter down.
    
        Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    
    commit 1a0fb993430acc9f601e6c538305bc407c20ac5d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:20 2012 -0700
    
        fir a typo that caused up-sampling coefficiens to be wrong
    
        up-sample coefficient were generated with a cut-off frequency of 24KHz
        intead of ~20KHz, which caused more aliasing in the audible band.
    
        also increased the attenuation to 1.3 dB on both up and down
        sampling coefficient to avoid clipping.
    
        Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    
    commit 9520ad6862bd682ad075a9d9e3e94ada9f6e58b6
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:16 2012 -0700
    
        test-resample: clip instead of overflowing
    
        Change-Id: I550e5a59e51c11e1095ca338222b094f92b96878
    
    commit ba36656300f250f7f1fdeb75149749344260e6cb
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 01:01:38 2012 -0700
    
        a test app for the resamplers
    
        Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    
    commit 056a08b9bfd33cf27228c992adc8293a56b01be8
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 14:11:01 2012 -0700
    
        reenable the cubic resampler
    
        cubic resampler was disabled because it hadn't been qualified,
        however after I did some tests, it does improve significantly
        the sound quality over the order-1 resampler, even if it is
        still quite bad.
    
        also HIGH_QUALITY resampler was partially disabled, it's now
        fully enabled. It's a big improvement over the cubic resampler
        in terms of aliasing noise (it's not as good in the pass-band).
    
        Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    
    commit 8c0241d3ff50ae85167f69b3bd369244894cfa44
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 13:48:42 2012 -0700
    
        improve SINC resampler coefficients
    
        - we increase the interpolation precision from 4 to 7 bits
        this doesn't increase CPU power required, it only increases the
        size of the filter table but significantly reduces the noise
        introduced by the quantization of the impulse response.
    
        - the parameters of the filter are set such that aliasing is
        rejected at 80 dB below 20 KHz. Because we don't use a lot of
        coefficient (to save compute power), there are quite a bit of
        attenuation in the pass-band: starting at 9KHz for the
        down-sampler (48 to 44.1), and starting at 13 KHz for the
        up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
        Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    
    commit 69e7dab2192adc1f780464146810629ebd01b145
    Author: Pixelflinger <mathias.agopian@gmail.com>
    Date:   Thu Oct 25 19:43:49 2012 -0700
    
        improve fir tool: cleanup, better default, bug fixes
    
        - all parameters can be changed on the command-line
        - added float output
        - added debug option
        - added an option to generate a polyphase filter coefficients
        - added an attenuation option in dBFS
        - added a lot of comments and references
        - fixed kaiser window parameter
    
        also the default should generate a filter with 80 dB rejection
        (of the 24 KHz aliasing) above 20 KHz and a 15 KHz transition
        band around ~20 KHz (for 48 KHz sampling rate).
        It's not very good but corresponds to the current code.
    
    commit 8347499d105a50257c18e9dac652e750b06428b1
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Mon Oct 22 17:09:27 2012 -0700
    
        Increase allowed number of VHQ resamplers to 3
    
        Bug: 7378660
        Change-Id: I69e33ca2eb4bb9bd38e2c63df62cd1130d68baf6
    
    commit f91cf3cad7f5c4d52614271c89ab468741c5d24c
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 03:04:05 2012 -0700
    
        Fix a typo that caused the high quality resampler to produce garbage
    
        the problem is that if libaudio_resampler is present, it is those
        coefficients that will always be selected, but the correct
        meta-data.
    
        Bug: 7385994
        Change-Id: Ieebeb37b4dfb62a1a051bc29fae2ce056dbc6621
    
    commit e158a9e4262a174c59469a205658bc3ca4078234
    Author: Dan Bornstein <danfuzz@google.com>
    Date:   Fri Oct 3 10:34:57 2008 -0700
    
        Manually merge change #111620 from tc3 to mainline, to keep the
    
        automerger from choking on it.
    
        p4 sync
        p4 integrate -r -b android_to_tc3 //...@111620,111620
        p4 resolve -a
        p4 resolve     # resolve a couple merge travesties
    
        PRESUBMIT=passed
        BUG=1399648
        TBR=edheyl
        OCL=111902
    
        Change-Id: I854b01553dd92bbf9c864f5a9bd51a3d665f0ac2
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b9f3c26032be7a6ea01a10d93d94826f449e68ab
    Author: Dave Bort <dbort@google.com>
    Date:   Fri Jan 18 14:51:05 2008 -0800
    
        Rename "Makefile" to "Android.mk" throughout the tree.
    
        For <http://b/issue?id=960416>.
    
        I've tested this as much as I can, but 1500 open files =
        easy to mess things up.  Please let me know if there's
        a problem rather than rolling back this change.
    
        PRESUBMIT=passed
        BUG=960416
        TBR=joeo
        OCL=46537
    
        Change-Id: I5a404caf0f398a7afa7ae7abaf2f2a1c6ab490eb
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 0c22a9a44c4103483fba1d944acf1354c5eb1617
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 23:44:25 2007 -0700
    
        Tweak the SINC resampler parameters and double the performance. It's using about 10% CPU in the worse case now.
    
        Change-Id: I50ac7e6c6702a427fa36ab6d976c507155057507
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b85e41487983ad085b859acf8251e7e54480308a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 04:34:36 2007 -0700
    
        A sinc resampler for Audioflinger. It's not enabled yet, but fully functional and apparently working. It need more "quality" tests. In the 48->44 KHz, it takes about 25% of the CPU time.
    
        Change-Id: I80eb5185e13ebdb907e0b85c49ba1272c23d60ec
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit ba3949ef17cac2ba71cc3096c413782a49c922e5
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 21:01:28 2007 -0700
    
        fix a few small typos in the FIR computation
    
        Change-Id: I6e56b514fe520f30f7487f85c64ea5d2a7c19b40
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 7474bfa7de2604021963794dddfe44985648db6a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 03:16:02 2007 -0700
    
        This is a tool to compute the the reconstruction filter coefficients for a sinc audio resampler.
    
        Change-Id: I99be2505139b8e0e7647200e1647509d4f7e6067
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    Bug: 7577965
    Change-Id: I2c84a9283a1668723bad83e1a119c849c88c3e6b
    New VHQ resampler
    
    Squashed commit of the following:
    
    commit 12b6952da9f25e94d06dd7185bce255924e7e791
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 19 15:27:26 2012 -0800
    
        fix a typo in SINC resampler that prevented tracks to be mixed
    
        we were always erasing the current mix instead of mixing into it.
    
        Change-Id: Ib229245f9e5a0d384f1727640a59e9f0469211a2
    
    commit 0019ce082df430278f14ab922e900ce33b64897d
    Author: Dave Bort <dbort@google.com>
    Date:   Tue Nov 13 01:30:32 2007 -0800
    
        Rename "TARGET" to "MODULE" in the build system.
    
        Part one of the grand renaming.
    
        API_CHANGE: Third parties may need to update their makefiles.
        Any variables with "LOCAL" and "TARGET" in their names
        should now use "MODULE" instead of "TARGET"; e.g., LOCAL_MODULE,
        LOCAL_MODULE_TAGS.
    
        PRESUBMIT=passed
        OCL=39840
    
        Change-Id: Ica9a7937d3d9552ab84db46ac6eea8a290e404fe
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit f01adc0cef0e39e75c76d9195ac26a94cac0a100
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Wed Nov 14 08:32:08 2012 -0800
    
        Fix build warnings
    
        Change-Id: Ic43bcca166a529a6431711b05a7fa21849b6a38b
    
    commit 9bb031a565c753a03d9c9397edea318947d80528
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 04:44:30 2012 -0800
    
        more optimizations...
    
        calculate the offsets from the phase differently, this happens
        to reduce the register pressure in the main loop, which in turns
        allows the compiler to generate much better code (doesn't need
        to spill a lot of stuff on the stack).
    
        this gives another 15% performance increase
    
        Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    
    commit 5a951598f31217b8cd2babd0720c9608ee17291a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 03:26:39 2012 -0800
    
        refactor code to improve neon code
    
        we want to make sure we don't transfer data from the
        neon unit to the arm register file, as this can be quite
        slow. instead we do all the calculation on the neon side
        and write the result directly to main memory.
    
        Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    
    commit b381ee9e83bc9fd18986e79c7809841514ed590e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 15:16:13 2012 -0800
    
        NEON optimized SINC resampler
    
        this currently gives us a 60% to 80% boost depending
        on the quality level selected.
    
        Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    
    commit bea077354210242ea193a50b0dbab0fedab25df3
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 5 01:51:37 2012 -0800
    
        minor cleanups
    
        Change-Id: Ia12ee4fb59e90221761bec85e6450db29197591f
    
    commit 8f4ed7decbe161a5ff38200b218f5216d80aba46
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 18:49:14 2012 -0800
    
        improve resample test
    
        - handle stereo input
        - input file can now be ommited, in this case
          a linear chirp will be used automatically
        - better usage information
    
        Change-Id: I5d62a6c26a9054a1c1a517a065b4df5a2cdcda22
    
    commit 5fcd634ea6cb4df27c495abe20f5f9b8ff55d128
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 02:03:49 2012 -0800
    
        change how we store the FIR coefficients
    
        The coefficient table is now transposed and shows
        much better its polyphase nature: we now have a FIR
        per line, each line corresponding to a phase.
    
        This doesn't change at all the results produced by
        the filter, but allows us to make slightly better
        use of the data cache and improves performance a bit
        (although not as much as I thought it would).
    
        The main benefit is that it is the first step
        before we can make much larger optimizations
        (like using NEON).
    
        Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    
    commit d652231abf4c7e2ea1fc89caae730cec1f7259a1
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 3 23:37:53 2012 -0700
    
        improve SINC resampler performance
    
        The improvement is about 60% by just tweaking a few
        things to help the compiler generate better code.
        It turns out that inlining too much stuff manually was hurting us.
    
        Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    
    commit 9dc68ef5b94c700c4ee68790e8cbb334c90a538d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Nov 1 21:03:46 2012 -0700
    
        new coefficients for the vhq resampler
    
        previous coefficients were provided by a 3rd party and didn't have a
        way to re-generate them. we're now using the 'fir' utility.
    
        the performance of the filter is virtually identical, except for
        the down-sampling case which seems slightly better now:
           It looks like both the previous and new coefficients are generating
        some sort of clipping for full-scale signals in the down-sampling case
        (although the new ones seem better), the reason for that is
        unknown (see bug: 7453062)
    
        Also updated the HQ coefficients for the down-samplers, previous ones
        were a little bit too conservative -- the new ones push the cut-off
        frequency up by about 1 KHz.
    
        Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    
    commit 38e0b8560a6fc1b7124e22e0e09a84a285182f8e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 13:51:44 2012 -0700
    
        fix SINC resampler on non ARM architectures
    
        make sure the C version of the code generates the same
        output than the ARM assemply version.
    
        Change-Id: Ide218785c35d02598b2d7278e646b1b178148698
    
    commit a1878128b182696ba508569b4d211d0dfae92463
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 12:49:07 2012 -0700
    
        fix another issue with generating FIR coefficients
    
        the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
        missing the 2*f scale factor. This explains why we were seeing
        clipping and had to manually scale the filter down.
    
        Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    
    commit 1a0fb993430acc9f601e6c538305bc407c20ac5d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:20 2012 -0700
    
        fir a typo that caused up-sampling coefficiens to be wrong
    
        up-sample coefficient were generated with a cut-off frequency of 24KHz
        intead of ~20KHz, which caused more aliasing in the audible band.
    
        also increased the attenuation to 1.3 dB on both up and down
        sampling coefficient to avoid clipping.
    
        Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    
    commit 9520ad6862bd682ad075a9d9e3e94ada9f6e58b6
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:16 2012 -0700
    
        test-resample: clip instead of overflowing
    
        Change-Id: I550e5a59e51c11e1095ca338222b094f92b96878
    
    commit ba36656300f250f7f1fdeb75149749344260e6cb
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 01:01:38 2012 -0700
    
        a test app for the resamplers
    
        Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    
    commit 056a08b9bfd33cf27228c992adc8293a56b01be8
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 14:11:01 2012 -0700
    
        reenable the cubic resampler
    
        cubic resampler was disabled because it hadn't been qualified,
        however after I did some tests, it does improve significantly
        the sound quality over the order-1 resampler, even if it is
        still quite bad.
    
        also HIGH_QUALITY resampler was partially disabled, it's now
        fully enabled. It's a big improvement over the cubic resampler
        in terms of aliasing noise (it's not as good in the pass-band).
    
        Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    
    commit 8c0241d3ff50ae85167f69b3bd369244894cfa44
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 13:48:42 2012 -0700
    
        improve SINC resampler coefficients
    
        - we increase the interpolation precision from 4 to 7 bits
        this doesn't increase CPU power required, it only increases the
        size of the filter table but significantly reduces the noise
        introduced by the quantization of the impulse response.
    
        - the parameters of the filter are set such that aliasing is
        rejected at 80 dB below 20 KHz. Because we don't use a lot of
        coefficient (to save compute power), there are quite a bit of
        attenuation in the pass-band: starting at 9KHz for the
        down-sampler (48 to 44.1), and starting at 13 KHz for the
        up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
        Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    
    commit 69e7dab2192adc1f780464146810629ebd01b145
    Author: Pixelflinger <mathias.agopian@gmail.com>
    Date:   Thu Oct 25 19:43:49 2012 -0700
    
        improve fir tool: cleanup, better default, bug fixes
    
        - all parameters can be changed on the command-line
        - added float output
        - added debug option
        - added an option to generate a polyphase filter coefficients
        - added an attenuation option in dBFS
        - added a lot of comments and references
        - fixed kaiser window parameter
    
        also the default should generate a filter with 80 dB rejection
        (of the 24 KHz aliasing) above 20 KHz and a 15 KHz transition
        band around ~20 KHz (for 48 KHz sampling rate).
        It's not very good but corresponds to the current code.
    
    commit 8347499d105a50257c18e9dac652e750b06428b1
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Mon Oct 22 17:09:27 2012 -0700
    
        Increase allowed number of VHQ resamplers to 3
    
        Bug: 7378660
        Change-Id: I69e33ca2eb4bb9bd38e2c63df62cd1130d68baf6
    
    commit f91cf3cad7f5c4d52614271c89ab468741c5d24c
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 03:04:05 2012 -0700
    
        Fix a typo that caused the high quality resampler to produce garbage
    
        the problem is that if libaudio_resampler is present, it is those
        coefficients that will always be selected, but the correct
        meta-data.
    
        Bug: 7385994
        Change-Id: Ieebeb37b4dfb62a1a051bc29fae2ce056dbc6621
    
    commit e158a9e4262a174c59469a205658bc3ca4078234
    Author: Dan Bornstein <danfuzz@google.com>
    Date:   Fri Oct 3 10:34:57 2008 -0700
    
        Manually merge change #111620 from tc3 to mainline, to keep the
    
        automerger from choking on it.
    
        p4 sync
        p4 integrate -r -b android_to_tc3 //...@111620,111620
        p4 resolve -a
        p4 resolve     # resolve a couple merge travesties
    
        PRESUBMIT=passed
        BUG=1399648
        TBR=edheyl
        OCL=111902
    
        Change-Id: I854b01553dd92bbf9c864f5a9bd51a3d665f0ac2
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b9f3c26032be7a6ea01a10d93d94826f449e68ab
    Author: Dave Bort <dbort@google.com>
    Date:   Fri Jan 18 14:51:05 2008 -0800
    
        Rename "Makefile" to "Android.mk" throughout the tree.
    
        For <http://b/issue?id=960416>.
    
        I've tested this as much as I can, but 1500 open files =
        easy to mess things up.  Please let me know if there's
        a problem rather than rolling back this change.
    
        PRESUBMIT=passed
        BUG=960416
        TBR=joeo
        OCL=46537
    
        Change-Id: I5a404caf0f398a7afa7ae7abaf2f2a1c6ab490eb
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 0c22a9a44c4103483fba1d944acf1354c5eb1617
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 23:44:25 2007 -0700
    
        Tweak the SINC resampler parameters and double the performance. It's using about 10% CPU in the worse case now.
    
        Change-Id: I50ac7e6c6702a427fa36ab6d976c507155057507
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b85e41487983ad085b859acf8251e7e54480308a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 04:34:36 2007 -0700
    
        A sinc resampler for Audioflinger. It's not enabled yet, but fully functional and apparently working. It need more "quality" tests. In the 48->44 KHz, it takes about 25% of the CPU time.
    
        Change-Id: I80eb5185e13ebdb907e0b85c49ba1272c23d60ec
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit ba3949ef17cac2ba71cc3096c413782a49c922e5
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 21:01:28 2007 -0700
    
        fix a few small typos in the FIR computation
    
        Change-Id: I6e56b514fe520f30f7487f85c64ea5d2a7c19b40
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 7474bfa7de2604021963794dddfe44985648db6a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 03:16:02 2007 -0700
    
        This is a tool to compute the the reconstruction filter coefficients for a sinc audio resampler.
    
        Change-Id: I99be2505139b8e0e7647200e1647509d4f7e6067
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    Bug: 7577965
    Change-Id: I2c84a9283a1668723bad83e1a119c849c88c3e6b
    fix a typo in SINC resampler that prevented tracks to be mixed
    
    we were always erasing the current mix instead of mixing into it.
    
    Change-Id: Ib229245f9e5a0d384f1727640a59e9f0469211a2
    fix a typo in SINC resampler that prevented tracks to be mixed
    
    we were always erasing the current mix instead of mixing into it.
    
    Change-Id: Ib229245f9e5a0d384f1727640a59e9f0469211a2
    more optimizations...
    
    calculate the offsets from the phase differently, this happens
    to reduce the register pressure in the main loop, which in turns
    allows the compiler to generate much better code (doesn't need
    to spill a lot of stuff on the stack).
    
    this gives another 15% performance increase
    
    Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    more optimizations...
    
    calculate the offsets from the phase differently, this happens
    to reduce the register pressure in the main loop, which in turns
    allows the compiler to generate much better code (doesn't need
    to spill a lot of stuff on the stack).
    
    this gives another 15% performance increase
    
    Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    refactor code to improve neon code
    
    we want to make sure we don't transfer data from the
    neon unit to the arm register file, as this can be quite
    slow. instead we do all the calculation on the neon side
    and write the result directly to main memory.
    
    Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    refactor code to improve neon code
    
    we want to make sure we don't transfer data from the
    neon unit to the arm register file, as this can be quite
    slow. instead we do all the calculation on the neon side
    and write the result directly to main memory.
    
    Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    NEON optimized SINC resampler
    
    this currently gives us a 60% to 80% boost depending
    on the quality level selected.
    
    Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    NEON optimized SINC resampler
    
    this currently gives us a 60% to 80% boost depending
    on the quality level selected.
    
    Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    minor cleanups
    
    Change-Id: Ia12ee4fb59e90221761bec85e6450db29197591f
    minor cleanups
    
    Change-Id: Ia12ee4fb59e90221761bec85e6450db29197591f
    change how we store the FIR coefficients
    
    The coefficient table is now transposed and shows
    much better its polyphase nature: we now have a FIR
    per line, each line corresponding to a phase.
    
    This doesn't change at all the results produced by
    the filter, but allows us to make slightly better
    use of the data cache and improves performance a bit
    (although not as much as I thought it would).
    
    The main benefit is that it is the first step
    before we can make much larger optimizations
    (like using NEON).
    
    Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    change how we store the FIR coefficients
    
    The coefficient table is now transposed and shows
    much better its polyphase nature: we now have a FIR
    per line, each line corresponding to a phase.
    
    This doesn't change at all the results produced by
    the filter, but allows us to make slightly better
    use of the data cache and improves performance a bit
    (although not as much as I thought it would).
    
    The main benefit is that it is the first step
    before we can make much larger optimizations
    (like using NEON).
    
    Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    improve SINC resampler performance
    
    The improvement is about 60% by just tweaking a few
    things to help the compiler generate better code.
    It turns out that inlining too much stuff manually was hurting us.
    
    Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    improve SINC resampler performance
    
    The improvement is about 60% by just tweaking a few
    things to help the compiler generate better code.
    It turns out that inlining too much stuff manually was hurting us.
    
    Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    new coefficients for the vhq resampler
    
    previous coefficients were provided by a 3rd party and didn't have a
    way to re-generate them. we're now using the 'fir' utility.
    
    the performance of the filter is virtually identical, except for
    the down-sampling case which seems slightly better now:
       It looks like both the previous and new coefficients are generating
    some sort of clipping for full-scale signals in the down-sampling case
    (although the new ones seem better), the reason for that is
    unknown (see bug: 7453062)
    
    Also updated the HQ coefficients for the down-samplers, previous ones
    were a little bit too conservative -- the new ones push the cut-off
    frequency up by about 1 KHz.
    
    Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    new coefficients for the vhq resampler
    
    previous coefficients were provided by a 3rd party and didn't have a
    way to re-generate them. we're now using the 'fir' utility.
    
    the performance of the filter is virtually identical, except for
    the down-sampling case which seems slightly better now:
       It looks like both the previous and new coefficients are generating
    some sort of clipping for full-scale signals in the down-sampling case
    (although the new ones seem better), the reason for that is
    unknown (see bug: 7453062)
    
    Also updated the HQ coefficients for the down-samplers, previous ones
    were a little bit too conservative -- the new ones push the cut-off
    frequency up by about 1 KHz.
    
    Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    fix SINC resampler on non ARM architectures
    
    make sure the C version of the code generates the same
    output than the ARM assemply version.
    
    Change-Id: Ide218785c35d02598b2d7278e646b1b178148698
    fix SINC resampler on non ARM architectures
    
    make sure the C version of the code generates the same
    output than the ARM assemply version.
    
    Change-Id: Ide218785c35d02598b2d7278e646b1b178148698
    fix another issue with generating FIR coefficients
    
    the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
    missing the 2*f scale factor. This explains why we were seeing
    clipping and had to manually scale the filter down.
    
    Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    fix another issue with generating FIR coefficients
    
    the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
    missing the 2*f scale factor. This explains why we were seeing
    clipping and had to manually scale the filter down.
    
    Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    fir a typo that caused up-sampling coefficiens to be wrong
    
    up-sample coefficient were generated with a cut-off frequency of 24KHz
    intead of ~20KHz, which caused more aliasing in the audible band.
    
    also increased the attenuation to 1.3 dB on both up and down
    sampling coefficient to avoid clipping.
    
    Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    fir a typo that caused up-sampling coefficiens to be wrong
    
    up-sample coefficient were generated with a cut-off frequency of 24KHz
    intead of ~20KHz, which caused more aliasing in the audible band.
    
    also increased the attenuation to 1.3 dB on both up and down
    sampling coefficient to avoid clipping.
    
    Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    improve SINC resampler coefficients
    
    - we increase the interpolation precision from 4 to 7 bits
    this doesn't increase CPU power required, it only increases the
    size of the filter table but significantly reduces the noise
    introduced by the quantization of the impulse response.
    
    - the parameters of the filter are set such that aliasing is
    rejected at 80 dB below 20 KHz. Because we don't use a lot of
    coefficient (to save compute power), there are quite a bit of
    attenuation in the pass-band: starting at 9KHz for the
    down-sampler (48 to 44.1), and starting at 13 KHz for the
    up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
    Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    improve SINC resampler coefficients
    
    - we increase the interpolation precision from 4 to 7 bits
    this doesn't increase CPU power required, it only increases the
    size of the filter table but significantly reduces the noise
    introduced by the quantization of the impulse response.
    
    - the parameters of the filter are set such that aliasing is
    rejected at 80 dB below 20 KHz. Because we don't use a lot of
    coefficient (to save compute power), there are quite a bit of
    attenuation in the pass-band: starting at 9KHz for the
    down-sampler (48 to 44.1), and starting at 13 KHz for the
    up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
    Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    Fix a typo that caused the high quality resampler to produce garbage
    
    the problem is that if libaudio_resampler is present, it is those
    coefficients that will always be selected, but the correct
    meta-data.
    
    Bug: 7385994
    Change-Id: Ieebeb37b4dfb62a1a051bc29fae2ce056dbc6621
    Fix a typo that caused the high quality resampler to produce garbage
    
    the problem is that if libaudio_resampler is present, it is those
    coefficients that will always be selected, but the correct
    meta-data.
    
    Bug: 7385994
    Change-Id: Ieebeb37b4dfb62a1a051bc29fae2ce056dbc6621
    Integrate improved coefficient sinc resampler: VHQ
    
    Summary:
    Very high quality is enabled only for 44.1 -> 48 or 48 -> 44.1,
      and uses low quality for all other use cases.
    Track estimated CPU load and throttles the quality based on load;
      as currently configured it should allow up to 2 instances of very high quality.
    Medium quality and high quality are currently disabled unless explicitly requested.
    
    Details:
    Only load .so the first time it is needed.
    Cleanup code style: formatting, indentation, whitespace.
    Restore medium quality resampler, but it is not used (see next line).
    Fix memory leak for sinc resampler.
    Check sample rate in resampler constructor.
    Add logs for debugging.
    Rename DEFAULT to DEFAULT_QUALITY for consistency with other quality levels.
    Renumber VERY_HIGH_QUALITY from 255 to 4.
    Use enum src_quality consistently.
    Improve parsing of property af.resampler.quality.
    Fix reentrancy bug - allow an instance of high quality and an instance
      of very high quality to both be active concurrently.
    
    Bug: 7229644
    Change-Id: I0ce6b913b05038889f50462a38830b61a602a9f7
    Integrate improved coefficient sinc resampler: VHQ
    
    Summary:
    Very high quality is enabled only for 44.1 -> 48 or 48 -> 44.1,
      and uses low quality for all other use cases.
    Track estimated CPU load and throttles the quality based on load;
      as currently configured it should allow up to 2 instances of very high quality.
    Medium quality and high quality are currently disabled unless explicitly requested.
    
    Details:
    Only load .so the first time it is needed.
    Cleanup code style: formatting, indentation, whitespace.
    Restore medium quality resampler, but it is not used (see next line).
    Fix memory leak for sinc resampler.
    Check sample rate in resampler constructor.
    Add logs for debugging.
    Rename DEFAULT to DEFAULT_QUALITY for consistency with other quality levels.
    Renumber VERY_HIGH_QUALITY from 255 to 4.
    Use enum src_quality consistently.
    Improve parsing of property af.resampler.quality.
    Fix reentrancy bug - allow an instance of high quality and an instance
      of very high quality to both be active concurrently.
    
    Bug: 7229644
    Change-Id: I0ce6b913b05038889f50462a38830b61a602a9f7
    audioflinger: use resample coefficients from audio-resampler library.
    
    -Add a separate quality VERY_HIGH_QUALITY in resampler
    -Use resample coefficients audio-resampler library for
     quality VERY_HIGH_QUALITY.
    -This improves the quality of resampled output.
    
    Bug: 7024293
    Change-Id: Ia44142413bed5f5963d7eab7846eec877a2415e4
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    audioflinger: use resample coefficients from audio-resampler library.
    
    -Add a separate quality VERY_HIGH_QUALITY in resampler
    -Use resample coefficients audio-resampler library for
     quality VERY_HIGH_QUALITY.
    -This improves the quality of resampled output.
    
    Bug: 7024293
    Change-Id: Ia44142413bed5f5963d7eab7846eec877a2415e4
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Whitespace and indentation
    
    Fix indentation to be multiple of 4.
    Make it easier to search:
      sp< not sp < to
      "switch (...)" instead of "switch(...)" (also "if" and "while")
    Remove redundant blank line at start or EOF.
    Remove whitespace at end of line.
    Remove extra blank lines where they don't add value.
    
    Use git diff -b or -w to verify.
    
    Change-Id: I966b7ba852faa5474be6907fb212f5e267c2874e
    Upintegrate Audio Flinger changes from ICS_AAH
    
    Bring in changes to audio flinger made to support timed audio tracks
    and HW master volume control.
    
    Change-Id: Ide52d48809bdbed13acf35fd59b24637e35064ae
    Signed-off-by: John Grossman <johngro@google.com>
    Remove aliasing
    
    Code was aliasing mBuffer as buffer, but continuing to use both buffer
    and mBuffer after that point.  This was at best misleading, and at worst
    could confuse the compiler into generating bad code.  There was no
    performance advantage to the alias, in fact removing it saves 16 bytes.
    
    Change-Id: I55023ddba465d9be82f66745b088d18af658ac60
    By convention const goes before the type specifier
    
    Change-Id: I70203abd6a6f54e5bd9f1412800cc01212157e58
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: I6ec5d2bca9b8ebc0acd395a7dd92e1a48fcdfa9b
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    undo reset to ics-mr1 until we have a better method
    reset to ics-mr1, but keep history
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: Id78bba8c002131d8b52b4170259a87fd94e63c73
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    Add NOTICE and MODULE_LICENSE_APACH2 to libs build under /frameworks/av/
    
    Change-Id: I0a3af3e2abdedebd5934f3d941d01c32cfc75e26
    related-to-bug: 6647465
    Add NOTICE and MODULE_LICENSE_APATCH2 to libvideoeditor
    
    Change-Id: I19308c5fb0f39f8e696092186f4386e3dad06894
    related-to-bug: 6647465
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Remove timing jitter during startup of audio
    
    This fixes a regression introduced recently, that increased timing jitter
    during the startup of the FastMixer and AudioTrack callback threads.
    
    The regression was to make requestPriority() asynchronous as a way to
    avoid an apparent priority inversion in system_server.  This means that
    the target thread could run briefly with the initial priority, before
    the new priority takes effect.
    
    This change removes the startup jitter for FastMixer, by making the
    requestPriority() synchronous again for that case.  It doesn't matter
    that this restores the priority inversion involving normal mixer thread,
    because it happens during startup of both threads.
    
    The change also removes the startup jitter for the AudioTrack callback
    thread, by having the target thread check whether the requestPriority()
    has completed yet.  If not, the target thread blocks with a timeout
    until the priority boost finishes.
    
    Finally, we now log an error message if the expected priority boost
    doesn't happen.
    
    Bug: 8698989
    Change-Id: Id590e9a274b70ec1ba85b44a585ee37a22e41cbc
    Remove timing jitter during startup of audio
    
    This fixes a regression introduced recently, that increased timing jitter
    during the startup of the FastMixer and AudioTrack callback threads.
    
    The regression was to make requestPriority() asynchronous as a way to
    avoid an apparent priority inversion in system_server.  This means that
    the target thread could run briefly with the initial priority, before
    the new priority takes effect.
    
    This change removes the startup jitter for FastMixer, by making the
    requestPriority() synchronous again for that case.  It doesn't matter
    that this restores the priority inversion involving normal mixer thread,
    because it happens during startup of both threads.
    
    The change also removes the startup jitter for the AudioTrack callback
    thread, by having the target thread check whether the requestPriority()
    has completed yet.  If not, the target thread blocks with a timeout
    until the priority boost finishes.
    
    Finally, we now log an error message if the expected priority boost
    doesn't happen.
    
    Bug: 8698989
    Change-Id: Id590e9a274b70ec1ba85b44a585ee37a22e41cbc
    Use scheduling policy service
    
    Change-Id: I3c09da1dc0de5039d0c15ce7fb2bc373fa398712
    Factor out and speed up permission-checking code
    
    Use the caching permission check for dump to save IPC.
    
    Cache getpid() to save kernel call for other permission checks.
    
    The C runtime library getpid() can't cache due to a fork
    race condition, but we know that mediaserver doesn't fork.
    
    Don't construct String16 on the stack.
    
    Change-Id: I6be6161dae5155d39ba6ed6228e7683e67be34ed
    Initial checkin of "foundation" library for future stagefright development.
    
    Change-Id: I11714dcaa647d0437a13e4c5b953b35e712da8f3
    auto import from //depot/cupcake/@136654
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Assign blame for playback wakelocks.
    
    Set a work source for the playback wakelock, so that playback is
    counted against the requesting app instead of the media server.
    
    Cherrypicked from master.
    
    b/9464621
    
    Change-Id: I7329f88a288a95a582a78005a1c3d16a5a611e31
    Allow releaseBuffer after flush
    
    After AudioTrack start checks for pending flush,
    allow releaseBuffer on any previously obtained buffer.
    For example, this can happen if the resampler has obtained
    a buffer but not released the whole buffer yet.
    Note that the resampler will be reading obsolete data.
    
    Bug: 11285590
    Change-Id: I0614fbb62e43604aac3089cce4b7797c87a306b5
    Fix flush() followed by start()
    
    Bug: 11259166
    Change-Id: I72526cdfd4e3ff4b06e6a317e577f57cc285205d
    audioflinger: enable effects after registration if needed
    
    This fixes a bug where effects were not properly reenabled after
    being moved from one playback thread to another. The effect
    is enabled but the audio policy manager sees it as disabled.
    
    Bug: 11181933.
    Change-Id: I19cac7acbaf61c546e667fd85ed7d4eda1c716d8
    fix volume and effect enable delay on offloaded tracks
    
    Volume: add a method to wake up the mediaserver playback
    thread when a volume command is received on an offloaded track.
    
    Effects: call effect chain process on offloaded playback threads
    asynchronously from writes to allow effect state updates while
    waiting for async write callback.
    
    Bug: 10796540.
    
    Change-Id: Id2747ae88783575d1d7ffd6fc86fbd054ab2c739
    audioflinger: implement getTimestamp() for offloaded tracks
    
    Bug: 9587132.
    Change-Id: Ie9d5f4cca96306d08bc9a2dbd6edd8953096702d
    audioflinger: fix lost offload thread resume event
    
    It was possible that a resume request signaled by addTrack_l()
    while waiting for an async write callback is lost. This is because
    mSignalPending was not set and waitingAsyncCallback_l() would pause the
    thread loop before executing prepareTracks_l().
    
    The fix consists in using signal_l() method to wake the thread
    loop o that mSignalPending is set.
    
    Also make sure that sleepTime is reset to 0 when resuming to make sure
    that we write any remaining bytes to the HAL.
    
    Bug: 10810347.
    
    Change-Id: If9a3b22cc3b9e6eb384a56c48c40e6258d0896ad
    more support for audio effect offload
    
    Offloading of audio effects is now enabled for offloaded
    output threads. If an effect not supporting offload is enabled,
    the AudioTrack is invalidated so that it can be recreated in PCM
    mode.
    
    Fix some issues in effect proxy related to handling of effect
    commands to offloaded and non offloaded effects.
    
    Also fixed a bug on capture index in software Visualizer effect.
    
    Bug: 8174034.
    
    Change-Id: Ib23d3c2d5a652361b0aaec7faee09102f2b18fce
    audioflinger: longer offload thread standby delay
    
    - Increase offloaded output thread standby delay to 1 second
    to allow transition between tracks with going to stanby
    if reusing the same audio track (gapless)
    
    - Make sure pause/flush/resume sequence is sent to the HAL
    in the right order
    
    - Fix format display in track dump
    
    Bug: 8174034.
    Change-Id: I43ef6f8fdbf7427e4eff6cc2d0665d7d1463ea8a
    Fix AudioTrack shared memory leak
    
    Bug: 2801375
    Change-Id: I50e15164fe310f69ea019dca5b49171a02bc6992
    audioflinger: add HOTWORD audio source.
    
    HOTWORD is a special capture audio source that uses
    the same audio tuning as VOICE_RECOGNITION but allows an
    active capture to be preempted.
    
    Bug: 10640877.
    
    Change-Id: Iea09a11cbcdbacc8d434e5230e7559dcd1b44ac0
    audioflinger: no effects on offloaded tracks
    
    Invalidate offloaded tracks when an effect is enabled
    so that the track is recreated in PCM mode and the effect
    can be applied.
    This is temporary until effect offloading is implemented.
    
    Bug: 8174034.
    
    Change-Id: I77b8b54a10db6cb8334be76d863ea7e720eaad09
    Fix miscellanous AudioTrack::getTimestamp() bugs
    
    Check that get_presentation_position is non-NULL before calling.
    
    AudioTrack::getTimestamp not implemented for fast tracks.
    
    Fix typo in Track::getTimestamp().
    
    Fix bugs in AudioTrack::getTimestamp after stop:
     - getTimestamp while stopped is not allowed.
     - stop, start, getTimestamp now returns the correct value.
    
    Change-Id: Ie8d9dc1f28d8927634e04175a68b147ffc2ea8eb
    Add ExtendedAudioBufferProvider::framesReleased and onTimestamp
    
    and implement them in SourceAudioBufferProvider using the associated NBAIO_Source,
    and in Track using the associated AudioTrackServerProxy.
    
    Change-Id: I60dc4adba63fc1dc452ff16caf347e4a7c8242c2
    Implement Track::getTimestamp()
    
    using a new timestamp latch in PlaybackThread, and
    AudioTrackServerProxy::framesReleased() which returns mServer.
    
    Change-Id: I1ebfba968c773faaab95648c272fd3ebd74718d6
    Add AudioFlinger::PlaybackThread::Track::getTimestamp()
    
    with a dummy implementation initially,
    and use it in AudioFlinger::TrackHandle::getTimestamp()
    
    Change-Id: I2da88fc52a135a7f0d9fd9538986e919dc8ccd3b
    Add IAudioTrack::getTimestamp()
    
    with dummy implementation in AudioFlinger::TrackHandle, and
    implement AudioTrack::getTimestamp() using IAudioTrack.
    
    Also document invariant that mAudioTrack and control block are always
    non-0 after successful initialization.
    
    Change-Id: I9861d1454cff7decf795d5d5898ac7999a9f3b7e
    Report underruns for fast tracks also
    
    This fixes a regression that was introduced earlier
    by commit 9f80dd223d83d9bb9077fb6baee056cee4eaf7e5
    called "New control block for AudioTrack and AudioRecord".
    That commit broke underrun reporting for fast tracks.
    
    Also remove Track::mUnderrunCount, which counted the number of underrun
    events, and was only used by dumpsys media.audio_flinger.
    
    Now dumpsys media.audio_flinger reports the number of underrun frames,
    
    Isolated underrun-related control block accesses via the proxy, so that
    the server is not directly poking around in the control block.
    
    The new proxy APIs are AudioTrackServerProxy::getUnderrunFrames() and
    AudioTrackServerProxy::tallyUnderrunFrames().  getUnderrunFrames() returns
    a rolling counter for streaming tracks, or zero for static buffer tracks
    which never underrun, but do a kind of 'pause' at end of buffer.
    tallyUnderrunFrames() increments the counter by a specified number of frames.
    
    Change-Id: Ib31fd73eb17cbb23888ce3af8ff29f471f5bd5a2
    Move control block mName to createTrack() output
    
    This is part of a series of CLs to clean up the shared memory
    control block, by removing any fields that don't have to be there.
    
    Change-Id: I6e51003a1293b6800258c31b22cff2eba42162e7
    Rename control block flags to mFlags
    
    Change-Id: I7b6d31e24531954ab1ecdf3ed56c19433700bd89
    Rename control block server to mServer and add comments
    
    Change-Id: Ieabd91acee92d0e84e66fbd358df5282b856306e
    Remove CC_LIKELY and CC_UNLIKELY where not needed
    
    Only keep them in performance-sensitive code
    
    Change-Id: Ib257ddd7bc39ce9896997ffae008c524ac743d01
    Declare methods in binder opcode order
    
    Change-Id: I5f624b7a51ffe1a17a67c056cf984f74e4c56eac
    Remove obsolete mBufferEnd
    
    Change-Id: I507c6109d66000bb30933ca23b912a1316f55e5e
    Remove obsolete TrackBase::step(), mStepCount, mStepServerFailed
    
    Change-Id: I6347096f066b8b19451c6472db7b0671f0cf7702
    Simplify RecordTrack::stop()
    
    Change-Id: Ib959c1e9dc9544d12277ce11bea445118b2e0521
    CBLK_OVERRUN, not CBLK_UNDERRUN, is for record threads
    
    Change-Id: I8948f76ef4717a423c37cd6ea7db4381636af612
    Remove obsolete TrackBase::reset()
    
    Change-Id: I38100b7e28a12d7af8cb40ae3f4d9cb4a0ebe701
    AudioFlinger: offload playback, non-blocking write
    
    - Added specialized playback thread class for offload playback,
    derived from directoutput thread.
    This thread type handles specific state transitions for offloaded
    tracks and offloading commands (pause/resume/drain/flush..) to audio HAL.
    As opposed to other threads, does not go to standby if the track is paused.
    
    - Added support for asynchronous write and drain operations at audio HAL.
    Use a thread to handle async callback events from HAL: this avoids locking
    playback thread mutex when executing the callback and cause deadlocks when
    calling audio HAL functions with the playback thread mutex locked.
    
    - Better accouting for track activity: call start/stop and release Output
    methods in audio policy manager when tracks are actually added and removed
    from the active tracks list.
    Added a command thread in audio policy service to handle stop/release commands
    asynchronously and avoid deadlocks with playback thread.
    
    - Track terminated status is not a state anymore. This condition is othogonal
    to state to permitted state transitions while terminated.
    
    Change-Id: Id157f4b3277620568d8eace7535d9186602564de
    Make AudioFlinger::instantiate() more resilient when called from separate module
    
    Bug: 8834855
    Change-Id: I4cd842cdfb09d2aaaaab9df9ac3bec6179709bd3
    Public API changes for audio offload support.
    
    NOTE: this does _not_ include all private member variables added
    to classes as part of offload support. Only public/protected functions
    and stubs functions/variables needed to make the changes buildable.
    
    - isOffloadSupported() added to audio policy service
        A stub implementation is required to build, this always returns false
    - setParameters() added to IAudioTrack
        A stub implementation is required to build, this always returns
        INVALID_OPERATION
    
    - CBlk flag for stream end
    
    - Change AudioSystem::getRenderPosition() to take an audio_output_t
        so caller can specify which output to query
    
    - Add AudioSystem::isOffloadSupported()
        This is fully implemented down to the AudioFlinger function
        AudioPolicyServer::isOffloadSupported() which is just a stub
        that always returns false.
    
    - Add EVENT_STREAM_END to AudioTrack interface.
        STREAM_END is used to signal when the hardware has actually finished
        playing all the data it was sent.
    
    - Add event type enumeration to media player interface AudioSink callbacks
        so that the same callback can be used to handle multiple types of
        event. For offloaded tracks we also have to handle STREAM_END and
        TEAR_DOWN events
    
    - Pass audio_offload_info_t to various functions used for opening outputs,
        tracks and audio players. This passes additional information about the
        compressed stream down to the HAL when using offload.
        For publicly-available APIs this is an optional parameter (for some of
        the internal and low-level APIs around the HAL interface it is mandatory)
    
    - Add getParameters() and setParameters() API to AudioTrack
        Currently dummy implementations.
    
    - Change AudioPlayer contructor so that it takes a set of bitflags defining what
        options are required. This replaces the original bool which only specified
        whether to use deep buffering.
    
    - Changes to StageFright class definition related to handling tearing-down of
        an offloaded track when we need to switch back to software decode
    
    - Define new StageFright utility functions used for offloaded tracks
        Currently dummy implementations.
    
    - AudioFlinger changes to use extended audio_config_t.
        Fills in audio_offload_info_t member if this info is passed in when
        opening an output.
    
    - libvideoeditor changes required to add the new event type parameter
        to AudioSink callback functions
    
    - libmediaplayerservice changes required to add the new event type parameter
        to AudioSink callback functions
    
    Change-Id: I3ab41138aa1083d81fe83b886a9b1021ec7320f1
    Signed-off-by: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
    Signed-off-by: Eric Laurent <elaurent@google.com>
    Fix theoretical race using TrackBase::sampleRate()
    
    In two places we assumed that TrackBase::sampleRate() would return the
    same value when it is called twice in the same function.  This is not
    guaranteed; sampleRate() reads from the control block so the return
    value could change.  To fix this, only call sampleRate() once and cache
    the return value to get a consistent value.
    
    This was only a theoretical race.  In MixerThread::prepareTracks_l()
    it would have no bad effect.  In TimedTrack::getNextBuffer() it could
    cause a real problem, but we don't currently support dynamic sample rate
    ratios for timed tracks.
    
    Change-Id: I8e5c33f0121fc058d1e70c2ab5e9135397d3e0b7
    New control block for AudioTrack and AudioRecord
    
    Main differences between old and new control block:
     - removes the mutex, which was a potential source of priority inversion
     - circular indices into shared buffer, which is now always a power-of-2 size
    
    Change-Id: I4e9b7fa99858b488ac98a441fa70e31dbba1b865
    Consistent whitespace
    
    Change-Id: I118cce68d3b777f9ec9b6bfb70367496422a40f2
    audioflinger: fix duplicating track sampling rate
    
    Add missing initialization of client proxy sampling rate
    and volumes in OutputTrack constructor.
    
    Bug: 8687522
    Change-Id: I813e700315bb97083a63dd32279f1998ac775483
    audioflinger: fix duplicating track sampling rate
    
    Add missing initialization of client proxy sampling rate
    and volumes in OutputTrack constructor.
    
    Bug: 8687522
    Change-Id: I813e700315bb97083a63dd32279f1998ac775483
    Miscellaneous cleanup
    
    Abbreviation framesReady to fRdy for new systrace.
    Put inline const on one line.
    Use local copy of mState in state.
    Improve logging.
    Line length 100.
    
    Change-Id: I8201c3ce0e53fd464fd33d02544e52c342d40b68
    Miscellaneous cleanup
    
    Abbreviation framesReady to fRdy for new systrace.
    Put inline const on one line.
    Use local copy of mState in state.
    Improve logging.
    Line length 100.
    
    Change-Id: I8201c3ce0e53fd464fd33d02544e52c342d40b68
    media.log cleanup
    
    Remove almost all of the specific logs, but leave the media.log
    logging infrastructure in place for the next time we need it.
    
    Re-apply a few good changes that were reverted earlier:
     - check logf format vs. argument list compatibility
     - distinguish potentially modified and actually modified tracks in FastMixer
     - fix benign bug where sq->end() was called more than once
     - fix a build warning
    
    Bug: 6490974
    Change-Id: I02d3e83646c738acaebb415bd0d6b548638b4ef5
    media.log cleanup
    
    Remove almost all of the specific logs, but leave the media.log
    logging infrastructure in place for the next time we need it.
    
    Re-apply a few good changes that were reverted earlier:
     - check logf format vs. argument list compatibility
     - distinguish potentially modified and actually modified tracks in FastMixer
     - fix benign bug where sq->end() was called more than once
     - fix a build warning
    
    Bug: 6490974
    Change-Id: I02d3e83646c738acaebb415bd0d6b548638b4ef5
    Remove tee sink debugging at compile time
    
    Bug: 8223560
    Change-Id: Iddbfb06c45d43d9f20bb428215dd4094931e19a7
    Remove tee sink debugging at compile time
    
    Bug: 8223560
    Change-Id: Iddbfb06c45d43d9f20bb428215dd4094931e19a7
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 32584a7d672864b20ab8b83a3cb23c1858e908b7
    
    Change-Id: I9dc680578b955b1af462eeb7a49d61a0d45eb81b
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 32584a7d672864b20ab8b83a3cb23c1858e908b7
    
    Change-Id: I9dc680578b955b1af462eeb7a49d61a0d45eb81b
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
     - increase log buffer sizes yet again
     - enable assertion checking without ALOGV
     - improve a few log messages
     - check for corruption in more places
     - log in all the process hooks
     - add new mixer APIs so we can check for corruption of mixer state
     - fix a build warning
    
    Bug: 6490974
    Change-Id: Ib0c4a73dcf606ef9bd898313b3b40ef61ab42f51
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
     - increase log buffer sizes yet again
     - enable assertion checking without ALOGV
     - improve a few log messages
     - check for corruption in more places
     - log in all the process hooks
     - add new mixer APIs so we can check for corruption of mixer state
     - fix a build warning
    
    Bug: 6490974
    Change-Id: Ib0c4a73dcf606ef9bd898313b3b40ef61ab42f51
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 639482c24c911b125398b31883ba6d55faebe28b
    
    Change-Id: I11f2829072ab11e18b0663024f27bf31192f1d39
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 639482c24c911b125398b31883ba6d55faebe28b
    
    Change-Id: I11f2829072ab11e18b0663024f27bf31192f1d39
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 0ddd56316262ac74a95e9edb595697c163136d6d
    
    Change-Id: I180a928af6f5a38d15a5efe44cd1fe927b5d961c
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 0ddd56316262ac74a95e9edb595697c163136d6d
    
    Change-Id: I180a928af6f5a38d15a5efe44cd1fe927b5d961c
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
    
    Bug: 6490974
    Change-Id: I4c030f171343fe4b483eae0ddea4427118d8d4b1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
    
    Bug: 6490974
    Change-Id: I4c030f171343fe4b483eae0ddea4427118d8d4b1
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 3051df27261e9952c0e642dec548515250e85f6a
    
    Change-Id: I8bf5c3e91b65bd20de26f480c367c2854b62373c
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 3051df27261e9952c0e642dec548515250e85f6a
    
    Change-Id: I8bf5c3e91b65bd20de26f480c367c2854b62373c
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
    
    Bug: 6490974
    Change-Id: I4c030f171343fe4b483eae0ddea4427118d8d4b1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
    
    Bug: 6490974
    Change-Id: I4c030f171343fe4b483eae0ddea4427118d8d4b1
    AudioFlinger uses media.log service for logging
    
    Change-Id: Ia0f8204334f6b233f644d897762a18c95d936b4b
    AudioFlinger uses media.log service for logging
    
    Change-Id: Ia0f8204334f6b233f644d897762a18c95d936b4b
    Start isolating control block accesses in a proxy
    
    The proxy object will eventually be the only code that understands the
    details of the control block.  This should make it easier to change the
    control block in the future.
    
    Initial set of control block fields that are isolated:
     - sample rate
     - send level
     - volume
    
    Prepare for streaming/static separation by adding a union to the control
    block for the new fields.
    
    Fix bug in handling of max sample rate on a track.  It was only checking
    at re-configuration, not at each mix.
    
    Simplify OutputTrack::obtainBuffer.
    
    Change-Id: I2249f9d04f73a911a922ad1d7f6197292c74cd92
    Start isolating control block accesses in a proxy
    
    The proxy object will eventually be the only code that understands the
    details of the control block.  This should make it easier to change the
    control block in the future.
    
    Initial set of control block fields that are isolated:
     - sample rate
     - send level
     - volume
    
    Prepare for streaming/static separation by adding a union to the control
    block for the new fields.
    
    Fix bug in handling of max sample rate on a track.  It was only checking
    at re-configuration, not at each mix.
    
    Simplify OutputTrack::obtainBuffer.
    
    Change-Id: I2249f9d04f73a911a922ad1d7f6197292c74cd92
    Prepare for track invalidation to be done by proxy
    
    Don't rely on control block to determine whether track has been marked
    invalid.  Instead, use a local flag that can't be corrupted by client.
    
    Change-Id: I783dafe828f93c1c3d2d0e5a08105ea536436efb
    Prepare for track invalidation to be done by proxy
    
    Don't rely on control block to determine whether track has been marked
    invalid.  Instead, use a local flag that can't be corrupted by client.
    
    Change-Id: I783dafe828f93c1c3d2d0e5a08105ea536436efb
    AudioTrack::mute() is unused so remove it
    
    If ever needed again, it could be implemented on client side by forcing
    a track volume of 0.
    
    Change-Id: I88a9b4f675b6dca2948549414f9ec2c192d29269
    AudioTrack::mute() is unused so remove it
    
    If ever needed again, it could be implemented on client side by forcing
    a track volume of 0.
    
    Change-Id: I88a9b4f675b6dca2948549414f9ec2c192d29269
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    audioflinger: do not use raw pointer for tracks
    
    Commit 9da3d95 surfaced a problem caused by the use of a raw
    pointer to a track in offload thread implementation.
    
    Pointers to tracks should always be weak or strong pointers.
    
    Bug: 11708529.
    Change-Id: Ic48632532d186c9be8261f73cefdf824b9fbbd2b
    AudioFlinger: more fixes for offload audio lost
    
    mStandby being false was not a reliable indication that
    something had been written to audio HAL.
    
    Considering the last track in mActiveTracks vector as the
    latest activated track was wrong as this is a SortedVector.
    
    Bug: 11247103.
    Change-Id: I397d011c5afcdd779def3fe25aaae7669a472cfc
    Assign blame for playback wakelocks.
    
    Set a work source for the playback wakelock, so that playback is
    counted against the requesting app instead of the media server.
    
    Cherrypicked from master.
    
    b/9464621
    
    Change-Id: I7329f88a288a95a582a78005a1c3d16a5a611e31
    audioflinger: fix track terminated before playing
    
    When a track is terminated before any audio was written,
    we should not send a drain request to the HAL. The drain
    will be ignored and we will wait the async callback for ever.
    
    Also fix a potential deadlock by not deleting a track with the
    thread mutex held: mPreviousTrack changed from a sp to a raw pointer.
    
    Bug: 11247103.
    Change-Id: I0a4b47b099204c7c326d45d700234ab8f72d8eae
    Make Audio wakelock names less unique.
    
    These wakelocks now show up in the client process, where they
    might cause wakelock overflows if AudioFlinger threads die often.
    
    The client process should be agnostic of audio flinger threading,
    so don't make the wakelock names rely on audioflinger thread names.
    
    Wakelock names now depend only on the audio flinger thread type, and
    not the ID itself.
    
    bug: 11200551
    
    Change-Id: Ia1f71b569cb7502d617b77596abc245f461a6ec0
    Better recording wake lock accounting
    
    Count wake lock use against the app that initiated the recording,
    not against the media server.
    
    b/10985160
    
    Change-Id: Iae6e6c030b7f1c6081d9c79725d6990f60dadaaa
    audioflinger: fix crash when starting offload thread
    
    Passing a sp to parent thread to AsyncCallbackThread() constructor
    causes a strong reference to be acquired on the OffloadThread inside
    its constructor which causes an early launch of the thread loop
    with unpredictable consequences.
    
    Pass a wp to parent thread instead.
    
    Also move the creation of the AsyncCallbackThread to
    readOutputParameters() where mUseAsyncWrite is initialized which
    makes more sense.
    
    Also change the type of AsyncCallbackThread parent thread to PlaybackThread
    instead of OffloadThread to allow a broder use of non blocking write which
    in theory is not limited to audio offload use case.
    
    Bug: 8174034.
    Change-Id: I4b093b022030cd4f5eb8b8e477333e91098a6549
    audioflinger: implement getTimestamp() for offloaded tracks
    
    Bug: 9587132.
    Change-Id: Ie9d5f4cca96306d08bc9a2dbd6edd8953096702d
    audioflinger: fix lost offload thread resume event
    
    It was possible that a resume request signaled by addTrack_l()
    while waiting for an async write callback is lost. This is because
    mSignalPending was not set and waitingAsyncCallback_l() would pause the
    thread loop before executing prepareTracks_l().
    
    The fix consists in using signal_l() method to wake the thread
    loop o that mSignalPending is set.
    
    Also make sure that sleepTime is reset to 0 when resuming to make sure
    that we write any remaining bytes to the HAL.
    
    Bug: 10810347.
    
    Change-Id: If9a3b22cc3b9e6eb384a56c48c40e6258d0896ad
    audioflinger: remove async write race conditions
    
    Remove possible race conditions between async callback
    thread and offload thread when clearing and setting the
    draining and write blocked flags.
    
    Bug: 8174034.
    Change-Id: I7af10491f39dc0e7d7414862a9d8e763daa2e2b7
    Implement Track::getTimestamp()
    
    using a new timestamp latch in PlaybackThread, and
    AudioTrackServerProxy::framesReleased() which returns mServer.
    
    Change-Id: I1ebfba968c773faaab95648c272fd3ebd74718d6
    RecordThread::createRecordTrack_l use flags for fast tracks
    
    Look at client's request for a fast track in the flags parameter,
    and check whether the request can be satisfied.
    
    Change-Id: I65ddaeb1b85670fe9066076f638bfed0cda01c0d
    RecordTrack::createRecordTrack_l flags are in/out
    
    The flags are currently unused, but will be used for requesting a fast
    track.  Making flags in/out will allow reporting back up to client that
    the request is denied.
    
    Change-Id: Ifbee57da3632ce130551065a426577fb97b1a68d
    Add resampler comments and fix a typo
    
    Change-Id: Ie071673875f663de4212eed4a4dff89d51a5a915
    Rename RecordThread::mInputBytes to the more generic mBufferSize
    
    This prepares for using it in PlaybackThreads later
    
    Change-Id: Id90a92aa6372e4b69914b0008cef07296ca5d6a3
    Move members from ThreadBase to PlaybackThread
    
    Move mNormalFrameCount and frameCountHAL(), since they're not used by
    record threads.  Also comment which fields are updated by readParameters().
    
    Change-Id: I5fc0a8a89cc637976f22d49271a5a3e136dab4e1
    Treat mChannelCount as uint32_t consistently
    
    mChannelCount was 8-, 16-, or 32-bits
    
    Change-Id: I2cc2fedf3e33144e5c8bbd9894763282d9217f63
    Simplify RecordTrack::stop()
    
    Change-Id: Ib959c1e9dc9544d12277ce11bea445118b2e0521
    AudioFlinger: offload playback, non-blocking write
    
    - Added specialized playback thread class for offload playback,
    derived from directoutput thread.
    This thread type handles specific state transitions for offloaded
    tracks and offloading commands (pause/resume/drain/flush..) to audio HAL.
    As opposed to other threads, does not go to standby if the track is paused.
    
    - Added support for asynchronous write and drain operations at audio HAL.
    Use a thread to handle async callback events from HAL: this avoids locking
    playback thread mutex when executing the callback and cause deadlocks when
    calling audio HAL functions with the playback thread mutex locked.
    
    - Better accouting for track activity: call start/stop and release Output
    methods in audio policy manager when tracks are actually added and removed
    from the active tracks list.
    Added a command thread in audio policy service to handle stop/release commands
    asynchronously and avoid deadlocks with playback thread.
    
    - Track terminated status is not a state anymore. This condition is othogonal
    to state to permitted state transitions while terminated.
    
    Change-Id: Id157f4b3277620568d8eace7535d9186602564de
    Fix theoretical memory leak in mConfigEvents
    
    Change-Id: I137f70676c8919661e716c33e0dd9c25c2b6285c
    Add comments
    
    Change-Id: Ifbf3a46a4183c8abc0feee1c588953ab10303cc1
    media.log cleanup
    
    Remove almost all of the specific logs, but leave the media.log
    logging infrastructure in place for the next time we need it.
    
    Re-apply a few good changes that were reverted earlier:
     - check logf format vs. argument list compatibility
     - distinguish potentially modified and actually modified tracks in FastMixer
     - fix benign bug where sq->end() was called more than once
     - fix a build warning
    
    Bug: 6490974
    Change-Id: I02d3e83646c738acaebb415bd0d6b548638b4ef5
    media.log cleanup
    
    Remove almost all of the specific logs, but leave the media.log
    logging infrastructure in place for the next time we need it.
    
    Re-apply a few good changes that were reverted earlier:
     - check logf format vs. argument list compatibility
     - distinguish potentially modified and actually modified tracks in FastMixer
     - fix benign bug where sq->end() was called more than once
     - fix a build warning
    
    Bug: 6490974
    Change-Id: I02d3e83646c738acaebb415bd0d6b548638b4ef5
    Remove tee sink debugging at compile time
    
    Bug: 8223560
    Change-Id: Iddbfb06c45d43d9f20bb428215dd4094931e19a7
    Remove tee sink debugging at compile time
    
    Bug: 8223560
    Change-Id: Iddbfb06c45d43d9f20bb428215dd4094931e19a7
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 32584a7d672864b20ab8b83a3cb23c1858e908b7
    
    Change-Id: I9dc680578b955b1af462eeb7a49d61a0d45eb81b
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 32584a7d672864b20ab8b83a3cb23c1858e908b7
    
    Change-Id: I9dc680578b955b1af462eeb7a49d61a0d45eb81b
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
     - increase log buffer sizes yet again
     - enable assertion checking without ALOGV
     - improve a few log messages
     - check for corruption in more places
     - log in all the process hooks
     - add new mixer APIs so we can check for corruption of mixer state
     - fix a build warning
    
    Bug: 6490974
    Change-Id: Ib0c4a73dcf606ef9bd898313b3b40ef61ab42f51
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
     - increase log buffer sizes yet again
     - enable assertion checking without ALOGV
     - improve a few log messages
     - check for corruption in more places
     - log in all the process hooks
     - add new mixer APIs so we can check for corruption of mixer state
     - fix a build warning
    
    Bug: 6490974
    Change-Id: Ib0c4a73dcf606ef9bd898313b3b40ef61ab42f51
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 639482c24c911b125398b31883ba6d55faebe28b
    
    Change-Id: I11f2829072ab11e18b0663024f27bf31192f1d39
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 639482c24c911b125398b31883ba6d55faebe28b
    
    Change-Id: I11f2829072ab11e18b0663024f27bf31192f1d39
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 0ddd56316262ac74a95e9edb595697c163136d6d
    
    Change-Id: I180a928af6f5a38d15a5efe44cd1fe927b5d961c
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 0ddd56316262ac74a95e9edb595697c163136d6d
    
    Change-Id: I180a928af6f5a38d15a5efe44cd1fe927b5d961c
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
    
    Bug: 6490974
    Change-Id: I4c030f171343fe4b483eae0ddea4427118d8d4b1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
    
    Bug: 6490974
    Change-Id: I4c030f171343fe4b483eae0ddea4427118d8d4b1
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 3051df27261e9952c0e642dec548515250e85f6a
    
    Change-Id: I8bf5c3e91b65bd20de26f480c367c2854b62373c
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 3051df27261e9952c0e642dec548515250e85f6a
    
    Change-Id: I8bf5c3e91b65bd20de26f480c367c2854b62373c
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
    
    Bug: 6490974
    Change-Id: I4c030f171343fe4b483eae0ddea4427118d8d4b1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
    
    Bug: 6490974
    Change-Id: I4c030f171343fe4b483eae0ddea4427118d8d4b1
    AudioFlinger: fix RecordThread initial device
    
    A regression was introduced when the audio device enums where
    modified for a 32 bit representation: the device passed when
    constructing a RecordThread was still the concatenation of input
    device and output device bit fields on one 32 bit value which
    is not possible anymore.
    
    The fix consists in modifying the RecordThread constructor to accept
    separate values for input and output devices.
    
    Change-Id: I81fb5f4718428b54251e65d74b86e198ce15193e
    AudioFlinger: fix RecordThread initial device
    
    A regression was introduced when the audio device enums where
    modified for a 32 bit representation: the device passed when
    constructing a RecordThread was still the concatenation of input
    device and output device bit fields on one 32 bit value which
    is not possible anymore.
    
    The fix consists in modifying the RecordThread constructor to accept
    separate values for input and output devices.
    
    Change-Id: I81fb5f4718428b54251e65d74b86e198ce15193e
    AudioFlinger uses media.log service for logging
    
    Change-Id: Ia0f8204334f6b233f644d897762a18c95d936b4b
    AudioFlinger uses media.log service for logging
    
    Change-Id: Ia0f8204334f6b233f644d897762a18c95d936b4b
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    Assign blame for playback wakelocks.
    
    Set a work source for the playback wakelock, so that playback is
    counted against the requesting app instead of the media server.
    
    Cherrypicked from master.
    
    b/9464621
    
    Change-Id: I7329f88a288a95a582a78005a1c3d16a5a611e31
    audioflinger: add HOTWORD audio source.
    
    HOTWORD is a special capture audio source that uses
    the same audio tuning as VOICE_RECOGNITION but allows an
    active capture to be preempted.
    
    Bug: 10640877.
    
    Change-Id: Iea09a11cbcdbacc8d434e5230e7559dcd1b44ac0
    New control block for AudioTrack and AudioRecord
    
    Main differences between old and new control block:
     - removes the mutex, which was a potential source of priority inversion
     - circular indices into shared buffer, which is now always a power-of-2 size
    
    Change-Id: I4e9b7fa99858b488ac98a441fa70e31dbba1b865
    Start isolating control block accesses in a proxy
    
    The proxy object will eventually be the only code that understands the
    details of the control block.  This should make it easier to change the
    control block in the future.
    
    Initial set of control block fields that are isolated:
     - sample rate
     - send level
     - volume
    
    Prepare for streaming/static separation by adding a union to the control
    block for the new fields.
    
    Fix bug in handling of max sample rate on a track.  It was only checking
    at re-configuration, not at each mix.
    
    Simplify OutputTrack::obtainBuffer.
    
    Change-Id: I2249f9d04f73a911a922ad1d7f6197292c74cd92
    Start isolating control block accesses in a proxy
    
    The proxy object will eventually be the only code that understands the
    details of the control block.  This should make it easier to change the
    control block in the future.
    
    Initial set of control block fields that are isolated:
     - sample rate
     - send level
     - volume
    
    Prepare for streaming/static separation by adding a union to the control
    block for the new fields.
    
    Fix bug in handling of max sample rate on a track.  It was only checking
    at re-configuration, not at each mix.
    
    Simplify OutputTrack::obtainBuffer.
    
    Change-Id: I2249f9d04f73a911a922ad1d7f6197292c74cd92
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    Make AudioFlinger::instantiate() more resilient when called from separate module
    
    Bug: 8834855
    Change-Id: I4cd842cdfb09d2aaaaab9df9ac3bec6179709bd3
    media.log cleanup
    
    Remove almost all of the specific logs, but leave the media.log
    logging infrastructure in place for the next time we need it.
    
    Re-apply a few good changes that were reverted earlier:
     - check logf format vs. argument list compatibility
     - distinguish potentially modified and actually modified tracks in FastMixer
     - fix benign bug where sq->end() was called more than once
     - fix a build warning
    
    Bug: 6490974
    Change-Id: I02d3e83646c738acaebb415bd0d6b548638b4ef5
    media.log cleanup
    
    Remove almost all of the specific logs, but leave the media.log
    logging infrastructure in place for the next time we need it.
    
    Re-apply a few good changes that were reverted earlier:
     - check logf format vs. argument list compatibility
     - distinguish potentially modified and actually modified tracks in FastMixer
     - fix benign bug where sq->end() was called more than once
     - fix a build warning
    
    Bug: 6490974
    Change-Id: I02d3e83646c738acaebb415bd0d6b548638b4ef5
    Revert "Logging to investigate a crash"
    
    This reverts commit f0ff908da019a44115109f1b4d1b6864b35a8a29.
    Revert "Logging to investigate a crash"
    
    This reverts commit f0ff908da019a44115109f1b4d1b6864b35a8a29.
    A reference cannot be re-bound
    
    Bug: 8213067
    Bug: 6490974
    Change-Id: If546215641fbc9a0fb1e8af8b85cc01f0a4b26ab
    A reference cannot be re-bound
    
    Bug: 8213067
    Bug: 6490974
    Change-Id: If546215641fbc9a0fb1e8af8b85cc01f0a4b26ab
    A reference cannot be re-bound
    
    Bug: 8213067
    Bug: 6490974
    Change-Id: If546215641fbc9a0fb1e8af8b85cc01f0a4b26ab
    A reference cannot be re-bound
    
    Bug: 8213067
    Bug: 6490974
    Change-Id: If546215641fbc9a0fb1e8af8b85cc01f0a4b26ab
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 32584a7d672864b20ab8b83a3cb23c1858e908b7
    
    Change-Id: I9dc680578b955b1af462eeb7a49d61a0d45eb81b
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 32584a7d672864b20ab8b83a3cb23c1858e908b7
    
    Change-Id: I9dc680578b955b1af462eeb7a49d61a0d45eb81b
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
     - increase log buffer sizes yet again
     - enable assertion checking without ALOGV
     - improve a few log messages
     - check for corruption in more places
     - log in all the process hooks
     - add new mixer APIs so we can check for corruption of mixer state
     - fix a build warning
    
    Bug: 6490974
    Change-Id: Ib0c4a73dcf606ef9bd898313b3b40ef61ab42f51
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
     - increase log buffer sizes yet again
     - enable assertion checking without ALOGV
     - improve a few log messages
     - check for corruption in more places
     - log in all the process hooks
     - add new mixer APIs so we can check for corruption of mixer state
     - fix a build warning
    
    Bug: 6490974
    Change-Id: Ib0c4a73dcf606ef9bd898313b3b40ef61ab42f51
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 639482c24c911b125398b31883ba6d55faebe28b
    
    Change-Id: I11f2829072ab11e18b0663024f27bf31192f1d39
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 639482c24c911b125398b31883ba6d55faebe28b
    
    Change-Id: I11f2829072ab11e18b0663024f27bf31192f1d39
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 0ddd56316262ac74a95e9edb595697c163136d6d
    
    Change-Id: I180a928af6f5a38d15a5efe44cd1fe927b5d961c
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 0ddd56316262ac74a95e9edb595697c163136d6d
    
    Change-Id: I180a928af6f5a38d15a5efe44cd1fe927b5d961c
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Logging to investigate a crash
    
    Bug: 6490974
    Change-Id: Ib926a9258bde4ee05ed42eea662dff68e426a997
    Logging to investigate a crash
    
    Bug: 6490974
    Change-Id: Ib926a9258bde4ee05ed42eea662dff68e426a997
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Document AudioMixer hard-coded limits
    
    Change-Id: I83ea8bed375f251260945db788bdb5f280dba12d
    Document AudioMixer hard-coded limits
    
    Change-Id: I83ea8bed375f251260945db788bdb5f280dba12d
    Integrate improved coefficient sinc resampler: VHQ
    
    Summary:
    Very high quality is enabled only for 44.1 -> 48 or 48 -> 44.1,
      and uses low quality for all other use cases.
    Track estimated CPU load and throttles the quality based on load;
      as currently configured it should allow up to 2 instances of very high quality.
    Medium quality and high quality are currently disabled unless explicitly requested.
    
    Details:
    Only load .so the first time it is needed.
    Cleanup code style: formatting, indentation, whitespace.
    Restore medium quality resampler, but it is not used (see next line).
    Fix memory leak for sinc resampler.
    Check sample rate in resampler constructor.
    Add logs for debugging.
    Rename DEFAULT to DEFAULT_QUALITY for consistency with other quality levels.
    Renumber VERY_HIGH_QUALITY from 255 to 4.
    Use enum src_quality consistently.
    Improve parsing of property af.resampler.quality.
    Fix reentrancy bug - allow an instance of high quality and an instance
      of very high quality to both be active concurrently.
    
    Bug: 7229644
    Change-Id: I0ce6b913b05038889f50462a38830b61a602a9f7
    Integrate improved coefficient sinc resampler: VHQ
    
    Summary:
    Very high quality is enabled only for 44.1 -> 48 or 48 -> 44.1,
      and uses low quality for all other use cases.
    Track estimated CPU load and throttles the quality based on load;
      as currently configured it should allow up to 2 instances of very high quality.
    Medium quality and high quality are currently disabled unless explicitly requested.
    
    Details:
    Only load .so the first time it is needed.
    Cleanup code style: formatting, indentation, whitespace.
    Restore medium quality resampler, but it is not used (see next line).
    Fix memory leak for sinc resampler.
    Check sample rate in resampler constructor.
    Add logs for debugging.
    Rename DEFAULT to DEFAULT_QUALITY for consistency with other quality levels.
    Renumber VERY_HIGH_QUALITY from 255 to 4.
    Use enum src_quality consistently.
    Improve parsing of property af.resampler.quality.
    Fix reentrancy bug - allow an instance of high quality and an instance
      of very high quality to both be active concurrently.
    
    Bug: 7229644
    Change-Id: I0ce6b913b05038889f50462a38830b61a602a9f7
    Communicate audio session ID to downmixer
    
    The audio downmixer effect might need the audio session Id, pass it
     from the track creation in AudioFlinger to the downmix effect
     creation in AudioMixer.
    
    Change-Id: I836873eebd6711f1048fce81cd2eb29b94f0ad0c
    Communicate audio session ID to downmixer
    
    The audio downmixer effect might need the audio session Id, pass it
     from the track creation in AudioFlinger to the downmix effect
     creation in AudioMixer.
    
    Change-Id: I836873eebd6711f1048fce81cd2eb29b94f0ad0c
    Communicate audio session ID to downmixer
    
    The audio downmixer effect might need the audio session Id, pass it
     from the track creation in AudioFlinger to the downmix effect
     creation in AudioMixer.
    
    Change-Id: I5e29540542ae89cf4a0cdb537b3e67f04442a20a
    Communicate audio session ID to downmixer
    
    The audio downmixer effect might need the audio session Id, pass it
     from the track creation in AudioFlinger to the downmix effect
     creation in AudioMixer.
    
    Change-Id: I5e29540542ae89cf4a0cdb537b3e67f04442a20a
    Fix initialization of audio mixer track resources for MIPS.
    
    The value 1 << 32 (maxNumTracks defaults to 32) is surprisingly not defined
    in C, and differs on MIPS than the other arch.
    
    Therefore the track resources were not initialized properly, resulting
    in failure to play any audio.
    
    The fix allows the mConfiguredNames bitmask to be correctly set to all
    1's in the 32-track case, for all arch.
    
    Change-Id: Ied3e1305952e9567602e2cd76c5ef3acb0809ee0
    Signed-off-by: Paul Lind <plind@mips.com>
    Share local time frequency for all tracks & mixers
    
    Change-Id: I5e6f0e371f728a5225c2fa6f778c109449d33602
    Use audio_channel_mask_t more places
    
    Use it in AudioSystem::getOutput(), AudioSystem::getInput(),
    IAudioPolicyService::getOutput(), IAudioPolicyService::getInput(),
    and various other places in AudioFlinger.
    
    Not done: AudioTrack and OutputDescriptor.
    
    Change-Id: I70e83455820bd8f05dafd30c63d636c6a47cd172
    Fix multichannel downmix pause bug on video player
    
    Pausing a video player will cause the track audio mixer to be
     disabled, which causes the downmixer to be deleted. When reenabled,
     the track channel mask hasn't changed but the downmixer is there
     anymore.
    Fixed by:
    - instanciating a downmixer when the AudioMixer track
     gets initialized (in getTrackName(), now taking a channel mask
     as input), and deleted when in deleteTrackName().
    - when the channel changes on a track, check whether it
     needs a downmixer or not. Preparing a track for downmix
     automatically removes the old downmixer if there was one.
    
    Also: initialize the track downmixerBufferProvider field
     when AudioMixer is instanciated, so we can safely call
     delete on it in AudioMixer's destructor, in case
     deleteTrackName() wasn't called before the mixer was
     destroyed.
    
    Change-Id: I589b0781cda5b3c82f85b561c52b08546cac21f8
    Configure the resampler with the correct channel count when downmixing
    
    When a track needs to be downmixed and resampled, it gets downmixed
     first before being resampled. Therefore the resampler needs to
     be configured with the channel count of the output of the downmixer
     instead of that of the track.
    Removed frame size checks that don't apply anymore now that we support
     frame sizes that are not powers of 2 (e.g. 12 for 5.1 16bits), and
     changed test performed for every buffer during playback into an
     assert.
    
    Change-Id: Ia220f00ee382f4f7848b661c58555bdca664e194
    AudioMixer new cmd: remove sample rate converter
    
    Add a new command REMOVE to remove any sample rate converter
       on a track, without having to delete the track name.
    Add comments.
    Remove some dead code.
    Fix whitespace and comparison to NULL.
    
    Change-Id: Id55a23ab5ee673189e99675b4e6fa5df7b617987
    AudioMixer: fix crash in destructor
    
    Commit deeb1282 made that track->resampler is only set to NULL when
    getTrackName() is called. It remains uninitialized for all unused tracks
    causing a crash when deleted by Audiomixer destructor.
    
    Issue 6309441.
    
    Change-Id: I49451387a6afe81299b8368ef206524df32f74c4
    AudioMixer uses downmix effect for multichannel content
    
    In the AudioMixer structure associated with each track, add an object
      that acts as the buffer provider when the track has more than two
      channels of input in the mixer. This object, DownmixerBufferProvider,
      gets audio from the actual buffer provider of the track, and applies
      a downmix effect on it.
    The downmix effect is created and configured when the track gets
      created in AudioFlinger, which causes AudioMixer::getTrackName()
      to be called with the new track's channel mask. It is released
      when the track is disabled in the mixer.
    
    Change-Id: I05281ed5f61bef663a8af7ca7d5ceac3517c82db
    AudioMixer default track parameters
    
    Move the default initialization of track parameters from the AudioMixer
    constructor to getTrackName().  This fixes a bug where the defaults were
    only valid the first time a name was allocated.
    
    Also added a switch case for parameter FORMAT.
    
    Change-Id: I07abd3aaf7f4efe9825a761d2bc662aaee2c6db0
    AudioMixer can be configured for fewer max tracks
    
    Change-Id: I371b17cef071d083eecf35cd3627a3adff907a33
    Whitespace
    
    Fix indentation, and add blank lines in key places for clarity
    
    Change-Id: I57a0a8142394f83203161aa9b8aa9276abf3ed7c
    Update comments
    
    Change-Id: I327663a020670d0a72ff57bd0b682e2ce0528650
    Clean up assertion checks
    
    Use ALOG_ASSERT instead of assert.
    Use compile-time asserts where appropriate.
    Fix typo in an ALOGV.
    
    Change-Id: I58f1c1ffc14319a022c88b5a88b8d0368660da8b
    AudioBufferProvider comments and cleanup
    
    Add comments about which methods implement the AudioBufferProvider interface.
    
    Simplified the definition of kInvalidPts.  <stdint.h> is very hard to work
    with, there seems to be no way to use it reliably to get INT64_MAX without
    having a separate source file, which is ugly because it means kInvalidPts
    is not a compile-time constant.  So I just deleted AudioBufferProvider.cpp
    and used a hard-coded constant instead.
    
    Added a default constructor for Buffer so that the fields aren't random
    (especially .raw which is used to determine if the buffer is valid).
    
    Make the pts for getNextBuffer default to kInvalidPTS so code that
    doesn't need a pts doesn't have to specify a value.
    
    Rename the parameter to AudioMixer::setBufferProvider to make it clearer.
    
    Change-Id: I87e7290884d4ed975b019f62d1ab6ae2bc5065a5
    Remove bit fields to improve performance
    
    uint16_t enabled is (mostly) changed to bool in a separate CL
    
    Change-Id: Ied9f8c034b2479cee9a8778cee7b8ff92ae75b7b
    Simplify code
    
    Use DefaultKeyedVector::valueFor to avoid extra test
    Make local variables as local as possible
    No double parentheses
    No typedef for single use
    No parentheses around indirect function call
    No AudioFlinger:: prefix when not needed
    Remove unnecessary casts
    Remove block with only one line
    
    Saves 128 bytes
    
    Change-Id: I3a87430eeb01b81e7b81a1c38f6fdd3274ec48f3
    Upintegrate Audio Flinger changes from ICS_AAH
    
    Bring in changes to audio flinger made to support timed audio tracks
    and HW master volume control.
    
    Change-Id: Ide52d48809bdbed13acf35fd59b24637e35064ae
    Signed-off-by: John Grossman <johngro@google.com>
    Update comments
    
    We no longer put the filename at start of file.
    
    Change-Id: Ic435b159a23105681e3d4a6cb1ac097bc853302e
    De-AAH-ify the common time service.
    
    Bulk name change to remove references to Android@Home from the common time
    service in preparation for cleanup and up-integration into the master
    branch.  Basically, aah_timesrv is now common_time.
    
    Change-Id: I3d3db212f96e8ba171aa36b9c58e27e4a336cb0a
    Use bool instead of int
    
    The .h is not modified to avoid increasing data size.
    
    Change-Id: Ide4a821a5b16424ffa03471dfff98dc3e9b5f751
    AudioFlinger methods const and inline
    
    This saves 1063 bytes and probably improves performance.
    
    Change-Id: I11cf0dfd925fbaec75e3d1b806852a538eae5518
    Use NULL not 0 for raw pointers
    
    Use if (p != NULL) instead of if (ptr)
    
    Change-Id: Iaec3413a59ccbf233c98fcd918cc7d70ac5da9fa
    Constructor initialization and const fields
    
    In constructors, initialize member fields in the initialization list
    rather than constructor body where possible.  This allows more fields
    to be const, provided they are never modified.
    
    Also initialize POD fields in constructor, unless it's obvious they
    don't need to be initialized.  In that case, put a comment instead.
    
    Remove explicit clear() in destructors on fields that are now const.
    
    Give AudioSessionRef a default constructor, so it's immutable fields can
    be marked const.
    
    Add comment about ~TrackBase() trick.
    
    Initialize fields in declaration order to make it easier to confirm that
    all fields are set.
    
    Move initialization of mHardwareStatus from onFirstRef() to constructor.
    
    Use NULL not 0 to initialize raw pointers in initialization list.
    
    Rename field mClient to mAudioFlingerClient, and getter from client()
    to audioFlingerClient().
    
    Change-Id: Ib36cf6ed32f3cd19003f40a5d84046eb4c122052
    Unconditional delete
    
    Don't check that pointer is non-NULL before delete.
    
    Don't leave deleted member fields non-NULL, except in a destructor,
    since it could be misleading in a dump or debugger. (mRsmpOutBuffer)
    
    Change-Id: Ic0492a6b752f74a67f4c96dfb89ca2de4e69eecf
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    By convention const goes before the type specifier
    
    Change-Id: I70203abd6a6f54e5bd9f1412800cc01212157e58
    Fix build warning
    
    Change-Id: Ic99608d0c14ed56c02f036e0bbaaae1b16bab8ba
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Replace loop by __builtin_ctz
    
    Using the builtin is faster on some platforms, for example on ARM it's
    19 instructions instead of 13, and is O(1) instead of O(n).  Of course,
    track creation is an inherently slow operation, so this doesn't matter
    much now.  But if we add support for virtual tracks, then physical tracks
    will be allocated/freed more frequently.  Also just on principle ...
    
    Change-Id: I3f590934092bd7a1869cbedbc7357928aa5cc8ff
    Use the standard CC_LIKELY and CC_UNLIKELY macros
    
    Several source files privately defined macros LIKELY and UNLIKELY in terms
    of __builtin_expect. But <cutils/compiler.h> already has CC_LIKELY and
    CC_UNLIKELY which are intended for this purpose.  So rename the private
    uses to use the standard names.
    
    In addition, AudioFlinger was relying on the macro expanding to extra ( ).
    
    Change-Id: I2494e087a0c0cac0ac998335f5e9c8ad02955873
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    audioflinger: fix clicks on 48kHz audio.
    
    The calculation done in prepareTracks_l() for the minimum amount
    off frames needed to mix one output buffer had 2 issues:
    - the additional sample needed for interpolation was not included
    - the fact that the resampler does not acknowledge the frames consumed
    immediately after each mixing round but only once all frames requested have been used
    was not taken into account.
    Thus the number of frames available in track buffer could be considered sufficient although
    it was not and the resampler would abort producing a short silence perceived as a click.
    
    Issue 5727099.
    
    Change-Id: I7419847a7474c7d9f9170bedd0a636132262142c
    Remove the notion of "active track" from mixer
    
    This is a first step towards making the mixer more object-oriented.
    
    Change-Id: Ifd445d0e471023a7f5c82e934736ffc95ba1b05b
    Remove dead code
    
    Change-Id: Icf23f7f90fdeb660f4015f22cf239e6d05f5d03c
    Use constants for 2 and 32
    
    Change-Id: If820dfd58b6df258570750610a07af99598d9e53
    Use switch in AudioMixer::setParameter
    
    Replace series of if/then/elses by easier-to-read switch.  Also return
    void instead of status_t, since callers weren't checking it. Assert on
    bad input parameters.
    
    Change-Id: Ie1f0a297977b28501d20e1af819afed9b4750616
    deleteTrackName now asserts on bad input parameter
    
    This is safe, as the input parameter is always track->name(),
    which must be valid.
    
    Change-Id: Iea8ea3a5706c27026335526ba8851030d00681f8
    Extract out audio DSP code to utility library
    
    Change-Id: Ib8ce72028a7ea30e82baa518e381370e820ebbd0
    setActiveTrack and setBufferProvider can't fail
    
    Return void, not status_t, from setActiveTrack and setBufferProvider.
    
    These methods returned status_t, but the callers never checked the
    return value.  Since these aren't externally visible APIs, they now
    return void, and assert on bad input parameters.
    
    Change-Id: I530ed29484596ae41e8659826ca425149c51c2a1
    Simplify enable/disable mixing
    
    The MIXING enum isn't needed, and now returns void instead of status_t.
    
    Change-Id: Ibe4ec24081d75ad4ab78b9c7191fc9077959c4e9
    Use NULL not 0 for pointers
    
    Change-Id: Iab3f9abbdab617dc5a599e657ec46a0b0a002eef
    AudioMixer uninitialized simple fields
    
    Change-Id: I47e3849f048d4d990c9634f9c8a2ca2de0339e93
    Fix indentation and whitespace
    
    Use git diff -w to verify.
    
    Change-Id: Ib65be0a1ecf65d6cad516110604e3855bf68a638
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: I6ec5d2bca9b8ebc0acd395a7dd92e1a48fcdfa9b
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    undo reset to ics-mr1 until we have a better method
    reset to ics-mr1, but keep history
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: Id78bba8c002131d8b52b4170259a87fd94e63c73
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    Use channel mask instead of channel count for track creation
    
    Record and playback objects (resp AudioRecord and AudioTrack)
    are created using a channel mask, but this information is lost
    in the mixer because only the channel count is known to
    AudioFlinger. A channel count can always be derived from a
    channel mask.
    
    The change consists in:
    - disambiguiting variable names for channel masks and counts
    - passing the mask information from the client to AudioFlinger
     and the mixer.
    - when using the DIRECT ouput, only verifying the format of
     the track is compatible with the output's for PCM.
    
    Change-Id: I50d87bfb7d7afcabdf5f12d4ab75ef3a54132c0e
    Fix issue 3479042.
    
    The problem is that when an AudioRecord using the resampler is restarted,
    the resampler state is not reset (as there is no reset function in the resampler).
    The consequence is that the first time the record thread loop runs, it calls the resampler
    which consumes the remaining data in the input buffer and when this buffer is released
    the input index is incremented over the limit.
    
    The fix consists in implementing a reset function in the resampler.
    
    A similar problem was also present for playback but unoticed because the track buffer is always
    drained by the mixer when a track stops. The only problem for playback was that the initial
    phase fraction was wrong when restarting a track after stop (it was correct after a pause).
    
    Change-Id: Ifc2585d685f4402d29f4afc63f6efd1d69265de3
    Initialize resampling buffer per track.
    
    When resampling too short sound, AudioMixer uses previous
    tracks buffer. So we re-initialize the temporary buffer per
    loop to avoid it.
    
    Change-Id: I55a59a3b14faa8445e09c450478fe79cef704760
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    Assign blame for playback wakelocks.
    
    Set a work source for the playback wakelock, so that playback is
    counted against the requesting app instead of the media server.
    
    Cherrypicked from master.
    
    b/9464621
    
    Change-Id: I7329f88a288a95a582a78005a1c3d16a5a611e31
    fix volume and effect enable delay on offloaded tracks
    
    Volume: add a method to wake up the mediaserver playback
    thread when a volume command is received on an offloaded track.
    
    Effects: call effect chain process on offloaded playback threads
    asynchronously from writes to allow effect state updates while
    waiting for async write callback.
    
    Bug: 10796540.
    
    Change-Id: Id2747ae88783575d1d7ffd6fc86fbd054ab2c739
    more support for audio effect offload
    
    Offloading of audio effects is now enabled for offloaded
    output threads. If an effect not supporting offload is enabled,
    the AudioTrack is invalidated so that it can be recreated in PCM
    mode.
    
    Fix some issues in effect proxy related to handling of effect
    commands to offloaded and non offloaded effects.
    
    Also fixed a bug on capture index in software Visualizer effect.
    
    Bug: 8174034.
    
    Change-Id: Ib23d3c2d5a652361b0aaec7faee09102f2b18fce
    audioflinger: no effects on offloaded tracks
    
    Invalidate offloaded tracks when an effect is enabled
    so that the track is recreated in PCM mode and the effect
    can be applied.
    This is temporary until effect offloading is implemented.
    
    Bug: 8174034.
    
    Change-Id: I77b8b54a10db6cb8334be76d863ea7e720eaad09
    Add IAudioTrack::getTimestamp()
    
    with dummy implementation in AudioFlinger::TrackHandle, and
    implement AudioTrack::getTimestamp() using IAudioTrack.
    
    Also document invariant that mAudioTrack and control block are always
    non-0 after successful initialization.
    
    Change-Id: I9861d1454cff7decf795d5d5898ac7999a9f3b7e
    IAudioFlinger::openRecord track_flags_t flags is in/out
    
    This will allow AudioFlinger to tell client it is denying a request.
    
    Change-Id: Iff2be3ad6636371bbda9c9899a283c94620c1f06
    Move control block mName to createTrack() output
    
    This is part of a series of CLs to clean up the shared memory
    control block, by removing any fields that don't have to be there.
    
    Change-Id: I6e51003a1293b6800258c31b22cff2eba42162e7
    Declare methods in binder opcode order
    
    Change-Id: I5f624b7a51ffe1a17a67c056cf984f74e4c56eac
    AudioFlinger: offload playback, non-blocking write
    
    - Added specialized playback thread class for offload playback,
    derived from directoutput thread.
    This thread type handles specific state transitions for offloaded
    tracks and offloading commands (pause/resume/drain/flush..) to audio HAL.
    As opposed to other threads, does not go to standby if the track is paused.
    
    - Added support for asynchronous write and drain operations at audio HAL.
    Use a thread to handle async callback events from HAL: this avoids locking
    playback thread mutex when executing the callback and cause deadlocks when
    calling audio HAL functions with the playback thread mutex locked.
    
    - Better accouting for track activity: call start/stop and release Output
    methods in audio policy manager when tracks are actually added and removed
    from the active tracks list.
    Added a command thread in audio policy service to handle stop/release commands
    asynchronously and avoid deadlocks with playback thread.
    
    - Track terminated status is not a state anymore. This condition is othogonal
    to state to permitted state transitions while terminated.
    
    Change-Id: Id157f4b3277620568d8eace7535d9186602564de
    Use AudioSystem::setLowRamDevice() to configure memory
    
    Bug: 9798886
    Change-Id: I9321e3f369f1ed9429ae222e3926ebdeb012b8b0
    Revert "Fix Audioflinger crash when TeeSink is enabled"
    
    This reverts commit 84e391686d7eced293913d1d7993721224ee0ba1.
    
    Bug: 8834855
    Change-Id: I8211ef5ea5d87d97ada115723df31c8057f38ca8
    Public API changes for audio offload support.
    
    NOTE: this does _not_ include all private member variables added
    to classes as part of offload support. Only public/protected functions
    and stubs functions/variables needed to make the changes buildable.
    
    - isOffloadSupported() added to audio policy service
        A stub implementation is required to build, this always returns false
    - setParameters() added to IAudioTrack
        A stub implementation is required to build, this always returns
        INVALID_OPERATION
    
    - CBlk flag for stream end
    
    - Change AudioSystem::getRenderPosition() to take an audio_output_t
        so caller can specify which output to query
    
    - Add AudioSystem::isOffloadSupported()
        This is fully implemented down to the AudioFlinger function
        AudioPolicyServer::isOffloadSupported() which is just a stub
        that always returns false.
    
    - Add EVENT_STREAM_END to AudioTrack interface.
        STREAM_END is used to signal when the hardware has actually finished
        playing all the data it was sent.
    
    - Add event type enumeration to media player interface AudioSink callbacks
        so that the same callback can be used to handle multiple types of
        event. For offloaded tracks we also have to handle STREAM_END and
        TEAR_DOWN events
    
    - Pass audio_offload_info_t to various functions used for opening outputs,
        tracks and audio players. This passes additional information about the
        compressed stream down to the HAL when using offload.
        For publicly-available APIs this is an optional parameter (for some of
        the internal and low-level APIs around the HAL interface it is mandatory)
    
    - Add getParameters() and setParameters() API to AudioTrack
        Currently dummy implementations.
    
    - Change AudioPlayer contructor so that it takes a set of bitflags defining what
        options are required. This replaces the original bool which only specified
        whether to use deep buffering.
    
    - Changes to StageFright class definition related to handling tearing-down of
        an offloaded track when we need to switch back to software decode
    
    - Define new StageFright utility functions used for offloaded tracks
        Currently dummy implementations.
    
    - AudioFlinger changes to use extended audio_config_t.
        Fills in audio_offload_info_t member if this info is passed in when
        opening an output.
    
    - libvideoeditor changes required to add the new event type parameter
        to AudioSink callback functions
    
    - libmediaplayerservice changes required to add the new event type parameter
        to AudioSink callback functions
    
    Change-Id: I3ab41138aa1083d81fe83b886a9b1021ec7320f1
    Signed-off-by: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
    Signed-off-by: Eric Laurent <elaurent@google.com>
    New control block for AudioTrack and AudioRecord
    
    Main differences between old and new control block:
     - removes the mutex, which was a potential source of priority inversion
     - circular indices into shared buffer, which is now always a power-of-2 size
    
    Change-Id: I4e9b7fa99858b488ac98a441fa70e31dbba1b865
    make libaudioflinger symbols visibility hidden
    
    we export only symbols needed by clients of this library.
    this saves about 130KB (1/3rd of the lib size)
    
    Change-Id: Id81f3ecb299ee3abc0811915cf6efe87180bf15c
    Fix Audioflinger crash when TeeSink is enabled
    
    Bug: 8834855
    Change-Id: I54665f16d79901970348a8247d9a354da2990f42
    Fix Audioflinger crash when TeeSink is enabled
    
    Bug: 8834855
    Change-Id: I54665f16d79901970348a8247d9a354da2990f42
    Remove tee sink debugging at compile time
    
    Bug: 8223560
    Change-Id: Iddbfb06c45d43d9f20bb428215dd4094931e19a7
    Remove tee sink debugging at compile time
    
    Bug: 8223560
    Change-Id: Iddbfb06c45d43d9f20bb428215dd4094931e19a7
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Update tee sink
    
    Implement rotation to reduce long-term storage use.
    Implement optional per-track tee.
    Dynamically enable at runtime based on property, instead of at compile-time.
    Dynamic frame count not yet implemented.
    
    Bug: 8223560
    Change-Id: I3706443c6ec0cb0c6656dc288715a02ad5fea63a
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 32584a7d672864b20ab8b83a3cb23c1858e908b7
    
    Change-Id: I9dc680578b955b1af462eeb7a49d61a0d45eb81b
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 32584a7d672864b20ab8b83a3cb23c1858e908b7
    
    Change-Id: I9dc680578b955b1af462eeb7a49d61a0d45eb81b
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
     - increase log buffer sizes yet again
     - enable assertion checking without ALOGV
     - improve a few log messages
     - check for corruption in more places
     - log in all the process hooks
     - add new mixer APIs so we can check for corruption of mixer state
     - fix a build warning
    
    Bug: 6490974
    Change-Id: Ib0c4a73dcf606ef9bd898313b3b40ef61ab42f51
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
     - increase log buffer sizes yet again
     - enable assertion checking without ALOGV
     - improve a few log messages
     - check for corruption in more places
     - log in all the process hooks
     - add new mixer APIs so we can check for corruption of mixer state
     - fix a build warning
    
    Bug: 6490974
    Change-Id: Ib0c4a73dcf606ef9bd898313b3b40ef61ab42f51
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 639482c24c911b125398b31883ba6d55faebe28b
    
    Change-Id: I11f2829072ab11e18b0663024f27bf31192f1d39
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 639482c24c911b125398b31883ba6d55faebe28b
    
    Change-Id: I11f2829072ab11e18b0663024f27bf31192f1d39
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
     - increase StateQueue size from 4 to 8 entries
     - log mixer->enable(), bufferProvider, and currentTrackMask
     - log buffer provider addresses
     - increase fast mixer log buffer again
     - check logf format vs. argument list compatibility
     - add logging to AudioMixer
     - add checking of magic field in AudioMixer to detect overwrites
     - add bool AudioMixer::enabled()
    
    Bug: 6490974
    Change-Id: I1f3f18aa62d9fbd35bc32285b669f5ba40efe28e
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 0ddd56316262ac74a95e9edb595697c163136d6d
    
    Change-Id: I180a928af6f5a38d15a5efe44cd1fe927b5d961c
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 0ddd56316262ac74a95e9edb595697c163136d6d
    
    Change-Id: I180a928af6f5a38d15a5efe44cd1fe927b5d961c
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
     - log mFastIndex when AudioMixer sees an invalid bufferProvider.
     - log both potentially modified and actually modified tracks in FastMixer.
     - fix benign bug where sq->end() was called more than once.
     - log StateQueue push() call and return.
    
    Bug: 6490974
    Change-Id: Iee7c8f40e20b6000cd8286c0ec6a14fff4a37af1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
    
    Bug: 6490974
    Change-Id: I4c030f171343fe4b483eae0ddea4427118d8d4b1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
    
    Bug: 6490974
    Change-Id: I4c030f171343fe4b483eae0ddea4427118d8d4b1
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 3051df27261e9952c0e642dec548515250e85f6a
    
    Change-Id: I8bf5c3e91b65bd20de26f480c367c2854b62373c
    Revert "Temporary additional logging to investigate bug"
    
    This reverts commit 3051df27261e9952c0e642dec548515250e85f6a
    
    Change-Id: I8bf5c3e91b65bd20de26f480c367c2854b62373c
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
    
    Bug: 6490974
    Change-Id: I4c030f171343fe4b483eae0ddea4427118d8d4b1
    Temporary additional logging to investigate bug
    
    The bug appears related to continuing to use an invalid buffer provider
    in fast mixer after track destruction, so focus the added logs in that area.
    
    Also includes a bug fix: was calling log in an unsafe place
    near Threads.cpp AudioFlinger::PlaybackThread::createTrack_l line 1250.
    
    Details:
     - include caller pid or client pid where appropriate
     - increase log buffer size
    
    Bug: 6490974
    Change-Id: I4c030f171343fe4b483eae0ddea4427118d8d4b1
    AudioFlinger uses media.log service for logging
    
    Change-Id: Ia0f8204334f6b233f644d897762a18c95d936b4b
    AudioFlinger uses media.log service for logging
    
    Change-Id: Ia0f8204334f6b233f644d897762a18c95d936b4b
    Remove unnecessary parameter
    
    Just get the parameter on server side
    
    Change-Id: I433a63104dbb257e0d862be2ab61847cb36d1c15
    Remove unnecessary parameter
    
    Just get the parameter on server side
    
    Change-Id: I433a63104dbb257e0d862be2ab61847cb36d1c15
    Start isolating control block accesses in a proxy
    
    The proxy object will eventually be the only code that understands the
    details of the control block.  This should make it easier to change the
    control block in the future.
    
    Initial set of control block fields that are isolated:
     - sample rate
     - send level
     - volume
    
    Prepare for streaming/static separation by adding a union to the control
    block for the new fields.
    
    Fix bug in handling of max sample rate on a track.  It was only checking
    at re-configuration, not at each mix.
    
    Simplify OutputTrack::obtainBuffer.
    
    Change-Id: I2249f9d04f73a911a922ad1d7f6197292c74cd92
    Start isolating control block accesses in a proxy
    
    The proxy object will eventually be the only code that understands the
    details of the control block.  This should make it easier to change the
    control block in the future.
    
    Initial set of control block fields that are isolated:
     - sample rate
     - send level
     - volume
    
    Prepare for streaming/static separation by adding a union to the control
    block for the new fields.
    
    Fix bug in handling of max sample rate on a track.  It was only checking
    at re-configuration, not at each mix.
    
    Simplify OutputTrack::obtainBuffer.
    
    Change-Id: I2249f9d04f73a911a922ad1d7f6197292c74cd92
    AudioTrack::mute() is unused so remove it
    
    If ever needed again, it could be implemented on client side by forcing
    a track volume of 0.
    
    Change-Id: I88a9b4f675b6dca2948549414f9ec2c192d29269
    AudioTrack::mute() is unused so remove it
    
    If ever needed again, it could be implemented on client side by forcing
    a track volume of 0.
    
    Change-Id: I88a9b4f675b6dca2948549414f9ec2c192d29269
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    AudioFlinger files reorganization
    
    Audioflinger.cpp and Audioflinger.h files must be split to
    improve readability and maintainability.
    
    This CL splits the files as follows:
    
    AudioFlinger.cpp split into:
    - AudioFlinger.cpp: implementation of IAudioflinger interface and global methods
    - AFThreads.cpp: implementation of ThreadBase, PlaybackThread, MixerThread,
    DuplicatingThread, DirectOutputThread and RecordThread.
    - AFTracks.cpp: implementation of TrackBase, Track, TimedTrack, OutputTrack,
    RecordTrack, TrackHandle and RecordHandle.
    - AFEffects.cpp: implementation of EffectModule, EffectChain and EffectHandle.
    
    AudioFlinger.h is modified by inline inclusion of header files containing
    the declaration of complex inner classes:
    - AFThreads.h: ThreadBase, PlaybackThread, MixerThread, DuplicatingThread,
    DirectOutputThread and RecordThread
    - AFEffects.h: EffectModule, EffectChain and EffectHandle
    
    AFThreads.h includes the follownig headers inline:
    - AFTrackBase.h: TrackBase
    - AFPlaybackTracks: Track, TimedTrack, OutputTrack
    - AFRecordTracks: RecordTrack
    
    Change-Id: I512ebc3a51813ab7a4afccc9a538b18125165c4c
    Clean up channel count and channel mask
    
    Channel count is uint32_t.
    Remove redundant mask parameter to AudioTrack::createTrack_l()
        and AudioRecord::openRecord_l().
    
    Change-Id: I5dc2b18eb609b2c0dc3091994cbaa4628062c17f
    Clean up channel count and channel mask
    
    Channel count is uint32_t.
    Remove redundant mask parameter to AudioTrack::createTrack_l()
        and AudioRecord::openRecord_l().
    
    Change-Id: I5dc2b18eb609b2c0dc3091994cbaa4628062c17f
    Don't use control block frame count after create
    
    This is part of a series to clean up the control block.
    
    Change-Id: I7f4cb05aef63053f8e2ab05b286d302260ef4758
    Don't use control block frame count after create
    
    This is part of a series to clean up the control block.
    
    Change-Id: I7f4cb05aef63053f8e2ab05b286d302260ef4758
    Fix time vs. bytes units bug in getRenderPosition
    
    Rename correctLatency since it requires thread to be locked.
    Use size_t for byte and frame counts.
    
    Change-Id: I178fdd18bdb823813b9563927bdff8c0d28ca5a5
    Fix time vs. bytes units bug in getRenderPosition
    
    Rename correctLatency since it requires thread to be locked.
    Use size_t for byte and frame counts.
    
    Change-Id: I178fdd18bdb823813b9563927bdff8c0d28ca5a5
    Use size_t for frame counts
    
    Also fix typo: bufferCount should be frameCount.
    
    Change-Id: Ibed539504db75ef99dc21c8ff1bf2987122063a5
    Use size_t for frame counts
    
    Also fix typo: bufferCount should be frameCount.
    
    Change-Id: Ibed539504db75ef99dc21c8ff1bf2987122063a5
    Clean up frame size in AudioTrack and AudioFlinger
    
    TrackBase::mFrameSize, mChannelMask, and mChannelCount are now const.
    Use TrackBase::mFrameSize instead of re-calculating frame size.
    AudioFlinger only sees 16-bit PCM format, conversion from 8-bit is
      now entirely on the client side.  Previously a small part of the
      responsibility was on server side also.
    size_t is unsigned, so use %u in logs.
    Fix theoretical bug where TrackBase constructor was over-allocating space
      for non-linear AudioTrack or 8-bit PCM AudioRecord (probably benign).
    
    Change-Id: I7cbbba0bf4dba29ea751d8af341ab8e5cbbdc206
    Clean up frame size in AudioTrack and AudioFlinger
    
    TrackBase::mFrameSize, mChannelMask, and mChannelCount are now const.
    Use TrackBase::mFrameSize instead of re-calculating frame size.
    AudioFlinger only sees 16-bit PCM format, conversion from 8-bit is
      now entirely on the client side.  Previously a small part of the
      responsibility was on server side also.
    size_t is unsigned, so use %u in logs.
    Fix theoretical bug where TrackBase constructor was over-allocating space
      for non-linear AudioTrack or 8-bit PCM AudioRecord (probably benign).
    
    Change-Id: I7cbbba0bf4dba29ea751d8af341ab8e5cbbdc206
    Use uint32_t for sample rate
    
    Change-Id: Ie240b48fb54b08359f69ecd4e5f8bda3d15cbe80
    Use uint32_t for sample rate
    
    Change-Id: Ie240b48fb54b08359f69ecd4e5f8bda3d15cbe80
    Update audio comments
    
    Change-Id: I85d7d2f6381b251db5695202fec75128883a8662
    Update audio comments
    
    Change-Id: I85d7d2f6381b251db5695202fec75128883a8662
    Rename TrackBase::mFrameCount to mStepCount
    
    This prepares for adding a new field TrackBase::mFrameCount
    with a different meaning.
    
    Change-Id: I6bbe2c59f2a882be57caeec2e2e06f439a0e9e83
    Rename TrackBase::mFrameCount to mStepCount
    
    This prepares for adding a new field TrackBase::mFrameCount
    with a different meaning.
    
    Change-Id: I6bbe2c59f2a882be57caeec2e2e06f439a0e9e83
    Move frame size out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ifab1c42ac0f8be704e571b292713cd2250d12a3f
    Move frame size out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ifab1c42ac0f8be704e571b292713cd2250d12a3f
    Move buffers pointer out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ie474557db7cb360f2d9a0f11600a68f5a3d46f07
    Move buffers pointer out of the control block
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ie474557db7cb360f2d9a0f11600a68f5a3d46f07
    Remove CBLK_DIRECTION from control block flags
    
    This is part of a series to clean up the control block.
    
    Change-Id: I0265fece3247356b585d4d48fbda6f37aea8a851
    Remove CBLK_DIRECTION from control block flags
    
    This is part of a series to clean up the control block.
    
    Change-Id: I0265fece3247356b585d4d48fbda6f37aea8a851
    Remove CBLK_FAST from control block flags
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ic881a3560d9547cb63fcc0cefec87aa3da480e0d
    Remove CBLK_FAST from control block flags
    
    This is part of a series to clean up the control block.
    
    Change-Id: Ic881a3560d9547cb63fcc0cefec87aa3da480e0d
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Line length 100
    
    Change-Id: Ib28fd7b9ce951a6933f006e7f8812ba617625530
    Save copy of mic input, disabled by default
    
    Change-Id: I4f5e95a5ddf016530d1b2747a0a5ca0962caabda
    Save copy of mic input, disabled by default
    
    Change-Id: I4f5e95a5ddf016530d1b2747a0a5ca0962caabda
    Clean up constructor and derivation whitespace
    
    Change-Id: I47d688a9c10c4c3c868accc34102fb402ebcac62
    Clean up constructor and derivation whitespace
    
    Change-Id: I47d688a9c10c4c3c868accc34102fb402ebcac62
    Mark volume fields private
    
    Change-Id: I8ffca0460195263d159aa13015c246122d8556a2
    Mark volume fields private
    
    Change-Id: I8ffca0460195263d159aa13015c246122d8556a2
    bug 7253033 clean up before closing an output
    
    An output can only be closed if there is no lock contention that
     prevents ThreadBase::exit() from being blocked. If an output
     device is waiting for an operation to complete (here a write
     in the remote_submix module, because the pipe is full), signal
     the module that it's entering the "exiting" state.
    
    Change-Id: I8248add60da543e90c25a4c809866cdb26255651
    bug 7253033 clean up before closing an output
    
    An output can only be closed if there is no lock contention that
     prevents ThreadBase::exit() from being blocked. If an output
     device is waiting for an operation to complete (here a write
     in the remote_submix module, because the pipe is full), signal
     the module that it's entering the "exiting" state.
    
    Change-Id: I8248add60da543e90c25a4c809866cdb26255651
    Implement android.media.AudioManager.getProperty()
    
    Bug: 6635041
    Change-Id: I3386a4a6c226bc4eceaf65556119e4fb15f73224
    Implement android.media.AudioManager.getProperty()
    
    Bug: 6635041
    Change-Id: I3386a4a6c226bc4eceaf65556119e4fb15f73224
    audioflinger: send priority request from a thread
    
    When creating a fast AudioTrack, a request is sent to SchedulingPolicyService
    to elevate the requesting thread priority. This generates a binder
    call into system_server process and to a JAVA service via JNI.
    If the thread from which the track was created is in the system_server
    process and does not have the "can call java" attribute, a crash occurs because
    the binder optimization reuses the same thread to process the returning binder
    call and no JNI env is present.
    
    The fix consists in sending the priority change request from the AudioFlinger
    mixer thread, not from the binder thread.
    
    This also reverts the workaround in commit 73431968
    
    Bug 7126707.
    
    Change-Id: I3347adf71ffbb56ed8436506d4357eab693078a3
    audioflinger: send priority request from a thread
    
    When creating a fast AudioTrack, a request is sent to SchedulingPolicyService
    to elevate the requesting thread priority. This generates a binder
    call into system_server process and to a JAVA service via JNI.
    If the thread from which the track was created is in the system_server
    process and does not have the "can call java" attribute, a crash occurs because
    the binder optimization reuses the same thread to process the returning binder
    call and no JNI env is present.
    
    The fix consists in sending the priority change request from the AudioFlinger
    mixer thread, not from the binder thread.
    
    This also reverts the workaround in commit 73431968
    
    Bug 7126707.
    
    Change-Id: I3347adf71ffbb56ed8436506d4357eab693078a3
    Fix build in AudioFlinger/FastMixer
    
    Commit was missing some changes to modifications to send session ID
     from AudioFlinger to AudioMixer.
    
    Change-Id: I7daeaf4eff243b5287bef63be86a87acf408374a
    Fix build in AudioFlinger/FastMixer
    
    Commit was missing some changes to modifications to send session ID
     from AudioFlinger to AudioMixer.
    
    Change-Id: I7daeaf4eff243b5287bef63be86a87acf408374a
    Communicate audio session ID to downmixer
    
    The audio downmixer effect might need the audio session Id, pass it
     from the track creation in AudioFlinger to the downmix effect
     creation in AudioMixer.
    
    Change-Id: I836873eebd6711f1048fce81cd2eb29b94f0ad0c
    Communicate audio session ID to downmixer
    
    The audio downmixer effect might need the audio session Id, pass it
     from the track creation in AudioFlinger to the downmix effect
     creation in AudioMixer.
    
    Change-Id: I836873eebd6711f1048fce81cd2eb29b94f0ad0c
    Communicate audio session ID to downmixer
    
    The audio downmixer effect might need the audio session Id, pass it
     from the track creation in AudioFlinger to the downmix effect
     creation in AudioMixer.
    
    Change-Id: I5e29540542ae89cf4a0cdb537b3e67f04442a20a
    Communicate audio session ID to downmixer
    
    The audio downmixer effect might need the audio session Id, pass it
     from the track creation in AudioFlinger to the downmix effect
     creation in AudioMixer.
    
    Change-Id: I5e29540542ae89cf4a0cdb537b3e67f04442a20a
    audioflinger: changes for new audio devices enums
    
    The ThreadBase class now has a separate member for input
    and output devices (mInDevice, mOutDevice).
    
    Only query get_supported_devices() from audio HAL if the function
    is exposed and if the audio policy manager did not specify the
    audio module to open.
    
    Also fixed bug in AEC preprocessing that would reset
    to default output device when an input device was given.
    
    Change-Id: I19d4d06aeb920b068e3ef31e6e6be6345ce5d67a
    audioflinger: changes for new audio devices enums
    
    The ThreadBase class now has a separate member for input
    and output devices (mInDevice, mOutDevice).
    
    Only query get_supported_devices() from audio HAL if the function
    is exposed and if the audio policy manager did not specify the
    audio module to open.
    
    Also fixed bug in AEC preprocessing that would reset
    to default output device when an input device was given.
    
    Change-Id: I19d4d06aeb920b068e3ef31e6e6be6345ce5d67a
    AudioFlinger: send audio source to audio effects
    
    Added support for EFFECT_CMD_SET_AUDIO_SOURCE audio effect
    command to inform preprocessings of current audio source
    selection for capture.
    
    Change-Id: Ib2418a9aa8114e8457fe828ecd43b230ed86cdd6
    AudioFlinger: send audio source to audio effects
    
    Added support for EFFECT_CMD_SET_AUDIO_SOURCE audio effect
    command to inform preprocessings of current audio source
    selection for capture.
    
    Change-Id: Ib2418a9aa8114e8457fe828ecd43b230ed86cdd6
    Update audio comments
    
    Change-Id: Ie7504d0ddb252f7e4d4f99ed0b44cfc7b1049816
    Update audio comments
    
    Change-Id: Ie7504d0ddb252f7e4d4f99ed0b44cfc7b1049816
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    Move libnbaio out of AudioFlinger
    
    libnbaio is now a separate shared library from AudioFlinger, rather
    than a static library used only by AudioFlinger.
    
    AudioBufferProvider interface is now also independent of AudioFlinger,
    moved to include/media/
    
    Change-Id: I9bb62ffbc38d42a38b0af76e66da5e9ab1e0e21b
    const methods
    
    Change-Id: I92e32ee16274c032c9d0ce910676be2a7fa52471
    AudioFlinger: Better handling for master volume/mute
    
    (cherry picked from commit 93d906837e0e89aa1d9c913ab2b531b809f9bb9e)
    
    > AudioFlinger: Better handling for master volume/mute
    >
    > Changes to address bug 6842827.
    >
    > When a HAL is loaded, cache whether or not the HAL supports
    > set_master_volume/mute in the AudioHwDevice structure.  Store an
    > AudioHwDevice in AudioStream(In|Out) structures instead of just an
    > audio_he_device_t.  This give threads (PlaybackThreads in
    > particular) access to the cached capabilities.
    >
    > When setting master volume/mute, change the system to always set the
    > setting on all HAL which support it and also to set the setting on all
    > PlaybackThreads.  Change PlaybackThreads to apply the setting at the
    > in SW mix stage of the pipeline if its assigned HAL does not support
    > the setting, or to ignore the setting of the assigned HAL does support
    > it.
    >
    > Change-Id: Ia14137a30b4c3ee6f2d7ddcc8cba87bf5eec87f4
    > Signed-off-by: John Grossman <johngro@google.com>
    
    Change-Id: Icb6bc13764e100a2003eb1dee2231132ab287d98
    Signed-off-by: John Grossman <johngro@google.com>
    Change audio flinger to user HAL master mute if available
    
    (cherry picked from commit 91de9b56282d126ffb36344266af5fee3cefcfdd)
    
    > Change audio flinger to user HAL master mute if available
    >
    > Hand merge from ics-aah
    >
    > > Change audio flinger to user HAL master mute if available: DO NOT MERGE
    > >
    > > Replicate the pattern used for HAL master volume support to make use
    > > of master mute support if the HAL supports it.  This is part of the
    > > change needed to address bug 6828363.  Because of the divergences
    > > between ICS and master, this change will need to be merged by hand.
    > >
    > > Signed-off-by: John Grossman <johngro@google.com>
    > > Change-Id: I6d83be524021d273d093bcb117b8f2fe57c23685
    >
    > Change-Id: I32280582905c969aaec2bb166ec5c61df82d737a
    > Signed-off-by: John Grossman <johngro@google.com>
    
    Change-Id: I5cd709187221d307fe25c5117ccaadca5f6b197b
    Signed-off-by: John Grossman <johngro@google.com>
    Start adding support for multiple record tracks
    
    Replace single mTrack by vector mTracks.
    Destroy record tracks similarly to playback tracks.
    Dump all record tracks, in addition to the active record track.
    
    Change-Id: I503f10b51928b6b92698fe1c51a9ddd3215df1f4
    AudioFlinger: Better handling for master volume/mute
    
    Changes to address bug 6842827.
    
    When a HAL is loaded, cache whether or not the HAL supports
    set_master_volume/mute in the AudioHwDevice structure.  Store an
    AudioHwDevice in AudioStream(In|Out) structures instead of just an
    audio_he_device_t.  This give threads (PlaybackThreads in
    particular) access to the cached capabilities.
    
    When setting master volume/mute, change the system to always set the
    setting on all HAL which support it and also to set the setting on all
    PlaybackThreads.  Change PlaybackThreads to apply the setting at the
    in SW mix stage of the pipeline if its assigned HAL does not support
    the setting, or to ignore the setting of the assigned HAL does support
    it.
    
    Change-Id: Ia14137a30b4c3ee6f2d7ddcc8cba87bf5eec87f4
    Signed-off-by: John Grossman <johngro@google.com>
    Change audio flinger to user HAL master mute if available
    
    Hand merge from ics-aah
    
    > Change audio flinger to user HAL master mute if available: DO NOT MERGE
    >
    > Replicate the pattern used for HAL master volume support to make use
    > of master mute support if the HAL supports it.  This is part of the
    > change needed to address bug 6828363.  Because of the divergences
    > between ICS and master, this change will need to be merged by hand.
    >
    > Signed-off-by: John Grossman <johngro@google.com>
    > Change-Id: I6d83be524021d273d093bcb117b8f2fe57c23685
    
    Change-Id: I32280582905c969aaec2bb166ec5c61df82d737a
    Signed-off-by: John Grossman <johngro@google.com>
    Clean up start() parameters
    
    Document where int is used instead of AudioSystem::sync_event_t
      (probably because of a header file dependency).
    TrackBase::start() and RecordTrack::start() don't need default parameters.
    
    Change-Id: I82f4a4d078be900f3aa4bd926697e32f5ed68ec8
    Extract methods to enter standby and standby mode
    
    Also move initial standby from to threadLoop to avoid a race condition.
    
    Change-Id: I65afca83c36fb41b983b3b1d3dab35d4029560e3
    Use valueAt instead of editValueAt when possible
    
    Change-Id: I885b169f4b176a6b5c2ca9a534214b4ffff1700e
    effect_descriptor_t const correctness
    
    Change-Id: Iad008f20d35a18acf500f773900164552fd0c19e
    Fix races in AudioRecord stop()
    
    Change-Id: Id0ac1915f57fef4a938c7f90989c1162a8b6c51c
    Internal dump methods return void not status_t
    
    Only the IAudioFlinger::dump() needs to return a status_t.
    
    Change-Id: Iffeb2a7db4846df850b6b2ed960276f1fd75dba0
    Use audio_devices_t more places
    
    Change-Id: Id0ace02ca6f480a6c46e11880acf6cdc66d83184
    Don't call virtual methods in destructor
    
    The result of calling virtual methods from a destructor is undefined.
    
    Change-Id: I0fd4a19626e5ae564a60b753315b5f6c4b8d1f2c
    Use atomic ops for thread suspend count
    
    There was a theoretical but unlikely race if two binder threads
    executed suspend() or restore() concurrently.  Also added comments.
    
    Change-Id: I0908acc810b83bdd66455b27ca3429de1662a2cd
    Add tid parameter to IAudioFlinger::openRecord
    
    Not yet implemented
    
    Change-Id: I35523fb15ad71727ecc9f4bb870f07e4b7397dc4
    Remove dead code
    
    Change-Id: If22a6c4e572b0734eba0c5a7ce29a2c61c581e5d
    Record overflow cleanup
    
    Add comments and rename one method for clarity
    
    Change-Id: I04a9147e46e88a072256c0211b112d52202419e2
    Use audio_channel_mask_t more places
    
    Use it in AudioSystem::getOutput(), AudioSystem::getInput(),
    IAudioPolicyService::getOutput(), IAudioPolicyService::getInput(),
    and various other places in AudioFlinger.
    
    Not done: AudioTrack and OutputDescriptor.
    
    Change-Id: I70e83455820bd8f05dafd30c63d636c6a47cd172
    Add comments on use of volatile for track count
    
    and add acquire load at the read
    
    Change-Id: Ib41a58f5b1f6af87a8bd63d3f77d2ec0e48cb479
    Remove 'volatile' from mMute and add comments
    
    Change-Id: I386ba27b2305a397aba70331c6bf0d35ea727cf6
    Whitespace and indentation
    
    Change-Id: I424052b4ff9218147a5cfc8e6dcd67fe8105d229
    AudioFlinger::getBuffer() always returns non-NULL
    
    Change-Id: I543d3db507597cacbfdad5d9ea71732137fe54fb
    Only write to mDevice once
    
    This fixes a bug where readers might see intermediate values.
    Also add comments about how mStandby and mDevice are used.
    
    Change-Id: Idc84e56c21381a45137a2ca5ff9c57d437201869
    Remove debug code HAVE_REQUEST_PRIORITY and SOAKER
    
    Change-Id: I73a2afe72d8acb53e57e6b4e6fb5133e22b7875a
    audioflinger: fix effect disconnect deadlock
    
    Fix possible deadlock when several EffectHandles on the same
    EffectModule are destroyed simultaneously:
     A wp on an EffectHandle should not be promoted to a local sp
    with ThreadBase mutex held as the EffectHandle destructor can be
    called when the sp gets out of scope which will call
    ThreadBase::disconnectEffect() and try to acquire the mutex.
    
    Use raw pointers instead of weak pointers for the list of handles
    on an EffectModule.
    
    Bug 6679606.
    
    Change-Id: Ice8b602fb03a7d363c44ce3dced8a53540d96270
    Use audio_channel_mask_t more consistently
    
    In IAudioFlinger::createTrack() and IAudioFlinger::openRecord(),
    declare input parameter to use correct type audio_channel_mask_t.
    
    In IAudioFlinger::getInputBufferSize(), input parameter is now channel mask
    instead of channel count.
    
    Remove unused IAudioFlinger::channelCount(audio_io_handle_t).
    
    In AudioRecord::getMinFrameCount() and AudioSystem::getInputBufferSize(),
    input parameter is channel mask instead of channel count.
    
    Change-Id: Ib2f1c29bea70f016b3cfce83942ba292190ac965
    Remove longStandbyExit
    
    It was never set (the assignment was within an "if" that was never true).
    
    Change-Id: I01cc68e9df6b190eece621b2aa9858b4361880ce
    Fix uninitialized field EffectModule::mPinned
    
    Also mark EffectModule::mId and EffectModule::mSessionId const, and
    document the initialization of other fields in EffectModule.
    
    Change-Id: Ic1ca008e75e9b5924743ffc35bef80057f3a0669
    audioflinger: fix auxiliary effect attachment
    
    Auxiliary effects (Reverb) are global effects and as such follow
    the default rule which is to attach them to the output thread that
    handles music streams by default. This causes a problem when several
    threads are eligible to handle music streams as tracks can be attached
    to either thread based on criteria unknown when teh effect is created.
    
    The fix consists in moving the auxiliary effect if necessary when an
    AudioTrack is attached to it and this track is not on the same
    output thread.
    
    Bug 6608561.
    
    Change-Id: Ib32c3cabc731b2046aba728be1771982999c6069
    audioflinger: fix setStreamOutput()
    
    AudioFlinger::setStreamOutput() should also work for direct outputs.
    Also ignore the destination output specified to match the expected
    behavior which is to invalidate all tracks using the specified stream
    type so that they can be re created on the correct ouput thread.
    
    Do not send STREAM_CONFIG_CHANGED event wich is ignored by AudioSystem
    anyway since the stream to output cache has been removed.
    
    Change-Id: I13d9d47922923b630dd755717875424c16be4637
    Add audio watchdog thread
    
    Change-Id: I4ed62087bd6554179abb8258d2da606050e762c0
    Reduce underruns in screen off, esp. with EQ
    
    Add MonoPipe APIs to specify setpoint.
    Use screen state to configure pipe setpoint.
    Fix a long-standing bug where pipe sleep time was excessive,
      which interacted poorly with governor and low clock frequencies.
      Now it deducts the elapsed time since last write(),
      which was significant when there was EQ and low clock frequency.
    
    Bug: 6618373
    Change-Id: I6f3b0072c2244aeb033ef0795ad164491a164ff5
    Reduce underruns in screen off, esp. with EQ
    
    Add MonoPipe APIs to specify setpoint.
    Use screen state to configure pipe setpoint.
    Fix a long-standing bug where pipe sleep time was excessive,
      which interacted poorly with governor and low clock frequencies.
      Now it deducts the elapsed time since last write(),
      which was significant when there was EQ and low clock frequency.
    
    Bug: 6618373
    Change-Id: I6f3b0072c2244aeb033ef0795ad164491a164ff5
    Take latency and current time into account for visualization
    
    Buffer more data, and return the data that is currently being
    output from the audio output, to ensure that visualizations are
    smooth and responsive even when the audio output has a large
    latency and/or large buffers.
    b/6522728
    
    Change-Id: I401637f01be7600b3c594a55c869036c13b206c0
    audioflinger: various fixes on direct output
    
    Various fixes in direct output playback thread implementation:
    - threadLoop_write() was broken for playback threads that do not
    use a pipe sink.
    - output buffer size calculation was hard coded for stereo.
    - removed software volume that was implemented for PCM stereo
    format only: the audio HAL has to implement volume if needed
    for direct outputs.
    
    Change-Id: If211b4489be9af395435707b8cf0388cce1347b2
    State queue dump
    
    Bug: 6591648
    Change-Id: Iac75e5ea64e86640b3d890c46a636641b9733c6d
    Fix fast track leak if out of normal track names
    
    Bug: 6580402
    Change-Id: I3ac7f012062c35833147f47ba822eb4bf532a824
    audioflinger: fix effect problem during underrun
    
    When an audio track underruns, the input buffer of the
    corresponding effect chain (if any) must be cleared, otherwise
    audio from previous mixer run will be fed again to the effect process
    function.
    
    Bug 6551652.
    
    Change-Id: I5cd02196745f756c85af82d6937e9dc54369b37f
    audioflinger: refine latency latency calculation.
    
    There is an audio pipe between the normal mixer output and the fast
    mixer to cope for scheduling delays and buffer size difference.
    This pipe depth was not taken into account in latency calculation.
    
    Adding the pipe contribution to the latency significantly improves A/V sync.
    
    Bug 6520569.
    
    Change-Id: I5584908e8aa8a02170eb38b22b4370eea800a235
    Keep a copy of most recent audio played
    
    Change-Id: I6b2f97881c39998a2fae9ab79d669af6c0a37e94
    Display pipe underrun counters in dumpsys
    
    The normal mixer writes it's submix to a pipe, which is read by the fast
    mixer.  Now dumpsys media.audio_flinger display the raw underrun counters
    when fast mixer tries to pull from the pipe but doesn't get enough frames.
    
    Change-Id: I72505f149f9e12802784da654a651d43734e1c79
    Fix static track activity ref counting
    
    When a static AudioTrack underruns, it means that playback is over.
    As apps do not necessarily stop playback explicitly, AudioFlinger
    should call stopOutput() to decrease activity ref count in
    audio policy manager.
    
    Bug 6486311.
    
    Change-Id: I1ea722c443780329ded6310c958b24726e918d16
    Fix static track activity ref counting
    
    When a static AudioTrack underruns, it means that playback is over.
    As apps do not necessarily stop playback explicitly, AudioFlinger
    should call stopOutput() to decrease activity ref count in
    audio policy manager.
    
    Bug 6486311.
    
    Change-Id: I1ea722c443780329ded6310c958b24726e918d16
    Fix issues with synchronous record start.
    
    - Added a timeout in case the trigger event is never fired.
    - Extend AudioRecord obtainBuffer() timeout in case of
    synchronous start to avoid spurious warning.
    - Make sure that the event is triggered if the track is
    destroyed.
    - Reject event if the triggering track is in an incompatible state.
    
    Also fix a problem when restoring a static AudioTrack after
    a mediaserver crash.
    
    Bug 6449468.
    
    Change-Id: Ib36e11111fb88f73caa31dcb0622792737d57a4b
    Improve underrun handling for fast tracks
    
    Maintain more accurate accounting of type of underrun.
    Automatically remove track from active list after a series of "empty" underruns.
    
    Change-Id: If042bf80e1790dcaaf195c99dc9c0ed9b55382c1
    Fix stopping process for fast tracks
    
    Previously, the state of a fast track "wiggled" back and forth at the end.
    
    Now it goes through these transitions:
      active -> stopping_1 -> stopping_2 -> stopped
    
    This CL is only for fast tracks, and does not change how
    normal tracks work.
    
    Change-Id: Icc414f2b48c46dda63cfa6373ca22d033dd21cd4
    Temporary fix for both normal tracks & fast tracks
    
    If there is at least one active fast track, it forces a mixer
    status of ready, which messes up the logic for normal track underruns.
    
    Change-Id: I9de2fcaef090e2c2f99682333af3d3dd618b0d6b
    Fix race condition for non-started fast tracks
    
    This required re-implementing how fast tracks are considered active.
    Now, they use the same logic as normal tracks, except underrun is ignored.
    
    Other changes:
     - add framesReady() to AudioBufferProvider interface
     - rebased
     - add track underrun counter state to fast mixer dump state
     - move dumpsys header to Track::appendDumpHeader()
       so it closer to where tracks are dumped
     - display track state in dumpsys as a character code
     - measure and display warmup time and cycles in dumpsys
     - copy in the presentation complete code
     - add ExtendedAudioBufferProvider for framesReady() which returns size_t
     - simplify underrun tracking
     - deferred reset track after stop()
     - add comments
    
    Change-Id: I7db8821bc565230ec76da1f9380fe3fb09735e5b
    AudioFlinger: fix stop detection for static tracks
    
    The end of playback and end of presentation detection was broken for
    static AudioTracks (tracks using shared memory buffers passed by client).
    
    The mixer should not wait for a minimal amount of frames to be available to mix
    a static track otherwise the last frames might never be consumed.
    
    A static track should be removed from active list in case of underrun even if not
    stopped().
    
    Issue 6411521.
    
    Change-Id: I66a2c1a77e98149e5049a223a6f04c3b8c5ad11a
    AudioFlinger: fix tracks ready for mixing logic.
    
    Commit fec279f5 broke the logic allowing to wait for an application
    to provide frames for mixing in the case of several active tracks.
    
    This was causing audio gaps when playing music and superposing a
    sound Fx (keyboard clicks...).
    
    Issue 6185007.
    
    Change-Id: Id0fad150d0b615646d6b1387c0de8ca944d228f6
    AudioFlinger: fix tracks ready for mixing logic.
    
    Commit fec279f5 broke the logic allowing to wait for an application
    to provide frames for mixing in the case of several active tracks.
    
    This was causing audio gaps when playing music and superposing a
    sound Fx (keyboard clicks...).
    
    Issue 6185007.
    
    Change-Id: Id0fad150d0b615646d6b1387c0de8ca944d228f6
    AudioFlinger normal mixer uses FastMixer
    
    Change-Id: I3131bb22d2d057e9197a2ebfa6aa1cfaab9e5321
    Configure policy of mediaserver threads
    
    Change-Id: Ifd825590ba36996064a458f64453a94b84722cb0
    rename audio policy output flags
    
    Change-Id: I27c46bd1d1b2b5f96b87af7d05b951fef18a1312
    TimedAudio: Track of the number of pending frames.
    
    This is a manual merge from ics-aah
    
    > TimedAudio: Track of the number of pending frames.
    >
    > Keep track of the number of frames pending in the timed audio queue so
    > we can implement framesReady in O(1) time instead of O(N).  This
    > change partially addresses bug 6020970; the bug will be completely
    > addressed once this change has been up-integrated into master.
    >
    > Change-Id: I599eb15ea1f6d715b97b30e65214fb6fadd169df
    > Signed-off-by: John Grossman <johngro@google.com>
    
    Change-Id: I6cbbbc3afc8efd066fe94865326ede0c6b3db2bd
    Signed-off-by: John Grossman <johngro@google.com>
    TimedAudio: Fix a cause of audio popping.
    
    This is a manual merge from ics-aah
    
    > TimedAudio: Fix a cause of audio popping.
    >
    > Fix an issue with buffer lifecycle management which could cause audio
    > pops on timed outputs.  There were two issues at work here.
    >
    > 1) During trim operations for the queued timed audio data, buffers
    >    were being trimmed based on their starting PTS instead of when the
    >    chunk of audio data actually ended.  This means that if you have a
    >    very large chunk of audio data (larger than the mixer lead time),
    >    then a buffer at the head of the queue could be eligible to be
    >    trimmed before its data had been completely mixed into the output
    >    stream, even though the output stream was fully buffered and in no
    >    danger of underflow.
    > 2) The implementation of getNextBuffer and releaseBuffer for timed
    >    audio tracks was not keeping anything like a reference to the data
    >    that it handed out to the mixer.  The original architecture here
    >    seemed to be expecting a ring buffer design, but timed audio tracks
    >    use a packet based design.  Pieces of packets are handed out to the
    >    mixer which then frequently will hold onto that chunk of data
    >    across two mix operations, using the first part of the chunk to
    >    finish a mix buffer and then using the end of the chunk for the
    >    start of the next mix buffer.  If the buffer that the mixer is
    >    holding a piece of got trimmed before the start of the next mix
    >    operation, it would return to its heap and could be filled with who
    >    knows what by the time it actually got mixed.  On debug builds,
    >    they seem to get zero'ed out as they go back to the heap causing
    >    obvious pops in presentation.
    >
    > This change addresses both issues.  Trim operations are now based on
    > ending presentation time for a chunk of audio, not the start.  Also,
    > when the head of the queue is in flight to the mixer, it can no longer
    > be trimmed immediately, merely flagged for trim by the mixer when the
    > mixer finally does call releaseBuffer.
    >
    > Signed-off-by: John Grossman <johngro@google.com>
    > Change-Id: Ia1ba08cb9dea35a698723ab2d9bcbf804f1682fe
    
    Change-Id: I2c5e2f0375c410f0de075886aac56ff6317b144c
    Signed-off-by: John Grossman <johngro@google.com>
    AudioMixer uses downmix effect for multichannel content
    
    In the AudioMixer structure associated with each track, add an object
      that acts as the buffer provider when the track has more than two
      channels of input in the mixer. This object, DownmixerBufferProvider,
      gets audio from the actual buffer provider of the track, and applies
      a downmix effect on it.
    The downmix effect is created and configured when the track gets
      created in AudioFlinger, which causes AudioMixer::getTrackName()
      to be called with the new track's channel mask. It is released
      when the track is disabled in the mixer.
    
    Change-Id: I05281ed5f61bef663a8af7ca7d5ceac3517c82db
    audio policy: load audio hw modules.
    
    Audio HW modules are now loaded upon request from audio policy manager
    according to the configuration in audio_policy.conf.
    Removed hard coded HW module loading by AudioFlinger at init time.
    Added methods to IAudioFlinger and AudioPolicyInterface
    to control the loading of audio HW modules.
    Added methods to open an output or input stream on a specific hw module.
    
    Change-Id: I361b294ece1a9b56b2fb39cc64259dbb73b804f4
    audio policy: add configuration file
    
    removed outputs to stream mapping cache in audio system: the output for a
    given stream type must always be queried from audio policy manager as the cache
    is not always updated fast enough by audioflinger callback.
    
    removed AudioFlinger::PlaybackThread::setStreamValid() not used anymore if
    stream to output mapping is not cached.
    
    Change-Id: Ieca720c0b292181f81247259c8a44359bc74c66b
    AudioFlinger track flags and server's fast policy
    
    Change-Id: I72358c8e6829d173b3e60ced8a8babc089869fac
    const methods and comments
    
    Change-Id: Ifd16750174fdb15b72507787502b587562ffc99e
    implemented synchronous audio capture
    
    Added the infrastructure to support the synchronization of playback and
    capture actions on specific events.
    The first requirement for this feature is to synchronize the audio capture
    start with the full rendering of a given audio content.
    The applications can further be extended to other use cases
    (synchronized playback start...) by adding new synchronization events and
    new synchronous control methods on player or recorders.
    
    Also added a method to query the audio session from a ToneGenerator.
    
    Change-Id: I51f1167290d9cafdf2fbcdf9e4785156973af44c
    Clean up Track constructor
    
    The 'thread' parameter can never be NULL.
    Use constructor initialization list when possible.
    Make more members const.
    Only put the relevant code under "if (mCblk != NULL)".
    Add comment about track name leak.
    
    Change-Id: Ib963390a69bed1999638cc982a759edd1d5f4712
    Update comments
    
    Change-Id: I327663a020670d0a72ff57bd0b682e2ce0528650
    IAudioFlinger::createTrack and openRecord flags
    
    createTrack and openRecord don't need the "old" flags parameter,
    which was either audio_policy_output_t or audio_in_acoustics_t
    shifted left by 16 bits.  But they do need "new" flags, which
    are defined by the application use case.  Initially, the only
    application use case flag is timed output, but others are planned.
    
    For output, the audio_policy_output_t flags are passed to
    AudioSystem::getOutput, which returns an audio_io_handle_t, and that
    handle is then passed to createTrack. So createTrack doesn't need the
    old flags parameter.
    
    For input, the audio_in_acoustics_t flags are passed to
    AudioSystem::getInput, which returns an audio_io_handle_t, and that
    handle is then passed to openRecord. So openRecord doesn't need the
    old flags parameter.
    
    Change-Id: I18a9870911846cca69d420c19fe6a9face2fe8c4
    Whitespace and indentation
    
    Fix indentation to be multiple of 4.
    Make it easier to search:
      sp< not sp < to
      "switch (...)" instead of "switch(...)" (also "if" and "while")
    Remove redundant blank line at start or EOF.
    Remove whitespace at end of line.
    Remove extra blank lines where they don't add value.
    
    Use git diff -b or -w to verify.
    
    Change-Id: I966b7ba852faa5474be6907fb212f5e267c2874e
    Inline applyVolume() into threadLoop_mix()
    
    Also the declaration of applyVolume in PlaybackThread was dead.
    
    Change-Id: I4b1a9848d07d3d7f340baea05b17f667c78df868
    Merge dup code at thread entry and param change
    
    This CL is mostly just cleanup, but there are a couple of fixes marked
    "FIX" below.
    
    Merge the duplicate code that was at the beginning of threadLoop() and
    after a parameter change.  cacheParameters_l() is now called at entry to
    threadLoop() and after any parameter change.  It re-calculates all values
    that are derived from parameters, and caches them in instance variables.
    
    updateWaitTime_l():
     - FIX activeSleepTime depends on mWaitTimeMs, which was initially set
       to infinity.  updateWaitTime_l() was not called at entry to
       threadLoop(), so activeSleepTime was not set correctly before the
       first parameter change.
    
     - FIX reversed the order of calls after parameter change
       for the same reason so that updateWaitTime_l() is called before
       calculating values that are derived from wait time.
    
     - marked it private since now it's only called from DuplicatingThread
    
    Change-Id: If2607d2ed66c6893d910433e48208a93c41fb7e9
    Use audio_policy_output_flags_t consistently
    
    This affects:
     - IAudioFlinger::openOutput
     - AudioTrack::AudioTrack
     - AudioTrack::set
     - apps that call these
    
    Change-Id: I26fb281bac6cb87593d17697bc9cb37a835af205
    Remove virtual from methods that don't need it
    
    Change-Id: I30e17e61aae25b036436c0e270313c80c43e5f06
    Remove unnecessary friend declarations
    
    Add comments to the remaining friends, so we know what is left if we
    decide to remove them later.
    
    Change-Id: I1de929257dc4700960f77902cda3d303177c72cf
    Replace hard-coded 3 by FCC_2 to simplify searches
    
    Change-Id: I92881d04e8378307f849fb343071a58d181a68b4
    Mixer status cleanup
    
    Use mPrevMixerStatus for DirectOutputThread also.
    Remove the MIXER_CONTINUE logic and use MIXER_IDLE instead.
    Rename the field mixerStatus to mMixerStatus.
    Rename local variable back to mixerStatus.
    
    Change-Id: I0a8145fc856c6c5ff8b784b6176ef3c4d8eb7408
    Cleanup DirectOutputThread::mActiveTrack
    
    Rename activeTrack to mActiveTrack.
    Release the reference earlier, at the end of threadLoop_mix().
    This allows the field to be made private and to
      move the declaration from PlaybackThread to DirectOutputThread.
    
    Change-Id: I02be7a254638f7d85e92aaf0002d20ca0092a5c3
    Isolate references to outputTracks/mOutputTracks
    
    Move all references to DuplicatingThread::outputTracks and
    DuplicatingThread::mOutputTracks from the common threadLoop() into
    virtual methods.  This allows them to be moved from PlaybackThread to
    DuplicatingThread, and to be marked private.
    
    Also use vector assignment to copy mOutputTracks to outputTracks.
    
    Change-Id: Ieb1cf1ad36b8a65143e61e6c92a65fb43427e5e2
    Make applyVolume private to DirectOutputThread
    
    Change-Id: I7ca4a59505857cbd106b6f274c66e9580dead271
    Merge the calls to prepareTracks_l
    
    Change-Id: I1dd759581333e2908d980180d44db7bf5ed6591d
    IAudioFlingerClient::ioConfigChanged param2 const
    
    The 3rd parameter (param2) to AudioFlingerClient::ioConfigChanged
    is used as an input.  So changed it from void * to const void *.
    It is then cast to const OutputDescriptor *
    or const audio_stream_type_t * depending on the event.
    
    Change-Id: Ieec0d284f139b74b3389b5ef69c7935a8e5650ee
    Add comments about sequence for setting parameters
    
    Change-Id: Iffa59a34c3c47bdc1d3234cdcb4d8ff99c102825
    Rename updateWaitTime since a lock is held
    
    Change-Id: I9bb978cbd0debf5b21676467060f72eebafea3e6
    Rename fields of AudioSessionRef
    
    Change-Id: I9f2a66094135c4ac6bec2d3e9db3ac5fbf988ede
    threadLoop merge
    
    Change-Id: Id8e6330ac6be76f9c2debba94f856de87e2d98f7
    Prepare for threadLoop merge - active tracks
    
    Continued work on making the copies of threadLoop more similar:
     - Remove alias for mActiveTracks in MixerThread and DuplicatingThread.
     - Pull in declaration of activeTrack in DirectOutputThread.
     - Remove redundant parameter of prepareTracks_l().
     - Comment prepareTracks_l().
    
    Change-Id: If1087c1902b454acec01ddfdd9f055f0ca7abf04
    mSuspend comments and usage
    
    Emphasize that playbackthread::mSuspend is a counter, not a bool
    
    Change-Id: I7188e56814e1c54dbc65e560f3627f138257d644
    Update AudioFlinger comments
    
    Add comments to enum mixer_state
    Note side-effect of lockEffectChains_l
    Fix a typo
    
    Change-Id: Ibd51678bac2193201cbcbe081ff5664046fbc494
    Shorten thread names
    
    prctl(PR_SET_NAME) limits to 15 characters.  Before we had names like
    "Binder Thread #" and the counter was cut off :-( Also remove redundant
    "thread" at end of name; it's always a thread.
    
    Change-Id: I1f99c2730ba0787ed9b59c15914356cddf698e2f
    AudioFlinger const methods and parameters
    
    Change-Id: I93ec28024005ed23aa141518092a012a4a7c44c5
    Pull out duplicated copies of silent mode check
    
    Also fix the error handling for the property_get.
    
    This is part of preparation for the threadLoop() merge.
    
    Change-Id: I6405190ea18146d1271575e1dfe9f279e8f36b17
    AudioBufferProvider comments and cleanup
    
    Add comments about which methods implement the AudioBufferProvider interface.
    
    Simplified the definition of kInvalidPts.  <stdint.h> is very hard to work
    with, there seems to be no way to use it reliably to get INT64_MAX without
    having a separate source file, which is ugly because it means kInvalidPts
    is not a compile-time constant.  So I just deleted AudioBufferProvider.cpp
    and used a hard-coded constant instead.
    
    Added a default constructor for Buffer so that the fields aren't random
    (especially .raw which is used to determine if the buffer is valid).
    
    Make the pts for getNextBuffer default to kInvalidPTS so code that
    doesn't need a pts doesn't have to specify a value.
    
    Rename the parameter to AudioMixer::setBufferProvider to make it clearer.
    
    Change-Id: I87e7290884d4ed975b019f62d1ab6ae2bc5065a5
    Fix tracking of hardware state for dump
    
    At end of AudioFlinger::onFirstRef(), the hardware status was being left
    in wrong state.  It should be AUDIO_HW_IDLE but was AUDIO_HW_INIT.
    
    mHardwareStatus was being set to AUDIO_HW_OUTPUT_OPEN too early, and so
    a return would leave it in the wrong state until next hardware operation.
    
    Take the hardware lock for dev->get_parameters, and update mHardwareStatus
    before and after.
    
    Keep hardware lock only for the duration of the dev->set_parameters.
    
    Rename two constants in enum hardware_call_state to have the prefix
    AUDIO_HW so they follow the naming conventions.
    
    Add comments.
    
    Change-Id: I6c7450b11f9b13adaeef9cec874333e478a58fc0
    Remove TrackBase::mFlags
    
    The bit-field TrackBase::mFlags was supposed to have track-specific
    flags in the upper 16 bits, and system flags in the lower 16 bits.
    
    The upper 16 bits of mFlags were initialized in the TrackBase
    constructor from the flags parameter of IAudioFlinger::createTrack()
    and IAudioFlinger::openRecord(), and the lower 16 bits were cleared.
    
    However, the upper 16 bits of mFlags were never acccessed again.
    So really there are no track-specific flags.  I left the flags
    in the parameter list of createTrack() and openRecord() but made a
    note that these should be removed eventually as they are dead.
    
    This leaves only the one system flag "step server failed".  I replaced
    the bit-field mFlags by bool mStepServerFailed, which is simpler and
    slightly faster.
    
    Change-Id: I6650f5487be72791b4a67d73adcd10ffa04e2aa5
    Avoid wp<>::unsafe_get() with a few exceptions
    
    Avoid using wp<>::unsafe_get() except in a log, and other specific cases
    when it's known to be safe.
    
    Use more specific subclass types for parameters to avoid down-casts.
    
    When a constructor or method parameter is "this" of an object that is
    currently being constructed, it's better to use a raw pointer rather
    than either sp<> or wp<>.
    
    Using the raw pointer is safe, provided either:
     - it is "this" of an object being constructed (which has sp<> refcount of 0),
     - or the caller already holds an sp<>
    
    The raw pointer is simpler and faster, and it avoids the problem of the
    sp<> reference count being incremented and then decremented to zero on
    scope exit, which would cause the object's destructor to run while the
    object is still being constructed.
    
    Also removed some dead code per a review comment.
    
    Change-Id: I7375f64da3aec11b928c33cb01faff186252ef5e
    Simplify code
    
    Use DefaultKeyedVector::valueFor to avoid extra test
    Make local variables as local as possible
    No double parentheses
    No typedef for single use
    No parentheses around indirect function call
    No AudioFlinger:: prefix when not needed
    Remove unnecessary casts
    Remove block with only one line
    
    Saves 128 bytes
    
    Change-Id: I3a87430eeb01b81e7b81a1c38f6fdd3274ec48f3
    Upintegrate Audio Flinger changes from ICS_AAH
    
    Bring in changes to audio flinger made to support timed audio tracks
    and HW master volume control.
    
    Change-Id: Ide52d48809bdbed13acf35fd59b24637e35064ae
    Signed-off-by: John Grossman <johngro@google.com>
    Update comments
    
    We no longer put the filename at start of file.
    
    Change-Id: Ic435b159a23105681e3d4a6cb1ac097bc853302e
    AudioRecord and AudioTrack client tid
    
    Inform AudioFlinger of the tid of the callback thread.
    
    Change-Id: I670df92dd06749b057238b48ed1094b13aab720b
    mAudioHwDevs and related cleanup
    
    Inline AudioFlinger::initCheck and remove unnecessary lock.
    
    Remove redundant check of mAudioHwDevs.size().
    
    No need to lock mHardwareLock for each device separately
    during initialization.
    
    Use size_t not int to loop through Vector, since size() returns size_t.
    
    Add missing hardware lock for get_mic_mute() and get_input_buffer_size().
    
    Add comments.
    
    Change-Id: Iafae78ef78bbf65f703d99fcc27c2f4ff221aedc
    Simplify ThreadBase::exit() aka requestExitAndWait
    
    We can remove mExiting and use Thread::exitPending() instead.
    
    The local sp<> on "this" in exit() is not needed, since the caller must
    also hold an sp<> in order to be calling us. (Unless it was using a raw
    pointer, but that would be dangerous for other reasons.)
    
    Add comment explaining the mLock in exit().
    
    Change-Id: I319e5107533a1a7cdbd13c292685f3e2be60f6c4
    Move header declarations around for clarity
    
    Put IAudioFlinger methods in binder opcode order.
    Move hardware call state closer to where it is used.
    getMode() and btNrecIsOff() are private.
    
    Change-Id: Ie50340b396c39c763f2b155cbc08da8a0d0f2424
    Camel case readability & private disconnect(bool)
    
    Change-Id: If66516ed2703e048c5e6ccc6cd431446a024f4a1
    Fix races related to volume and mute
    
    Fix race conditions when setting master volume, master mute, stream
    volume, stream mute for a playback thread, and when reading stream
    volume of a playback thread.  Lock order is AudioFlinger, then thread.
    
    Rename streamVolumeInternal to streamVolume_l, comment, and use it to
    implement streamVolume().
    
    Code size reduction:
     - Remove dead code: AudioFlinger::PlaybackThread::masterVolume, masterMute, streamMute.
     - Change return type of non-binder methods that always succeed from status_t to void.
     - Remove virtual from volume and mute methods that don't need it.
    
    This change saves 228 bytes but decreases performance of binder operations
    due to the added locks.
    
    Change-Id: Iac75abc1f54784873a667d1981b2e08f8f31e5c9
    Move declaration of stream_type_t up earlier
    
    stream_type_t is used by AudioFlinger class, so it should be declared there.
    This way we don't have to peek into PlaybackThread to get the declaration.
    
    Change-Id: Ie08bab1604699214d1e8df2d48d3fbfbbc436e96
    Rename type() to streamType()
    
    This avoids possible confusion with thread's type().
    Also remove redundant cast "(audio_stream_type_t)".
    
    Change-Id: I320b9177b6c267a102d215f002228bcf988c437a
    Combine duplicate code & document wp<> in mClients
    
    Change-Id: Iea8cfe8e57563337fb2484a1246ef79d6ad3db18
    Use audio_io_handle_t consistently instead of int
    
    Other:
     - add a comment to nextUniqueId
     - made ThreadBase::mId const, since it is only assigned in constructor.
    
    Change-Id: I4e8b7bec4e45badcde6274d574b8a9aabd046837
    Effect UUID inputs passed by pointer are const
    
    Change-Id: I1f5c338bcb7368e3dd8cd5f804b2e6d9fbe087f8
    Explicitly manage common clock client lifetimes.
    
    Change the CCHelper class to be an instanced instead of a static
    pattern.  The CCHelper instances all share an interface to the common
    clock service and register/unregister a callback handler in response
    to there being CCHelper instance in the system or not.  This brings
    usage of the CCHelper into like with the new auto-disable
    functionality of the common time service.  For any given process,
    whenever there are CCHelper instances active, the process will
    maintain a callback target to the common clock service and will be
    considered to be an active client.
    
    Also change all of the users of the CCHelper interface to manage the
    lifecycle of their new CCHelper instances.
    
    Change-Id: I7c28c5d70d9b07ba7407b4ac706e7e7d7253001b
    Remove dead code
    
    mFormat is unused in resampler
    mClientTid is unused
    local variable pid is unused in dump
    
    Change-Id: Ib156e38029366620bfeff2a13e73471867155a5b
    Declare more IAudioFlinger methods const
    
    This is just documentation, as C++ method const-ness doesn't mean anything
    for a binder API.  Instead, here const means "no side effects".
    
    Change-Id: Iaa9cd2fe477db10ae9a40cac4f79f0faa9b4e5e6
    AudioFlinger methods const and inline
    
    This saves 1063 bytes and probably improves performance.
    
    Change-Id: I11cf0dfd925fbaec75e3d1b806852a538eae5518
    Use virtual destructors
    
    It turns out to be just a comment, as all except AudioMixer are RefBase.
    
    There are only a few performance-sensitive cases where it's worth thinking
    about whether you need a virtual destructor, and the headache usually
    outweighs the benefit.
    
    Change-Id: I716292f9556ec17c29ce8c76ac8ae602cb496533
    Constructor initialization and const fields
    
    In constructors, initialize member fields in the initialization list
    rather than constructor body where possible.  This allows more fields
    to be const, provided they are never modified.
    
    Also initialize POD fields in constructor, unless it's obvious they
    don't need to be initialized.  In that case, put a comment instead.
    
    Remove explicit clear() in destructors on fields that are now const.
    
    Give AudioSessionRef a default constructor, so it's immutable fields can
    be marked const.
    
    Add comment about ~TrackBase() trick.
    
    Initialize fields in declaration order to make it easier to confirm that
    all fields are set.
    
    Move initialization of mHardwareStatus from onFirstRef() to constructor.
    
    Use NULL not 0 to initialize raw pointers in initialization list.
    
    Rename field mClient to mAudioFlingerClient, and getter from client()
    to audioFlingerClient().
    
    Change-Id: Ib36cf6ed32f3cd19003f40a5d84046eb4c122052
    For performance, return large objects by reference
    
    Change-Id: Ibf737018ef1d3c7d717584615dcb2d4ecdb50c99
    Fix const sp<>& in parameter list and return value
    
    EffectModule::addHandle and Client::heap() were declared incorrectly.
    
    As a parameter, an sp<> should be & for efficiency, and for input
    parameters it should also be const to protect the caller's value.
    
    But as a return value, an sp<> should have neither const or &.  The "e"
    in "return e;" might be located on the stack, and if there is "&" then
    the caller would see the address of a variable which no longer exists.
    Also, an & would make it hard to do "return 0;".
    A "const" without & is meaningless in the return type.
    (In this particular case, the "e" is a member field, so it was safe.)
    
    Change-Id: I3df5f294214eb15a9d4d596c6d5ef29de97b5c27
    Use audio_in_acoustics_t consistently
    
    Change-Id: I0a9dd668fb2e57b1c3ece3190588194974b99062
    AudioStreamIn and AudioStreamOut
    
    These are immutable, so make the fields const.
    getOutput() and getInput() methods are now const.
    
    Change-Id: I128246ebd56ea50b3e542be43f2aa1bcb55f1373
    Cleanup thread types
    
    Use type_t instead of int for thread types.
    Initialize ThreadBase::mType in constructor and make it const.
    
    Change-Id: I43d141388b9639e4783c30b97dbda5688bf7555f
    Declare methods in binder opcode order
    
    This makes it easier to compare interface and implementation.
    
    Change-Id: Ie060e43dec348902abcf40f5a610cec639d6d0d3
    Use enum mixer_state consistently
    
    Change-Id: I5b71ed20f939dfc4b98143334b7aa064d282f584
    Use enum effect_state consistently
    
    Also fix indentation
    
    Change-Id: I393ef9e37ffceed5ad4a78df439726ae1fe139df
    Use enum track_state consistently
    
    Change-Id: Ie5ebb7befa092e1de1e4df9c6e2d51e6bcfd176a
    DO NOT MERGE Revert "Revert "AudioFlinger: mix track only when really ready (2)""
    
    This reverts commit b918035d34422a2041b6ec8c09c566bb93345b40.
    
    Change-Id: I093bcfa56ad54a080b930208b6b79169d33581fb
    DO NOT MERGE Revert "AudioFlinger: mix track only when really ready (2)"
    
    This reverts commit 71c4496a9757438afd30b4404824f296f6158a49.
    
    Change-Id: Iff10c49ea728bb10023ddeb50a3b708db770fff2
    DO NOT MERGE Revert "AudioFlinger: mix track only when really ready (2)"
    
    This reverts commit 71c4496a9757438afd30b4404824f296f6158a49.
    
    Change-Id: Iff10c49ea728bb10023ddeb50a3b708db770fff2
    Remove AudioFlinger dependencies on client
    
    Change-Id: Ibb591e41a3ca5d7015e2b66b98b8fef5f415fb37
    Use audio_format_t consistently, continued
    
    Was int or uint32_t.
    
    When AudioFlinger::format can't determine the correct format,
    return INVALID rather than DEFAULT.
    
    Init mFormat to INVALID rather than DEFAULT in the constructor.
    Subclass constructors will set mFormat to the correct value.
    
    Change-Id: I9b62640aa107d24d2d27925f5563d0d7407d1b73
    AudioFlinger: mix track only when really ready (2)
    
    This problem due to the way audio buffers are mixed when
    low power mode is active was addressed by commits 19ddf0eb
    and 8a04fe03 but only partially. As a matter of fact, when more
    than one audio track is playing, the problem is still present.
    This is most noticeable when playing music with screen off
    and a notification or navigation instruction is played: in this case,
    the music or notification is likely to skip.
    
    The fix consists in declaring the mixer ready if all active tracks
    are ready. Previous behavior was to declare ready if at least one track was
    ready. To avoid that one application failing to fill the track buffer blocks other
    tracks indefinitely, this condition is respected only if the mixer was ready
    in the previous round.
    
    Issue 5799167.
    
    Change-Id: Iabd4ca08d3d45f563d9824c8a03c2c68a43ae179
    Remove dead setVolume() and mVolume[2]
    
    Change-Id: I94b835434093e920432614eb5007101e87758f32
    Check stream type in AudioFlinger::createTrack
    
    A bad parameter to AudioFlinger::createTrack could cause mediaserver to crash.
    
    Other AudioFlinger stream type cleanup:
     - Simplify range check for audio_stream_type_t
     - Add comment about mStreamTypes array initialization.
    
    Change-Id: Ia33aa1cce0fdd694b08d9288816ffc097a9543d0
    Fix locking for mMasterVolume and mMute
    
    mMasterVolume and mMute are both protected by mutex in AudioFlinger class, but
    there were two places where they were accessed without a mutex.
    
    Also make AudioFlinger::mMasterMute private not protected.
    
    Change-Id: Ia3897daeb5c50313df5bcc071824357526237f3e
    Use size_t for frame size
    
    except in the control block, where we don't have room.
    
    In AudioFlinger::ThreadBase::TrackBase::getBuffer,
    read the frame size from control block only once.
    
    Change-Id: Id6c4bccd4ed3e07d91df6bbea43bae45524f9f4e
    Use audio_stream_type_t consistently
    
    At native level it was a mixture of audio_stream_type_t, int, uint32_t,
    and uint8_t.  Java is still int.  Also fixed a couple of hard-coded -1
    instead of AUDIO_STREAM_DEFAULT, and in startToneCommand a hard-coded 0
    instead of AUDIO_STREAM_VOICE_CALL.
    
    Change-Id: Ia33bfd70edca8c2daec9052984b369cd8eee2a83
    Use audio_mode_t consistently
    
    It was int or uint32_t.
    Also make getMode() const.
    
    Change-Id: Ibe45aadbf413b9158e4dd17f2b3bcc6355288d37
    Use correct type for hardware call state
    
    Change-Id: Ic6d98b129e3ec653df1d8f7e829adf8dccb4f378
    By convention const goes before the type specifier
    
    Change-Id: I70203abd6a6f54e5bd9f1412800cc01212157e58
    suspended() and isSuspended() are const
    
    Change-Id: I04b95970b5a645b64e7e64fffd46d868354dda66
    Use the standard CC_LIKELY and CC_UNLIKELY macros
    
    Several source files privately defined macros LIKELY and UNLIKELY in terms
    of __builtin_expect. But <cutils/compiler.h> already has CC_LIKELY and
    CC_UNLIKELY which are intended for this purpose.  So rename the private
    uses to use the standard names.
    
    In addition, AudioFlinger was relying on the macro expanding to extra ( ).
    
    Change-Id: I2494e087a0c0cac0ac998335f5e9c8ad02955873
    Improve resistance to leaks for ConfigEvent
    
    A Vector of pointers is risky, as there is no ownership (and the
    ThreadBase destructor was not deleting them, so if there were any left
    over at end it would leak).  Replaced by a Vector of values.
    
    Change-Id: Iddde72dc30134adfcf724dec26cbe0a742509b8c
    Use NULL not 0 for pointers
    
    Change-Id: Iab3f9abbdab617dc5a599e657ec46a0b0a002eef
    AudioFlinger: Make StandbyTime configurable.
    
    Make the standby time for AudioFlinger configurable using a system
    property.  Default AudioFlinger behavior is to go into standby
    (allowing the audio outputs to underflow) after there has been nothing
    to mix and AudioFlinger has just been pumping out silence for the
    configured standby time (which defaulted to 3 seconds).
    
    Now, by setting the "ro.audio.flinger_standbytime_ms" property in
    their platform init.rc, platforms can override this default and
    control the standby time.  If the property is missing or malformed,
    the old default value of 3 seconds will be used instead.
    
    Change-Id: Ic9fa8b5f5bccee493bc72c65e408d3fd8ddd1059
    Signed-off-by: John Grossman <johngro@google.com>
    audioflinger: fix audio skipping over A2DP
    
    The maximum sleep time allowed in the mixer thread when audio tracks
    are enabled but not ready for mixing is derived from the latency
    reported by the output stream.
    This does not work for A2DP where the latency also reflects encoding, decoding
    and transfer time.
    
    Modified activeSleepTimeUs() to take A2DP case into account.
    
    Issue 5682206.
    
    Change-Id: I3784ac01fb6f836b5a6ce6f764fb15347586de35
    audioflinger: fix noise when skipping to next song
    
    When audio effects are enabled, a noise can be heard at the
    beginning of the new song when skipping to next song in music app.
    
    This is because some effects (especially virtualizer) have a tail.
    This tail was not played when previous song was stopped because effects were
    not processed when no tracks were present on a given session. This is to
    reduce CPU load when effects are enabled but no audio is playing.
    The tail was then rendered when the new song was started.
    
    Added a delay before stopping effect process after all tracks have been removed from a session.
    
    Issue 5584880.
    
    Change-Id: I815e0f7441f9302e8dfe413dc269a94e4cc6fd95
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: I6ec5d2bca9b8ebc0acd395a7dd92e1a48fcdfa9b
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    undo reset to ics-mr1 until we have a better method
    reset to ics-mr1, but keep history
    Fix issue 381905: BassBoostTest CTS tests fail...
    
    When AudioEffectTest is executed, an Equalizer is created
    and enabled on a MediaPlayer session. Effects on the output
    mix are therefore suspended.
    Then the MediaPlayer is released with the effect still enabled.
    In this case, Audioflinger::purgeStaleEffects_l() fails to restore
    the suspended effects when the effect attached to the released audio session
    is removed.
    When subsequent tests are executed on output mix effects, these effects cannot be
    enabled as they are still suspended.
    
    Fixed purgeStaleEffects_l() to restore suspended effects if the effect removed is enabled.
    
    Also fixed EffectHandle::disconnect() to only restore suspended effects if the disconnected
    handle actually has control over the effect.
    
    Change-Id: I67232e7c34680b0cc01abfd57d5d510a524e5d4f
    Fix issue 5381089: problem with A2DP music volume
    
    This problem only occurs when audio effects are present and
    the music volume is applied by one effect engine.
    When connecting or disconnecting A2DP, audio effects are moved from
    one mixer thread to another. When removed from the source thread,
    the effect is stopped but it is not restarted when added to the
    destination thread.
    This regression was introduced by commit 21b5c47e.
    
    Change-Id: I4cc578d8d760ec65b185032b6fda98c739d331bc
    merge in ics-release history after reset to master
    merge in ics-release history after reset to master
    226483: A2DP connected, but music out to speaker
    
    When the A2DP headset is connected, there is a possible
    race condition when the audio tracks are moved from
    the mixer thread attached to the speaker output to the thread
    attached to A2DP output.
    As the request to clear the stream type to output mapping cache in
    the client process is asynchronous, it is possible that the flag
    indicating to the client audio track to re-create the IAudioTrack
    on the new thread is processed before the cache is invalidated.
    In this case, the track will be attached to the old thread and
    music will continue playing over the device speaker instead of being
    redirected to A2DP headset.
    
    Change-Id: Ib2ce1eb5320eaff83287b93779061bf4e7a330df
    Audioflinger: reverse logic of BT NREC indication
    
    The interpretation of BT NREC by AudioFlinger to enable
    or disable AEC and NS was wrong: NREC to ON (default) means
    the phone (Audio Gateway) must enable local AEC and NS.
    
    Change-Id: I88a264e7fc9831c43bbace4f6b585baec73f2006
    Media framework changes for Tungsten.
    
    Squashed merge from master-tungsten of the following changes:
    
    commit 73d09e18c4557e583a1684d44d598a1a02fd0cf2
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 13:57:44 2011 -0700
    
        Remove TungstenMisc and rename LinearTransform
    
        Change-Id: Ie8aa3e24e09fdbf6ef8996c26deb9c5640e20d1b
    
    commit 3114aabe76ad733b59929d87e49c68229f5ae2e8
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 3 10:47:16 2011 -0700
    
        Name changes and spelling fixes.
    
        + Replace the term TungstenTime with the Eugene-approved term CommonTime.
        + Fix a spelling error in a comment I noticed.
    
        Change-Id: I8c10d618206826d16055f78c7724e24443bb03fd
    
    commit cbf2903ab6893b6e662514e2f6d670e268a419df
    Author: John Grossman <johngro@google.com>
    Date:   Fri Apr 15 09:27:54 2011 -0700
    
        Migrate Tungsten code from the HC-Tungsten to the Master-Tungsten branch.
    
        Change-Id: I95372d913a0761d90168edb4016f5ece0ea74502
    
    commit bc7c46aa629f9883e959ef23de8da297f9eb508b
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 13:59:17 2011 -0700
    
        Create a separate class for timed AudioTracks
    
    commit 43be3231034ff8537fdd84422a7954780038671f
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 18:59:12 2011 -0700
    
        Move libaah_rtp over from the vendor directory.
    
        Also move factor PipeEvent out into utils.
    
        Change-Id: Id3877c66efe22d771cf3ef4877107e431b828e37
    
    commit 17526eb3148c9c3d4365b6d5b47e8dc13bca71b6
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 27 17:06:49 2011 -0700
    
        Name changes for the TRTP Players s/tungsten/aah/g
    
        Change-Id: I55e9ad13003f6aa6a36955b54426a7efbe31ac51
    
    commit 423fc1bfc0fda799c421a650c83c4b9293b1a08c
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Jun 20 17:56:09 2011 -0700
    
        More timed AudioFlinger changes requested by code review:
        * change trimTimedBufferQueue to trimTimedBufferQueue_l
        * create one timed audio buffer heap per client process instead of one per track
        * grow the silence buffer on demand
        * some error handling fixes in timed getNextBuffer
        * calculate the next output PTS in all mixer and track hooks
    
        Change-Id: Ifc51a08b55029b7c48902ab2f22933ad7bafe1ad
    
    commit a148e2674b1d3cb73289b82b85c333f0a66824a9
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 17:02:24 2011 -0700
    
        Move the A@H time service into frameworks/base
    
        Change-Id: I5c570cde70e8931e205516cb33517585804ce841
    
    commit dfa438fa49bdaeeb2ec5fd0d17b30d881608b6b1
    Author: John Grossman <johngro@google.com>
    Date:   Mon Jun 20 11:55:36 2011 -0700
    
        Fix the build after Mike's code moving.
    
        Change-Id: Ia883643ded252168bcc5a70584ab6ce97bb05266
    
    commit 04489474ec8e73efe1bf52918831f41659033162
    Author: John Grossman <johngro@google.com>
    Date:   Fri Jun 17 14:19:50 2011 -0700
    
        Refactor the local/common clock services.
    
        This change is one of a set of 5 changes made to different repositories.  Look
        for this comment in all of them.
    
        Refactor the local/common clock services in tungsten to match android best
        practice.  Notable changes include
    
        + The kernel no longer knows anything about common time.  Common time has been
          moved completely up into user land.  This has an impact on the accuracy of the
          timesync debugging code, and the netfilter assisted approach to network based
          timesync is going to have to be modified.
        + The timesync driver used by A@H is now just local time driver.
        + The kernel no longer needs access to the linear transform math code, and it
          has been removed.
        + A new HAL has been introduced to expose the concept of local time to the
          system.
        + A non-slewable stub implementation of the local time HAL based on
          CLOCK_MONOTONIC has been added.
        + The TungstenTime library has been eliminated.  Its functionality has been
          distributed among the common time binder service, the local time hal and the
          linear transform utility code.
        + All clients of the old TungstenTime library have been changed to be clients of
          the binder service, the hal and the utility code.
        + The reset_tt utilities have been removed, they no longer have a purpose in the
          system.
        + more progress has been made in eliminating the word "tungsten" from the code.
    
        Things left to do include
        + Finish getting rid of tungsten from the time service.
        + Move the time service into the framework; AudioFlinger's new timed mode
          depends on it and the service cannot continue to live in vendor tungsten.
    
        Change-Id: I999b6cfb4a9d267818a86d747c35eecfc6693101
    
    commit d48194545eed1116a84d81e2fb53315d2b0701a7
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Thu Jun 16 14:22:46 2011 -0700
    
        Change the interface of the AudioMixer and AudioBufferProvider to accept a presentation timestamp
    
        Change-Id: Ice2df5628d45a7f77100e7008103b35b3d3160a4
    
    commit 02561419db82b01ffb28df38000716c612988427
    Author: John Grossman <johngro@google.com>
    Date:   Tue May 10 14:00:21 2011 -0700
    
        Put in a hack for controling master volume in the policy manager.
        Fix initial master volume reporting.
    
        Change-Id: Ia6caf2bbc6083c5f99fab852baa40fff10fc5fc7
    
    commit 549cdc3ba115dc654cdade261fb055c72c6cdb79
    Author: John Grossman <johngro@google.com>
    Date:   Wed May 4 11:46:17 2011 -0700
    
        Make certain the logic for computing the output stream mixing point is hardened
        against underflow and overflow when input and output sample rates don't match.
    
        Change-Id: I5ebea07c9938107b435bec7413418622767e4e16
    
    commit 8043d8ed63f51e76d452d22be7d453d4a7794530
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Wed Apr 27 18:06:27 2011 -0700
    
        Add the patch for timed audio support to the mono resampler
    
        Change-Id: I526f34ae9d1e8e3b0ed2fb05af3d024d5c5fe711
    
    commit 2be89486ef23f0b0b0cc2dc25a4c0ee691043f00
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 10:38:57 2011 -0700
    
        Extend the AudioHWInterface to allow it to specify the initial master volume used by AudioFlinger.
    
        Change-Id: I8823330801c927494cf7ca31a6b8f9264fbfbb26
    
    commit ff89a4d5e37e6a05a2b03f79ab4e97833dd66393
    Author: John Grossman <johngro@google.com>
    Date:   Wed Apr 27 09:07:14 2011 -0700
    
        Fix an issue with inconsistent volume reporting.
    
        Changed masterVolume() to return the same value as the last call
        to setMasterVolume when the HW layer is implementing master
        volume control.  The masterVolume/setMasterVolume API seems to be
        an idea which was abandonded a long time ago; as of today the
        system only ever sets it to 1.0 at startup and then never changes
        it.  Until we can figure out how the concept of external
        amplifier gain control fits into the Android audio framework,
        Tungsten is exposing this API via a hack-tastic invoke back door
        in the TungstenRXPlayer and needs the getter/setter results to be
        consistent.
    
        Change-Id: I2ac730fa8fc9ee28c88f1a8e6f2e493eb5b65544
    
    commit 086511b2d19cceb976747ac23e12b73fc7c28bea
    Author: Jason Simmons <jsimmons@google.com>
    Date:   Mon Apr 25 16:07:19 2011 -0700
    
        Add handling of timed audio tracks in the generic resampling mixer
    
        Change-Id: Ic3be1d21b1117f1b233808be543c28a0dcec4792
    
    Change-Id: Id78bba8c002131d8b52b4170259a87fd94e63c73
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    Signed-off-by: John Grossman <johngro@google.com>
    Signed-off-by: Jason Simmons <jsimmons@google.com>
    Audio effects: track CPU and memory use separately
    
    Before this change, CPU and memory usage for an audio effect were
    registered and checked against the limit by audio policy manager
    upon effect instantiation. Even if an effect was not enabled
    it would prevent another effect to be created if the CPU load budget
    was exceeded, which was too restrictive.
    
    This change adds a method to register/unregister CPU load only when
    an effect is enabled or disabled.
    It also adds a mechanism to place all effects on the global output mix
    in suspend state (disabled) when an effect is enabled on a specific session.
    This will allow applications using session effects to have the priority
    over others using global effects.
    
    Also fixes some issues with suspend/restore mechanism:
    - avoid taking actions when an effect is disconnected and was not enabled.
    - do not remove a session from the suspended sessions list when corresponding
    effect chain is destroyed.
    
    Change-Id: I5225278aba1ae13d0d0997bfe26a0c9fb46b17d3
    Keep effects sessions active when the caller dies.
    
    Don't remove effects until the session they are in goes away or all
    AudioEffects have been explicitly released. This allows the control
    panel process to die without stopping the effects.
    
    Change-Id: I4496e5df080230ca1af149dec95c1309ab8ea888
    AudioFlinger: protect input/output stream access
    
    Some methods would not check that the output orinput stream of a thread
    was still valid before calling functions on its interface.
    This could cause a crash if those methods where called while the output or
    input was being closed by another thread.
    
    Make sure that the output or input stream pointer is cleared before closing the
    stream.
    Always check that the output or input pointer is not null before calling
    functions at the stream interface.
    Generalize the use of initCheck() method to verify that the output or input
    stream is not null.
    
    Change-Id: I9d9ca6b744d011bcf3a7bbacb4a581ac1477bfa5
    AudioFlinger: disable AEC and NS with BT headsets
    
    Disable AEC and NS when the Bluetooth SCO headset in use indicates it
    implements those pre processings.
    
    Change-Id: I93f3d10b0a27243d5dbff7182639576fc0c6d862
    Audio Effect Framework: add effect suspend/restore
    
    Add the possibility for the effect framework to suspend
    (temporarily disable process) and restore audio effects.
    This feature will be usefull to disable pre processing under certain
    conditions and better control coexistence of audio effects
    on output mix and specific sources.
    
    Change-Id: I79b195982cc48748d5708308fb1647b9c3c34cc6
    AudioFlinger: fix crash when deleting pre process.
    
    If a pre processing effect is detroyed while enabled and capture is active,
    there was a possibility that the effect engine is released by the framework
    while still processed by the audio HAL.
    
    The fix consists in not releasing the engine in EffectModule::removeHandle()
    but just flag the effect as being detroyed to avoid further calls to functions
    on the engine effect interface.
    The effect interface is then removed from the audio HAL safely in
    EffectChain::removeEffect_l() while holding the EffectChain mutex.
    
    Change-Id: I71fab30d9145062af8644f545a1f1d4d3e7e7f02
    Fix issue 4604090: notification sound interrupted.
    
    The problem is that the audio HAL fails to acquire the wake lock when playing the notification.
    This is because of a change that removed the mediaserver process form the system group for honeycomb.
    
    The fix consists in requesting the wake lock from PowerManagerService when AudioFlinger mixer
    wakes up.
    
    A consequence of this change is that audio HALs or pcm drivers do not have to hold wake locks
    anymore as in the past.
    
    Change-Id: I4fb3cc84816c9c408ab7fec75886baf801e1ecb5
    AudioFlinger: add dump of audio pre processing.
    
    Dump of media.audio_flinger service was only listing effects on output threads.
    Moved the dump of effect chains from PlaybackThread to ThreadBase class so that
    pre processings on RecordThread are also listed.
    
    Change-Id: If8bc74023c12b9c2371f1b300743b156ceca7b87
    Audio framework: support for audio pre processing
    
    Audio effect framework is extended to suport effects on
    output and input audio path.
    
    AudioFlinger: Support for audio effects and effect chains is
    moved from PlaybackThread class to ThreadBase class so that
    RecordThread can manage effects.
    Effects of type pre processing are allowed on record thread
    only. When a pre processing is enabled, the effect interface handle is
    passed down to the input stream so that the audio HAL can call the
    process function. The record thread loop calls the effect chain process
    function that will only manage the effect state and commands and skip the
    process function.
    
    AudioRecord: The audio session is allocated before calling getInput() into
    audio policy serice so that the session is known before the input theead is
    created and pre processings can be created on the correct session.
    
    AudioPolicyService: default pre processing for a given input source are
    loaded from audio_effects.conf file.
    When an input is created, corresponding effects are created and enabled.
    
    Change-Id: Id17119e0979b4dcf189b5c7957fec30dc3478790
    audio: update for audio/audio_policy header names/locations
    
    Change-Id: I36c49352eee57559403cd1597f56a8485a360289
    Signed-off-by: Dima Zavin <dima@android.com>
    Use channel mask instead of channel count for track creation
    
    Record and playback objects (resp AudioRecord and AudioTrack)
    are created using a channel mask, but this information is lost
    in the mixer because only the channel count is known to
    AudioFlinger. A channel count can always be derived from a
    channel mask.
    
    The change consists in:
    - disambiguiting variable names for channel masks and counts
    - passing the mask information from the client to AudioFlinger
     and the mixer.
    - when using the DIRECT ouput, only verifying the format of
     the track is compatible with the output's for PCM.
    
    Change-Id: I50d87bfb7d7afcabdf5f12d4ab75ef3a54132c0e
    Removed interface to load audio effects libraries
    
    Removed unused functions allowing dynamic loading of audio effects libraries
    from effects factory API.
    
    Change-Id: I06cc5a51dc10aca87c7a8687bbb874babd711eca
    New effect library API
    
    Moved and renamed media/EffectApi.h to hardware/audio_effect.h
    Modified the effect library API to expose a library info structure
    containing an interface functions table.
    Also removed enums for audio channels, audio format and devices
    from effect API and use values from system/audio.h instead.
    
    Modified effects factory to support new library interface format and
    load libraries and efffects listed in audio_effects.conf file.
    The file audio_effects.conf is first loaded from /vendor/etc and
    then from /system/etc/audio_effects.conf if not found.
    
    Modified existing effect libraries to implement the new library interface.
    
    Change-Id: Ie52351e071b6d352fa2fbc06c3846686f8c45df9
    Fix audio effect framework issues
    
    Fix two issues in audio effect framework reported by partners.
    
    1 - Fixed duplicated audio buffer sent to effect process function when
    pausing a track.
    Modified Effectchain::process_l() function to clear the effect chain
    input buffer before calling the effect process functions when no track
    is active on the session. Previous code was clearing the buffer after
    calling the process functions and  when transitioning from active
    to inactive, the last processed buffer was passed again once to effect
    process function before being cleared.
    
    2 - Fixed potential mutex cross deadlock when disconnecting an effect
    while playback is active. This is because EffectChain::process_l()
    was calling PlaybackThread::hasAudioSession() thus creating an inversion
    in the mutex lock order (EffectChain mutex locked before ThreadBase mutex).
    The fix consists in removing the call to hasAudioSession() from process_l()
    and requires each effect chain to keep count of the number of audio tracks
    attached to it (previously only the active tracks were accounted for).
    
    Change-Id: Iee4246694ea8c7a66c012120c629d72dd38f9c35
    update for new audio.h header location
    
    Change-Id: Ic4c62c4037800802427eb7d3c7f5eb8b25d18876
    Signed-off-by: Dima Zavin <dima@android.com>
    audioflinger: don't do work in constructor, instead do it in onFirstRef
    
    Change-Id: I22d9e01821816c3beb52b014330386c7fd2f0411
    Signed-off-by: Dima Zavin <dima@android.com>
    audioflinger: enumerate all the possible audio interfaces
    
    Keep track of the primary interface that handles the master volume,
    etc.
    
    Change-Id: Ib0701fccff8d8783a99035a241ab7c8ec75c00ac
    Signed-off-by: Dima Zavin <dima@android.com>
    audio/media: convert to using the audio HAL and new audio defs
    
    Change-Id: Ibc637918637329e4f2b62f4ac7781102fbc269f5
    Signed-off-by: Dima Zavin <dima@android.com>
    Bug 3366885 Remove LVMX switch
    
    Change-Id: I0bf98c6f85f00b3296874571e1c049dcc4e2fcca
    Fix issue 3371080
    
    Modified default volume control logic in AudioService:
    1 IN_CALL volume if in video/audio chat
    2 NOTIFICATION if notification is playing or was playing less than 5s ago.
    3 MUSIC
    
    Modified silent mode:
    - now also affect MUSIC stream type
    - entering silent mode when VOL- hard key is pressed once while selected
    stream volume is already at 0 (except for VOICE_CALL stream).
    - exiting silent mode when pressing VOL+ hard key while in silent mode
    
    Play sound FX (audible selections, keyboard clicks) at a fixed volume.
    
    Modified audio framework:
    - isStreamActive() method now implemented in AudioPolicyManagerBase (previously AudioFlinger)
    - iStreamActive() now specifies a time window during which the stream is considered
    active after it actually stopped.
    
    Change-Id: I7e5a0724099450b9fc90825224180ac97322785f
    Fix issue 3157123.
    
    Use a Mutex wherever atomic operations were used in AudioTrack,
    AudioRecord, AudioFlinger and AudioEffect classes.
    
    Change-Id: I6f55b2cabdcd93d64ef19446735b8f33720f8dbc
    Audio Effects: fix problems in volume control.
    
    - Fixed click when re-enabling effect during the turn off phase:
    make sure the effect states where effect is processed are the same
    where volume control is delegated to effect.
    - Fixed click when effect is deleted while still active: do not apply
    volume ramp if an effect having volume control was just removed from the
    effect chain.
    
    Also fixed a crash when PCM dump is enabled in effect bundle wrapper.
    
    Change-Id: Ib562f5cf75c69af75df0e862536262e2514493e4
    Fix issue 2929440
    
    Fixed regression introduced by change a54d7d3d7dd691334189aab20d23c65710092869 in audioflinger mixer thread:
    When the output stream is suspended, the sleep time between two writes must match the actual duration
    of one output stream buffer otherwise the playback rate is not respected.
    
    Change-Id: Ic5bebe890290d1f44aeff9dd3c142d18e26fff2a
    Allow creation of an audio effect on a session with no audio tracks.
    
    This is necessary to allow creating and enabling an effect attached to a particular player
    session before the playback is started. As a matter of fact, the implementation of the mediaplayer
    does not create the AudioTrack before playback starts.
    
    Change-Id: I1266e8885f9d756acc949303321aaac0fbf83e34
    Audio effects: modified command() parameter types.
    
    The type of the cmd, cmdSize and *pReplySize parameters of the effect control interface command()
    function have been modified from int to uint32_t. This is more consistent with their role.
    
    Change-Id: I84d289fc262d6753747910f06f485597dfee6591
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    Audio policy manager changes for audio effects
    
    Added methods for audio effects management by audio policy manager.
    - control of total CPU load and memory used by effect engines
    - selection of output stream for global effects
    - added audio session id in parameter list for startOutput() and stopOutput().
    this is not used in default audio policy manager implementation.
    
    Modifications of audio effect framework in AudioFlinger to allow moving and reconfiguring
    effect engines from one output mixer thread to another when audio tracks in the same session
    are moved or when requested by audio policy manager.
    Also fixed mutex deadlock problem with effect chains locks.
    
    Change-Id: Ida43484b06e9b890d6b9e53c13958d042720ebdb
    Fixed problems in audio effect volume control.
    
    Fixed the following problems in audio effect volume control in AudioFlinger:
    - Make sure that the volumes returned by EffectChain::setVolume_l() are correct even is
    no change is detected since last call
    - Do not use isEnabled() to validate volume control but mState >= ACTIVE instead as the volume control
    must be also active in STOPPING and STOPPED states.
    
    Change-Id: Id62da3164fad500ee8a5efd6cd78c77e8fdcb541
    Several improvements in audio effects volume control.
    
    - Fixed crash when deleting an effect chained before an effect having volume control
    - Changed EFFECT_FLAG_VOLUME_CTRL to implicitely include EFFECT_FLAG_VOLUME_IND
    (not need to set both in effect descriptor).
    - Volume control changes from one effect to another if needed according to effect enable state
    - EFFECT_CMD_SET_VOLUME is only sent when their is an actual change in volume
    
    Change-Id: Ieebaf09157e2627366023569d95516646e03e26c
    added BinderService<> template to help creating native binder services
    
    Change-Id: Id980899d2647b56479f8a27c89eaa949f9209dfe
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    audioflinger/resampler: Add VERY_HIGH_QUALITY audio-resampler
    
    Change-Id: I34f5d36ae60010ec64222d6660d10a84da3bf566
    Bug: 7024293
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    audioflinger/resampler: Add VERY_HIGH_QUALITY audio-resampler
    
    Change-Id: I34f5d36ae60010ec64222d6660d10a84da3bf566
    Bug: 7024293
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Fix build warnings
    
    Change-Id: I79f4d7052a4c0a9fde144063f44a9c8c9dd575d5
    Fix build warnings
    
    Change-Id: I79f4d7052a4c0a9fde144063f44a9c8c9dd575d5
    Fix log spam
    
    Change-Id: Ie6c982af906dcfd3cdea4b771dfab1f7e47745ca
    Fix log spam
    
    Change-Id: Ie6c982af906dcfd3cdea4b771dfab1f7e47745ca
    New VHQ resampler
    
    Squashed commit of the following:
    
    commit 12b6952da9f25e94d06dd7185bce255924e7e791
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 19 15:27:26 2012 -0800
    
        fix a typo in SINC resampler that prevented tracks to be mixed
    
        we were always erasing the current mix instead of mixing into it.
    
        Change-Id: Ib229245f9e5a0d384f1727640a59e9f0469211a2
    
    commit 0019ce082df430278f14ab922e900ce33b64897d
    Author: Dave Bort <dbort@google.com>
    Date:   Tue Nov 13 01:30:32 2007 -0800
    
        Rename "TARGET" to "MODULE" in the build system.
    
        Part one of the grand renaming.
    
        API_CHANGE: Third parties may need to update their makefiles.
        Any variables with "LOCAL" and "TARGET" in their names
        should now use "MODULE" instead of "TARGET"; e.g., LOCAL_MODULE,
        LOCAL_MODULE_TAGS.
    
        PRESUBMIT=passed
        OCL=39840
    
        Change-Id: Ica9a7937d3d9552ab84db46ac6eea8a290e404fe
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit f01adc0cef0e39e75c76d9195ac26a94cac0a100
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Wed Nov 14 08:32:08 2012 -0800
    
        Fix build warnings
    
        Change-Id: Ic43bcca166a529a6431711b05a7fa21849b6a38b
    
    commit 9bb031a565c753a03d9c9397edea318947d80528
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 04:44:30 2012 -0800
    
        more optimizations...
    
        calculate the offsets from the phase differently, this happens
        to reduce the register pressure in the main loop, which in turns
        allows the compiler to generate much better code (doesn't need
        to spill a lot of stuff on the stack).
    
        this gives another 15% performance increase
    
        Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    
    commit 5a951598f31217b8cd2babd0720c9608ee17291a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 03:26:39 2012 -0800
    
        refactor code to improve neon code
    
        we want to make sure we don't transfer data from the
        neon unit to the arm register file, as this can be quite
        slow. instead we do all the calculation on the neon side
        and write the result directly to main memory.
    
        Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    
    commit b381ee9e83bc9fd18986e79c7809841514ed590e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 15:16:13 2012 -0800
    
        NEON optimized SINC resampler
    
        this currently gives us a 60% to 80% boost depending
        on the quality level selected.
    
        Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    
    commit bea077354210242ea193a50b0dbab0fedab25df3
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 5 01:51:37 2012 -0800
    
        minor cleanups
    
        Change-Id: Ia12ee4fb59e90221761bec85e6450db29197591f
    
    commit 8f4ed7decbe161a5ff38200b218f5216d80aba46
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 18:49:14 2012 -0800
    
        improve resample test
    
        - handle stereo input
        - input file can now be ommited, in this case
          a linear chirp will be used automatically
        - better usage information
    
        Change-Id: I5d62a6c26a9054a1c1a517a065b4df5a2cdcda22
    
    commit 5fcd634ea6cb4df27c495abe20f5f9b8ff55d128
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 02:03:49 2012 -0800
    
        change how we store the FIR coefficients
    
        The coefficient table is now transposed and shows
        much better its polyphase nature: we now have a FIR
        per line, each line corresponding to a phase.
    
        This doesn't change at all the results produced by
        the filter, but allows us to make slightly better
        use of the data cache and improves performance a bit
        (although not as much as I thought it would).
    
        The main benefit is that it is the first step
        before we can make much larger optimizations
        (like using NEON).
    
        Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    
    commit d652231abf4c7e2ea1fc89caae730cec1f7259a1
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 3 23:37:53 2012 -0700
    
        improve SINC resampler performance
    
        The improvement is about 60% by just tweaking a few
        things to help the compiler generate better code.
        It turns out that inlining too much stuff manually was hurting us.
    
        Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    
    commit 9dc68ef5b94c700c4ee68790e8cbb334c90a538d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Nov 1 21:03:46 2012 -0700
    
        new coefficients for the vhq resampler
    
        previous coefficients were provided by a 3rd party and didn't have a
        way to re-generate them. we're now using the 'fir' utility.
    
        the performance of the filter is virtually identical, except for
        the down-sampling case which seems slightly better now:
           It looks like both the previous and new coefficients are generating
        some sort of clipping for full-scale signals in the down-sampling case
        (although the new ones seem better), the reason for that is
        unknown (see bug: 7453062)
    
        Also updated the HQ coefficients for the down-samplers, previous ones
        were a little bit too conservative -- the new ones push the cut-off
        frequency up by about 1 KHz.
    
        Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    
    commit 38e0b8560a6fc1b7124e22e0e09a84a285182f8e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 13:51:44 2012 -0700
    
        fix SINC resampler on non ARM architectures
    
        make sure the C version of the code generates the same
        output than the ARM assemply version.
    
        Change-Id: Ide218785c35d02598b2d7278e646b1b178148698
    
    commit a1878128b182696ba508569b4d211d0dfae92463
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 12:49:07 2012 -0700
    
        fix another issue with generating FIR coefficients
    
        the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
        missing the 2*f scale factor. This explains why we were seeing
        clipping and had to manually scale the filter down.
    
        Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    
    commit 1a0fb993430acc9f601e6c538305bc407c20ac5d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:20 2012 -0700
    
        fir a typo that caused up-sampling coefficiens to be wrong
    
        up-sample coefficient were generated with a cut-off frequency of 24KHz
        intead of ~20KHz, which caused more aliasing in the audible band.
    
        also increased the attenuation to 1.3 dB on both up and down
        sampling coefficient to avoid clipping.
    
        Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    
    commit 9520ad6862bd682ad075a9d9e3e94ada9f6e58b6
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:16 2012 -0700
    
        test-resample: clip instead of overflowing
    
        Change-Id: I550e5a59e51c11e1095ca338222b094f92b96878
    
    commit ba36656300f250f7f1fdeb75149749344260e6cb
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 01:01:38 2012 -0700
    
        a test app for the resamplers
    
        Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    
    commit 056a08b9bfd33cf27228c992adc8293a56b01be8
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 14:11:01 2012 -0700
    
        reenable the cubic resampler
    
        cubic resampler was disabled because it hadn't been qualified,
        however after I did some tests, it does improve significantly
        the sound quality over the order-1 resampler, even if it is
        still quite bad.
    
        also HIGH_QUALITY resampler was partially disabled, it's now
        fully enabled. It's a big improvement over the cubic resampler
        in terms of aliasing noise (it's not as good in the pass-band).
    
        Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    
    commit 8c0241d3ff50ae85167f69b3bd369244894cfa44
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 13:48:42 2012 -0700
    
        improve SINC resampler coefficients
    
        - we increase the interpolation precision from 4 to 7 bits
        this doesn't increase CPU power required, it only increases the
        size of the filter table but significantly reduces the noise
        introduced by the quantization of the impulse response.
    
        - the parameters of the filter are set such that aliasing is
        rejected at 80 dB below 20 KHz. Because we don't use a lot of
        coefficient (to save compute power), there are quite a bit of
        attenuation in the pass-band: starting at 9KHz for the
        down-sampler (48 to 44.1), and starting at 13 KHz for the
        up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
        Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    
    commit 69e7dab2192adc1f780464146810629ebd01b145
    Author: Pixelflinger <mathias.agopian@gmail.com>
    Date:   Thu Oct 25 19:43:49 2012 -0700
    
        improve fir tool: cleanup, better default, bug fixes
    
        - all parameters can be changed on the command-line
        - added float output
        - added debug option
        - added an option to generate a polyphase filter coefficients
        - added an attenuation option in dBFS
        - added a lot of comments and references
        - fixed kaiser window parameter
    
        also the default should generate a filter with 80 dB rejection
        (of the 24 KHz aliasing) above 20 KHz and a 15 KHz transition
        band around ~20 KHz (for 48 KHz sampling rate).
        It's not very good but corresponds to the current code.
    
    commit 8347499d105a50257c18e9dac652e750b06428b1
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Mon Oct 22 17:09:27 2012 -0700
    
        Increase allowed number of VHQ resamplers to 3
    
        Bug: 7378660
        Change-Id: I69e33ca2eb4bb9bd38e2c63df62cd1130d68baf6
    
    commit f91cf3cad7f5c4d52614271c89ab468741c5d24c
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 03:04:05 2012 -0700
    
        Fix a typo that caused the high quality resampler to produce garbage
    
        the problem is that if libaudio_resampler is present, it is those
        coefficients that will always be selected, but the correct
        meta-data.
    
        Bug: 7385994
        Change-Id: Ieebeb37b4dfb62a1a051bc29fae2ce056dbc6621
    
    commit e158a9e4262a174c59469a205658bc3ca4078234
    Author: Dan Bornstein <danfuzz@google.com>
    Date:   Fri Oct 3 10:34:57 2008 -0700
    
        Manually merge change #111620 from tc3 to mainline, to keep the
    
        automerger from choking on it.
    
        p4 sync
        p4 integrate -r -b android_to_tc3 //...@111620,111620
        p4 resolve -a
        p4 resolve     # resolve a couple merge travesties
    
        PRESUBMIT=passed
        BUG=1399648
        TBR=edheyl
        OCL=111902
    
        Change-Id: I854b01553dd92bbf9c864f5a9bd51a3d665f0ac2
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b9f3c26032be7a6ea01a10d93d94826f449e68ab
    Author: Dave Bort <dbort@google.com>
    Date:   Fri Jan 18 14:51:05 2008 -0800
    
        Rename "Makefile" to "Android.mk" throughout the tree.
    
        For <http://b/issue?id=960416>.
    
        I've tested this as much as I can, but 1500 open files =
        easy to mess things up.  Please let me know if there's
        a problem rather than rolling back this change.
    
        PRESUBMIT=passed
        BUG=960416
        TBR=joeo
        OCL=46537
    
        Change-Id: I5a404caf0f398a7afa7ae7abaf2f2a1c6ab490eb
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 0c22a9a44c4103483fba1d944acf1354c5eb1617
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 23:44:25 2007 -0700
    
        Tweak the SINC resampler parameters and double the performance. It's using about 10% CPU in the worse case now.
    
        Change-Id: I50ac7e6c6702a427fa36ab6d976c507155057507
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b85e41487983ad085b859acf8251e7e54480308a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 04:34:36 2007 -0700
    
        A sinc resampler for Audioflinger. It's not enabled yet, but fully functional and apparently working. It need more "quality" tests. In the 48->44 KHz, it takes about 25% of the CPU time.
    
        Change-Id: I80eb5185e13ebdb907e0b85c49ba1272c23d60ec
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit ba3949ef17cac2ba71cc3096c413782a49c922e5
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 21:01:28 2007 -0700
    
        fix a few small typos in the FIR computation
    
        Change-Id: I6e56b514fe520f30f7487f85c64ea5d2a7c19b40
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 7474bfa7de2604021963794dddfe44985648db6a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 03:16:02 2007 -0700
    
        This is a tool to compute the the reconstruction filter coefficients for a sinc audio resampler.
    
        Change-Id: I99be2505139b8e0e7647200e1647509d4f7e6067
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    Bug: 7577965
    Change-Id: I2c84a9283a1668723bad83e1a119c849c88c3e6b
    New VHQ resampler
    
    Squashed commit of the following:
    
    commit 12b6952da9f25e94d06dd7185bce255924e7e791
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 19 15:27:26 2012 -0800
    
        fix a typo in SINC resampler that prevented tracks to be mixed
    
        we were always erasing the current mix instead of mixing into it.
    
        Change-Id: Ib229245f9e5a0d384f1727640a59e9f0469211a2
    
    commit 0019ce082df430278f14ab922e900ce33b64897d
    Author: Dave Bort <dbort@google.com>
    Date:   Tue Nov 13 01:30:32 2007 -0800
    
        Rename "TARGET" to "MODULE" in the build system.
    
        Part one of the grand renaming.
    
        API_CHANGE: Third parties may need to update their makefiles.
        Any variables with "LOCAL" and "TARGET" in their names
        should now use "MODULE" instead of "TARGET"; e.g., LOCAL_MODULE,
        LOCAL_MODULE_TAGS.
    
        PRESUBMIT=passed
        OCL=39840
    
        Change-Id: Ica9a7937d3d9552ab84db46ac6eea8a290e404fe
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit f01adc0cef0e39e75c76d9195ac26a94cac0a100
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Wed Nov 14 08:32:08 2012 -0800
    
        Fix build warnings
    
        Change-Id: Ic43bcca166a529a6431711b05a7fa21849b6a38b
    
    commit 9bb031a565c753a03d9c9397edea318947d80528
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 04:44:30 2012 -0800
    
        more optimizations...
    
        calculate the offsets from the phase differently, this happens
        to reduce the register pressure in the main loop, which in turns
        allows the compiler to generate much better code (doesn't need
        to spill a lot of stuff on the stack).
    
        this gives another 15% performance increase
    
        Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    
    commit 5a951598f31217b8cd2babd0720c9608ee17291a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 03:26:39 2012 -0800
    
        refactor code to improve neon code
    
        we want to make sure we don't transfer data from the
        neon unit to the arm register file, as this can be quite
        slow. instead we do all the calculation on the neon side
        and write the result directly to main memory.
    
        Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    
    commit b381ee9e83bc9fd18986e79c7809841514ed590e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 15:16:13 2012 -0800
    
        NEON optimized SINC resampler
    
        this currently gives us a 60% to 80% boost depending
        on the quality level selected.
    
        Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    
    commit bea077354210242ea193a50b0dbab0fedab25df3
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 5 01:51:37 2012 -0800
    
        minor cleanups
    
        Change-Id: Ia12ee4fb59e90221761bec85e6450db29197591f
    
    commit 8f4ed7decbe161a5ff38200b218f5216d80aba46
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 18:49:14 2012 -0800
    
        improve resample test
    
        - handle stereo input
        - input file can now be ommited, in this case
          a linear chirp will be used automatically
        - better usage information
    
        Change-Id: I5d62a6c26a9054a1c1a517a065b4df5a2cdcda22
    
    commit 5fcd634ea6cb4df27c495abe20f5f9b8ff55d128
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 02:03:49 2012 -0800
    
        change how we store the FIR coefficients
    
        The coefficient table is now transposed and shows
        much better its polyphase nature: we now have a FIR
        per line, each line corresponding to a phase.
    
        This doesn't change at all the results produced by
        the filter, but allows us to make slightly better
        use of the data cache and improves performance a bit
        (although not as much as I thought it would).
    
        The main benefit is that it is the first step
        before we can make much larger optimizations
        (like using NEON).
    
        Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    
    commit d652231abf4c7e2ea1fc89caae730cec1f7259a1
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 3 23:37:53 2012 -0700
    
        improve SINC resampler performance
    
        The improvement is about 60% by just tweaking a few
        things to help the compiler generate better code.
        It turns out that inlining too much stuff manually was hurting us.
    
        Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    
    commit 9dc68ef5b94c700c4ee68790e8cbb334c90a538d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Nov 1 21:03:46 2012 -0700
    
        new coefficients for the vhq resampler
    
        previous coefficients were provided by a 3rd party and didn't have a
        way to re-generate them. we're now using the 'fir' utility.
    
        the performance of the filter is virtually identical, except for
        the down-sampling case which seems slightly better now:
           It looks like both the previous and new coefficients are generating
        some sort of clipping for full-scale signals in the down-sampling case
        (although the new ones seem better), the reason for that is
        unknown (see bug: 7453062)
    
        Also updated the HQ coefficients for the down-samplers, previous ones
        were a little bit too conservative -- the new ones push the cut-off
        frequency up by about 1 KHz.
    
        Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    
    commit 38e0b8560a6fc1b7124e22e0e09a84a285182f8e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 13:51:44 2012 -0700
    
        fix SINC resampler on non ARM architectures
    
        make sure the C version of the code generates the same
        output than the ARM assemply version.
    
        Change-Id: Ide218785c35d02598b2d7278e646b1b178148698
    
    commit a1878128b182696ba508569b4d211d0dfae92463
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 12:49:07 2012 -0700
    
        fix another issue with generating FIR coefficients
    
        the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
        missing the 2*f scale factor. This explains why we were seeing
        clipping and had to manually scale the filter down.
    
        Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    
    commit 1a0fb993430acc9f601e6c538305bc407c20ac5d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:20 2012 -0700
    
        fir a typo that caused up-sampling coefficiens to be wrong
    
        up-sample coefficient were generated with a cut-off frequency of 24KHz
        intead of ~20KHz, which caused more aliasing in the audible band.
    
        also increased the attenuation to 1.3 dB on both up and down
        sampling coefficient to avoid clipping.
    
        Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    
    commit 9520ad6862bd682ad075a9d9e3e94ada9f6e58b6
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:16 2012 -0700
    
        test-resample: clip instead of overflowing
    
        Change-Id: I550e5a59e51c11e1095ca338222b094f92b96878
    
    commit ba36656300f250f7f1fdeb75149749344260e6cb
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 01:01:38 2012 -0700
    
        a test app for the resamplers
    
        Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    
    commit 056a08b9bfd33cf27228c992adc8293a56b01be8
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 14:11:01 2012 -0700
    
        reenable the cubic resampler
    
        cubic resampler was disabled because it hadn't been qualified,
        however after I did some tests, it does improve significantly
        the sound quality over the order-1 resampler, even if it is
        still quite bad.
    
        also HIGH_QUALITY resampler was partially disabled, it's now
        fully enabled. It's a big improvement over the cubic resampler
        in terms of aliasing noise (it's not as good in the pass-band).
    
        Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    
    commit 8c0241d3ff50ae85167f69b3bd369244894cfa44
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 13:48:42 2012 -0700
    
        improve SINC resampler coefficients
    
        - we increase the interpolation precision from 4 to 7 bits
        this doesn't increase CPU power required, it only increases the
        size of the filter table but significantly reduces the noise
        introduced by the quantization of the impulse response.
    
        - the parameters of the filter are set such that aliasing is
        rejected at 80 dB below 20 KHz. Because we don't use a lot of
        coefficient (to save compute power), there are quite a bit of
        attenuation in the pass-band: starting at 9KHz for the
        down-sampler (48 to 44.1), and starting at 13 KHz for the
        up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
        Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    
    commit 69e7dab2192adc1f780464146810629ebd01b145
    Author: Pixelflinger <mathias.agopian@gmail.com>
    Date:   Thu Oct 25 19:43:49 2012 -0700
    
        improve fir tool: cleanup, better default, bug fixes
    
        - all parameters can be changed on the command-line
        - added float output
        - added debug option
        - added an option to generate a polyphase filter coefficients
        - added an attenuation option in dBFS
        - added a lot of comments and references
        - fixed kaiser window parameter
    
        also the default should generate a filter with 80 dB rejection
        (of the 24 KHz aliasing) above 20 KHz and a 15 KHz transition
        band around ~20 KHz (for 48 KHz sampling rate).
        It's not very good but corresponds to the current code.
    
    commit 8347499d105a50257c18e9dac652e750b06428b1
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Mon Oct 22 17:09:27 2012 -0700
    
        Increase allowed number of VHQ resamplers to 3
    
        Bug: 7378660
        Change-Id: I69e33ca2eb4bb9bd38e2c63df62cd1130d68baf6
    
    commit f91cf3cad7f5c4d52614271c89ab468741c5d24c
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 03:04:05 2012 -0700
    
        Fix a typo that caused the high quality resampler to produce garbage
    
        the problem is that if libaudio_resampler is present, it is those
        coefficients that will always be selected, but the correct
        meta-data.
    
        Bug: 7385994
        Change-Id: Ieebeb37b4dfb62a1a051bc29fae2ce056dbc6621
    
    commit e158a9e4262a174c59469a205658bc3ca4078234
    Author: Dan Bornstein <danfuzz@google.com>
    Date:   Fri Oct 3 10:34:57 2008 -0700
    
        Manually merge change #111620 from tc3 to mainline, to keep the
    
        automerger from choking on it.
    
        p4 sync
        p4 integrate -r -b android_to_tc3 //...@111620,111620
        p4 resolve -a
        p4 resolve     # resolve a couple merge travesties
    
        PRESUBMIT=passed
        BUG=1399648
        TBR=edheyl
        OCL=111902
    
        Change-Id: I854b01553dd92bbf9c864f5a9bd51a3d665f0ac2
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b9f3c26032be7a6ea01a10d93d94826f449e68ab
    Author: Dave Bort <dbort@google.com>
    Date:   Fri Jan 18 14:51:05 2008 -0800
    
        Rename "Makefile" to "Android.mk" throughout the tree.
    
        For <http://b/issue?id=960416>.
    
        I've tested this as much as I can, but 1500 open files =
        easy to mess things up.  Please let me know if there's
        a problem rather than rolling back this change.
    
        PRESUBMIT=passed
        BUG=960416
        TBR=joeo
        OCL=46537
    
        Change-Id: I5a404caf0f398a7afa7ae7abaf2f2a1c6ab490eb
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 0c22a9a44c4103483fba1d944acf1354c5eb1617
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 23:44:25 2007 -0700
    
        Tweak the SINC resampler parameters and double the performance. It's using about 10% CPU in the worse case now.
    
        Change-Id: I50ac7e6c6702a427fa36ab6d976c507155057507
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b85e41487983ad085b859acf8251e7e54480308a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 04:34:36 2007 -0700
    
        A sinc resampler for Audioflinger. It's not enabled yet, but fully functional and apparently working. It need more "quality" tests. In the 48->44 KHz, it takes about 25% of the CPU time.
    
        Change-Id: I80eb5185e13ebdb907e0b85c49ba1272c23d60ec
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit ba3949ef17cac2ba71cc3096c413782a49c922e5
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 21:01:28 2007 -0700
    
        fix a few small typos in the FIR computation
    
        Change-Id: I6e56b514fe520f30f7487f85c64ea5d2a7c19b40
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 7474bfa7de2604021963794dddfe44985648db6a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 03:16:02 2007 -0700
    
        This is a tool to compute the the reconstruction filter coefficients for a sinc audio resampler.
    
        Change-Id: I99be2505139b8e0e7647200e1647509d4f7e6067
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    Bug: 7577965
    Change-Id: I2c84a9283a1668723bad83e1a119c849c88c3e6b
    new coefficients for the vhq resampler
    
    previous coefficients were provided by a 3rd party and didn't have a
    way to re-generate them. we're now using the 'fir' utility.
    
    the performance of the filter is virtually identical, except for
    the down-sampling case which seems slightly better now:
       It looks like both the previous and new coefficients are generating
    some sort of clipping for full-scale signals in the down-sampling case
    (although the new ones seem better), the reason for that is
    unknown (see bug: 7453062)
    
    Also updated the HQ coefficients for the down-samplers, previous ones
    were a little bit too conservative -- the new ones push the cut-off
    frequency up by about 1 KHz.
    
    Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    new coefficients for the vhq resampler
    
    previous coefficients were provided by a 3rd party and didn't have a
    way to re-generate them. we're now using the 'fir' utility.
    
    the performance of the filter is virtually identical, except for
    the down-sampling case which seems slightly better now:
       It looks like both the previous and new coefficients are generating
    some sort of clipping for full-scale signals in the down-sampling case
    (although the new ones seem better), the reason for that is
    unknown (see bug: 7453062)
    
    Also updated the HQ coefficients for the down-samplers, previous ones
    were a little bit too conservative -- the new ones push the cut-off
    frequency up by about 1 KHz.
    
    Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    audioflinger/resampler: Add VERY_HIGH_QUALITY audio-resampler
    
    Change-Id: I34f5d36ae60010ec64222d6660d10a84da3bf566
    Bug: 7024293
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    audioflinger/resampler: Add VERY_HIGH_QUALITY audio-resampler
    
    Change-Id: I34f5d36ae60010ec64222d6660d10a84da3bf566
    Bug: 7024293
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Fix build warnings
    
    Change-Id: I79f4d7052a4c0a9fde144063f44a9c8c9dd575d5
    Fix build warnings
    
    Change-Id: I79f4d7052a4c0a9fde144063f44a9c8c9dd575d5
    New VHQ resampler
    
    Squashed commit of the following:
    
    commit 12b6952da9f25e94d06dd7185bce255924e7e791
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 19 15:27:26 2012 -0800
    
        fix a typo in SINC resampler that prevented tracks to be mixed
    
        we were always erasing the current mix instead of mixing into it.
    
        Change-Id: Ib229245f9e5a0d384f1727640a59e9f0469211a2
    
    commit 0019ce082df430278f14ab922e900ce33b64897d
    Author: Dave Bort <dbort@google.com>
    Date:   Tue Nov 13 01:30:32 2007 -0800
    
        Rename "TARGET" to "MODULE" in the build system.
    
        Part one of the grand renaming.
    
        API_CHANGE: Third parties may need to update their makefiles.
        Any variables with "LOCAL" and "TARGET" in their names
        should now use "MODULE" instead of "TARGET"; e.g., LOCAL_MODULE,
        LOCAL_MODULE_TAGS.
    
        PRESUBMIT=passed
        OCL=39840
    
        Change-Id: Ica9a7937d3d9552ab84db46ac6eea8a290e404fe
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit f01adc0cef0e39e75c76d9195ac26a94cac0a100
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Wed Nov 14 08:32:08 2012 -0800
    
        Fix build warnings
    
        Change-Id: Ic43bcca166a529a6431711b05a7fa21849b6a38b
    
    commit 9bb031a565c753a03d9c9397edea318947d80528
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 04:44:30 2012 -0800
    
        more optimizations...
    
        calculate the offsets from the phase differently, this happens
        to reduce the register pressure in the main loop, which in turns
        allows the compiler to generate much better code (doesn't need
        to spill a lot of stuff on the stack).
    
        this gives another 15% performance increase
    
        Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    
    commit 5a951598f31217b8cd2babd0720c9608ee17291a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 03:26:39 2012 -0800
    
        refactor code to improve neon code
    
        we want to make sure we don't transfer data from the
        neon unit to the arm register file, as this can be quite
        slow. instead we do all the calculation on the neon side
        and write the result directly to main memory.
    
        Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    
    commit b381ee9e83bc9fd18986e79c7809841514ed590e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 15:16:13 2012 -0800
    
        NEON optimized SINC resampler
    
        this currently gives us a 60% to 80% boost depending
        on the quality level selected.
    
        Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    
    commit bea077354210242ea193a50b0dbab0fedab25df3
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 5 01:51:37 2012 -0800
    
        minor cleanups
    
        Change-Id: Ia12ee4fb59e90221761bec85e6450db29197591f
    
    commit 8f4ed7decbe161a5ff38200b218f5216d80aba46
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 18:49:14 2012 -0800
    
        improve resample test
    
        - handle stereo input
        - input file can now be ommited, in this case
          a linear chirp will be used automatically
        - better usage information
    
        Change-Id: I5d62a6c26a9054a1c1a517a065b4df5a2cdcda22
    
    commit 5fcd634ea6cb4df27c495abe20f5f9b8ff55d128
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 02:03:49 2012 -0800
    
        change how we store the FIR coefficients
    
        The coefficient table is now transposed and shows
        much better its polyphase nature: we now have a FIR
        per line, each line corresponding to a phase.
    
        This doesn't change at all the results produced by
        the filter, but allows us to make slightly better
        use of the data cache and improves performance a bit
        (although not as much as I thought it would).
    
        The main benefit is that it is the first step
        before we can make much larger optimizations
        (like using NEON).
    
        Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    
    commit d652231abf4c7e2ea1fc89caae730cec1f7259a1
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 3 23:37:53 2012 -0700
    
        improve SINC resampler performance
    
        The improvement is about 60% by just tweaking a few
        things to help the compiler generate better code.
        It turns out that inlining too much stuff manually was hurting us.
    
        Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    
    commit 9dc68ef5b94c700c4ee68790e8cbb334c90a538d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Nov 1 21:03:46 2012 -0700
    
        new coefficients for the vhq resampler
    
        previous coefficients were provided by a 3rd party and didn't have a
        way to re-generate them. we're now using the 'fir' utility.
    
        the performance of the filter is virtually identical, except for
        the down-sampling case which seems slightly better now:
           It looks like both the previous and new coefficients are generating
        some sort of clipping for full-scale signals in the down-sampling case
        (although the new ones seem better), the reason for that is
        unknown (see bug: 7453062)
    
        Also updated the HQ coefficients for the down-samplers, previous ones
        were a little bit too conservative -- the new ones push the cut-off
        frequency up by about 1 KHz.
    
        Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    
    commit 38e0b8560a6fc1b7124e22e0e09a84a285182f8e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 13:51:44 2012 -0700
    
        fix SINC resampler on non ARM architectures
    
        make sure the C version of the code generates the same
        output than the ARM assemply version.
    
        Change-Id: Ide218785c35d02598b2d7278e646b1b178148698
    
    commit a1878128b182696ba508569b4d211d0dfae92463
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 12:49:07 2012 -0700
    
        fix another issue with generating FIR coefficients
    
        the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
        missing the 2*f scale factor. This explains why we were seeing
        clipping and had to manually scale the filter down.
    
        Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    
    commit 1a0fb993430acc9f601e6c538305bc407c20ac5d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:20 2012 -0700
    
        fir a typo that caused up-sampling coefficiens to be wrong
    
        up-sample coefficient were generated with a cut-off frequency of 24KHz
        intead of ~20KHz, which caused more aliasing in the audible band.
    
        also increased the attenuation to 1.3 dB on both up and down
        sampling coefficient to avoid clipping.
    
        Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    
    commit 9520ad6862bd682ad075a9d9e3e94ada9f6e58b6
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:16 2012 -0700
    
        test-resample: clip instead of overflowing
    
        Change-Id: I550e5a59e51c11e1095ca338222b094f92b96878
    
    commit ba36656300f250f7f1fdeb75149749344260e6cb
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 01:01:38 2012 -0700
    
        a test app for the resamplers
    
        Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    
    commit 056a08b9bfd33cf27228c992adc8293a56b01be8
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 14:11:01 2012 -0700
    
        reenable the cubic resampler
    
        cubic resampler was disabled because it hadn't been qualified,
        however after I did some tests, it does improve significantly
        the sound quality over the order-1 resampler, even if it is
        still quite bad.
    
        also HIGH_QUALITY resampler was partially disabled, it's now
        fully enabled. It's a big improvement over the cubic resampler
        in terms of aliasing noise (it's not as good in the pass-band).
    
        Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    
    commit 8c0241d3ff50ae85167f69b3bd369244894cfa44
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 13:48:42 2012 -0700
    
        improve SINC resampler coefficients
    
        - we increase the interpolation precision from 4 to 7 bits
        this doesn't increase CPU power required, it only increases the
        size of the filter table but significantly reduces the noise
        introduced by the quantization of the impulse response.
    
        - the parameters of the filter are set such that aliasing is
        rejected at 80 dB below 20 KHz. Because we don't use a lot of
        coefficient (to save compute power), there are quite a bit of
        attenuation in the pass-band: starting at 9KHz for the
        down-sampler (48 to 44.1), and starting at 13 KHz for the
        up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
        Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    
    commit 69e7dab2192adc1f780464146810629ebd01b145
    Author: Pixelflinger <mathias.agopian@gmail.com>
    Date:   Thu Oct 25 19:43:49 2012 -0700
    
        improve fir tool: cleanup, better default, bug fixes
    
        - all parameters can be changed on the command-line
        - added float output
        - added debug option
        - added an option to generate a polyphase filter coefficients
        - added an attenuation option in dBFS
        - added a lot of comments and references
        - fixed kaiser window parameter
    
        also the default should generate a filter with 80 dB rejection
        (of the 24 KHz aliasing) above 20 KHz and a 15 KHz transition
        band around ~20 KHz (for 48 KHz sampling rate).
        It's not very good but corresponds to the current code.
    
    commit 8347499d105a50257c18e9dac652e750b06428b1
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Mon Oct 22 17:09:27 2012 -0700
    
        Increase allowed number of VHQ resamplers to 3
    
        Bug: 7378660
        Change-Id: I69e33ca2eb4bb9bd38e2c63df62cd1130d68baf6
    
    commit f91cf3cad7f5c4d52614271c89ab468741c5d24c
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 03:04:05 2012 -0700
    
        Fix a typo that caused the high quality resampler to produce garbage
    
        the problem is that if libaudio_resampler is present, it is those
        coefficients that will always be selected, but the correct
        meta-data.
    
        Bug: 7385994
        Change-Id: Ieebeb37b4dfb62a1a051bc29fae2ce056dbc6621
    
    commit e158a9e4262a174c59469a205658bc3ca4078234
    Author: Dan Bornstein <danfuzz@google.com>
    Date:   Fri Oct 3 10:34:57 2008 -0700
    
        Manually merge change #111620 from tc3 to mainline, to keep the
    
        automerger from choking on it.
    
        p4 sync
        p4 integrate -r -b android_to_tc3 //...@111620,111620
        p4 resolve -a
        p4 resolve     # resolve a couple merge travesties
    
        PRESUBMIT=passed
        BUG=1399648
        TBR=edheyl
        OCL=111902
    
        Change-Id: I854b01553dd92bbf9c864f5a9bd51a3d665f0ac2
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b9f3c26032be7a6ea01a10d93d94826f449e68ab
    Author: Dave Bort <dbort@google.com>
    Date:   Fri Jan 18 14:51:05 2008 -0800
    
        Rename "Makefile" to "Android.mk" throughout the tree.
    
        For <http://b/issue?id=960416>.
    
        I've tested this as much as I can, but 1500 open files =
        easy to mess things up.  Please let me know if there's
        a problem rather than rolling back this change.
    
        PRESUBMIT=passed
        BUG=960416
        TBR=joeo
        OCL=46537
    
        Change-Id: I5a404caf0f398a7afa7ae7abaf2f2a1c6ab490eb
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 0c22a9a44c4103483fba1d944acf1354c5eb1617
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 23:44:25 2007 -0700
    
        Tweak the SINC resampler parameters and double the performance. It's using about 10% CPU in the worse case now.
    
        Change-Id: I50ac7e6c6702a427fa36ab6d976c507155057507
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b85e41487983ad085b859acf8251e7e54480308a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 04:34:36 2007 -0700
    
        A sinc resampler for Audioflinger. It's not enabled yet, but fully functional and apparently working. It need more "quality" tests. In the 48->44 KHz, it takes about 25% of the CPU time.
    
        Change-Id: I80eb5185e13ebdb907e0b85c49ba1272c23d60ec
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit ba3949ef17cac2ba71cc3096c413782a49c922e5
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 21:01:28 2007 -0700
    
        fix a few small typos in the FIR computation
    
        Change-Id: I6e56b514fe520f30f7487f85c64ea5d2a7c19b40
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 7474bfa7de2604021963794dddfe44985648db6a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 03:16:02 2007 -0700
    
        This is a tool to compute the the reconstruction filter coefficients for a sinc audio resampler.
    
        Change-Id: I99be2505139b8e0e7647200e1647509d4f7e6067
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    Bug: 7577965
    Change-Id: I2c84a9283a1668723bad83e1a119c849c88c3e6b
    New VHQ resampler
    
    Squashed commit of the following:
    
    commit 12b6952da9f25e94d06dd7185bce255924e7e791
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 19 15:27:26 2012 -0800
    
        fix a typo in SINC resampler that prevented tracks to be mixed
    
        we were always erasing the current mix instead of mixing into it.
    
        Change-Id: Ib229245f9e5a0d384f1727640a59e9f0469211a2
    
    commit 0019ce082df430278f14ab922e900ce33b64897d
    Author: Dave Bort <dbort@google.com>
    Date:   Tue Nov 13 01:30:32 2007 -0800
    
        Rename "TARGET" to "MODULE" in the build system.
    
        Part one of the grand renaming.
    
        API_CHANGE: Third parties may need to update their makefiles.
        Any variables with "LOCAL" and "TARGET" in their names
        should now use "MODULE" instead of "TARGET"; e.g., LOCAL_MODULE,
        LOCAL_MODULE_TAGS.
    
        PRESUBMIT=passed
        OCL=39840
    
        Change-Id: Ica9a7937d3d9552ab84db46ac6eea8a290e404fe
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit f01adc0cef0e39e75c76d9195ac26a94cac0a100
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Wed Nov 14 08:32:08 2012 -0800
    
        Fix build warnings
    
        Change-Id: Ic43bcca166a529a6431711b05a7fa21849b6a38b
    
    commit 9bb031a565c753a03d9c9397edea318947d80528
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 04:44:30 2012 -0800
    
        more optimizations...
    
        calculate the offsets from the phase differently, this happens
        to reduce the register pressure in the main loop, which in turns
        allows the compiler to generate much better code (doesn't need
        to spill a lot of stuff on the stack).
    
        this gives another 15% performance increase
    
        Change-Id: I2ce3479dd48b9e6941adb80e6d443d6e14d64d96
    
    commit 5a951598f31217b8cd2babd0720c9608ee17291a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 10 03:26:39 2012 -0800
    
        refactor code to improve neon code
    
        we want to make sure we don't transfer data from the
        neon unit to the arm register file, as this can be quite
        slow. instead we do all the calculation on the neon side
        and write the result directly to main memory.
    
        Change-Id: Ibb56664d3ab03098ae2798b75e2b6927ac900187
    
    commit b381ee9e83bc9fd18986e79c7809841514ed590e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 15:16:13 2012 -0800
    
        NEON optimized SINC resampler
    
        this currently gives us a 60% to 80% boost depending
        on the quality level selected.
    
        Change-Id: I7db385007e811ed7bffe5fd3403b44e300894f5b
    
    commit bea077354210242ea193a50b0dbab0fedab25df3
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Nov 5 01:51:37 2012 -0800
    
        minor cleanups
    
        Change-Id: Ia12ee4fb59e90221761bec85e6450db29197591f
    
    commit 8f4ed7decbe161a5ff38200b218f5216d80aba46
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 18:49:14 2012 -0800
    
        improve resample test
    
        - handle stereo input
        - input file can now be ommited, in this case
          a linear chirp will be used automatically
        - better usage information
    
        Change-Id: I5d62a6c26a9054a1c1a517a065b4df5a2cdcda22
    
    commit 5fcd634ea6cb4df27c495abe20f5f9b8ff55d128
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Nov 4 02:03:49 2012 -0800
    
        change how we store the FIR coefficients
    
        The coefficient table is now transposed and shows
        much better its polyphase nature: we now have a FIR
        per line, each line corresponding to a phase.
    
        This doesn't change at all the results produced by
        the filter, but allows us to make slightly better
        use of the data cache and improves performance a bit
        (although not as much as I thought it would).
    
        The main benefit is that it is the first step
        before we can make much larger optimizations
        (like using NEON).
    
        Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    
    commit d652231abf4c7e2ea1fc89caae730cec1f7259a1
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sat Nov 3 23:37:53 2012 -0700
    
        improve SINC resampler performance
    
        The improvement is about 60% by just tweaking a few
        things to help the compiler generate better code.
        It turns out that inlining too much stuff manually was hurting us.
    
        Change-Id: I8068f0f75051f95ac600e50ce552572dd1e8c304
    
    commit 9dc68ef5b94c700c4ee68790e8cbb334c90a538d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Nov 1 21:03:46 2012 -0700
    
        new coefficients for the vhq resampler
    
        previous coefficients were provided by a 3rd party and didn't have a
        way to re-generate them. we're now using the 'fir' utility.
    
        the performance of the filter is virtually identical, except for
        the down-sampling case which seems slightly better now:
           It looks like both the previous and new coefficients are generating
        some sort of clipping for full-scale signals in the down-sampling case
        (although the new ones seem better), the reason for that is
        unknown (see bug: 7453062)
    
        Also updated the HQ coefficients for the down-samplers, previous ones
        were a little bit too conservative -- the new ones push the cut-off
        frequency up by about 1 KHz.
    
        Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    
    commit 38e0b8560a6fc1b7124e22e0e09a84a285182f8e
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 13:51:44 2012 -0700
    
        fix SINC resampler on non ARM architectures
    
        make sure the C version of the code generates the same
        output than the ARM assemply version.
    
        Change-Id: Ide218785c35d02598b2d7278e646b1b178148698
    
    commit a1878128b182696ba508569b4d211d0dfae92463
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Oct 30 12:49:07 2012 -0700
    
        fix another issue with generating FIR coefficients
    
        the impulse response of a low-pass is 2*f*sinc(2*pi*f*k), we were
        missing the 2*f scale factor. This explains why we were seeing
        clipping and had to manually scale the filter down.
    
        Change-Id: I86d0bb82ecdd99681c8ba5a8112a8257bf6f0186
    
    commit 1a0fb993430acc9f601e6c538305bc407c20ac5d
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:20 2012 -0700
    
        fir a typo that caused up-sampling coefficiens to be wrong
    
        up-sample coefficient were generated with a cut-off frequency of 24KHz
        intead of ~20KHz, which caused more aliasing in the audible band.
    
        also increased the attenuation to 1.3 dB on both up and down
        sampling coefficient to avoid clipping.
    
        Change-Id: Ie8aeecf1429190541b656810c6716b6aae5ece2e
    
    commit 9520ad6862bd682ad075a9d9e3e94ada9f6e58b6
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 17:13:16 2012 -0700
    
        test-resample: clip instead of overflowing
    
        Change-Id: I550e5a59e51c11e1095ca338222b094f92b96878
    
    commit ba36656300f250f7f1fdeb75149749344260e6cb
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 01:01:38 2012 -0700
    
        a test app for the resamplers
    
        Change-Id: I66852d90d384f1d9e77b51ad1a1ebdbaf61d0607
    
    commit 056a08b9bfd33cf27228c992adc8293a56b01be8
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 14:11:01 2012 -0700
    
        reenable the cubic resampler
    
        cubic resampler was disabled because it hadn't been qualified,
        however after I did some tests, it does improve significantly
        the sound quality over the order-1 resampler, even if it is
        still quite bad.
    
        also HIGH_QUALITY resampler was partially disabled, it's now
        fully enabled. It's a big improvement over the cubic resampler
        in terms of aliasing noise (it's not as good in the pass-band).
    
        Change-Id: I70e3658c255896588642697be9eb594ff4ec0f8b
    
    commit 8c0241d3ff50ae85167f69b3bd369244894cfa44
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Oct 26 13:48:42 2012 -0700
    
        improve SINC resampler coefficients
    
        - we increase the interpolation precision from 4 to 7 bits
        this doesn't increase CPU power required, it only increases the
        size of the filter table but significantly reduces the noise
        introduced by the quantization of the impulse response.
    
        - the parameters of the filter are set such that aliasing is
        rejected at 80 dB below 20 KHz. Because we don't use a lot of
        coefficient (to save compute power), there are quite a bit of
        attenuation in the pass-band: starting at 9KHz for the
        down-sampler (48 to 44.1), and starting at 13 KHz for the
        up-sampler (44.1 to 48) -- the transition band is about 15 KHz.
    
        Change-Id: I855548d2aab8a0fb0d2a2da3a364b6842d7d3838
    
    commit 69e7dab2192adc1f780464146810629ebd01b145
    Author: Pixelflinger <mathias.agopian@gmail.com>
    Date:   Thu Oct 25 19:43:49 2012 -0700
    
        improve fir tool: cleanup, better default, bug fixes
    
        - all parameters can be changed on the command-line
        - added float output
        - added debug option
        - added an option to generate a polyphase filter coefficients
        - added an attenuation option in dBFS
        - added a lot of comments and references
        - fixed kaiser window parameter
    
        also the default should generate a filter with 80 dB rejection
        (of the 24 KHz aliasing) above 20 KHz and a 15 KHz transition
        band around ~20 KHz (for 48 KHz sampling rate).
        It's not very good but corresponds to the current code.
    
    commit 8347499d105a50257c18e9dac652e750b06428b1
    Author: Glenn Kasten <gkasten@google.com>
    Date:   Mon Oct 22 17:09:27 2012 -0700
    
        Increase allowed number of VHQ resamplers to 3
    
        Bug: 7378660
        Change-Id: I69e33ca2eb4bb9bd38e2c63df62cd1130d68baf6
    
    commit f91cf3cad7f5c4d52614271c89ab468741c5d24c
    Author: Mathias Agopian <mathias@google.com>
    Date:   Sun Oct 21 03:04:05 2012 -0700
    
        Fix a typo that caused the high quality resampler to produce garbage
    
        the problem is that if libaudio_resampler is present, it is those
        coefficients that will always be selected, but the correct
        meta-data.
    
        Bug: 7385994
        Change-Id: Ieebeb37b4dfb62a1a051bc29fae2ce056dbc6621
    
    commit e158a9e4262a174c59469a205658bc3ca4078234
    Author: Dan Bornstein <danfuzz@google.com>
    Date:   Fri Oct 3 10:34:57 2008 -0700
    
        Manually merge change #111620 from tc3 to mainline, to keep the
    
        automerger from choking on it.
    
        p4 sync
        p4 integrate -r -b android_to_tc3 //...@111620,111620
        p4 resolve -a
        p4 resolve     # resolve a couple merge travesties
    
        PRESUBMIT=passed
        BUG=1399648
        TBR=edheyl
        OCL=111902
    
        Change-Id: I854b01553dd92bbf9c864f5a9bd51a3d665f0ac2
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b9f3c26032be7a6ea01a10d93d94826f449e68ab
    Author: Dave Bort <dbort@google.com>
    Date:   Fri Jan 18 14:51:05 2008 -0800
    
        Rename "Makefile" to "Android.mk" throughout the tree.
    
        For <http://b/issue?id=960416>.
    
        I've tested this as much as I can, but 1500 open files =
        easy to mess things up.  Please let me know if there's
        a problem rather than rolling back this change.
    
        PRESUBMIT=passed
        BUG=960416
        TBR=joeo
        OCL=46537
    
        Change-Id: I5a404caf0f398a7afa7ae7abaf2f2a1c6ab490eb
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 0c22a9a44c4103483fba1d944acf1354c5eb1617
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 23:44:25 2007 -0700
    
        Tweak the SINC resampler parameters and double the performance. It's using about 10% CPU in the worse case now.
    
        Change-Id: I50ac7e6c6702a427fa36ab6d976c507155057507
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit b85e41487983ad085b859acf8251e7e54480308a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Oct 29 04:34:36 2007 -0700
    
        A sinc resampler for Audioflinger. It's not enabled yet, but fully functional and apparently working. It need more "quality" tests. In the 48->44 KHz, it takes about 25% of the CPU time.
    
        Change-Id: I80eb5185e13ebdb907e0b85c49ba1272c23d60ec
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit ba3949ef17cac2ba71cc3096c413782a49c922e5
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 21:01:28 2007 -0700
    
        fix a few small typos in the FIR computation
    
        Change-Id: I6e56b514fe520f30f7487f85c64ea5d2a7c19b40
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    commit 7474bfa7de2604021963794dddfe44985648db6a
    Author: Mathias Agopian <mathias@google.com>
    Date:   Thu Aug 23 03:16:02 2007 -0700
    
        This is a tool to compute the the reconstruction filter coefficients for a sinc audio resampler.
    
        Change-Id: I99be2505139b8e0e7647200e1647509d4f7e6067
        Signed-off-by: Glenn Kasten <gkasten@google.com>
    
    Bug: 7577965
    Change-Id: I2c84a9283a1668723bad83e1a119c849c88c3e6b
    change how we store the FIR coefficients
    
    The coefficient table is now transposed and shows
    much better its polyphase nature: we now have a FIR
    per line, each line corresponding to a phase.
    
    This doesn't change at all the results produced by
    the filter, but allows us to make slightly better
    use of the data cache and improves performance a bit
    (although not as much as I thought it would).
    
    The main benefit is that it is the first step
    before we can make much larger optimizations
    (like using NEON).
    
    Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    change how we store the FIR coefficients
    
    The coefficient table is now transposed and shows
    much better its polyphase nature: we now have a FIR
    per line, each line corresponding to a phase.
    
    This doesn't change at all the results produced by
    the filter, but allows us to make slightly better
    use of the data cache and improves performance a bit
    (although not as much as I thought it would).
    
    The main benefit is that it is the first step
    before we can make much larger optimizations
    (like using NEON).
    
    Change-Id: Iebf7695825dcbd41f25861efcaefbaa3365ecb43
    new coefficients for the vhq resampler
    
    previous coefficients were provided by a 3rd party and didn't have a
    way to re-generate them. we're now using the 'fir' utility.
    
    the performance of the filter is virtually identical, except for
    the down-sampling case which seems slightly better now:
       It looks like both the previous and new coefficients are generating
    some sort of clipping for full-scale signals in the down-sampling case
    (although the new ones seem better), the reason for that is
    unknown (see bug: 7453062)
    
    Also updated the HQ coefficients for the down-samplers, previous ones
    were a little bit too conservative -- the new ones push the cut-off
    frequency up by about 1 KHz.
    
    Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    new coefficients for the vhq resampler
    
    previous coefficients were provided by a 3rd party and didn't have a
    way to re-generate them. we're now using the 'fir' utility.
    
    the performance of the filter is virtually identical, except for
    the down-sampling case which seems slightly better now:
       It looks like both the previous and new coefficients are generating
    some sort of clipping for full-scale signals in the down-sampling case
    (although the new ones seem better), the reason for that is
    unknown (see bug: 7453062)
    
    Also updated the HQ coefficients for the down-samplers, previous ones
    were a little bit too conservative -- the new ones push the cut-off
    frequency up by about 1 KHz.
    
    Change-Id: I54a827b5c707c7cc41268ed01283758dce1d7647
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Add liblog
    
    Bug: 8580410
    Change-Id: If493d87d60d71be664ad75b140c62acadb75b0d0
    Add media.log service based on NBLog
    
    Change-Id: Ie45093df6ac9a739d05c8d408fab52a9a8a27e7f
    Add media.log service based on NBLog
    
    Change-Id: Ie45093df6ac9a739d05c8d408fab52a9a8a27e7f
    Add media.log service based on NBLog
    
    Change-Id: Ie45093df6ac9a739d05c8d408fab52a9a8a27e7f
    Add media.log service based on NBLog
    
    Change-Id: Ie45093df6ac9a739d05c8d408fab52a9a8a27e7f
    Fix error message to match CTS
    
    Bug: 8657725
    Change-Id: Ib608eb55f14d557d667f93e4f646c03d5ea470c1
    Fix error message to match CTS
    
    Bug: 8657725
    Change-Id: Ib608eb55f14d557d667f93e4f646c03d5ea470c1
    Fix error message to match CTS
    
    Bug: 8657725
    Change-Id: Ib608eb55f14d557d667f93e4f646c03d5ea470c1
    media.log dump
    
    Bug: 8446008
    Change-Id: Ia47b204f5c4c91b99591eec5420a25a3dc8e7631
    media.log dump
    
    Bug: 8446008
    Change-Id: Ia47b204f5c4c91b99591eec5420a25a3dc8e7631
    Add media.log service based on NBLog
    
    Change-Id: Ie45093df6ac9a739d05c8d408fab52a9a8a27e7f
    Add media.log service based on NBLog
    
    Change-Id: Ie45093df6ac9a739d05c8d408fab52a9a8a27e7f
