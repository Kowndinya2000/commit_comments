    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Release LevelDB 1.14
    
    Fix issues 200, 201
    
    Also,
    * Fix link to bigtable paper in docs.
    * New sstables will have the file extension .ldb. .sst files will
    continue to be recognized.
    * When building for iOS, use xcrun to execute the compiler. This may
    affect issue 177.
    Release leveldb 1.12
    
    Non-functional changes only:
    1) Add Kevin Regan to the AUTHORS file
    2) Add standard license header to issues/issue178_test.cc
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Added a new fault injection test.
    
    This test is intended to ensure leveldb properly detects and recovers from
    faults - specifically unwritten file data lost as a result of a system reset.
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Release LevelDB 1.17
    
    - Cleanup: delete unused IntSetToString
    
      It was added in http://cr/19491949 (and was referenced at the time).
      The last reference was removed in http://cr/19507363.
    
      This fixes warning/error with pre-release crosstoolv18:
        'std::string leveldb::{anonymous}::IntSetToString(const std::set<long unsigned int>&)' defined but not used [-Werror=unused-function]
    
    - Added arm64 and and armv7s to IOS build as suggested on leveldb mailing list.
    
    - Changed local variable type from int to size_t
    
      This eliminates compiler warning/error and resolves
      https://code.google.com/p/leveldb/issues/detail?id=140
    Release LevelDB 1.16
    
    - Make Log::Reader not report a corruption when the last record in a
      log file is truncated.
    - Fix issue 224: variable created but not utilized.
    - Remove comment that referenced a removed feature.
    Release LevelDB 1.15
    
    - switched from mmap based writing to simpler stdio based writing. Has a
      minor impact (0.5 microseconds) on microbenchmarks for asynchronous
      writes. Synchronous writes speed up from 30ms to 10ms on linux/ext4.
      Should be much more reliable on diverse platforms.
    - compaction errors now immediately put the database into a read-only
      mode (until it is re-opened). As a downside, a disk going out of
      space and then space being created will require a re-open to recover
      from, whereas previously that would happen automatically. On the
      plus side, many corruption possibilities go away.
    - force the DB to enter an error-state so that all future writes fail
      when a synchronous log write succeeds but the sync fails.
    - repair now regenerates sstables that exhibit problems
    - fix issue 218 - Use native memory barriers on OSX
    - fix issue 212 - QNX build is broken
    - fix build on iOS with xcode 5
    - make tests compile and pass on windows
    Release LevelDB 1.14
    
    Fix issues 200, 201
    
    Also,
    * Fix link to bigtable paper in docs.
    * New sstables will have the file extension .ldb. .sst files will
    continue to be recognized.
    * When building for iOS, use xcrun to execute the compiler. This may
    affect issue 177.
    LevelDB 1.13
    
    Fix issues 77, 87, 182, 190.
    
    Additionally, fix the bug described in
    https://groups.google.com/d/msg/leveldb/yL6h1mAOc20/vLU64RylIdMJ
    where a large contiguous keyspace of deleted data was not getting
    compacted.
    
    Also fix a bug where options.max_open_files was not getting clamped
    properly.
    Release leveldb 1.12
    
    Non-functional changes only:
    1) Add Kevin Regan to the AUTHORS file
    2) Add standard license header to issues/issue178_test.cc
    Release leveldb 1.11
    
    Fixes issues
    161
    174
    178
    
    As well as the issue reported by edouarda14@gmail.com about
    MissingSSTFile unit test failing on windows.
    Release leveldb 1.10
    
    Fixes issues
    147 - thanks feniksgordonfreeman
    153
    156
    166
    
    Additionally,
    * Remove calls to exit(1).
    * Fix unused-variable warnings from clang.
    * Fix possible overflow error related to num_restart value >= (2^32/4).
    * Add leveldbutil to .gitignore.
    * Add better log messages when Write is stalled on a compaction.
    Fix corruption bug found and analyzed by dhruba@gmail.com
    
    https://groups.google.com/d/msg/leveldb/Kc9JxuIUu5A/9P0N9RL4ar8J
    added utility to dump leveldb files
    Small fixes.
    
    Details:
    * Fix shared library building.
    * Reorganize linking commands so flags like --as-needed can be passed.
    * C binding exports version numbers.
    * Fix small typos in documention.
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    update version number to 1.5
    Remove static initializer; fix endian-ness detection; fix build on
    various platforms; improve android port speed.
    
    Avoid static initializer by using a new portability interface for
    thread-safe lazy initialization.  Custom ports will need to be
    extended to implement InitOnce/OnceType/LEVELDB_ONCE_INIT.
    
    Fix endian-ness detection (fixes Powerpc builds).
    
    Build related fixes:
    - Support platforms that have unversioned shared libraries.
    - Fix IOS build rules.
    
    Android improvements
    - Speed up atomic pointers
    - Share more code with port_posix.
    
    Do not spin in a tight loop attempting compactions if the file system
    is inaccessible (e.g., if kerberos tickets have expired or if it is out
    of space).
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    build shared libraries; updated version to 1.3; add Status accessors
    Build fixes and cleanups:
    (1) Separate out C++ and CC flags (fixes c_test compilation)
    (2) Move snappy/perftools detection to script
    (3) Fix db_bench_sqlite3 and db_bench_tree_db build rules
    use mmap on 64-bit machines to speed-up reads; small build fixes
    Makefile fixes for systems with $CXX other than g++.
    
    - Makefile: Use $(CXX) for compiling C++ files,
      don't override the environment's value of $CXX
    
    - build_detect_platform: use $CXX instead of g++.
    
    Based on bug report from Theo Schlossnagle:
    http://code.google.com/p/leveldb/issues/detail?id=46
    
    (Sync with uptream at 25807040.)
    Pass system's CFLAGS, remove exit time destructor, sstable bug fix.
    
    - Pass system's values of CFLAGS,LDFLAGS.
      Don't override OPT if it's already set.
      Original patch by Alessio Treglia <alessio@debian.org>:
      http://code.google.com/p/leveldb/issues/detail?id=27#c6
    
    - Remove 1 exit time destructor from leveldb.
      See http://crbug.com/101600
    
    - Fix problem where sstable building code would pass an
      internal key to the user comparator.
    
    (Sync with uptream at 25436817.)
    Sync with upstream @23860137.
    
    Fix GCC -Wshadow warnings in LevelDB's public header files,
    reported by Dustin.
    
    Add in-memory Env implementation (helpers/memenv/*).
    This enables users to create LevelDB databases in-memory.
    
    Initialize ShardedLRUCache::last_id_ to zero.
    This fixes a Valgrind warning.
    
    (Also delete port/sha1_* which were removed upstream some time ago.)
    C binding for leveldb, better readseq benchmark for SQLite.
    
    - Added a C binding for LevelDB.
      May be useful as a stable ABI that can be used by
      programs that keep leveldb in a shared library,
      or for JNI API.
    
    - Replaced SQLite's readseq benchmark to a more efficient version.
      SQLite readseq speeds increased by about a factor of 2x
      from the previous version. Also updated benchmark page to
      reflect readseq speed up.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@46 62dab493-f737-651d-591e-8d6aee1b9529
    Adding FreeBSD support, removing Chromium files, adding benchmark.
    
    - LevelDB patch for FreeBSD. This resolves Issue 22.
      Contributed by dforsythe (thanks!).
    
    - Removing Chromium-specific files.
      They are now going to live in the Chromium repository.
    
    - Adding a benchmark page comparing LevelDB performance
      to SQLite and Kyoto Cabinet's TreeDB, along with
      code to generate the benchmarks.
      Thanks to Kevin Tseng for compiling the benchmarks,
      and Scott Hess and Mikio Hirabayashi for their
      help and advice.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@40 62dab493-f737-651d-591e-8d6aee1b9529
    Fixing Makefile issue reported in Issue 15 (misspelled flag)
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@35 62dab493-f737-651d-591e-8d6aee1b9529
    Platform detection during build, plus compatibility patches for machines without <cstdatomic>.
    
    This revision adds two major changes:
    1. build_detect_platform which generates build_config.mk
       with platform-dependent flags for the build process
    2. /port/atomic_pointer.h with anAtomicPointerimplementation
       for platforms without <cstdatomic>
    
    Some of this code is loosely based on patches submitted to the
    LevelDB mailing list at https://groups.google.com/forum/#!forum/leveldb
    Tip of the hat to Dave Smith and Edouard A, who both sent patches.
    
    The presence of Snappy (http://code.google.com/p/snappy/) and
    cstdatomic are now both detected in the build_detect_platform
    script (1.) which gets executing during make.
    
    For (2.), instead of broadly importing atomicops_* from Chromium or
    the Google performance tools, we chose to just implement AtomicPointer
    and the limited atomic load and store operations it needs.
    This resulted in much less code and fewer files - everything is
    contained in atomic_pointer.h.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@34 62dab493-f737-651d-591e-8d6aee1b9529
    A number of smaller fixes and performance improvements:
    
    - Implemented Get() directly instead of building on top of a full
      merging iterator stack.  This speeds up the "readrandom" benchmark
      by up to 15-30%.
    
    - Fixed an opensource compilation problem.
      Added --db=<name> flag to control where the database is placed.
    
    - Automatically compact a file when we have done enough
      overlapping seeks to that file.
    
    - Fixed a performance bug where we would read from at least one
      file in a level even if none of the files overlapped the key
      being read.
    
    - Makefile fix for Mac OSX installations that have XCode 4 without XCode 3.
    
    - Unified the two occurrences of binary search in a file-list
      into one routine.
    
    - Found and fixed a bug where we would unnecessarily search the
      last file when looking for a key larger than all data in the
      level.
    
    - A fix to avoid the need for trivial move compactions and
      therefore gets rid of two out of five syncs in "fillseq".
    
    - Removed the MANIFEST file write when switching to a new
      memtable/log-file for a 10-20% improvement on fill speed on ext4.
    
    - Adding a SNAPPY setting in the Makefile for folks who have
      Snappy installed. Snappy compresses values and speeds up writes.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@32 62dab493-f737-651d-591e-8d6aee1b9529
    sync with upstream @21627589
    
    Minor changes:
    * Reformat the bodies of the iterator interface routines in IteratorWrapper to
      make them a bit easier to read
    * Switched the default in the leveldb makefile to be optimized mode, rather
      than debug mode
    * Fix build problem in chromium port
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@30 62dab493-f737-651d-591e-8d6aee1b9529
    Update from upstream @21551990
    
    * Patch LevelDB to build for OSX and iOS
    * Fix race condition in memtable iterator deletion.
    * Other small fixes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@29 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Fix typo in Makefile.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@4 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Remove static initializer; fix endian-ness detection; fix build on
    various platforms; improve android port speed.
    
    Avoid static initializer by using a new portability interface for
    thread-safe lazy initialization.  Custom ports will need to be
    extended to implement InitOnce/OnceType/LEVELDB_ONCE_INIT.
    
    Fix endian-ness detection (fixes Powerpc builds).
    
    Build related fixes:
    - Support platforms that have unversioned shared libraries.
    - Fix IOS build rules.
    
    Android improvements
    - Speed up atomic pointers
    - Share more code with port_posix.
    
    Do not spin in a tight loop attempting compactions if the file system
    is inaccessible (e.g., if kerberos tickets have expired or if it is out
    of space).
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    Add arm64 support to leveldb.
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Release LevelDB 1.15
    
    - switched from mmap based writing to simpler stdio based writing. Has a
      minor impact (0.5 microseconds) on microbenchmarks for asynchronous
      writes. Synchronous writes speed up from 30ms to 10ms on linux/ext4.
      Should be much more reliable on diverse platforms.
    - compaction errors now immediately put the database into a read-only
      mode (until it is re-opened). As a downside, a disk going out of
      space and then space being created will require a re-open to recover
      from, whereas previously that would happen automatically. On the
      plus side, many corruption possibilities go away.
    - force the DB to enter an error-state so that all future writes fail
      when a synchronous log write succeeds but the sync fails.
    - repair now regenerates sstables that exhibit problems
    - fix issue 218 - Use native memory barriers on OSX
    - fix issue 212 - QNX build is broken
    - fix build on iOS with xcode 5
    - make tests compile and pass on windows
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    Remove static initializer; fix endian-ness detection; fix build on
    various platforms; improve android port speed.
    
    Avoid static initializer by using a new portability interface for
    thread-safe lazy initialization.  Custom ports will need to be
    extended to implement InitOnce/OnceType/LEVELDB_ONCE_INIT.
    
    Fix endian-ness detection (fixes Powerpc builds).
    
    Build related fixes:
    - Support platforms that have unversioned shared libraries.
    - Fix IOS build rules.
    
    Android improvements
    - Speed up atomic pointers
    - Share more code with port_posix.
    
    Do not spin in a tight loop attempting compactions if the file system
    is inaccessible (e.g., if kerberos tickets have expired or if it is out
    of space).
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Speed up Snappy uncompression, new Logger interface.
    
    - Removed one copy of an uncompressed block contents changing
      the signature of Snappy_Uncompress() so it uncompresses into a
      flat array instead of a std::string.
    
      Speeds up readrandom ~10%.
    
    - Instead of a combination of Env/WritableFile, we now have a
      Logger interface that can be easily overridden applications
      that want to supply their own logging.
    
    - Separated out the gcc and Sun Studio parts of atomic_pointer.h
      so we can use 'asm', 'volatile' keywords for Sun Studio.
    
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@39 62dab493-f737-651d-591e-8d6aee1b9529
    Sun Studio support, and fix for test related memory fixes.
    
    - LevelDB patch for Sun Studio
      Based on a patch submitted by Theo Schlossnagle - thanks!
      This fixes Issue 17.
    
    - Fix a couple of test related memory leaks.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@38 62dab493-f737-651d-591e-8d6aee1b9529
    Fixed a snappy compression wrapper bug (passing wrong variable).
    
    Change atomic_pointer.h to prefer a memory barrier based
    implementation over a <cstdatomic> based implementation for
    the following reasons:
    (1) On a x86-32-bit gcc-4.4 build, <ctdatomic> was corrupting
        the AtomicPointer.
    (2) On a x86-64-bit gcc build, a <ctstdatomic> based acquire-load
        takes ~15ns as opposed to the ~1ns for a memory-barrier
        based implementation.
    
    Fixes issue 9 (corruption_test fails)
    http://code.google.com/p/leveldb/issues/detail?id=9
    
    Fixes issue 16 (CorruptionTest.MissingDescriptor fails)
    http://code.google.com/p/leveldb/issues/detail?id=16
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@36 62dab493-f737-651d-591e-8d6aee1b9529
    Platform detection during build, plus compatibility patches for machines without <cstdatomic>.
    
    This revision adds two major changes:
    1. build_detect_platform which generates build_config.mk
       with platform-dependent flags for the build process
    2. /port/atomic_pointer.h with anAtomicPointerimplementation
       for platforms without <cstdatomic>
    
    Some of this code is loosely based on patches submitted to the
    LevelDB mailing list at https://groups.google.com/forum/#!forum/leveldb
    Tip of the hat to Dave Smith and Edouard A, who both sent patches.
    
    The presence of Snappy (http://code.google.com/p/snappy/) and
    cstdatomic are now both detected in the build_detect_platform
    script (1.) which gets executing during make.
    
    For (2.), instead of broadly importing atomicops_* from Chromium or
    the Google performance tools, we chose to just implement AtomicPointer
    and the limited atomic load and store operations it needs.
    This resulted in much less code and fewer files - everything is
    contained in atomic_pointer.h.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@34 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    added utility to dump leveldb files
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    Remove static initializer; fix endian-ness detection; fix build on
    various platforms; improve android port speed.
    
    Avoid static initializer by using a new portability interface for
    thread-safe lazy initialization.  Custom ports will need to be
    extended to implement InitOnce/OnceType/LEVELDB_ONCE_INIT.
    
    Fix endian-ness detection (fixes Powerpc builds).
    
    Build related fixes:
    - Support platforms that have unversioned shared libraries.
    - Fix IOS build rules.
    
    Android improvements
    - Speed up atomic pointers
    - Share more code with port_posix.
    
    Do not spin in a tight loop attempting compactions if the file system
    is inaccessible (e.g., if kerberos tickets have expired or if it is out
    of space).
    add .gitignore; support for building on a few BSD variants
    Adding FreeBSD support, removing Chromium files, adding benchmark.
    
    - LevelDB patch for FreeBSD. This resolves Issue 22.
      Contributed by dforsythe (thanks!).
    
    - Removing Chromium-specific files.
      They are now going to live in the Chromium repository.
    
    - Adding a benchmark page comparing LevelDB performance
      to SQLite and Kyoto Cabinet's TreeDB, along with
      code to generate the benchmarks.
      Thanks to Kevin Tseng for compiling the benchmarks,
      and Scott Hess and Mikio Hirabayashi for their
      help and advice.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@40 62dab493-f737-651d-591e-8d6aee1b9529
    Speed up Snappy uncompression, new Logger interface.
    
    - Removed one copy of an uncompressed block contents changing
      the signature of Snappy_Uncompress() so it uncompresses into a
      flat array instead of a std::string.
    
      Speeds up readrandom ~10%.
    
    - Instead of a combination of Env/WritableFile, we now have a
      Logger interface that can be easily overridden applications
      that want to supply their own logging.
    
    - Separated out the gcc and Sun Studio parts of atomic_pointer.h
      so we can use 'asm', 'volatile' keywords for Sun Studio.
    
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@39 62dab493-f737-651d-591e-8d6aee1b9529
    Fixed a snappy compression wrapper bug (passing wrong variable).
    
    Change atomic_pointer.h to prefer a memory barrier based
    implementation over a <cstdatomic> based implementation for
    the following reasons:
    (1) On a x86-32-bit gcc-4.4 build, <ctdatomic> was corrupting
        the AtomicPointer.
    (2) On a x86-64-bit gcc build, a <ctstdatomic> based acquire-load
        takes ~15ns as opposed to the ~1ns for a memory-barrier
        based implementation.
    
    Fixes issue 9 (corruption_test fails)
    http://code.google.com/p/leveldb/issues/detail?id=9
    
    Fixes issue 16 (CorruptionTest.MissingDescriptor fails)
    http://code.google.com/p/leveldb/issues/detail?id=16
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@36 62dab493-f737-651d-591e-8d6aee1b9529
    Platform detection during build, plus compatibility patches for machines without <cstdatomic>.
    
    This revision adds two major changes:
    1. build_detect_platform which generates build_config.mk
       with platform-dependent flags for the build process
    2. /port/atomic_pointer.h with anAtomicPointerimplementation
       for platforms without <cstdatomic>
    
    Some of this code is loosely based on patches submitted to the
    LevelDB mailing list at https://groups.google.com/forum/#!forum/leveldb
    Tip of the hat to Dave Smith and Edouard A, who both sent patches.
    
    The presence of Snappy (http://code.google.com/p/snappy/) and
    cstdatomic are now both detected in the build_detect_platform
    script (1.) which gets executing during make.
    
    For (2.), instead of broadly importing atomicops_* from Chromium or
    the Google performance tools, we chose to just implement AtomicPointer
    and the limited atomic load and store operations it needs.
    This resulted in much less code and fewer files - everything is
    contained in atomic_pointer.h.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@34 62dab493-f737-651d-591e-8d6aee1b9529
    A number of smaller fixes and performance improvements:
    
    - Implemented Get() directly instead of building on top of a full
      merging iterator stack.  This speeds up the "readrandom" benchmark
      by up to 15-30%.
    
    - Fixed an opensource compilation problem.
      Added --db=<name> flag to control where the database is placed.
    
    - Automatically compact a file when we have done enough
      overlapping seeks to that file.
    
    - Fixed a performance bug where we would read from at least one
      file in a level even if none of the files overlapped the key
      being read.
    
    - Makefile fix for Mac OSX installations that have XCode 4 without XCode 3.
    
    - Unified the two occurrences of binary search in a file-list
      into one routine.
    
    - Found and fixed a bug where we would unnecessarily search the
      last file when looking for a key larger than all data in the
      level.
    
    - A fix to avoid the need for trivial move compactions and
      therefore gets rid of two out of five syncs in "fillseq".
    
    - Removed the MANIFEST file write when switching to a new
      memtable/log-file for a 10-20% improvement on fill speed on ext4.
    
    - Adding a SNAPPY setting in the Makefile for folks who have
      Snappy installed. Snappy compresses values and speeds up writes.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@32 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Pull from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@14 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Remove static initializer; fix endian-ness detection; fix build on
    various platforms; improve android port speed.
    
    Avoid static initializer by using a new portability interface for
    thread-safe lazy initialization.  Custom ports will need to be
    extended to implement InitOnce/OnceType/LEVELDB_ONCE_INIT.
    
    Fix endian-ness detection (fixes Powerpc builds).
    
    Build related fixes:
    - Support platforms that have unversioned shared libraries.
    - Fix IOS build rules.
    
    Android improvements
    - Speed up atomic pointers
    - Share more code with port_posix.
    
    Do not spin in a tight loop attempting compactions if the file system
    is inaccessible (e.g., if kerberos tickets have expired or if it is out
    of space).
    Platform detection during build, plus compatibility patches for machines without <cstdatomic>.
    
    This revision adds two major changes:
    1. build_detect_platform which generates build_config.mk
       with platform-dependent flags for the build process
    2. /port/atomic_pointer.h with anAtomicPointerimplementation
       for platforms without <cstdatomic>
    
    Some of this code is loosely based on patches submitted to the
    LevelDB mailing list at https://groups.google.com/forum/#!forum/leveldb
    Tip of the hat to Dave Smith and Edouard A, who both sent patches.
    
    The presence of Snappy (http://code.google.com/p/snappy/) and
    cstdatomic are now both detected in the build_detect_platform
    script (1.) which gets executing during make.
    
    For (2.), instead of broadly importing atomicops_* from Chromium or
    the Google performance tools, we chose to just implement AtomicPointer
    and the limited atomic load and store operations it needs.
    This resulted in much less code and fewer files - everything is
    contained in atomic_pointer.h.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@34 62dab493-f737-651d-591e-8d6aee1b9529
    Update from upstream @21551990
    
    * Patch LevelDB to build for OSX and iOS
    * Fix race condition in memtable iterator deletion.
    * Other small fixes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@29 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Remove static initializer; fix endian-ness detection; fix build on
    various platforms; improve android port speed.
    
    Avoid static initializer by using a new portability interface for
    thread-safe lazy initialization.  Custom ports will need to be
    extended to implement InitOnce/OnceType/LEVELDB_ONCE_INIT.
    
    Fix endian-ness detection (fixes Powerpc builds).
    
    Build related fixes:
    - Support platforms that have unversioned shared libraries.
    - Fix IOS build rules.
    
    Android improvements
    - Speed up atomic pointers
    - Share more code with port_posix.
    
    Do not spin in a tight loop attempting compactions if the file system
    is inaccessible (e.g., if kerberos tickets have expired or if it is out
    of space).
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Speed up Snappy uncompression, new Logger interface.
    
    - Removed one copy of an uncompressed block contents changing
      the signature of Snappy_Uncompress() so it uncompresses into a
      flat array instead of a std::string.
    
      Speeds up readrandom ~10%.
    
    - Instead of a combination of Env/WritableFile, we now have a
      Logger interface that can be easily overridden applications
      that want to supply their own logging.
    
    - Separated out the gcc and Sun Studio parts of atomic_pointer.h
      so we can use 'asm', 'volatile' keywords for Sun Studio.
    
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@39 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Pull from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@14 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Oops, another file that didn't upload correctly.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@7 62dab493-f737-651d-591e-8d6aee1b9529
    Release LevelDB 1.17
    
    - Cleanup: delete unused IntSetToString
    
      It was added in http://cr/19491949 (and was referenced at the time).
      The last reference was removed in http://cr/19507363.
    
      This fixes warning/error with pre-release crosstoolv18:
        'std::string leveldb::{anonymous}::IntSetToString(const std::set<long unsigned int>&)' defined but not used [-Werror=unused-function]
    
    - Added arm64 and and armv7s to IOS build as suggested on leveldb mailing list.
    
    - Changed local variable type from int to size_t
    
      This eliminates compiler warning/error and resolves
      https://code.google.com/p/leveldb/issues/detail?id=140
    Release LevelDB 1.15
    
    - switched from mmap based writing to simpler stdio based writing. Has a
      minor impact (0.5 microseconds) on microbenchmarks for asynchronous
      writes. Synchronous writes speed up from 30ms to 10ms on linux/ext4.
      Should be much more reliable on diverse platforms.
    - compaction errors now immediately put the database into a read-only
      mode (until it is re-opened). As a downside, a disk going out of
      space and then space being created will require a re-open to recover
      from, whereas previously that would happen automatically. On the
      plus side, many corruption possibilities go away.
    - force the DB to enter an error-state so that all future writes fail
      when a synchronous log write succeeds but the sync fails.
    - repair now regenerates sstables that exhibit problems
    - fix issue 218 - Use native memory barriers on OSX
    - fix issue 212 - QNX build is broken
    - fix build on iOS with xcode 5
    - make tests compile and pass on windows
    LevelDB 1.13
    
    Fix issues 77, 87, 182, 190.
    
    Additionally, fix the bug described in
    https://groups.google.com/d/msg/leveldb/yL6h1mAOc20/vLU64RylIdMJ
    where a large contiguous keyspace of deleted data was not getting
    compacted.
    
    Also fix a bug where options.max_open_files was not getting clamped
    properly.
    Release leveldb 1.11
    
    Fixes issues
    161
    174
    178
    
    As well as the issue reported by edouarda14@gmail.com about
    MissingSSTFile unit test failing on windows.
    Fix corruption bug found and analyzed by dhruba@gmail.com
    
    https://groups.google.com/d/msg/leveldb/Kc9JxuIUu5A/9P0N9RL4ar8J
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    Remove static initializer; fix endian-ness detection; fix build on
    various platforms; improve android port speed.
    
    Avoid static initializer by using a new portability interface for
    thread-safe lazy initialization.  Custom ports will need to be
    extended to implement InitOnce/OnceType/LEVELDB_ONCE_INIT.
    
    Fix endian-ness detection (fixes Powerpc builds).
    
    Build related fixes:
    - Support platforms that have unversioned shared libraries.
    - Fix IOS build rules.
    
    Android improvements
    - Speed up atomic pointers
    - Share more code with port_posix.
    
    Do not spin in a tight loop attempting compactions if the file system
    is inaccessible (e.g., if kerberos tickets have expired or if it is out
    of space).
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    avoid very large compactions; fix build on Linux
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    A number of bugfixes:
    
    - Added DB::CompactRange() method.
    
      Changed manual compaction code so it breaks up compactions of
      big ranges into smaller compactions.
    
      Changed the code that pushes the output of memtable compactions
      to higher levels to obey the grandparent constraint: i.e., we
      must never have a single file in level L that overlaps too
      much data in level L+1 (to avoid very expensive L-1 compactions).
    
      Added code to pretty-print internal keys.
    
    - Fixed bug where we would not detect overlap with files in
      level-0 because we were incorrectly using binary search
      on an array of files with overlapping ranges.
    
      Added "leveldb.sstables" property that can be used to dump
      all of the sstables and ranges that make up the db state.
    
    - Removing post_write_snapshot support.  Email to leveldb mailing
      list brought up no users, just confusion from one person about
      what it meant.
    
    - Fixing static_cast char to unsigned on BIG_ENDIAN platforms.
    
      Fixes Issue 35 and Issue 36.
    
    - Comment clarification to address leveldb Issue 37.
    
    - Change license in posix_logger.h to match other files.
    
    - A build problem where uint32 was used instead of uint32_t.
    
    Sync with upstream @24408625
    Bugfixes: for Get(), don't hold mutex while writing log.
    
    - Fix bug in Get: when it triggers a compaction, it could sometimes
      mark the compaction with the wrong level (if there was a gap
      in the set of levels examined for the Get).
    
    - Do not hold mutex while writing to the log file or to the
      MANIFEST file.
    
      Added a new benchmark that runs a writer thread concurrently with
      reader threads.
    
      Percentiles
      ------------------------------
      micros/op: avg  median 99   99.9  99.99  99.999 max
      ------------------------------------------------------
      before:    42   38     110  225   32000  42000  48000
      after:     24   20     55   65    130    1100   7000
    
    - Fixed race in optimized Get.  It should have been using the
      pinned memtables, not the current memtables.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@50 62dab493-f737-651d-591e-8d6aee1b9529
    @23023120
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@47 62dab493-f737-651d-591e-8d6aee1b9529
    Speed up Snappy uncompression, new Logger interface.
    
    - Removed one copy of an uncompressed block contents changing
      the signature of Snappy_Uncompress() so it uncompresses into a
      flat array instead of a std::string.
    
      Speeds up readrandom ~10%.
    
    - Instead of a combination of Env/WritableFile, we now have a
      Logger interface that can be easily overridden applications
      that want to supply their own logging.
    
    - Separated out the gcc and Sun Studio parts of atomic_pointer.h
      so we can use 'asm', 'volatile' keywords for Sun Studio.
    
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@39 62dab493-f737-651d-591e-8d6aee1b9529
    Sun Studio support, and fix for test related memory fixes.
    
    - LevelDB patch for Sun Studio
      Based on a patch submitted by Theo Schlossnagle - thanks!
      This fixes Issue 17.
    
    - Fix a couple of test related memory leaks.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@38 62dab493-f737-651d-591e-8d6aee1b9529
    Small tweaks and bugfixes for Issue 18 and 19.
    
    Slight tweak to the no-overlap optimization: only push to
    level 2 to reduce the amount of wasted space when the same
    small key range is being repeatedly overwritten.
    
    Fix for Issue 18: Avoid failure on Windows by avoiding
    deletion of lock file until the end of DestroyDB().
    
    Fix for Issue 19: Disregard sequence numbers when checking for
    overlap in sstable ranges. This fixes issue 19: when writing
    the same key over and over again, we would generate a sequence
    of sstables that were never merged together since their sequence
    numbers were disjoint.
    
    Don't ignore map/unmap error checks.
    
    Miscellaneous fixes for small problems Sanjay found while diagnosing
    issue/9 and issue/16 (corruption_testr failures).
    - log::Reader reports the record type when it finds an unexpected type.
    - log::Reader no longer reports an error when it encounters an expected
      zero record regardless of the setting of the "checksum" flag.
    - Added a missing forward declaration.
    - Documented a side-effects of larger write buffer sizes
      (longer recovery time).
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@37 62dab493-f737-651d-591e-8d6aee1b9529
    A number of smaller fixes and performance improvements:
    
    - Implemented Get() directly instead of building on top of a full
      merging iterator stack.  This speeds up the "readrandom" benchmark
      by up to 15-30%.
    
    - Fixed an opensource compilation problem.
      Added --db=<name> flag to control where the database is placed.
    
    - Automatically compact a file when we have done enough
      overlapping seeks to that file.
    
    - Fixed a performance bug where we would read from at least one
      file in a level even if none of the files overlapped the key
      being read.
    
    - Makefile fix for Mac OSX installations that have XCode 4 without XCode 3.
    
    - Unified the two occurrences of binary search in a file-list
      into one routine.
    
    - Found and fixed a bug where we would unnecessarily search the
      last file when looking for a key larger than all data in the
      level.
    
    - A fix to avoid the need for trivial move compactions and
      therefore gets rid of two out of five syncs in "fillseq".
    
    - Removed the MANIFEST file write when switching to a new
      memtable/log-file for a 10-20% improvement on fill speed on ext4.
    
    - Adding a SNAPPY setting in the Makefile for folks who have
      Snappy installed. Snappy compresses values and speeds up writes.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@32 62dab493-f737-651d-591e-8d6aee1b9529
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Upstream changes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@16 62dab493-f737-651d-591e-8d6aee1b9529
    Pull from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@14 62dab493-f737-651d-591e-8d6aee1b9529
    More changes from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@12 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Clean up layering of storage/leveldb/...
    
    With these changes, this package should be properly cleaned up and not require
    any further changes.
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    added group commit; drastically speeds up mult-threaded synchronous write workloads
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Small tweaks and bugfixes for Issue 18 and 19.
    
    Slight tweak to the no-overlap optimization: only push to
    level 2 to reduce the amount of wasted space when the same
    small key range is being repeatedly overwritten.
    
    Fix for Issue 18: Avoid failure on Windows by avoiding
    deletion of lock file until the end of DestroyDB().
    
    Fix for Issue 19: Disregard sequence numbers when checking for
    overlap in sstable ranges. This fixes issue 19: when writing
    the same key over and over again, we would generate a sequence
    of sstables that were never merged together since their sequence
    numbers were disjoint.
    
    Don't ignore map/unmap error checks.
    
    Miscellaneous fixes for small problems Sanjay found while diagnosing
    issue/9 and issue/16 (corruption_testr failures).
    - log::Reader reports the record type when it finds an unexpected type.
    - log::Reader no longer reports an error when it encounters an expected
      zero record regardless of the setting of the "checksum" flag.
    - Added a missing forward declaration.
    - Documented a side-effects of larger write buffer sizes
      (longer recovery time).
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@37 62dab493-f737-651d-591e-8d6aee1b9529
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release LevelDB 1.14
    
    Fix issues 200, 201
    
    Also,
    * Fix link to bigtable paper in docs.
    * New sstables will have the file extension .ldb. .sst files will
    continue to be recognized.
    * When building for iOS, use xcrun to execute the compiler. This may
    affect issue 177.
    LevelDB 1.13
    
    Fix issues 77, 87, 182, 190.
    
    Additionally, fix the bug described in
    https://groups.google.com/d/msg/leveldb/yL6h1mAOc20/vLU64RylIdMJ
    where a large contiguous keyspace of deleted data was not getting
    compacted.
    
    Also fix a bug where options.max_open_files was not getting clamped
    properly.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Bugfixes for iterator and documentation.
    
    - Fix bug in Iterator::Prev where it would return the wrong key.
      Fixes issues 29 and 30.
    
    - Added a tweak to testharness to allow running just some tests.
    
    - Fixing two minor documentation errors based on issues 28 and 25.
    
    - Cleanup; fix namespaces of export-to-C code.
      Also fix one "const char*" vs "char*" mismatch.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@48 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Upstream changes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@16 62dab493-f737-651d-591e-8d6aee1b9529
    Upstream changes
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@15 62dab493-f737-651d-591e-8d6aee1b9529
    Pull from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@14 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Clean up layering of storage/leveldb/...
    
    With these changes, this package should be properly cleaned up and not require
    any further changes.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release LevelDB 1.14
    
    Fix issues 200, 201
    
    Also,
    * Fix link to bigtable paper in docs.
    * New sstables will have the file extension .ldb. .sst files will
    continue to be recognized.
    * When building for iOS, use xcrun to execute the compiler. This may
    affect issue 177.
    Release leveldb 1.11
    
    Fixes issues
    161
    174
    178
    
    As well as the issue reported by edouarda14@gmail.com about
    MissingSSTFile unit test failing on windows.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Pull from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@14 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    LevelDB 1.13
    
    Fix issues 77, 87, 182, 190.
    
    Additionally, fix the bug described in
    https://groups.google.com/d/msg/leveldb/yL6h1mAOc20/vLU64RylIdMJ
    where a large contiguous keyspace of deleted data was not getting
    compacted.
    
    Also fix a bug where options.max_open_files was not getting clamped
    properly.
    Release LevelDB 1.15
    
    - switched from mmap based writing to simpler stdio based writing. Has a
      minor impact (0.5 microseconds) on microbenchmarks for asynchronous
      writes. Synchronous writes speed up from 30ms to 10ms on linux/ext4.
      Should be much more reliable on diverse platforms.
    - compaction errors now immediately put the database into a read-only
      mode (until it is re-opened). As a downside, a disk going out of
      space and then space being created will require a re-open to recover
      from, whereas previously that would happen automatically. On the
      plus side, many corruption possibilities go away.
    - force the DB to enter an error-state so that all future writes fail
      when a synchronous log write succeeds but the sync fails.
    - repair now regenerates sstables that exhibit problems
    - fix issue 218 - Use native memory barriers on OSX
    - fix issue 212 - QNX build is broken
    - fix build on iOS with xcode 5
    - make tests compile and pass on windows
    LevelDB 1.13
    
    Fix issues 77, 87, 182, 190.
    
    Additionally, fix the bug described in
    https://groups.google.com/d/msg/leveldb/yL6h1mAOc20/vLU64RylIdMJ
    where a large contiguous keyspace of deleted data was not getting
    compacted.
    
    Also fix a bug where options.max_open_files was not getting clamped
    properly.
    Fix corruption bug found and analyzed by dhruba@gmail.com
    
    https://groups.google.com/d/msg/leveldb/Kc9JxuIUu5A/9P0N9RL4ar8J
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    Remove static initializer; fix endian-ness detection; fix build on
    various platforms; improve android port speed.
    
    Avoid static initializer by using a new portability interface for
    thread-safe lazy initialization.  Custom ports will need to be
    extended to implement InitOnce/OnceType/LEVELDB_ONCE_INIT.
    
    Fix endian-ness detection (fixes Powerpc builds).
    
    Build related fixes:
    - Support platforms that have unversioned shared libraries.
    - Fix IOS build rules.
    
    Android improvements
    - Speed up atomic pointers
    - Share more code with port_posix.
    
    Do not spin in a tight loop attempting compactions if the file system
    is inaccessible (e.g., if kerberos tickets have expired or if it is out
    of space).
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    A number of bugfixes:
    
    - Added DB::CompactRange() method.
    
      Changed manual compaction code so it breaks up compactions of
      big ranges into smaller compactions.
    
      Changed the code that pushes the output of memtable compactions
      to higher levels to obey the grandparent constraint: i.e., we
      must never have a single file in level L that overlaps too
      much data in level L+1 (to avoid very expensive L-1 compactions).
    
      Added code to pretty-print internal keys.
    
    - Fixed bug where we would not detect overlap with files in
      level-0 because we were incorrectly using binary search
      on an array of files with overlapping ranges.
    
      Added "leveldb.sstables" property that can be used to dump
      all of the sstables and ranges that make up the db state.
    
    - Removing post_write_snapshot support.  Email to leveldb mailing
      list brought up no users, just confusion from one person about
      what it meant.
    
    - Fixing static_cast char to unsigned on BIG_ENDIAN platforms.
    
      Fixes Issue 35 and Issue 36.
    
    - Comment clarification to address leveldb Issue 37.
    
    - Change license in posix_logger.h to match other files.
    
    - A build problem where uint32 was used instead of uint32_t.
    
    Sync with upstream @24408625
    Bugfixes: for Get(), don't hold mutex while writing log.
    
    - Fix bug in Get: when it triggers a compaction, it could sometimes
      mark the compaction with the wrong level (if there was a gap
      in the set of levels examined for the Get).
    
    - Do not hold mutex while writing to the log file or to the
      MANIFEST file.
    
      Added a new benchmark that runs a writer thread concurrently with
      reader threads.
    
      Percentiles
      ------------------------------
      micros/op: avg  median 99   99.9  99.99  99.999 max
      ------------------------------------------------------
      before:    42   38     110  225   32000  42000  48000
      after:     24   20     55   65    130    1100   7000
    
    - Fixed race in optimized Get.  It should have been using the
      pinned memtables, not the current memtables.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@50 62dab493-f737-651d-591e-8d6aee1b9529
    Small tweaks and bugfixes for Issue 18 and 19.
    
    Slight tweak to the no-overlap optimization: only push to
    level 2 to reduce the amount of wasted space when the same
    small key range is being repeatedly overwritten.
    
    Fix for Issue 18: Avoid failure on Windows by avoiding
    deletion of lock file until the end of DestroyDB().
    
    Fix for Issue 19: Disregard sequence numbers when checking for
    overlap in sstable ranges. This fixes issue 19: when writing
    the same key over and over again, we would generate a sequence
    of sstables that were never merged together since their sequence
    numbers were disjoint.
    
    Don't ignore map/unmap error checks.
    
    Miscellaneous fixes for small problems Sanjay found while diagnosing
    issue/9 and issue/16 (corruption_testr failures).
    - log::Reader reports the record type when it finds an unexpected type.
    - log::Reader no longer reports an error when it encounters an expected
      zero record regardless of the setting of the "checksum" flag.
    - Added a missing forward declaration.
    - Documented a side-effects of larger write buffer sizes
      (longer recovery time).
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@37 62dab493-f737-651d-591e-8d6aee1b9529
    A number of smaller fixes and performance improvements:
    
    - Implemented Get() directly instead of building on top of a full
      merging iterator stack.  This speeds up the "readrandom" benchmark
      by up to 15-30%.
    
    - Fixed an opensource compilation problem.
      Added --db=<name> flag to control where the database is placed.
    
    - Automatically compact a file when we have done enough
      overlapping seeks to that file.
    
    - Fixed a performance bug where we would read from at least one
      file in a level even if none of the files overlapped the key
      being read.
    
    - Makefile fix for Mac OSX installations that have XCode 4 without XCode 3.
    
    - Unified the two occurrences of binary search in a file-list
      into one routine.
    
    - Found and fixed a bug where we would unnecessarily search the
      last file when looking for a key larger than all data in the
      level.
    
    - A fix to avoid the need for trivial move compactions and
      therefore gets rid of two out of five syncs in "fillseq".
    
    - Removed the MANIFEST file write when switching to a new
      memtable/log-file for a 10-20% improvement on fill speed on ext4.
    
    - Adding a SNAPPY setting in the Makefile for folks who have
      Snappy installed. Snappy compresses values and speeds up writes.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@32 62dab493-f737-651d-591e-8d6aee1b9529
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Pull from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@14 62dab493-f737-651d-591e-8d6aee1b9529
    More changes from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@12 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release LevelDB 1.14
    
    Fix issues 200, 201
    
    Also,
    * Fix link to bigtable paper in docs.
    * New sstables will have the file extension .ldb. .sst files will
    continue to be recognized.
    * When building for iOS, use xcrun to execute the compiler. This may
    affect issue 177.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Sun Studio support, and fix for test related memory fixes.
    
    - LevelDB patch for Sun Studio
      Based on a patch submitted by Theo Schlossnagle - thanks!
      This fixes Issue 17.
    
    - Fix a couple of test related memory leaks.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@38 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    A number of smaller fixes and performance improvements:
    
    - Implemented Get() directly instead of building on top of a full
      merging iterator stack.  This speeds up the "readrandom" benchmark
      by up to 15-30%.
    
    - Fixed an opensource compilation problem.
      Added --db=<name> flag to control where the database is placed.
    
    - Automatically compact a file when we have done enough
      overlapping seeks to that file.
    
    - Fixed a performance bug where we would read from at least one
      file in a level even if none of the files overlapped the key
      being read.
    
    - Makefile fix for Mac OSX installations that have XCode 4 without XCode 3.
    
    - Unified the two occurrences of binary search in a file-list
      into one routine.
    
    - Found and fixed a bug where we would unnecessarily search the
      last file when looking for a key larger than all data in the
      level.
    
    - A fix to avoid the need for trivial move compactions and
      therefore gets rid of two out of five syncs in "fillseq".
    
    - Removed the MANIFEST file write when switching to a new
      memtable/log-file for a 10-20% improvement on fill speed on ext4.
    
    - Adding a SNAPPY setting in the Makefile for folks who have
      Snappy installed. Snappy compresses values and speeds up writes.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@32 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release LevelDB 1.15
    
    - switched from mmap based writing to simpler stdio based writing. Has a
      minor impact (0.5 microseconds) on microbenchmarks for asynchronous
      writes. Synchronous writes speed up from 30ms to 10ms on linux/ext4.
      Should be much more reliable on diverse platforms.
    - compaction errors now immediately put the database into a read-only
      mode (until it is re-opened). As a downside, a disk going out of
      space and then space being created will require a re-open to recover
      from, whereas previously that would happen automatically. On the
      plus side, many corruption possibilities go away.
    - force the DB to enter an error-state so that all future writes fail
      when a synchronous log write succeeds but the sync fails.
    - repair now regenerates sstables that exhibit problems
    - fix issue 218 - Use native memory barriers on OSX
    - fix issue 212 - QNX build is broken
    - fix build on iOS with xcode 5
    - make tests compile and pass on windows
    LevelDB 1.13
    
    Fix issues 77, 87, 182, 190.
    
    Additionally, fix the bug described in
    https://groups.google.com/d/msg/leveldb/yL6h1mAOc20/vLU64RylIdMJ
    where a large contiguous keyspace of deleted data was not getting
    compacted.
    
    Also fix a bug where options.max_open_files was not getting clamped
    properly.
    Release leveldb 1.11
    
    Fixes issues
    161
    174
    178
    
    As well as the issue reported by edouarda14@gmail.com about
    MissingSSTFile unit test failing on windows.
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    Remove static initializer; fix endian-ness detection; fix build on
    various platforms; improve android port speed.
    
    Avoid static initializer by using a new portability interface for
    thread-safe lazy initialization.  Custom ports will need to be
    extended to implement InitOnce/OnceType/LEVELDB_ONCE_INIT.
    
    Fix endian-ness detection (fixes Powerpc builds).
    
    Build related fixes:
    - Support platforms that have unversioned shared libraries.
    - Fix IOS build rules.
    
    Android improvements
    - Speed up atomic pointers
    - Share more code with port_posix.
    
    Do not spin in a tight loop attempting compactions if the file system
    is inaccessible (e.g., if kerberos tickets have expired or if it is out
    of space).
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    added group commit; drastically speeds up mult-threaded synchronous write workloads
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    A number of bugfixes:
    
    - Added DB::CompactRange() method.
    
      Changed manual compaction code so it breaks up compactions of
      big ranges into smaller compactions.
    
      Changed the code that pushes the output of memtable compactions
      to higher levels to obey the grandparent constraint: i.e., we
      must never have a single file in level L that overlaps too
      much data in level L+1 (to avoid very expensive L-1 compactions).
    
      Added code to pretty-print internal keys.
    
    - Fixed bug where we would not detect overlap with files in
      level-0 because we were incorrectly using binary search
      on an array of files with overlapping ranges.
    
      Added "leveldb.sstables" property that can be used to dump
      all of the sstables and ranges that make up the db state.
    
    - Removing post_write_snapshot support.  Email to leveldb mailing
      list brought up no users, just confusion from one person about
      what it meant.
    
    - Fixing static_cast char to unsigned on BIG_ENDIAN platforms.
    
      Fixes Issue 35 and Issue 36.
    
    - Comment clarification to address leveldb Issue 37.
    
    - Change license in posix_logger.h to match other files.
    
    - A build problem where uint32 was used instead of uint32_t.
    
    Sync with upstream @24408625
    Bugfixes: for Get(), don't hold mutex while writing log.
    
    - Fix bug in Get: when it triggers a compaction, it could sometimes
      mark the compaction with the wrong level (if there was a gap
      in the set of levels examined for the Get).
    
    - Do not hold mutex while writing to the log file or to the
      MANIFEST file.
    
      Added a new benchmark that runs a writer thread concurrently with
      reader threads.
    
      Percentiles
      ------------------------------
      micros/op: avg  median 99   99.9  99.99  99.999 max
      ------------------------------------------------------
      before:    42   38     110  225   32000  42000  48000
      after:     24   20     55   65    130    1100   7000
    
    - Fixed race in optimized Get.  It should have been using the
      pinned memtables, not the current memtables.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@50 62dab493-f737-651d-591e-8d6aee1b9529
    A number of smaller fixes and performance improvements:
    
    - Implemented Get() directly instead of building on top of a full
      merging iterator stack.  This speeds up the "readrandom" benchmark
      by up to 15-30%.
    
    - Fixed an opensource compilation problem.
      Added --db=<name> flag to control where the database is placed.
    
    - Automatically compact a file when we have done enough
      overlapping seeks to that file.
    
    - Fixed a performance bug where we would read from at least one
      file in a level even if none of the files overlapped the key
      being read.
    
    - Makefile fix for Mac OSX installations that have XCode 4 without XCode 3.
    
    - Unified the two occurrences of binary search in a file-list
      into one routine.
    
    - Found and fixed a bug where we would unnecessarily search the
      last file when looking for a key larger than all data in the
      level.
    
    - A fix to avoid the need for trivial move compactions and
      therefore gets rid of two out of five syncs in "fillseq".
    
    - Removed the MANIFEST file write when switching to a new
      memtable/log-file for a 10-20% improvement on fill speed on ext4.
    
    - Adding a SNAPPY setting in the Makefile for folks who have
      Snappy installed. Snappy compresses values and speeds up writes.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@32 62dab493-f737-651d-591e-8d6aee1b9529
    sync with upstream @21706995
    
    Fixed race condition reported by Dave Smit (dizzyd@dizzyd,com)
    on the leveldb mailing list.  We were not signalling
    waiters after a trivial move from level-0.  The result was
    that in some cases (hard to reproduce), a write would get
    stuck forever waiting for the number of level-0 files to drop
    below its hard limit.
    
    The new code is simpler: there is just one condition variable
    instead of two, and the condition variable is signalled after
    every piece of background work finishes.  Also, all compaction
    work (including for manual compactions) is done in the
    background thread, and therefore we can remove the
    "compacting_" variable.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@31 62dab493-f737-651d-591e-8d6aee1b9529
    Update from upstream @21551990
    
    * Patch LevelDB to build for OSX and iOS
    * Fix race condition in memtable iterator deletion.
    * Other small fixes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@29 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Pull from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@14 62dab493-f737-651d-591e-8d6aee1b9529
    More changes from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@12 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release leveldb 1.10
    
    Fixes issues
    147 - thanks feniksgordonfreeman
    153
    156
    166
    
    Additionally,
    * Remove calls to exit(1).
    * Fix unused-variable warnings from clang.
    * Fix possible overflow error related to num_restart value >= (2^32/4).
    * Add leveldbutil to .gitignore.
    * Add better log messages when Write is stalled on a compaction.
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    Pass system's CFLAGS, remove exit time destructor, sstable bug fix.
    
    - Pass system's values of CFLAGS,LDFLAGS.
      Don't override OPT if it's already set.
      Original patch by Alessio Treglia <alessio@debian.org>:
      http://code.google.com/p/leveldb/issues/detail?id=27#c6
    
    - Remove 1 exit time destructor from leveldb.
      See http://crbug.com/101600
    
    - Fix problem where sstable building code would pass an
      internal key to the user comparator.
    
    (Sync with uptream at 25436817.)
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    A number of bugfixes:
    
    - Added DB::CompactRange() method.
    
      Changed manual compaction code so it breaks up compactions of
      big ranges into smaller compactions.
    
      Changed the code that pushes the output of memtable compactions
      to higher levels to obey the grandparent constraint: i.e., we
      must never have a single file in level L that overlaps too
      much data in level L+1 (to avoid very expensive L-1 compactions).
    
      Added code to pretty-print internal keys.
    
    - Fixed bug where we would not detect overlap with files in
      level-0 because we were incorrectly using binary search
      on an array of files with overlapping ranges.
    
      Added "leveldb.sstables" property that can be used to dump
      all of the sstables and ranges that make up the db state.
    
    - Removing post_write_snapshot support.  Email to leveldb mailing
      list brought up no users, just confusion from one person about
      what it meant.
    
    - Fixing static_cast char to unsigned on BIG_ENDIAN platforms.
    
      Fixes Issue 35 and Issue 36.
    
    - Comment clarification to address leveldb Issue 37.
    
    - Change license in posix_logger.h to match other files.
    
    - A build problem where uint32 was used instead of uint32_t.
    
    Sync with upstream @24408625
    A number of smaller fixes and performance improvements:
    
    - Implemented Get() directly instead of building on top of a full
      merging iterator stack.  This speeds up the "readrandom" benchmark
      by up to 15-30%.
    
    - Fixed an opensource compilation problem.
      Added --db=<name> flag to control where the database is placed.
    
    - Automatically compact a file when we have done enough
      overlapping seeks to that file.
    
    - Fixed a performance bug where we would read from at least one
      file in a level even if none of the files overlapped the key
      being read.
    
    - Makefile fix for Mac OSX installations that have XCode 4 without XCode 3.
    
    - Unified the two occurrences of binary search in a file-list
      into one routine.
    
    - Found and fixed a bug where we would unnecessarily search the
      last file when looking for a key larger than all data in the
      level.
    
    - A fix to avoid the need for trivial move compactions and
      therefore gets rid of two out of five syncs in "fillseq".
    
    - Removed the MANIFEST file write when switching to a new
      memtable/log-file for a 10-20% improvement on fill speed on ext4.
    
    - Adding a SNAPPY setting in the Makefile for folks who have
      Snappy installed. Snappy compresses values and speeds up writes.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@32 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Pull from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@14 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    added utility to dump leveldb files
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Release LevelDB 1.15
    
    - switched from mmap based writing to simpler stdio based writing. Has a
      minor impact (0.5 microseconds) on microbenchmarks for asynchronous
      writes. Synchronous writes speed up from 30ms to 10ms on linux/ext4.
      Should be much more reliable on diverse platforms.
    - compaction errors now immediately put the database into a read-only
      mode (until it is re-opened). As a downside, a disk going out of
      space and then space being created will require a re-open to recover
      from, whereas previously that would happen automatically. On the
      plus side, many corruption possibilities go away.
    - force the DB to enter an error-state so that all future writes fail
      when a synchronous log write succeeds but the sync fails.
    - repair now regenerates sstables that exhibit problems
    - fix issue 218 - Use native memory barriers on OSX
    - fix issue 212 - QNX build is broken
    - fix build on iOS with xcode 5
    - make tests compile and pass on windows
    LevelDB 1.13
    
    Fix issues 77, 87, 182, 190.
    
    Additionally, fix the bug described in
    https://groups.google.com/d/msg/leveldb/yL6h1mAOc20/vLU64RylIdMJ
    where a large contiguous keyspace of deleted data was not getting
    compacted.
    
    Also fix a bug where options.max_open_files was not getting clamped
    properly.
    Release leveldb 1.11
    
    Fixes issues
    161
    174
    178
    
    As well as the issue reported by edouarda14@gmail.com about
    MissingSSTFile unit test failing on windows.
    Release leveldb 1.10
    
    Fixes issues
    147 - thanks feniksgordonfreeman
    153
    156
    166
    
    Additionally,
    * Remove calls to exit(1).
    * Fix unused-variable warnings from clang.
    * Fix possible overflow error related to num_restart value >= (2^32/4).
    * Add leveldbutil to .gitignore.
    * Add better log messages when Write is stalled on a compaction.
    Make DB::Open fail if sst files are missing.
    
    Also, cleanup for Clang's -Wimplicit-fallthrough warning.
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    Remove static initializer; fix endian-ness detection; fix build on
    various platforms; improve android port speed.
    
    Avoid static initializer by using a new portability interface for
    thread-safe lazy initialization.  Custom ports will need to be
    extended to implement InitOnce/OnceType/LEVELDB_ONCE_INIT.
    
    Fix endian-ness detection (fixes Powerpc builds).
    
    Build related fixes:
    - Support platforms that have unversioned shared libraries.
    - Fix IOS build rules.
    
    Android improvements
    - Speed up atomic pointers
    - Share more code with port_posix.
    
    Do not spin in a tight loop attempting compactions if the file system
    is inaccessible (e.g., if kerberos tickets have expired or if it is out
    of space).
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    fix LOCK file deletion to prevent crash on windows
    added group commit; drastically speeds up mult-threaded synchronous write workloads
    fixed issues 66 (leaking files on disk error)  and 68 (no sync of CURRENT file)
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    A number of bugfixes:
    
    - Added DB::CompactRange() method.
    
      Changed manual compaction code so it breaks up compactions of
      big ranges into smaller compactions.
    
      Changed the code that pushes the output of memtable compactions
      to higher levels to obey the grandparent constraint: i.e., we
      must never have a single file in level L that overlaps too
      much data in level L+1 (to avoid very expensive L-1 compactions).
    
      Added code to pretty-print internal keys.
    
    - Fixed bug where we would not detect overlap with files in
      level-0 because we were incorrectly using binary search
      on an array of files with overlapping ranges.
    
      Added "leveldb.sstables" property that can be used to dump
      all of the sstables and ranges that make up the db state.
    
    - Removing post_write_snapshot support.  Email to leveldb mailing
      list brought up no users, just confusion from one person about
      what it meant.
    
    - Fixing static_cast char to unsigned on BIG_ENDIAN platforms.
    
      Fixes Issue 35 and Issue 36.
    
    - Comment clarification to address leveldb Issue 37.
    
    - Change license in posix_logger.h to match other files.
    
    - A build problem where uint32 was used instead of uint32_t.
    
    Sync with upstream @24408625
    Bugfixes: for Get(), don't hold mutex while writing log.
    
    - Fix bug in Get: when it triggers a compaction, it could sometimes
      mark the compaction with the wrong level (if there was a gap
      in the set of levels examined for the Get).
    
    - Do not hold mutex while writing to the log file or to the
      MANIFEST file.
    
      Added a new benchmark that runs a writer thread concurrently with
      reader threads.
    
      Percentiles
      ------------------------------
      micros/op: avg  median 99   99.9  99.99  99.999 max
      ------------------------------------------------------
      before:    42   38     110  225   32000  42000  48000
      after:     24   20     55   65    130    1100   7000
    
    - Fixed race in optimized Get.  It should have been using the
      pinned memtables, not the current memtables.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@50 62dab493-f737-651d-591e-8d6aee1b9529
    Bugfix for issue 33; reduce lock contention in Get(), parallel benchmarks.
    
    - Fix for issue 33 (non-null-terminated result from
      leveldb_property_value())
    
    - Support for running multiple instances of a benchmark in parallel.
    
    - Reduce lock contention on Get():
      (1) Do not hold the lock while searching memtables.
      (2) Shard block and table caches 16-ways.
    
      Benchmark for evaluating this change:
      $ db_bench --benchmarks=fillseq1,readrandom --threads=$n
      (fillseq1 is a small hack to make sure fillseq runs once regardless
      of number of threads specified on the command line).
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@49 62dab493-f737-651d-591e-8d6aee1b9529
    @23023120
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@47 62dab493-f737-651d-591e-8d6aee1b9529
    Speed up Snappy uncompression, new Logger interface.
    
    - Removed one copy of an uncompressed block contents changing
      the signature of Snappy_Uncompress() so it uncompresses into a
      flat array instead of a std::string.
    
      Speeds up readrandom ~10%.
    
    - Instead of a combination of Env/WritableFile, we now have a
      Logger interface that can be easily overridden applications
      that want to supply their own logging.
    
    - Separated out the gcc and Sun Studio parts of atomic_pointer.h
      so we can use 'asm', 'volatile' keywords for Sun Studio.
    
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@39 62dab493-f737-651d-591e-8d6aee1b9529
    Small tweaks and bugfixes for Issue 18 and 19.
    
    Slight tweak to the no-overlap optimization: only push to
    level 2 to reduce the amount of wasted space when the same
    small key range is being repeatedly overwritten.
    
    Fix for Issue 18: Avoid failure on Windows by avoiding
    deletion of lock file until the end of DestroyDB().
    
    Fix for Issue 19: Disregard sequence numbers when checking for
    overlap in sstable ranges. This fixes issue 19: when writing
    the same key over and over again, we would generate a sequence
    of sstables that were never merged together since their sequence
    numbers were disjoint.
    
    Don't ignore map/unmap error checks.
    
    Miscellaneous fixes for small problems Sanjay found while diagnosing
    issue/9 and issue/16 (corruption_testr failures).
    - log::Reader reports the record type when it finds an unexpected type.
    - log::Reader no longer reports an error when it encounters an expected
      zero record regardless of the setting of the "checksum" flag.
    - Added a missing forward declaration.
    - Documented a side-effects of larger write buffer sizes
      (longer recovery time).
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@37 62dab493-f737-651d-591e-8d6aee1b9529
    A number of smaller fixes and performance improvements:
    
    - Implemented Get() directly instead of building on top of a full
      merging iterator stack.  This speeds up the "readrandom" benchmark
      by up to 15-30%.
    
    - Fixed an opensource compilation problem.
      Added --db=<name> flag to control where the database is placed.
    
    - Automatically compact a file when we have done enough
      overlapping seeks to that file.
    
    - Fixed a performance bug where we would read from at least one
      file in a level even if none of the files overlapped the key
      being read.
    
    - Makefile fix for Mac OSX installations that have XCode 4 without XCode 3.
    
    - Unified the two occurrences of binary search in a file-list
      into one routine.
    
    - Found and fixed a bug where we would unnecessarily search the
      last file when looking for a key larger than all data in the
      level.
    
    - A fix to avoid the need for trivial move compactions and
      therefore gets rid of two out of five syncs in "fillseq".
    
    - Removed the MANIFEST file write when switching to a new
      memtable/log-file for a 10-20% improvement on fill speed on ext4.
    
    - Adding a SNAPPY setting in the Makefile for folks who have
      Snappy installed. Snappy compresses values and speeds up writes.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@32 62dab493-f737-651d-591e-8d6aee1b9529
    sync with upstream @21706995
    
    Fixed race condition reported by Dave Smit (dizzyd@dizzyd,com)
    on the leveldb mailing list.  We were not signalling
    waiters after a trivial move from level-0.  The result was
    that in some cases (hard to reproduce), a write would get
    stuck forever waiting for the number of level-0 files to drop
    below its hard limit.
    
    The new code is simpler: there is just one condition variable
    instead of two, and the condition variable is signalled after
    every piece of background work finishes.  Also, all compaction
    work (including for manual compactions) is done in the
    background thread, and therefore we can remove the
    "compacting_" variable.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@31 62dab493-f737-651d-591e-8d6aee1b9529
    Update from upstream @21551990
    
    * Patch LevelDB to build for OSX and iOS
    * Fix race condition in memtable iterator deletion.
    * Other small fixes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@29 62dab493-f737-651d-591e-8d6aee1b9529
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Upstream changes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@16 62dab493-f737-651d-591e-8d6aee1b9529
    Pull from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@14 62dab493-f737-651d-591e-8d6aee1b9529
    More changes from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@12 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    A number of smaller fixes and performance improvements:
    
    - Implemented Get() directly instead of building on top of a full
      merging iterator stack.  This speeds up the "readrandom" benchmark
      by up to 15-30%.
    
    - Fixed an opensource compilation problem.
      Added --db=<name> flag to control where the database is placed.
    
    - Automatically compact a file when we have done enough
      overlapping seeks to that file.
    
    - Fixed a performance bug where we would read from at least one
      file in a level even if none of the files overlapped the key
      being read.
    
    - Makefile fix for Mac OSX installations that have XCode 4 without XCode 3.
    
    - Unified the two occurrences of binary search in a file-list
      into one routine.
    
    - Found and fixed a bug where we would unnecessarily search the
      last file when looking for a key larger than all data in the
      level.
    
    - A fix to avoid the need for trivial move compactions and
      therefore gets rid of two out of five syncs in "fillseq".
    
    - Removed the MANIFEST file write when switching to a new
      memtable/log-file for a 10-20% improvement on fill speed on ext4.
    
    - Adding a SNAPPY setting in the Makefile for folks who have
      Snappy installed. Snappy compresses values and speeds up writes.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@32 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Upstream changes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@16 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Upstream changes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@16 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Small fixes.
    
    Details:
    * Fix shared library building.
    * Reorganize linking commands so flags like --as-needed can be passed.
    * C binding exports version numbers.
    * Fix small typos in documention.
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    Bugfix for issue 33; reduce lock contention in Get(), parallel benchmarks.
    
    - Fix for issue 33 (non-null-terminated result from
      leveldb_property_value())
    
    - Support for running multiple instances of a benchmark in parallel.
    
    - Reduce lock contention on Get():
      (1) Do not hold the lock while searching memtables.
      (2) Shard block and table caches 16-ways.
    
      Benchmark for evaluating this change:
      $ db_bench --benchmarks=fillseq1,readrandom --threads=$n
      (fillseq1 is a small hack to make sure fillseq runs once regardless
      of number of threads specified on the command line).
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@49 62dab493-f737-651d-591e-8d6aee1b9529
    Bugfixes for iterator and documentation.
    
    - Fix bug in Iterator::Prev where it would return the wrong key.
      Fixes issues 29 and 30.
    
    - Added a tweak to testharness to allow running just some tests.
    
    - Fixing two minor documentation errors based on issues 28 and 25.
    
    - Cleanup; fix namespaces of export-to-C code.
      Also fix one "const char*" vs "char*" mismatch.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@48 62dab493-f737-651d-591e-8d6aee1b9529
    C binding for leveldb, better readseq benchmark for SQLite.
    
    - Added a C binding for LevelDB.
      May be useful as a stable ABI that can be used by
      programs that keep leveldb in a shared library,
      or for JNI API.
    
    - Replaced SQLite's readseq benchmark to a more efficient version.
      SQLite readseq speeds increased by about a factor of 2x
      from the previous version. Also updated benchmark page to
      reflect readseq speed up.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@46 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Sun Studio support, and fix for test related memory fixes.
    
    - LevelDB patch for Sun Studio
      Based on a patch submitted by Theo Schlossnagle - thanks!
      This fixes Issue 17.
    
    - Fix a couple of test related memory leaks.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@38 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    added group commit; drastically speeds up mult-threaded synchronous write workloads
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Added a new fault injection test.
    
    This test is intended to ensure leveldb properly detects and recovers from
    faults - specifically unwritten file data lost as a result of a system reset.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Upstream changes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@16 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    LevelDB 1.13
    
    Fix issues 77, 87, 182, 190.
    
    Additionally, fix the bug described in
    https://groups.google.com/d/msg/leveldb/yL6h1mAOc20/vLU64RylIdMJ
    where a large contiguous keyspace of deleted data was not getting
    compacted.
    
    Also fix a bug where options.max_open_files was not getting clamped
    properly.
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    A number of bugfixes:
    
    - Added DB::CompactRange() method.
    
      Changed manual compaction code so it breaks up compactions of
      big ranges into smaller compactions.
    
      Changed the code that pushes the output of memtable compactions
      to higher levels to obey the grandparent constraint: i.e., we
      must never have a single file in level L that overlaps too
      much data in level L+1 (to avoid very expensive L-1 compactions).
    
      Added code to pretty-print internal keys.
    
    - Fixed bug where we would not detect overlap with files in
      level-0 because we were incorrectly using binary search
      on an array of files with overlapping ranges.
    
      Added "leveldb.sstables" property that can be used to dump
      all of the sstables and ranges that make up the db state.
    
    - Removing post_write_snapshot support.  Email to leveldb mailing
      list brought up no users, just confusion from one person about
      what it meant.
    
    - Fixing static_cast char to unsigned on BIG_ENDIAN platforms.
    
      Fixes Issue 35 and Issue 36.
    
    - Comment clarification to address leveldb Issue 37.
    
    - Change license in posix_logger.h to match other files.
    
    - A build problem where uint32 was used instead of uint32_t.
    
    Sync with upstream @24408625
    Sun Studio support, and fix for test related memory fixes.
    
    - LevelDB patch for Sun Studio
      Based on a patch submitted by Theo Schlossnagle - thanks!
      This fixes Issue 17.
    
    - Fix a couple of test related memory leaks.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@38 62dab493-f737-651d-591e-8d6aee1b9529
    Small tweaks and bugfixes for Issue 18 and 19.
    
    Slight tweak to the no-overlap optimization: only push to
    level 2 to reduce the amount of wasted space when the same
    small key range is being repeatedly overwritten.
    
    Fix for Issue 18: Avoid failure on Windows by avoiding
    deletion of lock file until the end of DestroyDB().
    
    Fix for Issue 19: Disregard sequence numbers when checking for
    overlap in sstable ranges. This fixes issue 19: when writing
    the same key over and over again, we would generate a sequence
    of sstables that were never merged together since their sequence
    numbers were disjoint.
    
    Don't ignore map/unmap error checks.
    
    Miscellaneous fixes for small problems Sanjay found while diagnosing
    issue/9 and issue/16 (corruption_testr failures).
    - log::Reader reports the record type when it finds an unexpected type.
    - log::Reader no longer reports an error when it encounters an expected
      zero record regardless of the setting of the "checksum" flag.
    - Added a missing forward declaration.
    - Documented a side-effects of larger write buffer sizes
      (longer recovery time).
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@37 62dab493-f737-651d-591e-8d6aee1b9529
    A number of smaller fixes and performance improvements:
    
    - Implemented Get() directly instead of building on top of a full
      merging iterator stack.  This speeds up the "readrandom" benchmark
      by up to 15-30%.
    
    - Fixed an opensource compilation problem.
      Added --db=<name> flag to control where the database is placed.
    
    - Automatically compact a file when we have done enough
      overlapping seeks to that file.
    
    - Fixed a performance bug where we would read from at least one
      file in a level even if none of the files overlapped the key
      being read.
    
    - Makefile fix for Mac OSX installations that have XCode 4 without XCode 3.
    
    - Unified the two occurrences of binary search in a file-list
      into one routine.
    
    - Found and fixed a bug where we would unnecessarily search the
      last file when looking for a key larger than all data in the
      level.
    
    - A fix to avoid the need for trivial move compactions and
      therefore gets rid of two out of five syncs in "fillseq".
    
    - Removed the MANIFEST file write when switching to a new
      memtable/log-file for a 10-20% improvement on fill speed on ext4.
    
    - Adding a SNAPPY setting in the Makefile for folks who have
      Snappy installed. Snappy compresses values and speeds up writes.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@32 62dab493-f737-651d-591e-8d6aee1b9529
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    LevelDB 1.13
    
    Fix issues 77, 87, 182, 190.
    
    Additionally, fix the bug described in
    https://groups.google.com/d/msg/leveldb/yL6h1mAOc20/vLU64RylIdMJ
    where a large contiguous keyspace of deleted data was not getting
    compacted.
    
    Also fix a bug where options.max_open_files was not getting clamped
    properly.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    A number of smaller fixes and performance improvements:
    
    - Implemented Get() directly instead of building on top of a full
      merging iterator stack.  This speeds up the "readrandom" benchmark
      by up to 15-30%.
    
    - Fixed an opensource compilation problem.
      Added --db=<name> flag to control where the database is placed.
    
    - Automatically compact a file when we have done enough
      overlapping seeks to that file.
    
    - Fixed a performance bug where we would read from at least one
      file in a level even if none of the files overlapped the key
      being read.
    
    - Makefile fix for Mac OSX installations that have XCode 4 without XCode 3.
    
    - Unified the two occurrences of binary search in a file-list
      into one routine.
    
    - Found and fixed a bug where we would unnecessarily search the
      last file when looking for a key larger than all data in the
      level.
    
    - A fix to avoid the need for trivial move compactions and
      therefore gets rid of two out of five syncs in "fillseq".
    
    - Removed the MANIFEST file write when switching to a new
      memtable/log-file for a 10-20% improvement on fill speed on ext4.
    
    - Adding a SNAPPY setting in the Makefile for folks who have
      Snappy installed. Snappy compresses values and speeds up writes.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@32 62dab493-f737-651d-591e-8d6aee1b9529
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Small fixes.
    
    Details:
    * Fix shared library building.
    * Reorganize linking commands so flags like --as-needed can be passed.
    * C binding exports version numbers.
    * Fix small typos in documention.
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    Remove static initializer; fix endian-ness detection; fix build on
    various platforms; improve android port speed.
    
    Avoid static initializer by using a new portability interface for
    thread-safe lazy initialization.  Custom ports will need to be
    extended to implement InitOnce/OnceType/LEVELDB_ONCE_INIT.
    
    Fix endian-ness detection (fixes Powerpc builds).
    
    Build related fixes:
    - Support platforms that have unversioned shared libraries.
    - Fix IOS build rules.
    
    Android improvements
    - Speed up atomic pointers
    - Share more code with port_posix.
    
    Do not spin in a tight loop attempting compactions if the file system
    is inaccessible (e.g., if kerberos tickets have expired or if it is out
    of space).
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    C binding for leveldb, better readseq benchmark for SQLite.
    
    - Added a C binding for LevelDB.
      May be useful as a stable ABI that can be used by
      programs that keep leveldb in a shared library,
      or for JNI API.
    
    - Replaced SQLite's readseq benchmark to a more efficient version.
      SQLite readseq speeds increased by about a factor of 2x
      from the previous version. Also updated benchmark page to
      reflect readseq speed up.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@46 62dab493-f737-651d-591e-8d6aee1b9529
    Release LevelDB 1.14
    
    Fix issues 200, 201
    
    Also,
    * Fix link to bigtable paper in docs.
    * New sstables will have the file extension .ldb. .sst files will
    continue to be recognized.
    * When building for iOS, use xcrun to execute the compiler. This may
    affect issue 177.
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Upstream changes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@16 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Move header guard below copyright banner.
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    build shared libraries; updated version to 1.3; add Status accessors
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release LevelDB 1.14
    
    Fix issues 200, 201
    
    Also,
    * Fix link to bigtable paper in docs.
    * New sstables will have the file extension .ldb. .sst files will
    continue to be recognized.
    * When building for iOS, use xcrun to execute the compiler. This may
    affect issue 177.
    fixed issues 66 (leaking files on disk error)  and 68 (no sync of CURRENT file)
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    A number of bugfixes:
    
    - Added DB::CompactRange() method.
    
      Changed manual compaction code so it breaks up compactions of
      big ranges into smaller compactions.
    
      Changed the code that pushes the output of memtable compactions
      to higher levels to obey the grandparent constraint: i.e., we
      must never have a single file in level L that overlaps too
      much data in level L+1 (to avoid very expensive L-1 compactions).
    
      Added code to pretty-print internal keys.
    
    - Fixed bug where we would not detect overlap with files in
      level-0 because we were incorrectly using binary search
      on an array of files with overlapping ranges.
    
      Added "leveldb.sstables" property that can be used to dump
      all of the sstables and ranges that make up the db state.
    
    - Removing post_write_snapshot support.  Email to leveldb mailing
      list brought up no users, just confusion from one person about
      what it meant.
    
    - Fixing static_cast char to unsigned on BIG_ENDIAN platforms.
    
      Fixes Issue 35 and Issue 36.
    
    - Comment clarification to address leveldb Issue 37.
    
    - Change license in posix_logger.h to match other files.
    
    - A build problem where uint32 was used instead of uint32_t.
    
    Sync with upstream @24408625
    Small tweaks and bugfixes for Issue 18 and 19.
    
    Slight tweak to the no-overlap optimization: only push to
    level 2 to reduce the amount of wasted space when the same
    small key range is being repeatedly overwritten.
    
    Fix for Issue 18: Avoid failure on Windows by avoiding
    deletion of lock file until the end of DestroyDB().
    
    Fix for Issue 19: Disregard sequence numbers when checking for
    overlap in sstable ranges. This fixes issue 19: when writing
    the same key over and over again, we would generate a sequence
    of sstables that were never merged together since their sequence
    numbers were disjoint.
    
    Don't ignore map/unmap error checks.
    
    Miscellaneous fixes for small problems Sanjay found while diagnosing
    issue/9 and issue/16 (corruption_testr failures).
    - log::Reader reports the record type when it finds an unexpected type.
    - log::Reader no longer reports an error when it encounters an expected
      zero record regardless of the setting of the "checksum" flag.
    - Added a missing forward declaration.
    - Documented a side-effects of larger write buffer sizes
      (longer recovery time).
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@37 62dab493-f737-651d-591e-8d6aee1b9529
    Fixing issue 11: version_set_test.cc was missing
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@33 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Release LevelDB 1.16
    
    - Make Log::Reader not report a corruption when the last record in a
      log file is truncated.
    - Fix issue 224: variable created but not utilized.
    - Remove comment that referenced a removed feature.
    Release LevelDB 1.15
    
    - switched from mmap based writing to simpler stdio based writing. Has a
      minor impact (0.5 microseconds) on microbenchmarks for asynchronous
      writes. Synchronous writes speed up from 30ms to 10ms on linux/ext4.
      Should be much more reliable on diverse platforms.
    - compaction errors now immediately put the database into a read-only
      mode (until it is re-opened). As a downside, a disk going out of
      space and then space being created will require a re-open to recover
      from, whereas previously that would happen automatically. On the
      plus side, many corruption possibilities go away.
    - force the DB to enter an error-state so that all future writes fail
      when a synchronous log write succeeds but the sync fails.
    - repair now regenerates sstables that exhibit problems
    - fix issue 218 - Use native memory barriers on OSX
    - fix issue 212 - QNX build is broken
    - fix build on iOS with xcode 5
    - make tests compile and pass on windows
    Release LevelDB 1.14
    
    Fix issues 200, 201
    
    Also,
    * Fix link to bigtable paper in docs.
    * New sstables will have the file extension .ldb. .sst files will
    continue to be recognized.
    * When building for iOS, use xcrun to execute the compiler. This may
    affect issue 177.
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Speed up Snappy uncompression, new Logger interface.
    
    - Removed one copy of an uncompressed block contents changing
      the signature of Snappy_Uncompress() so it uncompresses into a
      flat array instead of a std::string.
    
      Speeds up readrandom ~10%.
    
    - Instead of a combination of Env/WritableFile, we now have a
      Logger interface that can be easily overridden applications
      that want to supply their own logging.
    
    - Separated out the gcc and Sun Studio parts of atomic_pointer.h
      so we can use 'asm', 'volatile' keywords for Sun Studio.
    
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@39 62dab493-f737-651d-591e-8d6aee1b9529
    Sun Studio support, and fix for test related memory fixes.
    
    - LevelDB patch for Sun Studio
      Based on a patch submitted by Theo Schlossnagle - thanks!
      This fixes Issue 17.
    
    - Fix a couple of test related memory leaks.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@38 62dab493-f737-651d-591e-8d6aee1b9529
    A number of smaller fixes and performance improvements:
    
    - Implemented Get() directly instead of building on top of a full
      merging iterator stack.  This speeds up the "readrandom" benchmark
      by up to 15-30%.
    
    - Fixed an opensource compilation problem.
      Added --db=<name> flag to control where the database is placed.
    
    - Automatically compact a file when we have done enough
      overlapping seeks to that file.
    
    - Fixed a performance bug where we would read from at least one
      file in a level even if none of the files overlapped the key
      being read.
    
    - Makefile fix for Mac OSX installations that have XCode 4 without XCode 3.
    
    - Unified the two occurrences of binary search in a file-list
      into one routine.
    
    - Found and fixed a bug where we would unnecessarily search the
      last file when looking for a key larger than all data in the
      level.
    
    - A fix to avoid the need for trivial move compactions and
      therefore gets rid of two out of five syncs in "fillseq".
    
    - Removed the MANIFEST file write when switching to a new
      memtable/log-file for a 10-20% improvement on fill speed on ext4.
    
    - Adding a SNAPPY setting in the Makefile for folks who have
      Snappy installed. Snappy compresses values and speeds up writes.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@32 62dab493-f737-651d-591e-8d6aee1b9529
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Upstream changes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@16 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    A number of smaller fixes and performance improvements:
    
    - Implemented Get() directly instead of building on top of a full
      merging iterator stack.  This speeds up the "readrandom" benchmark
      by up to 15-30%.
    
    - Fixed an opensource compilation problem.
      Added --db=<name> flag to control where the database is placed.
    
    - Automatically compact a file when we have done enough
      overlapping seeks to that file.
    
    - Fixed a performance bug where we would read from at least one
      file in a level even if none of the files overlapped the key
      being read.
    
    - Makefile fix for Mac OSX installations that have XCode 4 without XCode 3.
    
    - Unified the two occurrences of binary search in a file-list
      into one routine.
    
    - Found and fixed a bug where we would unnecessarily search the
      last file when looking for a key larger than all data in the
      level.
    
    - A fix to avoid the need for trivial move compactions and
      therefore gets rid of two out of five syncs in "fillseq".
    
    - Removed the MANIFEST file write when switching to a new
      memtable/log-file for a 10-20% improvement on fill speed on ext4.
    
    - Adding a SNAPPY setting in the Makefile for folks who have
      Snappy installed. Snappy compresses values and speeds up writes.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@32 62dab493-f737-651d-591e-8d6aee1b9529
    Update from upstream @21551990
    
    * Patch LevelDB to build for OSX and iOS
    * Fix race condition in memtable iterator deletion.
    * Other small fixes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@29 62dab493-f737-651d-591e-8d6aee1b9529
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    A number of smaller fixes and performance improvements:
    
    - Implemented Get() directly instead of building on top of a full
      merging iterator stack.  This speeds up the "readrandom" benchmark
      by up to 15-30%.
    
    - Fixed an opensource compilation problem.
      Added --db=<name> flag to control where the database is placed.
    
    - Automatically compact a file when we have done enough
      overlapping seeks to that file.
    
    - Fixed a performance bug where we would read from at least one
      file in a level even if none of the files overlapped the key
      being read.
    
    - Makefile fix for Mac OSX installations that have XCode 4 without XCode 3.
    
    - Unified the two occurrences of binary search in a file-list
      into one routine.
    
    - Found and fixed a bug where we would unnecessarily search the
      last file when looking for a key larger than all data in the
      level.
    
    - A fix to avoid the need for trivial move compactions and
      therefore gets rid of two out of five syncs in "fillseq".
    
    - Removed the MANIFEST file write when switching to a new
      memtable/log-file for a 10-20% improvement on fill speed on ext4.
    
    - Adding a SNAPPY setting in the Makefile for folks who have
      Snappy installed. Snappy compresses values and speeds up writes.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@32 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    A number of bugfixes:
    
    - Added DB::CompactRange() method.
    
      Changed manual compaction code so it breaks up compactions of
      big ranges into smaller compactions.
    
      Changed the code that pushes the output of memtable compactions
      to higher levels to obey the grandparent constraint: i.e., we
      must never have a single file in level L that overlaps too
      much data in level L+1 (to avoid very expensive L-1 compactions).
    
      Added code to pretty-print internal keys.
    
    - Fixed bug where we would not detect overlap with files in
      level-0 because we were incorrectly using binary search
      on an array of files with overlapping ranges.
    
      Added "leveldb.sstables" property that can be used to dump
      all of the sstables and ranges that make up the db state.
    
    - Removing post_write_snapshot support.  Email to leveldb mailing
      list brought up no users, just confusion from one person about
      what it meant.
    
    - Fixing static_cast char to unsigned on BIG_ENDIAN platforms.
    
      Fixes Issue 35 and Issue 36.
    
    - Comment clarification to address leveldb Issue 37.
    
    - Change license in posix_logger.h to match other files.
    
    - A build problem where uint32 was used instead of uint32_t.
    
    Sync with upstream @24408625
    Sun Studio support, and fix for test related memory fixes.
    
    - LevelDB patch for Sun Studio
      Based on a patch submitted by Theo Schlossnagle - thanks!
      This fixes Issue 17.
    
    - Fix a couple of test related memory leaks.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@38 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Release LevelDB 1.16
    
    - Make Log::Reader not report a corruption when the last record in a
      log file is truncated.
    - Fix issue 224: variable created but not utilized.
    - Remove comment that referenced a removed feature.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Update from upstream @21551990
    
    * Patch LevelDB to build for OSX and iOS
    * Fix race condition in memtable iterator deletion.
    * Other small fixes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@29 62dab493-f737-651d-591e-8d6aee1b9529
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Sync in bug fixes
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@9 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Sun Studio support, and fix for test related memory fixes.
    
    - LevelDB patch for Sun Studio
      Based on a patch submitted by Theo Schlossnagle - thanks!
      This fixes Issue 17.
    
    - Fix a couple of test related memory leaks.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@38 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Pull from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@14 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Release LevelDB 1.16
    
    - Make Log::Reader not report a corruption when the last record in a
      log file is truncated.
    - Fix issue 224: variable created but not utilized.
    - Remove comment that referenced a removed feature.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Small tweaks and bugfixes for Issue 18 and 19.
    
    Slight tweak to the no-overlap optimization: only push to
    level 2 to reduce the amount of wasted space when the same
    small key range is being repeatedly overwritten.
    
    Fix for Issue 18: Avoid failure on Windows by avoiding
    deletion of lock file until the end of DestroyDB().
    
    Fix for Issue 19: Disregard sequence numbers when checking for
    overlap in sstable ranges. This fixes issue 19: when writing
    the same key over and over again, we would generate a sequence
    of sstables that were never merged together since their sequence
    numbers were disjoint.
    
    Don't ignore map/unmap error checks.
    
    Miscellaneous fixes for small problems Sanjay found while diagnosing
    issue/9 and issue/16 (corruption_testr failures).
    - log::Reader reports the record type when it finds an unexpected type.
    - log::Reader no longer reports an error when it encounters an expected
      zero record regardless of the setting of the "checksum" flag.
    - Added a missing forward declaration.
    - Documented a side-effects of larger write buffer sizes
      (longer recovery time).
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@37 62dab493-f737-651d-591e-8d6aee1b9529
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Upstream changes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@16 62dab493-f737-651d-591e-8d6aee1b9529
    Sync in bug fixes
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@9 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release LevelDB 1.15
    
    - switched from mmap based writing to simpler stdio based writing. Has a
      minor impact (0.5 microseconds) on microbenchmarks for asynchronous
      writes. Synchronous writes speed up from 30ms to 10ms on linux/ext4.
      Should be much more reliable on diverse platforms.
    - compaction errors now immediately put the database into a read-only
      mode (until it is re-opened). As a downside, a disk going out of
      space and then space being created will require a re-open to recover
      from, whereas previously that would happen automatically. On the
      plus side, many corruption possibilities go away.
    - force the DB to enter an error-state so that all future writes fail
      when a synchronous log write succeeds but the sync fails.
    - repair now regenerates sstables that exhibit problems
    - fix issue 218 - Use native memory barriers on OSX
    - fix issue 212 - QNX build is broken
    - fix build on iOS with xcode 5
    - make tests compile and pass on windows
    LevelDB 1.13
    
    Fix issues 77, 87, 182, 190.
    
    Additionally, fix the bug described in
    https://groups.google.com/d/msg/leveldb/yL6h1mAOc20/vLU64RylIdMJ
    where a large contiguous keyspace of deleted data was not getting
    compacted.
    
    Also fix a bug where options.max_open_files was not getting clamped
    properly.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    A number of bugfixes:
    
    - Added DB::CompactRange() method.
    
      Changed manual compaction code so it breaks up compactions of
      big ranges into smaller compactions.
    
      Changed the code that pushes the output of memtable compactions
      to higher levels to obey the grandparent constraint: i.e., we
      must never have a single file in level L that overlaps too
      much data in level L+1 (to avoid very expensive L-1 compactions).
    
      Added code to pretty-print internal keys.
    
    - Fixed bug where we would not detect overlap with files in
      level-0 because we were incorrectly using binary search
      on an array of files with overlapping ranges.
    
      Added "leveldb.sstables" property that can be used to dump
      all of the sstables and ranges that make up the db state.
    
    - Removing post_write_snapshot support.  Email to leveldb mailing
      list brought up no users, just confusion from one person about
      what it meant.
    
    - Fixing static_cast char to unsigned on BIG_ENDIAN platforms.
    
      Fixes Issue 35 and Issue 36.
    
    - Comment clarification to address leveldb Issue 37.
    
    - Change license in posix_logger.h to match other files.
    
    - A build problem where uint32 was used instead of uint32_t.
    
    Sync with upstream @24408625
    Small tweaks and bugfixes for Issue 18 and 19.
    
    Slight tweak to the no-overlap optimization: only push to
    level 2 to reduce the amount of wasted space when the same
    small key range is being repeatedly overwritten.
    
    Fix for Issue 18: Avoid failure on Windows by avoiding
    deletion of lock file until the end of DestroyDB().
    
    Fix for Issue 19: Disregard sequence numbers when checking for
    overlap in sstable ranges. This fixes issue 19: when writing
    the same key over and over again, we would generate a sequence
    of sstables that were never merged together since their sequence
    numbers were disjoint.
    
    Don't ignore map/unmap error checks.
    
    Miscellaneous fixes for small problems Sanjay found while diagnosing
    issue/9 and issue/16 (corruption_testr failures).
    - log::Reader reports the record type when it finds an unexpected type.
    - log::Reader no longer reports an error when it encounters an expected
      zero record regardless of the setting of the "checksum" flag.
    - Added a missing forward declaration.
    - Documented a side-effects of larger write buffer sizes
      (longer recovery time).
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@37 62dab493-f737-651d-591e-8d6aee1b9529
    A number of smaller fixes and performance improvements:
    
    - Implemented Get() directly instead of building on top of a full
      merging iterator stack.  This speeds up the "readrandom" benchmark
      by up to 15-30%.
    
    - Fixed an opensource compilation problem.
      Added --db=<name> flag to control where the database is placed.
    
    - Automatically compact a file when we have done enough
      overlapping seeks to that file.
    
    - Fixed a performance bug where we would read from at least one
      file in a level even if none of the files overlapped the key
      being read.
    
    - Makefile fix for Mac OSX installations that have XCode 4 without XCode 3.
    
    - Unified the two occurrences of binary search in a file-list
      into one routine.
    
    - Found and fixed a bug where we would unnecessarily search the
      last file when looking for a key larger than all data in the
      level.
    
    - A fix to avoid the need for trivial move compactions and
      therefore gets rid of two out of five syncs in "fillseq".
    
    - Removed the MANIFEST file write when switching to a new
      memtable/log-file for a 10-20% improvement on fill speed on ext4.
    
    - Adding a SNAPPY setting in the Makefile for folks who have
      Snappy installed. Snappy compresses values and speeds up writes.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@32 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Sync in bug fixes
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@9 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Release LevelDB 1.15
    
    - switched from mmap based writing to simpler stdio based writing. Has a
      minor impact (0.5 microseconds) on microbenchmarks for asynchronous
      writes. Synchronous writes speed up from 30ms to 10ms on linux/ext4.
      Should be much more reliable on diverse platforms.
    - compaction errors now immediately put the database into a read-only
      mode (until it is re-opened). As a downside, a disk going out of
      space and then space being created will require a re-open to recover
      from, whereas previously that would happen automatically. On the
      plus side, many corruption possibilities go away.
    - force the DB to enter an error-state so that all future writes fail
      when a synchronous log write succeeds but the sync fails.
    - repair now regenerates sstables that exhibit problems
    - fix issue 218 - Use native memory barriers on OSX
    - fix issue 212 - QNX build is broken
    - fix build on iOS with xcode 5
    - make tests compile and pass on windows
    Release LevelDB 1.14
    
    Fix issues 200, 201
    
    Also,
    * Fix link to bigtable paper in docs.
    * New sstables will have the file extension .ldb. .sst files will
    continue to be recognized.
    * When building for iOS, use xcrun to execute the compiler. This may
    affect issue 177.
    Release leveldb 1.11
    
    Fixes issues
    161
    174
    178
    
    As well as the issue reported by edouarda14@gmail.com about
    MissingSSTFile unit test failing on windows.
    Make DB::Open fail if sst files are missing.
    
    Also, cleanup for Clang's -Wimplicit-fallthrough warning.
    Fix corruption bug found and analyzed by dhruba@gmail.com
    
    https://groups.google.com/d/msg/leveldb/Kc9JxuIUu5A/9P0N9RL4ar8J
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    Remove static initializer; fix endian-ness detection; fix build on
    various platforms; improve android port speed.
    
    Avoid static initializer by using a new portability interface for
    thread-safe lazy initialization.  Custom ports will need to be
    extended to implement InitOnce/OnceType/LEVELDB_ONCE_INIT.
    
    Fix endian-ness detection (fixes Powerpc builds).
    
    Build related fixes:
    - Support platforms that have unversioned shared libraries.
    - Fix IOS build rules.
    
    Android improvements
    - Speed up atomic pointers
    - Share more code with port_posix.
    
    Do not spin in a tight loop attempting compactions if the file system
    is inaccessible (e.g., if kerberos tickets have expired or if it is out
    of space).
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    fixed issues 66 (leaking files on disk error)  and 68 (no sync of CURRENT file)
    Pass system's CFLAGS, remove exit time destructor, sstable bug fix.
    
    - Pass system's values of CFLAGS,LDFLAGS.
      Don't override OPT if it's already set.
      Original patch by Alessio Treglia <alessio@debian.org>:
      http://code.google.com/p/leveldb/issues/detail?id=27#c6
    
    - Remove 1 exit time destructor from leveldb.
      See http://crbug.com/101600
    
    - Fix problem where sstable building code would pass an
      internal key to the user comparator.
    
    (Sync with uptream at 25436817.)
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    A number of bugfixes:
    
    - Added DB::CompactRange() method.
    
      Changed manual compaction code so it breaks up compactions of
      big ranges into smaller compactions.
    
      Changed the code that pushes the output of memtable compactions
      to higher levels to obey the grandparent constraint: i.e., we
      must never have a single file in level L that overlaps too
      much data in level L+1 (to avoid very expensive L-1 compactions).
    
      Added code to pretty-print internal keys.
    
    - Fixed bug where we would not detect overlap with files in
      level-0 because we were incorrectly using binary search
      on an array of files with overlapping ranges.
    
      Added "leveldb.sstables" property that can be used to dump
      all of the sstables and ranges that make up the db state.
    
    - Removing post_write_snapshot support.  Email to leveldb mailing
      list brought up no users, just confusion from one person about
      what it meant.
    
    - Fixing static_cast char to unsigned on BIG_ENDIAN platforms.
    
      Fixes Issue 35 and Issue 36.
    
    - Comment clarification to address leveldb Issue 37.
    
    - Change license in posix_logger.h to match other files.
    
    - A build problem where uint32 was used instead of uint32_t.
    
    Sync with upstream @24408625
    Bugfixes: for Get(), don't hold mutex while writing log.
    
    - Fix bug in Get: when it triggers a compaction, it could sometimes
      mark the compaction with the wrong level (if there was a gap
      in the set of levels examined for the Get).
    
    - Do not hold mutex while writing to the log file or to the
      MANIFEST file.
    
      Added a new benchmark that runs a writer thread concurrently with
      reader threads.
    
      Percentiles
      ------------------------------
      micros/op: avg  median 99   99.9  99.99  99.999 max
      ------------------------------------------------------
      before:    42   38     110  225   32000  42000  48000
      after:     24   20     55   65    130    1100   7000
    
    - Fixed race in optimized Get.  It should have been using the
      pinned memtables, not the current memtables.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@50 62dab493-f737-651d-591e-8d6aee1b9529
    Bugfixes for iterator and documentation.
    
    - Fix bug in Iterator::Prev where it would return the wrong key.
      Fixes issues 29 and 30.
    
    - Added a tweak to testharness to allow running just some tests.
    
    - Fixing two minor documentation errors based on issues 28 and 25.
    
    - Cleanup; fix namespaces of export-to-C code.
      Also fix one "const char*" vs "char*" mismatch.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@48 62dab493-f737-651d-591e-8d6aee1b9529
    Sun Studio support, and fix for test related memory fixes.
    
    - LevelDB patch for Sun Studio
      Based on a patch submitted by Theo Schlossnagle - thanks!
      This fixes Issue 17.
    
    - Fix a couple of test related memory leaks.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@38 62dab493-f737-651d-591e-8d6aee1b9529
    Small tweaks and bugfixes for Issue 18 and 19.
    
    Slight tweak to the no-overlap optimization: only push to
    level 2 to reduce the amount of wasted space when the same
    small key range is being repeatedly overwritten.
    
    Fix for Issue 18: Avoid failure on Windows by avoiding
    deletion of lock file until the end of DestroyDB().
    
    Fix for Issue 19: Disregard sequence numbers when checking for
    overlap in sstable ranges. This fixes issue 19: when writing
    the same key over and over again, we would generate a sequence
    of sstables that were never merged together since their sequence
    numbers were disjoint.
    
    Don't ignore map/unmap error checks.
    
    Miscellaneous fixes for small problems Sanjay found while diagnosing
    issue/9 and issue/16 (corruption_testr failures).
    - log::Reader reports the record type when it finds an unexpected type.
    - log::Reader no longer reports an error when it encounters an expected
      zero record regardless of the setting of the "checksum" flag.
    - Added a missing forward declaration.
    - Documented a side-effects of larger write buffer sizes
      (longer recovery time).
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@37 62dab493-f737-651d-591e-8d6aee1b9529
    A number of smaller fixes and performance improvements:
    
    - Implemented Get() directly instead of building on top of a full
      merging iterator stack.  This speeds up the "readrandom" benchmark
      by up to 15-30%.
    
    - Fixed an opensource compilation problem.
      Added --db=<name> flag to control where the database is placed.
    
    - Automatically compact a file when we have done enough
      overlapping seeks to that file.
    
    - Fixed a performance bug where we would read from at least one
      file in a level even if none of the files overlapped the key
      being read.
    
    - Makefile fix for Mac OSX installations that have XCode 4 without XCode 3.
    
    - Unified the two occurrences of binary search in a file-list
      into one routine.
    
    - Found and fixed a bug where we would unnecessarily search the
      last file when looking for a key larger than all data in the
      level.
    
    - A fix to avoid the need for trivial move compactions and
      therefore gets rid of two out of five syncs in "fillseq".
    
    - Removed the MANIFEST file write when switching to a new
      memtable/log-file for a 10-20% improvement on fill speed on ext4.
    
    - Adding a SNAPPY setting in the Makefile for folks who have
      Snappy installed. Snappy compresses values and speeds up writes.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@32 62dab493-f737-651d-591e-8d6aee1b9529
    Update from upstream @21551990
    
    * Patch LevelDB to build for OSX and iOS
    * Fix race condition in memtable iterator deletion.
    * Other small fixes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@29 62dab493-f737-651d-591e-8d6aee1b9529
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Upstream changes
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@15 62dab493-f737-651d-591e-8d6aee1b9529
    Pull from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@14 62dab493-f737-651d-591e-8d6aee1b9529
    More changes from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@12 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Pull from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@14 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    added utility to dump leveldb files
    added group commit; drastically speeds up mult-threaded synchronous write workloads
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Add benchmark that measures cost of repeatedly opening the database.
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Release LevelDB 1.15
    
    - switched from mmap based writing to simpler stdio based writing. Has a
      minor impact (0.5 microseconds) on microbenchmarks for asynchronous
      writes. Synchronous writes speed up from 30ms to 10ms on linux/ext4.
      Should be much more reliable on diverse platforms.
    - compaction errors now immediately put the database into a read-only
      mode (until it is re-opened). As a downside, a disk going out of
      space and then space being created will require a re-open to recover
      from, whereas previously that would happen automatically. On the
      plus side, many corruption possibilities go away.
    - force the DB to enter an error-state so that all future writes fail
      when a synchronous log write succeeds but the sync fails.
    - repair now regenerates sstables that exhibit problems
    - fix issue 218 - Use native memory barriers on OSX
    - fix issue 212 - QNX build is broken
    - fix build on iOS with xcode 5
    - make tests compile and pass on windows
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    Remove static initializer; fix endian-ness detection; fix build on
    various platforms; improve android port speed.
    
    Avoid static initializer by using a new portability interface for
    thread-safe lazy initialization.  Custom ports will need to be
    extended to implement InitOnce/OnceType/LEVELDB_ONCE_INIT.
    
    Fix endian-ness detection (fixes Powerpc builds).
    
    Build related fixes:
    - Support platforms that have unversioned shared libraries.
    - Fix IOS build rules.
    
    Android improvements
    - Speed up atomic pointers
    - Share more code with port_posix.
    
    Do not spin in a tight loop attempting compactions if the file system
    is inaccessible (e.g., if kerberos tickets have expired or if it is out
    of space).
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    A number of bugfixes:
    
    - Added DB::CompactRange() method.
    
      Changed manual compaction code so it breaks up compactions of
      big ranges into smaller compactions.
    
      Changed the code that pushes the output of memtable compactions
      to higher levels to obey the grandparent constraint: i.e., we
      must never have a single file in level L that overlaps too
      much data in level L+1 (to avoid very expensive L-1 compactions).
    
      Added code to pretty-print internal keys.
    
    - Fixed bug where we would not detect overlap with files in
      level-0 because we were incorrectly using binary search
      on an array of files with overlapping ranges.
    
      Added "leveldb.sstables" property that can be used to dump
      all of the sstables and ranges that make up the db state.
    
    - Removing post_write_snapshot support.  Email to leveldb mailing
      list brought up no users, just confusion from one person about
      what it meant.
    
    - Fixing static_cast char to unsigned on BIG_ENDIAN platforms.
    
      Fixes Issue 35 and Issue 36.
    
    - Comment clarification to address leveldb Issue 37.
    
    - Change license in posix_logger.h to match other files.
    
    - A build problem where uint32 was used instead of uint32_t.
    
    Sync with upstream @24408625
    Bugfixes: for Get(), don't hold mutex while writing log.
    
    - Fix bug in Get: when it triggers a compaction, it could sometimes
      mark the compaction with the wrong level (if there was a gap
      in the set of levels examined for the Get).
    
    - Do not hold mutex while writing to the log file or to the
      MANIFEST file.
    
      Added a new benchmark that runs a writer thread concurrently with
      reader threads.
    
      Percentiles
      ------------------------------
      micros/op: avg  median 99   99.9  99.99  99.999 max
      ------------------------------------------------------
      before:    42   38     110  225   32000  42000  48000
      after:     24   20     55   65    130    1100   7000
    
    - Fixed race in optimized Get.  It should have been using the
      pinned memtables, not the current memtables.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@50 62dab493-f737-651d-591e-8d6aee1b9529
    Bugfix for issue 33; reduce lock contention in Get(), parallel benchmarks.
    
    - Fix for issue 33 (non-null-terminated result from
      leveldb_property_value())
    
    - Support for running multiple instances of a benchmark in parallel.
    
    - Reduce lock contention on Get():
      (1) Do not hold the lock while searching memtables.
      (2) Shard block and table caches 16-ways.
    
      Benchmark for evaluating this change:
      $ db_bench --benchmarks=fillseq1,readrandom --threads=$n
      (fillseq1 is a small hack to make sure fillseq runs once regardless
      of number of threads specified on the command line).
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@49 62dab493-f737-651d-591e-8d6aee1b9529
    Speed up Snappy uncompression, new Logger interface.
    
    - Removed one copy of an uncompressed block contents changing
      the signature of Snappy_Uncompress() so it uncompresses into a
      flat array instead of a std::string.
    
      Speeds up readrandom ~10%.
    
    - Instead of a combination of Env/WritableFile, we now have a
      Logger interface that can be easily overridden applications
      that want to supply their own logging.
    
    - Separated out the gcc and Sun Studio parts of atomic_pointer.h
      so we can use 'asm', 'volatile' keywords for Sun Studio.
    
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@39 62dab493-f737-651d-591e-8d6aee1b9529
    A number of smaller fixes and performance improvements:
    
    - Implemented Get() directly instead of building on top of a full
      merging iterator stack.  This speeds up the "readrandom" benchmark
      by up to 15-30%.
    
    - Fixed an opensource compilation problem.
      Added --db=<name> flag to control where the database is placed.
    
    - Automatically compact a file when we have done enough
      overlapping seeks to that file.
    
    - Fixed a performance bug where we would read from at least one
      file in a level even if none of the files overlapped the key
      being read.
    
    - Makefile fix for Mac OSX installations that have XCode 4 without XCode 3.
    
    - Unified the two occurrences of binary search in a file-list
      into one routine.
    
    - Found and fixed a bug where we would unnecessarily search the
      last file when looking for a key larger than all data in the
      level.
    
    - A fix to avoid the need for trivial move compactions and
      therefore gets rid of two out of five syncs in "fillseq".
    
    - Removed the MANIFEST file write when switching to a new
      memtable/log-file for a 10-20% improvement on fill speed on ext4.
    
    - Adding a SNAPPY setting in the Makefile for folks who have
      Snappy installed. Snappy compresses values and speeds up writes.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@32 62dab493-f737-651d-591e-8d6aee1b9529
    Update from upstream @21551990
    
    * Patch LevelDB to build for OSX and iOS
    * Fix race condition in memtable iterator deletion.
    * Other small fixes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@29 62dab493-f737-651d-591e-8d6aee1b9529
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Upstream changes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@16 62dab493-f737-651d-591e-8d6aee1b9529
    Upstream changes
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@15 62dab493-f737-651d-591e-8d6aee1b9529
    More changes from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@12 62dab493-f737-651d-591e-8d6aee1b9529
    Sync in bug fixes
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@9 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    build shared libraries; updated version to 1.3; add Status accessors
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Sun Studio support, and fix for test related memory fixes.
    
    - LevelDB patch for Sun Studio
      Based on a patch submitted by Theo Schlossnagle - thanks!
      This fixes Issue 17.
    
    - Fix a couple of test related memory leaks.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@38 62dab493-f737-651d-591e-8d6aee1b9529
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Fix last commit
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@19 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release LevelDB 1.17
    
    - Cleanup: delete unused IntSetToString
    
      It was added in http://cr/19491949 (and was referenced at the time).
      The last reference was removed in http://cr/19507363.
    
      This fixes warning/error with pre-release crosstoolv18:
        'std::string leveldb::{anonymous}::IntSetToString(const std::set<long unsigned int>&)' defined but not used [-Werror=unused-function]
    
    - Added arm64 and and armv7s to IOS build as suggested on leveldb mailing list.
    
    - Changed local variable type from int to size_t
    
      This eliminates compiler warning/error and resolves
      https://code.google.com/p/leveldb/issues/detail?id=140
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Sync with upstream @23860137.
    
    Fix GCC -Wshadow warnings in LevelDB's public header files,
    reported by Dustin.
    
    Add in-memory Env implementation (helpers/memenv/*).
    This enables users to create LevelDB databases in-memory.
    
    Initialize ShardedLRUCache::last_id_ to zero.
    This fixes a Valgrind warning.
    
    (Also delete port/sha1_* which were removed upstream some time ago.)
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Fix last commit
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@19 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    A number of bugfixes:
    
    - Added DB::CompactRange() method.
    
      Changed manual compaction code so it breaks up compactions of
      big ranges into smaller compactions.
    
      Changed the code that pushes the output of memtable compactions
      to higher levels to obey the grandparent constraint: i.e., we
      must never have a single file in level L that overlaps too
      much data in level L+1 (to avoid very expensive L-1 compactions).
    
      Added code to pretty-print internal keys.
    
    - Fixed bug where we would not detect overlap with files in
      level-0 because we were incorrectly using binary search
      on an array of files with overlapping ranges.
    
      Added "leveldb.sstables" property that can be used to dump
      all of the sstables and ranges that make up the db state.
    
    - Removing post_write_snapshot support.  Email to leveldb mailing
      list brought up no users, just confusion from one person about
      what it meant.
    
    - Fixing static_cast char to unsigned on BIG_ENDIAN platforms.
    
      Fixes Issue 35 and Issue 36.
    
    - Comment clarification to address leveldb Issue 37.
    
    - Change license in posix_logger.h to match other files.
    
    - A build problem where uint32 was used instead of uint32_t.
    
    Sync with upstream @24408625
    Speed up Snappy uncompression, new Logger interface.
    
    - Removed one copy of an uncompressed block contents changing
      the signature of Snappy_Uncompress() so it uncompresses into a
      flat array instead of a std::string.
    
      Speeds up readrandom ~10%.
    
    - Instead of a combination of Env/WritableFile, we now have a
      Logger interface that can be easily overridden applications
      that want to supply their own logging.
    
    - Separated out the gcc and Sun Studio parts of atomic_pointer.h
      so we can use 'asm', 'volatile' keywords for Sun Studio.
    
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@39 62dab493-f737-651d-591e-8d6aee1b9529
    Sun Studio support, and fix for test related memory fixes.
    
    - LevelDB patch for Sun Studio
      Based on a patch submitted by Theo Schlossnagle - thanks!
      This fixes Issue 17.
    
    - Fix a couple of test related memory leaks.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@38 62dab493-f737-651d-591e-8d6aee1b9529
    Small tweaks and bugfixes for Issue 18 and 19.
    
    Slight tweak to the no-overlap optimization: only push to
    level 2 to reduce the amount of wasted space when the same
    small key range is being repeatedly overwritten.
    
    Fix for Issue 18: Avoid failure on Windows by avoiding
    deletion of lock file until the end of DestroyDB().
    
    Fix for Issue 19: Disregard sequence numbers when checking for
    overlap in sstable ranges. This fixes issue 19: when writing
    the same key over and over again, we would generate a sequence
    of sstables that were never merged together since their sequence
    numbers were disjoint.
    
    Don't ignore map/unmap error checks.
    
    Miscellaneous fixes for small problems Sanjay found while diagnosing
    issue/9 and issue/16 (corruption_testr failures).
    - log::Reader reports the record type when it finds an unexpected type.
    - log::Reader no longer reports an error when it encounters an expected
      zero record regardless of the setting of the "checksum" flag.
    - Added a missing forward declaration.
    - Documented a side-effects of larger write buffer sizes
      (longer recovery time).
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@37 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Fix last commit
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@19 62dab493-f737-651d-591e-8d6aee1b9529
    Pull from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@14 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Fix last commit
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@19 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Fixed incorrect comment wording for Iterator::Seek.
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Fix last commit
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@19 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Fix last commit
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@19 62dab493-f737-651d-591e-8d6aee1b9529
    Upstream changes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@16 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Release LevelDB 1.15
    
    - switched from mmap based writing to simpler stdio based writing. Has a
      minor impact (0.5 microseconds) on microbenchmarks for asynchronous
      writes. Synchronous writes speed up from 30ms to 10ms on linux/ext4.
      Should be much more reliable on diverse platforms.
    - compaction errors now immediately put the database into a read-only
      mode (until it is re-opened). As a downside, a disk going out of
      space and then space being created will require a re-open to recover
      from, whereas previously that would happen automatically. On the
      plus side, many corruption possibilities go away.
    - force the DB to enter an error-state so that all future writes fail
      when a synchronous log write succeeds but the sync fails.
    - repair now regenerates sstables that exhibit problems
    - fix issue 218 - Use native memory barriers on OSX
    - fix issue 212 - QNX build is broken
    - fix build on iOS with xcode 5
    - make tests compile and pass on windows
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    A number of bugfixes:
    
    - Added DB::CompactRange() method.
    
      Changed manual compaction code so it breaks up compactions of
      big ranges into smaller compactions.
    
      Changed the code that pushes the output of memtable compactions
      to higher levels to obey the grandparent constraint: i.e., we
      must never have a single file in level L that overlaps too
      much data in level L+1 (to avoid very expensive L-1 compactions).
    
      Added code to pretty-print internal keys.
    
    - Fixed bug where we would not detect overlap with files in
      level-0 because we were incorrectly using binary search
      on an array of files with overlapping ranges.
    
      Added "leveldb.sstables" property that can be used to dump
      all of the sstables and ranges that make up the db state.
    
    - Removing post_write_snapshot support.  Email to leveldb mailing
      list brought up no users, just confusion from one person about
      what it meant.
    
    - Fixing static_cast char to unsigned on BIG_ENDIAN platforms.
    
      Fixes Issue 35 and Issue 36.
    
    - Comment clarification to address leveldb Issue 37.
    
    - Change license in posix_logger.h to match other files.
    
    - A build problem where uint32 was used instead of uint32_t.
    
    Sync with upstream @24408625
    Sync with upstream @23860137.
    
    Fix GCC -Wshadow warnings in LevelDB's public header files,
    reported by Dustin.
    
    Add in-memory Env implementation (helpers/memenv/*).
    This enables users to create LevelDB databases in-memory.
    
    Initialize ShardedLRUCache::last_id_ to zero.
    This fixes a Valgrind warning.
    
    (Also delete port/sha1_* which were removed upstream some time ago.)
    Speed up Snappy uncompression, new Logger interface.
    
    - Removed one copy of an uncompressed block contents changing
      the signature of Snappy_Uncompress() so it uncompresses into a
      flat array instead of a std::string.
    
      Speeds up readrandom ~10%.
    
    - Instead of a combination of Env/WritableFile, we now have a
      Logger interface that can be easily overridden applications
      that want to supply their own logging.
    
    - Separated out the gcc and Sun Studio parts of atomic_pointer.h
      so we can use 'asm', 'volatile' keywords for Sun Studio.
    
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@39 62dab493-f737-651d-591e-8d6aee1b9529
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Fix last commit
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@19 62dab493-f737-651d-591e-8d6aee1b9529
    Upstream changes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@16 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Release LevelDB 1.17
    
    - Cleanup: delete unused IntSetToString
    
      It was added in http://cr/19491949 (and was referenced at the time).
      The last reference was removed in http://cr/19507363.
    
      This fixes warning/error with pre-release crosstoolv18:
        'std::string leveldb::{anonymous}::IntSetToString(const std::set<long unsigned int>&)' defined but not used [-Werror=unused-function]
    
    - Added arm64 and and armv7s to IOS build as suggested on leveldb mailing list.
    
    - Changed local variable type from int to size_t
    
      This eliminates compiler warning/error and resolves
      https://code.google.com/p/leveldb/issues/detail?id=140
    Release LevelDB 1.16
    
    - Make Log::Reader not report a corruption when the last record in a
      log file is truncated.
    - Fix issue 224: variable created but not utilized.
    - Remove comment that referenced a removed feature.
    Release LevelDB 1.15
    
    - switched from mmap based writing to simpler stdio based writing. Has a
      minor impact (0.5 microseconds) on microbenchmarks for asynchronous
      writes. Synchronous writes speed up from 30ms to 10ms on linux/ext4.
      Should be much more reliable on diverse platforms.
    - compaction errors now immediately put the database into a read-only
      mode (until it is re-opened). As a downside, a disk going out of
      space and then space being created will require a re-open to recover
      from, whereas previously that would happen automatically. On the
      plus side, many corruption possibilities go away.
    - force the DB to enter an error-state so that all future writes fail
      when a synchronous log write succeeds but the sync fails.
    - repair now regenerates sstables that exhibit problems
    - fix issue 218 - Use native memory barriers on OSX
    - fix issue 212 - QNX build is broken
    - fix build on iOS with xcode 5
    - make tests compile and pass on windows
    Release LevelDB 1.14
    
    Fix issues 200, 201
    
    Also,
    * Fix link to bigtable paper in docs.
    * New sstables will have the file extension .ldb. .sst files will
    continue to be recognized.
    * When building for iOS, use xcrun to execute the compiler. This may
    affect issue 177.
    LevelDB 1.13
    
    Fix issues 77, 87, 182, 190.
    
    Additionally, fix the bug described in
    https://groups.google.com/d/msg/leveldb/yL6h1mAOc20/vLU64RylIdMJ
    where a large contiguous keyspace of deleted data was not getting
    compacted.
    
    Also fix a bug where options.max_open_files was not getting clamped
    properly.
    Release leveldb 1.12
    
    Non-functional changes only:
    1) Add Kevin Regan to the AUTHORS file
    2) Add standard license header to issues/issue178_test.cc
    Release leveldb 1.11
    
    Fixes issues
    161
    174
    178
    
    As well as the issue reported by edouarda14@gmail.com about
    MissingSSTFile unit test failing on windows.
    Release leveldb 1.10
    
    Fixes issues
    147 - thanks feniksgordonfreeman
    153
    156
    166
    
    Additionally,
    * Remove calls to exit(1).
    * Fix unused-variable warnings from clang.
    * Fix possible overflow error related to num_restart value >= (2^32/4).
    * Add leveldbutil to .gitignore.
    * Add better log messages when Write is stalled on a compaction.
    Fix corruption bug found and analyzed by dhruba@gmail.com
    
    https://groups.google.com/d/msg/leveldb/Kc9JxuIUu5A/9P0N9RL4ar8J
    added utility to dump leveldb files
    Small fixes.
    
    Details:
    * Fix shared library building.
    * Reorganize linking commands so flags like --as-needed can be passed.
    * C binding exports version numbers.
    * Fix small typos in documention.
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    update version number to 1.5
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    build shared libraries; updated version to 1.3; add Status accessors
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    A number of bugfixes:
    
    - Added DB::CompactRange() method.
    
      Changed manual compaction code so it breaks up compactions of
      big ranges into smaller compactions.
    
      Changed the code that pushes the output of memtable compactions
      to higher levels to obey the grandparent constraint: i.e., we
      must never have a single file in level L that overlaps too
      much data in level L+1 (to avoid very expensive L-1 compactions).
    
      Added code to pretty-print internal keys.
    
    - Fixed bug where we would not detect overlap with files in
      level-0 because we were incorrectly using binary search
      on an array of files with overlapping ranges.
    
      Added "leveldb.sstables" property that can be used to dump
      all of the sstables and ranges that make up the db state.
    
    - Removing post_write_snapshot support.  Email to leveldb mailing
      list brought up no users, just confusion from one person about
      what it meant.
    
    - Fixing static_cast char to unsigned on BIG_ENDIAN platforms.
    
      Fixes Issue 35 and Issue 36.
    
    - Comment clarification to address leveldb Issue 37.
    
    - Change license in posix_logger.h to match other files.
    
    - A build problem where uint32 was used instead of uint32_t.
    
    Sync with upstream @24408625
    C binding for leveldb, better readseq benchmark for SQLite.
    
    - Added a C binding for LevelDB.
      May be useful as a stable ABI that can be used by
      programs that keep leveldb in a shared library,
      or for JNI API.
    
    - Replaced SQLite's readseq benchmark to a more efficient version.
      SQLite readseq speeds increased by about a factor of 2x
      from the previous version. Also updated benchmark page to
      reflect readseq speed up.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@46 62dab493-f737-651d-591e-8d6aee1b9529
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Fix last commit
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@19 62dab493-f737-651d-591e-8d6aee1b9529
    More changes from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@12 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Fix last commit
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@19 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Fix last commit
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@19 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release LevelDB 1.16
    
    - Make Log::Reader not report a corruption when the last record in a
      log file is truncated.
    - Fix issue 224: variable created but not utilized.
    - Remove comment that referenced a removed feature.
    Small fixes.
    
    Details:
    * Fix shared library building.
    * Reorganize linking commands so flags like --as-needed can be passed.
    * C binding exports version numbers.
    * Fix small typos in documention.
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    C binding for leveldb, better readseq benchmark for SQLite.
    
    - Added a C binding for LevelDB.
      May be useful as a stable ABI that can be used by
      programs that keep leveldb in a shared library,
      or for JNI API.
    
    - Replaced SQLite's readseq benchmark to a more efficient version.
      SQLite readseq speeds increased by about a factor of 2x
      from the previous version. Also updated benchmark page to
      reflect readseq speed up.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@46 62dab493-f737-651d-591e-8d6aee1b9529
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Fix last commit
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@19 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Sync with upstream @23860137.
    
    Fix GCC -Wshadow warnings in LevelDB's public header files,
    reported by Dustin.
    
    Add in-memory Env implementation (helpers/memenv/*).
    This enables users to create LevelDB databases in-memory.
    
    Initialize ShardedLRUCache::last_id_ to zero.
    This fixes a Valgrind warning.
    
    (Also delete port/sha1_* which were removed upstream some time ago.)
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Sync with upstream @24213649.
    
    Adding GNU/kFreeBSD support. As requested here:
    http://code.google.com/p/leveldb/issues/detail?id=38
    
    Use uint64_t instead of size_t in MemEnvTest. As pointed out at
    http://code.google.com/p/leveldb/issues/detail?id=41
    Sync with upstream @23860137.
    
    Fix GCC -Wshadow warnings in LevelDB's public header files,
    reported by Dustin.
    
    Add in-memory Env implementation (helpers/memenv/*).
    This enables users to create LevelDB databases in-memory.
    
    Initialize ShardedLRUCache::last_id_ to zero.
    This fixes a Valgrind warning.
    
    (Also delete port/sha1_* which were removed upstream some time ago.)
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Sync with upstream @23860137.
    
    Fix GCC -Wshadow warnings in LevelDB's public header files,
    reported by Dustin.
    
    Add in-memory Env implementation (helpers/memenv/*).
    This enables users to create LevelDB databases in-memory.
    
    Initialize ShardedLRUCache::last_id_ to zero.
    This fixes a Valgrind warning.
    
    (Also delete port/sha1_* which were removed upstream some time ago.)
    Small fixes.
    
    Details:
    * Fix shared library building.
    * Reorganize linking commands so flags like --as-needed can be passed.
    * C binding exports version numbers.
    * Fix small typos in documention.
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    A number of bugfixes:
    
    - Added DB::CompactRange() method.
    
      Changed manual compaction code so it breaks up compactions of
      big ranges into smaller compactions.
    
      Changed the code that pushes the output of memtable compactions
      to higher levels to obey the grandparent constraint: i.e., we
      must never have a single file in level L that overlaps too
      much data in level L+1 (to avoid very expensive L-1 compactions).
    
      Added code to pretty-print internal keys.
    
    - Fixed bug where we would not detect overlap with files in
      level-0 because we were incorrectly using binary search
      on an array of files with overlapping ranges.
    
      Added "leveldb.sstables" property that can be used to dump
      all of the sstables and ranges that make up the db state.
    
    - Removing post_write_snapshot support.  Email to leveldb mailing
      list brought up no users, just confusion from one person about
      what it meant.
    
    - Fixing static_cast char to unsigned on BIG_ENDIAN platforms.
    
      Fixes Issue 35 and Issue 36.
    
    - Comment clarification to address leveldb Issue 37.
    
    - Change license in posix_logger.h to match other files.
    
    - A build problem where uint32 was used instead of uint32_t.
    
    Sync with upstream @24408625
    Bugfixes for iterator and documentation.
    
    - Fix bug in Iterator::Prev where it would return the wrong key.
      Fixes issues 29 and 30.
    
    - Added a tweak to testharness to allow running just some tests.
    
    - Fixing two minor documentation errors based on issues 28 and 25.
    
    - Cleanup; fix namespaces of export-to-C code.
      Also fix one "const char*" vs "char*" mismatch.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@48 62dab493-f737-651d-591e-8d6aee1b9529
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Upstream changes
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@15 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Release LevelDB 1.14
    
    Fix issues 200, 201
    
    Also,
    * Fix link to bigtable paper in docs.
    * New sstables will have the file extension .ldb. .sst files will
    continue to be recognized.
    * When building for iOS, use xcrun to execute the compiler. This may
    affect issue 177.
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    More changes from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@12 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Small fixes.
    
    Details:
    * Fix shared library building.
    * Reorganize linking commands so flags like --as-needed can be passed.
    * C binding exports version numbers.
    * Fix small typos in documention.
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Upstream changes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@16 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Small fixes.
    
    Details:
    * Fix shared library building.
    * Reorganize linking commands so flags like --as-needed can be passed.
    * C binding exports version numbers.
    * Fix small typos in documention.
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    C binding for leveldb, better readseq benchmark for SQLite.
    
    - Added a C binding for LevelDB.
      May be useful as a stable ABI that can be used by
      programs that keep leveldb in a shared library,
      or for JNI API.
    
    - Replaced SQLite's readseq benchmark to a more efficient version.
      SQLite readseq speeds increased by about a factor of 2x
      from the previous version. Also updated benchmark page to
      reflect readseq speed up.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@46 62dab493-f737-651d-591e-8d6aee1b9529
    Improved benchmark, fixed bugs and SQLite parameters.
    
    - Based on suggestions on the sqlite-users mailing list,
      we removed the superfluous index on the primary key
      for SQLite's benchmarks, and turned write-ahead logging
      ("WAL") on. This led to performance improvements for SQLite.
    
    - Based on a suggestion by Florian Weimer on the leveldb
      mailing list, we disabled hard drive write-caching via
      hdparm when testing synchronous writes. This led to
      performance losses for LevelDB and Kyoto TreeDB.
    
    - Fixed a mistake in 2.A.->Random where the bar sizes
      were switched for Kyoto TreeDB and SQLite.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@45 62dab493-f737-651d-591e-8d6aee1b9529
    Minor typos in benchmark page.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@44 62dab493-f737-651d-591e-8d6aee1b9529
    Minor edit in benchmark page.
    
    (Baseline comparison does not make sense for large values.)
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@43 62dab493-f737-651d-591e-8d6aee1b9529
    Adding doctype to benchmark page so Google Code displays it as HTML.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@41 62dab493-f737-651d-591e-8d6aee1b9529
    Adding FreeBSD support, removing Chromium files, adding benchmark.
    
    - LevelDB patch for FreeBSD. This resolves Issue 22.
      Contributed by dforsythe (thanks!).
    
    - Removing Chromium-specific files.
      They are now going to live in the Chromium repository.
    
    - Adding a benchmark page comparing LevelDB performance
      to SQLite and Kyoto Cabinet's TreeDB, along with
      code to generate the benchmarks.
      Thanks to Kevin Tseng for compiling the benchmarks,
      and Scott Hess and Mikio Hirabayashi for their
      help and advice.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@40 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    Remove static initializer; fix endian-ness detection; fix build on
    various platforms; improve android port speed.
    
    Avoid static initializer by using a new portability interface for
    thread-safe lazy initialization.  Custom ports will need to be
    extended to implement InitOnce/OnceType/LEVELDB_ONCE_INIT.
    
    Fix endian-ness detection (fixes Powerpc builds).
    
    Build related fixes:
    - Support platforms that have unversioned shared libraries.
    - Fix IOS build rules.
    
    Android improvements
    - Speed up atomic pointers
    - Share more code with port_posix.
    
    Do not spin in a tight loop attempting compactions if the file system
    is inaccessible (e.g., if kerberos tickets have expired or if it is out
    of space).
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    C binding for leveldb, better readseq benchmark for SQLite.
    
    - Added a C binding for LevelDB.
      May be useful as a stable ABI that can be used by
      programs that keep leveldb in a shared library,
      or for JNI API.
    
    - Replaced SQLite's readseq benchmark to a more efficient version.
      SQLite readseq speeds increased by about a factor of 2x
      from the previous version. Also updated benchmark page to
      reflect readseq speed up.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@46 62dab493-f737-651d-591e-8d6aee1b9529
    Improved benchmark, fixed bugs and SQLite parameters.
    
    - Based on suggestions on the sqlite-users mailing list,
      we removed the superfluous index on the primary key
      for SQLite's benchmarks, and turned write-ahead logging
      ("WAL") on. This led to performance improvements for SQLite.
    
    - Based on a suggestion by Florian Weimer on the leveldb
      mailing list, we disabled hard drive write-caching via
      hdparm when testing synchronous writes. This led to
      performance losses for LevelDB and Kyoto TreeDB.
    
    - Fixed a mistake in 2.A.->Random where the bar sizes
      were switched for Kyoto TreeDB and SQLite.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@45 62dab493-f737-651d-591e-8d6aee1b9529
    Adding FreeBSD support, removing Chromium files, adding benchmark.
    
    - LevelDB patch for FreeBSD. This resolves Issue 22.
      Contributed by dforsythe (thanks!).
    
    - Removing Chromium-specific files.
      They are now going to live in the Chromium repository.
    
    - Adding a benchmark page comparing LevelDB performance
      to SQLite and Kyoto Cabinet's TreeDB, along with
      code to generate the benchmarks.
      Thanks to Kevin Tseng for compiling the benchmarks,
      and Scott Hess and Mikio Hirabayashi for their
      help and advice.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@40 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Remove static initializer; fix endian-ness detection; fix build on
    various platforms; improve android port speed.
    
    Avoid static initializer by using a new portability interface for
    thread-safe lazy initialization.  Custom ports will need to be
    extended to implement InitOnce/OnceType/LEVELDB_ONCE_INIT.
    
    Fix endian-ness detection (fixes Powerpc builds).
    
    Build related fixes:
    - Support platforms that have unversioned shared libraries.
    - Fix IOS build rules.
    
    Android improvements
    - Speed up atomic pointers
    - Share more code with port_posix.
    
    Do not spin in a tight loop attempting compactions if the file system
    is inaccessible (e.g., if kerberos tickets have expired or if it is out
    of space).
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Adding FreeBSD support, removing Chromium files, adding benchmark.
    
    - LevelDB patch for FreeBSD. This resolves Issue 22.
      Contributed by dforsythe (thanks!).
    
    - Removing Chromium-specific files.
      They are now going to live in the Chromium repository.
    
    - Adding a benchmark page comparing LevelDB performance
      to SQLite and Kyoto Cabinet's TreeDB, along with
      code to generate the benchmarks.
      Thanks to Kevin Tseng for compiling the benchmarks,
      and Scott Hess and Mikio Hirabayashi for their
      help and advice.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@40 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    use mmap on 64-bit machines to speed-up reads; small build fixes
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Release leveldb 1.10
    
    Fixes issues
    147 - thanks feniksgordonfreeman
    153
    156
    166
    
    Additionally,
    * Remove calls to exit(1).
    * Fix unused-variable warnings from clang.
    * Fix possible overflow error related to num_restart value >= (2^32/4).
    * Add leveldbutil to .gitignore.
    * Add better log messages when Write is stalled on a compaction.
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    use mmap on 64-bit machines to speed-up reads; small build fixes
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Upstream changes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@16 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release leveldb 1.10
    
    Fixes issues
    147 - thanks feniksgordonfreeman
    153
    156
    166
    
    Additionally,
    * Remove calls to exit(1).
    * Fix unused-variable warnings from clang.
    * Fix possible overflow error related to num_restart value >= (2^32/4).
    * Add leveldbutil to .gitignore.
    * Add better log messages when Write is stalled on a compaction.
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    use mmap on 64-bit machines to speed-up reads; small build fixes
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Sun Studio support, and fix for test related memory fixes.
    
    - LevelDB patch for Sun Studio
      Based on a patch submitted by Theo Schlossnagle - thanks!
      This fixes Issue 17.
    
    - Fix a couple of test related memory leaks.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@38 62dab493-f737-651d-591e-8d6aee1b9529
    A number of smaller fixes and performance improvements:
    
    - Implemented Get() directly instead of building on top of a full
      merging iterator stack.  This speeds up the "readrandom" benchmark
      by up to 15-30%.
    
    - Fixed an opensource compilation problem.
      Added --db=<name> flag to control where the database is placed.
    
    - Automatically compact a file when we have done enough
      overlapping seeks to that file.
    
    - Fixed a performance bug where we would read from at least one
      file in a level even if none of the files overlapped the key
      being read.
    
    - Makefile fix for Mac OSX installations that have XCode 4 without XCode 3.
    
    - Unified the two occurrences of binary search in a file-list
      into one routine.
    
    - Found and fixed a bug where we would unnecessarily search the
      last file when looking for a key larger than all data in the
      level.
    
    - A fix to avoid the need for trivial move compactions and
      therefore gets rid of two out of five syncs in "fillseq".
    
    - Removed the MANIFEST file write when switching to a new
      memtable/log-file for a 10-20% improvement on fill speed on ext4.
    
    - Adding a SNAPPY setting in the Makefile for folks who have
      Snappy installed. Snappy compresses values and speeds up writes.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@32 62dab493-f737-651d-591e-8d6aee1b9529
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Upstream changes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@16 62dab493-f737-651d-591e-8d6aee1b9529
    Pull from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@14 62dab493-f737-651d-591e-8d6aee1b9529
    Sync in bug fixes
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@9 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    use mmap on 64-bit machines to speed-up reads; small build fixes
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Speed up Snappy uncompression, new Logger interface.
    
    - Removed one copy of an uncompressed block contents changing
      the signature of Snappy_Uncompress() so it uncompresses into a
      flat array instead of a std::string.
    
      Speeds up readrandom ~10%.
    
    - Instead of a combination of Env/WritableFile, we now have a
      Logger interface that can be easily overridden applications
      that want to supply their own logging.
    
    - Separated out the gcc and Sun Studio parts of atomic_pointer.h
      so we can use 'asm', 'volatile' keywords for Sun Studio.
    
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@39 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Pull from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@14 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Sync in bug fixes
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@9 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Clean up layering of storage/leveldb/...
    
    With these changes, this package should be properly cleaned up and not require
    any further changes.
    sync with upstream @21627589
    
    Minor changes:
    * Reformat the bodies of the iterator interface routines in IteratorWrapper to
      make them a bit easier to read
    * Switched the default in the leveldb makefile to be optimized mode, rather
      than debug mode
    * Fix build problem in chromium port
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@30 62dab493-f737-651d-591e-8d6aee1b9529
    Update from upstream @21551990
    
    * Patch LevelDB to build for OSX and iOS
    * Fix race condition in memtable iterator deletion.
    * Other small fixes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@29 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release LevelDB 1.15
    
    - switched from mmap based writing to simpler stdio based writing. Has a
      minor impact (0.5 microseconds) on microbenchmarks for asynchronous
      writes. Synchronous writes speed up from 30ms to 10ms on linux/ext4.
      Should be much more reliable on diverse platforms.
    - compaction errors now immediately put the database into a read-only
      mode (until it is re-opened). As a downside, a disk going out of
      space and then space being created will require a re-open to recover
      from, whereas previously that would happen automatically. On the
      plus side, many corruption possibilities go away.
    - force the DB to enter an error-state so that all future writes fail
      when a synchronous log write succeeds but the sync fails.
    - repair now regenerates sstables that exhibit problems
    - fix issue 218 - Use native memory barriers on OSX
    - fix issue 212 - QNX build is broken
    - fix build on iOS with xcode 5
    - make tests compile and pass on windows
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Update from upstream @21551990
    
    * Patch LevelDB to build for OSX and iOS
    * Fix race condition in memtable iterator deletion.
    * Other small fixes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@29 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    use mmap on 64-bit machines to speed-up reads; small build fixes
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Pull from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@14 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Release leveldb 1.10
    
    Fixes issues
    147 - thanks feniksgordonfreeman
    153
    156
    166
    
    Additionally,
    * Remove calls to exit(1).
    * Fix unused-variable warnings from clang.
    * Fix possible overflow error related to num_restart value >= (2^32/4).
    * Add leveldbutil to .gitignore.
    * Add better log messages when Write is stalled on a compaction.
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    use mmap on 64-bit machines to speed-up reads; small build fixes
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    fix build on at least linux
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@25 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release LevelDB 1.15
    
    - switched from mmap based writing to simpler stdio based writing. Has a
      minor impact (0.5 microseconds) on microbenchmarks for asynchronous
      writes. Synchronous writes speed up from 30ms to 10ms on linux/ext4.
      Should be much more reliable on diverse platforms.
    - compaction errors now immediately put the database into a read-only
      mode (until it is re-opened). As a downside, a disk going out of
      space and then space being created will require a re-open to recover
      from, whereas previously that would happen automatically. On the
      plus side, many corruption possibilities go away.
    - force the DB to enter an error-state so that all future writes fail
      when a synchronous log write succeeds but the sync fails.
    - repair now regenerates sstables that exhibit problems
    - fix issue 218 - Use native memory barriers on OSX
    - fix issue 212 - QNX build is broken
    - fix build on iOS with xcode 5
    - make tests compile and pass on windows
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release LevelDB 1.15
    
    - switched from mmap based writing to simpler stdio based writing. Has a
      minor impact (0.5 microseconds) on microbenchmarks for asynchronous
      writes. Synchronous writes speed up from 30ms to 10ms on linux/ext4.
      Should be much more reliable on diverse platforms.
    - compaction errors now immediately put the database into a read-only
      mode (until it is re-opened). As a downside, a disk going out of
      space and then space being created will require a re-open to recover
      from, whereas previously that would happen automatically. On the
      plus side, many corruption possibilities go away.
    - force the DB to enter an error-state so that all future writes fail
      when a synchronous log write succeeds but the sync fails.
    - repair now regenerates sstables that exhibit problems
    - fix issue 218 - Use native memory barriers on OSX
    - fix issue 212 - QNX build is broken
    - fix build on iOS with xcode 5
    - make tests compile and pass on windows
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release LevelDB 1.15
    
    - switched from mmap based writing to simpler stdio based writing. Has a
      minor impact (0.5 microseconds) on microbenchmarks for asynchronous
      writes. Synchronous writes speed up from 30ms to 10ms on linux/ext4.
      Should be much more reliable on diverse platforms.
    - compaction errors now immediately put the database into a read-only
      mode (until it is re-opened). As a downside, a disk going out of
      space and then space being created will require a re-open to recover
      from, whereas previously that would happen automatically. On the
      plus side, many corruption possibilities go away.
    - force the DB to enter an error-state so that all future writes fail
      when a synchronous log write succeeds but the sync fails.
    - repair now regenerates sstables that exhibit problems
    - fix issue 218 - Use native memory barriers on OSX
    - fix issue 212 - QNX build is broken
    - fix build on iOS with xcode 5
    - make tests compile and pass on windows
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    Release LevelDB 1.15
    
    - switched from mmap based writing to simpler stdio based writing. Has a
      minor impact (0.5 microseconds) on microbenchmarks for asynchronous
      writes. Synchronous writes speed up from 30ms to 10ms on linux/ext4.
      Should be much more reliable on diverse platforms.
    - compaction errors now immediately put the database into a read-only
      mode (until it is re-opened). As a downside, a disk going out of
      space and then space being created will require a re-open to recover
      from, whereas previously that would happen automatically. On the
      plus side, many corruption possibilities go away.
    - force the DB to enter an error-state so that all future writes fail
      when a synchronous log write succeeds but the sync fails.
    - repair now regenerates sstables that exhibit problems
    - fix issue 218 - Use native memory barriers on OSX
    - fix issue 212 - QNX build is broken
    - fix build on iOS with xcode 5
    - make tests compile and pass on windows
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Bugfixes for iterator and documentation.
    
    - Fix bug in Iterator::Prev where it would return the wrong key.
      Fixes issues 29 and 30.
    
    - Added a tweak to testharness to allow running just some tests.
    
    - Fixing two minor documentation errors based on issues 28 and 25.
    
    - Cleanup; fix namespaces of export-to-C code.
      Also fix one "const char*" vs "char*" mismatch.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@48 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Bugfixes for iterator and documentation.
    
    - Fix bug in Iterator::Prev where it would return the wrong key.
      Fixes issues 29 and 30.
    
    - Added a tweak to testharness to allow running just some tests.
    
    - Fixing two minor documentation errors based on issues 28 and 25.
    
    - Cleanup; fix namespaces of export-to-C code.
      Also fix one "const char*" vs "char*" mismatch.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@48 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release leveldb 1.10
    
    Fixes issues
    147 - thanks feniksgordonfreeman
    153
    156
    166
    
    Additionally,
    * Remove calls to exit(1).
    * Fix unused-variable warnings from clang.
    * Fix possible overflow error related to num_restart value >= (2^32/4).
    * Add leveldbutil to .gitignore.
    * Add better log messages when Write is stalled on a compaction.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Sync with upstream @23860137.
    
    Fix GCC -Wshadow warnings in LevelDB's public header files,
    reported by Dustin.
    
    Add in-memory Env implementation (helpers/memenv/*).
    This enables users to create LevelDB databases in-memory.
    
    Initialize ShardedLRUCache::last_id_ to zero.
    This fixes a Valgrind warning.
    
    (Also delete port/sha1_* which were removed upstream some time ago.)
    Bugfix for issue 33; reduce lock contention in Get(), parallel benchmarks.
    
    - Fix for issue 33 (non-null-terminated result from
      leveldb_property_value())
    
    - Support for running multiple instances of a benchmark in parallel.
    
    - Reduce lock contention on Get():
      (1) Do not hold the lock while searching memtables.
      (2) Shard block and table caches 16-ways.
    
      Benchmark for evaluating this change:
      $ db_bench --benchmarks=fillseq1,readrandom --threads=$n
      (fillseq1 is a small hack to make sure fillseq runs once regardless
      of number of threads specified on the command line).
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@49 62dab493-f737-651d-591e-8d6aee1b9529
    @23023120
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@47 62dab493-f737-651d-591e-8d6aee1b9529
    Platform detection during build, plus compatibility patches for machines without <cstdatomic>.
    
    This revision adds two major changes:
    1. build_detect_platform which generates build_config.mk
       with platform-dependent flags for the build process
    2. /port/atomic_pointer.h with anAtomicPointerimplementation
       for platforms without <cstdatomic>
    
    Some of this code is loosely based on patches submitted to the
    LevelDB mailing list at https://groups.google.com/forum/#!forum/leveldb
    Tip of the hat to Dave Smith and Edouard A, who both sent patches.
    
    The presence of Snappy (http://code.google.com/p/snappy/) and
    cstdatomic are now both detected in the build_detect_platform
    script (1.) which gets executing during make.
    
    For (2.), instead of broadly importing atomicops_* from Chromium or
    the Google performance tools, we chose to just implement AtomicPointer
    and the limited atomic load and store operations it needs.
    This resulted in much less code and fewer files - everything is
    contained in atomic_pointer.h.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@34 62dab493-f737-651d-591e-8d6aee1b9529
    Update from upstream @21551990
    
    * Patch LevelDB to build for OSX and iOS
    * Fix race condition in memtable iterator deletion.
    * Other small fixes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@29 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release LevelDB 1.14
    
    Fix issues 200, 201
    
    Also,
    * Fix link to bigtable paper in docs.
    * New sstables will have the file extension .ldb. .sst files will
    continue to be recognized.
    * When building for iOS, use xcrun to execute the compiler. This may
    affect issue 177.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    fixed issues 66 (leaking files on disk error)  and 68 (no sync of CURRENT file)
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    fixed issues 66 (leaking files on disk error)  and 68 (no sync of CURRENT file)
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Speed up Snappy uncompression, new Logger interface.
    
    - Removed one copy of an uncompressed block contents changing
      the signature of Snappy_Uncompress() so it uncompresses into a
      flat array instead of a std::string.
    
      Speeds up readrandom ~10%.
    
    - Instead of a combination of Env/WritableFile, we now have a
      Logger interface that can be easily overridden applications
      that want to supply their own logging.
    
    - Separated out the gcc and Sun Studio parts of atomic_pointer.h
      so we can use 'asm', 'volatile' keywords for Sun Studio.
    
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@39 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Remove static initializer; fix endian-ness detection; fix build on
    various platforms; improve android port speed.
    
    Avoid static initializer by using a new portability interface for
    thread-safe lazy initialization.  Custom ports will need to be
    extended to implement InitOnce/OnceType/LEVELDB_ONCE_INIT.
    
    Fix endian-ness detection (fixes Powerpc builds).
    
    Build related fixes:
    - Support platforms that have unversioned shared libraries.
    - Fix IOS build rules.
    
    Android improvements
    - Speed up atomic pointers
    - Share more code with port_posix.
    
    Do not spin in a tight loop attempting compactions if the file system
    is inaccessible (e.g., if kerberos tickets have expired or if it is out
    of space).
    Pass system's CFLAGS, remove exit time destructor, sstable bug fix.
    
    - Pass system's values of CFLAGS,LDFLAGS.
      Don't override OPT if it's already set.
      Original patch by Alessio Treglia <alessio@debian.org>:
      http://code.google.com/p/leveldb/issues/detail?id=27#c6
    
    - Remove 1 exit time destructor from leveldb.
      See http://crbug.com/101600
    
    - Fix problem where sstable building code would pass an
      internal key to the user comparator.
    
    (Sync with uptream at 25436817.)
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Sun Studio support, and fix for test related memory fixes.
    
    - LevelDB patch for Sun Studio
      Based on a patch submitted by Theo Schlossnagle - thanks!
      This fixes Issue 17.
    
    - Fix a couple of test related memory leaks.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@38 62dab493-f737-651d-591e-8d6aee1b9529
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Upstream changes
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@15 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Pull from upstream.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@14 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Make DB::Open fail if sst files are missing.
    
    Also, cleanup for Clang's -Wimplicit-fallthrough warning.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release LevelDB 1.15
    
    - switched from mmap based writing to simpler stdio based writing. Has a
      minor impact (0.5 microseconds) on microbenchmarks for asynchronous
      writes. Synchronous writes speed up from 30ms to 10ms on linux/ext4.
      Should be much more reliable on diverse platforms.
    - compaction errors now immediately put the database into a read-only
      mode (until it is re-opened). As a downside, a disk going out of
      space and then space being created will require a re-open to recover
      from, whereas previously that would happen automatically. On the
      plus side, many corruption possibilities go away.
    - force the DB to enter an error-state so that all future writes fail
      when a synchronous log write succeeds but the sync fails.
    - repair now regenerates sstables that exhibit problems
    - fix issue 218 - Use native memory barriers on OSX
    - fix issue 212 - QNX build is broken
    - fix build on iOS with xcode 5
    - make tests compile and pass on windows
    Release leveldb 1.11
    
    Fixes issues
    161
    174
    178
    
    As well as the issue reported by edouarda14@gmail.com about
    MissingSSTFile unit test failing on windows.
    Remove static initializer; fix endian-ness detection; fix build on
    various platforms; improve android port speed.
    
    Avoid static initializer by using a new portability interface for
    thread-safe lazy initialization.  Custom ports will need to be
    extended to implement InitOnce/OnceType/LEVELDB_ONCE_INIT.
    
    Fix endian-ness detection (fixes Powerpc builds).
    
    Build related fixes:
    - Support platforms that have unversioned shared libraries.
    - Fix IOS build rules.
    
    Android improvements
    - Speed up atomic pointers
    - Share more code with port_posix.
    
    Do not spin in a tight loop attempting compactions if the file system
    is inaccessible (e.g., if kerberos tickets have expired or if it is out
    of space).
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    LevelDB 1.13
    
    Fix issues 77, 87, 182, 190.
    
    Additionally, fix the bug described in
    https://groups.google.com/d/msg/leveldb/yL6h1mAOc20/vLU64RylIdMJ
    where a large contiguous keyspace of deleted data was not getting
    compacted.
    
    Also fix a bug where options.max_open_files was not getting clamped
    properly.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    @20776309
    * env_chromium.cc should not export symbols.
    * Fix MSVC warnings.
    * Removed large value support.
    * Fix broken reference to documentation file
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@24 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release LevelDB 1.15
    
    - switched from mmap based writing to simpler stdio based writing. Has a
      minor impact (0.5 microseconds) on microbenchmarks for asynchronous
      writes. Synchronous writes speed up from 30ms to 10ms on linux/ext4.
      Should be much more reliable on diverse platforms.
    - compaction errors now immediately put the database into a read-only
      mode (until it is re-opened). As a downside, a disk going out of
      space and then space being created will require a re-open to recover
      from, whereas previously that would happen automatically. On the
      plus side, many corruption possibilities go away.
    - force the DB to enter an error-state so that all future writes fail
      when a synchronous log write succeeds but the sync fails.
    - repair now regenerates sstables that exhibit problems
    - fix issue 218 - Use native memory barriers on OSX
    - fix issue 212 - QNX build is broken
    - fix build on iOS with xcode 5
    - make tests compile and pass on windows
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    A number of bugfixes:
    
    - Added DB::CompactRange() method.
    
      Changed manual compaction code so it breaks up compactions of
      big ranges into smaller compactions.
    
      Changed the code that pushes the output of memtable compactions
      to higher levels to obey the grandparent constraint: i.e., we
      must never have a single file in level L that overlaps too
      much data in level L+1 (to avoid very expensive L-1 compactions).
    
      Added code to pretty-print internal keys.
    
    - Fixed bug where we would not detect overlap with files in
      level-0 because we were incorrectly using binary search
      on an array of files with overlapping ranges.
    
      Added "leveldb.sstables" property that can be used to dump
      all of the sstables and ranges that make up the db state.
    
    - Removing post_write_snapshot support.  Email to leveldb mailing
      list brought up no users, just confusion from one person about
      what it meant.
    
    - Fixing static_cast char to unsigned on BIG_ENDIAN platforms.
    
      Fixes Issue 35 and Issue 36.
    
    - Comment clarification to address leveldb Issue 37.
    
    - Change license in posix_logger.h to match other files.
    
    - A build problem where uint32 was used instead of uint32_t.
    
    Sync with upstream @24408625
    Speed up Snappy uncompression, new Logger interface.
    
    - Removed one copy of an uncompressed block contents changing
      the signature of Snappy_Uncompress() so it uncompresses into a
      flat array instead of a std::string.
    
      Speeds up readrandom ~10%.
    
    - Instead of a combination of Env/WritableFile, we now have a
      Logger interface that can be easily overridden applications
      that want to supply their own logging.
    
    - Separated out the gcc and Sun Studio parts of atomic_pointer.h
      so we can use 'asm', 'volatile' keywords for Sun Studio.
    
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@39 62dab493-f737-651d-591e-8d6aee1b9529
    Release LevelDB 1.15
    
    - switched from mmap based writing to simpler stdio based writing. Has a
      minor impact (0.5 microseconds) on microbenchmarks for asynchronous
      writes. Synchronous writes speed up from 30ms to 10ms on linux/ext4.
      Should be much more reliable on diverse platforms.
    - compaction errors now immediately put the database into a read-only
      mode (until it is re-opened). As a downside, a disk going out of
      space and then space being created will require a re-open to recover
      from, whereas previously that would happen automatically. On the
      plus side, many corruption possibilities go away.
    - force the DB to enter an error-state so that all future writes fail
      when a synchronous log write succeeds but the sync fails.
    - repair now regenerates sstables that exhibit problems
    - fix issue 218 - Use native memory barriers on OSX
    - fix issue 212 - QNX build is broken
    - fix build on iOS with xcode 5
    - make tests compile and pass on windows
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Added bloom filter support.
    
    In particular, we add a new FilterPolicy class.  An instance
    of this class can be supplied in Options when opening a
    database.  If supplied, the instance is used to generate
    summaries of keys (e.g., a bloom filter) which are placed in
    sstables.  These summaries are consulted by DB::Get() so we
    can avoid reading sstable blocks that are guaranteed to not
    contain the key we are looking for.
    
    This change provides one implementation of FilterPolicy
    based on bloom filters.
    
    Other changes:
    - Updated version number to 1.4.
    - Some build tweaks.
    - C binding for CompactRange.
    - A few more benchmarks: deleteseq, deleterandom, readmissing, seekrandom.
    - Minor .gitignore update.
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Bugfix for issue 33; reduce lock contention in Get(), parallel benchmarks.
    
    - Fix for issue 33 (non-null-terminated result from
      leveldb_property_value())
    
    - Support for running multiple instances of a benchmark in parallel.
    
    - Reduce lock contention on Get():
      (1) Do not hold the lock while searching memtables.
      (2) Shard block and table caches 16-ways.
    
      Benchmark for evaluating this change:
      $ db_bench --benchmarks=fillseq1,readrandom --threads=$n
      (fillseq1 is a small hack to make sure fillseq runs once regardless
      of number of threads specified on the command line).
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@49 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    A number of bugfixes:
    
    - Added DB::CompactRange() method.
    
      Changed manual compaction code so it breaks up compactions of
      big ranges into smaller compactions.
    
      Changed the code that pushes the output of memtable compactions
      to higher levels to obey the grandparent constraint: i.e., we
      must never have a single file in level L that overlaps too
      much data in level L+1 (to avoid very expensive L-1 compactions).
    
      Added code to pretty-print internal keys.
    
    - Fixed bug where we would not detect overlap with files in
      level-0 because we were incorrectly using binary search
      on an array of files with overlapping ranges.
    
      Added "leveldb.sstables" property that can be used to dump
      all of the sstables and ranges that make up the db state.
    
    - Removing post_write_snapshot support.  Email to leveldb mailing
      list brought up no users, just confusion from one person about
      what it meant.
    
    - Fixing static_cast char to unsigned on BIG_ENDIAN platforms.
    
      Fixes Issue 35 and Issue 36.
    
    - Comment clarification to address leveldb Issue 37.
    
    - Change license in posix_logger.h to match other files.
    
    - A build problem where uint32 was used instead of uint32_t.
    
    Sync with upstream @24408625
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release 1.18
    
    Changes are:
    
    * Update version number to 1.18
    * Replace the basic fprintf call with a call to fwrite in order to
      work around the apparent compiler optimization/rewrite failure that we are
      seeing with the new toolchain/iOS SDKs provided with Xcode6 and iOS8.
    * Fix ALL the header guards.
    * Createed a README.md with the LevelDB project description.
    * A new CONTRIBUTING file.
    * Don't implicitly convert uint64_t to size_t or int.  Either preserve it as
      uint64_t, or explicitly cast. This fixes MSVC warnings about possible value
      truncation when compiling this code in Chromium.
    * Added a DumpFile() library function that encapsulates the guts of the
      "leveldbutil dump" command. This will allow clients to dump
      data to their log files instead of stdout. It will also allow clients to
      supply their own environment.
    * leveldb: Remove unused function 'ConsumeChar'.
    * leveldbutil: Remove unused member variables from WriteBatchItemPrinter.
    * OpenBSD, NetBSD and DragonflyBSD have _LITTLE_ENDIAN, so define
      PLATFORM_IS_LITTLE_ENDIAN like on FreeBSD. This fixes:
       * issue #143
       * issue #198
       * issue #249
    * Switch from <cstdatomic> to <atomic>. The former never made it into the
      standard and doesn't exist in modern gcc versions at all.  The later contains
      everything that leveldb was using from the former.
      This problem was noticed when porting to Portable Native Client where no memory
      barrier is defined.  The fact that <cstdatomic> is missing normally goes
      unnoticed since memory barriers are defined for most architectures.
    * Make Hash() treat its input as unsigned.  Before this change LevelDB files
      from platforms with different signedness of char were not compatible. This
      change fixes: issue #243
    * Verify checksums of index/meta/filter blocks when paranoid_checks set.
    * Invoke all tools for iOS with xcrun. (This was causing problems with the new
      XCode 5.1.1 image on pulse.)
    * include <sys/stat.h> only once, and fix the following linter warning:
      "Found C system header after C++ system header"
    * When encountering a corrupted table file, return Status::Corruption instead of
      Status::InvalidArgument.
    * Support cygwin as build platform, patch is from https://code.google.com/p/leveldb/issues/detail?id=188
    * Fix typo, merge patch from https://code.google.com/p/leveldb/issues/detail?id=159
    * Fix typos and comments, and address the following two issues:
      * issue #166
      * issue #241
    * Add missing db synchronize after "fillseq" in the benchmark.
    * Removed unused variable in SeekRandom: value (issue #201)
    Release LevelDB 1.15
    
    - switched from mmap based writing to simpler stdio based writing. Has a
      minor impact (0.5 microseconds) on microbenchmarks for asynchronous
      writes. Synchronous writes speed up from 30ms to 10ms on linux/ext4.
      Should be much more reliable on diverse platforms.
    - compaction errors now immediately put the database into a read-only
      mode (until it is re-opened). As a downside, a disk going out of
      space and then space being created will require a re-open to recover
      from, whereas previously that would happen automatically. On the
      plus side, many corruption possibilities go away.
    - force the DB to enter an error-state so that all future writes fail
      when a synchronous log write succeeds but the sync fails.
    - repair now regenerates sstables that exhibit problems
    - fix issue 218 - Use native memory barriers on OSX
    - fix issue 212 - QNX build is broken
    - fix build on iOS with xcode 5
    - make tests compile and pass on windows
    LevelDB 1.13
    
    Fix issues 77, 87, 182, 190.
    
    Additionally, fix the bug described in
    https://groups.google.com/d/msg/leveldb/yL6h1mAOc20/vLU64RylIdMJ
    where a large contiguous keyspace of deleted data was not getting
    compacted.
    
    Also fix a bug where options.max_open_files was not getting clamped
    properly.
    Release leveldb 1.11
    
    Fixes issues
    161
    174
    178
    
    As well as the issue reported by edouarda14@gmail.com about
    MissingSSTFile unit test failing on windows.
    Release leveldb 1.10
    
    Fixes issues
    147 - thanks feniksgordonfreeman
    153
    156
    166
    
    Additionally,
    * Remove calls to exit(1).
    * Fix unused-variable warnings from clang.
    * Fix possible overflow error related to num_restart value >= (2^32/4).
    * Add leveldbutil to .gitignore.
    * Add better log messages when Write is stalled on a compaction.
    Update to leveldb 1.6
    
    Highlights
    ----------
    Mmap at most 1000 files on Posix to improve performance for large databases.
    Support for more architectures (thanks to Alexander K.)
    
    Building and porting
    --------------------
    HP/UX support (issue 126)
    AtomicPointer for ia64 (issue 123)
    Sparc v9 support (issue 124)
    Atomic ops for powerpc
    Use -fno-builtin-memcmp only when using g++
    Simplify IOS build rules (issue 114)
    Use CXXFLAGS instead of CFLAGS when invoking C++ compiler (issue 118)
    Fix snappy shared library problem (issue 94)
    Fix shared library installation path regression
    Endian-ness detection tweak for FreeBSD
    
    Bug fixes
    ---------
    Stop ignoring FLAGS_open_files in db_bench
    Make bloom test behavior agnostic to endian-ness
    
    Performance
    -----------
    Limit number of mmapped files to 1000 to improve perf for large dbs
    Do not delay for 1 second on shutdown path (issue 125)
    
    Misc
    ----
    Make InMemoryEnv return a no-op logger
    C binding now has a wrapper for free (issue 117)
    Add thread-safety annotations
    Added an in-process lock table (issue 120)
    Make RandomAccessFile and SequentialFile non-copyable
    use mmap on 64-bit machines to speed-up reads; small build fixes
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Speed up Snappy uncompression, new Logger interface.
    
    - Removed one copy of an uncompressed block contents changing
      the signature of Snappy_Uncompress() so it uncompresses into a
      flat array instead of a std::string.
    
      Speeds up readrandom ~10%.
    
    - Instead of a combination of Env/WritableFile, we now have a
      Logger interface that can be easily overridden applications
      that want to supply their own logging.
    
    - Separated out the gcc and Sun Studio parts of atomic_pointer.h
      so we can use 'asm', 'volatile' keywords for Sun Studio.
    
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@39 62dab493-f737-651d-591e-8d6aee1b9529
    Small tweaks and bugfixes for Issue 18 and 19.
    
    Slight tweak to the no-overlap optimization: only push to
    level 2 to reduce the amount of wasted space when the same
    small key range is being repeatedly overwritten.
    
    Fix for Issue 18: Avoid failure on Windows by avoiding
    deletion of lock file until the end of DestroyDB().
    
    Fix for Issue 19: Disregard sequence numbers when checking for
    overlap in sstable ranges. This fixes issue 19: when writing
    the same key over and over again, we would generate a sequence
    of sstables that were never merged together since their sequence
    numbers were disjoint.
    
    Don't ignore map/unmap error checks.
    
    Miscellaneous fixes for small problems Sanjay found while diagnosing
    issue/9 and issue/16 (corruption_testr failures).
    - log::Reader reports the record type when it finds an unexpected type.
    - log::Reader no longer reports an error when it encounters an expected
      zero record regardless of the setting of the "checksum" flag.
    - Added a missing forward declaration.
    - Documented a side-effects of larger write buffer sizes
      (longer recovery time).
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@37 62dab493-f737-651d-591e-8d6aee1b9529
    sync with upstream @ 21409451
    
    Check the NEWS file for details of what changed.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@28 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Upstream changes.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@16 62dab493-f737-651d-591e-8d6aee1b9529
    Sync in bug fixes
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@9 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Bugfix for issue 33; reduce lock contention in Get(), parallel benchmarks.
    
    - Fix for issue 33 (non-null-terminated result from
      leveldb_property_value())
    
    - Support for running multiple instances of a benchmark in parallel.
    
    - Reduce lock contention on Get():
      (1) Do not hold the lock while searching memtables.
      (2) Shard block and table caches 16-ways.
    
      Benchmark for evaluating this change:
      $ db_bench --benchmarks=fillseq1,readrandom --threads=$n
      (fillseq1 is a small hack to make sure fillseq runs once regardless
      of number of threads specified on the command line).
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@49 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    A number of fixes:
    
    - Replace raw slice comparison with a call to user comparator.
      Added test for custom comparators.
    
    - Fix end of namespace comments.
    
    - Fixed bug in picking inputs for a level-0 compaction.
    
      When finding overlapping files, the covered range may expand
      as files are added to the input set.  We now correctly expand
      the range when this happens instead of continuing to use the
      old range.  For example, suppose L0 contains files with the
      following ranges:
    
          F1: a .. d
          F2:    c .. g
          F3:       f .. j
    
      and the initial compaction target is F3.  We used to search
      for range f..j which yielded {F2,F3}.  However we now expand
      the range as soon as another file is added.  In this case,
      when F2 is added, we expand the range to c..j and restart the
      search.  That picks up file F1 as well.
    
      This change fixes a bug related to deleted keys showing up
      incorrectly after a compaction as described in Issue 44.
    
    (Sync with upstream @25072954)
    Bugfix for issue 33; reduce lock contention in Get(), parallel benchmarks.
    
    - Fix for issue 33 (non-null-terminated result from
      leveldb_property_value())
    
    - Support for running multiple instances of a benchmark in parallel.
    
    - Reduce lock contention on Get():
      (1) Do not hold the lock while searching memtables.
      (2) Shard block and table caches 16-ways.
    
      Benchmark for evaluating this change:
      $ db_bench --benchmarks=fillseq1,readrandom --threads=$n
      (fillseq1 is a small hack to make sure fillseq runs once regardless
      of number of threads specified on the command line).
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@49 62dab493-f737-651d-591e-8d6aee1b9529
    reverting disastrous MOE commit, returning to r21
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@23 62dab493-f737-651d-591e-8d6aee1b9529
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@22 62dab493-f737-651d-591e-8d6aee1b9529
    chmod a-x
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@21 62dab493-f737-651d-591e-8d6aee1b9529
    @20602303.  Default file permission is now 755.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@20 62dab493-f737-651d-591e-8d6aee1b9529
    Move include files into a leveldb subdir.
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@18 62dab493-f737-651d-591e-8d6aee1b9529
    Initial checkin.
    
    
    
    git-svn-id: https://leveldb.googlecode.com/svn/trunk@2 62dab493-f737-651d-591e-8d6aee1b9529
    Release LevelDB 1.14
    
    Fix issues 200, 201
    
    Also,
    * Fix link to bigtable paper in docs.
    * New sstables will have the file extension .ldb. .sst files will
    continue to be recognized.
    * When building for iOS, use xcrun to execute the compiler. This may
    affect issue 177.
    Release leveldb 1.12
    
    Non-functional changes only:
    1) Add Kevin Regan to the AUTHORS file
    2) Add standard license header to issues/issue178_test.cc
    Release leveldb 1.11
    
    Fixes issues
    161
    174
    178
    
    As well as the issue reported by edouarda14@gmail.com about
    MissingSSTFile unit test failing on windows.
